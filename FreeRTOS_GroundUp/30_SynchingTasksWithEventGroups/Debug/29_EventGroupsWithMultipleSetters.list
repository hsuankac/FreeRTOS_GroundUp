
29_EventGroupsWithMultipleSetters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080060e0  080060e0  000160e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006250  08006250  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006250  08006250  00016250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006258  08006258  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006258  08006258  00016258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800625c  0800625c  0001625c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a10  20000074  080062d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a84  080062d4  00024a84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019538  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037d3  00000000  00000000  000395dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0003cdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  0003e358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005014  00000000  00000000  0003f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018208  00000000  00000000  000447bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc94d  00000000  00000000  0005c9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139311  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006144  00000000  00000000  00139364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080060c8 	.word	0x080060c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080060c8 	.word	0x080060c8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
EventGroupHandle_t xEventGroup;

const TickType_t xDelay500ms = pdMS_TO_TICKS(500UL);

int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af02      	add	r7, sp, #8

  HAL_Init();
 800051a:	f000 fbbb 	bl	8000c94 <HAL_Init>
  SystemClock_Config();
 800051e:	f000 f8a7 	bl	8000670 <SystemClock_Config>
  MX_GPIO_Init();
 8000522:	f000 f913 	bl	800074c <MX_GPIO_Init>
  USART2_UART_TX_Init();
 8000526:	f000 fb43 	bl	8000bb0 <USART2_UART_TX_Init>
  printf("system initializing....\r\n");
 800052a:	4819      	ldr	r0, [pc, #100]	; (8000590 <main+0x7c>)
 800052c:	f005 f93c 	bl	80057a8 <puts>

  xEventGroup = xEventGroupCreate();
 8000530:	f002 fa50 	bl	80029d4 <xEventGroupCreate>
 8000534:	4603      	mov	r3, r0
 8000536:	4a17      	ldr	r2, [pc, #92]	; (8000594 <main+0x80>)
 8000538:	6013      	str	r3, [r2, #0]
  xTaskCreate(InputTask1, "InputTask 1", 100, NULL, 1, NULL);
 800053a:	2300      	movs	r3, #0
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2301      	movs	r3, #1
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2300      	movs	r3, #0
 8000544:	2264      	movs	r2, #100	; 0x64
 8000546:	4914      	ldr	r1, [pc, #80]	; (8000598 <main+0x84>)
 8000548:	4814      	ldr	r0, [pc, #80]	; (800059c <main+0x88>)
 800054a:	f003 f9d6 	bl	80038fa <xTaskCreate>
  xTaskCreate(InputTask2, "InputTask 2", 100, NULL, 1, NULL);
 800054e:	2300      	movs	r3, #0
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2300      	movs	r3, #0
 8000558:	2264      	movs	r2, #100	; 0x64
 800055a:	4911      	ldr	r1, [pc, #68]	; (80005a0 <main+0x8c>)
 800055c:	4811      	ldr	r0, [pc, #68]	; (80005a4 <main+0x90>)
 800055e:	f003 f9cc 	bl	80038fa <xTaskCreate>
  xTaskCreate(InputTask3, "InputTask 3", 100, NULL, 1, NULL);
 8000562:	2300      	movs	r3, #0
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2301      	movs	r3, #1
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2300      	movs	r3, #0
 800056c:	2264      	movs	r2, #100	; 0x64
 800056e:	490e      	ldr	r1, [pc, #56]	; (80005a8 <main+0x94>)
 8000570:	480e      	ldr	r0, [pc, #56]	; (80005ac <main+0x98>)
 8000572:	f003 f9c2 	bl	80038fa <xTaskCreate>

  xTaskCreate(OutputTask, "OutputTask", 100, NULL, 1, NULL);
 8000576:	2300      	movs	r3, #0
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2301      	movs	r3, #1
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2300      	movs	r3, #0
 8000580:	2264      	movs	r2, #100	; 0x64
 8000582:	490b      	ldr	r1, [pc, #44]	; (80005b0 <main+0x9c>)
 8000584:	480b      	ldr	r0, [pc, #44]	; (80005b4 <main+0xa0>)
 8000586:	f003 f9b8 	bl	80038fa <xTaskCreate>

  vTaskStartScheduler();
 800058a:	f003 fafb 	bl	8003b84 <vTaskStartScheduler>

  while (1)
 800058e:	e7fe      	b.n	800058e <main+0x7a>
 8000590:	080060e0 	.word	0x080060e0
 8000594:	20000090 	.word	0x20000090
 8000598:	080060fc 	.word	0x080060fc
 800059c:	080005b9 	.word	0x080005b9
 80005a0:	08006108 	.word	0x08006108
 80005a4:	080005d5 	.word	0x080005d5
 80005a8:	08006114 	.word	0x08006114
 80005ac:	080005f1 	.word	0x080005f1
 80005b0:	08006120 	.word	0x08006120
 80005b4:	0800060d 	.word	0x0800060d

080005b8 <InputTask1>:

  }
}

void InputTask1(void *pvParameters)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//Do something....
		xEventGroupSetBits(xEventGroup, TASK1_BIT);
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <InputTask1+0x18>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2101      	movs	r1, #1
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 faec 	bl	8002ba4 <xEventGroupSetBits>
 80005cc:	e7f8      	b.n	80005c0 <InputTask1+0x8>
 80005ce:	bf00      	nop
 80005d0:	20000090 	.word	0x20000090

080005d4 <InputTask2>:
	}
}

void InputTask2(void *pvParameters)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//Do something....
		xEventGroupSetBits(xEventGroup, TASK2_BIT);
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <InputTask2+0x18>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2102      	movs	r1, #2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fade 	bl	8002ba4 <xEventGroupSetBits>
 80005e8:	e7f8      	b.n	80005dc <InputTask2+0x8>
 80005ea:	bf00      	nop
 80005ec:	20000090 	.word	0x20000090

080005f0 <InputTask3>:
	}
}

void InputTask3(void *pvParameters)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//Do something....
		xEventGroupSetBits(xEventGroup, TASK3_BIT);
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <InputTask3+0x18>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2104      	movs	r1, #4
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fad0 	bl	8002ba4 <xEventGroupSetBits>
 8000604:	e7f8      	b.n	80005f8 <InputTask3+0x8>
 8000606:	bf00      	nop
 8000608:	20000090 	.word	0x20000090

0800060c <OutputTask>:
	}
}

void OutputTask(void *pvParameters)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af02      	add	r7, sp, #8
 8000612:	6078      	str	r0, [r7, #4]
	const EventBits_t xBitsToWaitFor = (TASK1_BIT | TASK2_BIT | TASK3_BIT);
 8000614:	2307      	movs	r3, #7
 8000616:	60fb      	str	r3, [r7, #12]
	EventBits_t xEventGroupValue;

	while(1)
	{
		xEventGroupValue = xEventGroupWaitBits(xEventGroup, xBitsToWaitFor, pdTRUE, pdFALSE, portMAX_DELAY);
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <OutputTask+0x54>)
 800061a:	6818      	ldr	r0, [r3, #0]
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2300      	movs	r3, #0
 8000624:	2201      	movs	r2, #1
 8000626:	68f9      	ldr	r1, [r7, #12]
 8000628:	f002 f9ee 	bl	8002a08 <xEventGroupWaitBits>
 800062c:	60b8      	str	r0, [r7, #8]

		if((xEventGroupValue & TASK1_BIT) != 0)
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <OutputTask+0x32>
		{
			printf("BIT READING TASK : EVENT BIT 0 SET - TASK 1 \r\n");
 8000638:	480a      	ldr	r0, [pc, #40]	; (8000664 <OutputTask+0x58>)
 800063a:	f005 f8b5 	bl	80057a8 <puts>
		}

		if((xEventGroupValue & TASK2_BIT) != 0)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	f003 0302 	and.w	r3, r3, #2
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <OutputTask+0x42>
		{
			printf("BIT READING TASK : EVENT BIT 1 SET - TASK 2 \r\n");
 8000648:	4807      	ldr	r0, [pc, #28]	; (8000668 <OutputTask+0x5c>)
 800064a:	f005 f8ad 	bl	80057a8 <puts>
		}

		if((xEventGroupValue & TASK3_BIT) != 0)
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	f003 0304 	and.w	r3, r3, #4
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0df      	beq.n	8000618 <OutputTask+0xc>
		{
			printf("BIT READING TASK : EVENT BIT 2 SET - TASK 3 \r\n");
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <OutputTask+0x60>)
 800065a:	f005 f8a5 	bl	80057a8 <puts>
		xEventGroupValue = xEventGroupWaitBits(xEventGroup, xBitsToWaitFor, pdTRUE, pdFALSE, portMAX_DELAY);
 800065e:	e7db      	b.n	8000618 <OutputTask+0xc>
 8000660:	20000090 	.word	0x20000090
 8000664:	0800612c 	.word	0x0800612c
 8000668:	0800615c 	.word	0x0800615c
 800066c:	0800618c 	.word	0x0800618c

08000670 <SystemClock_Config>:
	}
}


void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	; 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	2234      	movs	r2, #52	; 0x34
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f005 f81c 	bl	80056bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <SystemClock_Config+0xd4>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	4a29      	ldr	r2, [pc, #164]	; (8000744 <SystemClock_Config+0xd4>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	; 0x40
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <SystemClock_Config+0xd4>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	4b24      	ldr	r3, [pc, #144]	; (8000748 <SystemClock_Config+0xd8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006bc:	4a22      	ldr	r2, [pc, #136]	; (8000748 <SystemClock_Config+0xd8>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <SystemClock_Config+0xd8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006e4:	2310      	movs	r3, #16
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ee:	2304      	movs	r3, #4
 80006f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 f916 	bl	8001930 <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800070a:	f000 f88f 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2102      	movs	r1, #2
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fd84 	bl	8001238 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000736:	f000 f879 	bl	800082c <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_GPIO_Init+0xb4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a25      	ldr	r2, [pc, #148]	; (8000800 <MX_GPIO_Init+0xb4>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_GPIO_Init+0xb4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_GPIO_Init+0xb4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <MX_GPIO_Init+0xb4>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_GPIO_Init+0xb4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_GPIO_Init+0xb4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a17      	ldr	r2, [pc, #92]	; (8000800 <MX_GPIO_Init+0xb4>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_GPIO_Init+0xb4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_GPIO_Init+0xb4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a10      	ldr	r2, [pc, #64]	; (8000800 <MX_GPIO_Init+0xb4>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_GPIO_Init+0xb4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2120      	movs	r1, #32
 80007d6:	480b      	ldr	r0, [pc, #44]	; (8000804 <MX_GPIO_Init+0xb8>)
 80007d8:	f000 fd14 	bl	8001204 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = LD2_Pin;
 80007dc:	2320      	movs	r3, #32
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_GPIO_Init+0xb8>)
 80007f4:	f000 fb72 	bl	8000edc <HAL_GPIO_Init>

}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000

08000808 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d101      	bne.n	800081e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800081a:	f000 fa5d 	bl	8000cd8 <HAL_IncTick>
  }

}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40010000 	.word	0x40010000

0800082c <Error_Handler>:

void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_MspInit+0x54>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	4a11      	ldr	r2, [pc, #68]	; (800088c <HAL_MspInit+0x54>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	6453      	str	r3, [r2, #68]	; 0x44
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_MspInit+0x54>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <HAL_MspInit+0x54>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <HAL_MspInit+0x54>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_MspInit+0x54>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	210f      	movs	r1, #15
 800087a:	f06f 0001 	mvn.w	r0, #1
 800087e:	f000 fb03 	bl	8000e88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a19      	ldr	r2, [pc, #100]	; (8000914 <HAL_UART_MspInit+0x84>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d12b      	bne.n	800090a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_UART_MspInit+0x88>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a17      	ldr	r2, [pc, #92]	; (8000918 <HAL_UART_MspInit+0x88>)
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_UART_MspInit+0x88>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_UART_MspInit+0x88>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a10      	ldr	r2, [pc, #64]	; (8000918 <HAL_UART_MspInit+0x88>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_UART_MspInit+0x88>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ea:	230c      	movs	r3, #12
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008fa:	2307      	movs	r3, #7
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <HAL_UART_MspInit+0x8c>)
 8000906:	f000 fae9 	bl	8000edc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	; 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40004400 	.word	0x40004400
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000

08000920 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	; 0x30
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	4b2e      	ldr	r3, [pc, #184]	; (80009f0 <HAL_InitTick+0xd0>)
 8000936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000938:	4a2d      	ldr	r2, [pc, #180]	; (80009f0 <HAL_InitTick+0xd0>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6453      	str	r3, [r2, #68]	; 0x44
 8000940:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <HAL_InitTick+0xd0>)
 8000942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800094c:	f107 020c 	add.w	r2, r7, #12
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f000 fd88 	bl	800146c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800095c:	f000 fd72 	bl	8001444 <HAL_RCC_GetPCLK2Freq>
 8000960:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000964:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <HAL_InitTick+0xd4>)
 8000966:	fba2 2303 	umull	r2, r3, r2, r3
 800096a:	0c9b      	lsrs	r3, r3, #18
 800096c:	3b01      	subs	r3, #1
 800096e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <HAL_InitTick+0xd8>)
 8000972:	4a22      	ldr	r2, [pc, #136]	; (80009fc <HAL_InitTick+0xdc>)
 8000974:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <HAL_InitTick+0xd8>)
 8000978:	f240 32e7 	movw	r2, #999	; 0x3e7
 800097c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800097e:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <HAL_InitTick+0xd8>)
 8000980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000982:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <HAL_InitTick+0xd8>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <HAL_InitTick+0xd8>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <HAL_InitTick+0xd8>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000996:	4818      	ldr	r0, [pc, #96]	; (80009f8 <HAL_InitTick+0xd8>)
 8000998:	f001 fa68 	bl	8001e6c <HAL_TIM_Base_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d11b      	bne.n	80009e2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009aa:	4813      	ldr	r0, [pc, #76]	; (80009f8 <HAL_InitTick+0xd8>)
 80009ac:	f001 fab8 	bl	8001f20 <HAL_TIM_Base_Start_IT>
 80009b0:	4603      	mov	r3, r0
 80009b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d111      	bne.n	80009e2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009be:	2019      	movs	r0, #25
 80009c0:	f000 fa7e 	bl	8000ec0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b0f      	cmp	r3, #15
 80009c8:	d808      	bhi.n	80009dc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009ca:	2200      	movs	r2, #0
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	2019      	movs	r0, #25
 80009d0:	f000 fa5a 	bl	8000e88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d4:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <HAL_InitTick+0xe0>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	e002      	b.n	80009e2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3730      	adds	r7, #48	; 0x30
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	431bde83 	.word	0x431bde83
 80009f8:	20000094 	.word	0x20000094
 80009fc:	40010000 	.word	0x40010000
 8000a00:	20000004 	.word	0x20000004

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <NMI_Handler+0x4>

08000a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <MemManage_Handler+0x4>

08000a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a36:	f001 fae3 	bl	8002000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000094 	.word	0x20000094

08000a44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	e00a      	b.n	8000a6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a56:	f3af 8000 	nop.w
 8000a5a:	4601      	mov	r1, r0
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	60ba      	str	r2, [r7, #8]
 8000a62:	b2ca      	uxtb	r2, r1
 8000a64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	dbf0      	blt.n	8000a56 <_read+0x12>
  }

  return len;
 8000a74:	687b      	ldr	r3, [r7, #4]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b086      	sub	sp, #24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	60f8      	str	r0, [r7, #12]
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	e009      	b.n	8000aa4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	60ba      	str	r2, [r7, #8]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 f8c5 	bl	8000c28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	dbf1      	blt.n	8000a90 <_write+0x12>
  }
  return len;
 8000aac:	687b      	ldr	r3, [r7, #4]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <_close>:

int _close(int file)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ade:	605a      	str	r2, [r3, #4]
  return 0;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <_isatty>:

int _isatty(int file)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <_sbrk+0x5c>)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <_sbrk+0x60>)
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <_sbrk+0x64>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <_sbrk+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d207      	bcs.n	8000b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b50:	f004 fd7c 	bl	800564c <__errno>
 8000b54:	4603      	mov	r3, r0
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20020000 	.word	0x20020000
 8000b80:	00000400 	.word	0x00000400
 8000b84:	200000dc 	.word	0x200000dc
 8000b88:	20004a88 	.word	0x20004a88

08000b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <USART2_UART_TX_Init>:


UART_HandleTypeDef huart2;

void USART2_UART_TX_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <USART2_UART_TX_Init+0x40>)
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <USART2_UART_TX_Init+0x44>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <USART2_UART_TX_Init+0x40>)
 8000bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <USART2_UART_TX_Init+0x40>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <USART2_UART_TX_Init+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <USART2_UART_TX_Init+0x40>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <USART2_UART_TX_Init+0x40>)
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <USART2_UART_TX_Init+0x40>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <USART2_UART_TX_Init+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be6:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <USART2_UART_TX_Init+0x40>)
 8000be8:	f001 fbee 	bl	80023c8 <HAL_UART_Init>
  {
  }
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200000e0 	.word	0x200000e0
 8000bf4:	40004400 	.word	0x40004400

08000bf8 <USART2_write>:
  {
  }
}

int USART2_write(int ch)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & USART_SR_TXE)){}
 8000c00:	bf00      	nop
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <USART2_write+0x2c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f9      	beq.n	8000c02 <USART2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <USART2_write+0x2c>)
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	6053      	str	r3, [r2, #4]
	return ch;
 8000c16:	687b      	ldr	r3, [r7, #4]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40004400 	.word	0x40004400

08000c28 <__io_putchar>:
	while(!(USART2->SR & 0x0020)){}
	return USART2 -> DR;
}

int __io_putchar(int ch)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	USART2_write(ch);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ffe1 	bl	8000bf8 <USART2_write>
	return ch;
 8000c36:	687b      	ldr	r3, [r7, #4]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c46:	490e      	ldr	r1, [pc, #56]	; (8000c80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c48:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c5c:	4c0b      	ldr	r4, [pc, #44]	; (8000c8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c6a:	f7ff ff8f 	bl	8000b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f004 fcf3 	bl	8005658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fc4f 	bl	8000514 <main>
  bx  lr    
 8000c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c84:	08006260 	.word	0x08006260
  ldr r2, =_sbss
 8000c88:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c8c:	20004a84 	.word	0x20004a84

08000c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <HAL_Init+0x40>)
 8000c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <HAL_Init+0x40>)
 8000caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_Init+0x40>)
 8000cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f8d8 	bl	8000e72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc2:	200f      	movs	r0, #15
 8000cc4:	f7ff fe2c 	bl	8000920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fdb6 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023c00 	.word	0x40023c00

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000124 	.word	0x20000124

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000124 	.word	0x20000124

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4907      	ldr	r1, [pc, #28]	; (8000db4 <__NVIC_EnableIRQ+0x38>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	; (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ff4c 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9a:	f7ff ff61 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000e9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	68b9      	ldr	r1, [r7, #8]
 8000ea4:	6978      	ldr	r0, [r7, #20]
 8000ea6:	f7ff ffb1 	bl	8000e0c <NVIC_EncodePriority>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff80 	bl	8000db8 <__NVIC_SetPriority>
}
 8000eb8:	bf00      	nop
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff54 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
 8000ef6:	e165      	b.n	80011c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	f040 8154 	bne.w	80011be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d005      	beq.n	8000f2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d130      	bne.n	8000f90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	091b      	lsrs	r3, r3, #4
 8000f7a:	f003 0201 	and.w	r2, r3, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	d017      	beq.n	8000fcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d123      	bne.n	8001020 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	08da      	lsrs	r2, r3, #3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3208      	adds	r2, #8
 8000fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	f003 0307 	and.w	r3, r3, #7
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	220f      	movs	r2, #15
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	691a      	ldr	r2, [r3, #16]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	08da      	lsrs	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3208      	adds	r2, #8
 800101a:	69b9      	ldr	r1, [r7, #24]
 800101c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0203 	and.w	r2, r3, #3
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800105c:	2b00      	cmp	r3, #0
 800105e:	f000 80ae 	beq.w	80011be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b5d      	ldr	r3, [pc, #372]	; (80011dc <HAL_GPIO_Init+0x300>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a5c      	ldr	r2, [pc, #368]	; (80011dc <HAL_GPIO_Init+0x300>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b5a      	ldr	r3, [pc, #360]	; (80011dc <HAL_GPIO_Init+0x300>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800107e:	4a58      	ldr	r2, [pc, #352]	; (80011e0 <HAL_GPIO_Init+0x304>)
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3302      	adds	r3, #2
 8001086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	220f      	movs	r2, #15
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4f      	ldr	r2, [pc, #316]	; (80011e4 <HAL_GPIO_Init+0x308>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d025      	beq.n	80010f6 <HAL_GPIO_Init+0x21a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4e      	ldr	r2, [pc, #312]	; (80011e8 <HAL_GPIO_Init+0x30c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d01f      	beq.n	80010f2 <HAL_GPIO_Init+0x216>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4d      	ldr	r2, [pc, #308]	; (80011ec <HAL_GPIO_Init+0x310>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d019      	beq.n	80010ee <HAL_GPIO_Init+0x212>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4c      	ldr	r2, [pc, #304]	; (80011f0 <HAL_GPIO_Init+0x314>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0x20e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4b      	ldr	r2, [pc, #300]	; (80011f4 <HAL_GPIO_Init+0x318>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00d      	beq.n	80010e6 <HAL_GPIO_Init+0x20a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4a      	ldr	r2, [pc, #296]	; (80011f8 <HAL_GPIO_Init+0x31c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0x206>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a49      	ldr	r2, [pc, #292]	; (80011fc <HAL_GPIO_Init+0x320>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_GPIO_Init+0x202>
 80010da:	2306      	movs	r3, #6
 80010dc:	e00c      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010de:	2307      	movs	r3, #7
 80010e0:	e00a      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010e2:	2305      	movs	r3, #5
 80010e4:	e008      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010e6:	2304      	movs	r3, #4
 80010e8:	e006      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010ea:	2303      	movs	r3, #3
 80010ec:	e004      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e002      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010f6:	2300      	movs	r3, #0
 80010f8:	69fa      	ldr	r2, [r7, #28]
 80010fa:	f002 0203 	and.w	r2, r2, #3
 80010fe:	0092      	lsls	r2, r2, #2
 8001100:	4093      	lsls	r3, r2
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001108:	4935      	ldr	r1, [pc, #212]	; (80011e0 <HAL_GPIO_Init+0x304>)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	3302      	adds	r3, #2
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001116:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <HAL_GPIO_Init+0x324>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800113a:	4a31      	ldr	r2, [pc, #196]	; (8001200 <HAL_GPIO_Init+0x324>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001140:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <HAL_GPIO_Init+0x324>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001164:	4a26      	ldr	r2, [pc, #152]	; (8001200 <HAL_GPIO_Init+0x324>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <HAL_GPIO_Init+0x324>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800118e:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <HAL_GPIO_Init+0x324>)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_GPIO_Init+0x324>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b8:	4a11      	ldr	r2, [pc, #68]	; (8001200 <HAL_GPIO_Init+0x324>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3301      	adds	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	2b0f      	cmp	r3, #15
 80011c8:	f67f ae96 	bls.w	8000ef8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40013800 	.word	0x40013800
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020400 	.word	0x40020400
 80011ec:	40020800 	.word	0x40020800
 80011f0:	40020c00 	.word	0x40020c00
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40021400 	.word	0x40021400
 80011fc:	40021800 	.word	0x40021800
 8001200:	40013c00 	.word	0x40013c00

08001204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
 8001210:	4613      	mov	r3, r2
 8001212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001214:	787b      	ldrb	r3, [r7, #1]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001220:	e003      	b.n	800122a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	041a      	lsls	r2, r3, #16
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	619a      	str	r2, [r3, #24]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e0cc      	b.n	80013e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800124c:	4b68      	ldr	r3, [pc, #416]	; (80013f0 <HAL_RCC_ClockConfig+0x1b8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 030f 	and.w	r3, r3, #15
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d90c      	bls.n	8001274 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125a:	4b65      	ldr	r3, [pc, #404]	; (80013f0 <HAL_RCC_ClockConfig+0x1b8>)
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001262:	4b63      	ldr	r3, [pc, #396]	; (80013f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d001      	beq.n	8001274 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e0b8      	b.n	80013e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d020      	beq.n	80012c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	d005      	beq.n	8001298 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800128c:	4b59      	ldr	r3, [pc, #356]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	4a58      	ldr	r2, [pc, #352]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001296:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012a4:	4b53      	ldr	r3, [pc, #332]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	4a52      	ldr	r2, [pc, #328]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012b0:	4b50      	ldr	r3, [pc, #320]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	494d      	ldr	r1, [pc, #308]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d044      	beq.n	8001358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d107      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d6:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d119      	bne.n	8001316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e07f      	b.n	80013e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d003      	beq.n	80012f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d107      	bne.n	8001306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f6:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d109      	bne.n	8001316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e06f      	b.n	80013e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001306:	4b3b      	ldr	r3, [pc, #236]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e067      	b.n	80013e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001316:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f023 0203 	bic.w	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	4934      	ldr	r1, [pc, #208]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001324:	4313      	orrs	r3, r2
 8001326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001328:	f7ff fcea 	bl	8000d00 <HAL_GetTick>
 800132c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132e:	e00a      	b.n	8001346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001330:	f7ff fce6 	bl	8000d00 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	f241 3288 	movw	r2, #5000	; 0x1388
 800133e:	4293      	cmp	r3, r2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e04f      	b.n	80013e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001346:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 020c 	and.w	r2, r3, #12
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	429a      	cmp	r2, r3
 8001356:	d1eb      	bne.n	8001330 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001358:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <HAL_RCC_ClockConfig+0x1b8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 030f 	and.w	r3, r3, #15
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d20c      	bcs.n	8001380 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d001      	beq.n	8001380 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e032      	b.n	80013e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	d008      	beq.n	800139e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	4916      	ldr	r1, [pc, #88]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	4313      	orrs	r3, r2
 800139c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d009      	beq.n	80013be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	490e      	ldr	r1, [pc, #56]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013be:	f000 f887 	bl	80014d0 <HAL_RCC_GetSysClockFreq>
 80013c2:	4602      	mov	r2, r0
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	490a      	ldr	r1, [pc, #40]	; (80013f8 <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	5ccb      	ldrb	r3, [r1, r3]
 80013d2:	fa22 f303 	lsr.w	r3, r2, r3
 80013d6:	4a09      	ldr	r2, [pc, #36]	; (80013fc <HAL_RCC_ClockConfig+0x1c4>)
 80013d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_RCC_ClockConfig+0x1c8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fa9e 	bl	8000920 <HAL_InitTick>

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023c00 	.word	0x40023c00
 80013f4:	40023800 	.word	0x40023800
 80013f8:	080061d4 	.word	0x080061d4
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000004 	.word	0x20000004

08001404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_RCC_GetHCLKFreq+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000000 	.word	0x20000000

0800141c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001420:	f7ff fff0 	bl	8001404 <HAL_RCC_GetHCLKFreq>
 8001424:	4602      	mov	r2, r0
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	0a9b      	lsrs	r3, r3, #10
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	4903      	ldr	r1, [pc, #12]	; (8001440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001432:	5ccb      	ldrb	r3, [r1, r3]
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001438:	4618      	mov	r0, r3
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	080061e4 	.word	0x080061e4

08001444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001448:	f7ff ffdc 	bl	8001404 <HAL_RCC_GetHCLKFreq>
 800144c:	4602      	mov	r2, r0
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	0b5b      	lsrs	r3, r3, #13
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	4903      	ldr	r1, [pc, #12]	; (8001468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800145a:	5ccb      	ldrb	r3, [r1, r3]
 800145c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001460:	4618      	mov	r0, r3
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	080061e4 	.word	0x080061e4

0800146c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	220f      	movs	r2, #15
 800147a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_RCC_GetClockConfig+0x5c>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 0203 	and.w	r2, r3, #3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_RCC_GetClockConfig+0x5c>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_RCC_GetClockConfig+0x5c>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_RCC_GetClockConfig+0x5c>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	08db      	lsrs	r3, r3, #3
 80014a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <HAL_RCC_GetClockConfig+0x60>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 020f 	and.w	r2, r3, #15
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	601a      	str	r2, [r3, #0]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40023c00 	.word	0x40023c00

080014d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014d4:	b0ae      	sub	sp, #184	; 0xb8
 80014d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014f6:	4bcb      	ldr	r3, [pc, #812]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b0c      	cmp	r3, #12
 8001500:	f200 8206 	bhi.w	8001910 <HAL_RCC_GetSysClockFreq+0x440>
 8001504:	a201      	add	r2, pc, #4	; (adr r2, 800150c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150a:	bf00      	nop
 800150c:	08001541 	.word	0x08001541
 8001510:	08001911 	.word	0x08001911
 8001514:	08001911 	.word	0x08001911
 8001518:	08001911 	.word	0x08001911
 800151c:	08001549 	.word	0x08001549
 8001520:	08001911 	.word	0x08001911
 8001524:	08001911 	.word	0x08001911
 8001528:	08001911 	.word	0x08001911
 800152c:	08001551 	.word	0x08001551
 8001530:	08001911 	.word	0x08001911
 8001534:	08001911 	.word	0x08001911
 8001538:	08001911 	.word	0x08001911
 800153c:	08001741 	.word	0x08001741
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001540:	4bb9      	ldr	r3, [pc, #740]	; (8001828 <HAL_RCC_GetSysClockFreq+0x358>)
 8001542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001546:	e1e7      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001548:	4bb8      	ldr	r3, [pc, #736]	; (800182c <HAL_RCC_GetSysClockFreq+0x35c>)
 800154a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800154e:	e1e3      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001550:	4bb4      	ldr	r3, [pc, #720]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800155c:	4bb1      	ldr	r3, [pc, #708]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d071      	beq.n	800164c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001568:	4bae      	ldr	r3, [pc, #696]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	099b      	lsrs	r3, r3, #6
 800156e:	2200      	movs	r2, #0
 8001570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001574:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800157c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001580:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800158a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800158e:	4622      	mov	r2, r4
 8001590:	462b      	mov	r3, r5
 8001592:	f04f 0000 	mov.w	r0, #0
 8001596:	f04f 0100 	mov.w	r1, #0
 800159a:	0159      	lsls	r1, r3, #5
 800159c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015a0:	0150      	lsls	r0, r2, #5
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4621      	mov	r1, r4
 80015a8:	1a51      	subs	r1, r2, r1
 80015aa:	6439      	str	r1, [r7, #64]	; 0x40
 80015ac:	4629      	mov	r1, r5
 80015ae:	eb63 0301 	sbc.w	r3, r3, r1
 80015b2:	647b      	str	r3, [r7, #68]	; 0x44
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80015c0:	4649      	mov	r1, r9
 80015c2:	018b      	lsls	r3, r1, #6
 80015c4:	4641      	mov	r1, r8
 80015c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ca:	4641      	mov	r1, r8
 80015cc:	018a      	lsls	r2, r1, #6
 80015ce:	4641      	mov	r1, r8
 80015d0:	1a51      	subs	r1, r2, r1
 80015d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80015d4:	4649      	mov	r1, r9
 80015d6:	eb63 0301 	sbc.w	r3, r3, r1
 80015da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80015e8:	4649      	mov	r1, r9
 80015ea:	00cb      	lsls	r3, r1, #3
 80015ec:	4641      	mov	r1, r8
 80015ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015f2:	4641      	mov	r1, r8
 80015f4:	00ca      	lsls	r2, r1, #3
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	4622      	mov	r2, r4
 80015fe:	189b      	adds	r3, r3, r2
 8001600:	633b      	str	r3, [r7, #48]	; 0x30
 8001602:	462b      	mov	r3, r5
 8001604:	460a      	mov	r2, r1
 8001606:	eb42 0303 	adc.w	r3, r2, r3
 800160a:	637b      	str	r3, [r7, #52]	; 0x34
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001618:	4629      	mov	r1, r5
 800161a:	024b      	lsls	r3, r1, #9
 800161c:	4621      	mov	r1, r4
 800161e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001622:	4621      	mov	r1, r4
 8001624:	024a      	lsls	r2, r1, #9
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800162e:	2200      	movs	r2, #0
 8001630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001634:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001638:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800163c:	f7fe fde8 	bl	8000210 <__aeabi_uldivmod>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4613      	mov	r3, r2
 8001646:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800164a:	e067      	b.n	800171c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800164c:	4b75      	ldr	r3, [pc, #468]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	099b      	lsrs	r3, r3, #6
 8001652:	2200      	movs	r2, #0
 8001654:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001658:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800165c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001664:	67bb      	str	r3, [r7, #120]	; 0x78
 8001666:	2300      	movs	r3, #0
 8001668:	67fb      	str	r3, [r7, #124]	; 0x7c
 800166a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800166e:	4622      	mov	r2, r4
 8001670:	462b      	mov	r3, r5
 8001672:	f04f 0000 	mov.w	r0, #0
 8001676:	f04f 0100 	mov.w	r1, #0
 800167a:	0159      	lsls	r1, r3, #5
 800167c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001680:	0150      	lsls	r0, r2, #5
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4621      	mov	r1, r4
 8001688:	1a51      	subs	r1, r2, r1
 800168a:	62b9      	str	r1, [r7, #40]	; 0x28
 800168c:	4629      	mov	r1, r5
 800168e:	eb63 0301 	sbc.w	r3, r3, r1
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80016a0:	4649      	mov	r1, r9
 80016a2:	018b      	lsls	r3, r1, #6
 80016a4:	4641      	mov	r1, r8
 80016a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016aa:	4641      	mov	r1, r8
 80016ac:	018a      	lsls	r2, r1, #6
 80016ae:	4641      	mov	r1, r8
 80016b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80016b4:	4649      	mov	r1, r9
 80016b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016ce:	4692      	mov	sl, r2
 80016d0:	469b      	mov	fp, r3
 80016d2:	4623      	mov	r3, r4
 80016d4:	eb1a 0303 	adds.w	r3, sl, r3
 80016d8:	623b      	str	r3, [r7, #32]
 80016da:	462b      	mov	r3, r5
 80016dc:	eb4b 0303 	adc.w	r3, fp, r3
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016ee:	4629      	mov	r1, r5
 80016f0:	028b      	lsls	r3, r1, #10
 80016f2:	4621      	mov	r1, r4
 80016f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016f8:	4621      	mov	r1, r4
 80016fa:	028a      	lsls	r2, r1, #10
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001704:	2200      	movs	r2, #0
 8001706:	673b      	str	r3, [r7, #112]	; 0x70
 8001708:	677a      	str	r2, [r7, #116]	; 0x74
 800170a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800170e:	f7fe fd7f 	bl	8000210 <__aeabi_uldivmod>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4613      	mov	r3, r2
 8001718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800171c:	4b41      	ldr	r3, [pc, #260]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	0c1b      	lsrs	r3, r3, #16
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	3301      	adds	r3, #1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800172e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001732:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800173e:	e0eb      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001740:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800174c:	4b35      	ldr	r3, [pc, #212]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d06b      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001758:	4b32      	ldr	r3, [pc, #200]	; (8001824 <HAL_RCC_GetSysClockFreq+0x354>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	099b      	lsrs	r3, r3, #6
 800175e:	2200      	movs	r2, #0
 8001760:	66bb      	str	r3, [r7, #104]	; 0x68
 8001762:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800176a:	663b      	str	r3, [r7, #96]	; 0x60
 800176c:	2300      	movs	r3, #0
 800176e:	667b      	str	r3, [r7, #100]	; 0x64
 8001770:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001774:	4622      	mov	r2, r4
 8001776:	462b      	mov	r3, r5
 8001778:	f04f 0000 	mov.w	r0, #0
 800177c:	f04f 0100 	mov.w	r1, #0
 8001780:	0159      	lsls	r1, r3, #5
 8001782:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001786:	0150      	lsls	r0, r2, #5
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4621      	mov	r1, r4
 800178e:	1a51      	subs	r1, r2, r1
 8001790:	61b9      	str	r1, [r7, #24]
 8001792:	4629      	mov	r1, r5
 8001794:	eb63 0301 	sbc.w	r3, r3, r1
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017a6:	4659      	mov	r1, fp
 80017a8:	018b      	lsls	r3, r1, #6
 80017aa:	4651      	mov	r1, sl
 80017ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017b0:	4651      	mov	r1, sl
 80017b2:	018a      	lsls	r2, r1, #6
 80017b4:	4651      	mov	r1, sl
 80017b6:	ebb2 0801 	subs.w	r8, r2, r1
 80017ba:	4659      	mov	r1, fp
 80017bc:	eb63 0901 	sbc.w	r9, r3, r1
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017d4:	4690      	mov	r8, r2
 80017d6:	4699      	mov	r9, r3
 80017d8:	4623      	mov	r3, r4
 80017da:	eb18 0303 	adds.w	r3, r8, r3
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	462b      	mov	r3, r5
 80017e2:	eb49 0303 	adc.w	r3, r9, r3
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017f4:	4629      	mov	r1, r5
 80017f6:	024b      	lsls	r3, r1, #9
 80017f8:	4621      	mov	r1, r4
 80017fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017fe:	4621      	mov	r1, r4
 8001800:	024a      	lsls	r2, r1, #9
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800180a:	2200      	movs	r2, #0
 800180c:	65bb      	str	r3, [r7, #88]	; 0x58
 800180e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001810:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001814:	f7fe fcfc 	bl	8000210 <__aeabi_uldivmod>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4613      	mov	r3, r2
 800181e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001822:	e065      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0x420>
 8001824:	40023800 	.word	0x40023800
 8001828:	00f42400 	.word	0x00f42400
 800182c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001830:	4b3d      	ldr	r3, [pc, #244]	; (8001928 <HAL_RCC_GetSysClockFreq+0x458>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	099b      	lsrs	r3, r3, #6
 8001836:	2200      	movs	r2, #0
 8001838:	4618      	mov	r0, r3
 800183a:	4611      	mov	r1, r2
 800183c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001840:	653b      	str	r3, [r7, #80]	; 0x50
 8001842:	2300      	movs	r3, #0
 8001844:	657b      	str	r3, [r7, #84]	; 0x54
 8001846:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800184a:	4642      	mov	r2, r8
 800184c:	464b      	mov	r3, r9
 800184e:	f04f 0000 	mov.w	r0, #0
 8001852:	f04f 0100 	mov.w	r1, #0
 8001856:	0159      	lsls	r1, r3, #5
 8001858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800185c:	0150      	lsls	r0, r2, #5
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4641      	mov	r1, r8
 8001864:	1a51      	subs	r1, r2, r1
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	4649      	mov	r1, r9
 800186a:	eb63 0301 	sbc.w	r3, r3, r1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800187c:	4659      	mov	r1, fp
 800187e:	018b      	lsls	r3, r1, #6
 8001880:	4651      	mov	r1, sl
 8001882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001886:	4651      	mov	r1, sl
 8001888:	018a      	lsls	r2, r1, #6
 800188a:	4651      	mov	r1, sl
 800188c:	1a54      	subs	r4, r2, r1
 800188e:	4659      	mov	r1, fp
 8001890:	eb63 0501 	sbc.w	r5, r3, r1
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	00eb      	lsls	r3, r5, #3
 800189e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018a2:	00e2      	lsls	r2, r4, #3
 80018a4:	4614      	mov	r4, r2
 80018a6:	461d      	mov	r5, r3
 80018a8:	4643      	mov	r3, r8
 80018aa:	18e3      	adds	r3, r4, r3
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	464b      	mov	r3, r9
 80018b0:	eb45 0303 	adc.w	r3, r5, r3
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018c2:	4629      	mov	r1, r5
 80018c4:	028b      	lsls	r3, r1, #10
 80018c6:	4621      	mov	r1, r4
 80018c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018cc:	4621      	mov	r1, r4
 80018ce:	028a      	lsls	r2, r1, #10
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018d8:	2200      	movs	r2, #0
 80018da:	64bb      	str	r3, [r7, #72]	; 0x48
 80018dc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80018de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018e2:	f7fe fc95 	bl	8000210 <__aeabi_uldivmod>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4613      	mov	r3, r2
 80018ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018f0:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <HAL_RCC_GetSysClockFreq+0x458>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	0f1b      	lsrs	r3, r3, #28
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80018fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001902:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800190e:	e003      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001916:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001918:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800191c:	4618      	mov	r0, r3
 800191e:	37b8      	adds	r7, #184	; 0xb8
 8001920:	46bd      	mov	sp, r7
 8001922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800
 800192c:	00f42400 	.word	0x00f42400

08001930 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e28d      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8083 	beq.w	8001a56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001950:	4b94      	ldr	r3, [pc, #592]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b04      	cmp	r3, #4
 800195a:	d019      	beq.n	8001990 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800195c:	4b91      	ldr	r3, [pc, #580]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001964:	2b08      	cmp	r3, #8
 8001966:	d106      	bne.n	8001976 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001968:	4b8e      	ldr	r3, [pc, #568]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001974:	d00c      	beq.n	8001990 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001976:	4b8b      	ldr	r3, [pc, #556]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800197e:	2b0c      	cmp	r3, #12
 8001980:	d112      	bne.n	80019a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001982:	4b88      	ldr	r3, [pc, #544]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b84      	ldr	r3, [pc, #528]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x124>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e25a      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x90>
 80019b2:	4b7c      	ldr	r3, [pc, #496]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a7b      	ldr	r2, [pc, #492]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xcc>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0xb4>
 80019ca:	4b76      	ldr	r3, [pc, #472]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a75      	ldr	r2, [pc, #468]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b73      	ldr	r3, [pc, #460]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a72      	ldr	r2, [pc, #456]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xcc>
 80019e4:	4b6f      	ldr	r3, [pc, #444]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a6e      	ldr	r2, [pc, #440]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b6c      	ldr	r3, [pc, #432]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a6b      	ldr	r2, [pc, #428]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff f97c 	bl	8000d00 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff f978 	bl	8000d00 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e21f      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b61      	ldr	r3, [pc, #388]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xdc>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f968 	bl	8000d00 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff f964 	bl	8000d00 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e20b      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	4b57      	ldr	r3, [pc, #348]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x104>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d06f      	beq.n	8001b42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a62:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d017      	beq.n	8001a9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a6e:	4b4d      	ldr	r3, [pc, #308]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d105      	bne.n	8001a86 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00b      	beq.n	8001a9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a8e:	2b0c      	cmp	r3, #12
 8001a90:	d11c      	bne.n	8001acc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a92:	4b44      	ldr	r3, [pc, #272]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d116      	bne.n	8001acc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x186>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e1d3      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4937      	ldr	r1, [pc, #220]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aca:	e03a      	b.n	8001b42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d020      	beq.n	8001b16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad4:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <HAL_RCC_OscConfig+0x278>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff f911 	bl	8000d00 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff f90d 	bl	8000d00 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e1b4      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af4:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b00:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4925      	ldr	r1, [pc, #148]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
 8001b14:	e015      	b.n	8001b42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <HAL_RCC_OscConfig+0x278>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f8f0 	bl	8000d00 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b24:	f7ff f8ec 	bl	8000d00 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e193      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d036      	beq.n	8001bbc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d016      	beq.n	8001b84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_RCC_OscConfig+0x27c>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7ff f8d0 	bl	8000d00 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b64:	f7ff f8cc 	bl	8000d00 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e173      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x234>
 8001b82:	e01b      	b.n	8001bbc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_RCC_OscConfig+0x27c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8a:	f7ff f8b9 	bl	8000d00 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	e00e      	b.n	8001bb0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b92:	f7ff f8b5 	bl	8000d00 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d907      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e15c      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	42470000 	.word	0x42470000
 8001bac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb0:	4b8a      	ldr	r3, [pc, #552]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ea      	bne.n	8001b92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8097 	beq.w	8001cf8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bce:	4b83      	ldr	r3, [pc, #524]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10f      	bne.n	8001bfa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	4b7f      	ldr	r3, [pc, #508]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a7e      	ldr	r2, [pc, #504]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b7c      	ldr	r3, [pc, #496]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfa:	4b79      	ldr	r3, [pc, #484]	; (8001de0 <HAL_RCC_OscConfig+0x4b0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d118      	bne.n	8001c38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c06:	4b76      	ldr	r3, [pc, #472]	; (8001de0 <HAL_RCC_OscConfig+0x4b0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a75      	ldr	r2, [pc, #468]	; (8001de0 <HAL_RCC_OscConfig+0x4b0>)
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c12:	f7ff f875 	bl	8000d00 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1a:	f7ff f871 	bl	8000d00 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e118      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2c:	4b6c      	ldr	r3, [pc, #432]	; (8001de0 <HAL_RCC_OscConfig+0x4b0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCC_OscConfig+0x31e>
 8001c40:	4b66      	ldr	r3, [pc, #408]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	4a65      	ldr	r2, [pc, #404]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4c:	e01c      	b.n	8001c88 <HAL_RCC_OscConfig+0x358>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x340>
 8001c56:	4b61      	ldr	r3, [pc, #388]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	4a60      	ldr	r2, [pc, #384]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	6713      	str	r3, [r2, #112]	; 0x70
 8001c62:	4b5e      	ldr	r3, [pc, #376]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	4a5d      	ldr	r2, [pc, #372]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCC_OscConfig+0x358>
 8001c70:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c74:	4a59      	ldr	r2, [pc, #356]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7c:	4b57      	ldr	r3, [pc, #348]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c80:	4a56      	ldr	r2, [pc, #344]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001c82:	f023 0304 	bic.w	r3, r3, #4
 8001c86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d015      	beq.n	8001cbc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7ff f836 	bl	8000d00 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c98:	f7ff f832 	bl	8000d00 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e0d7      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cae:	4b4b      	ldr	r3, [pc, #300]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0ee      	beq.n	8001c98 <HAL_RCC_OscConfig+0x368>
 8001cba:	e014      	b.n	8001ce6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7ff f820 	bl	8000d00 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f81c 	bl	8000d00 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e0c1      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cda:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ee      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ce6:	7dfb      	ldrb	r3, [r7, #23]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d105      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cec:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	4a3a      	ldr	r2, [pc, #232]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80ad 	beq.w	8001e5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d02:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d060      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d145      	bne.n	8001da2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <HAL_RCC_OscConfig+0x4b4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7fe fff0 	bl	8000d00 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d24:	f7fe ffec 	bl	8000d00 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e093      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d36:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69da      	ldr	r2, [r3, #28]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	019b      	lsls	r3, r3, #6
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	085b      	lsrs	r3, r3, #1
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	041b      	lsls	r3, r3, #16
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	061b      	lsls	r3, r3, #24
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	071b      	lsls	r3, r3, #28
 8001d6e:	491b      	ldr	r1, [pc, #108]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_RCC_OscConfig+0x4b4>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7a:	f7fe ffc1 	bl	8000d00 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d82:	f7fe ffbd 	bl	8000d00 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e064      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x452>
 8001da0:	e05c      	b.n	8001e5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_RCC_OscConfig+0x4b4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7fe ffaa 	bl	8000d00 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db0:	f7fe ffa6 	bl	8000d00 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e04d      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_RCC_OscConfig+0x4ac>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x480>
 8001dce:	e045      	b.n	8001e5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d107      	bne.n	8001de8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e040      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40007000 	.word	0x40007000
 8001de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001de8:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <HAL_RCC_OscConfig+0x538>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d030      	beq.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d129      	bne.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d122      	bne.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e18:	4013      	ands	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d119      	bne.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	3b01      	subs	r3, #1
 8001e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d10f      	bne.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e041      	b.n	8001f02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f839 	bl	8001f0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	f000 f9d8 	bl	8002260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d001      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e04e      	b.n	8001fd6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d022      	beq.n	8001fa0 <HAL_TIM_Base_Start_IT+0x80>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f62:	d01d      	beq.n	8001fa0 <HAL_TIM_Base_Start_IT+0x80>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1f      	ldr	r2, [pc, #124]	; (8001fe8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d018      	beq.n	8001fa0 <HAL_TIM_Base_Start_IT+0x80>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1e      	ldr	r2, [pc, #120]	; (8001fec <HAL_TIM_Base_Start_IT+0xcc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d013      	beq.n	8001fa0 <HAL_TIM_Base_Start_IT+0x80>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00e      	beq.n	8001fa0 <HAL_TIM_Base_Start_IT+0x80>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d009      	beq.n	8001fa0 <HAL_TIM_Base_Start_IT+0x80>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a19      	ldr	r2, [pc, #100]	; (8001ff8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d004      	beq.n	8001fa0 <HAL_TIM_Base_Start_IT+0x80>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <HAL_TIM_Base_Start_IT+0xdc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d111      	bne.n	8001fc4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d010      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0201 	orr.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc2:	e007      	b.n	8001fd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	40000400 	.word	0x40000400
 8001fec:	40000800 	.word	0x40000800
 8001ff0:	40000c00 	.word	0x40000c00
 8001ff4:	40010400 	.word	0x40010400
 8001ff8:	40014000 	.word	0x40014000
 8001ffc:	40001800 	.word	0x40001800

08002000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b02      	cmp	r3, #2
 8002014:	d122      	bne.n	800205c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b02      	cmp	r3, #2
 8002022:	d11b      	bne.n	800205c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0202 	mvn.w	r2, #2
 800202c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f8ee 	bl	8002224 <HAL_TIM_IC_CaptureCallback>
 8002048:	e005      	b.n	8002056 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8e0 	bl	8002210 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f8f1 	bl	8002238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b04      	cmp	r3, #4
 8002068:	d122      	bne.n	80020b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b04      	cmp	r3, #4
 8002076:	d11b      	bne.n	80020b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0204 	mvn.w	r2, #4
 8002080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2202      	movs	r2, #2
 8002086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f8c4 	bl	8002224 <HAL_TIM_IC_CaptureCallback>
 800209c:	e005      	b.n	80020aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f8b6 	bl	8002210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f8c7 	bl	8002238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d122      	bne.n	8002104 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d11b      	bne.n	8002104 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0208 	mvn.w	r2, #8
 80020d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2204      	movs	r2, #4
 80020da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f89a 	bl	8002224 <HAL_TIM_IC_CaptureCallback>
 80020f0:	e005      	b.n	80020fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f88c 	bl	8002210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f89d 	bl	8002238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	2b10      	cmp	r3, #16
 8002110:	d122      	bne.n	8002158 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b10      	cmp	r3, #16
 800211e:	d11b      	bne.n	8002158 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0210 	mvn.w	r2, #16
 8002128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2208      	movs	r2, #8
 800212e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f870 	bl	8002224 <HAL_TIM_IC_CaptureCallback>
 8002144:	e005      	b.n	8002152 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f862 	bl	8002210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f873 	bl	8002238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b01      	cmp	r3, #1
 8002164:	d10e      	bne.n	8002184 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b01      	cmp	r3, #1
 8002172:	d107      	bne.n	8002184 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0201 	mvn.w	r2, #1
 800217c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7fe fb42 	bl	8000808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218e:	2b80      	cmp	r3, #128	; 0x80
 8002190:	d10e      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219c:	2b80      	cmp	r3, #128	; 0x80
 800219e:	d107      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f902 	bl	80023b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ba:	2b40      	cmp	r3, #64	; 0x40
 80021bc:	d10e      	bne.n	80021dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c8:	2b40      	cmp	r3, #64	; 0x40
 80021ca:	d107      	bne.n	80021dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f838 	bl	800224c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	d10e      	bne.n	8002208 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b20      	cmp	r3, #32
 80021f6:	d107      	bne.n	8002208 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0220 	mvn.w	r2, #32
 8002200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f8cc 	bl	80023a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a40      	ldr	r2, [pc, #256]	; (8002374 <TIM_Base_SetConfig+0x114>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d013      	beq.n	80022a0 <TIM_Base_SetConfig+0x40>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227e:	d00f      	beq.n	80022a0 <TIM_Base_SetConfig+0x40>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a3d      	ldr	r2, [pc, #244]	; (8002378 <TIM_Base_SetConfig+0x118>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d00b      	beq.n	80022a0 <TIM_Base_SetConfig+0x40>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a3c      	ldr	r2, [pc, #240]	; (800237c <TIM_Base_SetConfig+0x11c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d007      	beq.n	80022a0 <TIM_Base_SetConfig+0x40>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a3b      	ldr	r2, [pc, #236]	; (8002380 <TIM_Base_SetConfig+0x120>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d003      	beq.n	80022a0 <TIM_Base_SetConfig+0x40>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a3a      	ldr	r2, [pc, #232]	; (8002384 <TIM_Base_SetConfig+0x124>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d108      	bne.n	80022b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a2f      	ldr	r2, [pc, #188]	; (8002374 <TIM_Base_SetConfig+0x114>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d02b      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c0:	d027      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a2c      	ldr	r2, [pc, #176]	; (8002378 <TIM_Base_SetConfig+0x118>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d023      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a2b      	ldr	r2, [pc, #172]	; (800237c <TIM_Base_SetConfig+0x11c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01f      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a2a      	ldr	r2, [pc, #168]	; (8002380 <TIM_Base_SetConfig+0x120>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01b      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a29      	ldr	r2, [pc, #164]	; (8002384 <TIM_Base_SetConfig+0x124>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d017      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a28      	ldr	r2, [pc, #160]	; (8002388 <TIM_Base_SetConfig+0x128>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a27      	ldr	r2, [pc, #156]	; (800238c <TIM_Base_SetConfig+0x12c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00f      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a26      	ldr	r2, [pc, #152]	; (8002390 <TIM_Base_SetConfig+0x130>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00b      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a25      	ldr	r2, [pc, #148]	; (8002394 <TIM_Base_SetConfig+0x134>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d007      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a24      	ldr	r2, [pc, #144]	; (8002398 <TIM_Base_SetConfig+0x138>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d003      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a23      	ldr	r2, [pc, #140]	; (800239c <TIM_Base_SetConfig+0x13c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d108      	bne.n	8002324 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <TIM_Base_SetConfig+0x114>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d003      	beq.n	8002358 <TIM_Base_SetConfig+0xf8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a0c      	ldr	r2, [pc, #48]	; (8002384 <TIM_Base_SetConfig+0x124>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d103      	bne.n	8002360 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	615a      	str	r2, [r3, #20]
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40010000 	.word	0x40010000
 8002378:	40000400 	.word	0x40000400
 800237c:	40000800 	.word	0x40000800
 8002380:	40000c00 	.word	0x40000c00
 8002384:	40010400 	.word	0x40010400
 8002388:	40014000 	.word	0x40014000
 800238c:	40014400 	.word	0x40014400
 8002390:	40014800 	.word	0x40014800
 8002394:	40001800 	.word	0x40001800
 8002398:	40001c00 	.word	0x40001c00
 800239c:	40002000 	.word	0x40002000

080023a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e03f      	b.n	800245a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe fa4e 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2224      	movs	r2, #36	; 0x24
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800240a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f829 	bl	8002464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695a      	ldr	r2, [r3, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002468:	b0c0      	sub	sp, #256	; 0x100
 800246a:	af00      	add	r7, sp, #0
 800246c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800247c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002480:	68d9      	ldr	r1, [r3, #12]
 8002482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	ea40 0301 	orr.w	r3, r0, r1
 800248c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800248e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	431a      	orrs	r2, r3
 800249c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80024bc:	f021 010c 	bic.w	r1, r1, #12
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80024ca:	430b      	orrs	r3, r1
 80024cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024de:	6999      	ldr	r1, [r3, #24]
 80024e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	ea40 0301 	orr.w	r3, r0, r1
 80024ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	4b8f      	ldr	r3, [pc, #572]	; (8002730 <UART_SetConfig+0x2cc>)
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d005      	beq.n	8002504 <UART_SetConfig+0xa0>
 80024f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4b8d      	ldr	r3, [pc, #564]	; (8002734 <UART_SetConfig+0x2d0>)
 8002500:	429a      	cmp	r2, r3
 8002502:	d104      	bne.n	800250e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002504:	f7fe ff9e 	bl	8001444 <HAL_RCC_GetPCLK2Freq>
 8002508:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800250c:	e003      	b.n	8002516 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800250e:	f7fe ff85 	bl	800141c <HAL_RCC_GetPCLK1Freq>
 8002512:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002520:	f040 810c 	bne.w	800273c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002528:	2200      	movs	r2, #0
 800252a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800252e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002532:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002536:	4622      	mov	r2, r4
 8002538:	462b      	mov	r3, r5
 800253a:	1891      	adds	r1, r2, r2
 800253c:	65b9      	str	r1, [r7, #88]	; 0x58
 800253e:	415b      	adcs	r3, r3
 8002540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002542:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002546:	4621      	mov	r1, r4
 8002548:	eb12 0801 	adds.w	r8, r2, r1
 800254c:	4629      	mov	r1, r5
 800254e:	eb43 0901 	adc.w	r9, r3, r1
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800255e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002566:	4690      	mov	r8, r2
 8002568:	4699      	mov	r9, r3
 800256a:	4623      	mov	r3, r4
 800256c:	eb18 0303 	adds.w	r3, r8, r3
 8002570:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002574:	462b      	mov	r3, r5
 8002576:	eb49 0303 	adc.w	r3, r9, r3
 800257a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800257e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800258a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800258e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002592:	460b      	mov	r3, r1
 8002594:	18db      	adds	r3, r3, r3
 8002596:	653b      	str	r3, [r7, #80]	; 0x50
 8002598:	4613      	mov	r3, r2
 800259a:	eb42 0303 	adc.w	r3, r2, r3
 800259e:	657b      	str	r3, [r7, #84]	; 0x54
 80025a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80025a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80025a8:	f7fd fe32 	bl	8000210 <__aeabi_uldivmod>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4b61      	ldr	r3, [pc, #388]	; (8002738 <UART_SetConfig+0x2d4>)
 80025b2:	fba3 2302 	umull	r2, r3, r3, r2
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	011c      	lsls	r4, r3, #4
 80025ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025be:	2200      	movs	r2, #0
 80025c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80025c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80025cc:	4642      	mov	r2, r8
 80025ce:	464b      	mov	r3, r9
 80025d0:	1891      	adds	r1, r2, r2
 80025d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80025d4:	415b      	adcs	r3, r3
 80025d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025dc:	4641      	mov	r1, r8
 80025de:	eb12 0a01 	adds.w	sl, r2, r1
 80025e2:	4649      	mov	r1, r9
 80025e4:	eb43 0b01 	adc.w	fp, r3, r1
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025fc:	4692      	mov	sl, r2
 80025fe:	469b      	mov	fp, r3
 8002600:	4643      	mov	r3, r8
 8002602:	eb1a 0303 	adds.w	r3, sl, r3
 8002606:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800260a:	464b      	mov	r3, r9
 800260c:	eb4b 0303 	adc.w	r3, fp, r3
 8002610:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002620:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002624:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002628:	460b      	mov	r3, r1
 800262a:	18db      	adds	r3, r3, r3
 800262c:	643b      	str	r3, [r7, #64]	; 0x40
 800262e:	4613      	mov	r3, r2
 8002630:	eb42 0303 	adc.w	r3, r2, r3
 8002634:	647b      	str	r3, [r7, #68]	; 0x44
 8002636:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800263a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800263e:	f7fd fde7 	bl	8000210 <__aeabi_uldivmod>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4611      	mov	r1, r2
 8002648:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <UART_SetConfig+0x2d4>)
 800264a:	fba3 2301 	umull	r2, r3, r3, r1
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	2264      	movs	r2, #100	; 0x64
 8002652:	fb02 f303 	mul.w	r3, r2, r3
 8002656:	1acb      	subs	r3, r1, r3
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800265e:	4b36      	ldr	r3, [pc, #216]	; (8002738 <UART_SetConfig+0x2d4>)
 8002660:	fba3 2302 	umull	r2, r3, r3, r2
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800266c:	441c      	add	r4, r3
 800266e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002672:	2200      	movs	r2, #0
 8002674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002678:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800267c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002680:	4642      	mov	r2, r8
 8002682:	464b      	mov	r3, r9
 8002684:	1891      	adds	r1, r2, r2
 8002686:	63b9      	str	r1, [r7, #56]	; 0x38
 8002688:	415b      	adcs	r3, r3
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800268c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002690:	4641      	mov	r1, r8
 8002692:	1851      	adds	r1, r2, r1
 8002694:	6339      	str	r1, [r7, #48]	; 0x30
 8002696:	4649      	mov	r1, r9
 8002698:	414b      	adcs	r3, r1
 800269a:	637b      	str	r3, [r7, #52]	; 0x34
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80026a8:	4659      	mov	r1, fp
 80026aa:	00cb      	lsls	r3, r1, #3
 80026ac:	4651      	mov	r1, sl
 80026ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026b2:	4651      	mov	r1, sl
 80026b4:	00ca      	lsls	r2, r1, #3
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	4603      	mov	r3, r0
 80026bc:	4642      	mov	r2, r8
 80026be:	189b      	adds	r3, r3, r2
 80026c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026c4:	464b      	mov	r3, r9
 80026c6:	460a      	mov	r2, r1
 80026c8:	eb42 0303 	adc.w	r3, r2, r3
 80026cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80026dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80026e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80026e4:	460b      	mov	r3, r1
 80026e6:	18db      	adds	r3, r3, r3
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ea:	4613      	mov	r3, r2
 80026ec:	eb42 0303 	adc.w	r3, r2, r3
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80026fa:	f7fd fd89 	bl	8000210 <__aeabi_uldivmod>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <UART_SetConfig+0x2d4>)
 8002704:	fba3 1302 	umull	r1, r3, r3, r2
 8002708:	095b      	lsrs	r3, r3, #5
 800270a:	2164      	movs	r1, #100	; 0x64
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	3332      	adds	r3, #50	; 0x32
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <UART_SetConfig+0x2d4>)
 8002718:	fba2 2303 	umull	r2, r3, r2, r3
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	f003 0207 	and.w	r2, r3, #7
 8002722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4422      	add	r2, r4
 800272a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800272c:	e105      	b.n	800293a <UART_SetConfig+0x4d6>
 800272e:	bf00      	nop
 8002730:	40011000 	.word	0x40011000
 8002734:	40011400 	.word	0x40011400
 8002738:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800273c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002740:	2200      	movs	r2, #0
 8002742:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002746:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800274a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800274e:	4642      	mov	r2, r8
 8002750:	464b      	mov	r3, r9
 8002752:	1891      	adds	r1, r2, r2
 8002754:	6239      	str	r1, [r7, #32]
 8002756:	415b      	adcs	r3, r3
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
 800275a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800275e:	4641      	mov	r1, r8
 8002760:	1854      	adds	r4, r2, r1
 8002762:	4649      	mov	r1, r9
 8002764:	eb43 0501 	adc.w	r5, r3, r1
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	00eb      	lsls	r3, r5, #3
 8002772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002776:	00e2      	lsls	r2, r4, #3
 8002778:	4614      	mov	r4, r2
 800277a:	461d      	mov	r5, r3
 800277c:	4643      	mov	r3, r8
 800277e:	18e3      	adds	r3, r4, r3
 8002780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002784:	464b      	mov	r3, r9
 8002786:	eb45 0303 	adc.w	r3, r5, r3
 800278a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800278e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800279a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80027aa:	4629      	mov	r1, r5
 80027ac:	008b      	lsls	r3, r1, #2
 80027ae:	4621      	mov	r1, r4
 80027b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027b4:	4621      	mov	r1, r4
 80027b6:	008a      	lsls	r2, r1, #2
 80027b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80027bc:	f7fd fd28 	bl	8000210 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4b60      	ldr	r3, [pc, #384]	; (8002948 <UART_SetConfig+0x4e4>)
 80027c6:	fba3 2302 	umull	r2, r3, r3, r2
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	011c      	lsls	r4, r3, #4
 80027ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027d2:	2200      	movs	r2, #0
 80027d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80027dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80027e0:	4642      	mov	r2, r8
 80027e2:	464b      	mov	r3, r9
 80027e4:	1891      	adds	r1, r2, r2
 80027e6:	61b9      	str	r1, [r7, #24]
 80027e8:	415b      	adcs	r3, r3
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027f0:	4641      	mov	r1, r8
 80027f2:	1851      	adds	r1, r2, r1
 80027f4:	6139      	str	r1, [r7, #16]
 80027f6:	4649      	mov	r1, r9
 80027f8:	414b      	adcs	r3, r1
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002808:	4659      	mov	r1, fp
 800280a:	00cb      	lsls	r3, r1, #3
 800280c:	4651      	mov	r1, sl
 800280e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002812:	4651      	mov	r1, sl
 8002814:	00ca      	lsls	r2, r1, #3
 8002816:	4610      	mov	r0, r2
 8002818:	4619      	mov	r1, r3
 800281a:	4603      	mov	r3, r0
 800281c:	4642      	mov	r2, r8
 800281e:	189b      	adds	r3, r3, r2
 8002820:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002824:	464b      	mov	r3, r9
 8002826:	460a      	mov	r2, r1
 8002828:	eb42 0303 	adc.w	r3, r2, r3
 800282c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	67bb      	str	r3, [r7, #120]	; 0x78
 800283a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002848:	4649      	mov	r1, r9
 800284a:	008b      	lsls	r3, r1, #2
 800284c:	4641      	mov	r1, r8
 800284e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002852:	4641      	mov	r1, r8
 8002854:	008a      	lsls	r2, r1, #2
 8002856:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800285a:	f7fd fcd9 	bl	8000210 <__aeabi_uldivmod>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4b39      	ldr	r3, [pc, #228]	; (8002948 <UART_SetConfig+0x4e4>)
 8002864:	fba3 1302 	umull	r1, r3, r3, r2
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	2164      	movs	r1, #100	; 0x64
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	3332      	adds	r3, #50	; 0x32
 8002876:	4a34      	ldr	r2, [pc, #208]	; (8002948 <UART_SetConfig+0x4e4>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002882:	441c      	add	r4, r3
 8002884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002888:	2200      	movs	r2, #0
 800288a:	673b      	str	r3, [r7, #112]	; 0x70
 800288c:	677a      	str	r2, [r7, #116]	; 0x74
 800288e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002892:	4642      	mov	r2, r8
 8002894:	464b      	mov	r3, r9
 8002896:	1891      	adds	r1, r2, r2
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	415b      	adcs	r3, r3
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028a2:	4641      	mov	r1, r8
 80028a4:	1851      	adds	r1, r2, r1
 80028a6:	6039      	str	r1, [r7, #0]
 80028a8:	4649      	mov	r1, r9
 80028aa:	414b      	adcs	r3, r1
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028ba:	4659      	mov	r1, fp
 80028bc:	00cb      	lsls	r3, r1, #3
 80028be:	4651      	mov	r1, sl
 80028c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028c4:	4651      	mov	r1, sl
 80028c6:	00ca      	lsls	r2, r1, #3
 80028c8:	4610      	mov	r0, r2
 80028ca:	4619      	mov	r1, r3
 80028cc:	4603      	mov	r3, r0
 80028ce:	4642      	mov	r2, r8
 80028d0:	189b      	adds	r3, r3, r2
 80028d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80028d4:	464b      	mov	r3, r9
 80028d6:	460a      	mov	r2, r1
 80028d8:	eb42 0303 	adc.w	r3, r2, r3
 80028dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	663b      	str	r3, [r7, #96]	; 0x60
 80028e8:	667a      	str	r2, [r7, #100]	; 0x64
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80028f6:	4649      	mov	r1, r9
 80028f8:	008b      	lsls	r3, r1, #2
 80028fa:	4641      	mov	r1, r8
 80028fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002900:	4641      	mov	r1, r8
 8002902:	008a      	lsls	r2, r1, #2
 8002904:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002908:	f7fd fc82 	bl	8000210 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <UART_SetConfig+0x4e4>)
 8002912:	fba3 1302 	umull	r1, r3, r3, r2
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	2164      	movs	r1, #100	; 0x64
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	3332      	adds	r3, #50	; 0x32
 8002924:	4a08      	ldr	r2, [pc, #32]	; (8002948 <UART_SetConfig+0x4e4>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	f003 020f 	and.w	r2, r3, #15
 8002930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4422      	add	r2, r4
 8002938:	609a      	str	r2, [r3, #8]
}
 800293a:	bf00      	nop
 800293c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002940:	46bd      	mov	sp, r7
 8002942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002946:	bf00      	nop
 8002948:	51eb851f 	.word	0x51eb851f

0800294c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <SysTick_Handler+0x1c>)
 8002952:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002954:	f001 fdfc 	bl	8004550 <xTaskGetSchedulerState>
 8002958:	4603      	mov	r3, r0
 800295a:	2b01      	cmp	r3, #1
 800295c:	d001      	beq.n	8002962 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800295e:	f002 fbfb 	bl	8005158 <xPortSysTickHandler>
  }
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	e000e010 	.word	0xe000e010

0800296c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a07      	ldr	r2, [pc, #28]	; (8002998 <vApplicationGetIdleTaskMemory+0x2c>)
 800297c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4a06      	ldr	r2, [pc, #24]	; (800299c <vApplicationGetIdleTaskMemory+0x30>)
 8002982:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2280      	movs	r2, #128	; 0x80
 8002988:	601a      	str	r2, [r3, #0]
}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000128 	.word	0x20000128
 800299c:	20000184 	.word	0x20000184

080029a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a07      	ldr	r2, [pc, #28]	; (80029cc <vApplicationGetTimerTaskMemory+0x2c>)
 80029b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	4a06      	ldr	r2, [pc, #24]	; (80029d0 <vApplicationGetTimerTaskMemory+0x30>)
 80029b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029be:	601a      	str	r2, [r3, #0]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	20000384 	.word	0x20000384
 80029d0:	200003e0 	.word	0x200003e0

080029d4 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80029da:	2020      	movs	r0, #32
 80029dc:	f002 fc4c 	bl	8005278 <pvPortMalloc>
 80029e0:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 f983 	bl	8002cfe <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80029fe:	687b      	ldr	r3, [r7, #4]
	}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b090      	sub	sp, #64	; 0x40
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2c:	f383 8811 	msr	BASEPRI, r3
 8002a30:	f3bf 8f6f 	isb	sy
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a3a:	bf00      	nop
 8002a3c:	e7fe      	b.n	8002a3c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <xEventGroupWaitBits+0x56>
	__asm volatile
 8002a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	61fb      	str	r3, [r7, #28]
}
 8002a5a:	bf00      	nop
 8002a5c:	e7fe      	b.n	8002a5c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <xEventGroupWaitBits+0x72>
	__asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	61bb      	str	r3, [r7, #24]
}
 8002a76:	bf00      	nop
 8002a78:	e7fe      	b.n	8002a78 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a7a:	f001 fd69 	bl	8004550 <xTaskGetSchedulerState>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <xEventGroupWaitBits+0x82>
 8002a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <xEventGroupWaitBits+0x86>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <xEventGroupWaitBits+0x88>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10a      	bne.n	8002aaa <xEventGroupWaitBits+0xa2>
	__asm volatile
 8002a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	617b      	str	r3, [r7, #20]
}
 8002aa6:	bf00      	nop
 8002aa8:	e7fe      	b.n	8002aa8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8002aaa:	f001 f8d1 	bl	8003c50 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002aba:	f000 f8fe 	bl	8002cba <prvTestWaitCondition>
 8002abe:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00e      	beq.n	8002ae4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d028      	beq.n	8002b26 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	401a      	ands	r2, r3
 8002ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e020      	b.n	8002b26 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d104      	bne.n	8002af4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8002aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aec:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8002aee:	2301      	movs	r3, #1
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
 8002af2:	e018      	b.n	8002b26 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b00:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b0e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b12:	1d18      	adds	r0, r3, #4
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f001 fa8f 	bl	8004040 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8002b26:	f001 f8a1 	bl	8003c6c <xTaskResumeAll>
 8002b2a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8002b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d031      	beq.n	8002b96 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d107      	bne.n	8002b48 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <xEventGroupWaitBits+0x198>)
 8002b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8002b48:	f001 fd8e 	bl	8004668 <uxTaskResetEventItemValue>
 8002b4c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d11a      	bne.n	8002b8e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8002b58:	f002 fa6c 	bl	8005034 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8002b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b68:	f000 f8a7 	bl	8002cba <prvTestWaitCondition>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	401a      	ands	r2, r3
 8002b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b84:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8002b86:	2301      	movs	r3, #1
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8002b8a:	f002 fa83 	bl	8005094 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b94:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8002b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3740      	adds	r7, #64	; 0x40
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	e000ed04 	.word	0xe000ed04

08002ba4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08e      	sub	sp, #56	; 0x38
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <xEventGroupSetBits+0x32>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	613b      	str	r3, [r7, #16]
}
 8002bd2:	bf00      	nop
 8002bd4:	e7fe      	b.n	8002bd4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <xEventGroupSetBits+0x52>
	__asm volatile
 8002be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	60fb      	str	r3, [r7, #12]
}
 8002bf2:	bf00      	nop
 8002bf4:	e7fe      	b.n	8002bf4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	3308      	adds	r3, #8
 8002c00:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8002c02:	f001 f825 	bl	8003c50 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8002c18:	e03c      	b.n	8002c94 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8002c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c30:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c38:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d108      	bne.n	8002c56 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00b      	beq.n	8002c68 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8002c50:	2301      	movs	r3, #1
 8002c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c54:	e008      	b.n	8002c68 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d101      	bne.n	8002c68 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8002c64:	2301      	movs	r3, #1
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8002c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d010      	beq.n	8002c90 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8002c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c8c:	f001 faa4 	bl	80041d8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8002c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d1be      	bne.n	8002c1a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8002caa:	f000 ffdf 	bl	8003c6c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb0:	681b      	ldr	r3, [r3, #0]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3738      	adds	r7, #56	; 0x38
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b087      	sub	sp, #28
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d107      	bne.n	8002ce0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e007      	b.n	8002cf0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d101      	bne.n	8002cf0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002cec:	2301      	movs	r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8002cf0:	697b      	ldr	r3, [r7, #20]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f103 0208 	add.w	r2, r3, #8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f04f 32ff 	mov.w	r2, #4294967295
 8002d16:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f103 0208 	add.w	r2, r3, #8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f103 0208 	add.w	r2, r3, #8
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	601a      	str	r2, [r3, #0]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db6:	d103      	bne.n	8002dc0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e00c      	b.n	8002dda <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3308      	adds	r3, #8
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	e002      	b.n	8002dce <vListInsert+0x2e>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d2f6      	bcs.n	8002dc8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	601a      	str	r2, [r3, #0]
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e12:	b480      	push	{r7}
 8002e14:	b085      	sub	sp, #20
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6892      	ldr	r2, [r2, #8]
 8002e28:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6852      	ldr	r2, [r2, #4]
 8002e32:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d103      	bne.n	8002e46 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	1e5a      	subs	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <xQueueGenericReset+0x2a>
	__asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	60bb      	str	r3, [r7, #8]
}
 8002e8e:	bf00      	nop
 8002e90:	e7fe      	b.n	8002e90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e92:	f002 f8cf 	bl	8005034 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9e:	68f9      	ldr	r1, [r7, #12]
 8002ea0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	441a      	add	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	68f9      	ldr	r1, [r7, #12]
 8002ec6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	441a      	add	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	22ff      	movs	r2, #255	; 0xff
 8002ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	22ff      	movs	r2, #255	; 0xff
 8002ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d114      	bne.n	8002f12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01a      	beq.n	8002f26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	3310      	adds	r3, #16
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f001 f90b 	bl	8004110 <xTaskRemoveFromEventList>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d012      	beq.n	8002f26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <xQueueGenericReset+0xcc>)
 8002f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	e009      	b.n	8002f26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3310      	adds	r3, #16
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fef1 	bl	8002cfe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3324      	adds	r3, #36	; 0x24
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff feec 	bl	8002cfe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f26:	f002 f8b5 	bl	8005094 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f2a:	2301      	movs	r3, #1
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	e000ed04 	.word	0xe000ed04

08002f38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08e      	sub	sp, #56	; 0x38
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10a      	bne.n	8002f62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f5e:	bf00      	nop
 8002f60:	e7fe      	b.n	8002f60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10a      	bne.n	8002f7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f7a:	bf00      	nop
 8002f7c:	e7fe      	b.n	8002f7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <xQueueGenericCreateStatic+0x52>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <xQueueGenericCreateStatic+0x56>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <xQueueGenericCreateStatic+0x58>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	623b      	str	r3, [r7, #32]
}
 8002fa6:	bf00      	nop
 8002fa8:	e7fe      	b.n	8002fa8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <xQueueGenericCreateStatic+0x7e>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <xQueueGenericCreateStatic+0x82>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <xQueueGenericCreateStatic+0x84>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10a      	bne.n	8002fd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	61fb      	str	r3, [r7, #28]
}
 8002fd2:	bf00      	nop
 8002fd4:	e7fe      	b.n	8002fd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002fd6:	2350      	movs	r3, #80	; 0x50
 8002fd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b50      	cmp	r3, #80	; 0x50
 8002fde:	d00a      	beq.n	8002ff6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	61bb      	str	r3, [r7, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	e7fe      	b.n	8002ff4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ff6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800300a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	4613      	mov	r3, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f805 	bl	8003028 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003020:	4618      	mov	r0, r3
 8003022:	3730      	adds	r7, #48	; 0x30
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d103      	bne.n	8003044 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	e002      	b.n	800304a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003056:	2101      	movs	r1, #1
 8003058:	69b8      	ldr	r0, [r7, #24]
 800305a:	f7ff ff05 	bl	8002e68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08e      	sub	sp, #56	; 0x38
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800307e:	2300      	movs	r3, #0
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10a      	bne.n	80030a2 <xQueueGenericSend+0x32>
	__asm volatile
 800308c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003090:	f383 8811 	msr	BASEPRI, r3
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800309e:	bf00      	nop
 80030a0:	e7fe      	b.n	80030a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d103      	bne.n	80030b0 <xQueueGenericSend+0x40>
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <xQueueGenericSend+0x44>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <xQueueGenericSend+0x46>
 80030b4:	2300      	movs	r3, #0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <xQueueGenericSend+0x60>
	__asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030cc:	bf00      	nop
 80030ce:	e7fe      	b.n	80030ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d103      	bne.n	80030de <xQueueGenericSend+0x6e>
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <xQueueGenericSend+0x72>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <xQueueGenericSend+0x74>
 80030e2:	2300      	movs	r3, #0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <xQueueGenericSend+0x8e>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	623b      	str	r3, [r7, #32]
}
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030fe:	f001 fa27 	bl	8004550 <xTaskGetSchedulerState>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <xQueueGenericSend+0x9e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <xQueueGenericSend+0xa2>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <xQueueGenericSend+0xa4>
 8003112:	2300      	movs	r3, #0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10a      	bne.n	800312e <xQueueGenericSend+0xbe>
	__asm volatile
 8003118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	61fb      	str	r3, [r7, #28]
}
 800312a:	bf00      	nop
 800312c:	e7fe      	b.n	800312c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800312e:	f001 ff81 	bl	8005034 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	429a      	cmp	r2, r3
 800313c:	d302      	bcc.n	8003144 <xQueueGenericSend+0xd4>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d129      	bne.n	8003198 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800314a:	f000 fa0b 	bl	8003564 <prvCopyDataToQueue>
 800314e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	2b00      	cmp	r3, #0
 8003156:	d010      	beq.n	800317a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	3324      	adds	r3, #36	; 0x24
 800315c:	4618      	mov	r0, r3
 800315e:	f000 ffd7 	bl	8004110 <xTaskRemoveFromEventList>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003168:	4b3f      	ldr	r3, [pc, #252]	; (8003268 <xQueueGenericSend+0x1f8>)
 800316a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	e00a      	b.n	8003190 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003180:	4b39      	ldr	r3, [pc, #228]	; (8003268 <xQueueGenericSend+0x1f8>)
 8003182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003190:	f001 ff80 	bl	8005094 <vPortExitCritical>
				return pdPASS;
 8003194:	2301      	movs	r3, #1
 8003196:	e063      	b.n	8003260 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d103      	bne.n	80031a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800319e:	f001 ff79 	bl	8005094 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e05c      	b.n	8003260 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d106      	bne.n	80031ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4618      	mov	r0, r3
 80031b2:	f001 f873 	bl	800429c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031b6:	2301      	movs	r3, #1
 80031b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031ba:	f001 ff6b 	bl	8005094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031be:	f000 fd47 	bl	8003c50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031c2:	f001 ff37 	bl	8005034 <vPortEnterCritical>
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d103      	bne.n	80031dc <xQueueGenericSend+0x16c>
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031e2:	b25b      	sxtb	r3, r3
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d103      	bne.n	80031f2 <xQueueGenericSend+0x182>
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031f2:	f001 ff4f 	bl	8005094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031f6:	1d3a      	adds	r2, r7, #4
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f001 f862 	bl	80042c8 <xTaskCheckForTimeOut>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d124      	bne.n	8003254 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800320a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800320c:	f000 faa2 	bl	8003754 <prvIsQueueFull>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d018      	beq.n	8003248 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	3310      	adds	r3, #16
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4611      	mov	r1, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f000 feea 	bl	8003ff8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003226:	f000 fa2d 	bl	8003684 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800322a:	f000 fd1f 	bl	8003c6c <xTaskResumeAll>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	f47f af7c 	bne.w	800312e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003236:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <xQueueGenericSend+0x1f8>)
 8003238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	e772      	b.n	800312e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800324a:	f000 fa1b 	bl	8003684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800324e:	f000 fd0d 	bl	8003c6c <xTaskResumeAll>
 8003252:	e76c      	b.n	800312e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003256:	f000 fa15 	bl	8003684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800325a:	f000 fd07 	bl	8003c6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800325e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003260:	4618      	mov	r0, r3
 8003262:	3738      	adds	r7, #56	; 0x38
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	e000ed04 	.word	0xe000ed04

0800326c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b090      	sub	sp, #64	; 0x40
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10a      	bne.n	800329a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003296:	bf00      	nop
 8003298:	e7fe      	b.n	8003298 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d103      	bne.n	80032a8 <xQueueGenericSendFromISR+0x3c>
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <xQueueGenericSendFromISR+0x40>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <xQueueGenericSendFromISR+0x42>
 80032ac:	2300      	movs	r3, #0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032c4:	bf00      	nop
 80032c6:	e7fe      	b.n	80032c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d103      	bne.n	80032d6 <xQueueGenericSendFromISR+0x6a>
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <xQueueGenericSendFromISR+0x6e>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <xQueueGenericSendFromISR+0x70>
 80032da:	2300      	movs	r3, #0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	623b      	str	r3, [r7, #32]
}
 80032f2:	bf00      	nop
 80032f4:	e7fe      	b.n	80032f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032f6:	f001 ff7f 	bl	80051f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032fa:	f3ef 8211 	mrs	r2, BASEPRI
 80032fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	61fa      	str	r2, [r7, #28]
 8003310:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003312:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003314:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331e:	429a      	cmp	r2, r3
 8003320:	d302      	bcc.n	8003328 <xQueueGenericSendFromISR+0xbc>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d12f      	bne.n	8003388 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800332e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800333e:	f000 f911 	bl	8003564 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003342:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334a:	d112      	bne.n	8003372 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	2b00      	cmp	r3, #0
 8003352:	d016      	beq.n	8003382 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	3324      	adds	r3, #36	; 0x24
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fed9 	bl	8004110 <xTaskRemoveFromEventList>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00e      	beq.n	8003382 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00b      	beq.n	8003382 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e007      	b.n	8003382 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003372:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003376:	3301      	adds	r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	b25a      	sxtb	r2, r3
 800337c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003382:	2301      	movs	r3, #1
 8003384:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003386:	e001      	b.n	800338c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003388:	2300      	movs	r3, #0
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800338c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003396:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800339a:	4618      	mov	r0, r3
 800339c:	3740      	adds	r7, #64	; 0x40
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08c      	sub	sp, #48	; 0x30
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10a      	bne.n	80033d4 <xQueueReceive+0x30>
	__asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	623b      	str	r3, [r7, #32]
}
 80033d0:	bf00      	nop
 80033d2:	e7fe      	b.n	80033d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d103      	bne.n	80033e2 <xQueueReceive+0x3e>
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <xQueueReceive+0x42>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <xQueueReceive+0x44>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <xQueueReceive+0x5e>
	__asm volatile
 80033ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	61fb      	str	r3, [r7, #28]
}
 80033fe:	bf00      	nop
 8003400:	e7fe      	b.n	8003400 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003402:	f001 f8a5 	bl	8004550 <xTaskGetSchedulerState>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d102      	bne.n	8003412 <xQueueReceive+0x6e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <xQueueReceive+0x72>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <xQueueReceive+0x74>
 8003416:	2300      	movs	r3, #0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <xQueueReceive+0x8e>
	__asm volatile
 800341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	61bb      	str	r3, [r7, #24]
}
 800342e:	bf00      	nop
 8003430:	e7fe      	b.n	8003430 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003432:	f001 fdff 	bl	8005034 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01f      	beq.n	8003482 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003442:	68b9      	ldr	r1, [r7, #8]
 8003444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003446:	f000 f8f7 	bl	8003638 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	1e5a      	subs	r2, r3, #1
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00f      	beq.n	800347a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345c:	3310      	adds	r3, #16
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fe56 	bl	8004110 <xTaskRemoveFromEventList>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d007      	beq.n	800347a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800346a:	4b3d      	ldr	r3, [pc, #244]	; (8003560 <xQueueReceive+0x1bc>)
 800346c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800347a:	f001 fe0b 	bl	8005094 <vPortExitCritical>
				return pdPASS;
 800347e:	2301      	movs	r3, #1
 8003480:	e069      	b.n	8003556 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d103      	bne.n	8003490 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003488:	f001 fe04 	bl	8005094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800348c:	2300      	movs	r3, #0
 800348e:	e062      	b.n	8003556 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003496:	f107 0310 	add.w	r3, r7, #16
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fefe 	bl	800429c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034a0:	2301      	movs	r3, #1
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034a4:	f001 fdf6 	bl	8005094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034a8:	f000 fbd2 	bl	8003c50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034ac:	f001 fdc2 	bl	8005034 <vPortEnterCritical>
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034b6:	b25b      	sxtb	r3, r3
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d103      	bne.n	80034c6 <xQueueReceive+0x122>
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034cc:	b25b      	sxtb	r3, r3
 80034ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d2:	d103      	bne.n	80034dc <xQueueReceive+0x138>
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034dc:	f001 fdda 	bl	8005094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034e0:	1d3a      	adds	r2, r7, #4
 80034e2:	f107 0310 	add.w	r3, r7, #16
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 feed 	bl	80042c8 <xTaskCheckForTimeOut>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d123      	bne.n	800353c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034f6:	f000 f917 	bl	8003728 <prvIsQueueEmpty>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d017      	beq.n	8003530 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	3324      	adds	r3, #36	; 0x24
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	4611      	mov	r1, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fd75 	bl	8003ff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800350e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003510:	f000 f8b8 	bl	8003684 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003514:	f000 fbaa 	bl	8003c6c <xTaskResumeAll>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d189      	bne.n	8003432 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <xQueueReceive+0x1bc>)
 8003520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	e780      	b.n	8003432 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003532:	f000 f8a7 	bl	8003684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003536:	f000 fb99 	bl	8003c6c <xTaskResumeAll>
 800353a:	e77a      	b.n	8003432 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800353c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800353e:	f000 f8a1 	bl	8003684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003542:	f000 fb93 	bl	8003c6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003548:	f000 f8ee 	bl	8003728 <prvIsQueueEmpty>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	f43f af6f 	beq.w	8003432 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003554:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003556:	4618      	mov	r0, r3
 8003558:	3730      	adds	r7, #48	; 0x30
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	e000ed04 	.word	0xe000ed04

08003564 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10d      	bne.n	800359e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d14d      	bne.n	8003626 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fffc 	bl	800458c <xTaskPriorityDisinherit>
 8003594:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	e043      	b.n	8003626 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d119      	bne.n	80035d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6858      	ldr	r0, [r3, #4]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	461a      	mov	r2, r3
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	f002 f876 	bl	80056a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	441a      	add	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d32b      	bcc.n	8003626 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	e026      	b.n	8003626 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68d8      	ldr	r0, [r3, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	461a      	mov	r2, r3
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	f002 f85c 	bl	80056a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	425b      	negs	r3, r3
 80035f2:	441a      	add	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d207      	bcs.n	8003614 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	425b      	negs	r3, r3
 800360e:	441a      	add	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d105      	bne.n	8003626 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	3b01      	subs	r3, #1
 8003624:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800362e:	697b      	ldr	r3, [r7, #20]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d018      	beq.n	800367c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	441a      	add	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	429a      	cmp	r2, r3
 8003662:	d303      	bcc.n	800366c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68d9      	ldr	r1, [r3, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	461a      	mov	r2, r3
 8003676:	6838      	ldr	r0, [r7, #0]
 8003678:	f002 f812 	bl	80056a0 <memcpy>
	}
}
 800367c:	bf00      	nop
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800368c:	f001 fcd2 	bl	8005034 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003696:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003698:	e011      	b.n	80036be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d012      	beq.n	80036c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3324      	adds	r3, #36	; 0x24
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 fd32 	bl	8004110 <xTaskRemoveFromEventList>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80036b2:	f000 fe6b 	bl	800438c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	dce9      	bgt.n	800369a <prvUnlockQueue+0x16>
 80036c6:	e000      	b.n	80036ca <prvUnlockQueue+0x46>
					break;
 80036c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	22ff      	movs	r2, #255	; 0xff
 80036ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036d2:	f001 fcdf 	bl	8005094 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036d6:	f001 fcad 	bl	8005034 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036e2:	e011      	b.n	8003708 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d012      	beq.n	8003712 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3310      	adds	r3, #16
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fd0d 	bl	8004110 <xTaskRemoveFromEventList>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036fc:	f000 fe46 	bl	800438c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003700:	7bbb      	ldrb	r3, [r7, #14]
 8003702:	3b01      	subs	r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800370c:	2b00      	cmp	r3, #0
 800370e:	dce9      	bgt.n	80036e4 <prvUnlockQueue+0x60>
 8003710:	e000      	b.n	8003714 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003712:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	22ff      	movs	r2, #255	; 0xff
 8003718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800371c:	f001 fcba 	bl	8005094 <vPortExitCritical>
}
 8003720:	bf00      	nop
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003730:	f001 fc80 	bl	8005034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800373c:	2301      	movs	r3, #1
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	e001      	b.n	8003746 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003746:	f001 fca5 	bl	8005094 <vPortExitCritical>

	return xReturn;
 800374a:	68fb      	ldr	r3, [r7, #12]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800375c:	f001 fc6a 	bl	8005034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003768:	429a      	cmp	r2, r3
 800376a:	d102      	bne.n	8003772 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800376c:	2301      	movs	r3, #1
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	e001      	b.n	8003776 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003776:	f001 fc8d 	bl	8005094 <vPortExitCritical>

	return xReturn;
 800377a:	68fb      	ldr	r3, [r7, #12]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	e014      	b.n	80037be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003794:	4a0f      	ldr	r2, [pc, #60]	; (80037d4 <vQueueAddToRegistry+0x50>)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80037a0:	490c      	ldr	r1, [pc, #48]	; (80037d4 <vQueueAddToRegistry+0x50>)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80037aa:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <vQueueAddToRegistry+0x50>)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4413      	add	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80037b6:	e006      	b.n	80037c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	3301      	adds	r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b07      	cmp	r3, #7
 80037c2:	d9e7      	bls.n	8003794 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	200007e0 	.word	0x200007e0

080037d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037e8:	f001 fc24 	bl	8005034 <vPortEnterCritical>
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037f2:	b25b      	sxtb	r3, r3
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f8:	d103      	bne.n	8003802 <vQueueWaitForMessageRestricted+0x2a>
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003808:	b25b      	sxtb	r3, r3
 800380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380e:	d103      	bne.n	8003818 <vQueueWaitForMessageRestricted+0x40>
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003818:	f001 fc3c 	bl	8005094 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	3324      	adds	r3, #36	; 0x24
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fc43 	bl	80040b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003832:	6978      	ldr	r0, [r7, #20]
 8003834:	f7ff ff26 	bl	8003684 <prvUnlockQueue>
	}
 8003838:	bf00      	nop
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08e      	sub	sp, #56	; 0x38
 8003844:	af04      	add	r7, sp, #16
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800384e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	623b      	str	r3, [r7, #32]
}
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800386a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10a      	bne.n	8003886 <xTaskCreateStatic+0x46>
	__asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	61fb      	str	r3, [r7, #28]
}
 8003882:	bf00      	nop
 8003884:	e7fe      	b.n	8003884 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003886:	235c      	movs	r3, #92	; 0x5c
 8003888:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	2b5c      	cmp	r3, #92	; 0x5c
 800388e:	d00a      	beq.n	80038a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	61bb      	str	r3, [r7, #24]
}
 80038a2:	bf00      	nop
 80038a4:	e7fe      	b.n	80038a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80038a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d01e      	beq.n	80038ec <xTaskCreateStatic+0xac>
 80038ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01b      	beq.n	80038ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	2202      	movs	r2, #2
 80038c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038c6:	2300      	movs	r3, #0
 80038c8:	9303      	str	r3, [sp, #12]
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	9302      	str	r3, [sp, #8]
 80038ce:	f107 0314 	add.w	r3, r7, #20
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f850 	bl	8003984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038e6:	f000 f8dd 	bl	8003aa4 <prvAddNewTaskToReadyList>
 80038ea:	e001      	b.n	80038f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038f0:	697b      	ldr	r3, [r7, #20]
	}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3728      	adds	r7, #40	; 0x28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b08c      	sub	sp, #48	; 0x30
 80038fe:	af04      	add	r7, sp, #16
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	603b      	str	r3, [r7, #0]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4618      	mov	r0, r3
 8003910:	f001 fcb2 	bl	8005278 <pvPortMalloc>
 8003914:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00e      	beq.n	800393a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800391c:	205c      	movs	r0, #92	; 0x5c
 800391e:	f001 fcab 	bl	8005278 <pvPortMalloc>
 8003922:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
 8003930:	e005      	b.n	800393e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003932:	6978      	ldr	r0, [r7, #20]
 8003934:	f001 fd6c 	bl	8005410 <vPortFree>
 8003938:	e001      	b.n	800393e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d017      	beq.n	8003974 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800394c:	88fa      	ldrh	r2, [r7, #6]
 800394e:	2300      	movs	r3, #0
 8003950:	9303      	str	r3, [sp, #12]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	9302      	str	r3, [sp, #8]
 8003956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003958:	9301      	str	r3, [sp, #4]
 800395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f80e 	bl	8003984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003968:	69f8      	ldr	r0, [r7, #28]
 800396a:	f000 f89b 	bl	8003aa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800396e:	2301      	movs	r3, #1
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	e002      	b.n	800397a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003974:	f04f 33ff 	mov.w	r3, #4294967295
 8003978:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800397a:	69bb      	ldr	r3, [r7, #24]
	}
 800397c:	4618      	mov	r0, r3
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	461a      	mov	r2, r3
 800399c:	21a5      	movs	r1, #165	; 0xa5
 800399e:	f001 fe8d 	bl	80056bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039ac:	3b01      	subs	r3, #1
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f023 0307 	bic.w	r3, r3, #7
 80039ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80039c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	617b      	str	r3, [r7, #20]
}
 80039d8:	bf00      	nop
 80039da:	e7fe      	b.n	80039da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01f      	beq.n	8003a22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	e012      	b.n	8003a0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	4413      	add	r3, r2
 80039ee:	7819      	ldrb	r1, [r3, #0]
 80039f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	4413      	add	r3, r2
 80039f6:	3334      	adds	r3, #52	; 0x34
 80039f8:	460a      	mov	r2, r1
 80039fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	4413      	add	r3, r2
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d006      	beq.n	8003a16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	2b0f      	cmp	r3, #15
 8003a12:	d9e9      	bls.n	80039e8 <prvInitialiseNewTask+0x64>
 8003a14:	e000      	b.n	8003a18 <prvInitialiseNewTask+0x94>
			{
				break;
 8003a16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a20:	e003      	b.n	8003a2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2c:	2b37      	cmp	r3, #55	; 0x37
 8003a2e:	d901      	bls.n	8003a34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a30:	2337      	movs	r3, #55	; 0x37
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	2200      	movs	r2, #0
 8003a44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff f977 	bl	8002d3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	3318      	adds	r3, #24
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff f972 	bl	8002d3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	2200      	movs	r2, #0
 8003a74:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	68f9      	ldr	r1, [r7, #12]
 8003a82:	69b8      	ldr	r0, [r7, #24]
 8003a84:	f001 f9aa 	bl	8004ddc <pxPortInitialiseStack>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a9a:	bf00      	nop
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003aac:	f001 fac2 	bl	8005034 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ab0:	4b2d      	ldr	r3, [pc, #180]	; (8003b68 <prvAddNewTaskToReadyList+0xc4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	4a2c      	ldr	r2, [pc, #176]	; (8003b68 <prvAddNewTaskToReadyList+0xc4>)
 8003ab8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003aba:	4b2c      	ldr	r3, [pc, #176]	; (8003b6c <prvAddNewTaskToReadyList+0xc8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ac2:	4a2a      	ldr	r2, [pc, #168]	; (8003b6c <prvAddNewTaskToReadyList+0xc8>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ac8:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <prvAddNewTaskToReadyList+0xc4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d110      	bne.n	8003af2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ad0:	f000 fc80 	bl	80043d4 <prvInitialiseTaskLists>
 8003ad4:	e00d      	b.n	8003af2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ad6:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <prvAddNewTaskToReadyList+0xcc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ade:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <prvAddNewTaskToReadyList+0xc8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d802      	bhi.n	8003af2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003aec:	4a1f      	ldr	r2, [pc, #124]	; (8003b6c <prvAddNewTaskToReadyList+0xc8>)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003af2:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <prvAddNewTaskToReadyList+0xd0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3301      	adds	r3, #1
 8003af8:	4a1e      	ldr	r2, [pc, #120]	; (8003b74 <prvAddNewTaskToReadyList+0xd0>)
 8003afa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <prvAddNewTaskToReadyList+0xd0>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <prvAddNewTaskToReadyList+0xd4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d903      	bls.n	8003b18 <prvAddNewTaskToReadyList+0x74>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <prvAddNewTaskToReadyList+0xd4>)
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <prvAddNewTaskToReadyList+0xd8>)
 8003b26:	441a      	add	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	f7ff f912 	bl	8002d58 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b34:	f001 faae 	bl	8005094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b38:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <prvAddNewTaskToReadyList+0xcc>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00e      	beq.n	8003b5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <prvAddNewTaskToReadyList+0xc8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d207      	bcs.n	8003b5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <prvAddNewTaskToReadyList+0xdc>)
 8003b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000cf4 	.word	0x20000cf4
 8003b6c:	20000820 	.word	0x20000820
 8003b70:	20000d00 	.word	0x20000d00
 8003b74:	20000d10 	.word	0x20000d10
 8003b78:	20000cfc 	.word	0x20000cfc
 8003b7c:	20000824 	.word	0x20000824
 8003b80:	e000ed04 	.word	0xe000ed04

08003b84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	; 0x28
 8003b88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b92:	463a      	mov	r2, r7
 8003b94:	1d39      	adds	r1, r7, #4
 8003b96:	f107 0308 	add.w	r3, r7, #8
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe fee6 	bl	800296c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ba0:	6839      	ldr	r1, [r7, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	9202      	str	r2, [sp, #8]
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	2300      	movs	r3, #0
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	460a      	mov	r2, r1
 8003bb2:	4921      	ldr	r1, [pc, #132]	; (8003c38 <vTaskStartScheduler+0xb4>)
 8003bb4:	4821      	ldr	r0, [pc, #132]	; (8003c3c <vTaskStartScheduler+0xb8>)
 8003bb6:	f7ff fe43 	bl	8003840 <xTaskCreateStatic>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	4a20      	ldr	r2, [pc, #128]	; (8003c40 <vTaskStartScheduler+0xbc>)
 8003bbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bc0:	4b1f      	ldr	r3, [pc, #124]	; (8003c40 <vTaskStartScheduler+0xbc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	e001      	b.n	8003bd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d102      	bne.n	8003bde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003bd8:	f000 fdb2 	bl	8004740 <xTimerCreateTimerTask>
 8003bdc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d116      	bne.n	8003c12 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	613b      	str	r3, [r7, #16]
}
 8003bf6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bf8:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <vTaskStartScheduler+0xc0>)
 8003bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <vTaskStartScheduler+0xc4>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c06:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <vTaskStartScheduler+0xc8>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c0c:	f001 f970 	bl	8004ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c10:	e00e      	b.n	8003c30 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c18:	d10a      	bne.n	8003c30 <vTaskStartScheduler+0xac>
	__asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	60fb      	str	r3, [r7, #12]
}
 8003c2c:	bf00      	nop
 8003c2e:	e7fe      	b.n	8003c2e <vTaskStartScheduler+0xaa>
}
 8003c30:	bf00      	nop
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	080061bc 	.word	0x080061bc
 8003c3c:	080043a5 	.word	0x080043a5
 8003c40:	20000d18 	.word	0x20000d18
 8003c44:	20000d14 	.word	0x20000d14
 8003c48:	20000d00 	.word	0x20000d00
 8003c4c:	20000cf8 	.word	0x20000cf8

08003c50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <vTaskSuspendAll+0x18>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	4a03      	ldr	r2, [pc, #12]	; (8003c68 <vTaskSuspendAll+0x18>)
 8003c5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c5e:	bf00      	nop
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	20000d1c 	.word	0x20000d1c

08003c6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c7a:	4b42      	ldr	r3, [pc, #264]	; (8003d84 <xTaskResumeAll+0x118>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	603b      	str	r3, [r7, #0]
}
 8003c94:	bf00      	nop
 8003c96:	e7fe      	b.n	8003c96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c98:	f001 f9cc 	bl	8005034 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c9c:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <xTaskResumeAll+0x118>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	4a38      	ldr	r2, [pc, #224]	; (8003d84 <xTaskResumeAll+0x118>)
 8003ca4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ca6:	4b37      	ldr	r3, [pc, #220]	; (8003d84 <xTaskResumeAll+0x118>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d162      	bne.n	8003d74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cae:	4b36      	ldr	r3, [pc, #216]	; (8003d88 <xTaskResumeAll+0x11c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d05e      	beq.n	8003d74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cb6:	e02f      	b.n	8003d18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cb8:	4b34      	ldr	r3, [pc, #208]	; (8003d8c <xTaskResumeAll+0x120>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff f8a4 	bl	8002e12 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff f89f 	bl	8002e12 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd8:	4b2d      	ldr	r3, [pc, #180]	; (8003d90 <xTaskResumeAll+0x124>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d903      	bls.n	8003ce8 <xTaskResumeAll+0x7c>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	4a2a      	ldr	r2, [pc, #168]	; (8003d90 <xTaskResumeAll+0x124>)
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4a27      	ldr	r2, [pc, #156]	; (8003d94 <xTaskResumeAll+0x128>)
 8003cf6:	441a      	add	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	f7ff f82a 	bl	8002d58 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d08:	4b23      	ldr	r3, [pc, #140]	; (8003d98 <xTaskResumeAll+0x12c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d302      	bcc.n	8003d18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d12:	4b22      	ldr	r3, [pc, #136]	; (8003d9c <xTaskResumeAll+0x130>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d18:	4b1c      	ldr	r3, [pc, #112]	; (8003d8c <xTaskResumeAll+0x120>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1cb      	bne.n	8003cb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d26:	f000 fbf3 	bl	8004510 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d2a:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <xTaskResumeAll+0x134>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d010      	beq.n	8003d58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d36:	f000 f847 	bl	8003dc8 <xTaskIncrementTick>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d40:	4b16      	ldr	r3, [pc, #88]	; (8003d9c <xTaskResumeAll+0x130>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f1      	bne.n	8003d36 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003d52:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <xTaskResumeAll+0x134>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d58:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <xTaskResumeAll+0x130>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d009      	beq.n	8003d74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d60:	2301      	movs	r3, #1
 8003d62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <xTaskResumeAll+0x138>)
 8003d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d74:	f001 f98e 	bl	8005094 <vPortExitCritical>

	return xAlreadyYielded;
 8003d78:	68bb      	ldr	r3, [r7, #8]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000d1c 	.word	0x20000d1c
 8003d88:	20000cf4 	.word	0x20000cf4
 8003d8c:	20000cb4 	.word	0x20000cb4
 8003d90:	20000cfc 	.word	0x20000cfc
 8003d94:	20000824 	.word	0x20000824
 8003d98:	20000820 	.word	0x20000820
 8003d9c:	20000d08 	.word	0x20000d08
 8003da0:	20000d04 	.word	0x20000d04
 8003da4:	e000ed04 	.word	0xe000ed04

08003da8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <xTaskGetTickCount+0x1c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003db4:	687b      	ldr	r3, [r7, #4]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	20000cf8 	.word	0x20000cf8

08003dc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dd2:	4b4f      	ldr	r3, [pc, #316]	; (8003f10 <xTaskIncrementTick+0x148>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f040 808f 	bne.w	8003efa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ddc:	4b4d      	ldr	r3, [pc, #308]	; (8003f14 <xTaskIncrementTick+0x14c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3301      	adds	r3, #1
 8003de2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003de4:	4a4b      	ldr	r2, [pc, #300]	; (8003f14 <xTaskIncrementTick+0x14c>)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d120      	bne.n	8003e32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003df0:	4b49      	ldr	r3, [pc, #292]	; (8003f18 <xTaskIncrementTick+0x150>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <xTaskIncrementTick+0x48>
	__asm volatile
 8003dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfe:	f383 8811 	msr	BASEPRI, r3
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	603b      	str	r3, [r7, #0]
}
 8003e0c:	bf00      	nop
 8003e0e:	e7fe      	b.n	8003e0e <xTaskIncrementTick+0x46>
 8003e10:	4b41      	ldr	r3, [pc, #260]	; (8003f18 <xTaskIncrementTick+0x150>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <xTaskIncrementTick+0x154>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a3f      	ldr	r2, [pc, #252]	; (8003f18 <xTaskIncrementTick+0x150>)
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	4a3f      	ldr	r2, [pc, #252]	; (8003f1c <xTaskIncrementTick+0x154>)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	4b3e      	ldr	r3, [pc, #248]	; (8003f20 <xTaskIncrementTick+0x158>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	4a3d      	ldr	r2, [pc, #244]	; (8003f20 <xTaskIncrementTick+0x158>)
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	f000 fb6f 	bl	8004510 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e32:	4b3c      	ldr	r3, [pc, #240]	; (8003f24 <xTaskIncrementTick+0x15c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d349      	bcc.n	8003ed0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e3c:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <xTaskIncrementTick+0x150>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d104      	bne.n	8003e50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e46:	4b37      	ldr	r3, [pc, #220]	; (8003f24 <xTaskIncrementTick+0x15c>)
 8003e48:	f04f 32ff 	mov.w	r2, #4294967295
 8003e4c:	601a      	str	r2, [r3, #0]
					break;
 8003e4e:	e03f      	b.n	8003ed0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e50:	4b31      	ldr	r3, [pc, #196]	; (8003f18 <xTaskIncrementTick+0x150>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d203      	bcs.n	8003e70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e68:	4a2e      	ldr	r2, [pc, #184]	; (8003f24 <xTaskIncrementTick+0x15c>)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e6e:	e02f      	b.n	8003ed0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	3304      	adds	r3, #4
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fe ffcc 	bl	8002e12 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d004      	beq.n	8003e8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	3318      	adds	r3, #24
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fe ffc3 	bl	8002e12 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e90:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <xTaskIncrementTick+0x160>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d903      	bls.n	8003ea0 <xTaskIncrementTick+0xd8>
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <xTaskIncrementTick+0x160>)
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <xTaskIncrementTick+0x164>)
 8003eae:	441a      	add	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f7fe ff4e 	bl	8002d58 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <xTaskIncrementTick+0x168>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d3b8      	bcc.n	8003e3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ece:	e7b5      	b.n	8003e3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ed0:	4b17      	ldr	r3, [pc, #92]	; (8003f30 <xTaskIncrementTick+0x168>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed6:	4915      	ldr	r1, [pc, #84]	; (8003f2c <xTaskIncrementTick+0x164>)
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d901      	bls.n	8003eec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <xTaskIncrementTick+0x16c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	e004      	b.n	8003f04 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003efa:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <xTaskIncrementTick+0x170>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3301      	adds	r3, #1
 8003f00:	4a0d      	ldr	r2, [pc, #52]	; (8003f38 <xTaskIncrementTick+0x170>)
 8003f02:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f04:	697b      	ldr	r3, [r7, #20]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000d1c 	.word	0x20000d1c
 8003f14:	20000cf8 	.word	0x20000cf8
 8003f18:	20000cac 	.word	0x20000cac
 8003f1c:	20000cb0 	.word	0x20000cb0
 8003f20:	20000d0c 	.word	0x20000d0c
 8003f24:	20000d14 	.word	0x20000d14
 8003f28:	20000cfc 	.word	0x20000cfc
 8003f2c:	20000824 	.word	0x20000824
 8003f30:	20000820 	.word	0x20000820
 8003f34:	20000d08 	.word	0x20000d08
 8003f38:	20000d04 	.word	0x20000d04

08003f3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f42:	4b28      	ldr	r3, [pc, #160]	; (8003fe4 <vTaskSwitchContext+0xa8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f4a:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <vTaskSwitchContext+0xac>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f50:	e041      	b.n	8003fd6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003f52:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <vTaskSwitchContext+0xac>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f58:	4b24      	ldr	r3, [pc, #144]	; (8003fec <vTaskSwitchContext+0xb0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	e010      	b.n	8003f82 <vTaskSwitchContext+0x46>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <vTaskSwitchContext+0x40>
	__asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	607b      	str	r3, [r7, #4]
}
 8003f78:	bf00      	nop
 8003f7a:	e7fe      	b.n	8003f7a <vTaskSwitchContext+0x3e>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	491b      	ldr	r1, [pc, #108]	; (8003ff0 <vTaskSwitchContext+0xb4>)
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0e4      	beq.n	8003f60 <vTaskSwitchContext+0x24>
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4a13      	ldr	r2, [pc, #76]	; (8003ff0 <vTaskSwitchContext+0xb4>)
 8003fa2:	4413      	add	r3, r2
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	605a      	str	r2, [r3, #4]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d104      	bne.n	8003fc6 <vTaskSwitchContext+0x8a>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a09      	ldr	r2, [pc, #36]	; (8003ff4 <vTaskSwitchContext+0xb8>)
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	4a06      	ldr	r2, [pc, #24]	; (8003fec <vTaskSwitchContext+0xb0>)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6013      	str	r3, [r2, #0]
}
 8003fd6:	bf00      	nop
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	20000d1c 	.word	0x20000d1c
 8003fe8:	20000d08 	.word	0x20000d08
 8003fec:	20000cfc 	.word	0x20000cfc
 8003ff0:	20000824 	.word	0x20000824
 8003ff4:	20000820 	.word	0x20000820

08003ff8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	60fb      	str	r3, [r7, #12]
}
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800401e:	4b07      	ldr	r3, [pc, #28]	; (800403c <vTaskPlaceOnEventList+0x44>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3318      	adds	r3, #24
 8004024:	4619      	mov	r1, r3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fe feba 	bl	8002da0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800402c:	2101      	movs	r1, #1
 800402e:	6838      	ldr	r0, [r7, #0]
 8004030:	f000 fb32 	bl	8004698 <prvAddCurrentTaskToDelayedList>
}
 8004034:	bf00      	nop
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000820 	.word	0x20000820

08004040 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10a      	bne.n	8004068 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	617b      	str	r3, [r7, #20]
}
 8004064:	bf00      	nop
 8004066:	e7fe      	b.n	8004066 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <vTaskPlaceOnUnorderedEventList+0x70>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10a      	bne.n	8004086 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	613b      	str	r3, [r7, #16]
}
 8004082:	bf00      	nop
 8004084:	e7fe      	b.n	8004084 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004090:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004092:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3318      	adds	r3, #24
 8004098:	4619      	mov	r1, r3
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f7fe fe5c 	bl	8002d58 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040a0:	2101      	movs	r1, #1
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 faf8 	bl	8004698 <prvAddCurrentTaskToDelayedList>
}
 80040a8:	bf00      	nop
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20000d1c 	.word	0x20000d1c
 80040b4:	20000820 	.word	0x20000820

080040b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	617b      	str	r3, [r7, #20]
}
 80040dc:	bf00      	nop
 80040de:	e7fe      	b.n	80040de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040e0:	4b0a      	ldr	r3, [pc, #40]	; (800410c <vTaskPlaceOnEventListRestricted+0x54>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3318      	adds	r3, #24
 80040e6:	4619      	mov	r1, r3
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7fe fe35 	bl	8002d58 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80040f4:	f04f 33ff 	mov.w	r3, #4294967295
 80040f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	68b8      	ldr	r0, [r7, #8]
 80040fe:	f000 facb 	bl	8004698 <prvAddCurrentTaskToDelayedList>
	}
 8004102:	bf00      	nop
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000820 	.word	0x20000820

08004110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10a      	bne.n	800413c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	60fb      	str	r3, [r7, #12]
}
 8004138:	bf00      	nop
 800413a:	e7fe      	b.n	800413a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	3318      	adds	r3, #24
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe fe66 	bl	8002e12 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004146:	4b1e      	ldr	r3, [pc, #120]	; (80041c0 <xTaskRemoveFromEventList+0xb0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d11d      	bne.n	800418a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	3304      	adds	r3, #4
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe fe5d 	bl	8002e12 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415c:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <xTaskRemoveFromEventList+0xb4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d903      	bls.n	800416c <xTaskRemoveFromEventList+0x5c>
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <xTaskRemoveFromEventList+0xb4>)
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <xTaskRemoveFromEventList+0xb8>)
 800417a:	441a      	add	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	3304      	adds	r3, #4
 8004180:	4619      	mov	r1, r3
 8004182:	4610      	mov	r0, r2
 8004184:	f7fe fde8 	bl	8002d58 <vListInsertEnd>
 8004188:	e005      	b.n	8004196 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	3318      	adds	r3, #24
 800418e:	4619      	mov	r1, r3
 8004190:	480e      	ldr	r0, [pc, #56]	; (80041cc <xTaskRemoveFromEventList+0xbc>)
 8004192:	f7fe fde1 	bl	8002d58 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419a:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <xTaskRemoveFromEventList+0xc0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d905      	bls.n	80041b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <xTaskRemoveFromEventList+0xc4>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e001      	b.n	80041b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041b4:	697b      	ldr	r3, [r7, #20]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000d1c 	.word	0x20000d1c
 80041c4:	20000cfc 	.word	0x20000cfc
 80041c8:	20000824 	.word	0x20000824
 80041cc:	20000cb4 	.word	0x20000cb4
 80041d0:	20000820 	.word	0x20000820
 80041d4:	20000d08 	.word	0x20000d08

080041d8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80041e2:	4b29      	ldr	r3, [pc, #164]	; (8004288 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	613b      	str	r3, [r7, #16]
}
 80041fc:	bf00      	nop
 80041fe:	e7fe      	b.n	80041fe <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8004216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	60fb      	str	r3, [r7, #12]
}
 8004228:	bf00      	nop
 800422a:	e7fe      	b.n	800422a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fe fdf0 	bl	8002e12 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	3304      	adds	r3, #4
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe fdeb 	bl	8002e12 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004240:	4b12      	ldr	r3, [pc, #72]	; (800428c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d903      	bls.n	8004250 <vTaskRemoveFromUnorderedEventList+0x78>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	4a0f      	ldr	r2, [pc, #60]	; (800428c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4a0c      	ldr	r2, [pc, #48]	; (8004290 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800425e:	441a      	add	r2, r3
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	3304      	adds	r3, #4
 8004264:	4619      	mov	r1, r3
 8004266:	4610      	mov	r0, r2
 8004268:	f7fe fd76 	bl	8002d58 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004270:	4b08      	ldr	r3, [pc, #32]	; (8004294 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	429a      	cmp	r2, r3
 8004278:	d902      	bls.n	8004280 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800427a:	4b07      	ldr	r3, [pc, #28]	; (8004298 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]
	}
}
 8004280:	bf00      	nop
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000d1c 	.word	0x20000d1c
 800428c:	20000cfc 	.word	0x20000cfc
 8004290:	20000824 	.word	0x20000824
 8004294:	20000820 	.word	0x20000820
 8004298:	20000d08 	.word	0x20000d08

0800429c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042a4:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <vTaskInternalSetTimeOutState+0x24>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <vTaskInternalSetTimeOutState+0x28>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	605a      	str	r2, [r3, #4]
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	20000d0c 	.word	0x20000d0c
 80042c4:	20000cf8 	.word	0x20000cf8

080042c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b088      	sub	sp, #32
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	613b      	str	r3, [r7, #16]
}
 80042ea:	bf00      	nop
 80042ec:	e7fe      	b.n	80042ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10a      	bne.n	800430a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	60fb      	str	r3, [r7, #12]
}
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800430a:	f000 fe93 	bl	8005034 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800430e:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <xTaskCheckForTimeOut+0xbc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004326:	d102      	bne.n	800432e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004328:	2300      	movs	r3, #0
 800432a:	61fb      	str	r3, [r7, #28]
 800432c:	e023      	b.n	8004376 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <xTaskCheckForTimeOut+0xc0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d007      	beq.n	800434a <xTaskCheckForTimeOut+0x82>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	429a      	cmp	r2, r3
 8004342:	d302      	bcc.n	800434a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004344:	2301      	movs	r3, #1
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	e015      	b.n	8004376 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	429a      	cmp	r2, r3
 8004352:	d20b      	bcs.n	800436c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	1ad2      	subs	r2, r2, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff ff9b 	bl	800429c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004366:	2300      	movs	r3, #0
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	e004      	b.n	8004376 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004372:	2301      	movs	r3, #1
 8004374:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004376:	f000 fe8d 	bl	8005094 <vPortExitCritical>

	return xReturn;
 800437a:	69fb      	ldr	r3, [r7, #28]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3720      	adds	r7, #32
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000cf8 	.word	0x20000cf8
 8004388:	20000d0c 	.word	0x20000d0c

0800438c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004390:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <vTaskMissedYield+0x14>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]
}
 8004396:	bf00      	nop
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	20000d08 	.word	0x20000d08

080043a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043ac:	f000 f852 	bl	8004454 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <prvIdleTask+0x28>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d9f9      	bls.n	80043ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <prvIdleTask+0x2c>)
 80043ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043c8:	e7f0      	b.n	80043ac <prvIdleTask+0x8>
 80043ca:	bf00      	nop
 80043cc:	20000824 	.word	0x20000824
 80043d0:	e000ed04 	.word	0xe000ed04

080043d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043da:	2300      	movs	r3, #0
 80043dc:	607b      	str	r3, [r7, #4]
 80043de:	e00c      	b.n	80043fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4a12      	ldr	r2, [pc, #72]	; (8004434 <prvInitialiseTaskLists+0x60>)
 80043ec:	4413      	add	r3, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fe fc85 	bl	8002cfe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3301      	adds	r3, #1
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b37      	cmp	r3, #55	; 0x37
 80043fe:	d9ef      	bls.n	80043e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004400:	480d      	ldr	r0, [pc, #52]	; (8004438 <prvInitialiseTaskLists+0x64>)
 8004402:	f7fe fc7c 	bl	8002cfe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004406:	480d      	ldr	r0, [pc, #52]	; (800443c <prvInitialiseTaskLists+0x68>)
 8004408:	f7fe fc79 	bl	8002cfe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800440c:	480c      	ldr	r0, [pc, #48]	; (8004440 <prvInitialiseTaskLists+0x6c>)
 800440e:	f7fe fc76 	bl	8002cfe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004412:	480c      	ldr	r0, [pc, #48]	; (8004444 <prvInitialiseTaskLists+0x70>)
 8004414:	f7fe fc73 	bl	8002cfe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004418:	480b      	ldr	r0, [pc, #44]	; (8004448 <prvInitialiseTaskLists+0x74>)
 800441a:	f7fe fc70 	bl	8002cfe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800441e:	4b0b      	ldr	r3, [pc, #44]	; (800444c <prvInitialiseTaskLists+0x78>)
 8004420:	4a05      	ldr	r2, [pc, #20]	; (8004438 <prvInitialiseTaskLists+0x64>)
 8004422:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004424:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <prvInitialiseTaskLists+0x7c>)
 8004426:	4a05      	ldr	r2, [pc, #20]	; (800443c <prvInitialiseTaskLists+0x68>)
 8004428:	601a      	str	r2, [r3, #0]
}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000824 	.word	0x20000824
 8004438:	20000c84 	.word	0x20000c84
 800443c:	20000c98 	.word	0x20000c98
 8004440:	20000cb4 	.word	0x20000cb4
 8004444:	20000cc8 	.word	0x20000cc8
 8004448:	20000ce0 	.word	0x20000ce0
 800444c:	20000cac 	.word	0x20000cac
 8004450:	20000cb0 	.word	0x20000cb0

08004454 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800445a:	e019      	b.n	8004490 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800445c:	f000 fdea 	bl	8005034 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004460:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <prvCheckTasksWaitingTermination+0x50>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	4618      	mov	r0, r3
 800446e:	f7fe fcd0 	bl	8002e12 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <prvCheckTasksWaitingTermination+0x54>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3b01      	subs	r3, #1
 8004478:	4a0b      	ldr	r2, [pc, #44]	; (80044a8 <prvCheckTasksWaitingTermination+0x54>)
 800447a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <prvCheckTasksWaitingTermination+0x58>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3b01      	subs	r3, #1
 8004482:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <prvCheckTasksWaitingTermination+0x58>)
 8004484:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004486:	f000 fe05 	bl	8005094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f810 	bl	80044b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <prvCheckTasksWaitingTermination+0x58>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e1      	bne.n	800445c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000cc8 	.word	0x20000cc8
 80044a8:	20000cf4 	.word	0x20000cf4
 80044ac:	20000cdc 	.word	0x20000cdc

080044b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d108      	bne.n	80044d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 ffa2 	bl	8005410 <vPortFree>
				vPortFree( pxTCB );
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 ff9f 	bl	8005410 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044d2:	e018      	b.n	8004506 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d103      	bne.n	80044e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 ff96 	bl	8005410 <vPortFree>
	}
 80044e4:	e00f      	b.n	8004506 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d00a      	beq.n	8004506 <prvDeleteTCB+0x56>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	60fb      	str	r3, [r7, #12]
}
 8004502:	bf00      	nop
 8004504:	e7fe      	b.n	8004504 <prvDeleteTCB+0x54>
	}
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004516:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <prvResetNextTaskUnblockTime+0x38>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d104      	bne.n	800452a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <prvResetNextTaskUnblockTime+0x3c>)
 8004522:	f04f 32ff 	mov.w	r2, #4294967295
 8004526:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004528:	e008      	b.n	800453c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800452a:	4b07      	ldr	r3, [pc, #28]	; (8004548 <prvResetNextTaskUnblockTime+0x38>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	4a04      	ldr	r2, [pc, #16]	; (800454c <prvResetNextTaskUnblockTime+0x3c>)
 800453a:	6013      	str	r3, [r2, #0]
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	20000cac 	.word	0x20000cac
 800454c:	20000d14 	.word	0x20000d14

08004550 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004556:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <xTaskGetSchedulerState+0x34>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d102      	bne.n	8004564 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800455e:	2301      	movs	r3, #1
 8004560:	607b      	str	r3, [r7, #4]
 8004562:	e008      	b.n	8004576 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004564:	4b08      	ldr	r3, [pc, #32]	; (8004588 <xTaskGetSchedulerState+0x38>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d102      	bne.n	8004572 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800456c:	2302      	movs	r3, #2
 800456e:	607b      	str	r3, [r7, #4]
 8004570:	e001      	b.n	8004576 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004572:	2300      	movs	r3, #0
 8004574:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004576:	687b      	ldr	r3, [r7, #4]
	}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	20000d00 	.word	0x20000d00
 8004588:	20000d1c 	.word	0x20000d1c

0800458c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d056      	beq.n	8004650 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045a2:	4b2e      	ldr	r3, [pc, #184]	; (800465c <xTaskPriorityDisinherit+0xd0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d00a      	beq.n	80045c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	60fb      	str	r3, [r7, #12]
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	60bb      	str	r3, [r7, #8]
}
 80045dc:	bf00      	nop
 80045de:	e7fe      	b.n	80045de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e4:	1e5a      	subs	r2, r3, #1
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d02c      	beq.n	8004650 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d128      	bne.n	8004650 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	3304      	adds	r3, #4
 8004602:	4618      	mov	r0, r3
 8004604:	f7fe fc05 	bl	8002e12 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004620:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <xTaskPriorityDisinherit+0xd4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d903      	bls.n	8004630 <xTaskPriorityDisinherit+0xa4>
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	4a0c      	ldr	r2, [pc, #48]	; (8004660 <xTaskPriorityDisinherit+0xd4>)
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4a09      	ldr	r2, [pc, #36]	; (8004664 <xTaskPriorityDisinherit+0xd8>)
 800463e:	441a      	add	r2, r3
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	3304      	adds	r3, #4
 8004644:	4619      	mov	r1, r3
 8004646:	4610      	mov	r0, r2
 8004648:	f7fe fb86 	bl	8002d58 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800464c:	2301      	movs	r3, #1
 800464e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004650:	697b      	ldr	r3, [r7, #20]
	}
 8004652:	4618      	mov	r0, r3
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000820 	.word	0x20000820
 8004660:	20000cfc 	.word	0x20000cfc
 8004664:	20000824 	.word	0x20000824

08004668 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800466e:	4b09      	ldr	r3, [pc, #36]	; (8004694 <uxTaskResetEventItemValue+0x2c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004676:	4b07      	ldr	r3, [pc, #28]	; (8004694 <uxTaskResetEventItemValue+0x2c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <uxTaskResetEventItemValue+0x2c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8004684:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8004686:	687b      	ldr	r3, [r7, #4]
}
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	20000820 	.word	0x20000820

08004698 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046a2:	4b21      	ldr	r3, [pc, #132]	; (8004728 <prvAddCurrentTaskToDelayedList+0x90>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046a8:	4b20      	ldr	r3, [pc, #128]	; (800472c <prvAddCurrentTaskToDelayedList+0x94>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3304      	adds	r3, #4
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fe fbaf 	bl	8002e12 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ba:	d10a      	bne.n	80046d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046c2:	4b1a      	ldr	r3, [pc, #104]	; (800472c <prvAddCurrentTaskToDelayedList+0x94>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3304      	adds	r3, #4
 80046c8:	4619      	mov	r1, r3
 80046ca:	4819      	ldr	r0, [pc, #100]	; (8004730 <prvAddCurrentTaskToDelayedList+0x98>)
 80046cc:	f7fe fb44 	bl	8002d58 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046d0:	e026      	b.n	8004720 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4413      	add	r3, r2
 80046d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046da:	4b14      	ldr	r3, [pc, #80]	; (800472c <prvAddCurrentTaskToDelayedList+0x94>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d209      	bcs.n	80046fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ea:	4b12      	ldr	r3, [pc, #72]	; (8004734 <prvAddCurrentTaskToDelayedList+0x9c>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4b0f      	ldr	r3, [pc, #60]	; (800472c <prvAddCurrentTaskToDelayedList+0x94>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3304      	adds	r3, #4
 80046f4:	4619      	mov	r1, r3
 80046f6:	4610      	mov	r0, r2
 80046f8:	f7fe fb52 	bl	8002da0 <vListInsert>
}
 80046fc:	e010      	b.n	8004720 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046fe:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <prvAddCurrentTaskToDelayedList+0x94>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3304      	adds	r3, #4
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f7fe fb48 	bl	8002da0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	429a      	cmp	r2, r3
 8004718:	d202      	bcs.n	8004720 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800471a:	4a08      	ldr	r2, [pc, #32]	; (800473c <prvAddCurrentTaskToDelayedList+0xa4>)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	6013      	str	r3, [r2, #0]
}
 8004720:	bf00      	nop
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20000cf8 	.word	0x20000cf8
 800472c:	20000820 	.word	0x20000820
 8004730:	20000ce0 	.word	0x20000ce0
 8004734:	20000cb0 	.word	0x20000cb0
 8004738:	20000cac 	.word	0x20000cac
 800473c:	20000d14 	.word	0x20000d14

08004740 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08a      	sub	sp, #40	; 0x28
 8004744:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800474a:	f000 fb07 	bl	8004d5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800474e:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <xTimerCreateTimerTask+0x80>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d021      	beq.n	800479a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800475e:	1d3a      	adds	r2, r7, #4
 8004760:	f107 0108 	add.w	r1, r7, #8
 8004764:	f107 030c 	add.w	r3, r7, #12
 8004768:	4618      	mov	r0, r3
 800476a:	f7fe f919 	bl	80029a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	9202      	str	r2, [sp, #8]
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	2302      	movs	r3, #2
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	2300      	movs	r3, #0
 800477e:	460a      	mov	r2, r1
 8004780:	4910      	ldr	r1, [pc, #64]	; (80047c4 <xTimerCreateTimerTask+0x84>)
 8004782:	4811      	ldr	r0, [pc, #68]	; (80047c8 <xTimerCreateTimerTask+0x88>)
 8004784:	f7ff f85c 	bl	8003840 <xTaskCreateStatic>
 8004788:	4603      	mov	r3, r0
 800478a:	4a10      	ldr	r2, [pc, #64]	; (80047cc <xTimerCreateTimerTask+0x8c>)
 800478c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800478e:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <xTimerCreateTimerTask+0x8c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004796:	2301      	movs	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	613b      	str	r3, [r7, #16]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80047b6:	697b      	ldr	r3, [r7, #20]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20000d50 	.word	0x20000d50
 80047c4:	080061c4 	.word	0x080061c4
 80047c8:	08004905 	.word	0x08004905
 80047cc:	20000d54 	.word	0x20000d54

080047d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08a      	sub	sp, #40	; 0x28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047de:	2300      	movs	r3, #0
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80047e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	623b      	str	r3, [r7, #32]
}
 80047fa:	bf00      	nop
 80047fc:	e7fe      	b.n	80047fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80047fe:	4b1a      	ldr	r3, [pc, #104]	; (8004868 <xTimerGenericCommand+0x98>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d02a      	beq.n	800485c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b05      	cmp	r3, #5
 8004816:	dc18      	bgt.n	800484a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004818:	f7ff fe9a 	bl	8004550 <xTaskGetSchedulerState>
 800481c:	4603      	mov	r3, r0
 800481e:	2b02      	cmp	r3, #2
 8004820:	d109      	bne.n	8004836 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004822:	4b11      	ldr	r3, [pc, #68]	; (8004868 <xTimerGenericCommand+0x98>)
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	f107 0110 	add.w	r1, r7, #16
 800482a:	2300      	movs	r3, #0
 800482c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800482e:	f7fe fc1f 	bl	8003070 <xQueueGenericSend>
 8004832:	6278      	str	r0, [r7, #36]	; 0x24
 8004834:	e012      	b.n	800485c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004836:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <xTimerGenericCommand+0x98>)
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	f107 0110 	add.w	r1, r7, #16
 800483e:	2300      	movs	r3, #0
 8004840:	2200      	movs	r2, #0
 8004842:	f7fe fc15 	bl	8003070 <xQueueGenericSend>
 8004846:	6278      	str	r0, [r7, #36]	; 0x24
 8004848:	e008      	b.n	800485c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800484a:	4b07      	ldr	r3, [pc, #28]	; (8004868 <xTimerGenericCommand+0x98>)
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	f107 0110 	add.w	r1, r7, #16
 8004852:	2300      	movs	r3, #0
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	f7fe fd09 	bl	800326c <xQueueGenericSendFromISR>
 800485a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800485e:	4618      	mov	r0, r3
 8004860:	3728      	adds	r7, #40	; 0x28
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20000d50 	.word	0x20000d50

0800486c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af02      	add	r7, sp, #8
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004876:	4b22      	ldr	r3, [pc, #136]	; (8004900 <prvProcessExpiredTimer+0x94>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	3304      	adds	r3, #4
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe fac4 	bl	8002e12 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d022      	beq.n	80048de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	699a      	ldr	r2, [r3, #24]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	18d1      	adds	r1, r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	6978      	ldr	r0, [r7, #20]
 80048a6:	f000 f8d1 	bl	8004a4c <prvInsertTimerInActiveList>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01f      	beq.n	80048f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048b0:	2300      	movs	r3, #0
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	2300      	movs	r3, #0
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	2100      	movs	r1, #0
 80048ba:	6978      	ldr	r0, [r7, #20]
 80048bc:	f7ff ff88 	bl	80047d0 <xTimerGenericCommand>
 80048c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d113      	bne.n	80048f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	60fb      	str	r3, [r7, #12]
}
 80048da:	bf00      	nop
 80048dc:	e7fe      	b.n	80048dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	6978      	ldr	r0, [r7, #20]
 80048f6:	4798      	blx	r3
}
 80048f8:	bf00      	nop
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	20000d48 	.word	0x20000d48

08004904 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800490c:	f107 0308 	add.w	r3, r7, #8
 8004910:	4618      	mov	r0, r3
 8004912:	f000 f857 	bl	80049c4 <prvGetNextExpireTime>
 8004916:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4619      	mov	r1, r3
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f803 	bl	8004928 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004922:	f000 f8d5 	bl	8004ad0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004926:	e7f1      	b.n	800490c <prvTimerTask+0x8>

08004928 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004932:	f7ff f98d 	bl	8003c50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004936:	f107 0308 	add.w	r3, r7, #8
 800493a:	4618      	mov	r0, r3
 800493c:	f000 f866 	bl	8004a0c <prvSampleTimeNow>
 8004940:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d130      	bne.n	80049aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <prvProcessTimerOrBlockTask+0x3c>
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	429a      	cmp	r2, r3
 8004954:	d806      	bhi.n	8004964 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004956:	f7ff f989 	bl	8003c6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff ff85 	bl	800486c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004962:	e024      	b.n	80049ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800496a:	4b13      	ldr	r3, [pc, #76]	; (80049b8 <prvProcessTimerOrBlockTask+0x90>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <prvProcessTimerOrBlockTask+0x50>
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <prvProcessTimerOrBlockTask+0x52>
 8004978:	2300      	movs	r3, #0
 800497a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <prvProcessTimerOrBlockTask+0x94>)
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	4619      	mov	r1, r3
 800498a:	f7fe ff25 	bl	80037d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800498e:	f7ff f96d 	bl	8003c6c <xTaskResumeAll>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004998:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <prvProcessTimerOrBlockTask+0x98>)
 800499a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	f3bf 8f6f 	isb	sy
}
 80049a8:	e001      	b.n	80049ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80049aa:	f7ff f95f 	bl	8003c6c <xTaskResumeAll>
}
 80049ae:	bf00      	nop
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000d4c 	.word	0x20000d4c
 80049bc:	20000d50 	.word	0x20000d50
 80049c0:	e000ed04 	.word	0xe000ed04

080049c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049cc:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <prvGetNextExpireTime+0x44>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <prvGetNextExpireTime+0x16>
 80049d6:	2201      	movs	r2, #1
 80049d8:	e000      	b.n	80049dc <prvGetNextExpireTime+0x18>
 80049da:	2200      	movs	r2, #0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d105      	bne.n	80049f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049e8:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <prvGetNextExpireTime+0x44>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	e001      	b.n	80049f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80049f8:	68fb      	ldr	r3, [r7, #12]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	20000d48 	.word	0x20000d48

08004a0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a14:	f7ff f9c8 	bl	8003da8 <xTaskGetTickCount>
 8004a18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <prvSampleTimeNow+0x3c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d205      	bcs.n	8004a30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a24:	f000 f936 	bl	8004c94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	e002      	b.n	8004a36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a36:	4a04      	ldr	r2, [pc, #16]	; (8004a48 <prvSampleTimeNow+0x3c>)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000d58 	.word	0x20000d58

08004a4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d812      	bhi.n	8004a98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	1ad2      	subs	r2, r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d302      	bcc.n	8004a86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a80:	2301      	movs	r3, #1
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	e01b      	b.n	8004abe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a86:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <prvInsertTimerInActiveList+0x7c>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4610      	mov	r0, r2
 8004a92:	f7fe f985 	bl	8002da0 <vListInsert>
 8004a96:	e012      	b.n	8004abe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d206      	bcs.n	8004aae <prvInsertTimerInActiveList+0x62>
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d302      	bcc.n	8004aae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	e007      	b.n	8004abe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004aae:	4b07      	ldr	r3, [pc, #28]	; (8004acc <prvInsertTimerInActiveList+0x80>)
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4610      	mov	r0, r2
 8004aba:	f7fe f971 	bl	8002da0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004abe:	697b      	ldr	r3, [r7, #20]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000d4c 	.word	0x20000d4c
 8004acc:	20000d48 	.word	0x20000d48

08004ad0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08e      	sub	sp, #56	; 0x38
 8004ad4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ad6:	e0ca      	b.n	8004c6e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	da18      	bge.n	8004b10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	61fb      	str	r3, [r7, #28]
}
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b06:	6850      	ldr	r0, [r2, #4]
 8004b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b0a:	6892      	ldr	r2, [r2, #8]
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f2c0 80aa 	blt.w	8004c6c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	3304      	adds	r3, #4
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fe f972 	bl	8002e12 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b2e:	463b      	mov	r3, r7
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff ff6b 	bl	8004a0c <prvSampleTimeNow>
 8004b36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b09      	cmp	r3, #9
 8004b3c:	f200 8097 	bhi.w	8004c6e <prvProcessReceivedCommands+0x19e>
 8004b40:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <prvProcessReceivedCommands+0x78>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004b71 	.word	0x08004b71
 8004b4c:	08004b71 	.word	0x08004b71
 8004b50:	08004b71 	.word	0x08004b71
 8004b54:	08004be5 	.word	0x08004be5
 8004b58:	08004bf9 	.word	0x08004bf9
 8004b5c:	08004c43 	.word	0x08004c43
 8004b60:	08004b71 	.word	0x08004b71
 8004b64:	08004b71 	.word	0x08004b71
 8004b68:	08004be5 	.word	0x08004be5
 8004b6c:	08004bf9 	.word	0x08004bf9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	18d1      	adds	r1, r2, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b90:	f7ff ff5c 	bl	8004a4c <prvInsertTimerInActiveList>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d069      	beq.n	8004c6e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ba0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d05e      	beq.n	8004c6e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	441a      	add	r2, r3
 8004bb8:	2300      	movs	r3, #0
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bc2:	f7ff fe05 	bl	80047d0 <xTimerGenericCommand>
 8004bc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d14f      	bne.n	8004c6e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	61bb      	str	r3, [r7, #24]
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bea:	f023 0301 	bic.w	r3, r3, #1
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004bf6:	e03a      	b.n	8004c6e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10a      	bne.n	8004c2e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	617b      	str	r3, [r7, #20]
}
 8004c2a:	bf00      	nop
 8004c2c:	e7fe      	b.n	8004c2c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	699a      	ldr	r2, [r3, #24]
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	18d1      	adds	r1, r2, r3
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c3c:	f7ff ff06 	bl	8004a4c <prvInsertTimerInActiveList>
					break;
 8004c40:	e015      	b.n	8004c6e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d103      	bne.n	8004c58 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c52:	f000 fbdd 	bl	8005410 <vPortFree>
 8004c56:	e00a      	b.n	8004c6e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c6a:	e000      	b.n	8004c6e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004c6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c6e:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <prvProcessReceivedCommands+0x1c0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	1d39      	adds	r1, r7, #4
 8004c74:	2200      	movs	r2, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fe fb94 	bl	80033a4 <xQueueReceive>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f47f af2a 	bne.w	8004ad8 <prvProcessReceivedCommands+0x8>
	}
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	3730      	adds	r7, #48	; 0x30
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000d50 	.word	0x20000d50

08004c94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b088      	sub	sp, #32
 8004c98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c9a:	e048      	b.n	8004d2e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c9c:	4b2d      	ldr	r3, [pc, #180]	; (8004d54 <prvSwitchTimerLists+0xc0>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca6:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <prvSwitchTimerLists+0xc0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fe f8ac 	bl	8002e12 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d02e      	beq.n	8004d2e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d90e      	bls.n	8004d00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cee:	4b19      	ldr	r3, [pc, #100]	; (8004d54 <prvSwitchTimerLists+0xc0>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f7fe f851 	bl	8002da0 <vListInsert>
 8004cfe:	e016      	b.n	8004d2e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d00:	2300      	movs	r3, #0
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	2300      	movs	r3, #0
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	2100      	movs	r1, #0
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7ff fd60 	bl	80047d0 <xTimerGenericCommand>
 8004d10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	603b      	str	r3, [r7, #0]
}
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d2e:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <prvSwitchTimerLists+0xc0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1b1      	bne.n	8004c9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <prvSwitchTimerLists+0xc0>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <prvSwitchTimerLists+0xc4>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <prvSwitchTimerLists+0xc0>)
 8004d44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d46:	4a04      	ldr	r2, [pc, #16]	; (8004d58 <prvSwitchTimerLists+0xc4>)
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	6013      	str	r3, [r2, #0]
}
 8004d4c:	bf00      	nop
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20000d48 	.word	0x20000d48
 8004d58:	20000d4c 	.word	0x20000d4c

08004d5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d62:	f000 f967 	bl	8005034 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d66:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <prvCheckForValidListAndQueue+0x60>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d120      	bne.n	8004db0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d6e:	4814      	ldr	r0, [pc, #80]	; (8004dc0 <prvCheckForValidListAndQueue+0x64>)
 8004d70:	f7fd ffc5 	bl	8002cfe <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d74:	4813      	ldr	r0, [pc, #76]	; (8004dc4 <prvCheckForValidListAndQueue+0x68>)
 8004d76:	f7fd ffc2 	bl	8002cfe <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d7a:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <prvCheckForValidListAndQueue+0x6c>)
 8004d7c:	4a10      	ldr	r2, [pc, #64]	; (8004dc0 <prvCheckForValidListAndQueue+0x64>)
 8004d7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d80:	4b12      	ldr	r3, [pc, #72]	; (8004dcc <prvCheckForValidListAndQueue+0x70>)
 8004d82:	4a10      	ldr	r2, [pc, #64]	; (8004dc4 <prvCheckForValidListAndQueue+0x68>)
 8004d84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d86:	2300      	movs	r3, #0
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	4b11      	ldr	r3, [pc, #68]	; (8004dd0 <prvCheckForValidListAndQueue+0x74>)
 8004d8c:	4a11      	ldr	r2, [pc, #68]	; (8004dd4 <prvCheckForValidListAndQueue+0x78>)
 8004d8e:	2110      	movs	r1, #16
 8004d90:	200a      	movs	r0, #10
 8004d92:	f7fe f8d1 	bl	8002f38 <xQueueGenericCreateStatic>
 8004d96:	4603      	mov	r3, r0
 8004d98:	4a08      	ldr	r2, [pc, #32]	; (8004dbc <prvCheckForValidListAndQueue+0x60>)
 8004d9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d9c:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <prvCheckForValidListAndQueue+0x60>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <prvCheckForValidListAndQueue+0x60>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	490b      	ldr	r1, [pc, #44]	; (8004dd8 <prvCheckForValidListAndQueue+0x7c>)
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fe fcea 	bl	8003784 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004db0:	f000 f970 	bl	8005094 <vPortExitCritical>
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000d50 	.word	0x20000d50
 8004dc0:	20000d20 	.word	0x20000d20
 8004dc4:	20000d34 	.word	0x20000d34
 8004dc8:	20000d48 	.word	0x20000d48
 8004dcc:	20000d4c 	.word	0x20000d4c
 8004dd0:	20000dfc 	.word	0x20000dfc
 8004dd4:	20000d5c 	.word	0x20000d5c
 8004dd8:	080061cc 	.word	0x080061cc

08004ddc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3b04      	subs	r3, #4
 8004dec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3b04      	subs	r3, #4
 8004dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f023 0201 	bic.w	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3b04      	subs	r3, #4
 8004e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e0c:	4a0c      	ldr	r2, [pc, #48]	; (8004e40 <pxPortInitialiseStack+0x64>)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3b14      	subs	r3, #20
 8004e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3b04      	subs	r3, #4
 8004e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f06f 0202 	mvn.w	r2, #2
 8004e2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3b20      	subs	r3, #32
 8004e30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e32:	68fb      	ldr	r3, [r7, #12]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	08004e45 	.word	0x08004e45

08004e44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e4e:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <prvTaskExitError+0x54>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e56:	d00a      	beq.n	8004e6e <prvTaskExitError+0x2a>
	__asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	60fb      	str	r3, [r7, #12]
}
 8004e6a:	bf00      	nop
 8004e6c:	e7fe      	b.n	8004e6c <prvTaskExitError+0x28>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	60bb      	str	r3, [r7, #8]
}
 8004e80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e82:	bf00      	nop
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0fc      	beq.n	8004e84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e8a:	bf00      	nop
 8004e8c:	bf00      	nop
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	2000000c 	.word	0x2000000c
 8004e9c:	00000000 	.word	0x00000000

08004ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ea0:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <pxCurrentTCBConst2>)
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	6808      	ldr	r0, [r1, #0]
 8004ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eaa:	f380 8809 	msr	PSP, r0
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8811 	msr	BASEPRI, r0
 8004eba:	4770      	bx	lr
 8004ebc:	f3af 8000 	nop.w

08004ec0 <pxCurrentTCBConst2>:
 8004ec0:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop

08004ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ec8:	4808      	ldr	r0, [pc, #32]	; (8004eec <prvPortStartFirstTask+0x24>)
 8004eca:	6800      	ldr	r0, [r0, #0]
 8004ecc:	6800      	ldr	r0, [r0, #0]
 8004ece:	f380 8808 	msr	MSP, r0
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f380 8814 	msr	CONTROL, r0
 8004eda:	b662      	cpsie	i
 8004edc:	b661      	cpsie	f
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	df00      	svc	0
 8004ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eea:	bf00      	nop
 8004eec:	e000ed08 	.word	0xe000ed08

08004ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ef6:	4b46      	ldr	r3, [pc, #280]	; (8005010 <xPortStartScheduler+0x120>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a46      	ldr	r2, [pc, #280]	; (8005014 <xPortStartScheduler+0x124>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10a      	bne.n	8004f16 <xPortStartScheduler+0x26>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	613b      	str	r3, [r7, #16]
}
 8004f12:	bf00      	nop
 8004f14:	e7fe      	b.n	8004f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f16:	4b3e      	ldr	r3, [pc, #248]	; (8005010 <xPortStartScheduler+0x120>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a3f      	ldr	r2, [pc, #252]	; (8005018 <xPortStartScheduler+0x128>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10a      	bne.n	8004f36 <xPortStartScheduler+0x46>
	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	60fb      	str	r3, [r7, #12]
}
 8004f32:	bf00      	nop
 8004f34:	e7fe      	b.n	8004f34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f36:	4b39      	ldr	r3, [pc, #228]	; (800501c <xPortStartScheduler+0x12c>)
 8004f38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	22ff      	movs	r2, #255	; 0xff
 8004f46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	4b31      	ldr	r3, [pc, #196]	; (8005020 <xPortStartScheduler+0x130>)
 8004f5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f5e:	4b31      	ldr	r3, [pc, #196]	; (8005024 <xPortStartScheduler+0x134>)
 8004f60:	2207      	movs	r2, #7
 8004f62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f64:	e009      	b.n	8004f7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004f66:	4b2f      	ldr	r3, [pc, #188]	; (8005024 <xPortStartScheduler+0x134>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	4a2d      	ldr	r2, [pc, #180]	; (8005024 <xPortStartScheduler+0x134>)
 8004f6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f82:	2b80      	cmp	r3, #128	; 0x80
 8004f84:	d0ef      	beq.n	8004f66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f86:	4b27      	ldr	r3, [pc, #156]	; (8005024 <xPortStartScheduler+0x134>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f1c3 0307 	rsb	r3, r3, #7
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d00a      	beq.n	8004fa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	60bb      	str	r3, [r7, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	e7fe      	b.n	8004fa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fa8:	4b1e      	ldr	r3, [pc, #120]	; (8005024 <xPortStartScheduler+0x134>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	4a1d      	ldr	r2, [pc, #116]	; (8005024 <xPortStartScheduler+0x134>)
 8004fb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fb2:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <xPortStartScheduler+0x134>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fba:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <xPortStartScheduler+0x134>)
 8004fbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fc6:	4b18      	ldr	r3, [pc, #96]	; (8005028 <xPortStartScheduler+0x138>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a17      	ldr	r2, [pc, #92]	; (8005028 <xPortStartScheduler+0x138>)
 8004fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fd2:	4b15      	ldr	r3, [pc, #84]	; (8005028 <xPortStartScheduler+0x138>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a14      	ldr	r2, [pc, #80]	; (8005028 <xPortStartScheduler+0x138>)
 8004fd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fde:	f000 f8dd 	bl	800519c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fe2:	4b12      	ldr	r3, [pc, #72]	; (800502c <xPortStartScheduler+0x13c>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004fe8:	f000 f8fc 	bl	80051e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004fec:	4b10      	ldr	r3, [pc, #64]	; (8005030 <xPortStartScheduler+0x140>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a0f      	ldr	r2, [pc, #60]	; (8005030 <xPortStartScheduler+0x140>)
 8004ff2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ff6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ff8:	f7ff ff66 	bl	8004ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ffc:	f7fe ff9e 	bl	8003f3c <vTaskSwitchContext>
	prvTaskExitError();
 8005000:	f7ff ff20 	bl	8004e44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	e000ed00 	.word	0xe000ed00
 8005014:	410fc271 	.word	0x410fc271
 8005018:	410fc270 	.word	0x410fc270
 800501c:	e000e400 	.word	0xe000e400
 8005020:	20000e4c 	.word	0x20000e4c
 8005024:	20000e50 	.word	0x20000e50
 8005028:	e000ed20 	.word	0xe000ed20
 800502c:	2000000c 	.word	0x2000000c
 8005030:	e000ef34 	.word	0xe000ef34

08005034 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
	__asm volatile
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	607b      	str	r3, [r7, #4]
}
 800504c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800504e:	4b0f      	ldr	r3, [pc, #60]	; (800508c <vPortEnterCritical+0x58>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	4a0d      	ldr	r2, [pc, #52]	; (800508c <vPortEnterCritical+0x58>)
 8005056:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005058:	4b0c      	ldr	r3, [pc, #48]	; (800508c <vPortEnterCritical+0x58>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d10f      	bne.n	8005080 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <vPortEnterCritical+0x5c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <vPortEnterCritical+0x4c>
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	603b      	str	r3, [r7, #0]
}
 800507c:	bf00      	nop
 800507e:	e7fe      	b.n	800507e <vPortEnterCritical+0x4a>
	}
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	2000000c 	.word	0x2000000c
 8005090:	e000ed04 	.word	0xe000ed04

08005094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800509a:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <vPortExitCritical+0x50>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <vPortExitCritical+0x24>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	607b      	str	r3, [r7, #4]
}
 80050b4:	bf00      	nop
 80050b6:	e7fe      	b.n	80050b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050b8:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <vPortExitCritical+0x50>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3b01      	subs	r3, #1
 80050be:	4a09      	ldr	r2, [pc, #36]	; (80050e4 <vPortExitCritical+0x50>)
 80050c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050c2:	4b08      	ldr	r3, [pc, #32]	; (80050e4 <vPortExitCritical+0x50>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d105      	bne.n	80050d6 <vPortExitCritical+0x42>
 80050ca:	2300      	movs	r3, #0
 80050cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	f383 8811 	msr	BASEPRI, r3
}
 80050d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	2000000c 	.word	0x2000000c
	...

080050f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050f0:	f3ef 8009 	mrs	r0, PSP
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	4b15      	ldr	r3, [pc, #84]	; (8005150 <pxCurrentTCBConst>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	f01e 0f10 	tst.w	lr, #16
 8005100:	bf08      	it	eq
 8005102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510a:	6010      	str	r0, [r2, #0]
 800510c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005114:	f380 8811 	msr	BASEPRI, r0
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f7fe ff0c 	bl	8003f3c <vTaskSwitchContext>
 8005124:	f04f 0000 	mov.w	r0, #0
 8005128:	f380 8811 	msr	BASEPRI, r0
 800512c:	bc09      	pop	{r0, r3}
 800512e:	6819      	ldr	r1, [r3, #0]
 8005130:	6808      	ldr	r0, [r1, #0]
 8005132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005136:	f01e 0f10 	tst.w	lr, #16
 800513a:	bf08      	it	eq
 800513c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005140:	f380 8809 	msr	PSP, r0
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	f3af 8000 	nop.w

08005150 <pxCurrentTCBConst>:
 8005150:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop

08005158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	607b      	str	r3, [r7, #4]
}
 8005170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005172:	f7fe fe29 	bl	8003dc8 <xTaskIncrementTick>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <xPortSysTickHandler+0x40>)
 800517e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	2300      	movs	r3, #0
 8005186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f383 8811 	msr	BASEPRI, r3
}
 800518e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051a0:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <vPortSetupTimerInterrupt+0x34>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051a6:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <vPortSetupTimerInterrupt+0x38>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051ac:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <vPortSetupTimerInterrupt+0x3c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a0a      	ldr	r2, [pc, #40]	; (80051dc <vPortSetupTimerInterrupt+0x40>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	099b      	lsrs	r3, r3, #6
 80051b8:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <vPortSetupTimerInterrupt+0x44>)
 80051ba:	3b01      	subs	r3, #1
 80051bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051be:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <vPortSetupTimerInterrupt+0x34>)
 80051c0:	2207      	movs	r2, #7
 80051c2:	601a      	str	r2, [r3, #0]
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	e000e010 	.word	0xe000e010
 80051d4:	e000e018 	.word	0xe000e018
 80051d8:	20000000 	.word	0x20000000
 80051dc:	10624dd3 	.word	0x10624dd3
 80051e0:	e000e014 	.word	0xe000e014

080051e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80051f4 <vPortEnableVFP+0x10>
 80051e8:	6801      	ldr	r1, [r0, #0]
 80051ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051ee:	6001      	str	r1, [r0, #0]
 80051f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80051f2:	bf00      	nop
 80051f4:	e000ed88 	.word	0xe000ed88

080051f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051fe:	f3ef 8305 	mrs	r3, IPSR
 8005202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b0f      	cmp	r3, #15
 8005208:	d914      	bls.n	8005234 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800520a:	4a17      	ldr	r2, [pc, #92]	; (8005268 <vPortValidateInterruptPriority+0x70>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005214:	4b15      	ldr	r3, [pc, #84]	; (800526c <vPortValidateInterruptPriority+0x74>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	7afa      	ldrb	r2, [r7, #11]
 800521a:	429a      	cmp	r2, r3
 800521c:	d20a      	bcs.n	8005234 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	607b      	str	r3, [r7, #4]
}
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005234:	4b0e      	ldr	r3, [pc, #56]	; (8005270 <vPortValidateInterruptPriority+0x78>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800523c:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <vPortValidateInterruptPriority+0x7c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	429a      	cmp	r2, r3
 8005242:	d90a      	bls.n	800525a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	603b      	str	r3, [r7, #0]
}
 8005256:	bf00      	nop
 8005258:	e7fe      	b.n	8005258 <vPortValidateInterruptPriority+0x60>
	}
 800525a:	bf00      	nop
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	e000e3f0 	.word	0xe000e3f0
 800526c:	20000e4c 	.word	0x20000e4c
 8005270:	e000ed0c 	.word	0xe000ed0c
 8005274:	20000e50 	.word	0x20000e50

08005278 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08a      	sub	sp, #40	; 0x28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005280:	2300      	movs	r3, #0
 8005282:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005284:	f7fe fce4 	bl	8003c50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005288:	4b5b      	ldr	r3, [pc, #364]	; (80053f8 <pvPortMalloc+0x180>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005290:	f000 f920 	bl	80054d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005294:	4b59      	ldr	r3, [pc, #356]	; (80053fc <pvPortMalloc+0x184>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4013      	ands	r3, r2
 800529c:	2b00      	cmp	r3, #0
 800529e:	f040 8093 	bne.w	80053c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01d      	beq.n	80052e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80052a8:	2208      	movs	r2, #8
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4413      	add	r3, r2
 80052ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d014      	beq.n	80052e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f023 0307 	bic.w	r3, r3, #7
 80052c0:	3308      	adds	r3, #8
 80052c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <pvPortMalloc+0x6c>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	617b      	str	r3, [r7, #20]
}
 80052e0:	bf00      	nop
 80052e2:	e7fe      	b.n	80052e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d06e      	beq.n	80053c8 <pvPortMalloc+0x150>
 80052ea:	4b45      	ldr	r3, [pc, #276]	; (8005400 <pvPortMalloc+0x188>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d869      	bhi.n	80053c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052f4:	4b43      	ldr	r3, [pc, #268]	; (8005404 <pvPortMalloc+0x18c>)
 80052f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052f8:	4b42      	ldr	r3, [pc, #264]	; (8005404 <pvPortMalloc+0x18c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052fe:	e004      	b.n	800530a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	d903      	bls.n	800531c <pvPortMalloc+0xa4>
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1f1      	bne.n	8005300 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800531c:	4b36      	ldr	r3, [pc, #216]	; (80053f8 <pvPortMalloc+0x180>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005322:	429a      	cmp	r2, r3
 8005324:	d050      	beq.n	80053c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2208      	movs	r2, #8
 800532c:	4413      	add	r3, r2
 800532e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	1ad2      	subs	r2, r2, r3
 8005340:	2308      	movs	r3, #8
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	429a      	cmp	r2, r3
 8005346:	d91f      	bls.n	8005388 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4413      	add	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <pvPortMalloc+0xf8>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	613b      	str	r3, [r7, #16]
}
 800536c:	bf00      	nop
 800536e:	e7fe      	b.n	800536e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	1ad2      	subs	r2, r2, r3
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005382:	69b8      	ldr	r0, [r7, #24]
 8005384:	f000 f908 	bl	8005598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005388:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <pvPortMalloc+0x188>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	4a1b      	ldr	r2, [pc, #108]	; (8005400 <pvPortMalloc+0x188>)
 8005394:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005396:	4b1a      	ldr	r3, [pc, #104]	; (8005400 <pvPortMalloc+0x188>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4b1b      	ldr	r3, [pc, #108]	; (8005408 <pvPortMalloc+0x190>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d203      	bcs.n	80053aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053a2:	4b17      	ldr	r3, [pc, #92]	; (8005400 <pvPortMalloc+0x188>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a18      	ldr	r2, [pc, #96]	; (8005408 <pvPortMalloc+0x190>)
 80053a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	4b13      	ldr	r3, [pc, #76]	; (80053fc <pvPortMalloc+0x184>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053be:	4b13      	ldr	r3, [pc, #76]	; (800540c <pvPortMalloc+0x194>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3301      	adds	r3, #1
 80053c4:	4a11      	ldr	r2, [pc, #68]	; (800540c <pvPortMalloc+0x194>)
 80053c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053c8:	f7fe fc50 	bl	8003c6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <pvPortMalloc+0x174>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	60fb      	str	r3, [r7, #12]
}
 80053e8:	bf00      	nop
 80053ea:	e7fe      	b.n	80053ea <pvPortMalloc+0x172>
	return pvReturn;
 80053ec:	69fb      	ldr	r3, [r7, #28]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3728      	adds	r7, #40	; 0x28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20004a5c 	.word	0x20004a5c
 80053fc:	20004a70 	.word	0x20004a70
 8005400:	20004a60 	.word	0x20004a60
 8005404:	20004a54 	.word	0x20004a54
 8005408:	20004a64 	.word	0x20004a64
 800540c:	20004a68 	.word	0x20004a68

08005410 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d04d      	beq.n	80054be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005422:	2308      	movs	r3, #8
 8005424:	425b      	negs	r3, r3
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4413      	add	r3, r2
 800542a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <vPortFree+0xb8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4013      	ands	r3, r2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <vPortFree+0x44>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	60fb      	str	r3, [r7, #12]
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <vPortFree+0x62>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	60bb      	str	r3, [r7, #8]
}
 800546e:	bf00      	nop
 8005470:	e7fe      	b.n	8005470 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <vPortFree+0xb8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4013      	ands	r3, r2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01e      	beq.n	80054be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d11a      	bne.n	80054be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <vPortFree+0xb8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	43db      	mvns	r3, r3
 8005492:	401a      	ands	r2, r3
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005498:	f7fe fbda 	bl	8003c50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <vPortFree+0xbc>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4413      	add	r3, r2
 80054a6:	4a09      	ldr	r2, [pc, #36]	; (80054cc <vPortFree+0xbc>)
 80054a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054aa:	6938      	ldr	r0, [r7, #16]
 80054ac:	f000 f874 	bl	8005598 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <vPortFree+0xc0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3301      	adds	r3, #1
 80054b6:	4a06      	ldr	r2, [pc, #24]	; (80054d0 <vPortFree+0xc0>)
 80054b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80054ba:	f7fe fbd7 	bl	8003c6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054be:	bf00      	nop
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20004a70 	.word	0x20004a70
 80054cc:	20004a60 	.word	0x20004a60
 80054d0:	20004a6c 	.word	0x20004a6c

080054d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80054de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054e0:	4b27      	ldr	r3, [pc, #156]	; (8005580 <prvHeapInit+0xac>)
 80054e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00c      	beq.n	8005508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3307      	adds	r3, #7
 80054f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0307 	bic.w	r3, r3, #7
 80054fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	4a1f      	ldr	r2, [pc, #124]	; (8005580 <prvHeapInit+0xac>)
 8005504:	4413      	add	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800550c:	4a1d      	ldr	r2, [pc, #116]	; (8005584 <prvHeapInit+0xb0>)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005512:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <prvHeapInit+0xb0>)
 8005514:	2200      	movs	r2, #0
 8005516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	4413      	add	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005520:	2208      	movs	r2, #8
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0307 	bic.w	r3, r3, #7
 800552e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4a15      	ldr	r2, [pc, #84]	; (8005588 <prvHeapInit+0xb4>)
 8005534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005536:	4b14      	ldr	r3, [pc, #80]	; (8005588 <prvHeapInit+0xb4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2200      	movs	r2, #0
 800553c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800553e:	4b12      	ldr	r3, [pc, #72]	; (8005588 <prvHeapInit+0xb4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	1ad2      	subs	r2, r2, r3
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <prvHeapInit+0xb4>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	4a0a      	ldr	r2, [pc, #40]	; (800558c <prvHeapInit+0xb8>)
 8005562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	4a09      	ldr	r2, [pc, #36]	; (8005590 <prvHeapInit+0xbc>)
 800556a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800556c:	4b09      	ldr	r3, [pc, #36]	; (8005594 <prvHeapInit+0xc0>)
 800556e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005572:	601a      	str	r2, [r3, #0]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	20000e54 	.word	0x20000e54
 8005584:	20004a54 	.word	0x20004a54
 8005588:	20004a5c 	.word	0x20004a5c
 800558c:	20004a64 	.word	0x20004a64
 8005590:	20004a60 	.word	0x20004a60
 8005594:	20004a70 	.word	0x20004a70

08005598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055a0:	4b28      	ldr	r3, [pc, #160]	; (8005644 <prvInsertBlockIntoFreeList+0xac>)
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	e002      	b.n	80055ac <prvInsertBlockIntoFreeList+0x14>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d8f7      	bhi.n	80055a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	4413      	add	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d108      	bne.n	80055da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	441a      	add	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	441a      	add	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d118      	bne.n	8005620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b15      	ldr	r3, [pc, #84]	; (8005648 <prvInsertBlockIntoFreeList+0xb0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d00d      	beq.n	8005616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	441a      	add	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	e008      	b.n	8005628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005616:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <prvInsertBlockIntoFreeList+0xb0>)
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e003      	b.n	8005628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	429a      	cmp	r2, r3
 800562e:	d002      	beq.n	8005636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	20004a54 	.word	0x20004a54
 8005648:	20004a5c 	.word	0x20004a5c

0800564c <__errno>:
 800564c:	4b01      	ldr	r3, [pc, #4]	; (8005654 <__errno+0x8>)
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	20000010 	.word	0x20000010

08005658 <__libc_init_array>:
 8005658:	b570      	push	{r4, r5, r6, lr}
 800565a:	4d0d      	ldr	r5, [pc, #52]	; (8005690 <__libc_init_array+0x38>)
 800565c:	4c0d      	ldr	r4, [pc, #52]	; (8005694 <__libc_init_array+0x3c>)
 800565e:	1b64      	subs	r4, r4, r5
 8005660:	10a4      	asrs	r4, r4, #2
 8005662:	2600      	movs	r6, #0
 8005664:	42a6      	cmp	r6, r4
 8005666:	d109      	bne.n	800567c <__libc_init_array+0x24>
 8005668:	4d0b      	ldr	r5, [pc, #44]	; (8005698 <__libc_init_array+0x40>)
 800566a:	4c0c      	ldr	r4, [pc, #48]	; (800569c <__libc_init_array+0x44>)
 800566c:	f000 fd2c 	bl	80060c8 <_init>
 8005670:	1b64      	subs	r4, r4, r5
 8005672:	10a4      	asrs	r4, r4, #2
 8005674:	2600      	movs	r6, #0
 8005676:	42a6      	cmp	r6, r4
 8005678:	d105      	bne.n	8005686 <__libc_init_array+0x2e>
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005680:	4798      	blx	r3
 8005682:	3601      	adds	r6, #1
 8005684:	e7ee      	b.n	8005664 <__libc_init_array+0xc>
 8005686:	f855 3b04 	ldr.w	r3, [r5], #4
 800568a:	4798      	blx	r3
 800568c:	3601      	adds	r6, #1
 800568e:	e7f2      	b.n	8005676 <__libc_init_array+0x1e>
 8005690:	08006258 	.word	0x08006258
 8005694:	08006258 	.word	0x08006258
 8005698:	08006258 	.word	0x08006258
 800569c:	0800625c 	.word	0x0800625c

080056a0 <memcpy>:
 80056a0:	440a      	add	r2, r1
 80056a2:	4291      	cmp	r1, r2
 80056a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056a8:	d100      	bne.n	80056ac <memcpy+0xc>
 80056aa:	4770      	bx	lr
 80056ac:	b510      	push	{r4, lr}
 80056ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056b6:	4291      	cmp	r1, r2
 80056b8:	d1f9      	bne.n	80056ae <memcpy+0xe>
 80056ba:	bd10      	pop	{r4, pc}

080056bc <memset>:
 80056bc:	4402      	add	r2, r0
 80056be:	4603      	mov	r3, r0
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d100      	bne.n	80056c6 <memset+0xa>
 80056c4:	4770      	bx	lr
 80056c6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ca:	e7f9      	b.n	80056c0 <memset+0x4>

080056cc <_puts_r>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	460e      	mov	r6, r1
 80056d0:	4605      	mov	r5, r0
 80056d2:	b118      	cbz	r0, 80056dc <_puts_r+0x10>
 80056d4:	6983      	ldr	r3, [r0, #24]
 80056d6:	b90b      	cbnz	r3, 80056dc <_puts_r+0x10>
 80056d8:	f000 fa48 	bl	8005b6c <__sinit>
 80056dc:	69ab      	ldr	r3, [r5, #24]
 80056de:	68ac      	ldr	r4, [r5, #8]
 80056e0:	b913      	cbnz	r3, 80056e8 <_puts_r+0x1c>
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 fa42 	bl	8005b6c <__sinit>
 80056e8:	4b2c      	ldr	r3, [pc, #176]	; (800579c <_puts_r+0xd0>)
 80056ea:	429c      	cmp	r4, r3
 80056ec:	d120      	bne.n	8005730 <_puts_r+0x64>
 80056ee:	686c      	ldr	r4, [r5, #4]
 80056f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056f2:	07db      	lsls	r3, r3, #31
 80056f4:	d405      	bmi.n	8005702 <_puts_r+0x36>
 80056f6:	89a3      	ldrh	r3, [r4, #12]
 80056f8:	0598      	lsls	r0, r3, #22
 80056fa:	d402      	bmi.n	8005702 <_puts_r+0x36>
 80056fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056fe:	f000 fad3 	bl	8005ca8 <__retarget_lock_acquire_recursive>
 8005702:	89a3      	ldrh	r3, [r4, #12]
 8005704:	0719      	lsls	r1, r3, #28
 8005706:	d51d      	bpl.n	8005744 <_puts_r+0x78>
 8005708:	6923      	ldr	r3, [r4, #16]
 800570a:	b1db      	cbz	r3, 8005744 <_puts_r+0x78>
 800570c:	3e01      	subs	r6, #1
 800570e:	68a3      	ldr	r3, [r4, #8]
 8005710:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005714:	3b01      	subs	r3, #1
 8005716:	60a3      	str	r3, [r4, #8]
 8005718:	bb39      	cbnz	r1, 800576a <_puts_r+0x9e>
 800571a:	2b00      	cmp	r3, #0
 800571c:	da38      	bge.n	8005790 <_puts_r+0xc4>
 800571e:	4622      	mov	r2, r4
 8005720:	210a      	movs	r1, #10
 8005722:	4628      	mov	r0, r5
 8005724:	f000 f848 	bl	80057b8 <__swbuf_r>
 8005728:	3001      	adds	r0, #1
 800572a:	d011      	beq.n	8005750 <_puts_r+0x84>
 800572c:	250a      	movs	r5, #10
 800572e:	e011      	b.n	8005754 <_puts_r+0x88>
 8005730:	4b1b      	ldr	r3, [pc, #108]	; (80057a0 <_puts_r+0xd4>)
 8005732:	429c      	cmp	r4, r3
 8005734:	d101      	bne.n	800573a <_puts_r+0x6e>
 8005736:	68ac      	ldr	r4, [r5, #8]
 8005738:	e7da      	b.n	80056f0 <_puts_r+0x24>
 800573a:	4b1a      	ldr	r3, [pc, #104]	; (80057a4 <_puts_r+0xd8>)
 800573c:	429c      	cmp	r4, r3
 800573e:	bf08      	it	eq
 8005740:	68ec      	ldreq	r4, [r5, #12]
 8005742:	e7d5      	b.n	80056f0 <_puts_r+0x24>
 8005744:	4621      	mov	r1, r4
 8005746:	4628      	mov	r0, r5
 8005748:	f000 f888 	bl	800585c <__swsetup_r>
 800574c:	2800      	cmp	r0, #0
 800574e:	d0dd      	beq.n	800570c <_puts_r+0x40>
 8005750:	f04f 35ff 	mov.w	r5, #4294967295
 8005754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005756:	07da      	lsls	r2, r3, #31
 8005758:	d405      	bmi.n	8005766 <_puts_r+0x9a>
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	059b      	lsls	r3, r3, #22
 800575e:	d402      	bmi.n	8005766 <_puts_r+0x9a>
 8005760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005762:	f000 faa2 	bl	8005caa <__retarget_lock_release_recursive>
 8005766:	4628      	mov	r0, r5
 8005768:	bd70      	pop	{r4, r5, r6, pc}
 800576a:	2b00      	cmp	r3, #0
 800576c:	da04      	bge.n	8005778 <_puts_r+0xac>
 800576e:	69a2      	ldr	r2, [r4, #24]
 8005770:	429a      	cmp	r2, r3
 8005772:	dc06      	bgt.n	8005782 <_puts_r+0xb6>
 8005774:	290a      	cmp	r1, #10
 8005776:	d004      	beq.n	8005782 <_puts_r+0xb6>
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	6022      	str	r2, [r4, #0]
 800577e:	7019      	strb	r1, [r3, #0]
 8005780:	e7c5      	b.n	800570e <_puts_r+0x42>
 8005782:	4622      	mov	r2, r4
 8005784:	4628      	mov	r0, r5
 8005786:	f000 f817 	bl	80057b8 <__swbuf_r>
 800578a:	3001      	adds	r0, #1
 800578c:	d1bf      	bne.n	800570e <_puts_r+0x42>
 800578e:	e7df      	b.n	8005750 <_puts_r+0x84>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	250a      	movs	r5, #10
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	6022      	str	r2, [r4, #0]
 8005798:	701d      	strb	r5, [r3, #0]
 800579a:	e7db      	b.n	8005754 <_puts_r+0x88>
 800579c:	08006210 	.word	0x08006210
 80057a0:	08006230 	.word	0x08006230
 80057a4:	080061f0 	.word	0x080061f0

080057a8 <puts>:
 80057a8:	4b02      	ldr	r3, [pc, #8]	; (80057b4 <puts+0xc>)
 80057aa:	4601      	mov	r1, r0
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	f7ff bf8d 	b.w	80056cc <_puts_r>
 80057b2:	bf00      	nop
 80057b4:	20000010 	.word	0x20000010

080057b8 <__swbuf_r>:
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	460e      	mov	r6, r1
 80057bc:	4614      	mov	r4, r2
 80057be:	4605      	mov	r5, r0
 80057c0:	b118      	cbz	r0, 80057ca <__swbuf_r+0x12>
 80057c2:	6983      	ldr	r3, [r0, #24]
 80057c4:	b90b      	cbnz	r3, 80057ca <__swbuf_r+0x12>
 80057c6:	f000 f9d1 	bl	8005b6c <__sinit>
 80057ca:	4b21      	ldr	r3, [pc, #132]	; (8005850 <__swbuf_r+0x98>)
 80057cc:	429c      	cmp	r4, r3
 80057ce:	d12b      	bne.n	8005828 <__swbuf_r+0x70>
 80057d0:	686c      	ldr	r4, [r5, #4]
 80057d2:	69a3      	ldr	r3, [r4, #24]
 80057d4:	60a3      	str	r3, [r4, #8]
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	071a      	lsls	r2, r3, #28
 80057da:	d52f      	bpl.n	800583c <__swbuf_r+0x84>
 80057dc:	6923      	ldr	r3, [r4, #16]
 80057de:	b36b      	cbz	r3, 800583c <__swbuf_r+0x84>
 80057e0:	6923      	ldr	r3, [r4, #16]
 80057e2:	6820      	ldr	r0, [r4, #0]
 80057e4:	1ac0      	subs	r0, r0, r3
 80057e6:	6963      	ldr	r3, [r4, #20]
 80057e8:	b2f6      	uxtb	r6, r6
 80057ea:	4283      	cmp	r3, r0
 80057ec:	4637      	mov	r7, r6
 80057ee:	dc04      	bgt.n	80057fa <__swbuf_r+0x42>
 80057f0:	4621      	mov	r1, r4
 80057f2:	4628      	mov	r0, r5
 80057f4:	f000 f926 	bl	8005a44 <_fflush_r>
 80057f8:	bb30      	cbnz	r0, 8005848 <__swbuf_r+0x90>
 80057fa:	68a3      	ldr	r3, [r4, #8]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	60a3      	str	r3, [r4, #8]
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	6022      	str	r2, [r4, #0]
 8005806:	701e      	strb	r6, [r3, #0]
 8005808:	6963      	ldr	r3, [r4, #20]
 800580a:	3001      	adds	r0, #1
 800580c:	4283      	cmp	r3, r0
 800580e:	d004      	beq.n	800581a <__swbuf_r+0x62>
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	07db      	lsls	r3, r3, #31
 8005814:	d506      	bpl.n	8005824 <__swbuf_r+0x6c>
 8005816:	2e0a      	cmp	r6, #10
 8005818:	d104      	bne.n	8005824 <__swbuf_r+0x6c>
 800581a:	4621      	mov	r1, r4
 800581c:	4628      	mov	r0, r5
 800581e:	f000 f911 	bl	8005a44 <_fflush_r>
 8005822:	b988      	cbnz	r0, 8005848 <__swbuf_r+0x90>
 8005824:	4638      	mov	r0, r7
 8005826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005828:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <__swbuf_r+0x9c>)
 800582a:	429c      	cmp	r4, r3
 800582c:	d101      	bne.n	8005832 <__swbuf_r+0x7a>
 800582e:	68ac      	ldr	r4, [r5, #8]
 8005830:	e7cf      	b.n	80057d2 <__swbuf_r+0x1a>
 8005832:	4b09      	ldr	r3, [pc, #36]	; (8005858 <__swbuf_r+0xa0>)
 8005834:	429c      	cmp	r4, r3
 8005836:	bf08      	it	eq
 8005838:	68ec      	ldreq	r4, [r5, #12]
 800583a:	e7ca      	b.n	80057d2 <__swbuf_r+0x1a>
 800583c:	4621      	mov	r1, r4
 800583e:	4628      	mov	r0, r5
 8005840:	f000 f80c 	bl	800585c <__swsetup_r>
 8005844:	2800      	cmp	r0, #0
 8005846:	d0cb      	beq.n	80057e0 <__swbuf_r+0x28>
 8005848:	f04f 37ff 	mov.w	r7, #4294967295
 800584c:	e7ea      	b.n	8005824 <__swbuf_r+0x6c>
 800584e:	bf00      	nop
 8005850:	08006210 	.word	0x08006210
 8005854:	08006230 	.word	0x08006230
 8005858:	080061f0 	.word	0x080061f0

0800585c <__swsetup_r>:
 800585c:	4b32      	ldr	r3, [pc, #200]	; (8005928 <__swsetup_r+0xcc>)
 800585e:	b570      	push	{r4, r5, r6, lr}
 8005860:	681d      	ldr	r5, [r3, #0]
 8005862:	4606      	mov	r6, r0
 8005864:	460c      	mov	r4, r1
 8005866:	b125      	cbz	r5, 8005872 <__swsetup_r+0x16>
 8005868:	69ab      	ldr	r3, [r5, #24]
 800586a:	b913      	cbnz	r3, 8005872 <__swsetup_r+0x16>
 800586c:	4628      	mov	r0, r5
 800586e:	f000 f97d 	bl	8005b6c <__sinit>
 8005872:	4b2e      	ldr	r3, [pc, #184]	; (800592c <__swsetup_r+0xd0>)
 8005874:	429c      	cmp	r4, r3
 8005876:	d10f      	bne.n	8005898 <__swsetup_r+0x3c>
 8005878:	686c      	ldr	r4, [r5, #4]
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005880:	0719      	lsls	r1, r3, #28
 8005882:	d42c      	bmi.n	80058de <__swsetup_r+0x82>
 8005884:	06dd      	lsls	r5, r3, #27
 8005886:	d411      	bmi.n	80058ac <__swsetup_r+0x50>
 8005888:	2309      	movs	r3, #9
 800588a:	6033      	str	r3, [r6, #0]
 800588c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005890:	81a3      	strh	r3, [r4, #12]
 8005892:	f04f 30ff 	mov.w	r0, #4294967295
 8005896:	e03e      	b.n	8005916 <__swsetup_r+0xba>
 8005898:	4b25      	ldr	r3, [pc, #148]	; (8005930 <__swsetup_r+0xd4>)
 800589a:	429c      	cmp	r4, r3
 800589c:	d101      	bne.n	80058a2 <__swsetup_r+0x46>
 800589e:	68ac      	ldr	r4, [r5, #8]
 80058a0:	e7eb      	b.n	800587a <__swsetup_r+0x1e>
 80058a2:	4b24      	ldr	r3, [pc, #144]	; (8005934 <__swsetup_r+0xd8>)
 80058a4:	429c      	cmp	r4, r3
 80058a6:	bf08      	it	eq
 80058a8:	68ec      	ldreq	r4, [r5, #12]
 80058aa:	e7e6      	b.n	800587a <__swsetup_r+0x1e>
 80058ac:	0758      	lsls	r0, r3, #29
 80058ae:	d512      	bpl.n	80058d6 <__swsetup_r+0x7a>
 80058b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058b2:	b141      	cbz	r1, 80058c6 <__swsetup_r+0x6a>
 80058b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058b8:	4299      	cmp	r1, r3
 80058ba:	d002      	beq.n	80058c2 <__swsetup_r+0x66>
 80058bc:	4630      	mov	r0, r6
 80058be:	f000 fa5b 	bl	8005d78 <_free_r>
 80058c2:	2300      	movs	r3, #0
 80058c4:	6363      	str	r3, [r4, #52]	; 0x34
 80058c6:	89a3      	ldrh	r3, [r4, #12]
 80058c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058cc:	81a3      	strh	r3, [r4, #12]
 80058ce:	2300      	movs	r3, #0
 80058d0:	6063      	str	r3, [r4, #4]
 80058d2:	6923      	ldr	r3, [r4, #16]
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	89a3      	ldrh	r3, [r4, #12]
 80058d8:	f043 0308 	orr.w	r3, r3, #8
 80058dc:	81a3      	strh	r3, [r4, #12]
 80058de:	6923      	ldr	r3, [r4, #16]
 80058e0:	b94b      	cbnz	r3, 80058f6 <__swsetup_r+0x9a>
 80058e2:	89a3      	ldrh	r3, [r4, #12]
 80058e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ec:	d003      	beq.n	80058f6 <__swsetup_r+0x9a>
 80058ee:	4621      	mov	r1, r4
 80058f0:	4630      	mov	r0, r6
 80058f2:	f000 fa01 	bl	8005cf8 <__smakebuf_r>
 80058f6:	89a0      	ldrh	r0, [r4, #12]
 80058f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058fc:	f010 0301 	ands.w	r3, r0, #1
 8005900:	d00a      	beq.n	8005918 <__swsetup_r+0xbc>
 8005902:	2300      	movs	r3, #0
 8005904:	60a3      	str	r3, [r4, #8]
 8005906:	6963      	ldr	r3, [r4, #20]
 8005908:	425b      	negs	r3, r3
 800590a:	61a3      	str	r3, [r4, #24]
 800590c:	6923      	ldr	r3, [r4, #16]
 800590e:	b943      	cbnz	r3, 8005922 <__swsetup_r+0xc6>
 8005910:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005914:	d1ba      	bne.n	800588c <__swsetup_r+0x30>
 8005916:	bd70      	pop	{r4, r5, r6, pc}
 8005918:	0781      	lsls	r1, r0, #30
 800591a:	bf58      	it	pl
 800591c:	6963      	ldrpl	r3, [r4, #20]
 800591e:	60a3      	str	r3, [r4, #8]
 8005920:	e7f4      	b.n	800590c <__swsetup_r+0xb0>
 8005922:	2000      	movs	r0, #0
 8005924:	e7f7      	b.n	8005916 <__swsetup_r+0xba>
 8005926:	bf00      	nop
 8005928:	20000010 	.word	0x20000010
 800592c:	08006210 	.word	0x08006210
 8005930:	08006230 	.word	0x08006230
 8005934:	080061f0 	.word	0x080061f0

08005938 <__sflush_r>:
 8005938:	898a      	ldrh	r2, [r1, #12]
 800593a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800593e:	4605      	mov	r5, r0
 8005940:	0710      	lsls	r0, r2, #28
 8005942:	460c      	mov	r4, r1
 8005944:	d458      	bmi.n	80059f8 <__sflush_r+0xc0>
 8005946:	684b      	ldr	r3, [r1, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	dc05      	bgt.n	8005958 <__sflush_r+0x20>
 800594c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	dc02      	bgt.n	8005958 <__sflush_r+0x20>
 8005952:	2000      	movs	r0, #0
 8005954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800595a:	2e00      	cmp	r6, #0
 800595c:	d0f9      	beq.n	8005952 <__sflush_r+0x1a>
 800595e:	2300      	movs	r3, #0
 8005960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005964:	682f      	ldr	r7, [r5, #0]
 8005966:	602b      	str	r3, [r5, #0]
 8005968:	d032      	beq.n	80059d0 <__sflush_r+0x98>
 800596a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	075a      	lsls	r2, r3, #29
 8005970:	d505      	bpl.n	800597e <__sflush_r+0x46>
 8005972:	6863      	ldr	r3, [r4, #4]
 8005974:	1ac0      	subs	r0, r0, r3
 8005976:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005978:	b10b      	cbz	r3, 800597e <__sflush_r+0x46>
 800597a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800597c:	1ac0      	subs	r0, r0, r3
 800597e:	2300      	movs	r3, #0
 8005980:	4602      	mov	r2, r0
 8005982:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005984:	6a21      	ldr	r1, [r4, #32]
 8005986:	4628      	mov	r0, r5
 8005988:	47b0      	blx	r6
 800598a:	1c43      	adds	r3, r0, #1
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	d106      	bne.n	800599e <__sflush_r+0x66>
 8005990:	6829      	ldr	r1, [r5, #0]
 8005992:	291d      	cmp	r1, #29
 8005994:	d82c      	bhi.n	80059f0 <__sflush_r+0xb8>
 8005996:	4a2a      	ldr	r2, [pc, #168]	; (8005a40 <__sflush_r+0x108>)
 8005998:	40ca      	lsrs	r2, r1
 800599a:	07d6      	lsls	r6, r2, #31
 800599c:	d528      	bpl.n	80059f0 <__sflush_r+0xb8>
 800599e:	2200      	movs	r2, #0
 80059a0:	6062      	str	r2, [r4, #4]
 80059a2:	04d9      	lsls	r1, r3, #19
 80059a4:	6922      	ldr	r2, [r4, #16]
 80059a6:	6022      	str	r2, [r4, #0]
 80059a8:	d504      	bpl.n	80059b4 <__sflush_r+0x7c>
 80059aa:	1c42      	adds	r2, r0, #1
 80059ac:	d101      	bne.n	80059b2 <__sflush_r+0x7a>
 80059ae:	682b      	ldr	r3, [r5, #0]
 80059b0:	b903      	cbnz	r3, 80059b4 <__sflush_r+0x7c>
 80059b2:	6560      	str	r0, [r4, #84]	; 0x54
 80059b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059b6:	602f      	str	r7, [r5, #0]
 80059b8:	2900      	cmp	r1, #0
 80059ba:	d0ca      	beq.n	8005952 <__sflush_r+0x1a>
 80059bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059c0:	4299      	cmp	r1, r3
 80059c2:	d002      	beq.n	80059ca <__sflush_r+0x92>
 80059c4:	4628      	mov	r0, r5
 80059c6:	f000 f9d7 	bl	8005d78 <_free_r>
 80059ca:	2000      	movs	r0, #0
 80059cc:	6360      	str	r0, [r4, #52]	; 0x34
 80059ce:	e7c1      	b.n	8005954 <__sflush_r+0x1c>
 80059d0:	6a21      	ldr	r1, [r4, #32]
 80059d2:	2301      	movs	r3, #1
 80059d4:	4628      	mov	r0, r5
 80059d6:	47b0      	blx	r6
 80059d8:	1c41      	adds	r1, r0, #1
 80059da:	d1c7      	bne.n	800596c <__sflush_r+0x34>
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0c4      	beq.n	800596c <__sflush_r+0x34>
 80059e2:	2b1d      	cmp	r3, #29
 80059e4:	d001      	beq.n	80059ea <__sflush_r+0xb2>
 80059e6:	2b16      	cmp	r3, #22
 80059e8:	d101      	bne.n	80059ee <__sflush_r+0xb6>
 80059ea:	602f      	str	r7, [r5, #0]
 80059ec:	e7b1      	b.n	8005952 <__sflush_r+0x1a>
 80059ee:	89a3      	ldrh	r3, [r4, #12]
 80059f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059f4:	81a3      	strh	r3, [r4, #12]
 80059f6:	e7ad      	b.n	8005954 <__sflush_r+0x1c>
 80059f8:	690f      	ldr	r7, [r1, #16]
 80059fa:	2f00      	cmp	r7, #0
 80059fc:	d0a9      	beq.n	8005952 <__sflush_r+0x1a>
 80059fe:	0793      	lsls	r3, r2, #30
 8005a00:	680e      	ldr	r6, [r1, #0]
 8005a02:	bf08      	it	eq
 8005a04:	694b      	ldreq	r3, [r1, #20]
 8005a06:	600f      	str	r7, [r1, #0]
 8005a08:	bf18      	it	ne
 8005a0a:	2300      	movne	r3, #0
 8005a0c:	eba6 0807 	sub.w	r8, r6, r7
 8005a10:	608b      	str	r3, [r1, #8]
 8005a12:	f1b8 0f00 	cmp.w	r8, #0
 8005a16:	dd9c      	ble.n	8005952 <__sflush_r+0x1a>
 8005a18:	6a21      	ldr	r1, [r4, #32]
 8005a1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a1c:	4643      	mov	r3, r8
 8005a1e:	463a      	mov	r2, r7
 8005a20:	4628      	mov	r0, r5
 8005a22:	47b0      	blx	r6
 8005a24:	2800      	cmp	r0, #0
 8005a26:	dc06      	bgt.n	8005a36 <__sflush_r+0xfe>
 8005a28:	89a3      	ldrh	r3, [r4, #12]
 8005a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a2e:	81a3      	strh	r3, [r4, #12]
 8005a30:	f04f 30ff 	mov.w	r0, #4294967295
 8005a34:	e78e      	b.n	8005954 <__sflush_r+0x1c>
 8005a36:	4407      	add	r7, r0
 8005a38:	eba8 0800 	sub.w	r8, r8, r0
 8005a3c:	e7e9      	b.n	8005a12 <__sflush_r+0xda>
 8005a3e:	bf00      	nop
 8005a40:	20400001 	.word	0x20400001

08005a44 <_fflush_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	690b      	ldr	r3, [r1, #16]
 8005a48:	4605      	mov	r5, r0
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	b913      	cbnz	r3, 8005a54 <_fflush_r+0x10>
 8005a4e:	2500      	movs	r5, #0
 8005a50:	4628      	mov	r0, r5
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
 8005a54:	b118      	cbz	r0, 8005a5e <_fflush_r+0x1a>
 8005a56:	6983      	ldr	r3, [r0, #24]
 8005a58:	b90b      	cbnz	r3, 8005a5e <_fflush_r+0x1a>
 8005a5a:	f000 f887 	bl	8005b6c <__sinit>
 8005a5e:	4b14      	ldr	r3, [pc, #80]	; (8005ab0 <_fflush_r+0x6c>)
 8005a60:	429c      	cmp	r4, r3
 8005a62:	d11b      	bne.n	8005a9c <_fflush_r+0x58>
 8005a64:	686c      	ldr	r4, [r5, #4]
 8005a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0ef      	beq.n	8005a4e <_fflush_r+0xa>
 8005a6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a70:	07d0      	lsls	r0, r2, #31
 8005a72:	d404      	bmi.n	8005a7e <_fflush_r+0x3a>
 8005a74:	0599      	lsls	r1, r3, #22
 8005a76:	d402      	bmi.n	8005a7e <_fflush_r+0x3a>
 8005a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a7a:	f000 f915 	bl	8005ca8 <__retarget_lock_acquire_recursive>
 8005a7e:	4628      	mov	r0, r5
 8005a80:	4621      	mov	r1, r4
 8005a82:	f7ff ff59 	bl	8005938 <__sflush_r>
 8005a86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a88:	07da      	lsls	r2, r3, #31
 8005a8a:	4605      	mov	r5, r0
 8005a8c:	d4e0      	bmi.n	8005a50 <_fflush_r+0xc>
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	059b      	lsls	r3, r3, #22
 8005a92:	d4dd      	bmi.n	8005a50 <_fflush_r+0xc>
 8005a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a96:	f000 f908 	bl	8005caa <__retarget_lock_release_recursive>
 8005a9a:	e7d9      	b.n	8005a50 <_fflush_r+0xc>
 8005a9c:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <_fflush_r+0x70>)
 8005a9e:	429c      	cmp	r4, r3
 8005aa0:	d101      	bne.n	8005aa6 <_fflush_r+0x62>
 8005aa2:	68ac      	ldr	r4, [r5, #8]
 8005aa4:	e7df      	b.n	8005a66 <_fflush_r+0x22>
 8005aa6:	4b04      	ldr	r3, [pc, #16]	; (8005ab8 <_fflush_r+0x74>)
 8005aa8:	429c      	cmp	r4, r3
 8005aaa:	bf08      	it	eq
 8005aac:	68ec      	ldreq	r4, [r5, #12]
 8005aae:	e7da      	b.n	8005a66 <_fflush_r+0x22>
 8005ab0:	08006210 	.word	0x08006210
 8005ab4:	08006230 	.word	0x08006230
 8005ab8:	080061f0 	.word	0x080061f0

08005abc <std>:
 8005abc:	2300      	movs	r3, #0
 8005abe:	b510      	push	{r4, lr}
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005aca:	6083      	str	r3, [r0, #8]
 8005acc:	8181      	strh	r1, [r0, #12]
 8005ace:	6643      	str	r3, [r0, #100]	; 0x64
 8005ad0:	81c2      	strh	r2, [r0, #14]
 8005ad2:	6183      	str	r3, [r0, #24]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	2208      	movs	r2, #8
 8005ad8:	305c      	adds	r0, #92	; 0x5c
 8005ada:	f7ff fdef 	bl	80056bc <memset>
 8005ade:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <std+0x38>)
 8005ae0:	6263      	str	r3, [r4, #36]	; 0x24
 8005ae2:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <std+0x3c>)
 8005ae4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ae6:	4b05      	ldr	r3, [pc, #20]	; (8005afc <std+0x40>)
 8005ae8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005aea:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <std+0x44>)
 8005aec:	6224      	str	r4, [r4, #32]
 8005aee:	6323      	str	r3, [r4, #48]	; 0x30
 8005af0:	bd10      	pop	{r4, pc}
 8005af2:	bf00      	nop
 8005af4:	08005f59 	.word	0x08005f59
 8005af8:	08005f7b 	.word	0x08005f7b
 8005afc:	08005fb3 	.word	0x08005fb3
 8005b00:	08005fd7 	.word	0x08005fd7

08005b04 <_cleanup_r>:
 8005b04:	4901      	ldr	r1, [pc, #4]	; (8005b0c <_cleanup_r+0x8>)
 8005b06:	f000 b8af 	b.w	8005c68 <_fwalk_reent>
 8005b0a:	bf00      	nop
 8005b0c:	08005a45 	.word	0x08005a45

08005b10 <__sfmoreglue>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	2268      	movs	r2, #104	; 0x68
 8005b14:	1e4d      	subs	r5, r1, #1
 8005b16:	4355      	muls	r5, r2
 8005b18:	460e      	mov	r6, r1
 8005b1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b1e:	f000 f997 	bl	8005e50 <_malloc_r>
 8005b22:	4604      	mov	r4, r0
 8005b24:	b140      	cbz	r0, 8005b38 <__sfmoreglue+0x28>
 8005b26:	2100      	movs	r1, #0
 8005b28:	e9c0 1600 	strd	r1, r6, [r0]
 8005b2c:	300c      	adds	r0, #12
 8005b2e:	60a0      	str	r0, [r4, #8]
 8005b30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b34:	f7ff fdc2 	bl	80056bc <memset>
 8005b38:	4620      	mov	r0, r4
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}

08005b3c <__sfp_lock_acquire>:
 8005b3c:	4801      	ldr	r0, [pc, #4]	; (8005b44 <__sfp_lock_acquire+0x8>)
 8005b3e:	f000 b8b3 	b.w	8005ca8 <__retarget_lock_acquire_recursive>
 8005b42:	bf00      	nop
 8005b44:	20004a75 	.word	0x20004a75

08005b48 <__sfp_lock_release>:
 8005b48:	4801      	ldr	r0, [pc, #4]	; (8005b50 <__sfp_lock_release+0x8>)
 8005b4a:	f000 b8ae 	b.w	8005caa <__retarget_lock_release_recursive>
 8005b4e:	bf00      	nop
 8005b50:	20004a75 	.word	0x20004a75

08005b54 <__sinit_lock_acquire>:
 8005b54:	4801      	ldr	r0, [pc, #4]	; (8005b5c <__sinit_lock_acquire+0x8>)
 8005b56:	f000 b8a7 	b.w	8005ca8 <__retarget_lock_acquire_recursive>
 8005b5a:	bf00      	nop
 8005b5c:	20004a76 	.word	0x20004a76

08005b60 <__sinit_lock_release>:
 8005b60:	4801      	ldr	r0, [pc, #4]	; (8005b68 <__sinit_lock_release+0x8>)
 8005b62:	f000 b8a2 	b.w	8005caa <__retarget_lock_release_recursive>
 8005b66:	bf00      	nop
 8005b68:	20004a76 	.word	0x20004a76

08005b6c <__sinit>:
 8005b6c:	b510      	push	{r4, lr}
 8005b6e:	4604      	mov	r4, r0
 8005b70:	f7ff fff0 	bl	8005b54 <__sinit_lock_acquire>
 8005b74:	69a3      	ldr	r3, [r4, #24]
 8005b76:	b11b      	cbz	r3, 8005b80 <__sinit+0x14>
 8005b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b7c:	f7ff bff0 	b.w	8005b60 <__sinit_lock_release>
 8005b80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b84:	6523      	str	r3, [r4, #80]	; 0x50
 8005b86:	4b13      	ldr	r3, [pc, #76]	; (8005bd4 <__sinit+0x68>)
 8005b88:	4a13      	ldr	r2, [pc, #76]	; (8005bd8 <__sinit+0x6c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b8e:	42a3      	cmp	r3, r4
 8005b90:	bf04      	itt	eq
 8005b92:	2301      	moveq	r3, #1
 8005b94:	61a3      	streq	r3, [r4, #24]
 8005b96:	4620      	mov	r0, r4
 8005b98:	f000 f820 	bl	8005bdc <__sfp>
 8005b9c:	6060      	str	r0, [r4, #4]
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	f000 f81c 	bl	8005bdc <__sfp>
 8005ba4:	60a0      	str	r0, [r4, #8]
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f000 f818 	bl	8005bdc <__sfp>
 8005bac:	2200      	movs	r2, #0
 8005bae:	60e0      	str	r0, [r4, #12]
 8005bb0:	2104      	movs	r1, #4
 8005bb2:	6860      	ldr	r0, [r4, #4]
 8005bb4:	f7ff ff82 	bl	8005abc <std>
 8005bb8:	68a0      	ldr	r0, [r4, #8]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	2109      	movs	r1, #9
 8005bbe:	f7ff ff7d 	bl	8005abc <std>
 8005bc2:	68e0      	ldr	r0, [r4, #12]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	2112      	movs	r1, #18
 8005bc8:	f7ff ff78 	bl	8005abc <std>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	61a3      	str	r3, [r4, #24]
 8005bd0:	e7d2      	b.n	8005b78 <__sinit+0xc>
 8005bd2:	bf00      	nop
 8005bd4:	080061ec 	.word	0x080061ec
 8005bd8:	08005b05 	.word	0x08005b05

08005bdc <__sfp>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	4607      	mov	r7, r0
 8005be0:	f7ff ffac 	bl	8005b3c <__sfp_lock_acquire>
 8005be4:	4b1e      	ldr	r3, [pc, #120]	; (8005c60 <__sfp+0x84>)
 8005be6:	681e      	ldr	r6, [r3, #0]
 8005be8:	69b3      	ldr	r3, [r6, #24]
 8005bea:	b913      	cbnz	r3, 8005bf2 <__sfp+0x16>
 8005bec:	4630      	mov	r0, r6
 8005bee:	f7ff ffbd 	bl	8005b6c <__sinit>
 8005bf2:	3648      	adds	r6, #72	; 0x48
 8005bf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	d503      	bpl.n	8005c04 <__sfp+0x28>
 8005bfc:	6833      	ldr	r3, [r6, #0]
 8005bfe:	b30b      	cbz	r3, 8005c44 <__sfp+0x68>
 8005c00:	6836      	ldr	r6, [r6, #0]
 8005c02:	e7f7      	b.n	8005bf4 <__sfp+0x18>
 8005c04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c08:	b9d5      	cbnz	r5, 8005c40 <__sfp+0x64>
 8005c0a:	4b16      	ldr	r3, [pc, #88]	; (8005c64 <__sfp+0x88>)
 8005c0c:	60e3      	str	r3, [r4, #12]
 8005c0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c12:	6665      	str	r5, [r4, #100]	; 0x64
 8005c14:	f000 f847 	bl	8005ca6 <__retarget_lock_init_recursive>
 8005c18:	f7ff ff96 	bl	8005b48 <__sfp_lock_release>
 8005c1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c24:	6025      	str	r5, [r4, #0]
 8005c26:	61a5      	str	r5, [r4, #24]
 8005c28:	2208      	movs	r2, #8
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c30:	f7ff fd44 	bl	80056bc <memset>
 8005c34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c40:	3468      	adds	r4, #104	; 0x68
 8005c42:	e7d9      	b.n	8005bf8 <__sfp+0x1c>
 8005c44:	2104      	movs	r1, #4
 8005c46:	4638      	mov	r0, r7
 8005c48:	f7ff ff62 	bl	8005b10 <__sfmoreglue>
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	6030      	str	r0, [r6, #0]
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d1d5      	bne.n	8005c00 <__sfp+0x24>
 8005c54:	f7ff ff78 	bl	8005b48 <__sfp_lock_release>
 8005c58:	230c      	movs	r3, #12
 8005c5a:	603b      	str	r3, [r7, #0]
 8005c5c:	e7ee      	b.n	8005c3c <__sfp+0x60>
 8005c5e:	bf00      	nop
 8005c60:	080061ec 	.word	0x080061ec
 8005c64:	ffff0001 	.word	0xffff0001

08005c68 <_fwalk_reent>:
 8005c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	4688      	mov	r8, r1
 8005c70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c74:	2700      	movs	r7, #0
 8005c76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c7a:	f1b9 0901 	subs.w	r9, r9, #1
 8005c7e:	d505      	bpl.n	8005c8c <_fwalk_reent+0x24>
 8005c80:	6824      	ldr	r4, [r4, #0]
 8005c82:	2c00      	cmp	r4, #0
 8005c84:	d1f7      	bne.n	8005c76 <_fwalk_reent+0xe>
 8005c86:	4638      	mov	r0, r7
 8005c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c8c:	89ab      	ldrh	r3, [r5, #12]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d907      	bls.n	8005ca2 <_fwalk_reent+0x3a>
 8005c92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c96:	3301      	adds	r3, #1
 8005c98:	d003      	beq.n	8005ca2 <_fwalk_reent+0x3a>
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	47c0      	blx	r8
 8005ca0:	4307      	orrs	r7, r0
 8005ca2:	3568      	adds	r5, #104	; 0x68
 8005ca4:	e7e9      	b.n	8005c7a <_fwalk_reent+0x12>

08005ca6 <__retarget_lock_init_recursive>:
 8005ca6:	4770      	bx	lr

08005ca8 <__retarget_lock_acquire_recursive>:
 8005ca8:	4770      	bx	lr

08005caa <__retarget_lock_release_recursive>:
 8005caa:	4770      	bx	lr

08005cac <__swhatbuf_r>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	460e      	mov	r6, r1
 8005cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb4:	2900      	cmp	r1, #0
 8005cb6:	b096      	sub	sp, #88	; 0x58
 8005cb8:	4614      	mov	r4, r2
 8005cba:	461d      	mov	r5, r3
 8005cbc:	da08      	bge.n	8005cd0 <__swhatbuf_r+0x24>
 8005cbe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	602a      	str	r2, [r5, #0]
 8005cc6:	061a      	lsls	r2, r3, #24
 8005cc8:	d410      	bmi.n	8005cec <__swhatbuf_r+0x40>
 8005cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cce:	e00e      	b.n	8005cee <__swhatbuf_r+0x42>
 8005cd0:	466a      	mov	r2, sp
 8005cd2:	f000 f9a7 	bl	8006024 <_fstat_r>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	dbf1      	blt.n	8005cbe <__swhatbuf_r+0x12>
 8005cda:	9a01      	ldr	r2, [sp, #4]
 8005cdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ce0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ce4:	425a      	negs	r2, r3
 8005ce6:	415a      	adcs	r2, r3
 8005ce8:	602a      	str	r2, [r5, #0]
 8005cea:	e7ee      	b.n	8005cca <__swhatbuf_r+0x1e>
 8005cec:	2340      	movs	r3, #64	; 0x40
 8005cee:	2000      	movs	r0, #0
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	b016      	add	sp, #88	; 0x58
 8005cf4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005cf8 <__smakebuf_r>:
 8005cf8:	898b      	ldrh	r3, [r1, #12]
 8005cfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cfc:	079d      	lsls	r5, r3, #30
 8005cfe:	4606      	mov	r6, r0
 8005d00:	460c      	mov	r4, r1
 8005d02:	d507      	bpl.n	8005d14 <__smakebuf_r+0x1c>
 8005d04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	6123      	str	r3, [r4, #16]
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	6163      	str	r3, [r4, #20]
 8005d10:	b002      	add	sp, #8
 8005d12:	bd70      	pop	{r4, r5, r6, pc}
 8005d14:	ab01      	add	r3, sp, #4
 8005d16:	466a      	mov	r2, sp
 8005d18:	f7ff ffc8 	bl	8005cac <__swhatbuf_r>
 8005d1c:	9900      	ldr	r1, [sp, #0]
 8005d1e:	4605      	mov	r5, r0
 8005d20:	4630      	mov	r0, r6
 8005d22:	f000 f895 	bl	8005e50 <_malloc_r>
 8005d26:	b948      	cbnz	r0, 8005d3c <__smakebuf_r+0x44>
 8005d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d2c:	059a      	lsls	r2, r3, #22
 8005d2e:	d4ef      	bmi.n	8005d10 <__smakebuf_r+0x18>
 8005d30:	f023 0303 	bic.w	r3, r3, #3
 8005d34:	f043 0302 	orr.w	r3, r3, #2
 8005d38:	81a3      	strh	r3, [r4, #12]
 8005d3a:	e7e3      	b.n	8005d04 <__smakebuf_r+0xc>
 8005d3c:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <__smakebuf_r+0x7c>)
 8005d3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	6020      	str	r0, [r4, #0]
 8005d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d48:	81a3      	strh	r3, [r4, #12]
 8005d4a:	9b00      	ldr	r3, [sp, #0]
 8005d4c:	6163      	str	r3, [r4, #20]
 8005d4e:	9b01      	ldr	r3, [sp, #4]
 8005d50:	6120      	str	r0, [r4, #16]
 8005d52:	b15b      	cbz	r3, 8005d6c <__smakebuf_r+0x74>
 8005d54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f000 f975 	bl	8006048 <_isatty_r>
 8005d5e:	b128      	cbz	r0, 8005d6c <__smakebuf_r+0x74>
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	f023 0303 	bic.w	r3, r3, #3
 8005d66:	f043 0301 	orr.w	r3, r3, #1
 8005d6a:	81a3      	strh	r3, [r4, #12]
 8005d6c:	89a0      	ldrh	r0, [r4, #12]
 8005d6e:	4305      	orrs	r5, r0
 8005d70:	81a5      	strh	r5, [r4, #12]
 8005d72:	e7cd      	b.n	8005d10 <__smakebuf_r+0x18>
 8005d74:	08005b05 	.word	0x08005b05

08005d78 <_free_r>:
 8005d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d7a:	2900      	cmp	r1, #0
 8005d7c:	d044      	beq.n	8005e08 <_free_r+0x90>
 8005d7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d82:	9001      	str	r0, [sp, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f1a1 0404 	sub.w	r4, r1, #4
 8005d8a:	bfb8      	it	lt
 8005d8c:	18e4      	addlt	r4, r4, r3
 8005d8e:	f000 f97d 	bl	800608c <__malloc_lock>
 8005d92:	4a1e      	ldr	r2, [pc, #120]	; (8005e0c <_free_r+0x94>)
 8005d94:	9801      	ldr	r0, [sp, #4]
 8005d96:	6813      	ldr	r3, [r2, #0]
 8005d98:	b933      	cbnz	r3, 8005da8 <_free_r+0x30>
 8005d9a:	6063      	str	r3, [r4, #4]
 8005d9c:	6014      	str	r4, [r2, #0]
 8005d9e:	b003      	add	sp, #12
 8005da0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005da4:	f000 b978 	b.w	8006098 <__malloc_unlock>
 8005da8:	42a3      	cmp	r3, r4
 8005daa:	d908      	bls.n	8005dbe <_free_r+0x46>
 8005dac:	6825      	ldr	r5, [r4, #0]
 8005dae:	1961      	adds	r1, r4, r5
 8005db0:	428b      	cmp	r3, r1
 8005db2:	bf01      	itttt	eq
 8005db4:	6819      	ldreq	r1, [r3, #0]
 8005db6:	685b      	ldreq	r3, [r3, #4]
 8005db8:	1949      	addeq	r1, r1, r5
 8005dba:	6021      	streq	r1, [r4, #0]
 8005dbc:	e7ed      	b.n	8005d9a <_free_r+0x22>
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	b10b      	cbz	r3, 8005dc8 <_free_r+0x50>
 8005dc4:	42a3      	cmp	r3, r4
 8005dc6:	d9fa      	bls.n	8005dbe <_free_r+0x46>
 8005dc8:	6811      	ldr	r1, [r2, #0]
 8005dca:	1855      	adds	r5, r2, r1
 8005dcc:	42a5      	cmp	r5, r4
 8005dce:	d10b      	bne.n	8005de8 <_free_r+0x70>
 8005dd0:	6824      	ldr	r4, [r4, #0]
 8005dd2:	4421      	add	r1, r4
 8005dd4:	1854      	adds	r4, r2, r1
 8005dd6:	42a3      	cmp	r3, r4
 8005dd8:	6011      	str	r1, [r2, #0]
 8005dda:	d1e0      	bne.n	8005d9e <_free_r+0x26>
 8005ddc:	681c      	ldr	r4, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	6053      	str	r3, [r2, #4]
 8005de2:	4421      	add	r1, r4
 8005de4:	6011      	str	r1, [r2, #0]
 8005de6:	e7da      	b.n	8005d9e <_free_r+0x26>
 8005de8:	d902      	bls.n	8005df0 <_free_r+0x78>
 8005dea:	230c      	movs	r3, #12
 8005dec:	6003      	str	r3, [r0, #0]
 8005dee:	e7d6      	b.n	8005d9e <_free_r+0x26>
 8005df0:	6825      	ldr	r5, [r4, #0]
 8005df2:	1961      	adds	r1, r4, r5
 8005df4:	428b      	cmp	r3, r1
 8005df6:	bf04      	itt	eq
 8005df8:	6819      	ldreq	r1, [r3, #0]
 8005dfa:	685b      	ldreq	r3, [r3, #4]
 8005dfc:	6063      	str	r3, [r4, #4]
 8005dfe:	bf04      	itt	eq
 8005e00:	1949      	addeq	r1, r1, r5
 8005e02:	6021      	streq	r1, [r4, #0]
 8005e04:	6054      	str	r4, [r2, #4]
 8005e06:	e7ca      	b.n	8005d9e <_free_r+0x26>
 8005e08:	b003      	add	sp, #12
 8005e0a:	bd30      	pop	{r4, r5, pc}
 8005e0c:	20004a78 	.word	0x20004a78

08005e10 <sbrk_aligned>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	4e0e      	ldr	r6, [pc, #56]	; (8005e4c <sbrk_aligned+0x3c>)
 8005e14:	460c      	mov	r4, r1
 8005e16:	6831      	ldr	r1, [r6, #0]
 8005e18:	4605      	mov	r5, r0
 8005e1a:	b911      	cbnz	r1, 8005e22 <sbrk_aligned+0x12>
 8005e1c:	f000 f88c 	bl	8005f38 <_sbrk_r>
 8005e20:	6030      	str	r0, [r6, #0]
 8005e22:	4621      	mov	r1, r4
 8005e24:	4628      	mov	r0, r5
 8005e26:	f000 f887 	bl	8005f38 <_sbrk_r>
 8005e2a:	1c43      	adds	r3, r0, #1
 8005e2c:	d00a      	beq.n	8005e44 <sbrk_aligned+0x34>
 8005e2e:	1cc4      	adds	r4, r0, #3
 8005e30:	f024 0403 	bic.w	r4, r4, #3
 8005e34:	42a0      	cmp	r0, r4
 8005e36:	d007      	beq.n	8005e48 <sbrk_aligned+0x38>
 8005e38:	1a21      	subs	r1, r4, r0
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f000 f87c 	bl	8005f38 <_sbrk_r>
 8005e40:	3001      	adds	r0, #1
 8005e42:	d101      	bne.n	8005e48 <sbrk_aligned+0x38>
 8005e44:	f04f 34ff 	mov.w	r4, #4294967295
 8005e48:	4620      	mov	r0, r4
 8005e4a:	bd70      	pop	{r4, r5, r6, pc}
 8005e4c:	20004a7c 	.word	0x20004a7c

08005e50 <_malloc_r>:
 8005e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e54:	1ccd      	adds	r5, r1, #3
 8005e56:	f025 0503 	bic.w	r5, r5, #3
 8005e5a:	3508      	adds	r5, #8
 8005e5c:	2d0c      	cmp	r5, #12
 8005e5e:	bf38      	it	cc
 8005e60:	250c      	movcc	r5, #12
 8005e62:	2d00      	cmp	r5, #0
 8005e64:	4607      	mov	r7, r0
 8005e66:	db01      	blt.n	8005e6c <_malloc_r+0x1c>
 8005e68:	42a9      	cmp	r1, r5
 8005e6a:	d905      	bls.n	8005e78 <_malloc_r+0x28>
 8005e6c:	230c      	movs	r3, #12
 8005e6e:	603b      	str	r3, [r7, #0]
 8005e70:	2600      	movs	r6, #0
 8005e72:	4630      	mov	r0, r6
 8005e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e78:	4e2e      	ldr	r6, [pc, #184]	; (8005f34 <_malloc_r+0xe4>)
 8005e7a:	f000 f907 	bl	800608c <__malloc_lock>
 8005e7e:	6833      	ldr	r3, [r6, #0]
 8005e80:	461c      	mov	r4, r3
 8005e82:	bb34      	cbnz	r4, 8005ed2 <_malloc_r+0x82>
 8005e84:	4629      	mov	r1, r5
 8005e86:	4638      	mov	r0, r7
 8005e88:	f7ff ffc2 	bl	8005e10 <sbrk_aligned>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	4604      	mov	r4, r0
 8005e90:	d14d      	bne.n	8005f2e <_malloc_r+0xde>
 8005e92:	6834      	ldr	r4, [r6, #0]
 8005e94:	4626      	mov	r6, r4
 8005e96:	2e00      	cmp	r6, #0
 8005e98:	d140      	bne.n	8005f1c <_malloc_r+0xcc>
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4638      	mov	r0, r7
 8005ea0:	eb04 0803 	add.w	r8, r4, r3
 8005ea4:	f000 f848 	bl	8005f38 <_sbrk_r>
 8005ea8:	4580      	cmp	r8, r0
 8005eaa:	d13a      	bne.n	8005f22 <_malloc_r+0xd2>
 8005eac:	6821      	ldr	r1, [r4, #0]
 8005eae:	3503      	adds	r5, #3
 8005eb0:	1a6d      	subs	r5, r5, r1
 8005eb2:	f025 0503 	bic.w	r5, r5, #3
 8005eb6:	3508      	adds	r5, #8
 8005eb8:	2d0c      	cmp	r5, #12
 8005eba:	bf38      	it	cc
 8005ebc:	250c      	movcc	r5, #12
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	4638      	mov	r0, r7
 8005ec2:	f7ff ffa5 	bl	8005e10 <sbrk_aligned>
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	d02b      	beq.n	8005f22 <_malloc_r+0xd2>
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	442b      	add	r3, r5
 8005ece:	6023      	str	r3, [r4, #0]
 8005ed0:	e00e      	b.n	8005ef0 <_malloc_r+0xa0>
 8005ed2:	6822      	ldr	r2, [r4, #0]
 8005ed4:	1b52      	subs	r2, r2, r5
 8005ed6:	d41e      	bmi.n	8005f16 <_malloc_r+0xc6>
 8005ed8:	2a0b      	cmp	r2, #11
 8005eda:	d916      	bls.n	8005f0a <_malloc_r+0xba>
 8005edc:	1961      	adds	r1, r4, r5
 8005ede:	42a3      	cmp	r3, r4
 8005ee0:	6025      	str	r5, [r4, #0]
 8005ee2:	bf18      	it	ne
 8005ee4:	6059      	strne	r1, [r3, #4]
 8005ee6:	6863      	ldr	r3, [r4, #4]
 8005ee8:	bf08      	it	eq
 8005eea:	6031      	streq	r1, [r6, #0]
 8005eec:	5162      	str	r2, [r4, r5]
 8005eee:	604b      	str	r3, [r1, #4]
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	f104 060b 	add.w	r6, r4, #11
 8005ef6:	f000 f8cf 	bl	8006098 <__malloc_unlock>
 8005efa:	f026 0607 	bic.w	r6, r6, #7
 8005efe:	1d23      	adds	r3, r4, #4
 8005f00:	1af2      	subs	r2, r6, r3
 8005f02:	d0b6      	beq.n	8005e72 <_malloc_r+0x22>
 8005f04:	1b9b      	subs	r3, r3, r6
 8005f06:	50a3      	str	r3, [r4, r2]
 8005f08:	e7b3      	b.n	8005e72 <_malloc_r+0x22>
 8005f0a:	6862      	ldr	r2, [r4, #4]
 8005f0c:	42a3      	cmp	r3, r4
 8005f0e:	bf0c      	ite	eq
 8005f10:	6032      	streq	r2, [r6, #0]
 8005f12:	605a      	strne	r2, [r3, #4]
 8005f14:	e7ec      	b.n	8005ef0 <_malloc_r+0xa0>
 8005f16:	4623      	mov	r3, r4
 8005f18:	6864      	ldr	r4, [r4, #4]
 8005f1a:	e7b2      	b.n	8005e82 <_malloc_r+0x32>
 8005f1c:	4634      	mov	r4, r6
 8005f1e:	6876      	ldr	r6, [r6, #4]
 8005f20:	e7b9      	b.n	8005e96 <_malloc_r+0x46>
 8005f22:	230c      	movs	r3, #12
 8005f24:	603b      	str	r3, [r7, #0]
 8005f26:	4638      	mov	r0, r7
 8005f28:	f000 f8b6 	bl	8006098 <__malloc_unlock>
 8005f2c:	e7a1      	b.n	8005e72 <_malloc_r+0x22>
 8005f2e:	6025      	str	r5, [r4, #0]
 8005f30:	e7de      	b.n	8005ef0 <_malloc_r+0xa0>
 8005f32:	bf00      	nop
 8005f34:	20004a78 	.word	0x20004a78

08005f38 <_sbrk_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	4d06      	ldr	r5, [pc, #24]	; (8005f54 <_sbrk_r+0x1c>)
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	4604      	mov	r4, r0
 8005f40:	4608      	mov	r0, r1
 8005f42:	602b      	str	r3, [r5, #0]
 8005f44:	f7fa fdec 	bl	8000b20 <_sbrk>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	d102      	bne.n	8005f52 <_sbrk_r+0x1a>
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	b103      	cbz	r3, 8005f52 <_sbrk_r+0x1a>
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	bd38      	pop	{r3, r4, r5, pc}
 8005f54:	20004a80 	.word	0x20004a80

08005f58 <__sread>:
 8005f58:	b510      	push	{r4, lr}
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f60:	f000 f8a0 	bl	80060a4 <_read_r>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	bfab      	itete	ge
 8005f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f6c:	181b      	addge	r3, r3, r0
 8005f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f72:	bfac      	ite	ge
 8005f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f76:	81a3      	strhlt	r3, [r4, #12]
 8005f78:	bd10      	pop	{r4, pc}

08005f7a <__swrite>:
 8005f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f7e:	461f      	mov	r7, r3
 8005f80:	898b      	ldrh	r3, [r1, #12]
 8005f82:	05db      	lsls	r3, r3, #23
 8005f84:	4605      	mov	r5, r0
 8005f86:	460c      	mov	r4, r1
 8005f88:	4616      	mov	r6, r2
 8005f8a:	d505      	bpl.n	8005f98 <__swrite+0x1e>
 8005f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f90:	2302      	movs	r3, #2
 8005f92:	2200      	movs	r2, #0
 8005f94:	f000 f868 	bl	8006068 <_lseek_r>
 8005f98:	89a3      	ldrh	r3, [r4, #12]
 8005f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fa2:	81a3      	strh	r3, [r4, #12]
 8005fa4:	4632      	mov	r2, r6
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	4628      	mov	r0, r5
 8005faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fae:	f000 b817 	b.w	8005fe0 <_write_r>

08005fb2 <__sseek>:
 8005fb2:	b510      	push	{r4, lr}
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fba:	f000 f855 	bl	8006068 <_lseek_r>
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	bf15      	itete	ne
 8005fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fce:	81a3      	strheq	r3, [r4, #12]
 8005fd0:	bf18      	it	ne
 8005fd2:	81a3      	strhne	r3, [r4, #12]
 8005fd4:	bd10      	pop	{r4, pc}

08005fd6 <__sclose>:
 8005fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fda:	f000 b813 	b.w	8006004 <_close_r>
	...

08005fe0 <_write_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4d07      	ldr	r5, [pc, #28]	; (8006000 <_write_r+0x20>)
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	4608      	mov	r0, r1
 8005fe8:	4611      	mov	r1, r2
 8005fea:	2200      	movs	r2, #0
 8005fec:	602a      	str	r2, [r5, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f7fa fd45 	bl	8000a7e <_write>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_write_r+0x1e>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_write_r+0x1e>
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	20004a80 	.word	0x20004a80

08006004 <_close_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4d06      	ldr	r5, [pc, #24]	; (8006020 <_close_r+0x1c>)
 8006008:	2300      	movs	r3, #0
 800600a:	4604      	mov	r4, r0
 800600c:	4608      	mov	r0, r1
 800600e:	602b      	str	r3, [r5, #0]
 8006010:	f7fa fd51 	bl	8000ab6 <_close>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d102      	bne.n	800601e <_close_r+0x1a>
 8006018:	682b      	ldr	r3, [r5, #0]
 800601a:	b103      	cbz	r3, 800601e <_close_r+0x1a>
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	bd38      	pop	{r3, r4, r5, pc}
 8006020:	20004a80 	.word	0x20004a80

08006024 <_fstat_r>:
 8006024:	b538      	push	{r3, r4, r5, lr}
 8006026:	4d07      	ldr	r5, [pc, #28]	; (8006044 <_fstat_r+0x20>)
 8006028:	2300      	movs	r3, #0
 800602a:	4604      	mov	r4, r0
 800602c:	4608      	mov	r0, r1
 800602e:	4611      	mov	r1, r2
 8006030:	602b      	str	r3, [r5, #0]
 8006032:	f7fa fd4c 	bl	8000ace <_fstat>
 8006036:	1c43      	adds	r3, r0, #1
 8006038:	d102      	bne.n	8006040 <_fstat_r+0x1c>
 800603a:	682b      	ldr	r3, [r5, #0]
 800603c:	b103      	cbz	r3, 8006040 <_fstat_r+0x1c>
 800603e:	6023      	str	r3, [r4, #0]
 8006040:	bd38      	pop	{r3, r4, r5, pc}
 8006042:	bf00      	nop
 8006044:	20004a80 	.word	0x20004a80

08006048 <_isatty_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4d06      	ldr	r5, [pc, #24]	; (8006064 <_isatty_r+0x1c>)
 800604c:	2300      	movs	r3, #0
 800604e:	4604      	mov	r4, r0
 8006050:	4608      	mov	r0, r1
 8006052:	602b      	str	r3, [r5, #0]
 8006054:	f7fa fd4b 	bl	8000aee <_isatty>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	d102      	bne.n	8006062 <_isatty_r+0x1a>
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	b103      	cbz	r3, 8006062 <_isatty_r+0x1a>
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	bd38      	pop	{r3, r4, r5, pc}
 8006064:	20004a80 	.word	0x20004a80

08006068 <_lseek_r>:
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	4d07      	ldr	r5, [pc, #28]	; (8006088 <_lseek_r+0x20>)
 800606c:	4604      	mov	r4, r0
 800606e:	4608      	mov	r0, r1
 8006070:	4611      	mov	r1, r2
 8006072:	2200      	movs	r2, #0
 8006074:	602a      	str	r2, [r5, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	f7fa fd44 	bl	8000b04 <_lseek>
 800607c:	1c43      	adds	r3, r0, #1
 800607e:	d102      	bne.n	8006086 <_lseek_r+0x1e>
 8006080:	682b      	ldr	r3, [r5, #0]
 8006082:	b103      	cbz	r3, 8006086 <_lseek_r+0x1e>
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	bd38      	pop	{r3, r4, r5, pc}
 8006088:	20004a80 	.word	0x20004a80

0800608c <__malloc_lock>:
 800608c:	4801      	ldr	r0, [pc, #4]	; (8006094 <__malloc_lock+0x8>)
 800608e:	f7ff be0b 	b.w	8005ca8 <__retarget_lock_acquire_recursive>
 8006092:	bf00      	nop
 8006094:	20004a74 	.word	0x20004a74

08006098 <__malloc_unlock>:
 8006098:	4801      	ldr	r0, [pc, #4]	; (80060a0 <__malloc_unlock+0x8>)
 800609a:	f7ff be06 	b.w	8005caa <__retarget_lock_release_recursive>
 800609e:	bf00      	nop
 80060a0:	20004a74 	.word	0x20004a74

080060a4 <_read_r>:
 80060a4:	b538      	push	{r3, r4, r5, lr}
 80060a6:	4d07      	ldr	r5, [pc, #28]	; (80060c4 <_read_r+0x20>)
 80060a8:	4604      	mov	r4, r0
 80060aa:	4608      	mov	r0, r1
 80060ac:	4611      	mov	r1, r2
 80060ae:	2200      	movs	r2, #0
 80060b0:	602a      	str	r2, [r5, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	f7fa fcc6 	bl	8000a44 <_read>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d102      	bne.n	80060c2 <_read_r+0x1e>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	b103      	cbz	r3, 80060c2 <_read_r+0x1e>
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	20004a80 	.word	0x20004a80

080060c8 <_init>:
 80060c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ca:	bf00      	nop
 80060cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ce:	bc08      	pop	{r3}
 80060d0:	469e      	mov	lr, r3
 80060d2:	4770      	bx	lr

080060d4 <_fini>:
 80060d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d6:	bf00      	nop
 80060d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060da:	bc08      	pop	{r3}
 80060dc:	469e      	mov	lr, r3
 80060de:	4770      	bx	lr
