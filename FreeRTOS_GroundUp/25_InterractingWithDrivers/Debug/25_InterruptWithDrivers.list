
25_InterruptWithDrivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b4  080051b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051bc  080051bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051bc  080051bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051c0  080051c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080051c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a08  20000010  080051d4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a18  080051d4  00024a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f4c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e4  00000000  00000000  00038f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  0003c470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001360  00000000  00000000  0003d918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b66  00000000  00000000  0003ec78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017815  00000000  00000000  000627de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db20f  00000000  00000000  00079ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155202  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000565c  00000000  00000000  00155254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005150 	.word	0x08005150

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08005150 	.word	0x08005150

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <read_analog_sensor>:
	ADC1 -> SQR1 = 0;	// conversion sequence length 1
	ADC1 -> CR2 |= 1;	// enable ADC1
}

uint32_t read_analog_sensor(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
	ADC1 -> CR2 |= (1U << 30); // Start conversion
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <read_analog_sensor+0x2c>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <read_analog_sensor+0x2c>)
 800051e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000522:	6093      	str	r3, [r2, #8]

	while(!(ADC1 -> SR & 2)){} // Wait for conversion to complete
 8000524:	bf00      	nop
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <read_analog_sensor+0x2c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f003 0302 	and.w	r3, r3, #2
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0f9      	beq.n	8000526 <read_analog_sensor+0x12>

	return ADC1 -> DR;
 8000532:	4b03      	ldr	r3, [pc, #12]	; (8000540 <read_analog_sensor+0x2c>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000536:	4618      	mov	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	40012000 	.word	0x40012000

08000544 <read_digital_sensor>:
	//Enable GPIOC clock
	RCC -> AHB1ENR |= 4;
}

uint8_t read_digital_sensor(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
	if(GPIOC -> IDR & 0x2000)
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <read_digital_sensor+0x20>)
 800054a:	691b      	ldr	r3, [r3, #16]
 800054c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <read_digital_sensor+0x14>
	{
		return 1;
 8000554:	2301      	movs	r3, #1
 8000556:	e000      	b.n	800055a <read_digital_sensor+0x16>
	}
	else
	{
		return 0;
 8000558:	2300      	movs	r3, #0
	}
}
 800055a:	4618      	mov	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40020800 	.word	0x40020800

08000568 <main>:

#define STACK_SIZE 		128 // 128 * 4 = 512 bytes
static QueueHandle_t  	uart2_BytesReceived = NULL;

int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af02      	add	r7, sp, #8

  HAL_Init();
 800056e:	f000 fae7 	bl	8000b40 <HAL_Init>
  SystemClock_Config();
 8000572:	f000 f865 	bl	8000640 <SystemClock_Config>
  MX_GPIO_Init();
 8000576:	f000 f8d1 	bl	800071c <MX_GPIO_Init>
  USART2_UART_TX_Init();
 800057a:	f000 fa5d 	bl	8000a38 <USART2_UART_TX_Init>

  xTaskCreate(pollUartReceive,
 800057e:	2300      	movs	r3, #0
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2302      	movs	r3, #2
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	2280      	movs	r2, #128	; 0x80
 800058a:	4912      	ldr	r1, [pc, #72]	; (80005d4 <main+0x6c>)
 800058c:	4812      	ldr	r0, [pc, #72]	; (80005d8 <main+0x70>)
 800058e:	f002 ffae 	bl	80034ee <xTaskCreate>
			  STACK_SIZE,
			  NULL,
			  tskIDLE_PRIORITY + 2,
			  NULL);

  xTaskCreate(HandlerTask,
 8000592:	2300      	movs	r3, #0
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2303      	movs	r3, #3
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	2280      	movs	r2, #128	; 0x80
 800059e:	490f      	ldr	r1, [pc, #60]	; (80005dc <main+0x74>)
 80005a0:	480f      	ldr	r0, [pc, #60]	; (80005e0 <main+0x78>)
 80005a2:	f002 ffa4 	bl	80034ee <xTaskCreate>
			  STACK_SIZE,
			  NULL,
			  tskIDLE_PRIORITY + 3,
			  NULL);

  uart2_BytesReceived = xQueueCreate(10, sizeof(char));
 80005a6:	2200      	movs	r2, #0
 80005a8:	2101      	movs	r1, #1
 80005aa:	200a      	movs	r0, #10
 80005ac:	f002 fafc 	bl	8002ba8 <xQueueGenericCreate>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <main+0x7c>)
 80005b4:	6013      	str	r3, [r2, #0]

  vTaskStartScheduler();
 80005b6:	f003 f8df 	bl	8003778 <vTaskStartScheduler>

  while (1)
  {
	  btn_state = read_digital_sensor();
 80005ba:	f7ff ffc3 	bl	8000544 <read_digital_sensor>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <main+0x80>)
 80005c4:	701a      	strb	r2, [r3, #0]
	  sensor_value = read_analog_sensor();
 80005c6:	f7ff ffa5 	bl	8000514 <read_analog_sensor>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <main+0x84>)
 80005ce:	6013      	str	r3, [r2, #0]
	  btn_state = read_digital_sensor();
 80005d0:	e7f3      	b.n	80005ba <main+0x52>
 80005d2:	bf00      	nop
 80005d4:	08005168 	.word	0x08005168
 80005d8:	080005f1 	.word	0x080005f1
 80005dc:	08005174 	.word	0x08005174
 80005e0:	0800061d 	.word	0x0800061d
 80005e4:	20000034 	.word	0x20000034
 80005e8:	2000002c 	.word	0x2000002c
 80005ec:	20000030 	.word	0x20000030

080005f0 <pollUartReceive>:
  }

}

void pollUartReceive(void *pvParameters)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	uint8_t nextByte;
	USART2_UART_RX_Init();
 80005f8:	f000 fa42 	bl	8000a80 <USART2_UART_RX_Init>
	while(1)
	{
		nextByte = USART2_read();
 80005fc:	f000 fa64 	bl	8000ac8 <USART2_read>
 8000600:	4603      	mov	r3, r0
 8000602:	b2db      	uxtb	r3, r3
 8000604:	73fb      	strb	r3, [r7, #15]
		xQueueSend(uart2_BytesReceived, &nextByte, 0);
 8000606:	4b04      	ldr	r3, [pc, #16]	; (8000618 <pollUartReceive+0x28>)
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	f107 010f 	add.w	r1, r7, #15
 800060e:	2300      	movs	r3, #0
 8000610:	2200      	movs	r2, #0
 8000612:	f002 fb27 	bl	8002c64 <xQueueGenericSend>
		nextByte = USART2_read();
 8000616:	e7f1      	b.n	80005fc <pollUartReceive+0xc>
 8000618:	20000034 	.word	0x20000034

0800061c <HandlerTask>:
	}
}

char rcvByte;
void HandlerTask(void *pvParameters)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xQueueReceive(uart2_BytesReceived, &rcvByte, portMAX_DELAY);
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <HandlerTask+0x1c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f04f 32ff 	mov.w	r2, #4294967295
 800062c:	4903      	ldr	r1, [pc, #12]	; (800063c <HandlerTask+0x20>)
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fcb2 	bl	8002f98 <xQueueReceive>
 8000634:	e7f6      	b.n	8000624 <HandlerTask+0x8>
 8000636:	bf00      	nop
 8000638:	20000034 	.word	0x20000034
 800063c:	20000038 	.word	0x20000038

08000640 <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2234      	movs	r2, #52	; 0x34
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f004 fd76 	bl	8005140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <SystemClock_Config+0xd4>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a29      	ldr	r2, [pc, #164]	; (8000714 <SystemClock_Config+0xd4>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <SystemClock_Config+0xd4>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000680:	2300      	movs	r3, #0
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <SystemClock_Config+0xd8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800068c:	4a22      	ldr	r2, [pc, #136]	; (8000718 <SystemClock_Config+0xd8>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <SystemClock_Config+0xd8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b4:	2310      	movs	r3, #16
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006be:	2304      	movs	r3, #4
 80006c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f884 	bl	80017dc <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006da:	f000 f88f 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	230f      	movs	r3, #15
 80006e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2302      	movs	r3, #2
 80006e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2102      	movs	r1, #2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fcf2 	bl	80010e4 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000706:	f000 f879 	bl	80007fc <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <MX_GPIO_Init+0xb4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a25      	ldr	r2, [pc, #148]	; (80007d0 <MX_GPIO_Init+0xb4>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <MX_GPIO_Init+0xb4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_GPIO_Init+0xb4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <MX_GPIO_Init+0xb4>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_GPIO_Init+0xb4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_GPIO_Init+0xb4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_GPIO_Init+0xb4>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_GPIO_Init+0xb4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_GPIO_Init+0xb4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <MX_GPIO_Init+0xb4>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_GPIO_Init+0xb4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2120      	movs	r1, #32
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <MX_GPIO_Init+0xb8>)
 80007a8:	f000 fc82 	bl	80010b0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = LD2_Pin;
 80007ac:	2320      	movs	r3, #32
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_GPIO_Init+0xb8>)
 80007c4:	f000 fae0 	bl	8000d88 <HAL_GPIO_Init>

}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	; 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020000 	.word	0x40020000

080007d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d101      	bne.n	80007ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ea:	f000 f9cb 	bl	8000b84 <HAL_IncTick>
  }

}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40010000 	.word	0x40010000

080007fc <Error_Handler>:

void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_MspInit+0x54>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a11      	ldr	r2, [pc, #68]	; (800085c <HAL_MspInit+0x54>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_MspInit+0x54>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <HAL_MspInit+0x54>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <HAL_MspInit+0x54>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_MspInit+0x54>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	210f      	movs	r1, #15
 800084a:	f06f 0001 	mvn.w	r0, #1
 800084e:	f000 fa71 	bl	8000d34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a19      	ldr	r2, [pc, #100]	; (80008e4 <HAL_UART_MspInit+0x84>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d12b      	bne.n	80008da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <HAL_UART_MspInit+0x88>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <HAL_UART_MspInit+0x88>)
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	6413      	str	r3, [r2, #64]	; 0x40
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <HAL_UART_MspInit+0x88>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_UART_MspInit+0x88>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <HAL_UART_MspInit+0x88>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_UART_MspInit+0x88>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ba:	230c      	movs	r3, #12
 80008bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c6:	2303      	movs	r3, #3
 80008c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ca:	2307      	movs	r3, #7
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <HAL_UART_MspInit+0x8c>)
 80008d6:	f000 fa57 	bl	8000d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008da:	bf00      	nop
 80008dc:	3728      	adds	r7, #40	; 0x28
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40004400 	.word	0x40004400
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000

080008f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	4b2e      	ldr	r3, [pc, #184]	; (80009c0 <HAL_InitTick+0xd0>)
 8000906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000908:	4a2d      	ldr	r2, [pc, #180]	; (80009c0 <HAL_InitTick+0xd0>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	6453      	str	r3, [r2, #68]	; 0x44
 8000910:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <HAL_InitTick+0xd0>)
 8000912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800091c:	f107 020c 	add.w	r2, r7, #12
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fcf6 	bl	8001318 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800092c:	f000 fce0 	bl	80012f0 <HAL_RCC_GetPCLK2Freq>
 8000930:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000934:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <HAL_InitTick+0xd4>)
 8000936:	fba2 2303 	umull	r2, r3, r2, r3
 800093a:	0c9b      	lsrs	r3, r3, #18
 800093c:	3b01      	subs	r3, #1
 800093e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000940:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <HAL_InitTick+0xd8>)
 8000942:	4a22      	ldr	r2, [pc, #136]	; (80009cc <HAL_InitTick+0xdc>)
 8000944:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <HAL_InitTick+0xd8>)
 8000948:	f240 32e7 	movw	r2, #999	; 0x3e7
 800094c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800094e:	4a1e      	ldr	r2, [pc, #120]	; (80009c8 <HAL_InitTick+0xd8>)
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <HAL_InitTick+0xd8>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <HAL_InitTick+0xd8>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <HAL_InitTick+0xd8>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000966:	4818      	ldr	r0, [pc, #96]	; (80009c8 <HAL_InitTick+0xd8>)
 8000968:	f001 f9d6 	bl	8001d18 <HAL_TIM_Base_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000976:	2b00      	cmp	r3, #0
 8000978:	d11b      	bne.n	80009b2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800097a:	4813      	ldr	r0, [pc, #76]	; (80009c8 <HAL_InitTick+0xd8>)
 800097c:	f001 fa26 	bl	8001dcc <HAL_TIM_Base_Start_IT>
 8000980:	4603      	mov	r3, r0
 8000982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000986:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800098a:	2b00      	cmp	r3, #0
 800098c:	d111      	bne.n	80009b2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800098e:	2019      	movs	r0, #25
 8000990:	f000 f9ec 	bl	8000d6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b0f      	cmp	r3, #15
 8000998:	d808      	bhi.n	80009ac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800099a:	2200      	movs	r2, #0
 800099c:	6879      	ldr	r1, [r7, #4]
 800099e:	2019      	movs	r0, #25
 80009a0:	f000 f9c8 	bl	8000d34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a4:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <HAL_InitTick+0xe0>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
 80009aa:	e002      	b.n	80009b2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3730      	adds	r7, #48	; 0x30
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	431bde83 	.word	0x431bde83
 80009c8:	2000003c 	.word	0x2000003c
 80009cc:	40010000 	.word	0x40010000
 80009d0:	20000004 	.word	0x20000004

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <NMI_Handler+0x4>

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <MemManage_Handler+0x4>

080009e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a06:	f001 fa51 	bl	8001eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000003c 	.word	0x2000003c

08000a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <USART2_UART_TX_Init>:
int __io_putchar(int ch);

UART_HandleTypeDef huart2;

void USART2_UART_TX_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <USART2_UART_TX_Init+0x40>)
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <USART2_UART_TX_Init+0x44>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <USART2_UART_TX_Init+0x40>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <USART2_UART_TX_Init+0x40>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <USART2_UART_TX_Init+0x40>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <USART2_UART_TX_Init+0x40>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <USART2_UART_TX_Init+0x40>)
 8000a5e:	2208      	movs	r2, #8
 8000a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <USART2_UART_TX_Init+0x40>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <USART2_UART_TX_Init+0x40>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6e:	4802      	ldr	r0, [pc, #8]	; (8000a78 <USART2_UART_TX_Init+0x40>)
 8000a70:	f001 fc00 	bl	8002274 <HAL_UART_Init>
  {
  }
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000084 	.word	0x20000084
 8000a7c:	40004400 	.word	0x40004400

08000a80 <USART2_UART_RX_Init>:

void USART2_UART_RX_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <USART2_UART_RX_Init+0x40>)
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <USART2_UART_RX_Init+0x44>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <USART2_UART_RX_Init+0x40>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <USART2_UART_RX_Init+0x40>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <USART2_UART_RX_Init+0x40>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <USART2_UART_RX_Init+0x40>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <USART2_UART_RX_Init+0x40>)
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <USART2_UART_RX_Init+0x40>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <USART2_UART_RX_Init+0x40>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab6:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <USART2_UART_RX_Init+0x40>)
 8000ab8:	f001 fbdc 	bl	8002274 <HAL_UART_Init>
  {
  }
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000084 	.word	0x20000084
 8000ac4:	40004400 	.word	0x40004400

08000ac8 <USART2_read>:
	USART2->DR	=  (ch & 0xFF);
	return ch;
}

int USART2_read(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
	while(!(USART2->SR & 0x0020)){}
 8000acc:	bf00      	nop
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <USART2_read+0x20>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0320 	and.w	r3, r3, #32
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d0f9      	beq.n	8000ace <USART2_read+0x6>
	return USART2 -> DR;
 8000ada:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <USART2_read+0x20>)
 8000adc:	685b      	ldr	r3, [r3, #4]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	40004400 	.word	0x40004400

08000aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000af2:	490e      	ldr	r1, [pc, #56]	; (8000b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b08:	4c0b      	ldr	r4, [pc, #44]	; (8000b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b16:	f7ff ff7d 	bl	8000a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f004 fadf 	bl	80050dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1e:	f7ff fd23 	bl	8000568 <main>
  bx  lr    
 8000b22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b30:	080051c4 	.word	0x080051c4
  ldr r2, =_sbss
 8000b34:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b38:	20004a18 	.word	0x20004a18

08000b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC_IRQHandler>
	...

08000b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <HAL_Init+0x40>)
 8000b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_Init+0x40>)
 8000b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_Init+0x40>)
 8000b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 f8d8 	bl	8000d1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6e:	200f      	movs	r0, #15
 8000b70:	f7ff febe 	bl	80008f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b74:	f7ff fe48 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023c00 	.word	0x40023c00

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	200000c8 	.word	0x200000c8

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	200000c8 	.word	0x200000c8

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4907      	ldr	r1, [pc, #28]	; (8000c60 <__NVIC_EnableIRQ+0x38>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ff4c 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d46:	f7ff ff61 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	68b9      	ldr	r1, [r7, #8]
 8000d50:	6978      	ldr	r0, [r7, #20]
 8000d52:	f7ff ffb1 	bl	8000cb8 <NVIC_EncodePriority>
 8000d56:	4602      	mov	r2, r0
 8000d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff80 	bl	8000c64 <__NVIC_SetPriority>
}
 8000d64:	bf00      	nop
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff54 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	e165      	b.n	8001070 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f040 8154 	bne.w	800106a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d005      	beq.n	8000dda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d130      	bne.n	8000e3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	f003 0201 	and.w	r2, r3, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d017      	beq.n	8000e78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d123      	bne.n	8000ecc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	08da      	lsrs	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	69b9      	ldr	r1, [r7, #24]
 8000ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0203 	and.w	r2, r3, #3
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80ae 	beq.w	800106a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b5d      	ldr	r3, [pc, #372]	; (8001088 <HAL_GPIO_Init+0x300>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a5c      	ldr	r2, [pc, #368]	; (8001088 <HAL_GPIO_Init+0x300>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b5a      	ldr	r3, [pc, #360]	; (8001088 <HAL_GPIO_Init+0x300>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2a:	4a58      	ldr	r2, [pc, #352]	; (800108c <HAL_GPIO_Init+0x304>)
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3302      	adds	r3, #2
 8000f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	220f      	movs	r2, #15
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <HAL_GPIO_Init+0x308>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d025      	beq.n	8000fa2 <HAL_GPIO_Init+0x21a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_GPIO_Init+0x30c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d01f      	beq.n	8000f9e <HAL_GPIO_Init+0x216>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <HAL_GPIO_Init+0x310>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d019      	beq.n	8000f9a <HAL_GPIO_Init+0x212>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_GPIO_Init+0x314>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x20e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_GPIO_Init+0x318>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x20a>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4a      	ldr	r2, [pc, #296]	; (80010a4 <HAL_GPIO_Init+0x31c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x206>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a49      	ldr	r2, [pc, #292]	; (80010a8 <HAL_GPIO_Init+0x320>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x202>
 8000f86:	2306      	movs	r3, #6
 8000f88:	e00c      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	e00a      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f8e:	2305      	movs	r3, #5
 8000f90:	e008      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f92:	2304      	movs	r3, #4
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f96:	2303      	movs	r3, #3
 8000f98:	e004      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	69fa      	ldr	r2, [r7, #28]
 8000fa6:	f002 0203 	and.w	r2, r2, #3
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	4093      	lsls	r3, r2
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb4:	4935      	ldr	r1, [pc, #212]	; (800108c <HAL_GPIO_Init+0x304>)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc2:	4b3a      	ldr	r3, [pc, #232]	; (80010ac <HAL_GPIO_Init+0x324>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe6:	4a31      	ldr	r2, [pc, #196]	; (80010ac <HAL_GPIO_Init+0x324>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <HAL_GPIO_Init+0x324>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001010:	4a26      	ldr	r2, [pc, #152]	; (80010ac <HAL_GPIO_Init+0x324>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <HAL_GPIO_Init+0x324>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <HAL_GPIO_Init+0x324>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_GPIO_Init+0x324>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001064:	4a11      	ldr	r2, [pc, #68]	; (80010ac <HAL_GPIO_Init+0x324>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3301      	adds	r3, #1
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	2b0f      	cmp	r3, #15
 8001074:	f67f ae96 	bls.w	8000da4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40013800 	.word	0x40013800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020400 	.word	0x40020400
 8001098:	40020800 	.word	0x40020800
 800109c:	40020c00 	.word	0x40020c00
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40021400 	.word	0x40021400
 80010a8:	40021800 	.word	0x40021800
 80010ac:	40013c00 	.word	0x40013c00

080010b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
 80010bc:	4613      	mov	r3, r2
 80010be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c0:	787b      	ldrb	r3, [r7, #1]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010cc:	e003      	b.n	80010d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	041a      	lsls	r2, r3, #16
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	619a      	str	r2, [r3, #24]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e0cc      	b.n	8001292 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010f8:	4b68      	ldr	r3, [pc, #416]	; (800129c <HAL_RCC_ClockConfig+0x1b8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 030f 	and.w	r3, r3, #15
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	429a      	cmp	r2, r3
 8001104:	d90c      	bls.n	8001120 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001106:	4b65      	ldr	r3, [pc, #404]	; (800129c <HAL_RCC_ClockConfig+0x1b8>)
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800110e:	4b63      	ldr	r3, [pc, #396]	; (800129c <HAL_RCC_ClockConfig+0x1b8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	d001      	beq.n	8001120 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e0b8      	b.n	8001292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d020      	beq.n	800116e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001138:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	4a58      	ldr	r2, [pc, #352]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001142:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001150:	4b53      	ldr	r3, [pc, #332]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	4a52      	ldr	r2, [pc, #328]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800115a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800115c:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	494d      	ldr	r1, [pc, #308]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 800116a:	4313      	orrs	r3, r2
 800116c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d044      	beq.n	8001204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d107      	bne.n	8001192 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001182:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d119      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e07f      	b.n	8001292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d003      	beq.n	80011a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d107      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a2:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d109      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e06f      	b.n	8001292 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e067      	b.n	8001292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011c2:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f023 0203 	bic.w	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	4934      	ldr	r1, [pc, #208]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	4313      	orrs	r3, r2
 80011d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011d4:	f7ff fcea 	bl	8000bac <HAL_GetTick>
 80011d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011da:	e00a      	b.n	80011f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011dc:	f7ff fce6 	bl	8000bac <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e04f      	b.n	8001292 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f2:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 020c 	and.w	r2, r3, #12
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	429a      	cmp	r2, r3
 8001202:	d1eb      	bne.n	80011dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001204:	4b25      	ldr	r3, [pc, #148]	; (800129c <HAL_RCC_ClockConfig+0x1b8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 030f 	and.w	r3, r3, #15
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d20c      	bcs.n	800122c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001212:	4b22      	ldr	r3, [pc, #136]	; (800129c <HAL_RCC_ClockConfig+0x1b8>)
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <HAL_RCC_ClockConfig+0x1b8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d001      	beq.n	800122c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e032      	b.n	8001292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	d008      	beq.n	800124a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	4916      	ldr	r1, [pc, #88]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	4313      	orrs	r3, r2
 8001248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d009      	beq.n	800126a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	490e      	ldr	r1, [pc, #56]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	4313      	orrs	r3, r2
 8001268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800126a:	f000 f887 	bl	800137c <HAL_RCC_GetSysClockFreq>
 800126e:	4602      	mov	r2, r0
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	490a      	ldr	r1, [pc, #40]	; (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	5ccb      	ldrb	r3, [r1, r3]
 800127e:	fa22 f303 	lsr.w	r3, r2, r3
 8001282:	4a09      	ldr	r2, [pc, #36]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_RCC_ClockConfig+0x1c8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fb30 	bl	80008f0 <HAL_InitTick>

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023c00 	.word	0x40023c00
 80012a0:	40023800 	.word	0x40023800
 80012a4:	0800519c 	.word	0x0800519c
 80012a8:	20000000 	.word	0x20000000
 80012ac:	20000004 	.word	0x20000004

080012b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000000 	.word	0x20000000

080012c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012cc:	f7ff fff0 	bl	80012b0 <HAL_RCC_GetHCLKFreq>
 80012d0:	4602      	mov	r2, r0
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	0a9b      	lsrs	r3, r3, #10
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	4903      	ldr	r1, [pc, #12]	; (80012ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80012de:	5ccb      	ldrb	r3, [r1, r3]
 80012e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	080051ac 	.word	0x080051ac

080012f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012f4:	f7ff ffdc 	bl	80012b0 <HAL_RCC_GetHCLKFreq>
 80012f8:	4602      	mov	r2, r0
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	0b5b      	lsrs	r3, r3, #13
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	4903      	ldr	r1, [pc, #12]	; (8001314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001306:	5ccb      	ldrb	r3, [r1, r3]
 8001308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800130c:	4618      	mov	r0, r3
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	080051ac 	.word	0x080051ac

08001318 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	220f      	movs	r2, #15
 8001326:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_RCC_GetClockConfig+0x5c>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 0203 	and.w	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_RCC_GetClockConfig+0x5c>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_RCC_GetClockConfig+0x5c>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_RCC_GetClockConfig+0x5c>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	08db      	lsrs	r3, r3, #3
 8001352:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <HAL_RCC_GetClockConfig+0x60>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 020f 	and.w	r2, r3, #15
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	601a      	str	r2, [r3, #0]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40023c00 	.word	0x40023c00

0800137c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800137c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001380:	b0ae      	sub	sp, #184	; 0xb8
 8001382:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a2:	4bcb      	ldr	r3, [pc, #812]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b0c      	cmp	r3, #12
 80013ac:	f200 8206 	bhi.w	80017bc <HAL_RCC_GetSysClockFreq+0x440>
 80013b0:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b6:	bf00      	nop
 80013b8:	080013ed 	.word	0x080013ed
 80013bc:	080017bd 	.word	0x080017bd
 80013c0:	080017bd 	.word	0x080017bd
 80013c4:	080017bd 	.word	0x080017bd
 80013c8:	080013f5 	.word	0x080013f5
 80013cc:	080017bd 	.word	0x080017bd
 80013d0:	080017bd 	.word	0x080017bd
 80013d4:	080017bd 	.word	0x080017bd
 80013d8:	080013fd 	.word	0x080013fd
 80013dc:	080017bd 	.word	0x080017bd
 80013e0:	080017bd 	.word	0x080017bd
 80013e4:	080017bd 	.word	0x080017bd
 80013e8:	080015ed 	.word	0x080015ed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013ec:	4bb9      	ldr	r3, [pc, #740]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80013ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80013f2:	e1e7      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013f4:	4bb8      	ldr	r3, [pc, #736]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80013fa:	e1e3      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013fc:	4bb4      	ldr	r3, [pc, #720]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001408:	4bb1      	ldr	r3, [pc, #708]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x354>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d071      	beq.n	80014f8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001414:	4bae      	ldr	r3, [pc, #696]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	099b      	lsrs	r3, r3, #6
 800141a:	2200      	movs	r2, #0
 800141c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001420:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800142c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001436:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800143a:	4622      	mov	r2, r4
 800143c:	462b      	mov	r3, r5
 800143e:	f04f 0000 	mov.w	r0, #0
 8001442:	f04f 0100 	mov.w	r1, #0
 8001446:	0159      	lsls	r1, r3, #5
 8001448:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800144c:	0150      	lsls	r0, r2, #5
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4621      	mov	r1, r4
 8001454:	1a51      	subs	r1, r2, r1
 8001456:	6439      	str	r1, [r7, #64]	; 0x40
 8001458:	4629      	mov	r1, r5
 800145a:	eb63 0301 	sbc.w	r3, r3, r1
 800145e:	647b      	str	r3, [r7, #68]	; 0x44
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800146c:	4649      	mov	r1, r9
 800146e:	018b      	lsls	r3, r1, #6
 8001470:	4641      	mov	r1, r8
 8001472:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001476:	4641      	mov	r1, r8
 8001478:	018a      	lsls	r2, r1, #6
 800147a:	4641      	mov	r1, r8
 800147c:	1a51      	subs	r1, r2, r1
 800147e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001480:	4649      	mov	r1, r9
 8001482:	eb63 0301 	sbc.w	r3, r3, r1
 8001486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001494:	4649      	mov	r1, r9
 8001496:	00cb      	lsls	r3, r1, #3
 8001498:	4641      	mov	r1, r8
 800149a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800149e:	4641      	mov	r1, r8
 80014a0:	00ca      	lsls	r2, r1, #3
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	4603      	mov	r3, r0
 80014a8:	4622      	mov	r2, r4
 80014aa:	189b      	adds	r3, r3, r2
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
 80014ae:	462b      	mov	r3, r5
 80014b0:	460a      	mov	r2, r1
 80014b2:	eb42 0303 	adc.w	r3, r2, r3
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014c4:	4629      	mov	r1, r5
 80014c6:	024b      	lsls	r3, r1, #9
 80014c8:	4621      	mov	r1, r4
 80014ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014ce:	4621      	mov	r1, r4
 80014d0:	024a      	lsls	r2, r1, #9
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014da:	2200      	movs	r2, #0
 80014dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014e4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80014e8:	f7fe fe92 	bl	8000210 <__aeabi_uldivmod>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4613      	mov	r3, r2
 80014f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014f6:	e067      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f8:	4b75      	ldr	r3, [pc, #468]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	099b      	lsrs	r3, r3, #6
 80014fe:	2200      	movs	r2, #0
 8001500:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001504:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001508:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800150c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001510:	67bb      	str	r3, [r7, #120]	; 0x78
 8001512:	2300      	movs	r3, #0
 8001514:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001516:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800151a:	4622      	mov	r2, r4
 800151c:	462b      	mov	r3, r5
 800151e:	f04f 0000 	mov.w	r0, #0
 8001522:	f04f 0100 	mov.w	r1, #0
 8001526:	0159      	lsls	r1, r3, #5
 8001528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800152c:	0150      	lsls	r0, r2, #5
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4621      	mov	r1, r4
 8001534:	1a51      	subs	r1, r2, r1
 8001536:	62b9      	str	r1, [r7, #40]	; 0x28
 8001538:	4629      	mov	r1, r5
 800153a:	eb63 0301 	sbc.w	r3, r3, r1
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800154c:	4649      	mov	r1, r9
 800154e:	018b      	lsls	r3, r1, #6
 8001550:	4641      	mov	r1, r8
 8001552:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001556:	4641      	mov	r1, r8
 8001558:	018a      	lsls	r2, r1, #6
 800155a:	4641      	mov	r1, r8
 800155c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001560:	4649      	mov	r1, r9
 8001562:	eb63 0b01 	sbc.w	fp, r3, r1
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001572:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001576:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800157a:	4692      	mov	sl, r2
 800157c:	469b      	mov	fp, r3
 800157e:	4623      	mov	r3, r4
 8001580:	eb1a 0303 	adds.w	r3, sl, r3
 8001584:	623b      	str	r3, [r7, #32]
 8001586:	462b      	mov	r3, r5
 8001588:	eb4b 0303 	adc.w	r3, fp, r3
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800159a:	4629      	mov	r1, r5
 800159c:	028b      	lsls	r3, r1, #10
 800159e:	4621      	mov	r1, r4
 80015a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015a4:	4621      	mov	r1, r4
 80015a6:	028a      	lsls	r2, r1, #10
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015b0:	2200      	movs	r2, #0
 80015b2:	673b      	str	r3, [r7, #112]	; 0x70
 80015b4:	677a      	str	r2, [r7, #116]	; 0x74
 80015b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015ba:	f7fe fe29 	bl	8000210 <__aeabi_uldivmod>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4613      	mov	r3, r2
 80015c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015c8:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	0c1b      	lsrs	r3, r3, #16
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	3301      	adds	r3, #1
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80015da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80015de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015ea:	e0eb      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ec:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015f8:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d06b      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001604:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	2200      	movs	r2, #0
 800160c:	66bb      	str	r3, [r7, #104]	; 0x68
 800160e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001616:	663b      	str	r3, [r7, #96]	; 0x60
 8001618:	2300      	movs	r3, #0
 800161a:	667b      	str	r3, [r7, #100]	; 0x64
 800161c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001620:	4622      	mov	r2, r4
 8001622:	462b      	mov	r3, r5
 8001624:	f04f 0000 	mov.w	r0, #0
 8001628:	f04f 0100 	mov.w	r1, #0
 800162c:	0159      	lsls	r1, r3, #5
 800162e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001632:	0150      	lsls	r0, r2, #5
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4621      	mov	r1, r4
 800163a:	1a51      	subs	r1, r2, r1
 800163c:	61b9      	str	r1, [r7, #24]
 800163e:	4629      	mov	r1, r5
 8001640:	eb63 0301 	sbc.w	r3, r3, r1
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001652:	4659      	mov	r1, fp
 8001654:	018b      	lsls	r3, r1, #6
 8001656:	4651      	mov	r1, sl
 8001658:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800165c:	4651      	mov	r1, sl
 800165e:	018a      	lsls	r2, r1, #6
 8001660:	4651      	mov	r1, sl
 8001662:	ebb2 0801 	subs.w	r8, r2, r1
 8001666:	4659      	mov	r1, fp
 8001668:	eb63 0901 	sbc.w	r9, r3, r1
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001678:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800167c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001680:	4690      	mov	r8, r2
 8001682:	4699      	mov	r9, r3
 8001684:	4623      	mov	r3, r4
 8001686:	eb18 0303 	adds.w	r3, r8, r3
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	462b      	mov	r3, r5
 800168e:	eb49 0303 	adc.w	r3, r9, r3
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016a0:	4629      	mov	r1, r5
 80016a2:	024b      	lsls	r3, r1, #9
 80016a4:	4621      	mov	r1, r4
 80016a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016aa:	4621      	mov	r1, r4
 80016ac:	024a      	lsls	r2, r1, #9
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016b6:	2200      	movs	r2, #0
 80016b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80016ba:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016c0:	f7fe fda6 	bl	8000210 <__aeabi_uldivmod>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4613      	mov	r3, r2
 80016ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016ce:	e065      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x420>
 80016d0:	40023800 	.word	0x40023800
 80016d4:	00f42400 	.word	0x00f42400
 80016d8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016dc:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x458>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	099b      	lsrs	r3, r3, #6
 80016e2:	2200      	movs	r2, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	4611      	mov	r1, r2
 80016e8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016ec:	653b      	str	r3, [r7, #80]	; 0x50
 80016ee:	2300      	movs	r3, #0
 80016f0:	657b      	str	r3, [r7, #84]	; 0x54
 80016f2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80016f6:	4642      	mov	r2, r8
 80016f8:	464b      	mov	r3, r9
 80016fa:	f04f 0000 	mov.w	r0, #0
 80016fe:	f04f 0100 	mov.w	r1, #0
 8001702:	0159      	lsls	r1, r3, #5
 8001704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001708:	0150      	lsls	r0, r2, #5
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4641      	mov	r1, r8
 8001710:	1a51      	subs	r1, r2, r1
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	4649      	mov	r1, r9
 8001716:	eb63 0301 	sbc.w	r3, r3, r1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001728:	4659      	mov	r1, fp
 800172a:	018b      	lsls	r3, r1, #6
 800172c:	4651      	mov	r1, sl
 800172e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001732:	4651      	mov	r1, sl
 8001734:	018a      	lsls	r2, r1, #6
 8001736:	4651      	mov	r1, sl
 8001738:	1a54      	subs	r4, r2, r1
 800173a:	4659      	mov	r1, fp
 800173c:	eb63 0501 	sbc.w	r5, r3, r1
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	00eb      	lsls	r3, r5, #3
 800174a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800174e:	00e2      	lsls	r2, r4, #3
 8001750:	4614      	mov	r4, r2
 8001752:	461d      	mov	r5, r3
 8001754:	4643      	mov	r3, r8
 8001756:	18e3      	adds	r3, r4, r3
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	464b      	mov	r3, r9
 800175c:	eb45 0303 	adc.w	r3, r5, r3
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800176e:	4629      	mov	r1, r5
 8001770:	028b      	lsls	r3, r1, #10
 8001772:	4621      	mov	r1, r4
 8001774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001778:	4621      	mov	r1, r4
 800177a:	028a      	lsls	r2, r1, #10
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001784:	2200      	movs	r2, #0
 8001786:	64bb      	str	r3, [r7, #72]	; 0x48
 8001788:	64fa      	str	r2, [r7, #76]	; 0x4c
 800178a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800178e:	f7fe fd3f 	bl	8000210 <__aeabi_uldivmod>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4613      	mov	r3, r2
 8001798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x458>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	0f1b      	lsrs	r3, r3, #28
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80017aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017ba:	e003      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80017be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	37b8      	adds	r7, #184	; 0xb8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	00f42400 	.word	0x00f42400

080017dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e28d      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8083 	beq.w	8001902 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017fc:	4b94      	ldr	r3, [pc, #592]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b04      	cmp	r3, #4
 8001806:	d019      	beq.n	800183c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001808:	4b91      	ldr	r3, [pc, #580]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001810:	2b08      	cmp	r3, #8
 8001812:	d106      	bne.n	8001822 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001814:	4b8e      	ldr	r3, [pc, #568]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001820:	d00c      	beq.n	800183c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001822:	4b8b      	ldr	r3, [pc, #556]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800182a:	2b0c      	cmp	r3, #12
 800182c:	d112      	bne.n	8001854 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800182e:	4b88      	ldr	r3, [pc, #544]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800183a:	d10b      	bne.n	8001854 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183c:	4b84      	ldr	r3, [pc, #528]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d05b      	beq.n	8001900 <HAL_RCC_OscConfig+0x124>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d157      	bne.n	8001900 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e25a      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185c:	d106      	bne.n	800186c <HAL_RCC_OscConfig+0x90>
 800185e:	4b7c      	ldr	r3, [pc, #496]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a7b      	ldr	r2, [pc, #492]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e01d      	b.n	80018a8 <HAL_RCC_OscConfig+0xcc>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0xb4>
 8001876:	4b76      	ldr	r3, [pc, #472]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a75      	ldr	r2, [pc, #468]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 800187c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b73      	ldr	r3, [pc, #460]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a72      	ldr	r2, [pc, #456]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e00b      	b.n	80018a8 <HAL_RCC_OscConfig+0xcc>
 8001890:	4b6f      	ldr	r3, [pc, #444]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a6e      	ldr	r2, [pc, #440]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b6c      	ldr	r3, [pc, #432]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a6b      	ldr	r2, [pc, #428]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d013      	beq.n	80018d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff f97c 	bl	8000bac <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b8:	f7ff f978 	bl	8000bac <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	; 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e21f      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0xdc>
 80018d6:	e014      	b.n	8001902 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff f968 	bl	8000bac <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff f964 	bl	8000bac <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e20b      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f2:	4b57      	ldr	r3, [pc, #348]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x104>
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d06f      	beq.n	80019ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800190e:	4b50      	ldr	r3, [pc, #320]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b00      	cmp	r3, #0
 8001918:	d017      	beq.n	800194a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800191a:	4b4d      	ldr	r3, [pc, #308]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001922:	2b08      	cmp	r3, #8
 8001924:	d105      	bne.n	8001932 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800193a:	2b0c      	cmp	r3, #12
 800193c:	d11c      	bne.n	8001978 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193e:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d116      	bne.n	8001978 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_RCC_OscConfig+0x186>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d001      	beq.n	8001962 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e1d3      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4937      	ldr	r1, [pc, #220]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	e03a      	b.n	80019ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d020      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001980:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <HAL_RCC_OscConfig+0x278>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7ff f911 	bl	8000bac <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800198e:	f7ff f90d 	bl	8000bac <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1b4      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ac:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4925      	ldr	r1, [pc, #148]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
 80019c0:	e015      	b.n	80019ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_RCC_OscConfig+0x278>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff f8f0 	bl	8000bac <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d0:	f7ff f8ec 	bl	8000bac <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e193      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d036      	beq.n	8001a68 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d016      	beq.n	8001a30 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_RCC_OscConfig+0x27c>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f7ff f8d0 	bl	8000bac <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a10:	f7ff f8cc 	bl	8000bac <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e173      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x234>
 8001a2e:	e01b      	b.n	8001a68 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_RCC_OscConfig+0x27c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a36:	f7ff f8b9 	bl	8000bac <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3c:	e00e      	b.n	8001a5c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3e:	f7ff f8b5 	bl	8000bac <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d907      	bls.n	8001a5c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e15c      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	42470000 	.word	0x42470000
 8001a58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5c:	4b8a      	ldr	r3, [pc, #552]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1ea      	bne.n	8001a3e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 8097 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7a:	4b83      	ldr	r3, [pc, #524]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10f      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	4b7f      	ldr	r3, [pc, #508]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a7e      	ldr	r2, [pc, #504]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
 8001a96:	4b7c      	ldr	r3, [pc, #496]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa6:	4b79      	ldr	r3, [pc, #484]	; (8001c8c <HAL_RCC_OscConfig+0x4b0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d118      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab2:	4b76      	ldr	r3, [pc, #472]	; (8001c8c <HAL_RCC_OscConfig+0x4b0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a75      	ldr	r2, [pc, #468]	; (8001c8c <HAL_RCC_OscConfig+0x4b0>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001abe:	f7ff f875 	bl	8000bac <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac6:	f7ff f871 	bl	8000bac <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e118      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	4b6c      	ldr	r3, [pc, #432]	; (8001c8c <HAL_RCC_OscConfig+0x4b0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x31e>
 8001aec:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	4a65      	ldr	r2, [pc, #404]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6713      	str	r3, [r2, #112]	; 0x70
 8001af8:	e01c      	b.n	8001b34 <HAL_RCC_OscConfig+0x358>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b05      	cmp	r3, #5
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x340>
 8001b02:	4b61      	ldr	r3, [pc, #388]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b06:	4a60      	ldr	r2, [pc, #384]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0e:	4b5e      	ldr	r3, [pc, #376]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b12:	4a5d      	ldr	r2, [pc, #372]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0x358>
 8001b1c:	4b5a      	ldr	r3, [pc, #360]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	4a59      	ldr	r2, [pc, #356]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b22:	f023 0301 	bic.w	r3, r3, #1
 8001b26:	6713      	str	r3, [r2, #112]	; 0x70
 8001b28:	4b57      	ldr	r3, [pc, #348]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	4a56      	ldr	r2, [pc, #344]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b2e:	f023 0304 	bic.w	r3, r3, #4
 8001b32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d015      	beq.n	8001b68 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f836 	bl	8000bac <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff f832 	bl	8000bac <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e0d7      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5a:	4b4b      	ldr	r3, [pc, #300]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0ee      	beq.n	8001b44 <HAL_RCC_OscConfig+0x368>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7ff f820 	bl	8000bac <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b70:	f7ff f81c 	bl	8000bac <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e0c1      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b86:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1ee      	bne.n	8001b70 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	4b3b      	ldr	r3, [pc, #236]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	4a3a      	ldr	r2, [pc, #232]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80ad 	beq.w	8001d08 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bae:	4b36      	ldr	r3, [pc, #216]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d060      	beq.n	8001c7c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d145      	bne.n	8001c4e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc2:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <HAL_RCC_OscConfig+0x4b4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7fe fff0 	bl	8000bac <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7fe ffec 	bl	8000bac <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e093      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be2:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	019b      	lsls	r3, r3, #6
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	3b01      	subs	r3, #1
 8001c08:	041b      	lsls	r3, r3, #16
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	071b      	lsls	r3, r3, #28
 8001c1a:	491b      	ldr	r1, [pc, #108]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <HAL_RCC_OscConfig+0x4b4>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7fe ffc1 	bl	8000bac <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7fe ffbd 	bl	8000bac <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e064      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x452>
 8001c4c:	e05c      	b.n	8001d08 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <HAL_RCC_OscConfig+0x4b4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7fe ffaa 	bl	8000bac <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7fe ffa6 	bl	8000bac <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e04d      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x480>
 8001c7a:	e045      	b.n	8001d08 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e040      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <HAL_RCC_OscConfig+0x538>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d030      	beq.n	8001d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d129      	bne.n	8001d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d122      	bne.n	8001d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d119      	bne.n	8001d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	085b      	lsrs	r3, r3, #1
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d10f      	bne.n	8001d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800

08001d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e041      	b.n	8001dae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d106      	bne.n	8001d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f839 	bl	8001db6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3304      	adds	r3, #4
 8001d54:	4619      	mov	r1, r3
 8001d56:	4610      	mov	r0, r2
 8001d58:	f000 f9d8 	bl	800210c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d001      	beq.n	8001de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e04e      	b.n	8001e82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d022      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0e:	d01d      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d018      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1e      	ldr	r2, [pc, #120]	; (8001e98 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d013      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <HAL_TIM_Base_Start_IT+0xd0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00e      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d009      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d004      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d111      	bne.n	8001e70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d010      	beq.n	8001e80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0201 	orr.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6e:	e007      	b.n	8001e80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40010000 	.word	0x40010000
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40000800 	.word	0x40000800
 8001e9c:	40000c00 	.word	0x40000c00
 8001ea0:	40010400 	.word	0x40010400
 8001ea4:	40014000 	.word	0x40014000
 8001ea8:	40001800 	.word	0x40001800

08001eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d122      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d11b      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0202 	mvn.w	r2, #2
 8001ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f8ee 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8001ef4:	e005      	b.n	8001f02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8e0 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f8f1 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d122      	bne.n	8001f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d11b      	bne.n	8001f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0204 	mvn.w	r2, #4
 8001f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8c4 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8b6 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f8c7 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d122      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d11b      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0208 	mvn.w	r2, #8
 8001f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2204      	movs	r2, #4
 8001f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f89a 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f88c 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f89d 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b10      	cmp	r3, #16
 8001fbc:	d122      	bne.n	8002004 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d11b      	bne.n	8002004 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0210 	mvn.w	r2, #16
 8001fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2208      	movs	r2, #8
 8001fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f870 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8001ff0:	e005      	b.n	8001ffe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f862 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f873 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b01      	cmp	r3, #1
 8002010:	d10e      	bne.n	8002030 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d107      	bne.n	8002030 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0201 	mvn.w	r2, #1
 8002028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe fbd4 	bl	80007d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203a:	2b80      	cmp	r3, #128	; 0x80
 800203c:	d10e      	bne.n	800205c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002048:	2b80      	cmp	r3, #128	; 0x80
 800204a:	d107      	bne.n	800205c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f902 	bl	8002260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002066:	2b40      	cmp	r3, #64	; 0x40
 8002068:	d10e      	bne.n	8002088 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002074:	2b40      	cmp	r3, #64	; 0x40
 8002076:	d107      	bne.n	8002088 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f838 	bl	80020f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b20      	cmp	r3, #32
 8002094:	d10e      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d107      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0220 	mvn.w	r2, #32
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f8cc 	bl	800224c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a40      	ldr	r2, [pc, #256]	; (8002220 <TIM_Base_SetConfig+0x114>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d013      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800212a:	d00f      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a3d      	ldr	r2, [pc, #244]	; (8002224 <TIM_Base_SetConfig+0x118>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00b      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3c      	ldr	r2, [pc, #240]	; (8002228 <TIM_Base_SetConfig+0x11c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d007      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a3b      	ldr	r2, [pc, #236]	; (800222c <TIM_Base_SetConfig+0x120>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d003      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3a      	ldr	r2, [pc, #232]	; (8002230 <TIM_Base_SetConfig+0x124>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d108      	bne.n	800215e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2f      	ldr	r2, [pc, #188]	; (8002220 <TIM_Base_SetConfig+0x114>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d02b      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216c:	d027      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2c      	ldr	r2, [pc, #176]	; (8002224 <TIM_Base_SetConfig+0x118>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d023      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a2b      	ldr	r2, [pc, #172]	; (8002228 <TIM_Base_SetConfig+0x11c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2a      	ldr	r2, [pc, #168]	; (800222c <TIM_Base_SetConfig+0x120>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d01b      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a29      	ldr	r2, [pc, #164]	; (8002230 <TIM_Base_SetConfig+0x124>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d017      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a28      	ldr	r2, [pc, #160]	; (8002234 <TIM_Base_SetConfig+0x128>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a27      	ldr	r2, [pc, #156]	; (8002238 <TIM_Base_SetConfig+0x12c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00f      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a26      	ldr	r2, [pc, #152]	; (800223c <TIM_Base_SetConfig+0x130>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00b      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a25      	ldr	r2, [pc, #148]	; (8002240 <TIM_Base_SetConfig+0x134>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a24      	ldr	r2, [pc, #144]	; (8002244 <TIM_Base_SetConfig+0x138>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d003      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a23      	ldr	r2, [pc, #140]	; (8002248 <TIM_Base_SetConfig+0x13c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d108      	bne.n	80021d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <TIM_Base_SetConfig+0x114>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d003      	beq.n	8002204 <TIM_Base_SetConfig+0xf8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <TIM_Base_SetConfig+0x124>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d103      	bne.n	800220c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	615a      	str	r2, [r3, #20]
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40010000 	.word	0x40010000
 8002224:	40000400 	.word	0x40000400
 8002228:	40000800 	.word	0x40000800
 800222c:	40000c00 	.word	0x40000c00
 8002230:	40010400 	.word	0x40010400
 8002234:	40014000 	.word	0x40014000
 8002238:	40014400 	.word	0x40014400
 800223c:	40014800 	.word	0x40014800
 8002240:	40001800 	.word	0x40001800
 8002244:	40001c00 	.word	0x40001c00
 8002248:	40002000 	.word	0x40002000

0800224c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e03f      	b.n	8002306 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7fe fae0 	bl	8000860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2224      	movs	r2, #36	; 0x24
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f829 	bl	8002310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002314:	b0c0      	sub	sp, #256	; 0x100
 8002316:	af00      	add	r7, sp, #0
 8002318:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232c:	68d9      	ldr	r1, [r3, #12]
 800232e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	ea40 0301 	orr.w	r3, r0, r1
 8002338:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800233a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	431a      	orrs	r2, r3
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	431a      	orrs	r2, r3
 8002350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002368:	f021 010c 	bic.w	r1, r1, #12
 800236c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002376:	430b      	orrs	r3, r1
 8002378:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800237a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800238a:	6999      	ldr	r1, [r3, #24]
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	ea40 0301 	orr.w	r3, r0, r1
 8002396:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	4b8f      	ldr	r3, [pc, #572]	; (80025dc <UART_SetConfig+0x2cc>)
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d005      	beq.n	80023b0 <UART_SetConfig+0xa0>
 80023a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4b8d      	ldr	r3, [pc, #564]	; (80025e0 <UART_SetConfig+0x2d0>)
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d104      	bne.n	80023ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023b0:	f7fe ff9e 	bl	80012f0 <HAL_RCC_GetPCLK2Freq>
 80023b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023b8:	e003      	b.n	80023c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023ba:	f7fe ff85 	bl	80012c8 <HAL_RCC_GetPCLK1Freq>
 80023be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023cc:	f040 810c 	bne.w	80025e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023d4:	2200      	movs	r2, #0
 80023d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80023da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80023de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80023e2:	4622      	mov	r2, r4
 80023e4:	462b      	mov	r3, r5
 80023e6:	1891      	adds	r1, r2, r2
 80023e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80023ea:	415b      	adcs	r3, r3
 80023ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023f2:	4621      	mov	r1, r4
 80023f4:	eb12 0801 	adds.w	r8, r2, r1
 80023f8:	4629      	mov	r1, r5
 80023fa:	eb43 0901 	adc.w	r9, r3, r1
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800240a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800240e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002412:	4690      	mov	r8, r2
 8002414:	4699      	mov	r9, r3
 8002416:	4623      	mov	r3, r4
 8002418:	eb18 0303 	adds.w	r3, r8, r3
 800241c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002420:	462b      	mov	r3, r5
 8002422:	eb49 0303 	adc.w	r3, r9, r3
 8002426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800242a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002436:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800243a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800243e:	460b      	mov	r3, r1
 8002440:	18db      	adds	r3, r3, r3
 8002442:	653b      	str	r3, [r7, #80]	; 0x50
 8002444:	4613      	mov	r3, r2
 8002446:	eb42 0303 	adc.w	r3, r2, r3
 800244a:	657b      	str	r3, [r7, #84]	; 0x54
 800244c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002450:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002454:	f7fd fedc 	bl	8000210 <__aeabi_uldivmod>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <UART_SetConfig+0x2d4>)
 800245e:	fba3 2302 	umull	r2, r3, r3, r2
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	011c      	lsls	r4, r3, #4
 8002466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800246a:	2200      	movs	r2, #0
 800246c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002470:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002474:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002478:	4642      	mov	r2, r8
 800247a:	464b      	mov	r3, r9
 800247c:	1891      	adds	r1, r2, r2
 800247e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002480:	415b      	adcs	r3, r3
 8002482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002484:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002488:	4641      	mov	r1, r8
 800248a:	eb12 0a01 	adds.w	sl, r2, r1
 800248e:	4649      	mov	r1, r9
 8002490:	eb43 0b01 	adc.w	fp, r3, r1
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024a8:	4692      	mov	sl, r2
 80024aa:	469b      	mov	fp, r3
 80024ac:	4643      	mov	r3, r8
 80024ae:	eb1a 0303 	adds.w	r3, sl, r3
 80024b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024b6:	464b      	mov	r3, r9
 80024b8:	eb4b 0303 	adc.w	r3, fp, r3
 80024bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80024d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80024d4:	460b      	mov	r3, r1
 80024d6:	18db      	adds	r3, r3, r3
 80024d8:	643b      	str	r3, [r7, #64]	; 0x40
 80024da:	4613      	mov	r3, r2
 80024dc:	eb42 0303 	adc.w	r3, r2, r3
 80024e0:	647b      	str	r3, [r7, #68]	; 0x44
 80024e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80024ea:	f7fd fe91 	bl	8000210 <__aeabi_uldivmod>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4611      	mov	r1, r2
 80024f4:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <UART_SetConfig+0x2d4>)
 80024f6:	fba3 2301 	umull	r2, r3, r3, r1
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2264      	movs	r2, #100	; 0x64
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	1acb      	subs	r3, r1, r3
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <UART_SetConfig+0x2d4>)
 800250c:	fba3 2302 	umull	r2, r3, r3, r2
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002518:	441c      	add	r4, r3
 800251a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800251e:	2200      	movs	r2, #0
 8002520:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002524:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002528:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800252c:	4642      	mov	r2, r8
 800252e:	464b      	mov	r3, r9
 8002530:	1891      	adds	r1, r2, r2
 8002532:	63b9      	str	r1, [r7, #56]	; 0x38
 8002534:	415b      	adcs	r3, r3
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800253c:	4641      	mov	r1, r8
 800253e:	1851      	adds	r1, r2, r1
 8002540:	6339      	str	r1, [r7, #48]	; 0x30
 8002542:	4649      	mov	r1, r9
 8002544:	414b      	adcs	r3, r1
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002554:	4659      	mov	r1, fp
 8002556:	00cb      	lsls	r3, r1, #3
 8002558:	4651      	mov	r1, sl
 800255a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800255e:	4651      	mov	r1, sl
 8002560:	00ca      	lsls	r2, r1, #3
 8002562:	4610      	mov	r0, r2
 8002564:	4619      	mov	r1, r3
 8002566:	4603      	mov	r3, r0
 8002568:	4642      	mov	r2, r8
 800256a:	189b      	adds	r3, r3, r2
 800256c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002570:	464b      	mov	r3, r9
 8002572:	460a      	mov	r2, r1
 8002574:	eb42 0303 	adc.w	r3, r2, r3
 8002578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800257c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002588:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800258c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002590:	460b      	mov	r3, r1
 8002592:	18db      	adds	r3, r3, r3
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
 8002596:	4613      	mov	r3, r2
 8002598:	eb42 0303 	adc.w	r3, r2, r3
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800259e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025a6:	f7fd fe33 	bl	8000210 <__aeabi_uldivmod>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <UART_SetConfig+0x2d4>)
 80025b0:	fba3 1302 	umull	r1, r3, r3, r2
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	2164      	movs	r1, #100	; 0x64
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	3332      	adds	r3, #50	; 0x32
 80025c2:	4a08      	ldr	r2, [pc, #32]	; (80025e4 <UART_SetConfig+0x2d4>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	f003 0207 	and.w	r2, r3, #7
 80025ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4422      	add	r2, r4
 80025d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025d8:	e105      	b.n	80027e6 <UART_SetConfig+0x4d6>
 80025da:	bf00      	nop
 80025dc:	40011000 	.word	0x40011000
 80025e0:	40011400 	.word	0x40011400
 80025e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025ec:	2200      	movs	r2, #0
 80025ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80025fa:	4642      	mov	r2, r8
 80025fc:	464b      	mov	r3, r9
 80025fe:	1891      	adds	r1, r2, r2
 8002600:	6239      	str	r1, [r7, #32]
 8002602:	415b      	adcs	r3, r3
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
 8002606:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800260a:	4641      	mov	r1, r8
 800260c:	1854      	adds	r4, r2, r1
 800260e:	4649      	mov	r1, r9
 8002610:	eb43 0501 	adc.w	r5, r3, r1
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	00eb      	lsls	r3, r5, #3
 800261e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002622:	00e2      	lsls	r2, r4, #3
 8002624:	4614      	mov	r4, r2
 8002626:	461d      	mov	r5, r3
 8002628:	4643      	mov	r3, r8
 800262a:	18e3      	adds	r3, r4, r3
 800262c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002630:	464b      	mov	r3, r9
 8002632:	eb45 0303 	adc.w	r3, r5, r3
 8002636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800263a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002646:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002656:	4629      	mov	r1, r5
 8002658:	008b      	lsls	r3, r1, #2
 800265a:	4621      	mov	r1, r4
 800265c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002660:	4621      	mov	r1, r4
 8002662:	008a      	lsls	r2, r1, #2
 8002664:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002668:	f7fd fdd2 	bl	8000210 <__aeabi_uldivmod>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4b60      	ldr	r3, [pc, #384]	; (80027f4 <UART_SetConfig+0x4e4>)
 8002672:	fba3 2302 	umull	r2, r3, r3, r2
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	011c      	lsls	r4, r3, #4
 800267a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800267e:	2200      	movs	r2, #0
 8002680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002684:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002688:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800268c:	4642      	mov	r2, r8
 800268e:	464b      	mov	r3, r9
 8002690:	1891      	adds	r1, r2, r2
 8002692:	61b9      	str	r1, [r7, #24]
 8002694:	415b      	adcs	r3, r3
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269c:	4641      	mov	r1, r8
 800269e:	1851      	adds	r1, r2, r1
 80026a0:	6139      	str	r1, [r7, #16]
 80026a2:	4649      	mov	r1, r9
 80026a4:	414b      	adcs	r3, r1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026b4:	4659      	mov	r1, fp
 80026b6:	00cb      	lsls	r3, r1, #3
 80026b8:	4651      	mov	r1, sl
 80026ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026be:	4651      	mov	r1, sl
 80026c0:	00ca      	lsls	r2, r1, #3
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	4603      	mov	r3, r0
 80026c8:	4642      	mov	r2, r8
 80026ca:	189b      	adds	r3, r3, r2
 80026cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026d0:	464b      	mov	r3, r9
 80026d2:	460a      	mov	r2, r1
 80026d4:	eb42 0303 	adc.w	r3, r2, r3
 80026d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80026e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026f4:	4649      	mov	r1, r9
 80026f6:	008b      	lsls	r3, r1, #2
 80026f8:	4641      	mov	r1, r8
 80026fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026fe:	4641      	mov	r1, r8
 8002700:	008a      	lsls	r2, r1, #2
 8002702:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002706:	f7fd fd83 	bl	8000210 <__aeabi_uldivmod>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <UART_SetConfig+0x4e4>)
 8002710:	fba3 1302 	umull	r1, r3, r3, r2
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	2164      	movs	r1, #100	; 0x64
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	3332      	adds	r3, #50	; 0x32
 8002722:	4a34      	ldr	r2, [pc, #208]	; (80027f4 <UART_SetConfig+0x4e4>)
 8002724:	fba2 2303 	umull	r2, r3, r2, r3
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800272e:	441c      	add	r4, r3
 8002730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002734:	2200      	movs	r2, #0
 8002736:	673b      	str	r3, [r7, #112]	; 0x70
 8002738:	677a      	str	r2, [r7, #116]	; 0x74
 800273a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800273e:	4642      	mov	r2, r8
 8002740:	464b      	mov	r3, r9
 8002742:	1891      	adds	r1, r2, r2
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	415b      	adcs	r3, r3
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800274e:	4641      	mov	r1, r8
 8002750:	1851      	adds	r1, r2, r1
 8002752:	6039      	str	r1, [r7, #0]
 8002754:	4649      	mov	r1, r9
 8002756:	414b      	adcs	r3, r1
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002766:	4659      	mov	r1, fp
 8002768:	00cb      	lsls	r3, r1, #3
 800276a:	4651      	mov	r1, sl
 800276c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002770:	4651      	mov	r1, sl
 8002772:	00ca      	lsls	r2, r1, #3
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	4603      	mov	r3, r0
 800277a:	4642      	mov	r2, r8
 800277c:	189b      	adds	r3, r3, r2
 800277e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002780:	464b      	mov	r3, r9
 8002782:	460a      	mov	r2, r1
 8002784:	eb42 0303 	adc.w	r3, r2, r3
 8002788:	66fb      	str	r3, [r7, #108]	; 0x6c
 800278a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	663b      	str	r3, [r7, #96]	; 0x60
 8002794:	667a      	str	r2, [r7, #100]	; 0x64
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027a2:	4649      	mov	r1, r9
 80027a4:	008b      	lsls	r3, r1, #2
 80027a6:	4641      	mov	r1, r8
 80027a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027ac:	4641      	mov	r1, r8
 80027ae:	008a      	lsls	r2, r1, #2
 80027b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027b4:	f7fd fd2c 	bl	8000210 <__aeabi_uldivmod>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <UART_SetConfig+0x4e4>)
 80027be:	fba3 1302 	umull	r1, r3, r3, r2
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	2164      	movs	r1, #100	; 0x64
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	3332      	adds	r3, #50	; 0x32
 80027d0:	4a08      	ldr	r2, [pc, #32]	; (80027f4 <UART_SetConfig+0x4e4>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	f003 020f 	and.w	r2, r3, #15
 80027dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4422      	add	r2, r4
 80027e4:	609a      	str	r2, [r3, #8]
}
 80027e6:	bf00      	nop
 80027e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80027ec:	46bd      	mov	sp, r7
 80027ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f2:	bf00      	nop
 80027f4:	51eb851f 	.word	0x51eb851f

080027f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <SysTick_Handler+0x1c>)
 80027fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002800:	f001 fc02 	bl	8004008 <xTaskGetSchedulerState>
 8002804:	4603      	mov	r3, r0
 8002806:	2b01      	cmp	r3, #1
 8002808:	d001      	beq.n	800280e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800280a:	f002 f9ed 	bl	8004be8 <xPortSysTickHandler>
  }
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	e000e010 	.word	0xe000e010

08002818 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4a07      	ldr	r2, [pc, #28]	; (8002844 <vApplicationGetIdleTaskMemory+0x2c>)
 8002828:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4a06      	ldr	r2, [pc, #24]	; (8002848 <vApplicationGetIdleTaskMemory+0x30>)
 800282e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	601a      	str	r2, [r3, #0]
}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	200000cc 	.word	0x200000cc
 8002848:	20000128 	.word	0x20000128

0800284c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4a07      	ldr	r2, [pc, #28]	; (8002878 <vApplicationGetTimerTaskMemory+0x2c>)
 800285c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	4a06      	ldr	r2, [pc, #24]	; (800287c <vApplicationGetTimerTaskMemory+0x30>)
 8002862:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800286a:	601a      	str	r2, [r3, #0]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	20000328 	.word	0x20000328
 800287c:	20000384 	.word	0x20000384

08002880 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f103 0208 	add.w	r2, r3, #8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f04f 32ff 	mov.w	r2, #4294967295
 8002898:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f103 0208 	add.w	r2, r3, #8
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f103 0208 	add.w	r2, r3, #8
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028da:	b480      	push	{r7}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	601a      	str	r2, [r3, #0]
}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d103      	bne.n	8002942 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	e00c      	b.n	800295c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3308      	adds	r3, #8
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	e002      	b.n	8002950 <vListInsert+0x2e>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	429a      	cmp	r2, r3
 800295a:	d2f6      	bcs.n	800294a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	601a      	str	r2, [r3, #0]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6892      	ldr	r2, [r2, #8]
 80029aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6852      	ldr	r2, [r2, #4]
 80029b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d103      	bne.n	80029c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	1e5a      	subs	r2, r3, #1
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a0e:	bf00      	nop
 8002a10:	e7fe      	b.n	8002a10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a12:	f002 f857 	bl	8004ac4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1e:	68f9      	ldr	r1, [r7, #12]
 8002a20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	441a      	add	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	3b01      	subs	r3, #1
 8002a44:	68f9      	ldr	r1, [r7, #12]
 8002a46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	441a      	add	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	22ff      	movs	r2, #255	; 0xff
 8002a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	22ff      	movs	r2, #255	; 0xff
 8002a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d114      	bne.n	8002a92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01a      	beq.n	8002aa6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3310      	adds	r3, #16
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 f909 	bl	8003c8c <xTaskRemoveFromEventList>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d012      	beq.n	8002aa6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <xQueueGenericReset+0xcc>)
 8002a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	e009      	b.n	8002aa6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3310      	adds	r3, #16
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fef2 	bl	8002880 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3324      	adds	r3, #36	; 0x24
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff feed 	bl	8002880 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002aa6:	f002 f83d 	bl	8004b24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002aaa:	2301      	movs	r3, #1
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	e000ed04 	.word	0xe000ed04

08002ab8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08e      	sub	sp, #56	; 0x38
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10a      	bne.n	8002ae2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ade:	bf00      	nop
 8002ae0:	e7fe      	b.n	8002ae0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aec:	f383 8811 	msr	BASEPRI, r3
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002afa:	bf00      	nop
 8002afc:	e7fe      	b.n	8002afc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <xQueueGenericCreateStatic+0x52>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <xQueueGenericCreateStatic+0x56>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <xQueueGenericCreateStatic+0x58>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	623b      	str	r3, [r7, #32]
}
 8002b26:	bf00      	nop
 8002b28:	e7fe      	b.n	8002b28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <xQueueGenericCreateStatic+0x7e>
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <xQueueGenericCreateStatic+0x82>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <xQueueGenericCreateStatic+0x84>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	61fb      	str	r3, [r7, #28]
}
 8002b52:	bf00      	nop
 8002b54:	e7fe      	b.n	8002b54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b56:	2350      	movs	r3, #80	; 0x50
 8002b58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b50      	cmp	r3, #80	; 0x50
 8002b5e:	d00a      	beq.n	8002b76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	61bb      	str	r3, [r7, #24]
}
 8002b72:	bf00      	nop
 8002b74:	e7fe      	b.n	8002b74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00d      	beq.n	8002b9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	4613      	mov	r3, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f83f 	bl	8002c1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3730      	adds	r7, #48	; 0x30
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	; 0x28
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10a      	bne.n	8002bd2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	613b      	str	r3, [r7, #16]
}
 8002bce:	bf00      	nop
 8002bd0:	e7fe      	b.n	8002bd0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	fb02 f303 	mul.w	r3, r2, r3
 8002bda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	3350      	adds	r3, #80	; 0x50
 8002be0:	4618      	mov	r0, r3
 8002be2:	f002 f891 	bl	8004d08 <pvPortMalloc>
 8002be6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d011      	beq.n	8002c12 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3350      	adds	r3, #80	; 0x50
 8002bf6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c00:	79fa      	ldrb	r2, [r7, #7]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	4613      	mov	r3, r2
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f805 	bl	8002c1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c12:	69bb      	ldr	r3, [r7, #24]
	}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d103      	bne.n	8002c38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	e002      	b.n	8002c3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	69b8      	ldr	r0, [r7, #24]
 8002c4e:	f7ff fecb 	bl	80029e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08e      	sub	sp, #56	; 0x38
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c72:	2300      	movs	r3, #0
 8002c74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <xQueueGenericSend+0x32>
	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c92:	bf00      	nop
 8002c94:	e7fe      	b.n	8002c94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d103      	bne.n	8002ca4 <xQueueGenericSend+0x40>
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <xQueueGenericSend+0x44>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <xQueueGenericSend+0x46>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10a      	bne.n	8002cc4 <xQueueGenericSend+0x60>
	__asm volatile
 8002cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb2:	f383 8811 	msr	BASEPRI, r3
 8002cb6:	f3bf 8f6f 	isb	sy
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cc0:	bf00      	nop
 8002cc2:	e7fe      	b.n	8002cc2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d103      	bne.n	8002cd2 <xQueueGenericSend+0x6e>
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <xQueueGenericSend+0x72>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <xQueueGenericSend+0x74>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	623b      	str	r3, [r7, #32]
}
 8002cee:	bf00      	nop
 8002cf0:	e7fe      	b.n	8002cf0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cf2:	f001 f989 	bl	8004008 <xTaskGetSchedulerState>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <xQueueGenericSend+0x9e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <xQueueGenericSend+0xa2>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <xQueueGenericSend+0xa4>
 8002d06:	2300      	movs	r3, #0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <xQueueGenericSend+0xbe>
	__asm volatile
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	61fb      	str	r3, [r7, #28]
}
 8002d1e:	bf00      	nop
 8002d20:	e7fe      	b.n	8002d20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d22:	f001 fecf 	bl	8004ac4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d302      	bcc.n	8002d38 <xQueueGenericSend+0xd4>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d129      	bne.n	8002d8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d3e:	f000 fa0b 	bl	8003158 <prvCopyDataToQueue>
 8002d42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d010      	beq.n	8002d6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	3324      	adds	r3, #36	; 0x24
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 ff9b 	bl	8003c8c <xTaskRemoveFromEventList>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d5c:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <xQueueGenericSend+0x1f8>)
 8002d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	e00a      	b.n	8002d84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d74:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <xQueueGenericSend+0x1f8>)
 8002d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d84:	f001 fece 	bl	8004b24 <vPortExitCritical>
				return pdPASS;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e063      	b.n	8002e54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d103      	bne.n	8002d9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d92:	f001 fec7 	bl	8004b24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e05c      	b.n	8002e54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d106      	bne.n	8002dae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 ffd5 	bl	8003d54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002daa:	2301      	movs	r3, #1
 8002dac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dae:	f001 feb9 	bl	8004b24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002db2:	f000 fd47 	bl	8003844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002db6:	f001 fe85 	bl	8004ac4 <vPortEnterCritical>
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dc0:	b25b      	sxtb	r3, r3
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc6:	d103      	bne.n	8002dd0 <xQueueGenericSend+0x16c>
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dd6:	b25b      	sxtb	r3, r3
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d103      	bne.n	8002de6 <xQueueGenericSend+0x182>
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002de6:	f001 fe9d 	bl	8004b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dea:	1d3a      	adds	r2, r7, #4
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 ffc4 	bl	8003d80 <xTaskCheckForTimeOut>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d124      	bne.n	8002e48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e00:	f000 faa2 	bl	8003348 <prvIsQueueFull>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d018      	beq.n	8002e3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	3310      	adds	r3, #16
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 feea 	bl	8003bec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e1a:	f000 fa2d 	bl	8003278 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e1e:	f000 fd1f 	bl	8003860 <xTaskResumeAll>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f47f af7c 	bne.w	8002d22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <xQueueGenericSend+0x1f8>)
 8002e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	e772      	b.n	8002d22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e3e:	f000 fa1b 	bl	8003278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e42:	f000 fd0d 	bl	8003860 <xTaskResumeAll>
 8002e46:	e76c      	b.n	8002d22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e4a:	f000 fa15 	bl	8003278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e4e:	f000 fd07 	bl	8003860 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3738      	adds	r7, #56	; 0x38
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	e000ed04 	.word	0xe000ed04

08002e60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b090      	sub	sp, #64	; 0x40
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d103      	bne.n	8002e9c <xQueueGenericSendFromISR+0x3c>
 8002e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <xQueueGenericSendFromISR+0x40>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <xQueueGenericSendFromISR+0x42>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002eb8:	bf00      	nop
 8002eba:	e7fe      	b.n	8002eba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d103      	bne.n	8002eca <xQueueGenericSendFromISR+0x6a>
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <xQueueGenericSendFromISR+0x6e>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <xQueueGenericSendFromISR+0x70>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	623b      	str	r3, [r7, #32]
}
 8002ee6:	bf00      	nop
 8002ee8:	e7fe      	b.n	8002ee8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002eea:	f001 fecd 	bl	8004c88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002eee:	f3ef 8211 	mrs	r2, BASEPRI
 8002ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef6:	f383 8811 	msr	BASEPRI, r3
 8002efa:	f3bf 8f6f 	isb	sy
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	61fa      	str	r2, [r7, #28]
 8002f04:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f06:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f08:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d302      	bcc.n	8002f1c <xQueueGenericSendFromISR+0xbc>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d12f      	bne.n	8002f7c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f32:	f000 f911 	bl	8003158 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d112      	bne.n	8002f66 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d016      	beq.n	8002f76 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	3324      	adds	r3, #36	; 0x24
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fe9d 	bl	8003c8c <xTaskRemoveFromEventList>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00e      	beq.n	8002f76 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e007      	b.n	8002f76 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	b25a      	sxtb	r2, r3
 8002f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f76:	2301      	movs	r3, #1
 8002f78:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002f7a:	e001      	b.n	8002f80 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f82:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3740      	adds	r7, #64	; 0x40
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08c      	sub	sp, #48	; 0x30
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10a      	bne.n	8002fc8 <xQueueReceive+0x30>
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	623b      	str	r3, [r7, #32]
}
 8002fc4:	bf00      	nop
 8002fc6:	e7fe      	b.n	8002fc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <xQueueReceive+0x3e>
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <xQueueReceive+0x42>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <xQueueReceive+0x44>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <xQueueReceive+0x5e>
	__asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	61fb      	str	r3, [r7, #28]
}
 8002ff2:	bf00      	nop
 8002ff4:	e7fe      	b.n	8002ff4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ff6:	f001 f807 	bl	8004008 <xTaskGetSchedulerState>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d102      	bne.n	8003006 <xQueueReceive+0x6e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <xQueueReceive+0x72>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <xQueueReceive+0x74>
 800300a:	2300      	movs	r3, #0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <xQueueReceive+0x8e>
	__asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	61bb      	str	r3, [r7, #24]
}
 8003022:	bf00      	nop
 8003024:	e7fe      	b.n	8003024 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003026:	f001 fd4d 	bl	8004ac4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	2b00      	cmp	r3, #0
 8003034:	d01f      	beq.n	8003076 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800303a:	f000 f8f7 	bl	800322c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	1e5a      	subs	r2, r3, #1
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00f      	beq.n	800306e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	3310      	adds	r3, #16
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fe1a 	bl	8003c8c <xTaskRemoveFromEventList>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800305e:	4b3d      	ldr	r3, [pc, #244]	; (8003154 <xQueueReceive+0x1bc>)
 8003060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800306e:	f001 fd59 	bl	8004b24 <vPortExitCritical>
				return pdPASS;
 8003072:	2301      	movs	r3, #1
 8003074:	e069      	b.n	800314a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d103      	bne.n	8003084 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800307c:	f001 fd52 	bl	8004b24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003080:	2300      	movs	r3, #0
 8003082:	e062      	b.n	800314a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800308a:	f107 0310 	add.w	r3, r7, #16
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fe60 	bl	8003d54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003094:	2301      	movs	r3, #1
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003098:	f001 fd44 	bl	8004b24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800309c:	f000 fbd2 	bl	8003844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030a0:	f001 fd10 	bl	8004ac4 <vPortEnterCritical>
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030aa:	b25b      	sxtb	r3, r3
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d103      	bne.n	80030ba <xQueueReceive+0x122>
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030c0:	b25b      	sxtb	r3, r3
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d103      	bne.n	80030d0 <xQueueReceive+0x138>
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030d0:	f001 fd28 	bl	8004b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030d4:	1d3a      	adds	r2, r7, #4
 80030d6:	f107 0310 	add.w	r3, r7, #16
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fe4f 	bl	8003d80 <xTaskCheckForTimeOut>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d123      	bne.n	8003130 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ea:	f000 f917 	bl	800331c <prvIsQueueEmpty>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d017      	beq.n	8003124 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f6:	3324      	adds	r3, #36	; 0x24
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fd75 	bl	8003bec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003104:	f000 f8b8 	bl	8003278 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003108:	f000 fbaa 	bl	8003860 <xTaskResumeAll>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d189      	bne.n	8003026 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <xQueueReceive+0x1bc>)
 8003114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	e780      	b.n	8003026 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003126:	f000 f8a7 	bl	8003278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800312a:	f000 fb99 	bl	8003860 <xTaskResumeAll>
 800312e:	e77a      	b.n	8003026 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003132:	f000 f8a1 	bl	8003278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003136:	f000 fb93 	bl	8003860 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800313a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800313c:	f000 f8ee 	bl	800331c <prvIsQueueEmpty>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	f43f af6f 	beq.w	8003026 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003148:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800314a:	4618      	mov	r0, r3
 800314c:	3730      	adds	r7, #48	; 0x30
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	e000ed04 	.word	0xe000ed04

08003158 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10d      	bne.n	8003192 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d14d      	bne.n	800321a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 ff5e 	bl	8004044 <xTaskPriorityDisinherit>
 8003188:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	e043      	b.n	800321a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d119      	bne.n	80031cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6858      	ldr	r0, [r3, #4]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	461a      	mov	r2, r3
 80031a2:	68b9      	ldr	r1, [r7, #8]
 80031a4:	f001 ffbe 	bl	8005124 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	441a      	add	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d32b      	bcc.n	800321a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	e026      	b.n	800321a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	68d8      	ldr	r0, [r3, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	461a      	mov	r2, r3
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	f001 ffa4 	bl	8005124 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	425b      	negs	r3, r3
 80031e6:	441a      	add	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d207      	bcs.n	8003208 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	425b      	negs	r3, r3
 8003202:	441a      	add	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d105      	bne.n	800321a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	3b01      	subs	r3, #1
 8003218:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003222:	697b      	ldr	r3, [r7, #20]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d018      	beq.n	8003270 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	441a      	add	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	429a      	cmp	r2, r3
 8003256:	d303      	bcc.n	8003260 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68d9      	ldr	r1, [r3, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	461a      	mov	r2, r3
 800326a:	6838      	ldr	r0, [r7, #0]
 800326c:	f001 ff5a 	bl	8005124 <memcpy>
	}
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003280:	f001 fc20 	bl	8004ac4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800328a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800328c:	e011      	b.n	80032b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	2b00      	cmp	r3, #0
 8003294:	d012      	beq.n	80032bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3324      	adds	r3, #36	; 0x24
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fcf6 	bl	8003c8c <xTaskRemoveFromEventList>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80032a6:	f000 fdcd 	bl	8003e44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	dce9      	bgt.n	800328e <prvUnlockQueue+0x16>
 80032ba:	e000      	b.n	80032be <prvUnlockQueue+0x46>
					break;
 80032bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	22ff      	movs	r2, #255	; 0xff
 80032c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80032c6:	f001 fc2d 	bl	8004b24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80032ca:	f001 fbfb 	bl	8004ac4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032d6:	e011      	b.n	80032fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d012      	beq.n	8003306 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3310      	adds	r3, #16
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fcd1 	bl	8003c8c <xTaskRemoveFromEventList>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032f0:	f000 fda8 	bl	8003e44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032f4:	7bbb      	ldrb	r3, [r7, #14]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003300:	2b00      	cmp	r3, #0
 8003302:	dce9      	bgt.n	80032d8 <prvUnlockQueue+0x60>
 8003304:	e000      	b.n	8003308 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003306:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	22ff      	movs	r2, #255	; 0xff
 800330c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003310:	f001 fc08 	bl	8004b24 <vPortExitCritical>
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003324:	f001 fbce 	bl	8004ac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003330:	2301      	movs	r3, #1
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	e001      	b.n	800333a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800333a:	f001 fbf3 	bl	8004b24 <vPortExitCritical>

	return xReturn;
 800333e:	68fb      	ldr	r3, [r7, #12]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003350:	f001 fbb8 	bl	8004ac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335c:	429a      	cmp	r2, r3
 800335e:	d102      	bne.n	8003366 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003360:	2301      	movs	r3, #1
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	e001      	b.n	800336a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800336a:	f001 fbdb 	bl	8004b24 <vPortExitCritical>

	return xReturn;
 800336e:	68fb      	ldr	r3, [r7, #12]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	e014      	b.n	80033b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003388:	4a0f      	ldr	r2, [pc, #60]	; (80033c8 <vQueueAddToRegistry+0x50>)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10b      	bne.n	80033ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003394:	490c      	ldr	r1, [pc, #48]	; (80033c8 <vQueueAddToRegistry+0x50>)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800339e:	4a0a      	ldr	r2, [pc, #40]	; (80033c8 <vQueueAddToRegistry+0x50>)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4413      	add	r3, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80033aa:	e006      	b.n	80033ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3301      	adds	r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b07      	cmp	r3, #7
 80033b6:	d9e7      	bls.n	8003388 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000784 	.word	0x20000784

080033cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80033dc:	f001 fb72 	bl	8004ac4 <vPortEnterCritical>
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033e6:	b25b      	sxtb	r3, r3
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d103      	bne.n	80033f6 <vQueueWaitForMessageRestricted+0x2a>
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033fc:	b25b      	sxtb	r3, r3
 80033fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003402:	d103      	bne.n	800340c <vQueueWaitForMessageRestricted+0x40>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800340c:	f001 fb8a 	bl	8004b24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	2b00      	cmp	r3, #0
 8003416:	d106      	bne.n	8003426 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	3324      	adds	r3, #36	; 0x24
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fc07 	bl	8003c34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003426:	6978      	ldr	r0, [r7, #20]
 8003428:	f7ff ff26 	bl	8003278 <prvUnlockQueue>
	}
 800342c:	bf00      	nop
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08e      	sub	sp, #56	; 0x38
 8003438:	af04      	add	r7, sp, #16
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10a      	bne.n	800345e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	623b      	str	r3, [r7, #32]
}
 800345a:	bf00      	nop
 800345c:	e7fe      	b.n	800345c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10a      	bne.n	800347a <xTaskCreateStatic+0x46>
	__asm volatile
 8003464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	61fb      	str	r3, [r7, #28]
}
 8003476:	bf00      	nop
 8003478:	e7fe      	b.n	8003478 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800347a:	235c      	movs	r3, #92	; 0x5c
 800347c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b5c      	cmp	r3, #92	; 0x5c
 8003482:	d00a      	beq.n	800349a <xTaskCreateStatic+0x66>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	61bb      	str	r3, [r7, #24]
}
 8003496:	bf00      	nop
 8003498:	e7fe      	b.n	8003498 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800349a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d01e      	beq.n	80034e0 <xTaskCreateStatic+0xac>
 80034a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01b      	beq.n	80034e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034ba:	2300      	movs	r3, #0
 80034bc:	9303      	str	r3, [sp, #12]
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	9302      	str	r3, [sp, #8]
 80034c2:	f107 0314 	add.w	r3, r7, #20
 80034c6:	9301      	str	r3, [sp, #4]
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f850 	bl	8003578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034da:	f000 f8dd 	bl	8003698 <prvAddNewTaskToReadyList>
 80034de:	e001      	b.n	80034e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80034e4:	697b      	ldr	r3, [r7, #20]
	}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3728      	adds	r7, #40	; 0x28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b08c      	sub	sp, #48	; 0x30
 80034f2:	af04      	add	r7, sp, #16
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	4613      	mov	r3, r2
 80034fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4618      	mov	r0, r3
 8003504:	f001 fc00 	bl	8004d08 <pvPortMalloc>
 8003508:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00e      	beq.n	800352e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003510:	205c      	movs	r0, #92	; 0x5c
 8003512:	f001 fbf9 	bl	8004d08 <pvPortMalloc>
 8003516:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	631a      	str	r2, [r3, #48]	; 0x30
 8003524:	e005      	b.n	8003532 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003526:	6978      	ldr	r0, [r7, #20]
 8003528:	f001 fcba 	bl	8004ea0 <vPortFree>
 800352c:	e001      	b.n	8003532 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d017      	beq.n	8003568 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003540:	88fa      	ldrh	r2, [r7, #6]
 8003542:	2300      	movs	r3, #0
 8003544:	9303      	str	r3, [sp, #12]
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	9302      	str	r3, [sp, #8]
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	9301      	str	r3, [sp, #4]
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f80e 	bl	8003578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800355c:	69f8      	ldr	r0, [r7, #28]
 800355e:	f000 f89b 	bl	8003698 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003562:	2301      	movs	r3, #1
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	e002      	b.n	800356e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003568:	f04f 33ff 	mov.w	r3, #4294967295
 800356c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800356e:	69bb      	ldr	r3, [r7, #24]
	}
 8003570:	4618      	mov	r0, r3
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003588:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	461a      	mov	r2, r3
 8003590:	21a5      	movs	r1, #165	; 0xa5
 8003592:	f001 fdd5 	bl	8005140 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035a0:	3b01      	subs	r3, #1
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f023 0307 	bic.w	r3, r3, #7
 80035ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80035ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	617b      	str	r3, [r7, #20]
}
 80035cc:	bf00      	nop
 80035ce:	e7fe      	b.n	80035ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01f      	beq.n	8003616 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	e012      	b.n	8003602 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	7819      	ldrb	r1, [r3, #0]
 80035e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	3334      	adds	r3, #52	; 0x34
 80035ec:	460a      	mov	r2, r1
 80035ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d006      	beq.n	800360a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	3301      	adds	r3, #1
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	2b0f      	cmp	r3, #15
 8003606:	d9e9      	bls.n	80035dc <prvInitialiseNewTask+0x64>
 8003608:	e000      	b.n	800360c <prvInitialiseNewTask+0x94>
			{
				break;
 800360a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003614:	e003      	b.n	800361e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003620:	2b37      	cmp	r3, #55	; 0x37
 8003622:	d901      	bls.n	8003628 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003624:	2337      	movs	r3, #55	; 0x37
 8003626:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800362c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003632:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	2200      	movs	r2, #0
 8003638:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	3304      	adds	r3, #4
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff f93e 	bl	80028c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	3318      	adds	r3, #24
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff f939 	bl	80028c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003652:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003656:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003662:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	2200      	movs	r2, #0
 8003668:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	68f9      	ldr	r1, [r7, #12]
 8003676:	69b8      	ldr	r0, [r7, #24]
 8003678:	f001 f8f4 	bl	8004864 <pxPortInitialiseStack>
 800367c:	4602      	mov	r2, r0
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800368e:	bf00      	nop
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036a0:	f001 fa10 	bl	8004ac4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036a4:	4b2d      	ldr	r3, [pc, #180]	; (800375c <prvAddNewTaskToReadyList+0xc4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3301      	adds	r3, #1
 80036aa:	4a2c      	ldr	r2, [pc, #176]	; (800375c <prvAddNewTaskToReadyList+0xc4>)
 80036ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036ae:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <prvAddNewTaskToReadyList+0xc8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036b6:	4a2a      	ldr	r2, [pc, #168]	; (8003760 <prvAddNewTaskToReadyList+0xc8>)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036bc:	4b27      	ldr	r3, [pc, #156]	; (800375c <prvAddNewTaskToReadyList+0xc4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d110      	bne.n	80036e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036c4:	f000 fbe2 	bl	8003e8c <prvInitialiseTaskLists>
 80036c8:	e00d      	b.n	80036e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036ca:	4b26      	ldr	r3, [pc, #152]	; (8003764 <prvAddNewTaskToReadyList+0xcc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <prvAddNewTaskToReadyList+0xc8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	429a      	cmp	r2, r3
 80036de:	d802      	bhi.n	80036e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036e0:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <prvAddNewTaskToReadyList+0xc8>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036e6:	4b20      	ldr	r3, [pc, #128]	; (8003768 <prvAddNewTaskToReadyList+0xd0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3301      	adds	r3, #1
 80036ec:	4a1e      	ldr	r2, [pc, #120]	; (8003768 <prvAddNewTaskToReadyList+0xd0>)
 80036ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <prvAddNewTaskToReadyList+0xd0>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fc:	4b1b      	ldr	r3, [pc, #108]	; (800376c <prvAddNewTaskToReadyList+0xd4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d903      	bls.n	800370c <prvAddNewTaskToReadyList+0x74>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	4a18      	ldr	r2, [pc, #96]	; (800376c <prvAddNewTaskToReadyList+0xd4>)
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <prvAddNewTaskToReadyList+0xd8>)
 800371a:	441a      	add	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	4619      	mov	r1, r3
 8003722:	4610      	mov	r0, r2
 8003724:	f7ff f8d9 	bl	80028da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003728:	f001 f9fc 	bl	8004b24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <prvAddNewTaskToReadyList+0xcc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00e      	beq.n	8003752 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <prvAddNewTaskToReadyList+0xc8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	429a      	cmp	r2, r3
 8003740:	d207      	bcs.n	8003752 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003742:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <prvAddNewTaskToReadyList+0xdc>)
 8003744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000c98 	.word	0x20000c98
 8003760:	200007c4 	.word	0x200007c4
 8003764:	20000ca4 	.word	0x20000ca4
 8003768:	20000cb4 	.word	0x20000cb4
 800376c:	20000ca0 	.word	0x20000ca0
 8003770:	200007c8 	.word	0x200007c8
 8003774:	e000ed04 	.word	0xe000ed04

08003778 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	; 0x28
 800377c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800377e:	2300      	movs	r3, #0
 8003780:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003782:	2300      	movs	r3, #0
 8003784:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003786:	463a      	mov	r2, r7
 8003788:	1d39      	adds	r1, r7, #4
 800378a:	f107 0308 	add.w	r3, r7, #8
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff f842 	bl	8002818 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003794:	6839      	ldr	r1, [r7, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	9202      	str	r2, [sp, #8]
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	2300      	movs	r3, #0
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	2300      	movs	r3, #0
 80037a4:	460a      	mov	r2, r1
 80037a6:	4921      	ldr	r1, [pc, #132]	; (800382c <vTaskStartScheduler+0xb4>)
 80037a8:	4821      	ldr	r0, [pc, #132]	; (8003830 <vTaskStartScheduler+0xb8>)
 80037aa:	f7ff fe43 	bl	8003434 <xTaskCreateStatic>
 80037ae:	4603      	mov	r3, r0
 80037b0:	4a20      	ldr	r2, [pc, #128]	; (8003834 <vTaskStartScheduler+0xbc>)
 80037b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80037b4:	4b1f      	ldr	r3, [pc, #124]	; (8003834 <vTaskStartScheduler+0xbc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80037bc:	2301      	movs	r3, #1
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e001      	b.n	80037c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d102      	bne.n	80037d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80037cc:	f000 fcfc 	bl	80041c8 <xTimerCreateTimerTask>
 80037d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d116      	bne.n	8003806 <vTaskStartScheduler+0x8e>
	__asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	613b      	str	r3, [r7, #16]
}
 80037ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <vTaskStartScheduler+0xc0>)
 80037ee:	f04f 32ff 	mov.w	r2, #4294967295
 80037f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037f4:	4b11      	ldr	r3, [pc, #68]	; (800383c <vTaskStartScheduler+0xc4>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80037fa:	4b11      	ldr	r3, [pc, #68]	; (8003840 <vTaskStartScheduler+0xc8>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003800:	f001 f8be 	bl	8004980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003804:	e00e      	b.n	8003824 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d10a      	bne.n	8003824 <vTaskStartScheduler+0xac>
	__asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	60fb      	str	r3, [r7, #12]
}
 8003820:	bf00      	nop
 8003822:	e7fe      	b.n	8003822 <vTaskStartScheduler+0xaa>
}
 8003824:	bf00      	nop
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	08005184 	.word	0x08005184
 8003830:	08003e5d 	.word	0x08003e5d
 8003834:	20000cbc 	.word	0x20000cbc
 8003838:	20000cb8 	.word	0x20000cb8
 800383c:	20000ca4 	.word	0x20000ca4
 8003840:	20000c9c 	.word	0x20000c9c

08003844 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <vTaskSuspendAll+0x18>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3301      	adds	r3, #1
 800384e:	4a03      	ldr	r2, [pc, #12]	; (800385c <vTaskSuspendAll+0x18>)
 8003850:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003852:	bf00      	nop
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	20000cc0 	.word	0x20000cc0

08003860 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800386e:	4b42      	ldr	r3, [pc, #264]	; (8003978 <xTaskResumeAll+0x118>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10a      	bne.n	800388c <xTaskResumeAll+0x2c>
	__asm volatile
 8003876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	603b      	str	r3, [r7, #0]
}
 8003888:	bf00      	nop
 800388a:	e7fe      	b.n	800388a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800388c:	f001 f91a 	bl	8004ac4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003890:	4b39      	ldr	r3, [pc, #228]	; (8003978 <xTaskResumeAll+0x118>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3b01      	subs	r3, #1
 8003896:	4a38      	ldr	r2, [pc, #224]	; (8003978 <xTaskResumeAll+0x118>)
 8003898:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800389a:	4b37      	ldr	r3, [pc, #220]	; (8003978 <xTaskResumeAll+0x118>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d162      	bne.n	8003968 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038a2:	4b36      	ldr	r3, [pc, #216]	; (800397c <xTaskResumeAll+0x11c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d05e      	beq.n	8003968 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038aa:	e02f      	b.n	800390c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ac:	4b34      	ldr	r3, [pc, #208]	; (8003980 <xTaskResumeAll+0x120>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3318      	adds	r3, #24
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff f86b 	bl	8002994 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	3304      	adds	r3, #4
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff f866 	bl	8002994 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	4b2d      	ldr	r3, [pc, #180]	; (8003984 <xTaskResumeAll+0x124>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d903      	bls.n	80038dc <xTaskResumeAll+0x7c>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	4a2a      	ldr	r2, [pc, #168]	; (8003984 <xTaskResumeAll+0x124>)
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4a27      	ldr	r2, [pc, #156]	; (8003988 <xTaskResumeAll+0x128>)
 80038ea:	441a      	add	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3304      	adds	r3, #4
 80038f0:	4619      	mov	r1, r3
 80038f2:	4610      	mov	r0, r2
 80038f4:	f7fe fff1 	bl	80028da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fc:	4b23      	ldr	r3, [pc, #140]	; (800398c <xTaskResumeAll+0x12c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	429a      	cmp	r2, r3
 8003904:	d302      	bcc.n	800390c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003906:	4b22      	ldr	r3, [pc, #136]	; (8003990 <xTaskResumeAll+0x130>)
 8003908:	2201      	movs	r2, #1
 800390a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800390c:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <xTaskResumeAll+0x120>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1cb      	bne.n	80038ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800391a:	f000 fb55 	bl	8003fc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800391e:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <xTaskResumeAll+0x134>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d010      	beq.n	800394c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800392a:	f000 f847 	bl	80039bc <xTaskIncrementTick>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003934:	4b16      	ldr	r3, [pc, #88]	; (8003990 <xTaskResumeAll+0x130>)
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3b01      	subs	r3, #1
 800393e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f1      	bne.n	800392a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003946:	4b13      	ldr	r3, [pc, #76]	; (8003994 <xTaskResumeAll+0x134>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800394c:	4b10      	ldr	r3, [pc, #64]	; (8003990 <xTaskResumeAll+0x130>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d009      	beq.n	8003968 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003954:	2301      	movs	r3, #1
 8003956:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003958:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <xTaskResumeAll+0x138>)
 800395a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003968:	f001 f8dc 	bl	8004b24 <vPortExitCritical>

	return xAlreadyYielded;
 800396c:	68bb      	ldr	r3, [r7, #8]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20000cc0 	.word	0x20000cc0
 800397c:	20000c98 	.word	0x20000c98
 8003980:	20000c58 	.word	0x20000c58
 8003984:	20000ca0 	.word	0x20000ca0
 8003988:	200007c8 	.word	0x200007c8
 800398c:	200007c4 	.word	0x200007c4
 8003990:	20000cac 	.word	0x20000cac
 8003994:	20000ca8 	.word	0x20000ca8
 8003998:	e000ed04 	.word	0xe000ed04

0800399c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <xTaskGetTickCount+0x1c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80039a8:	687b      	ldr	r3, [r7, #4]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000c9c 	.word	0x20000c9c

080039bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039c6:	4b4f      	ldr	r3, [pc, #316]	; (8003b04 <xTaskIncrementTick+0x148>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 808f 	bne.w	8003aee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039d0:	4b4d      	ldr	r3, [pc, #308]	; (8003b08 <xTaskIncrementTick+0x14c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3301      	adds	r3, #1
 80039d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039d8:	4a4b      	ldr	r2, [pc, #300]	; (8003b08 <xTaskIncrementTick+0x14c>)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d120      	bne.n	8003a26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80039e4:	4b49      	ldr	r3, [pc, #292]	; (8003b0c <xTaskIncrementTick+0x150>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <xTaskIncrementTick+0x48>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	603b      	str	r3, [r7, #0]
}
 8003a00:	bf00      	nop
 8003a02:	e7fe      	b.n	8003a02 <xTaskIncrementTick+0x46>
 8003a04:	4b41      	ldr	r3, [pc, #260]	; (8003b0c <xTaskIncrementTick+0x150>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	4b41      	ldr	r3, [pc, #260]	; (8003b10 <xTaskIncrementTick+0x154>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a3f      	ldr	r2, [pc, #252]	; (8003b0c <xTaskIncrementTick+0x150>)
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	4a3f      	ldr	r2, [pc, #252]	; (8003b10 <xTaskIncrementTick+0x154>)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b3e      	ldr	r3, [pc, #248]	; (8003b14 <xTaskIncrementTick+0x158>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	4a3d      	ldr	r2, [pc, #244]	; (8003b14 <xTaskIncrementTick+0x158>)
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	f000 fad1 	bl	8003fc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a26:	4b3c      	ldr	r3, [pc, #240]	; (8003b18 <xTaskIncrementTick+0x15c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d349      	bcc.n	8003ac4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a30:	4b36      	ldr	r3, [pc, #216]	; (8003b0c <xTaskIncrementTick+0x150>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d104      	bne.n	8003a44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a3a:	4b37      	ldr	r3, [pc, #220]	; (8003b18 <xTaskIncrementTick+0x15c>)
 8003a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a40:	601a      	str	r2, [r3, #0]
					break;
 8003a42:	e03f      	b.n	8003ac4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a44:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <xTaskIncrementTick+0x150>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d203      	bcs.n	8003a64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a5c:	4a2e      	ldr	r2, [pc, #184]	; (8003b18 <xTaskIncrementTick+0x15c>)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a62:	e02f      	b.n	8003ac4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	3304      	adds	r3, #4
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fe ff93 	bl	8002994 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d004      	beq.n	8003a80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	3318      	adds	r3, #24
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe ff8a 	bl	8002994 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a84:	4b25      	ldr	r3, [pc, #148]	; (8003b1c <xTaskIncrementTick+0x160>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d903      	bls.n	8003a94 <xTaskIncrementTick+0xd8>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	4a22      	ldr	r2, [pc, #136]	; (8003b1c <xTaskIncrementTick+0x160>)
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4a1f      	ldr	r2, [pc, #124]	; (8003b20 <xTaskIncrementTick+0x164>)
 8003aa2:	441a      	add	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	f7fe ff15 	bl	80028da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	; (8003b24 <xTaskIncrementTick+0x168>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d3b8      	bcc.n	8003a30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ac2:	e7b5      	b.n	8003a30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ac4:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <xTaskIncrementTick+0x168>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aca:	4915      	ldr	r1, [pc, #84]	; (8003b20 <xTaskIncrementTick+0x164>)
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d901      	bls.n	8003ae0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003adc:	2301      	movs	r3, #1
 8003ade:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <xTaskIncrementTick+0x16c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	e004      	b.n	8003af8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003aee:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <xTaskIncrementTick+0x170>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3301      	adds	r3, #1
 8003af4:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <xTaskIncrementTick+0x170>)
 8003af6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003af8:	697b      	ldr	r3, [r7, #20]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000cc0 	.word	0x20000cc0
 8003b08:	20000c9c 	.word	0x20000c9c
 8003b0c:	20000c50 	.word	0x20000c50
 8003b10:	20000c54 	.word	0x20000c54
 8003b14:	20000cb0 	.word	0x20000cb0
 8003b18:	20000cb8 	.word	0x20000cb8
 8003b1c:	20000ca0 	.word	0x20000ca0
 8003b20:	200007c8 	.word	0x200007c8
 8003b24:	200007c4 	.word	0x200007c4
 8003b28:	20000cac 	.word	0x20000cac
 8003b2c:	20000ca8 	.word	0x20000ca8

08003b30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b36:	4b28      	ldr	r3, [pc, #160]	; (8003bd8 <vTaskSwitchContext+0xa8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b3e:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <vTaskSwitchContext+0xac>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b44:	e041      	b.n	8003bca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003b46:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <vTaskSwitchContext+0xac>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b4c:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <vTaskSwitchContext+0xb0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	e010      	b.n	8003b76 <vTaskSwitchContext+0x46>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <vTaskSwitchContext+0x40>
	__asm volatile
 8003b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	607b      	str	r3, [r7, #4]
}
 8003b6c:	bf00      	nop
 8003b6e:	e7fe      	b.n	8003b6e <vTaskSwitchContext+0x3e>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	491b      	ldr	r1, [pc, #108]	; (8003be4 <vTaskSwitchContext+0xb4>)
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0e4      	beq.n	8003b54 <vTaskSwitchContext+0x24>
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <vTaskSwitchContext+0xb4>)
 8003b96:	4413      	add	r3, r2
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	3308      	adds	r3, #8
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d104      	bne.n	8003bba <vTaskSwitchContext+0x8a>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4a09      	ldr	r2, [pc, #36]	; (8003be8 <vTaskSwitchContext+0xb8>)
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	4a06      	ldr	r2, [pc, #24]	; (8003be0 <vTaskSwitchContext+0xb0>)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6013      	str	r3, [r2, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000cc0 	.word	0x20000cc0
 8003bdc:	20000cac 	.word	0x20000cac
 8003be0:	20000ca0 	.word	0x20000ca0
 8003be4:	200007c8 	.word	0x200007c8
 8003be8:	200007c4 	.word	0x200007c4

08003bec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	60fb      	str	r3, [r7, #12]
}
 8003c0e:	bf00      	nop
 8003c10:	e7fe      	b.n	8003c10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <vTaskPlaceOnEventList+0x44>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3318      	adds	r3, #24
 8003c18:	4619      	mov	r1, r3
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fe fe81 	bl	8002922 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c20:	2101      	movs	r1, #1
 8003c22:	6838      	ldr	r0, [r7, #0]
 8003c24:	f000 fa7c 	bl	8004120 <prvAddCurrentTaskToDelayedList>
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	200007c4 	.word	0x200007c4

08003c34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	617b      	str	r3, [r7, #20]
}
 8003c58:	bf00      	nop
 8003c5a:	e7fe      	b.n	8003c5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3318      	adds	r3, #24
 8003c62:	4619      	mov	r1, r3
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f7fe fe38 	bl	80028da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003c70:	f04f 33ff 	mov.w	r3, #4294967295
 8003c74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	68b8      	ldr	r0, [r7, #8]
 8003c7a:	f000 fa51 	bl	8004120 <prvAddCurrentTaskToDelayedList>
	}
 8003c7e:	bf00      	nop
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	200007c4 	.word	0x200007c4

08003c8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10a      	bne.n	8003cb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	60fb      	str	r3, [r7, #12]
}
 8003cb4:	bf00      	nop
 8003cb6:	e7fe      	b.n	8003cb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	3318      	adds	r3, #24
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe fe69 	bl	8002994 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cc2:	4b1e      	ldr	r3, [pc, #120]	; (8003d3c <xTaskRemoveFromEventList+0xb0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d11d      	bne.n	8003d06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe fe60 	bl	8002994 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd8:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <xTaskRemoveFromEventList+0xb4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d903      	bls.n	8003ce8 <xTaskRemoveFromEventList+0x5c>
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <xTaskRemoveFromEventList+0xb4>)
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4a13      	ldr	r2, [pc, #76]	; (8003d44 <xTaskRemoveFromEventList+0xb8>)
 8003cf6:	441a      	add	r2, r3
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	f7fe fdeb 	bl	80028da <vListInsertEnd>
 8003d04:	e005      	b.n	8003d12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	3318      	adds	r3, #24
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	480e      	ldr	r0, [pc, #56]	; (8003d48 <xTaskRemoveFromEventList+0xbc>)
 8003d0e:	f7fe fde4 	bl	80028da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d16:	4b0d      	ldr	r3, [pc, #52]	; (8003d4c <xTaskRemoveFromEventList+0xc0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d905      	bls.n	8003d2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d20:	2301      	movs	r3, #1
 8003d22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <xTaskRemoveFromEventList+0xc4>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	e001      	b.n	8003d30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d30:	697b      	ldr	r3, [r7, #20]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000cc0 	.word	0x20000cc0
 8003d40:	20000ca0 	.word	0x20000ca0
 8003d44:	200007c8 	.word	0x200007c8
 8003d48:	20000c58 	.word	0x20000c58
 8003d4c:	200007c4 	.word	0x200007c4
 8003d50:	20000cac 	.word	0x20000cac

08003d54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <vTaskInternalSetTimeOutState+0x24>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <vTaskInternalSetTimeOutState+0x28>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	605a      	str	r2, [r3, #4]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	20000cb0 	.word	0x20000cb0
 8003d7c:	20000c9c 	.word	0x20000c9c

08003d80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	613b      	str	r3, [r7, #16]
}
 8003da2:	bf00      	nop
 8003da4:	e7fe      	b.n	8003da4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	60fb      	str	r3, [r7, #12]
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003dc2:	f000 fe7f 	bl	8004ac4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003dc6:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <xTaskCheckForTimeOut+0xbc>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dde:	d102      	bne.n	8003de6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
 8003de4:	e023      	b.n	8003e2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <xTaskCheckForTimeOut+0xc0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d007      	beq.n	8003e02 <xTaskCheckForTimeOut+0x82>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d302      	bcc.n	8003e02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	e015      	b.n	8003e2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d20b      	bcs.n	8003e24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	1ad2      	subs	r2, r2, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff ff9b 	bl	8003d54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
 8003e22:	e004      	b.n	8003e2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e2e:	f000 fe79 	bl	8004b24 <vPortExitCritical>

	return xReturn;
 8003e32:	69fb      	ldr	r3, [r7, #28]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3720      	adds	r7, #32
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20000c9c 	.word	0x20000c9c
 8003e40:	20000cb0 	.word	0x20000cb0

08003e44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e48:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <vTaskMissedYield+0x14>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
}
 8003e4e:	bf00      	nop
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	20000cac 	.word	0x20000cac

08003e5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e64:	f000 f852 	bl	8003f0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <prvIdleTask+0x28>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d9f9      	bls.n	8003e64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <prvIdleTask+0x2c>)
 8003e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e80:	e7f0      	b.n	8003e64 <prvIdleTask+0x8>
 8003e82:	bf00      	nop
 8003e84:	200007c8 	.word	0x200007c8
 8003e88:	e000ed04 	.word	0xe000ed04

08003e8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	e00c      	b.n	8003eb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4a12      	ldr	r2, [pc, #72]	; (8003eec <prvInitialiseTaskLists+0x60>)
 8003ea4:	4413      	add	r3, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe fcea 	bl	8002880 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b37      	cmp	r3, #55	; 0x37
 8003eb6:	d9ef      	bls.n	8003e98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003eb8:	480d      	ldr	r0, [pc, #52]	; (8003ef0 <prvInitialiseTaskLists+0x64>)
 8003eba:	f7fe fce1 	bl	8002880 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ebe:	480d      	ldr	r0, [pc, #52]	; (8003ef4 <prvInitialiseTaskLists+0x68>)
 8003ec0:	f7fe fcde 	bl	8002880 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ec4:	480c      	ldr	r0, [pc, #48]	; (8003ef8 <prvInitialiseTaskLists+0x6c>)
 8003ec6:	f7fe fcdb 	bl	8002880 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003eca:	480c      	ldr	r0, [pc, #48]	; (8003efc <prvInitialiseTaskLists+0x70>)
 8003ecc:	f7fe fcd8 	bl	8002880 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ed0:	480b      	ldr	r0, [pc, #44]	; (8003f00 <prvInitialiseTaskLists+0x74>)
 8003ed2:	f7fe fcd5 	bl	8002880 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <prvInitialiseTaskLists+0x78>)
 8003ed8:	4a05      	ldr	r2, [pc, #20]	; (8003ef0 <prvInitialiseTaskLists+0x64>)
 8003eda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <prvInitialiseTaskLists+0x7c>)
 8003ede:	4a05      	ldr	r2, [pc, #20]	; (8003ef4 <prvInitialiseTaskLists+0x68>)
 8003ee0:	601a      	str	r2, [r3, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	200007c8 	.word	0x200007c8
 8003ef0:	20000c28 	.word	0x20000c28
 8003ef4:	20000c3c 	.word	0x20000c3c
 8003ef8:	20000c58 	.word	0x20000c58
 8003efc:	20000c6c 	.word	0x20000c6c
 8003f00:	20000c84 	.word	0x20000c84
 8003f04:	20000c50 	.word	0x20000c50
 8003f08:	20000c54 	.word	0x20000c54

08003f0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f12:	e019      	b.n	8003f48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f14:	f000 fdd6 	bl	8004ac4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f18:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <prvCheckTasksWaitingTermination+0x50>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe fd35 	bl	8002994 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <prvCheckTasksWaitingTermination+0x54>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	4a0b      	ldr	r2, [pc, #44]	; (8003f60 <prvCheckTasksWaitingTermination+0x54>)
 8003f32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f34:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <prvCheckTasksWaitingTermination+0x58>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <prvCheckTasksWaitingTermination+0x58>)
 8003f3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f3e:	f000 fdf1 	bl	8004b24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f810 	bl	8003f68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <prvCheckTasksWaitingTermination+0x58>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e1      	bne.n	8003f14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000c6c 	.word	0x20000c6c
 8003f60:	20000c98 	.word	0x20000c98
 8003f64:	20000c80 	.word	0x20000c80

08003f68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d108      	bne.n	8003f8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 ff8e 	bl	8004ea0 <vPortFree>
				vPortFree( pxTCB );
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 ff8b 	bl	8004ea0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f8a:	e018      	b.n	8003fbe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d103      	bne.n	8003f9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 ff82 	bl	8004ea0 <vPortFree>
	}
 8003f9c:	e00f      	b.n	8003fbe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d00a      	beq.n	8003fbe <prvDeleteTCB+0x56>
	__asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	60fb      	str	r3, [r7, #12]
}
 8003fba:	bf00      	nop
 8003fbc:	e7fe      	b.n	8003fbc <prvDeleteTCB+0x54>
	}
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <prvResetNextTaskUnblockTime+0x38>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <prvResetNextTaskUnblockTime+0x3c>)
 8003fda:	f04f 32ff 	mov.w	r2, #4294967295
 8003fde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fe0:	e008      	b.n	8003ff4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe2:	4b07      	ldr	r3, [pc, #28]	; (8004000 <prvResetNextTaskUnblockTime+0x38>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	4a04      	ldr	r2, [pc, #16]	; (8004004 <prvResetNextTaskUnblockTime+0x3c>)
 8003ff2:	6013      	str	r3, [r2, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	20000c50 	.word	0x20000c50
 8004004:	20000cb8 	.word	0x20000cb8

08004008 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800400e:	4b0b      	ldr	r3, [pc, #44]	; (800403c <xTaskGetSchedulerState+0x34>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d102      	bne.n	800401c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004016:	2301      	movs	r3, #1
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	e008      	b.n	800402e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800401c:	4b08      	ldr	r3, [pc, #32]	; (8004040 <xTaskGetSchedulerState+0x38>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d102      	bne.n	800402a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004024:	2302      	movs	r3, #2
 8004026:	607b      	str	r3, [r7, #4]
 8004028:	e001      	b.n	800402e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800402a:	2300      	movs	r3, #0
 800402c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800402e:	687b      	ldr	r3, [r7, #4]
	}
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	20000ca4 	.word	0x20000ca4
 8004040:	20000cc0 	.word	0x20000cc0

08004044 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d056      	beq.n	8004108 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800405a:	4b2e      	ldr	r3, [pc, #184]	; (8004114 <xTaskPriorityDisinherit+0xd0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	429a      	cmp	r2, r3
 8004062:	d00a      	beq.n	800407a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	60fb      	str	r3, [r7, #12]
}
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	60bb      	str	r3, [r7, #8]
}
 8004094:	bf00      	nop
 8004096:	e7fe      	b.n	8004096 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409c:	1e5a      	subs	r2, r3, #1
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d02c      	beq.n	8004108 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d128      	bne.n	8004108 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	3304      	adds	r3, #4
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe fc6a 	bl	8002994 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d8:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <xTaskPriorityDisinherit+0xd4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d903      	bls.n	80040e8 <xTaskPriorityDisinherit+0xa4>
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	4a0c      	ldr	r2, [pc, #48]	; (8004118 <xTaskPriorityDisinherit+0xd4>)
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4a09      	ldr	r2, [pc, #36]	; (800411c <xTaskPriorityDisinherit+0xd8>)
 80040f6:	441a      	add	r2, r3
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f7fe fbeb 	bl	80028da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004104:	2301      	movs	r3, #1
 8004106:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004108:	697b      	ldr	r3, [r7, #20]
	}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	200007c4 	.word	0x200007c4
 8004118:	20000ca0 	.word	0x20000ca0
 800411c:	200007c8 	.word	0x200007c8

08004120 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800412a:	4b21      	ldr	r3, [pc, #132]	; (80041b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004130:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3304      	adds	r3, #4
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe fc2c 	bl	8002994 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004142:	d10a      	bne.n	800415a <prvAddCurrentTaskToDelayedList+0x3a>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800414a:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3304      	adds	r3, #4
 8004150:	4619      	mov	r1, r3
 8004152:	4819      	ldr	r0, [pc, #100]	; (80041b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004154:	f7fe fbc1 	bl	80028da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004158:	e026      	b.n	80041a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4413      	add	r3, r2
 8004160:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004162:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	429a      	cmp	r2, r3
 8004170:	d209      	bcs.n	8004186 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3304      	adds	r3, #4
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f7fe fbcf 	bl	8002922 <vListInsert>
}
 8004184:	e010      	b.n	80041a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004186:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3304      	adds	r3, #4
 8004190:	4619      	mov	r1, r3
 8004192:	4610      	mov	r0, r2
 8004194:	f7fe fbc5 	bl	8002922 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004198:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d202      	bcs.n	80041a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80041a2:	4a08      	ldr	r2, [pc, #32]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6013      	str	r3, [r2, #0]
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20000c9c 	.word	0x20000c9c
 80041b4:	200007c4 	.word	0x200007c4
 80041b8:	20000c84 	.word	0x20000c84
 80041bc:	20000c54 	.word	0x20000c54
 80041c0:	20000c50 	.word	0x20000c50
 80041c4:	20000cb8 	.word	0x20000cb8

080041c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	; 0x28
 80041cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80041d2:	f000 fb07 	bl	80047e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80041d6:	4b1c      	ldr	r3, [pc, #112]	; (8004248 <xTimerCreateTimerTask+0x80>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d021      	beq.n	8004222 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80041e6:	1d3a      	adds	r2, r7, #4
 80041e8:	f107 0108 	add.w	r1, r7, #8
 80041ec:	f107 030c 	add.w	r3, r7, #12
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fe fb2b 	bl	800284c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	9202      	str	r2, [sp, #8]
 80041fe:	9301      	str	r3, [sp, #4]
 8004200:	2302      	movs	r3, #2
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	2300      	movs	r3, #0
 8004206:	460a      	mov	r2, r1
 8004208:	4910      	ldr	r1, [pc, #64]	; (800424c <xTimerCreateTimerTask+0x84>)
 800420a:	4811      	ldr	r0, [pc, #68]	; (8004250 <xTimerCreateTimerTask+0x88>)
 800420c:	f7ff f912 	bl	8003434 <xTaskCreateStatic>
 8004210:	4603      	mov	r3, r0
 8004212:	4a10      	ldr	r2, [pc, #64]	; (8004254 <xTimerCreateTimerTask+0x8c>)
 8004214:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004216:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <xTimerCreateTimerTask+0x8c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800421e:	2301      	movs	r3, #1
 8004220:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	613b      	str	r3, [r7, #16]
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800423e:	697b      	ldr	r3, [r7, #20]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000cf4 	.word	0x20000cf4
 800424c:	0800518c 	.word	0x0800518c
 8004250:	0800438d 	.word	0x0800438d
 8004254:	20000cf8 	.word	0x20000cf8

08004258 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	; 0x28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004266:	2300      	movs	r3, #0
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10a      	bne.n	8004286 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	623b      	str	r3, [r7, #32]
}
 8004282:	bf00      	nop
 8004284:	e7fe      	b.n	8004284 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004286:	4b1a      	ldr	r3, [pc, #104]	; (80042f0 <xTimerGenericCommand+0x98>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d02a      	beq.n	80042e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b05      	cmp	r3, #5
 800429e:	dc18      	bgt.n	80042d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80042a0:	f7ff feb2 	bl	8004008 <xTaskGetSchedulerState>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d109      	bne.n	80042be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <xTimerGenericCommand+0x98>)
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	f107 0110 	add.w	r1, r7, #16
 80042b2:	2300      	movs	r3, #0
 80042b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b6:	f7fe fcd5 	bl	8002c64 <xQueueGenericSend>
 80042ba:	6278      	str	r0, [r7, #36]	; 0x24
 80042bc:	e012      	b.n	80042e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <xTimerGenericCommand+0x98>)
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	f107 0110 	add.w	r1, r7, #16
 80042c6:	2300      	movs	r3, #0
 80042c8:	2200      	movs	r2, #0
 80042ca:	f7fe fccb 	bl	8002c64 <xQueueGenericSend>
 80042ce:	6278      	str	r0, [r7, #36]	; 0x24
 80042d0:	e008      	b.n	80042e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <xTimerGenericCommand+0x98>)
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	f107 0110 	add.w	r1, r7, #16
 80042da:	2300      	movs	r3, #0
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	f7fe fdbf 	bl	8002e60 <xQueueGenericSendFromISR>
 80042e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3728      	adds	r7, #40	; 0x28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000cf4 	.word	0x20000cf4

080042f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042fe:	4b22      	ldr	r3, [pc, #136]	; (8004388 <prvProcessExpiredTimer+0x94>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	3304      	adds	r3, #4
 800430c:	4618      	mov	r0, r3
 800430e:	f7fe fb41 	bl	8002994 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d022      	beq.n	8004366 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	699a      	ldr	r2, [r3, #24]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	18d1      	adds	r1, r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	6978      	ldr	r0, [r7, #20]
 800432e:	f000 f8d1 	bl	80044d4 <prvInsertTimerInActiveList>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01f      	beq.n	8004378 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004338:	2300      	movs	r3, #0
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	2300      	movs	r3, #0
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	2100      	movs	r1, #0
 8004342:	6978      	ldr	r0, [r7, #20]
 8004344:	f7ff ff88 	bl	8004258 <xTimerGenericCommand>
 8004348:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d113      	bne.n	8004378 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	60fb      	str	r3, [r7, #12]
}
 8004362:	bf00      	nop
 8004364:	e7fe      	b.n	8004364 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	b2da      	uxtb	r2, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	6978      	ldr	r0, [r7, #20]
 800437e:	4798      	blx	r3
}
 8004380:	bf00      	nop
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20000cec 	.word	0x20000cec

0800438c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004394:	f107 0308 	add.w	r3, r7, #8
 8004398:	4618      	mov	r0, r3
 800439a:	f000 f857 	bl	800444c <prvGetNextExpireTime>
 800439e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4619      	mov	r1, r3
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f803 	bl	80043b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80043aa:	f000 f8d5 	bl	8004558 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043ae:	e7f1      	b.n	8004394 <prvTimerTask+0x8>

080043b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80043ba:	f7ff fa43 	bl	8003844 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043be:	f107 0308 	add.w	r3, r7, #8
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f866 	bl	8004494 <prvSampleTimeNow>
 80043c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d130      	bne.n	8004432 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10a      	bne.n	80043ec <prvProcessTimerOrBlockTask+0x3c>
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d806      	bhi.n	80043ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80043de:	f7ff fa3f 	bl	8003860 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80043e2:	68f9      	ldr	r1, [r7, #12]
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff ff85 	bl	80042f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80043ea:	e024      	b.n	8004436 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d008      	beq.n	8004404 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80043f2:	4b13      	ldr	r3, [pc, #76]	; (8004440 <prvProcessTimerOrBlockTask+0x90>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <prvProcessTimerOrBlockTask+0x50>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <prvProcessTimerOrBlockTask+0x52>
 8004400:	2300      	movs	r3, #0
 8004402:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004404:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <prvProcessTimerOrBlockTask+0x94>)
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	4619      	mov	r1, r3
 8004412:	f7fe ffdb 	bl	80033cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004416:	f7ff fa23 	bl	8003860 <xTaskResumeAll>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <prvProcessTimerOrBlockTask+0x98>)
 8004422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	f3bf 8f6f 	isb	sy
}
 8004430:	e001      	b.n	8004436 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004432:	f7ff fa15 	bl	8003860 <xTaskResumeAll>
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000cf0 	.word	0x20000cf0
 8004444:	20000cf4 	.word	0x20000cf4
 8004448:	e000ed04 	.word	0xe000ed04

0800444c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004454:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <prvGetNextExpireTime+0x44>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <prvGetNextExpireTime+0x16>
 800445e:	2201      	movs	r2, #1
 8004460:	e000      	b.n	8004464 <prvGetNextExpireTime+0x18>
 8004462:	2200      	movs	r2, #0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <prvGetNextExpireTime+0x44>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	e001      	b.n	8004480 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004480:	68fb      	ldr	r3, [r7, #12]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	20000cec 	.word	0x20000cec

08004494 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800449c:	f7ff fa7e 	bl	800399c <xTaskGetTickCount>
 80044a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80044a2:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <prvSampleTimeNow+0x3c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d205      	bcs.n	80044b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80044ac:	f000 f936 	bl	800471c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	e002      	b.n	80044be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80044be:	4a04      	ldr	r2, [pc, #16]	; (80044d0 <prvSampleTimeNow+0x3c>)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80044c4:	68fb      	ldr	r3, [r7, #12]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000cfc 	.word	0x20000cfc

080044d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d812      	bhi.n	8004520 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	1ad2      	subs	r2, r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	429a      	cmp	r2, r3
 8004506:	d302      	bcc.n	800450e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004508:	2301      	movs	r3, #1
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	e01b      	b.n	8004546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800450e:	4b10      	ldr	r3, [pc, #64]	; (8004550 <prvInsertTimerInActiveList+0x7c>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3304      	adds	r3, #4
 8004516:	4619      	mov	r1, r3
 8004518:	4610      	mov	r0, r2
 800451a:	f7fe fa02 	bl	8002922 <vListInsert>
 800451e:	e012      	b.n	8004546 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d206      	bcs.n	8004536 <prvInsertTimerInActiveList+0x62>
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d302      	bcc.n	8004536 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004530:	2301      	movs	r3, #1
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	e007      	b.n	8004546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004536:	4b07      	ldr	r3, [pc, #28]	; (8004554 <prvInsertTimerInActiveList+0x80>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3304      	adds	r3, #4
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f7fe f9ee 	bl	8002922 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004546:	697b      	ldr	r3, [r7, #20]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20000cf0 	.word	0x20000cf0
 8004554:	20000cec 	.word	0x20000cec

08004558 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08e      	sub	sp, #56	; 0x38
 800455c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800455e:	e0ca      	b.n	80046f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	da18      	bge.n	8004598 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004566:	1d3b      	adds	r3, r7, #4
 8004568:	3304      	adds	r3, #4
 800456a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10a      	bne.n	8004588 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	61fb      	str	r3, [r7, #28]
}
 8004584:	bf00      	nop
 8004586:	e7fe      	b.n	8004586 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800458e:	6850      	ldr	r0, [r2, #4]
 8004590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004592:	6892      	ldr	r2, [r2, #8]
 8004594:	4611      	mov	r1, r2
 8004596:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	f2c0 80aa 	blt.w	80046f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	3304      	adds	r3, #4
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fe f9ef 	bl	8002994 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045b6:	463b      	mov	r3, r7
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ff6b 	bl	8004494 <prvSampleTimeNow>
 80045be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b09      	cmp	r3, #9
 80045c4:	f200 8097 	bhi.w	80046f6 <prvProcessReceivedCommands+0x19e>
 80045c8:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <prvProcessReceivedCommands+0x78>)
 80045ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ce:	bf00      	nop
 80045d0:	080045f9 	.word	0x080045f9
 80045d4:	080045f9 	.word	0x080045f9
 80045d8:	080045f9 	.word	0x080045f9
 80045dc:	0800466d 	.word	0x0800466d
 80045e0:	08004681 	.word	0x08004681
 80045e4:	080046cb 	.word	0x080046cb
 80045e8:	080045f9 	.word	0x080045f9
 80045ec:	080045f9 	.word	0x080045f9
 80045f0:	0800466d 	.word	0x0800466d
 80045f4:	08004681 	.word	0x08004681
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	b2da      	uxtb	r2, r3
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	18d1      	adds	r1, r2, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004618:	f7ff ff5c 	bl	80044d4 <prvInsertTimerInActiveList>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d069      	beq.n	80046f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004628:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d05e      	beq.n	80046f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	441a      	add	r2, r3
 8004640:	2300      	movs	r3, #0
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2300      	movs	r3, #0
 8004646:	2100      	movs	r1, #0
 8004648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800464a:	f7ff fe05 	bl	8004258 <xTimerGenericCommand>
 800464e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d14f      	bne.n	80046f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	61bb      	str	r3, [r7, #24]
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	b2da      	uxtb	r2, r3
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800467e:	e03a      	b.n	80046f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	b2da      	uxtb	r2, r3
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	617b      	str	r3, [r7, #20]
}
 80046b2:	bf00      	nop
 80046b4:	e7fe      	b.n	80046b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	18d1      	adds	r1, r2, r3
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046c4:	f7ff ff06 	bl	80044d4 <prvInsertTimerInActiveList>
					break;
 80046c8:	e015      	b.n	80046f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d103      	bne.n	80046e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80046d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046da:	f000 fbe1 	bl	8004ea0 <vPortFree>
 80046de:	e00a      	b.n	80046f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046e6:	f023 0301 	bic.w	r3, r3, #1
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80046f2:	e000      	b.n	80046f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80046f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046f6:	4b08      	ldr	r3, [pc, #32]	; (8004718 <prvProcessReceivedCommands+0x1c0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	1d39      	adds	r1, r7, #4
 80046fc:	2200      	movs	r2, #0
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe fc4a 	bl	8002f98 <xQueueReceive>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	f47f af2a 	bne.w	8004560 <prvProcessReceivedCommands+0x8>
	}
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	3730      	adds	r7, #48	; 0x30
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000cf4 	.word	0x20000cf4

0800471c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004722:	e048      	b.n	80047b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004724:	4b2d      	ldr	r3, [pc, #180]	; (80047dc <prvSwitchTimerLists+0xc0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800472e:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <prvSwitchTimerLists+0xc0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3304      	adds	r3, #4
 800473c:	4618      	mov	r0, r3
 800473e:	f7fe f929 	bl	8002994 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d02e      	beq.n	80047b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4413      	add	r3, r2
 8004760:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	429a      	cmp	r2, r3
 8004768:	d90e      	bls.n	8004788 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004776:	4b19      	ldr	r3, [pc, #100]	; (80047dc <prvSwitchTimerLists+0xc0>)
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3304      	adds	r3, #4
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f7fe f8ce 	bl	8002922 <vListInsert>
 8004786:	e016      	b.n	80047b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004788:	2300      	movs	r3, #0
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	2300      	movs	r3, #0
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	2100      	movs	r1, #0
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7ff fd60 	bl	8004258 <xTimerGenericCommand>
 8004798:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	603b      	str	r3, [r7, #0]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047b6:	4b09      	ldr	r3, [pc, #36]	; (80047dc <prvSwitchTimerLists+0xc0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1b1      	bne.n	8004724 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80047c0:	4b06      	ldr	r3, [pc, #24]	; (80047dc <prvSwitchTimerLists+0xc0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <prvSwitchTimerLists+0xc4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a04      	ldr	r2, [pc, #16]	; (80047dc <prvSwitchTimerLists+0xc0>)
 80047cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80047ce:	4a04      	ldr	r2, [pc, #16]	; (80047e0 <prvSwitchTimerLists+0xc4>)
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	6013      	str	r3, [r2, #0]
}
 80047d4:	bf00      	nop
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20000cec 	.word	0x20000cec
 80047e0:	20000cf0 	.word	0x20000cf0

080047e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80047ea:	f000 f96b 	bl	8004ac4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80047ee:	4b15      	ldr	r3, [pc, #84]	; (8004844 <prvCheckForValidListAndQueue+0x60>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d120      	bne.n	8004838 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80047f6:	4814      	ldr	r0, [pc, #80]	; (8004848 <prvCheckForValidListAndQueue+0x64>)
 80047f8:	f7fe f842 	bl	8002880 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80047fc:	4813      	ldr	r0, [pc, #76]	; (800484c <prvCheckForValidListAndQueue+0x68>)
 80047fe:	f7fe f83f 	bl	8002880 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004802:	4b13      	ldr	r3, [pc, #76]	; (8004850 <prvCheckForValidListAndQueue+0x6c>)
 8004804:	4a10      	ldr	r2, [pc, #64]	; (8004848 <prvCheckForValidListAndQueue+0x64>)
 8004806:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004808:	4b12      	ldr	r3, [pc, #72]	; (8004854 <prvCheckForValidListAndQueue+0x70>)
 800480a:	4a10      	ldr	r2, [pc, #64]	; (800484c <prvCheckForValidListAndQueue+0x68>)
 800480c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800480e:	2300      	movs	r3, #0
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	4b11      	ldr	r3, [pc, #68]	; (8004858 <prvCheckForValidListAndQueue+0x74>)
 8004814:	4a11      	ldr	r2, [pc, #68]	; (800485c <prvCheckForValidListAndQueue+0x78>)
 8004816:	2110      	movs	r1, #16
 8004818:	200a      	movs	r0, #10
 800481a:	f7fe f94d 	bl	8002ab8 <xQueueGenericCreateStatic>
 800481e:	4603      	mov	r3, r0
 8004820:	4a08      	ldr	r2, [pc, #32]	; (8004844 <prvCheckForValidListAndQueue+0x60>)
 8004822:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004824:	4b07      	ldr	r3, [pc, #28]	; (8004844 <prvCheckForValidListAndQueue+0x60>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <prvCheckForValidListAndQueue+0x60>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	490b      	ldr	r1, [pc, #44]	; (8004860 <prvCheckForValidListAndQueue+0x7c>)
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe fda0 	bl	8003378 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004838:	f000 f974 	bl	8004b24 <vPortExitCritical>
}
 800483c:	bf00      	nop
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000cf4 	.word	0x20000cf4
 8004848:	20000cc4 	.word	0x20000cc4
 800484c:	20000cd8 	.word	0x20000cd8
 8004850:	20000cec 	.word	0x20000cec
 8004854:	20000cf0 	.word	0x20000cf0
 8004858:	20000da0 	.word	0x20000da0
 800485c:	20000d00 	.word	0x20000d00
 8004860:	08005194 	.word	0x08005194

08004864 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3b04      	subs	r3, #4
 8004874:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800487c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3b04      	subs	r3, #4
 8004882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f023 0201 	bic.w	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3b04      	subs	r3, #4
 8004892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004894:	4a0c      	ldr	r2, [pc, #48]	; (80048c8 <pxPortInitialiseStack+0x64>)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3b14      	subs	r3, #20
 800489e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3b04      	subs	r3, #4
 80048aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f06f 0202 	mvn.w	r2, #2
 80048b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3b20      	subs	r3, #32
 80048b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048ba:	68fb      	ldr	r3, [r7, #12]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	080048cd 	.word	0x080048cd

080048cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048d6:	4b12      	ldr	r3, [pc, #72]	; (8004920 <prvTaskExitError+0x54>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048de:	d00a      	beq.n	80048f6 <prvTaskExitError+0x2a>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	60fb      	str	r3, [r7, #12]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <prvTaskExitError+0x28>
	__asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	60bb      	str	r3, [r7, #8]
}
 8004908:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800490a:	bf00      	nop
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0fc      	beq.n	800490c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	2000000c 	.word	0x2000000c
	...

08004930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004930:	4b07      	ldr	r3, [pc, #28]	; (8004950 <pxCurrentTCBConst2>)
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	6808      	ldr	r0, [r1, #0]
 8004936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493a:	f380 8809 	msr	PSP, r0
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f04f 0000 	mov.w	r0, #0
 8004946:	f380 8811 	msr	BASEPRI, r0
 800494a:	4770      	bx	lr
 800494c:	f3af 8000 	nop.w

08004950 <pxCurrentTCBConst2>:
 8004950:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop

08004958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004958:	4808      	ldr	r0, [pc, #32]	; (800497c <prvPortStartFirstTask+0x24>)
 800495a:	6800      	ldr	r0, [r0, #0]
 800495c:	6800      	ldr	r0, [r0, #0]
 800495e:	f380 8808 	msr	MSP, r0
 8004962:	f04f 0000 	mov.w	r0, #0
 8004966:	f380 8814 	msr	CONTROL, r0
 800496a:	b662      	cpsie	i
 800496c:	b661      	cpsie	f
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	df00      	svc	0
 8004978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800497a:	bf00      	nop
 800497c:	e000ed08 	.word	0xe000ed08

08004980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004986:	4b46      	ldr	r3, [pc, #280]	; (8004aa0 <xPortStartScheduler+0x120>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a46      	ldr	r2, [pc, #280]	; (8004aa4 <xPortStartScheduler+0x124>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d10a      	bne.n	80049a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	613b      	str	r3, [r7, #16]
}
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049a6:	4b3e      	ldr	r3, [pc, #248]	; (8004aa0 <xPortStartScheduler+0x120>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a3f      	ldr	r2, [pc, #252]	; (8004aa8 <xPortStartScheduler+0x128>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d10a      	bne.n	80049c6 <xPortStartScheduler+0x46>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	60fb      	str	r3, [r7, #12]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049c6:	4b39      	ldr	r3, [pc, #228]	; (8004aac <xPortStartScheduler+0x12c>)
 80049c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	22ff      	movs	r2, #255	; 0xff
 80049d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	4b31      	ldr	r3, [pc, #196]	; (8004ab0 <xPortStartScheduler+0x130>)
 80049ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049ee:	4b31      	ldr	r3, [pc, #196]	; (8004ab4 <xPortStartScheduler+0x134>)
 80049f0:	2207      	movs	r2, #7
 80049f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049f4:	e009      	b.n	8004a0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80049f6:	4b2f      	ldr	r3, [pc, #188]	; (8004ab4 <xPortStartScheduler+0x134>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	4a2d      	ldr	r2, [pc, #180]	; (8004ab4 <xPortStartScheduler+0x134>)
 80049fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a0a:	78fb      	ldrb	r3, [r7, #3]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a12:	2b80      	cmp	r3, #128	; 0x80
 8004a14:	d0ef      	beq.n	80049f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a16:	4b27      	ldr	r3, [pc, #156]	; (8004ab4 <xPortStartScheduler+0x134>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f1c3 0307 	rsb	r3, r3, #7
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d00a      	beq.n	8004a38 <xPortStartScheduler+0xb8>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	60bb      	str	r3, [r7, #8]
}
 8004a34:	bf00      	nop
 8004a36:	e7fe      	b.n	8004a36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a38:	4b1e      	ldr	r3, [pc, #120]	; (8004ab4 <xPortStartScheduler+0x134>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	4a1d      	ldr	r2, [pc, #116]	; (8004ab4 <xPortStartScheduler+0x134>)
 8004a40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a42:	4b1c      	ldr	r3, [pc, #112]	; (8004ab4 <xPortStartScheduler+0x134>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a4a:	4a1a      	ldr	r2, [pc, #104]	; (8004ab4 <xPortStartScheduler+0x134>)
 8004a4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a56:	4b18      	ldr	r3, [pc, #96]	; (8004ab8 <xPortStartScheduler+0x138>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a17      	ldr	r2, [pc, #92]	; (8004ab8 <xPortStartScheduler+0x138>)
 8004a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <xPortStartScheduler+0x138>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <xPortStartScheduler+0x138>)
 8004a68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a6e:	f000 f8dd 	bl	8004c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a72:	4b12      	ldr	r3, [pc, #72]	; (8004abc <xPortStartScheduler+0x13c>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a78:	f000 f8fc 	bl	8004c74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a7c:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <xPortStartScheduler+0x140>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a0f      	ldr	r2, [pc, #60]	; (8004ac0 <xPortStartScheduler+0x140>)
 8004a82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a88:	f7ff ff66 	bl	8004958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a8c:	f7ff f850 	bl	8003b30 <vTaskSwitchContext>
	prvTaskExitError();
 8004a90:	f7ff ff1c 	bl	80048cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	e000ed00 	.word	0xe000ed00
 8004aa4:	410fc271 	.word	0x410fc271
 8004aa8:	410fc270 	.word	0x410fc270
 8004aac:	e000e400 	.word	0xe000e400
 8004ab0:	20000df0 	.word	0x20000df0
 8004ab4:	20000df4 	.word	0x20000df4
 8004ab8:	e000ed20 	.word	0xe000ed20
 8004abc:	2000000c 	.word	0x2000000c
 8004ac0:	e000ef34 	.word	0xe000ef34

08004ac4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	607b      	str	r3, [r7, #4]
}
 8004adc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ade:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <vPortEnterCritical+0x58>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	4a0d      	ldr	r2, [pc, #52]	; (8004b1c <vPortEnterCritical+0x58>)
 8004ae6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ae8:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <vPortEnterCritical+0x58>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d10f      	bne.n	8004b10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <vPortEnterCritical+0x5c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <vPortEnterCritical+0x4c>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	603b      	str	r3, [r7, #0]
}
 8004b0c:	bf00      	nop
 8004b0e:	e7fe      	b.n	8004b0e <vPortEnterCritical+0x4a>
	}
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	2000000c 	.word	0x2000000c
 8004b20:	e000ed04 	.word	0xe000ed04

08004b24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b2a:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <vPortExitCritical+0x50>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <vPortExitCritical+0x24>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	607b      	str	r3, [r7, #4]
}
 8004b44:	bf00      	nop
 8004b46:	e7fe      	b.n	8004b46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <vPortExitCritical+0x50>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	4a09      	ldr	r2, [pc, #36]	; (8004b74 <vPortExitCritical+0x50>)
 8004b50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b52:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <vPortExitCritical+0x50>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d105      	bne.n	8004b66 <vPortExitCritical+0x42>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	f383 8811 	msr	BASEPRI, r3
}
 8004b64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	2000000c 	.word	0x2000000c
	...

08004b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b80:	f3ef 8009 	mrs	r0, PSP
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <pxCurrentTCBConst>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	f01e 0f10 	tst.w	lr, #16
 8004b90:	bf08      	it	eq
 8004b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b9a:	6010      	str	r0, [r2, #0]
 8004b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ba4:	f380 8811 	msr	BASEPRI, r0
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f7fe ffbe 	bl	8003b30 <vTaskSwitchContext>
 8004bb4:	f04f 0000 	mov.w	r0, #0
 8004bb8:	f380 8811 	msr	BASEPRI, r0
 8004bbc:	bc09      	pop	{r0, r3}
 8004bbe:	6819      	ldr	r1, [r3, #0]
 8004bc0:	6808      	ldr	r0, [r1, #0]
 8004bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc6:	f01e 0f10 	tst.w	lr, #16
 8004bca:	bf08      	it	eq
 8004bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004bd0:	f380 8809 	msr	PSP, r0
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	f3af 8000 	nop.w

08004be0 <pxCurrentTCBConst>:
 8004be0:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop

08004be8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	607b      	str	r3, [r7, #4]
}
 8004c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c02:	f7fe fedb 	bl	80039bc <xTaskIncrementTick>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <xPortSysTickHandler+0x40>)
 8004c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	2300      	movs	r3, #0
 8004c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	f383 8811 	msr	BASEPRI, r3
}
 8004c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	e000ed04 	.word	0xe000ed04

08004c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <vPortSetupTimerInterrupt+0x34>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c36:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <vPortSetupTimerInterrupt+0x38>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <vPortSetupTimerInterrupt+0x3c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <vPortSetupTimerInterrupt+0x40>)
 8004c42:	fba2 2303 	umull	r2, r3, r2, r3
 8004c46:	099b      	lsrs	r3, r3, #6
 8004c48:	4a09      	ldr	r2, [pc, #36]	; (8004c70 <vPortSetupTimerInterrupt+0x44>)
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c4e:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <vPortSetupTimerInterrupt+0x34>)
 8004c50:	2207      	movs	r2, #7
 8004c52:	601a      	str	r2, [r3, #0]
}
 8004c54:	bf00      	nop
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	e000e010 	.word	0xe000e010
 8004c64:	e000e018 	.word	0xe000e018
 8004c68:	20000000 	.word	0x20000000
 8004c6c:	10624dd3 	.word	0x10624dd3
 8004c70:	e000e014 	.word	0xe000e014

08004c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c84 <vPortEnableVFP+0x10>
 8004c78:	6801      	ldr	r1, [r0, #0]
 8004c7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c7e:	6001      	str	r1, [r0, #0]
 8004c80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c82:	bf00      	nop
 8004c84:	e000ed88 	.word	0xe000ed88

08004c88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c8e:	f3ef 8305 	mrs	r3, IPSR
 8004c92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b0f      	cmp	r3, #15
 8004c98:	d914      	bls.n	8004cc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c9a:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <vPortValidateInterruptPriority+0x70>)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ca4:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <vPortValidateInterruptPriority+0x74>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	7afa      	ldrb	r2, [r7, #11]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d20a      	bcs.n	8004cc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	607b      	str	r3, [r7, #4]
}
 8004cc0:	bf00      	nop
 8004cc2:	e7fe      	b.n	8004cc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004cc4:	4b0e      	ldr	r3, [pc, #56]	; (8004d00 <vPortValidateInterruptPriority+0x78>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <vPortValidateInterruptPriority+0x7c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d90a      	bls.n	8004cea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	603b      	str	r3, [r7, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	e7fe      	b.n	8004ce8 <vPortValidateInterruptPriority+0x60>
	}
 8004cea:	bf00      	nop
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	e000e3f0 	.word	0xe000e3f0
 8004cfc:	20000df0 	.word	0x20000df0
 8004d00:	e000ed0c 	.word	0xe000ed0c
 8004d04:	20000df4 	.word	0x20000df4

08004d08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08a      	sub	sp, #40	; 0x28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d14:	f7fe fd96 	bl	8003844 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d18:	4b5b      	ldr	r3, [pc, #364]	; (8004e88 <pvPortMalloc+0x180>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d20:	f000 f920 	bl	8004f64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d24:	4b59      	ldr	r3, [pc, #356]	; (8004e8c <pvPortMalloc+0x184>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f040 8093 	bne.w	8004e58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01d      	beq.n	8004d74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d38:	2208      	movs	r2, #8
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d014      	beq.n	8004d74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f023 0307 	bic.w	r3, r3, #7
 8004d50:	3308      	adds	r3, #8
 8004d52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <pvPortMalloc+0x6c>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	617b      	str	r3, [r7, #20]
}
 8004d70:	bf00      	nop
 8004d72:	e7fe      	b.n	8004d72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d06e      	beq.n	8004e58 <pvPortMalloc+0x150>
 8004d7a:	4b45      	ldr	r3, [pc, #276]	; (8004e90 <pvPortMalloc+0x188>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d869      	bhi.n	8004e58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d84:	4b43      	ldr	r3, [pc, #268]	; (8004e94 <pvPortMalloc+0x18c>)
 8004d86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d88:	4b42      	ldr	r3, [pc, #264]	; (8004e94 <pvPortMalloc+0x18c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d8e:	e004      	b.n	8004d9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d903      	bls.n	8004dac <pvPortMalloc+0xa4>
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f1      	bne.n	8004d90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004dac:	4b36      	ldr	r3, [pc, #216]	; (8004e88 <pvPortMalloc+0x180>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d050      	beq.n	8004e58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2208      	movs	r2, #8
 8004dbc:	4413      	add	r3, r2
 8004dbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	1ad2      	subs	r2, r2, r3
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d91f      	bls.n	8004e18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <pvPortMalloc+0xf8>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	613b      	str	r3, [r7, #16]
}
 8004dfc:	bf00      	nop
 8004dfe:	e7fe      	b.n	8004dfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	1ad2      	subs	r2, r2, r3
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e12:	69b8      	ldr	r0, [r7, #24]
 8004e14:	f000 f908 	bl	8005028 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e18:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <pvPortMalloc+0x188>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <pvPortMalloc+0x188>)
 8004e24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e26:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <pvPortMalloc+0x188>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <pvPortMalloc+0x190>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d203      	bcs.n	8004e3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e32:	4b17      	ldr	r3, [pc, #92]	; (8004e90 <pvPortMalloc+0x188>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <pvPortMalloc+0x190>)
 8004e38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <pvPortMalloc+0x184>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	431a      	orrs	r2, r3
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e4e:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <pvPortMalloc+0x194>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3301      	adds	r3, #1
 8004e54:	4a11      	ldr	r2, [pc, #68]	; (8004e9c <pvPortMalloc+0x194>)
 8004e56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e58:	f7fe fd02 	bl	8003860 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <pvPortMalloc+0x174>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	60fb      	str	r3, [r7, #12]
}
 8004e78:	bf00      	nop
 8004e7a:	e7fe      	b.n	8004e7a <pvPortMalloc+0x172>
	return pvReturn;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3728      	adds	r7, #40	; 0x28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20004a00 	.word	0x20004a00
 8004e8c:	20004a14 	.word	0x20004a14
 8004e90:	20004a04 	.word	0x20004a04
 8004e94:	200049f8 	.word	0x200049f8
 8004e98:	20004a08 	.word	0x20004a08
 8004e9c:	20004a0c 	.word	0x20004a0c

08004ea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d04d      	beq.n	8004f4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	425b      	negs	r3, r3
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4413      	add	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <vPortFree+0xb8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10a      	bne.n	8004ee4 <vPortFree+0x44>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	60fb      	str	r3, [r7, #12]
}
 8004ee0:	bf00      	nop
 8004ee2:	e7fe      	b.n	8004ee2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <vPortFree+0x62>
	__asm volatile
 8004eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef0:	f383 8811 	msr	BASEPRI, r3
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	60bb      	str	r3, [r7, #8]
}
 8004efe:	bf00      	nop
 8004f00:	e7fe      	b.n	8004f00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	4b14      	ldr	r3, [pc, #80]	; (8004f58 <vPortFree+0xb8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01e      	beq.n	8004f4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d11a      	bne.n	8004f4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <vPortFree+0xb8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	43db      	mvns	r3, r3
 8004f22:	401a      	ands	r2, r3
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f28:	f7fe fc8c 	bl	8003844 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <vPortFree+0xbc>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4413      	add	r3, r2
 8004f36:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <vPortFree+0xbc>)
 8004f38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f3a:	6938      	ldr	r0, [r7, #16]
 8004f3c:	f000 f874 	bl	8005028 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f40:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <vPortFree+0xc0>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3301      	adds	r3, #1
 8004f46:	4a06      	ldr	r2, [pc, #24]	; (8004f60 <vPortFree+0xc0>)
 8004f48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f4a:	f7fe fc89 	bl	8003860 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f4e:	bf00      	nop
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20004a14 	.word	0x20004a14
 8004f5c:	20004a04 	.word	0x20004a04
 8004f60:	20004a10 	.word	0x20004a10

08004f64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f70:	4b27      	ldr	r3, [pc, #156]	; (8005010 <prvHeapInit+0xac>)
 8004f72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00c      	beq.n	8004f98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3307      	adds	r3, #7
 8004f82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0307 	bic.w	r3, r3, #7
 8004f8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	4a1f      	ldr	r2, [pc, #124]	; (8005010 <prvHeapInit+0xac>)
 8004f94:	4413      	add	r3, r2
 8004f96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f9c:	4a1d      	ldr	r2, [pc, #116]	; (8005014 <prvHeapInit+0xb0>)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fa2:	4b1c      	ldr	r3, [pc, #112]	; (8005014 <prvHeapInit+0xb0>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	4413      	add	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004fb0:	2208      	movs	r2, #8
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0307 	bic.w	r3, r3, #7
 8004fbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4a15      	ldr	r2, [pc, #84]	; (8005018 <prvHeapInit+0xb4>)
 8004fc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004fc6:	4b14      	ldr	r3, [pc, #80]	; (8005018 <prvHeapInit+0xb4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004fce:	4b12      	ldr	r3, [pc, #72]	; (8005018 <prvHeapInit+0xb4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	1ad2      	subs	r2, r2, r3
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <prvHeapInit+0xb4>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	4a0a      	ldr	r2, [pc, #40]	; (800501c <prvHeapInit+0xb8>)
 8004ff2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	4a09      	ldr	r2, [pc, #36]	; (8005020 <prvHeapInit+0xbc>)
 8004ffa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ffc:	4b09      	ldr	r3, [pc, #36]	; (8005024 <prvHeapInit+0xc0>)
 8004ffe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005002:	601a      	str	r2, [r3, #0]
}
 8005004:	bf00      	nop
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	20000df8 	.word	0x20000df8
 8005014:	200049f8 	.word	0x200049f8
 8005018:	20004a00 	.word	0x20004a00
 800501c:	20004a08 	.word	0x20004a08
 8005020:	20004a04 	.word	0x20004a04
 8005024:	20004a14 	.word	0x20004a14

08005028 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005030:	4b28      	ldr	r3, [pc, #160]	; (80050d4 <prvInsertBlockIntoFreeList+0xac>)
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	e002      	b.n	800503c <prvInsertBlockIntoFreeList+0x14>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	429a      	cmp	r2, r3
 8005044:	d8f7      	bhi.n	8005036 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	4413      	add	r3, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	429a      	cmp	r2, r3
 8005056:	d108      	bne.n	800506a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	441a      	add	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	441a      	add	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	d118      	bne.n	80050b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b15      	ldr	r3, [pc, #84]	; (80050d8 <prvInsertBlockIntoFreeList+0xb0>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d00d      	beq.n	80050a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	441a      	add	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	e008      	b.n	80050b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050a6:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <prvInsertBlockIntoFreeList+0xb0>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	e003      	b.n	80050b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d002      	beq.n	80050c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	200049f8 	.word	0x200049f8
 80050d8:	20004a00 	.word	0x20004a00

080050dc <__libc_init_array>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	4d0d      	ldr	r5, [pc, #52]	; (8005114 <__libc_init_array+0x38>)
 80050e0:	4c0d      	ldr	r4, [pc, #52]	; (8005118 <__libc_init_array+0x3c>)
 80050e2:	1b64      	subs	r4, r4, r5
 80050e4:	10a4      	asrs	r4, r4, #2
 80050e6:	2600      	movs	r6, #0
 80050e8:	42a6      	cmp	r6, r4
 80050ea:	d109      	bne.n	8005100 <__libc_init_array+0x24>
 80050ec:	4d0b      	ldr	r5, [pc, #44]	; (800511c <__libc_init_array+0x40>)
 80050ee:	4c0c      	ldr	r4, [pc, #48]	; (8005120 <__libc_init_array+0x44>)
 80050f0:	f000 f82e 	bl	8005150 <_init>
 80050f4:	1b64      	subs	r4, r4, r5
 80050f6:	10a4      	asrs	r4, r4, #2
 80050f8:	2600      	movs	r6, #0
 80050fa:	42a6      	cmp	r6, r4
 80050fc:	d105      	bne.n	800510a <__libc_init_array+0x2e>
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	f855 3b04 	ldr.w	r3, [r5], #4
 8005104:	4798      	blx	r3
 8005106:	3601      	adds	r6, #1
 8005108:	e7ee      	b.n	80050e8 <__libc_init_array+0xc>
 800510a:	f855 3b04 	ldr.w	r3, [r5], #4
 800510e:	4798      	blx	r3
 8005110:	3601      	adds	r6, #1
 8005112:	e7f2      	b.n	80050fa <__libc_init_array+0x1e>
 8005114:	080051bc 	.word	0x080051bc
 8005118:	080051bc 	.word	0x080051bc
 800511c:	080051bc 	.word	0x080051bc
 8005120:	080051c0 	.word	0x080051c0

08005124 <memcpy>:
 8005124:	440a      	add	r2, r1
 8005126:	4291      	cmp	r1, r2
 8005128:	f100 33ff 	add.w	r3, r0, #4294967295
 800512c:	d100      	bne.n	8005130 <memcpy+0xc>
 800512e:	4770      	bx	lr
 8005130:	b510      	push	{r4, lr}
 8005132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800513a:	4291      	cmp	r1, r2
 800513c:	d1f9      	bne.n	8005132 <memcpy+0xe>
 800513e:	bd10      	pop	{r4, pc}

08005140 <memset>:
 8005140:	4402      	add	r2, r0
 8005142:	4603      	mov	r3, r0
 8005144:	4293      	cmp	r3, r2
 8005146:	d100      	bne.n	800514a <memset+0xa>
 8005148:	4770      	bx	lr
 800514a:	f803 1b01 	strb.w	r1, [r3], #1
 800514e:	e7f9      	b.n	8005144 <memset+0x4>

08005150 <_init>:
 8005150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005152:	bf00      	nop
 8005154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005156:	bc08      	pop	{r3}
 8005158:	469e      	mov	lr, r3
 800515a:	4770      	bx	lr

0800515c <_fini>:
 800515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515e:	bf00      	nop
 8005160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005162:	bc08      	pop	{r3}
 8005164:	469e      	mov	lr, r3
 8005166:	4770      	bx	lr
