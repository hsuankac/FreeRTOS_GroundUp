
20_semaphore_mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800645c  0800645c  0001645c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006598  08006598  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006598  08006598  00016598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065a0  080065a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a0  080065a0  000165a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065a4  080065a4  000165a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080065a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a18  20000074  0800661c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a8c  0800661c  00024a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188ee  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003638  00000000  00000000  00038992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0003bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0003d4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001906a  00000000  00000000  0003e858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d33  00000000  00000000  000578c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000999a6  00000000  00000000  000705f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00109f9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f48  00000000  00000000  00109fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006444 	.word	0x08006444

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006444 	.word	0x08006444

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <adc_init>:

#define ADC_CH1			(1U<<0)
#define ADC_SEQ_LEN_1	 0x00

void adc_init()
	{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <adc_init+0x50>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058c:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <adc_init+0x50>)
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR|=RCC_APB2ENR_ADC1EN;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <adc_init+0x50>)
 8000596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000598:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <adc_init+0x50>)
 800059a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059e:	6453      	str	r3, [r2, #68]	; 0x44
	GPIOA->MODER|=GPIO_MODER_MODE1;
 80005a0:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <adc_init+0x54>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0c      	ldr	r2, [pc, #48]	; (80005d8 <adc_init+0x54>)
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	6013      	str	r3, [r2, #0]

	ADC1->CR2=0;
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <adc_init+0x58>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]

	/*Conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 80005b2:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <adc_init+0x58>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	635a      	str	r2, [r3, #52]	; 0x34

	/*Conversion sequence length*/
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <adc_init+0x58>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |= ADC_CR2_ADON;
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <adc_init+0x58>)
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	4a06      	ldr	r2, [pc, #24]	; (80005dc <adc_init+0x58>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6093      	str	r3, [r2, #8]

	}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020000 	.word	0x40020000
 80005dc:	40012000 	.word	0x40012000

080005e0 <read_analog_sensor>:

uint32_t read_analog_sensor(void)
	{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	ADC1->CR2|=ADC_CR2_SWSTART;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <read_analog_sensor+0x2c>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	4a08      	ldr	r2, [pc, #32]	; (800060c <read_analog_sensor+0x2c>)
 80005ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80005ee:	6093      	str	r3, [r2, #8]
	/*Wait for conversion to be complete*/
	while(!(ADC1->SR & ADC_SR_EOC)){}
 80005f0:	bf00      	nop
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <read_analog_sensor+0x2c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0f9      	beq.n	80005f2 <read_analog_sensor+0x12>

	/*Read converted result*/
	return (ADC1->DR);
 80005fe:	4b03      	ldr	r3, [pc, #12]	; (800060c <read_analog_sensor+0x2c>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

	}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	40012000 	.word	0x40012000

08000610 <gpio_init>:
	__enable_irq();

}

void gpio_init()
	{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
	/*Enable clock access for GPIOC*/
	RCC->AHB1ENR |=GPIOCEN;
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <gpio_init+0x34>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <gpio_init+0x34>)
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set PC13 as input*/
	GPIOC->MODER &=~(1U<<26);
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <gpio_init+0x38>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a08      	ldr	r2, [pc, #32]	; (8000648 <gpio_init+0x38>)
 8000626:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800062a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <gpio_init+0x38>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a05      	ldr	r2, [pc, #20]	; (8000648 <gpio_init+0x38>)
 8000632:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000636:	6013      	str	r3, [r2, #0]


	}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40020800 	.word	0x40020800

0800064c <read_digital_sensor>:

uint8_t read_digital_sensor()
	{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

	if (GPIOC->IDR & GPIO_IDR_ID13)
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <read_digital_sensor+0x20>)
 8000652:	691b      	ldr	r3, [r3, #16]
 8000654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <read_digital_sensor+0x14>
		{
		return 1;
 800065c:	2301      	movs	r3, #1
 800065e:	e000      	b.n	8000662 <read_digital_sensor+0x16>
		}
	else return 0;
 8000660:	2300      	movs	r3, #0
	}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	40020800 	.word	0x40020800

08000670 <main>:

void digital_sensor_task(void *pvParameters);
void analog_sensor_task(void *pvParameters);

int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af02      	add	r7, sp, #8

  HAL_Init();
 8000676:	f000 fb35 	bl	8000ce4 <HAL_Init>


  SystemClock_Config();
 800067a:	f000 f889 	bl	8000790 <SystemClock_Config>
  MX_GPIO_Init();
 800067e:	f000 f8e5 	bl	800084c <MX_GPIO_Init>
  USART2_UART_TX_Init();
 8000682:	f000 fab7 	bl	8000bf4 <USART2_UART_TX_Init>


  printf("system initializing........\r\n");
 8000686:	4810      	ldr	r0, [pc, #64]	; (80006c8 <main+0x58>)
 8000688:	f004 ff5e 	bl	8005548 <puts>
  xSerialSemaphore=xSemaphoreCreateMutex();
 800068c:	2001      	movs	r0, #1
 800068e:	f002 f9ec 	bl	8002a6a <xQueueCreateMutex>
 8000692:	4603      	mov	r3, r0
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <main+0x5c>)
 8000696:	6013      	str	r3, [r2, #0]
  xTaskCreate(digital_sensor_task,"buttonRead",128,NULL,1,NULL);
 8000698:	2300      	movs	r3, #0
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	2301      	movs	r3, #1
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2300      	movs	r3, #0
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	490a      	ldr	r1, [pc, #40]	; (80006d0 <main+0x60>)
 80006a6:	480b      	ldr	r0, [pc, #44]	; (80006d4 <main+0x64>)
 80006a8:	f002 ff61 	bl	800356e <xTaskCreate>
  xTaskCreate(analog_sensor_task,"SensorRead",128,NULL,2,NULL);
 80006ac:	2300      	movs	r3, #0
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	2302      	movs	r3, #2
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2300      	movs	r3, #0
 80006b6:	2280      	movs	r2, #128	; 0x80
 80006b8:	4907      	ldr	r1, [pc, #28]	; (80006d8 <main+0x68>)
 80006ba:	4808      	ldr	r0, [pc, #32]	; (80006dc <main+0x6c>)
 80006bc:	f002 ff57 	bl	800356e <xTaskCreate>
  vTaskStartScheduler();
 80006c0:	f003 f8ce 	bl	8003860 <vTaskStartScheduler>

  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0x54>
 80006c6:	bf00      	nop
 80006c8:	0800645c 	.word	0x0800645c
 80006cc:	200000dc 	.word	0x200000dc
 80006d0:	0800647c 	.word	0x0800647c
 80006d4:	080006e1 	.word	0x080006e1
 80006d8:	08006488 	.word	0x08006488
 80006dc:	08000739 	.word	0x08000739

080006e0 <digital_sensor_task>:




void digital_sensor_task(void *pvParameters)
	{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

	  gpio_init();
 80006e8:	f7ff ff92 	bl	8000610 <gpio_init>
	while(1)
		{
		btn_state=read_digital_sensor();
 80006ec:	f7ff ffae 	bl	800064c <read_digital_sensor>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <digital_sensor_task+0x4c>)
 80006f6:	701a      	strb	r2, [r3, #0]
		if(xQueueSemaphoreTake(xSerialSemaphore, (TickType_t )5)==pdTRUE)
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <digital_sensor_task+0x50>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2105      	movs	r1, #5
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fc46 	bl	8002f90 <xQueueSemaphoreTake>
 8000704:	4603      	mov	r3, r0
 8000706:	2b01      	cmp	r3, #1
 8000708:	d105      	bne.n	8000716 <digital_sensor_task+0x36>
			{
			printf("The button state is %d \r\n",btn_state);
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <digital_sensor_task+0x4c>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4619      	mov	r1, r3
 8000710:	4808      	ldr	r0, [pc, #32]	; (8000734 <digital_sensor_task+0x54>)
 8000712:	f004 fe93 	bl	800543c <iprintf>

			}
		xSemaphoreGive(xSerialSemaphore);
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <digital_sensor_task+0x50>)
 8000718:	6818      	ldr	r0, [r3, #0]
 800071a:	2300      	movs	r3, #0
 800071c:	2200      	movs	r2, #0
 800071e:	2100      	movs	r1, #0
 8000720:	f002 f9bc 	bl	8002a9c <xQueueGenericSend>
		vTaskDelay(100);
 8000724:	2064      	movs	r0, #100	; 0x64
 8000726:	f003 f867 	bl	80037f8 <vTaskDelay>
		btn_state=read_digital_sensor();
 800072a:	e7df      	b.n	80006ec <digital_sensor_task+0xc>
 800072c:	200000d4 	.word	0x200000d4
 8000730:	200000dc 	.word	0x200000dc
 8000734:	08006494 	.word	0x08006494

08000738 <analog_sensor_task>:
		}

	}

void analog_sensor_task(void *pvParameters)
	{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	adc_init();
 8000740:	f7ff ff20 	bl	8000584 <adc_init>
	while(1)
		{
		sensor_value=read_analog_sensor();
 8000744:	f7ff ff4c 	bl	80005e0 <read_analog_sensor>
 8000748:	4603      	mov	r3, r0
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <analog_sensor_task+0x4c>)
 800074c:	6013      	str	r3, [r2, #0]
		if(xQueueSemaphoreTake(xSerialSemaphore, (TickType_t )5)==pdTRUE)
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <analog_sensor_task+0x50>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2105      	movs	r1, #5
 8000754:	4618      	mov	r0, r3
 8000756:	f002 fc1b 	bl	8002f90 <xQueueSemaphoreTake>
 800075a:	4603      	mov	r3, r0
 800075c:	2b01      	cmp	r3, #1
 800075e:	d105      	bne.n	800076c <analog_sensor_task+0x34>
		{
		printf("Analog sensor value is %ld \r\n",sensor_value);
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <analog_sensor_task+0x4c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	4809      	ldr	r0, [pc, #36]	; (800078c <analog_sensor_task+0x54>)
 8000768:	f004 fe68 	bl	800543c <iprintf>

		}
		xSemaphoreGive(xSerialSemaphore);
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <analog_sensor_task+0x50>)
 800076e:	6818      	ldr	r0, [r3, #0]
 8000770:	2300      	movs	r3, #0
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	f002 f991 	bl	8002a9c <xQueueGenericSend>
		vTaskDelay(100);
 800077a:	2064      	movs	r0, #100	; 0x64
 800077c:	f003 f83c 	bl	80037f8 <vTaskDelay>
		sensor_value=read_analog_sensor();
 8000780:	e7e0      	b.n	8000744 <analog_sensor_task+0xc>
 8000782:	bf00      	nop
 8000784:	200000d8 	.word	0x200000d8
 8000788:	200000dc 	.word	0x200000dc
 800078c:	080064b0 	.word	0x080064b0

08000790 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b094      	sub	sp, #80	; 0x50
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	2230      	movs	r2, #48	; 0x30
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f004 fe44 	bl	800542c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <SystemClock_Config+0xb4>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	4a21      	ldr	r2, [pc, #132]	; (8000844 <SystemClock_Config+0xb4>)
 80007be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c2:	6413      	str	r3, [r2, #64]	; 0x40
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <SystemClock_Config+0xb4>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <SystemClock_Config+0xb8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <SystemClock_Config+0xb8>)
 80007da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <SystemClock_Config+0xb8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	2310      	movs	r3, #16
 80007f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fd17 	bl	8001234 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800080c:	f000 f84a 	bl	80008a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f000 ff7a 	bl	8001724 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000836:	f000 f835 	bl	80008a4 <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3750      	adds	r7, #80	; 0x50
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_GPIO_Init+0x30>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <MX_GPIO_Init+0x30>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_GPIO_Init+0x30>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d101      	bne.n	8000896 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000892:	f000 fa49 	bl	8000d28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40014800 	.word	0x40014800

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_MspInit+0x54>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a11      	ldr	r2, [pc, #68]	; (8000904 <HAL_MspInit+0x54>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_MspInit+0x54>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <HAL_MspInit+0x54>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <HAL_MspInit+0x54>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_MspInit+0x54>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	210f      	movs	r1, #15
 80008f2:	f06f 0001 	mvn.w	r0, #1
 80008f6:	f000 faef 	bl	8000ed8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a19      	ldr	r2, [pc, #100]	; (800098c <HAL_UART_MspInit+0x84>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d12b      	bne.n	8000982 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <HAL_UART_MspInit+0x88>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a17      	ldr	r2, [pc, #92]	; (8000990 <HAL_UART_MspInit+0x88>)
 8000934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_UART_MspInit+0x88>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <HAL_UART_MspInit+0x88>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <HAL_UART_MspInit+0x88>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_UART_MspInit+0x88>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000962:	230c      	movs	r3, #12
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000972:	2307      	movs	r3, #7
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <HAL_UART_MspInit+0x8c>)
 800097e:	f000 fad5 	bl	8000f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000982:	bf00      	nop
 8000984:	3728      	adds	r7, #40	; 0x28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40004400 	.word	0x40004400
 8000990:	40023800 	.word	0x40023800
 8000994:	40020000 	.word	0x40020000

08000998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	; 0x30
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	201a      	movs	r0, #26
 80009ae:	f000 fa93 	bl	8000ed8 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80009b2:	201a      	movs	r0, #26
 80009b4:	f000 faac 	bl	8000f10 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <HAL_InitTick+0xa0>)
 80009be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c0:	4a1d      	ldr	r2, [pc, #116]	; (8000a38 <HAL_InitTick+0xa0>)
 80009c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c6:	6453      	str	r3, [r2, #68]	; 0x44
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <HAL_InitTick+0xa0>)
 80009ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d4:	f107 0210 	add.w	r2, r7, #16
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 f880 	bl	8001ae4 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009e4:	f001 f86a 	bl	8001abc <HAL_RCC_GetPCLK2Freq>
 80009e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <HAL_InitTick+0xa4>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	0c9b      	lsrs	r3, r3, #18
 80009f4:	3b01      	subs	r3, #1
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_InitTick+0xa8>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <HAL_InitTick+0xac>)
 80009fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a04:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a1a:	f001 f895 	bl	8001b48 <HAL_TIM_Base_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d104      	bne.n	8000a2e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <HAL_InitTick+0xa8>)
 8000a26:	f001 f8e9 	bl	8001bfc <HAL_TIM_Base_Start_IT>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3730      	adds	r7, #48	; 0x30
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	431bde83 	.word	0x431bde83
 8000a40:	200000e0 	.word	0x200000e0
 8000a44:	40014800 	.word	0x40014800

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000a7a:	f001 f921 	bl	8001cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000e0 	.word	0x200000e0

08000a88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e00a      	b.n	8000ab0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a9a:	f3af 8000 	nop.w
 8000a9e:	4601      	mov	r1, r0
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	60ba      	str	r2, [r7, #8]
 8000aa6:	b2ca      	uxtb	r2, r1
 8000aa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbf0      	blt.n	8000a9a <_read+0x12>
	}

return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	e009      	b.n	8000ae8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	60ba      	str	r2, [r7, #8]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f8cb 	bl	8000c78 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf1      	blt.n	8000ad4 <_write+0x12>
	}
	return len;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_close>:

int _close(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
	return -1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b22:	605a      	str	r2, [r3, #4]
	return 0;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <_isatty>:

int _isatty(int file)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
	return 1;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
	return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f004 fc12 	bl	80053bc <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20020000 	.word	0x20020000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	20000128 	.word	0x20000128
 8000bcc:	20004a90 	.word	0x20004a90

08000bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <USART2_UART_TX_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
 void USART2_UART_TX_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <USART2_UART_TX_Init+0x4c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <USART2_UART_TX_Init+0x50>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <USART2_UART_TX_Init+0x4c>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <USART2_UART_TX_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <USART2_UART_TX_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <USART2_UART_TX_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <USART2_UART_TX_Init+0x4c>)
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <USART2_UART_TX_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <USART2_UART_TX_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <USART2_UART_TX_Init+0x4c>)
 8000c2c:	f001 fa0c 	bl	8002048 <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <USART2_UART_TX_Init+0x46>
  {
    Error_Handler();
 8000c36:	f7ff fe35 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000090 	.word	0x20000090
 8000c44:	40004400 	.word	0x40004400

08000c48 <uart2_write>:




 int uart2_write(int ch)
 	{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 	/*Make sure the transmit data register is empty*/
 	while(!(USART2->SR & USART_SR_TXE)){}
 8000c50:	bf00      	nop
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <uart2_write+0x2c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0f9      	beq.n	8000c52 <uart2_write+0xa>

 	 /*Write to transmit data register*/
 	USART2->DR	=  (ch & 0xFF);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <uart2_write+0x2c>)
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	6053      	str	r3, [r2, #4]
 	return ch;
 8000c66:	687b      	ldr	r3, [r7, #4]
 	}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	40004400 	.word	0x40004400

08000c78 <__io_putchar>:


 int __io_putchar(int ch)
 	{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	 uart2_write(ch);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ffe1 	bl	8000c48 <uart2_write>
 	return ch;
 8000c86:	687b      	ldr	r3, [r7, #4]
 	}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c96:	490e      	ldr	r1, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c98:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cac:	4c0b      	ldr	r4, [pc, #44]	; (8000cdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cba:	f7ff ff89 	bl	8000bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f004 fb83 	bl	80053c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc2:	f7ff fcd5 	bl	8000670 <main>
  bx  lr    
 8000cc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cd4:	080065a8 	.word	0x080065a8
  ldr r2, =_sbss
 8000cd8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cdc:	20004a8c 	.word	0x20004a8c

08000ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_Init+0x40>)
 8000cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_Init+0x40>)
 8000cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_Init+0x40>)
 8000d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 f8d8 	bl	8000ec2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d12:	200f      	movs	r0, #15
 8000d14:	f7ff fe40 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d18:	f7ff fdca 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	2000012c 	.word	0x2000012c

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	2000012c 	.word	0x2000012c

08000d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	db0b      	blt.n	8000df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f003 021f 	and.w	r2, r3, #31
 8000de4:	4907      	ldr	r1, [pc, #28]	; (8000e04 <__NVIC_EnableIRQ+0x38>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	095b      	lsrs	r3, r3, #5
 8000dec:	2001      	movs	r0, #1
 8000dee:	fa00 f202 	lsl.w	r2, r0, r2
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000e100 	.word	0xe000e100

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	; (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	; (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ff4c 	bl	8000d68 <__NVIC_SetPriorityGrouping>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eea:	f7ff ff61 	bl	8000db0 <__NVIC_GetPriorityGrouping>
 8000eee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	68b9      	ldr	r1, [r7, #8]
 8000ef4:	6978      	ldr	r0, [r7, #20]
 8000ef6:	f7ff ffb1 	bl	8000e5c <NVIC_EncodePriority>
 8000efa:	4602      	mov	r2, r0
 8000efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff80 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f08:	bf00      	nop
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff54 	bl	8000dcc <__NVIC_EnableIRQ>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	e159      	b.n	80011fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	f040 8148 	bne.w	80011f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d005      	beq.n	8000f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d130      	bne.n	8000fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	091b      	lsrs	r3, r3, #4
 8000fca:	f003 0201 	and.w	r2, r3, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d017      	beq.n	800101c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d123      	bne.n	8001070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	691a      	ldr	r2, [r3, #16]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	69b9      	ldr	r1, [r7, #24]
 800106c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0203 	and.w	r2, r3, #3
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 80a2 	beq.w	80011f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b57      	ldr	r3, [pc, #348]	; (8001214 <HAL_GPIO_Init+0x2e8>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a56      	ldr	r2, [pc, #344]	; (8001214 <HAL_GPIO_Init+0x2e8>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b54      	ldr	r3, [pc, #336]	; (8001214 <HAL_GPIO_Init+0x2e8>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ce:	4a52      	ldr	r2, [pc, #328]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	3302      	adds	r3, #2
 80010d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	220f      	movs	r2, #15
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a49      	ldr	r2, [pc, #292]	; (800121c <HAL_GPIO_Init+0x2f0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d019      	beq.n	800112e <HAL_GPIO_Init+0x202>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a48      	ldr	r2, [pc, #288]	; (8001220 <HAL_GPIO_Init+0x2f4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d013      	beq.n	800112a <HAL_GPIO_Init+0x1fe>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a47      	ldr	r2, [pc, #284]	; (8001224 <HAL_GPIO_Init+0x2f8>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d00d      	beq.n	8001126 <HAL_GPIO_Init+0x1fa>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a46      	ldr	r2, [pc, #280]	; (8001228 <HAL_GPIO_Init+0x2fc>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d007      	beq.n	8001122 <HAL_GPIO_Init+0x1f6>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a45      	ldr	r2, [pc, #276]	; (800122c <HAL_GPIO_Init+0x300>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d101      	bne.n	800111e <HAL_GPIO_Init+0x1f2>
 800111a:	2304      	movs	r3, #4
 800111c:	e008      	b.n	8001130 <HAL_GPIO_Init+0x204>
 800111e:	2307      	movs	r3, #7
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x204>
 8001122:	2303      	movs	r3, #3
 8001124:	e004      	b.n	8001130 <HAL_GPIO_Init+0x204>
 8001126:	2302      	movs	r3, #2
 8001128:	e002      	b.n	8001130 <HAL_GPIO_Init+0x204>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_GPIO_Init+0x204>
 800112e:	2300      	movs	r3, #0
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	f002 0203 	and.w	r2, r2, #3
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	4093      	lsls	r3, r2
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001140:	4935      	ldr	r1, [pc, #212]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114e:	4b38      	ldr	r3, [pc, #224]	; (8001230 <HAL_GPIO_Init+0x304>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001172:	4a2f      	ldr	r2, [pc, #188]	; (8001230 <HAL_GPIO_Init+0x304>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <HAL_GPIO_Init+0x304>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119c:	4a24      	ldr	r2, [pc, #144]	; (8001230 <HAL_GPIO_Init+0x304>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <HAL_GPIO_Init+0x304>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c6:	4a1a      	ldr	r2, [pc, #104]	; (8001230 <HAL_GPIO_Init+0x304>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_GPIO_Init+0x304>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f0:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <HAL_GPIO_Init+0x304>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3301      	adds	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	f67f aea2 	bls.w	8000f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40013800 	.word	0x40013800
 800121c:	40020000 	.word	0x40020000
 8001220:	40020400 	.word	0x40020400
 8001224:	40020800 	.word	0x40020800
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40021000 	.word	0x40021000
 8001230:	40013c00 	.word	0x40013c00

08001234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e267      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d075      	beq.n	800133e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001252:	4b88      	ldr	r3, [pc, #544]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	d00c      	beq.n	8001278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125e:	4b85      	ldr	r3, [pc, #532]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001266:	2b08      	cmp	r3, #8
 8001268:	d112      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126a:	4b82      	ldr	r3, [pc, #520]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001276:	d10b      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	4b7e      	ldr	r3, [pc, #504]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d05b      	beq.n	800133c <HAL_RCC_OscConfig+0x108>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d157      	bne.n	800133c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e242      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001298:	d106      	bne.n	80012a8 <HAL_RCC_OscConfig+0x74>
 800129a:	4b76      	ldr	r3, [pc, #472]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a75      	ldr	r2, [pc, #468]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e01d      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x98>
 80012b2:	4b70      	ldr	r3, [pc, #448]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6f      	ldr	r2, [pc, #444]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b6d      	ldr	r3, [pc, #436]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6c      	ldr	r2, [pc, #432]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e00b      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012cc:	4b69      	ldr	r3, [pc, #420]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a68      	ldr	r2, [pc, #416]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b66      	ldr	r3, [pc, #408]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a65      	ldr	r2, [pc, #404]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fd30 	bl	8000d50 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fd2c 	bl	8000d50 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e207      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	4b5b      	ldr	r3, [pc, #364]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0xc0>
 8001312:	e014      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fd1c 	bl	8000d50 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fd18 	bl	8000d50 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e1f3      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	4b51      	ldr	r3, [pc, #324]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0xe8>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d063      	beq.n	8001412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134a:	4b4a      	ldr	r3, [pc, #296]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00b      	beq.n	800136e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001356:	4b47      	ldr	r3, [pc, #284]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135e:	2b08      	cmp	r3, #8
 8001360:	d11c      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001362:	4b44      	ldr	r3, [pc, #272]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d116      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e1c7      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4937      	ldr	r1, [pc, #220]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	e03a      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a4:	4b34      	ldr	r3, [pc, #208]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fcd1 	bl	8000d50 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b2:	f7ff fccd 	bl	8000d50 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e1a8      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4925      	ldr	r1, [pc, #148]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e6:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fcb0 	bl	8000d50 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f4:	f7ff fcac 	bl	8000d50 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e187      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d036      	beq.n	800148c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d016      	beq.n	8001454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_RCC_OscConfig+0x248>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fc90 	bl	8000d50 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fc8c 	bl	8000d50 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e167      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x200>
 8001452:	e01b      	b.n	800148c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_RCC_OscConfig+0x248>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff fc79 	bl	8000d50 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	e00e      	b.n	8001480 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001462:	f7ff fc75 	bl	8000d50 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d907      	bls.n	8001480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e150      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
 8001474:	40023800 	.word	0x40023800
 8001478:	42470000 	.word	0x42470000
 800147c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1ea      	bne.n	8001462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 8097 	beq.w	80015c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b81      	ldr	r3, [pc, #516]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10f      	bne.n	80014ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b7d      	ldr	r3, [pc, #500]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a7c      	ldr	r2, [pc, #496]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b7a      	ldr	r3, [pc, #488]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d118      	bne.n	8001508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d6:	4b74      	ldr	r3, [pc, #464]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a73      	ldr	r2, [pc, #460]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fc35 	bl	8000d50 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ea:	f7ff fc31 	bl	8000d50 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e10c      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fc:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x2ea>
 8001510:	4b64      	ldr	r3, [pc, #400]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	4a63      	ldr	r2, [pc, #396]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6713      	str	r3, [r2, #112]	; 0x70
 800151c:	e01c      	b.n	8001558 <HAL_RCC_OscConfig+0x324>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b05      	cmp	r3, #5
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x30c>
 8001526:	4b5f      	ldr	r3, [pc, #380]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a5e      	ldr	r2, [pc, #376]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	4b5c      	ldr	r3, [pc, #368]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a5b      	ldr	r2, [pc, #364]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
 800153e:	e00b      	b.n	8001558 <HAL_RCC_OscConfig+0x324>
 8001540:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	4a57      	ldr	r2, [pc, #348]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	6713      	str	r3, [r2, #112]	; 0x70
 800154c:	4b55      	ldr	r3, [pc, #340]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	4a54      	ldr	r2, [pc, #336]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001552:	f023 0304 	bic.w	r3, r3, #4
 8001556:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d015      	beq.n	800158c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fbf6 	bl	8000d50 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fbf2 	bl	8000d50 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	; 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0cb      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0ee      	beq.n	8001568 <HAL_RCC_OscConfig+0x334>
 800158a:	e014      	b.n	80015b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff fbe0 	bl	8000d50 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001594:	f7ff fbdc 	bl	8000d50 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0b5      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ee      	bne.n	8001594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015bc:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	4a38      	ldr	r2, [pc, #224]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80a1 	beq.w	8001714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d05c      	beq.n	8001698 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d141      	bne.n	800166a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b31      	ldr	r3, [pc, #196]	; (80016ac <HAL_RCC_OscConfig+0x478>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fbb0 	bl	8000d50 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fbac 	bl	8000d50 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e087      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69da      	ldr	r2, [r3, #28]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	019b      	lsls	r3, r3, #6
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	3b01      	subs	r3, #1
 800162c:	041b      	lsls	r3, r3, #16
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	061b      	lsls	r3, r3, #24
 8001636:	491b      	ldr	r1, [pc, #108]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_RCC_OscConfig+0x478>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fb85 	bl	8000d50 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff fb81 	bl	8000d50 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e05c      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x416>
 8001668:	e054      	b.n	8001714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_RCC_OscConfig+0x478>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fb6e 	bl	8000d50 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff fb6a 	bl	8000d50 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e045      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x444>
 8001696:	e03d      	b.n	8001714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e038      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40007000 	.word	0x40007000
 80016ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_RCC_OscConfig+0x4ec>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d028      	beq.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d121      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d11a      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d111      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d107      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0cc      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001738:	4b68      	ldr	r3, [pc, #416]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d90c      	bls.n	8001760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b65      	ldr	r3, [pc, #404]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b63      	ldr	r3, [pc, #396]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0b8      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001778:	4b59      	ldr	r3, [pc, #356]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a58      	ldr	r2, [pc, #352]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001790:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a52      	ldr	r2, [pc, #328]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800179a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	494d      	ldr	r1, [pc, #308]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d044      	beq.n	8001844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d119      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e07f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e2:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d109      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e067      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001802:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f023 0203 	bic.w	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4934      	ldr	r1, [pc, #208]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	4313      	orrs	r3, r2
 8001812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001814:	f7ff fa9c 	bl	8000d50 <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	e00a      	b.n	8001832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181c:	f7ff fa98 	bl	8000d50 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	; 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e04f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 020c 	and.w	r2, r3, #12
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	429a      	cmp	r2, r3
 8001842:	d1eb      	bne.n	800181c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d20c      	bcs.n	800186c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e032      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4916      	ldr	r1, [pc, #88]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	490e      	ldr	r1, [pc, #56]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018aa:	f000 f821 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	490a      	ldr	r1, [pc, #40]	; (80018e4 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	5ccb      	ldrb	r3, [r1, r3]
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f864 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00
 80018e0:	40023800 	.word	0x40023800
 80018e4:	080064e8 	.word	0x080064e8
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f4:	b090      	sub	sp, #64	; 0x40
 80018f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
 80018fc:	2300      	movs	r3, #0
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001908:	4b59      	ldr	r3, [pc, #356]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d00d      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x40>
 8001914:	2b08      	cmp	r3, #8
 8001916:	f200 80a1 	bhi.w	8001a5c <HAL_RCC_GetSysClockFreq+0x16c>
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x34>
 800191e:	2b04      	cmp	r3, #4
 8001920:	d003      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x3a>
 8001922:	e09b      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001926:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001928:	e09b      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192a:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800192c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800192e:	e098      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001930:	4b4f      	ldr	r3, [pc, #316]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193a:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d028      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001946:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	099b      	lsrs	r3, r3, #6
 800194c:	2200      	movs	r2, #0
 800194e:	623b      	str	r3, [r7, #32]
 8001950:	627a      	str	r2, [r7, #36]	; 0x24
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001958:	2100      	movs	r1, #0
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800195c:	fb03 f201 	mul.w	r2, r3, r1
 8001960:	2300      	movs	r3, #0
 8001962:	fb00 f303 	mul.w	r3, r0, r3
 8001966:	4413      	add	r3, r2
 8001968:	4a43      	ldr	r2, [pc, #268]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800196a:	fba0 1202 	umull	r1, r2, r0, r2
 800196e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001970:	460a      	mov	r2, r1
 8001972:	62ba      	str	r2, [r7, #40]	; 0x28
 8001974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001976:	4413      	add	r3, r2
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197c:	2200      	movs	r2, #0
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	61fa      	str	r2, [r7, #28]
 8001982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800198a:	f7fe fc79 	bl	8000280 <__aeabi_uldivmod>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4613      	mov	r3, r2
 8001994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001996:	e053      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001998:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	2200      	movs	r2, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	617a      	str	r2, [r7, #20]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019aa:	f04f 0b00 	mov.w	fp, #0
 80019ae:	4652      	mov	r2, sl
 80019b0:	465b      	mov	r3, fp
 80019b2:	f04f 0000 	mov.w	r0, #0
 80019b6:	f04f 0100 	mov.w	r1, #0
 80019ba:	0159      	lsls	r1, r3, #5
 80019bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c0:	0150      	lsls	r0, r2, #5
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ebb2 080a 	subs.w	r8, r2, sl
 80019ca:	eb63 090b 	sbc.w	r9, r3, fp
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019e2:	ebb2 0408 	subs.w	r4, r2, r8
 80019e6:	eb63 0509 	sbc.w	r5, r3, r9
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	00eb      	lsls	r3, r5, #3
 80019f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019f8:	00e2      	lsls	r2, r4, #3
 80019fa:	4614      	mov	r4, r2
 80019fc:	461d      	mov	r5, r3
 80019fe:	eb14 030a 	adds.w	r3, r4, sl
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	eb45 030b 	adc.w	r3, r5, fp
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a16:	4629      	mov	r1, r5
 8001a18:	028b      	lsls	r3, r1, #10
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a20:	4621      	mov	r1, r4
 8001a22:	028a      	lsls	r2, r1, #10
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	60fa      	str	r2, [r7, #12]
 8001a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a34:	f7fe fc24 	bl	8000280 <__aeabi_uldivmod>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a5a:	e002      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3740      	adds	r7, #64	; 0x40
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	017d7840 	.word	0x017d7840

08001a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000000 	.word	0x20000000

08001a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a98:	f7ff fff0 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	0a9b      	lsrs	r3, r3, #10
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4903      	ldr	r1, [pc, #12]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	080064f8 	.word	0x080064f8

08001abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ac0:	f7ff ffdc 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	0b5b      	lsrs	r3, r3, #13
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	4903      	ldr	r1, [pc, #12]	; (8001ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ad2:	5ccb      	ldrb	r3, [r1, r3]
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	080064f8 	.word	0x080064f8

08001ae4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	220f      	movs	r2, #15
 8001af2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_RCC_GetClockConfig+0x5c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0203 	and.w	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_RCC_GetClockConfig+0x5c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	08db      	lsrs	r3, r3, #3
 8001b1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <HAL_RCC_GetClockConfig+0x60>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0207 	and.w	r2, r3, #7
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	601a      	str	r2, [r3, #0]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40023c00 	.word	0x40023c00

08001b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e041      	b.n	8001bde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f839 	bl	8001be6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3304      	adds	r3, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	4610      	mov	r0, r2
 8001b88:	f000 f9ca 	bl	8001f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d001      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e044      	b.n	8001c9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_TIM_Base_Start_IT+0xb0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d018      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x6c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3e:	d013      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x6c>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1a      	ldr	r2, [pc, #104]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00e      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x6c>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d009      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x6c>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a17      	ldr	r2, [pc, #92]	; (8001cb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d004      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x6c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a16      	ldr	r2, [pc, #88]	; (8001cbc <HAL_TIM_Base_Start_IT+0xc0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d111      	bne.n	8001c8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d010      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c8a:	e007      	b.n	8001c9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40000800 	.word	0x40000800
 8001cb8:	40000c00 	.word	0x40000c00
 8001cbc:	40014000 	.word	0x40014000

08001cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d122      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d11b      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0202 	mvn.w	r2, #2
 8001cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f8ee 	bl	8001ee4 <HAL_TIM_IC_CaptureCallback>
 8001d08:	e005      	b.n	8001d16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8e0 	bl	8001ed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f8f1 	bl	8001ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d122      	bne.n	8001d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d11b      	bne.n	8001d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0204 	mvn.w	r2, #4
 8001d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2202      	movs	r2, #2
 8001d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8c4 	bl	8001ee4 <HAL_TIM_IC_CaptureCallback>
 8001d5c:	e005      	b.n	8001d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8b6 	bl	8001ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f8c7 	bl	8001ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d122      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0208 	mvn.w	r2, #8
 8001d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2204      	movs	r2, #4
 8001d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f89a 	bl	8001ee4 <HAL_TIM_IC_CaptureCallback>
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f88c 	bl	8001ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f89d 	bl	8001ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d122      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b10      	cmp	r3, #16
 8001dde:	d11b      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0210 	mvn.w	r2, #16
 8001de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2208      	movs	r2, #8
 8001dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f870 	bl	8001ee4 <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f862 	bl	8001ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f873 	bl	8001ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d10e      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d107      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0201 	mvn.w	r2, #1
 8001e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7fe fd1e 	bl	8000880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4e:	2b80      	cmp	r3, #128	; 0x80
 8001e50:	d10e      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5c:	2b80      	cmp	r3, #128	; 0x80
 8001e5e:	d107      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8e2 	bl	8002034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7a:	2b40      	cmp	r3, #64	; 0x40
 8001e7c:	d10e      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e88:	2b40      	cmp	r3, #64	; 0x40
 8001e8a:	d107      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f838 	bl	8001f0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d107      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0220 	mvn.w	r2, #32
 8001ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f8ac 	bl	8002020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a34      	ldr	r2, [pc, #208]	; (8002004 <TIM_Base_SetConfig+0xe4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d00f      	beq.n	8001f58 <TIM_Base_SetConfig+0x38>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3e:	d00b      	beq.n	8001f58 <TIM_Base_SetConfig+0x38>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a31      	ldr	r2, [pc, #196]	; (8002008 <TIM_Base_SetConfig+0xe8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d007      	beq.n	8001f58 <TIM_Base_SetConfig+0x38>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a30      	ldr	r2, [pc, #192]	; (800200c <TIM_Base_SetConfig+0xec>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <TIM_Base_SetConfig+0x38>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a2f      	ldr	r2, [pc, #188]	; (8002010 <TIM_Base_SetConfig+0xf0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d108      	bne.n	8001f6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a25      	ldr	r2, [pc, #148]	; (8002004 <TIM_Base_SetConfig+0xe4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01b      	beq.n	8001faa <TIM_Base_SetConfig+0x8a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f78:	d017      	beq.n	8001faa <TIM_Base_SetConfig+0x8a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a22      	ldr	r2, [pc, #136]	; (8002008 <TIM_Base_SetConfig+0xe8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d013      	beq.n	8001faa <TIM_Base_SetConfig+0x8a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a21      	ldr	r2, [pc, #132]	; (800200c <TIM_Base_SetConfig+0xec>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00f      	beq.n	8001faa <TIM_Base_SetConfig+0x8a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a20      	ldr	r2, [pc, #128]	; (8002010 <TIM_Base_SetConfig+0xf0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00b      	beq.n	8001faa <TIM_Base_SetConfig+0x8a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a1f      	ldr	r2, [pc, #124]	; (8002014 <TIM_Base_SetConfig+0xf4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d007      	beq.n	8001faa <TIM_Base_SetConfig+0x8a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a1e      	ldr	r2, [pc, #120]	; (8002018 <TIM_Base_SetConfig+0xf8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d003      	beq.n	8001faa <TIM_Base_SetConfig+0x8a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a1d      	ldr	r2, [pc, #116]	; (800201c <TIM_Base_SetConfig+0xfc>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d108      	bne.n	8001fbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <TIM_Base_SetConfig+0xe4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d103      	bne.n	8001ff0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	615a      	str	r2, [r3, #20]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40010000 	.word	0x40010000
 8002008:	40000400 	.word	0x40000400
 800200c:	40000800 	.word	0x40000800
 8002010:	40000c00 	.word	0x40000c00
 8002014:	40014000 	.word	0x40014000
 8002018:	40014400 	.word	0x40014400
 800201c:	40014800 	.word	0x40014800

08002020 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e03f      	b.n	80020da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fc4a 	bl	8000908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2224      	movs	r2, #36	; 0x24
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800208a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f829 	bl	80020e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020e8:	b0c0      	sub	sp, #256	; 0x100
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002100:	68d9      	ldr	r1, [r3, #12]
 8002102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	ea40 0301 	orr.w	r3, r0, r1
 800210c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800210e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	431a      	orrs	r2, r3
 800211c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	431a      	orrs	r2, r3
 8002124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800213c:	f021 010c 	bic.w	r1, r1, #12
 8002140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800214a:	430b      	orrs	r3, r1
 800214c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800214e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800215a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800215e:	6999      	ldr	r1, [r3, #24]
 8002160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	ea40 0301 	orr.w	r3, r0, r1
 800216a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800216c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b8f      	ldr	r3, [pc, #572]	; (80023b0 <UART_SetConfig+0x2cc>)
 8002174:	429a      	cmp	r2, r3
 8002176:	d005      	beq.n	8002184 <UART_SetConfig+0xa0>
 8002178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b8d      	ldr	r3, [pc, #564]	; (80023b4 <UART_SetConfig+0x2d0>)
 8002180:	429a      	cmp	r2, r3
 8002182:	d104      	bne.n	800218e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002184:	f7ff fc9a 	bl	8001abc <HAL_RCC_GetPCLK2Freq>
 8002188:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800218c:	e003      	b.n	8002196 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800218e:	f7ff fc81 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 8002192:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021a0:	f040 810c 	bne.w	80023bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021a8:	2200      	movs	r2, #0
 80021aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80021ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80021b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80021b6:	4622      	mov	r2, r4
 80021b8:	462b      	mov	r3, r5
 80021ba:	1891      	adds	r1, r2, r2
 80021bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80021be:	415b      	adcs	r3, r3
 80021c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021c6:	4621      	mov	r1, r4
 80021c8:	eb12 0801 	adds.w	r8, r2, r1
 80021cc:	4629      	mov	r1, r5
 80021ce:	eb43 0901 	adc.w	r9, r3, r1
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021e6:	4690      	mov	r8, r2
 80021e8:	4699      	mov	r9, r3
 80021ea:	4623      	mov	r3, r4
 80021ec:	eb18 0303 	adds.w	r3, r8, r3
 80021f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021f4:	462b      	mov	r3, r5
 80021f6:	eb49 0303 	adc.w	r3, r9, r3
 80021fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80021fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800220a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800220e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002212:	460b      	mov	r3, r1
 8002214:	18db      	adds	r3, r3, r3
 8002216:	653b      	str	r3, [r7, #80]	; 0x50
 8002218:	4613      	mov	r3, r2
 800221a:	eb42 0303 	adc.w	r3, r2, r3
 800221e:	657b      	str	r3, [r7, #84]	; 0x54
 8002220:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002224:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002228:	f7fe f82a 	bl	8000280 <__aeabi_uldivmod>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4b61      	ldr	r3, [pc, #388]	; (80023b8 <UART_SetConfig+0x2d4>)
 8002232:	fba3 2302 	umull	r2, r3, r3, r2
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	011c      	lsls	r4, r3, #4
 800223a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800223e:	2200      	movs	r2, #0
 8002240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002244:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002248:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800224c:	4642      	mov	r2, r8
 800224e:	464b      	mov	r3, r9
 8002250:	1891      	adds	r1, r2, r2
 8002252:	64b9      	str	r1, [r7, #72]	; 0x48
 8002254:	415b      	adcs	r3, r3
 8002256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002258:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800225c:	4641      	mov	r1, r8
 800225e:	eb12 0a01 	adds.w	sl, r2, r1
 8002262:	4649      	mov	r1, r9
 8002264:	eb43 0b01 	adc.w	fp, r3, r1
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002274:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800227c:	4692      	mov	sl, r2
 800227e:	469b      	mov	fp, r3
 8002280:	4643      	mov	r3, r8
 8002282:	eb1a 0303 	adds.w	r3, sl, r3
 8002286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800228a:	464b      	mov	r3, r9
 800228c:	eb4b 0303 	adc.w	r3, fp, r3
 8002290:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80022a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80022a8:	460b      	mov	r3, r1
 80022aa:	18db      	adds	r3, r3, r3
 80022ac:	643b      	str	r3, [r7, #64]	; 0x40
 80022ae:	4613      	mov	r3, r2
 80022b0:	eb42 0303 	adc.w	r3, r2, r3
 80022b4:	647b      	str	r3, [r7, #68]	; 0x44
 80022b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80022be:	f7fd ffdf 	bl	8000280 <__aeabi_uldivmod>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4611      	mov	r1, r2
 80022c8:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <UART_SetConfig+0x2d4>)
 80022ca:	fba3 2301 	umull	r2, r3, r3, r1
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2264      	movs	r2, #100	; 0x64
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	1acb      	subs	r3, r1, r3
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80022de:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <UART_SetConfig+0x2d4>)
 80022e0:	fba3 2302 	umull	r2, r3, r3, r2
 80022e4:	095b      	lsrs	r3, r3, #5
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022ec:	441c      	add	r4, r3
 80022ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022f2:	2200      	movs	r2, #0
 80022f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80022fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002300:	4642      	mov	r2, r8
 8002302:	464b      	mov	r3, r9
 8002304:	1891      	adds	r1, r2, r2
 8002306:	63b9      	str	r1, [r7, #56]	; 0x38
 8002308:	415b      	adcs	r3, r3
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002310:	4641      	mov	r1, r8
 8002312:	1851      	adds	r1, r2, r1
 8002314:	6339      	str	r1, [r7, #48]	; 0x30
 8002316:	4649      	mov	r1, r9
 8002318:	414b      	adcs	r3, r1
 800231a:	637b      	str	r3, [r7, #52]	; 0x34
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002328:	4659      	mov	r1, fp
 800232a:	00cb      	lsls	r3, r1, #3
 800232c:	4651      	mov	r1, sl
 800232e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002332:	4651      	mov	r1, sl
 8002334:	00ca      	lsls	r2, r1, #3
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	4603      	mov	r3, r0
 800233c:	4642      	mov	r2, r8
 800233e:	189b      	adds	r3, r3, r2
 8002340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002344:	464b      	mov	r3, r9
 8002346:	460a      	mov	r2, r1
 8002348:	eb42 0303 	adc.w	r3, r2, r3
 800234c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800235c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002360:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002364:	460b      	mov	r3, r1
 8002366:	18db      	adds	r3, r3, r3
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
 800236a:	4613      	mov	r3, r2
 800236c:	eb42 0303 	adc.w	r3, r2, r3
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002376:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800237a:	f7fd ff81 	bl	8000280 <__aeabi_uldivmod>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <UART_SetConfig+0x2d4>)
 8002384:	fba3 1302 	umull	r1, r3, r3, r2
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	2164      	movs	r1, #100	; 0x64
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	3332      	adds	r3, #50	; 0x32
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <UART_SetConfig+0x2d4>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	f003 0207 	and.w	r2, r3, #7
 80023a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4422      	add	r2, r4
 80023aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023ac:	e105      	b.n	80025ba <UART_SetConfig+0x4d6>
 80023ae:	bf00      	nop
 80023b0:	40011000 	.word	0x40011000
 80023b4:	40011400 	.word	0x40011400
 80023b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023c0:	2200      	movs	r2, #0
 80023c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80023ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80023ce:	4642      	mov	r2, r8
 80023d0:	464b      	mov	r3, r9
 80023d2:	1891      	adds	r1, r2, r2
 80023d4:	6239      	str	r1, [r7, #32]
 80023d6:	415b      	adcs	r3, r3
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
 80023da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023de:	4641      	mov	r1, r8
 80023e0:	1854      	adds	r4, r2, r1
 80023e2:	4649      	mov	r1, r9
 80023e4:	eb43 0501 	adc.w	r5, r3, r1
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	00eb      	lsls	r3, r5, #3
 80023f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023f6:	00e2      	lsls	r2, r4, #3
 80023f8:	4614      	mov	r4, r2
 80023fa:	461d      	mov	r5, r3
 80023fc:	4643      	mov	r3, r8
 80023fe:	18e3      	adds	r3, r4, r3
 8002400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002404:	464b      	mov	r3, r9
 8002406:	eb45 0303 	adc.w	r3, r5, r3
 800240a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800240e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800241a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800242a:	4629      	mov	r1, r5
 800242c:	008b      	lsls	r3, r1, #2
 800242e:	4621      	mov	r1, r4
 8002430:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002434:	4621      	mov	r1, r4
 8002436:	008a      	lsls	r2, r1, #2
 8002438:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800243c:	f7fd ff20 	bl	8000280 <__aeabi_uldivmod>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4b60      	ldr	r3, [pc, #384]	; (80025c8 <UART_SetConfig+0x4e4>)
 8002446:	fba3 2302 	umull	r2, r3, r3, r2
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	011c      	lsls	r4, r3, #4
 800244e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002452:	2200      	movs	r2, #0
 8002454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002458:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800245c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002460:	4642      	mov	r2, r8
 8002462:	464b      	mov	r3, r9
 8002464:	1891      	adds	r1, r2, r2
 8002466:	61b9      	str	r1, [r7, #24]
 8002468:	415b      	adcs	r3, r3
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002470:	4641      	mov	r1, r8
 8002472:	1851      	adds	r1, r2, r1
 8002474:	6139      	str	r1, [r7, #16]
 8002476:	4649      	mov	r1, r9
 8002478:	414b      	adcs	r3, r1
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002488:	4659      	mov	r1, fp
 800248a:	00cb      	lsls	r3, r1, #3
 800248c:	4651      	mov	r1, sl
 800248e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002492:	4651      	mov	r1, sl
 8002494:	00ca      	lsls	r2, r1, #3
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	4603      	mov	r3, r0
 800249c:	4642      	mov	r2, r8
 800249e:	189b      	adds	r3, r3, r2
 80024a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024a4:	464b      	mov	r3, r9
 80024a6:	460a      	mov	r2, r1
 80024a8:	eb42 0303 	adc.w	r3, r2, r3
 80024ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80024ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80024c8:	4649      	mov	r1, r9
 80024ca:	008b      	lsls	r3, r1, #2
 80024cc:	4641      	mov	r1, r8
 80024ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024d2:	4641      	mov	r1, r8
 80024d4:	008a      	lsls	r2, r1, #2
 80024d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80024da:	f7fd fed1 	bl	8000280 <__aeabi_uldivmod>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <UART_SetConfig+0x4e4>)
 80024e4:	fba3 1302 	umull	r1, r3, r3, r2
 80024e8:	095b      	lsrs	r3, r3, #5
 80024ea:	2164      	movs	r1, #100	; 0x64
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	3332      	adds	r3, #50	; 0x32
 80024f6:	4a34      	ldr	r2, [pc, #208]	; (80025c8 <UART_SetConfig+0x4e4>)
 80024f8:	fba2 2303 	umull	r2, r3, r2, r3
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002502:	441c      	add	r4, r3
 8002504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002508:	2200      	movs	r2, #0
 800250a:	673b      	str	r3, [r7, #112]	; 0x70
 800250c:	677a      	str	r2, [r7, #116]	; 0x74
 800250e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002512:	4642      	mov	r2, r8
 8002514:	464b      	mov	r3, r9
 8002516:	1891      	adds	r1, r2, r2
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	415b      	adcs	r3, r3
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002522:	4641      	mov	r1, r8
 8002524:	1851      	adds	r1, r2, r1
 8002526:	6039      	str	r1, [r7, #0]
 8002528:	4649      	mov	r1, r9
 800252a:	414b      	adcs	r3, r1
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800253a:	4659      	mov	r1, fp
 800253c:	00cb      	lsls	r3, r1, #3
 800253e:	4651      	mov	r1, sl
 8002540:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002544:	4651      	mov	r1, sl
 8002546:	00ca      	lsls	r2, r1, #3
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	4603      	mov	r3, r0
 800254e:	4642      	mov	r2, r8
 8002550:	189b      	adds	r3, r3, r2
 8002552:	66bb      	str	r3, [r7, #104]	; 0x68
 8002554:	464b      	mov	r3, r9
 8002556:	460a      	mov	r2, r1
 8002558:	eb42 0303 	adc.w	r3, r2, r3
 800255c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800255e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	663b      	str	r3, [r7, #96]	; 0x60
 8002568:	667a      	str	r2, [r7, #100]	; 0x64
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002576:	4649      	mov	r1, r9
 8002578:	008b      	lsls	r3, r1, #2
 800257a:	4641      	mov	r1, r8
 800257c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002580:	4641      	mov	r1, r8
 8002582:	008a      	lsls	r2, r1, #2
 8002584:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002588:	f7fd fe7a 	bl	8000280 <__aeabi_uldivmod>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <UART_SetConfig+0x4e4>)
 8002592:	fba3 1302 	umull	r1, r3, r3, r2
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2164      	movs	r1, #100	; 0x64
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	3332      	adds	r3, #50	; 0x32
 80025a4:	4a08      	ldr	r2, [pc, #32]	; (80025c8 <UART_SetConfig+0x4e4>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	f003 020f 	and.w	r2, r3, #15
 80025b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4422      	add	r2, r4
 80025b8:	609a      	str	r2, [r3, #8]
}
 80025ba:	bf00      	nop
 80025bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80025c0:	46bd      	mov	sp, r7
 80025c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025c6:	bf00      	nop
 80025c8:	51eb851f 	.word	0x51eb851f

080025cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <SysTick_Handler+0x1c>)
 80025d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80025d4:	f001 fd8c 	bl	80040f0 <xTaskGetSchedulerState>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d001      	beq.n	80025e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80025de:	f002 fc73 	bl	8004ec8 <xPortSysTickHandler>
  }
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	e000e010 	.word	0xe000e010

080025ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a07      	ldr	r2, [pc, #28]	; (8002618 <vApplicationGetIdleTaskMemory+0x2c>)
 80025fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <vApplicationGetIdleTaskMemory+0x30>)
 8002602:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2280      	movs	r2, #128	; 0x80
 8002608:	601a      	str	r2, [r3, #0]
}
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000130 	.word	0x20000130
 800261c:	2000018c 	.word	0x2000018c

08002620 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4a07      	ldr	r2, [pc, #28]	; (800264c <vApplicationGetTimerTaskMemory+0x2c>)
 8002630:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4a06      	ldr	r2, [pc, #24]	; (8002650 <vApplicationGetTimerTaskMemory+0x30>)
 8002636:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800263e:	601a      	str	r2, [r3, #0]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	2000038c 	.word	0x2000038c
 8002650:	200003e8 	.word	0x200003e8

08002654 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f103 0208 	add.w	r2, r3, #8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800266c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f103 0208 	add.w	r2, r3, #8
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f103 0208 	add.w	r2, r3, #8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	601a      	str	r2, [r3, #0]
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800270c:	d103      	bne.n	8002716 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e00c      	b.n	8002730 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3308      	adds	r3, #8
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	e002      	b.n	8002724 <vListInsert+0x2e>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	429a      	cmp	r2, r3
 800272e:	d2f6      	bcs.n	800271e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	601a      	str	r2, [r3, #0]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6892      	ldr	r2, [r2, #8]
 800277e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6852      	ldr	r2, [r2, #4]
 8002788:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	d103      	bne.n	800279c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	1e5a      	subs	r2, r3, #1
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80027e2:	bf00      	nop
 80027e4:	e7fe      	b.n	80027e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80027e6:	f002 fadd 	bl	8004da4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	68f9      	ldr	r1, [r7, #12]
 80027f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	441a      	add	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	3b01      	subs	r3, #1
 8002818:	68f9      	ldr	r1, [r7, #12]
 800281a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	441a      	add	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	22ff      	movs	r2, #255	; 0xff
 800282a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	22ff      	movs	r2, #255	; 0xff
 8002832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d114      	bne.n	8002866 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01a      	beq.n	800287a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3310      	adds	r3, #16
 8002848:	4618      	mov	r0, r3
 800284a:	f001 fa93 	bl	8003d74 <xTaskRemoveFromEventList>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d012      	beq.n	800287a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <xQueueGenericReset+0xcc>)
 8002856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	e009      	b.n	800287a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3310      	adds	r3, #16
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fef2 	bl	8002654 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3324      	adds	r3, #36	; 0x24
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff feed 	bl	8002654 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800287a:	f002 fac3 	bl	8004e04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	e000ed04 	.word	0xe000ed04

0800288c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08e      	sub	sp, #56	; 0x38
 8002890:	af02      	add	r7, sp, #8
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028b2:	bf00      	nop
 80028b4:	e7fe      	b.n	80028b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028ce:	bf00      	nop
 80028d0:	e7fe      	b.n	80028d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <xQueueGenericCreateStatic+0x52>
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <xQueueGenericCreateStatic+0x56>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <xQueueGenericCreateStatic+0x58>
 80028e2:	2300      	movs	r3, #0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80028e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	623b      	str	r3, [r7, #32]
}
 80028fa:	bf00      	nop
 80028fc:	e7fe      	b.n	80028fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d102      	bne.n	800290a <xQueueGenericCreateStatic+0x7e>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <xQueueGenericCreateStatic+0x82>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <xQueueGenericCreateStatic+0x84>
 800290e:	2300      	movs	r3, #0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	61fb      	str	r3, [r7, #28]
}
 8002926:	bf00      	nop
 8002928:	e7fe      	b.n	8002928 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800292a:	2350      	movs	r3, #80	; 0x50
 800292c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b50      	cmp	r3, #80	; 0x50
 8002932:	d00a      	beq.n	800294a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002938:	f383 8811 	msr	BASEPRI, r3
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	61bb      	str	r3, [r7, #24]
}
 8002946:	bf00      	nop
 8002948:	e7fe      	b.n	8002948 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800294a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00d      	beq.n	8002972 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800295e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	4613      	mov	r3, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f83f 	bl	80029f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002974:	4618      	mov	r0, r3
 8002976:	3730      	adds	r7, #48	; 0x30
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08a      	sub	sp, #40	; 0x28
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	4613      	mov	r3, r2
 8002988:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	613b      	str	r3, [r7, #16]
}
 80029a2:	bf00      	nop
 80029a4:	e7fe      	b.n	80029a4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	3350      	adds	r3, #80	; 0x50
 80029b4:	4618      	mov	r0, r3
 80029b6:	f002 fb17 	bl	8004fe8 <pvPortMalloc>
 80029ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d011      	beq.n	80029e6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	3350      	adds	r3, #80	; 0x50
 80029ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029d4:	79fa      	ldrb	r2, [r7, #7]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	4613      	mov	r3, r2
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f805 	bl	80029f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029e6:	69bb      	ldr	r3, [r7, #24]
	}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d103      	bne.n	8002a0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e002      	b.n	8002a12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a1e:	2101      	movs	r1, #1
 8002a20:	69b8      	ldr	r0, [r7, #24]
 8002a22:	f7ff fecb 	bl	80027bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00e      	beq.n	8002a62 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002a56:	2300      	movs	r3, #0
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f81d 	bl	8002a9c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b086      	sub	sp, #24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	4603      	mov	r3, r0
 8002a72:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002a74:	2301      	movs	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	6939      	ldr	r1, [r7, #16]
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f7ff ff7a 	bl	800297c <xQueueGenericCreate>
 8002a88:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f7ff ffd3 	bl	8002a36 <prvInitialiseMutex>

		return xNewQueue;
 8002a90:	68fb      	ldr	r3, [r7, #12]
	}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08e      	sub	sp, #56	; 0x38
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10a      	bne.n	8002ace <xQueueGenericSend+0x32>
	__asm volatile
 8002ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002aca:	bf00      	nop
 8002acc:	e7fe      	b.n	8002acc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d103      	bne.n	8002adc <xQueueGenericSend+0x40>
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <xQueueGenericSend+0x44>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <xQueueGenericSend+0x46>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <xQueueGenericSend+0x60>
	__asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002af8:	bf00      	nop
 8002afa:	e7fe      	b.n	8002afa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d103      	bne.n	8002b0a <xQueueGenericSend+0x6e>
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <xQueueGenericSend+0x72>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <xQueueGenericSend+0x74>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <xQueueGenericSend+0x8e>
	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	623b      	str	r3, [r7, #32]
}
 8002b26:	bf00      	nop
 8002b28:	e7fe      	b.n	8002b28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b2a:	f001 fae1 	bl	80040f0 <xTaskGetSchedulerState>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d102      	bne.n	8002b3a <xQueueGenericSend+0x9e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <xQueueGenericSend+0xa2>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <xQueueGenericSend+0xa4>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <xQueueGenericSend+0xbe>
	__asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	61fb      	str	r3, [r7, #28]
}
 8002b56:	bf00      	nop
 8002b58:	e7fe      	b.n	8002b58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b5a:	f002 f923 	bl	8004da4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d302      	bcc.n	8002b70 <xQueueGenericSend+0xd4>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d129      	bne.n	8002bc4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b76:	f000 fb2f 	bl	80031d8 <prvCopyDataToQueue>
 8002b7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d010      	beq.n	8002ba6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	3324      	adds	r3, #36	; 0x24
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f001 f8f3 	bl	8003d74 <xTaskRemoveFromEventList>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d013      	beq.n	8002bbc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b94:	4b3f      	ldr	r3, [pc, #252]	; (8002c94 <xQueueGenericSend+0x1f8>)
 8002b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	e00a      	b.n	8002bbc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002bac:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <xQueueGenericSend+0x1f8>)
 8002bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bbc:	f002 f922 	bl	8004e04 <vPortExitCritical>
				return pdPASS;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e063      	b.n	8002c8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d103      	bne.n	8002bd2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bca:	f002 f91b 	bl	8004e04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e05c      	b.n	8002c8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d106      	bne.n	8002be6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 f92d 	bl	8003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002be6:	f002 f90d 	bl	8004e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bea:	f000 fe9f 	bl	800392c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bee:	f002 f8d9 	bl	8004da4 <vPortEnterCritical>
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bf8:	b25b      	sxtb	r3, r3
 8002bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bfe:	d103      	bne.n	8002c08 <xQueueGenericSend+0x16c>
 8002c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c0e:	b25b      	sxtb	r3, r3
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c14:	d103      	bne.n	8002c1e <xQueueGenericSend+0x182>
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c1e:	f002 f8f1 	bl	8004e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c22:	1d3a      	adds	r2, r7, #4
 8002c24:	f107 0314 	add.w	r3, r7, #20
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f001 f91c 	bl	8003e68 <xTaskCheckForTimeOut>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d124      	bne.n	8002c80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c38:	f000 fbc6 	bl	80033c8 <prvIsQueueFull>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d018      	beq.n	8002c74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	3310      	adds	r3, #16
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f001 f842 	bl	8003cd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c52:	f000 fb51 	bl	80032f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c56:	f000 fe77 	bl	8003948 <xTaskResumeAll>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f47f af7c 	bne.w	8002b5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c62:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <xQueueGenericSend+0x1f8>)
 8002c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	f3bf 8f6f 	isb	sy
 8002c72:	e772      	b.n	8002b5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c76:	f000 fb3f 	bl	80032f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c7a:	f000 fe65 	bl	8003948 <xTaskResumeAll>
 8002c7e:	e76c      	b.n	8002b5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c82:	f000 fb39 	bl	80032f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c86:	f000 fe5f 	bl	8003948 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3738      	adds	r7, #56	; 0x38
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	e000ed04 	.word	0xe000ed04

08002c98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b090      	sub	sp, #64	; 0x40
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10a      	bne.n	8002cc6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb4:	f383 8811 	msr	BASEPRI, r3
 8002cb8:	f3bf 8f6f 	isb	sy
 8002cbc:	f3bf 8f4f 	dsb	sy
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cc2:	bf00      	nop
 8002cc4:	e7fe      	b.n	8002cc4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d103      	bne.n	8002cd4 <xQueueGenericSendFromISR+0x3c>
 8002ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <xQueueGenericSendFromISR+0x40>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <xQueueGenericSendFromISR+0x42>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10a      	bne.n	8002cf4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce2:	f383 8811 	msr	BASEPRI, r3
 8002ce6:	f3bf 8f6f 	isb	sy
 8002cea:	f3bf 8f4f 	dsb	sy
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cf0:	bf00      	nop
 8002cf2:	e7fe      	b.n	8002cf2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d103      	bne.n	8002d02 <xQueueGenericSendFromISR+0x6a>
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <xQueueGenericSendFromISR+0x6e>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <xQueueGenericSendFromISR+0x70>
 8002d06:	2300      	movs	r3, #0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	623b      	str	r3, [r7, #32]
}
 8002d1e:	bf00      	nop
 8002d20:	e7fe      	b.n	8002d20 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d22:	f002 f921 	bl	8004f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d26:	f3ef 8211 	mrs	r2, BASEPRI
 8002d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	61fa      	str	r2, [r7, #28]
 8002d3c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d40:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d302      	bcc.n	8002d54 <xQueueGenericSendFromISR+0xbc>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d12f      	bne.n	8002db4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d6a:	f000 fa35 	bl	80031d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d76:	d112      	bne.n	8002d9e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d016      	beq.n	8002dae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d82:	3324      	adds	r3, #36	; 0x24
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fff5 	bl	8003d74 <xTaskRemoveFromEventList>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00e      	beq.n	8002dae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00b      	beq.n	8002dae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e007      	b.n	8002dae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002da2:	3301      	adds	r3, #1
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	b25a      	sxtb	r2, r3
 8002da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002dae:	2301      	movs	r3, #1
 8002db0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002db2:	e001      	b.n	8002db8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dc2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3740      	adds	r7, #64	; 0x40
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08c      	sub	sp, #48	; 0x30
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10a      	bne.n	8002e00 <xQueueReceive+0x30>
	__asm volatile
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	623b      	str	r3, [r7, #32]
}
 8002dfc:	bf00      	nop
 8002dfe:	e7fe      	b.n	8002dfe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d103      	bne.n	8002e0e <xQueueReceive+0x3e>
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <xQueueReceive+0x42>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <xQueueReceive+0x44>
 8002e12:	2300      	movs	r3, #0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10a      	bne.n	8002e2e <xQueueReceive+0x5e>
	__asm volatile
 8002e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	61fb      	str	r3, [r7, #28]
}
 8002e2a:	bf00      	nop
 8002e2c:	e7fe      	b.n	8002e2c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e2e:	f001 f95f 	bl	80040f0 <xTaskGetSchedulerState>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <xQueueReceive+0x6e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <xQueueReceive+0x72>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <xQueueReceive+0x74>
 8002e42:	2300      	movs	r3, #0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10a      	bne.n	8002e5e <xQueueReceive+0x8e>
	__asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	61bb      	str	r3, [r7, #24]
}
 8002e5a:	bf00      	nop
 8002e5c:	e7fe      	b.n	8002e5c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e5e:	f001 ffa1 	bl	8004da4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01f      	beq.n	8002eae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e72:	f000 fa1b 	bl	80032ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	1e5a      	subs	r2, r3, #1
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00f      	beq.n	8002ea6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	3310      	adds	r3, #16
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 ff72 	bl	8003d74 <xTaskRemoveFromEventList>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e96:	4b3d      	ldr	r3, [pc, #244]	; (8002f8c <xQueueReceive+0x1bc>)
 8002e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ea6:	f001 ffad 	bl	8004e04 <vPortExitCritical>
				return pdPASS;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e069      	b.n	8002f82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d103      	bne.n	8002ebc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002eb4:	f001 ffa6 	bl	8004e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e062      	b.n	8002f82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ec2:	f107 0310 	add.w	r3, r7, #16
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 ffb8 	bl	8003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ed0:	f001 ff98 	bl	8004e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ed4:	f000 fd2a 	bl	800392c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ed8:	f001 ff64 	bl	8004da4 <vPortEnterCritical>
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee8:	d103      	bne.n	8002ef2 <xQueueReceive+0x122>
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002efe:	d103      	bne.n	8002f08 <xQueueReceive+0x138>
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f08:	f001 ff7c 	bl	8004e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f0c:	1d3a      	adds	r2, r7, #4
 8002f0e:	f107 0310 	add.w	r3, r7, #16
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 ffa7 	bl	8003e68 <xTaskCheckForTimeOut>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d123      	bne.n	8002f68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f22:	f000 fa3b 	bl	800339c <prvIsQueueEmpty>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d017      	beq.n	8002f5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	3324      	adds	r3, #36	; 0x24
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4611      	mov	r1, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fecd 	bl	8003cd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f3c:	f000 f9dc 	bl	80032f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f40:	f000 fd02 	bl	8003948 <xTaskResumeAll>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d189      	bne.n	8002e5e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <xQueueReceive+0x1bc>)
 8002f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	e780      	b.n	8002e5e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f5e:	f000 f9cb 	bl	80032f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f62:	f000 fcf1 	bl	8003948 <xTaskResumeAll>
 8002f66:	e77a      	b.n	8002e5e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f6a:	f000 f9c5 	bl	80032f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f6e:	f000 fceb 	bl	8003948 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f74:	f000 fa12 	bl	800339c <prvIsQueueEmpty>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f43f af6f 	beq.w	8002e5e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3730      	adds	r7, #48	; 0x30
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	e000ed04 	.word	0xe000ed04

08002f90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08e      	sub	sp, #56	; 0x38
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	623b      	str	r3, [r7, #32]
}
 8002fbe:	bf00      	nop
 8002fc0:	e7fe      	b.n	8002fc0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	61fb      	str	r3, [r7, #28]
}
 8002fdc:	bf00      	nop
 8002fde:	e7fe      	b.n	8002fde <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fe0:	f001 f886 	bl	80040f0 <xTaskGetSchedulerState>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <xQueueSemaphoreTake+0x60>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <xQueueSemaphoreTake+0x64>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <xQueueSemaphoreTake+0x66>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	61bb      	str	r3, [r7, #24]
}
 800300c:	bf00      	nop
 800300e:	e7fe      	b.n	800300e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003010:	f001 fec8 	bl	8004da4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	2b00      	cmp	r3, #0
 800301e:	d024      	beq.n	800306a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	1e5a      	subs	r2, r3, #1
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d104      	bne.n	800303a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003030:	f001 f9d4 	bl	80043dc <pvTaskIncrementMutexHeldCount>
 8003034:	4602      	mov	r2, r0
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00f      	beq.n	8003062 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003044:	3310      	adds	r3, #16
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fe94 	bl	8003d74 <xTaskRemoveFromEventList>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003052:	4b54      	ldr	r3, [pc, #336]	; (80031a4 <xQueueSemaphoreTake+0x214>)
 8003054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003062:	f001 fecf 	bl	8004e04 <vPortExitCritical>
				return pdPASS;
 8003066:	2301      	movs	r3, #1
 8003068:	e097      	b.n	800319a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d111      	bne.n	8003094 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	617b      	str	r3, [r7, #20]
}
 8003088:	bf00      	nop
 800308a:	e7fe      	b.n	800308a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800308c:	f001 feba 	bl	8004e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003090:	2300      	movs	r3, #0
 8003092:	e082      	b.n	800319a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800309a:	f107 030c 	add.w	r3, r7, #12
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fecc 	bl	8003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030a4:	2301      	movs	r3, #1
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030a8:	f001 feac 	bl	8004e04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030ac:	f000 fc3e 	bl	800392c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030b0:	f001 fe78 	bl	8004da4 <vPortEnterCritical>
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030ba:	b25b      	sxtb	r3, r3
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030c0:	d103      	bne.n	80030ca <xQueueSemaphoreTake+0x13a>
 80030c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030d0:	b25b      	sxtb	r3, r3
 80030d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030d6:	d103      	bne.n	80030e0 <xQueueSemaphoreTake+0x150>
 80030d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030e0:	f001 fe90 	bl	8004e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030e4:	463a      	mov	r2, r7
 80030e6:	f107 030c 	add.w	r3, r7, #12
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 febb 	bl	8003e68 <xTaskCheckForTimeOut>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d132      	bne.n	800315e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030fa:	f000 f94f 	bl	800339c <prvIsQueueEmpty>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d026      	beq.n	8003152 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d109      	bne.n	8003120 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800310c:	f001 fe4a 	bl	8004da4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4618      	mov	r0, r3
 8003116:	f001 f809 	bl	800412c <xTaskPriorityInherit>
 800311a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800311c:	f001 fe72 	bl	8004e04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003122:	3324      	adds	r3, #36	; 0x24
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fdd3 	bl	8003cd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800312e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003130:	f000 f8e2 	bl	80032f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003134:	f000 fc08 	bl	8003948 <xTaskResumeAll>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	f47f af68 	bne.w	8003010 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <xQueueSemaphoreTake+0x214>)
 8003142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	e75e      	b.n	8003010 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003152:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003154:	f000 f8d0 	bl	80032f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003158:	f000 fbf6 	bl	8003948 <xTaskResumeAll>
 800315c:	e758      	b.n	8003010 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800315e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003160:	f000 f8ca 	bl	80032f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003164:	f000 fbf0 	bl	8003948 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800316a:	f000 f917 	bl	800339c <prvIsQueueEmpty>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	f43f af4d 	beq.w	8003010 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00d      	beq.n	8003198 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800317c:	f001 fe12 	bl	8004da4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003180:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003182:	f000 f811 	bl	80031a8 <prvGetDisinheritPriorityAfterTimeout>
 8003186:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800318e:	4618      	mov	r0, r3
 8003190:	f001 f8a2 	bl	80042d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003194:	f001 fe36 	bl	8004e04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003198:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800319a:	4618      	mov	r0, r3
 800319c:	3738      	adds	r7, #56	; 0x38
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	e000ed04 	.word	0xe000ed04

080031a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d006      	beq.n	80031c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	e001      	b.n	80031ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80031ca:	68fb      	ldr	r3, [r7, #12]
	}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10d      	bne.n	8003212 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d14d      	bne.n	800329a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fffa 	bl	80041fc <xTaskPriorityDisinherit>
 8003208:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	e043      	b.n	800329a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d119      	bne.n	800324c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6858      	ldr	r0, [r3, #4]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	461a      	mov	r2, r3
 8003222:	68b9      	ldr	r1, [r7, #8]
 8003224:	f002 f8f4 	bl	8005410 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	441a      	add	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	429a      	cmp	r2, r3
 8003240:	d32b      	bcc.n	800329a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	e026      	b.n	800329a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	68d8      	ldr	r0, [r3, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	461a      	mov	r2, r3
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	f002 f8da 	bl	8005410 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	425b      	negs	r3, r3
 8003266:	441a      	add	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d207      	bcs.n	8003288 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	425b      	negs	r3, r3
 8003282:	441a      	add	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d105      	bne.n	800329a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	3b01      	subs	r3, #1
 8003298:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032a2:	697b      	ldr	r3, [r7, #20]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d018      	beq.n	80032f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	441a      	add	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d303      	bcc.n	80032e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68d9      	ldr	r1, [r3, #12]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	461a      	mov	r2, r3
 80032ea:	6838      	ldr	r0, [r7, #0]
 80032ec:	f002 f890 	bl	8005410 <memcpy>
	}
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003300:	f001 fd50 	bl	8004da4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800330a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800330c:	e011      	b.n	8003332 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	2b00      	cmp	r3, #0
 8003314:	d012      	beq.n	800333c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3324      	adds	r3, #36	; 0x24
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fd2a 	bl	8003d74 <xTaskRemoveFromEventList>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003326:	f000 fe01 	bl	8003f2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	3b01      	subs	r3, #1
 800332e:	b2db      	uxtb	r3, r3
 8003330:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003336:	2b00      	cmp	r3, #0
 8003338:	dce9      	bgt.n	800330e <prvUnlockQueue+0x16>
 800333a:	e000      	b.n	800333e <prvUnlockQueue+0x46>
					break;
 800333c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	22ff      	movs	r2, #255	; 0xff
 8003342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003346:	f001 fd5d 	bl	8004e04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800334a:	f001 fd2b 	bl	8004da4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003354:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003356:	e011      	b.n	800337c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d012      	beq.n	8003386 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3310      	adds	r3, #16
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fd05 	bl	8003d74 <xTaskRemoveFromEventList>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003370:	f000 fddc 	bl	8003f2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003374:	7bbb      	ldrb	r3, [r7, #14]
 8003376:	3b01      	subs	r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800337c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003380:	2b00      	cmp	r3, #0
 8003382:	dce9      	bgt.n	8003358 <prvUnlockQueue+0x60>
 8003384:	e000      	b.n	8003388 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003386:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	22ff      	movs	r2, #255	; 0xff
 800338c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003390:	f001 fd38 	bl	8004e04 <vPortExitCritical>
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033a4:	f001 fcfe 	bl	8004da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033b0:	2301      	movs	r3, #1
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e001      	b.n	80033ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ba:	f001 fd23 	bl	8004e04 <vPortExitCritical>

	return xReturn;
 80033be:	68fb      	ldr	r3, [r7, #12]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033d0:	f001 fce8 	bl	8004da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033dc:	429a      	cmp	r2, r3
 80033de:	d102      	bne.n	80033e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e001      	b.n	80033ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ea:	f001 fd0b 	bl	8004e04 <vPortExitCritical>

	return xReturn;
 80033ee:	68fb      	ldr	r3, [r7, #12]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	e014      	b.n	8003432 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003408:	4a0f      	ldr	r2, [pc, #60]	; (8003448 <vQueueAddToRegistry+0x50>)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10b      	bne.n	800342c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003414:	490c      	ldr	r1, [pc, #48]	; (8003448 <vQueueAddToRegistry+0x50>)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <vQueueAddToRegistry+0x50>)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800342a:	e006      	b.n	800343a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3301      	adds	r3, #1
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b07      	cmp	r3, #7
 8003436:	d9e7      	bls.n	8003408 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	200007e8 	.word	0x200007e8

0800344c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800345c:	f001 fca2 	bl	8004da4 <vPortEnterCritical>
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003466:	b25b      	sxtb	r3, r3
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800346c:	d103      	bne.n	8003476 <vQueueWaitForMessageRestricted+0x2a>
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800347c:	b25b      	sxtb	r3, r3
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003482:	d103      	bne.n	800348c <vQueueWaitForMessageRestricted+0x40>
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800348c:	f001 fcba 	bl	8004e04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	2b00      	cmp	r3, #0
 8003496:	d106      	bne.n	80034a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3324      	adds	r3, #36	; 0x24
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fc3b 	bl	8003d1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034a6:	6978      	ldr	r0, [r7, #20]
 80034a8:	f7ff ff26 	bl	80032f8 <prvUnlockQueue>
	}
 80034ac:	bf00      	nop
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08e      	sub	sp, #56	; 0x38
 80034b8:	af04      	add	r7, sp, #16
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <xTaskCreateStatic+0x2a>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	623b      	str	r3, [r7, #32]
}
 80034da:	bf00      	nop
 80034dc:	e7fe      	b.n	80034dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <xTaskCreateStatic+0x46>
	__asm volatile
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	61fb      	str	r3, [r7, #28]
}
 80034f6:	bf00      	nop
 80034f8:	e7fe      	b.n	80034f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034fa:	235c      	movs	r3, #92	; 0x5c
 80034fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b5c      	cmp	r3, #92	; 0x5c
 8003502:	d00a      	beq.n	800351a <xTaskCreateStatic+0x66>
	__asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	61bb      	str	r3, [r7, #24]
}
 8003516:	bf00      	nop
 8003518:	e7fe      	b.n	8003518 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800351a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01e      	beq.n	8003560 <xTaskCreateStatic+0xac>
 8003522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01b      	beq.n	8003560 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003530:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	2202      	movs	r2, #2
 8003536:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800353a:	2300      	movs	r3, #0
 800353c:	9303      	str	r3, [sp, #12]
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	9302      	str	r3, [sp, #8]
 8003542:	f107 0314 	add.w	r3, r7, #20
 8003546:	9301      	str	r3, [sp, #4]
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f850 	bl	80035f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003558:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800355a:	f000 f8dd 	bl	8003718 <prvAddNewTaskToReadyList>
 800355e:	e001      	b.n	8003564 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003564:	697b      	ldr	r3, [r7, #20]
	}
 8003566:	4618      	mov	r0, r3
 8003568:	3728      	adds	r7, #40	; 0x28
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800356e:	b580      	push	{r7, lr}
 8003570:	b08c      	sub	sp, #48	; 0x30
 8003572:	af04      	add	r7, sp, #16
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4618      	mov	r0, r3
 8003584:	f001 fd30 	bl	8004fe8 <pvPortMalloc>
 8003588:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00e      	beq.n	80035ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003590:	205c      	movs	r0, #92	; 0x5c
 8003592:	f001 fd29 	bl	8004fe8 <pvPortMalloc>
 8003596:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
 80035a4:	e005      	b.n	80035b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035a6:	6978      	ldr	r0, [r7, #20]
 80035a8:	f001 fdea 	bl	8005180 <vPortFree>
 80035ac:	e001      	b.n	80035b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d017      	beq.n	80035e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035c0:	88fa      	ldrh	r2, [r7, #6]
 80035c2:	2300      	movs	r3, #0
 80035c4:	9303      	str	r3, [sp, #12]
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	9302      	str	r3, [sp, #8]
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f80e 	bl	80035f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035dc:	69f8      	ldr	r0, [r7, #28]
 80035de:	f000 f89b 	bl	8003718 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035e2:	2301      	movs	r3, #1
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	e002      	b.n	80035ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035ee:	69bb      	ldr	r3, [r7, #24]
	}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3720      	adds	r7, #32
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	461a      	mov	r2, r3
 8003610:	21a5      	movs	r1, #165	; 0xa5
 8003612:	f001 ff0b 	bl	800542c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003620:	3b01      	subs	r3, #1
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f023 0307 	bic.w	r3, r3, #7
 800362e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <prvInitialiseNewTask+0x58>
	__asm volatile
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	617b      	str	r3, [r7, #20]
}
 800364c:	bf00      	nop
 800364e:	e7fe      	b.n	800364e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d01f      	beq.n	8003696 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	e012      	b.n	8003682 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	7819      	ldrb	r1, [r3, #0]
 8003664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	3334      	adds	r3, #52	; 0x34
 800366c:	460a      	mov	r2, r1
 800366e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	4413      	add	r3, r2
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d006      	beq.n	800368a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	3301      	adds	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	2b0f      	cmp	r3, #15
 8003686:	d9e9      	bls.n	800365c <prvInitialiseNewTask+0x64>
 8003688:	e000      	b.n	800368c <prvInitialiseNewTask+0x94>
			{
				break;
 800368a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003694:	e003      	b.n	800369e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a0:	2b37      	cmp	r3, #55	; 0x37
 80036a2:	d901      	bls.n	80036a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036a4:	2337      	movs	r3, #55	; 0x37
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	2200      	movs	r2, #0
 80036b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	3304      	adds	r3, #4
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe ffe8 	bl	8002694 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	3318      	adds	r3, #24
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe ffe3 	bl	8002694 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	2200      	movs	r2, #0
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	68f9      	ldr	r1, [r7, #12]
 80036f6:	69b8      	ldr	r0, [r7, #24]
 80036f8:	f001 fa26 	bl	8004b48 <pxPortInitialiseStack>
 80036fc:	4602      	mov	r2, r0
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800370c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800370e:	bf00      	nop
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003720:	f001 fb40 	bl	8004da4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003724:	4b2d      	ldr	r3, [pc, #180]	; (80037dc <prvAddNewTaskToReadyList+0xc4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3301      	adds	r3, #1
 800372a:	4a2c      	ldr	r2, [pc, #176]	; (80037dc <prvAddNewTaskToReadyList+0xc4>)
 800372c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800372e:	4b2c      	ldr	r3, [pc, #176]	; (80037e0 <prvAddNewTaskToReadyList+0xc8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003736:	4a2a      	ldr	r2, [pc, #168]	; (80037e0 <prvAddNewTaskToReadyList+0xc8>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800373c:	4b27      	ldr	r3, [pc, #156]	; (80037dc <prvAddNewTaskToReadyList+0xc4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d110      	bne.n	8003766 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003744:	f000 fc16 	bl	8003f74 <prvInitialiseTaskLists>
 8003748:	e00d      	b.n	8003766 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800374a:	4b26      	ldr	r3, [pc, #152]	; (80037e4 <prvAddNewTaskToReadyList+0xcc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003752:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <prvAddNewTaskToReadyList+0xc8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	429a      	cmp	r2, r3
 800375e:	d802      	bhi.n	8003766 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003760:	4a1f      	ldr	r2, [pc, #124]	; (80037e0 <prvAddNewTaskToReadyList+0xc8>)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003766:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <prvAddNewTaskToReadyList+0xd0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3301      	adds	r3, #1
 800376c:	4a1e      	ldr	r2, [pc, #120]	; (80037e8 <prvAddNewTaskToReadyList+0xd0>)
 800376e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003770:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <prvAddNewTaskToReadyList+0xd0>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377c:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <prvAddNewTaskToReadyList+0xd4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d903      	bls.n	800378c <prvAddNewTaskToReadyList+0x74>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	4a18      	ldr	r2, [pc, #96]	; (80037ec <prvAddNewTaskToReadyList+0xd4>)
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <prvAddNewTaskToReadyList+0xd8>)
 800379a:	441a      	add	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3304      	adds	r3, #4
 80037a0:	4619      	mov	r1, r3
 80037a2:	4610      	mov	r0, r2
 80037a4:	f7fe ff83 	bl	80026ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037a8:	f001 fb2c 	bl	8004e04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037ac:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <prvAddNewTaskToReadyList+0xcc>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00e      	beq.n	80037d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037b4:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <prvAddNewTaskToReadyList+0xc8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	429a      	cmp	r2, r3
 80037c0:	d207      	bcs.n	80037d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037c2:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <prvAddNewTaskToReadyList+0xdc>)
 80037c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000cfc 	.word	0x20000cfc
 80037e0:	20000828 	.word	0x20000828
 80037e4:	20000d08 	.word	0x20000d08
 80037e8:	20000d18 	.word	0x20000d18
 80037ec:	20000d04 	.word	0x20000d04
 80037f0:	2000082c 	.word	0x2000082c
 80037f4:	e000ed04 	.word	0xe000ed04

080037f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d017      	beq.n	800383a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800380a:	4b13      	ldr	r3, [pc, #76]	; (8003858 <vTaskDelay+0x60>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <vTaskDelay+0x30>
	__asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	60bb      	str	r3, [r7, #8]
}
 8003824:	bf00      	nop
 8003826:	e7fe      	b.n	8003826 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003828:	f000 f880 	bl	800392c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800382c:	2100      	movs	r1, #0
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fde8 	bl	8004404 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003834:	f000 f888 	bl	8003948 <xTaskResumeAll>
 8003838:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d107      	bne.n	8003850 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <vTaskDelay+0x64>)
 8003842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20000d24 	.word	0x20000d24
 800385c:	e000ed04 	.word	0xe000ed04

08003860 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003866:	2300      	movs	r3, #0
 8003868:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800386a:	2300      	movs	r3, #0
 800386c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800386e:	463a      	mov	r2, r7
 8003870:	1d39      	adds	r1, r7, #4
 8003872:	f107 0308 	add.w	r3, r7, #8
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe feb8 	bl	80025ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800387c:	6839      	ldr	r1, [r7, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	9202      	str	r2, [sp, #8]
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	2300      	movs	r3, #0
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	2300      	movs	r3, #0
 800388c:	460a      	mov	r2, r1
 800388e:	4921      	ldr	r1, [pc, #132]	; (8003914 <vTaskStartScheduler+0xb4>)
 8003890:	4821      	ldr	r0, [pc, #132]	; (8003918 <vTaskStartScheduler+0xb8>)
 8003892:	f7ff fe0f 	bl	80034b4 <xTaskCreateStatic>
 8003896:	4603      	mov	r3, r0
 8003898:	4a20      	ldr	r2, [pc, #128]	; (800391c <vTaskStartScheduler+0xbc>)
 800389a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800389c:	4b1f      	ldr	r3, [pc, #124]	; (800391c <vTaskStartScheduler+0xbc>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038a4:	2301      	movs	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	e001      	b.n	80038ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d102      	bne.n	80038ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038b4:	f000 fdfa 	bl	80044ac <xTimerCreateTimerTask>
 80038b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d116      	bne.n	80038ee <vTaskStartScheduler+0x8e>
	__asm volatile
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	613b      	str	r3, [r7, #16]
}
 80038d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038d4:	4b12      	ldr	r3, [pc, #72]	; (8003920 <vTaskStartScheduler+0xc0>)
 80038d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038dc:	4b11      	ldr	r3, [pc, #68]	; (8003924 <vTaskStartScheduler+0xc4>)
 80038de:	2201      	movs	r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <vTaskStartScheduler+0xc8>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038e8:	f001 f9ba 	bl	8004c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038ec:	e00e      	b.n	800390c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038f4:	d10a      	bne.n	800390c <vTaskStartScheduler+0xac>
	__asm volatile
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	60fb      	str	r3, [r7, #12]
}
 8003908:	bf00      	nop
 800390a:	e7fe      	b.n	800390a <vTaskStartScheduler+0xaa>
}
 800390c:	bf00      	nop
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	080064d0 	.word	0x080064d0
 8003918:	08003f45 	.word	0x08003f45
 800391c:	20000d20 	.word	0x20000d20
 8003920:	20000d1c 	.word	0x20000d1c
 8003924:	20000d08 	.word	0x20000d08
 8003928:	20000d00 	.word	0x20000d00

0800392c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <vTaskSuspendAll+0x18>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3301      	adds	r3, #1
 8003936:	4a03      	ldr	r2, [pc, #12]	; (8003944 <vTaskSuspendAll+0x18>)
 8003938:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800393a:	bf00      	nop
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	20000d24 	.word	0x20000d24

08003948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003956:	4b42      	ldr	r3, [pc, #264]	; (8003a60 <xTaskResumeAll+0x118>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <xTaskResumeAll+0x2c>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	603b      	str	r3, [r7, #0]
}
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003974:	f001 fa16 	bl	8004da4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003978:	4b39      	ldr	r3, [pc, #228]	; (8003a60 <xTaskResumeAll+0x118>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3b01      	subs	r3, #1
 800397e:	4a38      	ldr	r2, [pc, #224]	; (8003a60 <xTaskResumeAll+0x118>)
 8003980:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003982:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <xTaskResumeAll+0x118>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d162      	bne.n	8003a50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800398a:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <xTaskResumeAll+0x11c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d05e      	beq.n	8003a50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003992:	e02f      	b.n	80039f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003994:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <xTaskResumeAll+0x120>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3318      	adds	r3, #24
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe fee1 	bl	8002768 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3304      	adds	r3, #4
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe fedc 	bl	8002768 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b4:	4b2d      	ldr	r3, [pc, #180]	; (8003a6c <xTaskResumeAll+0x124>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d903      	bls.n	80039c4 <xTaskResumeAll+0x7c>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	4a2a      	ldr	r2, [pc, #168]	; (8003a6c <xTaskResumeAll+0x124>)
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4a27      	ldr	r2, [pc, #156]	; (8003a70 <xTaskResumeAll+0x128>)
 80039d2:	441a      	add	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f7fe fe67 	bl	80026ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	4b23      	ldr	r3, [pc, #140]	; (8003a74 <xTaskResumeAll+0x12c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d302      	bcc.n	80039f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80039ee:	4b22      	ldr	r3, [pc, #136]	; (8003a78 <xTaskResumeAll+0x130>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039f4:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <xTaskResumeAll+0x120>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1cb      	bne.n	8003994 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a02:	f000 fb55 	bl	80040b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a06:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <xTaskResumeAll+0x134>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d010      	beq.n	8003a34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a12:	f000 f847 	bl	8003aa4 <xTaskIncrementTick>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a1c:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <xTaskResumeAll+0x130>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f1      	bne.n	8003a12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003a2e:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <xTaskResumeAll+0x134>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a34:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <xTaskResumeAll+0x130>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d009      	beq.n	8003a50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <xTaskResumeAll+0x138>)
 8003a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a50:	f001 f9d8 	bl	8004e04 <vPortExitCritical>

	return xAlreadyYielded;
 8003a54:	68bb      	ldr	r3, [r7, #8]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000d24 	.word	0x20000d24
 8003a64:	20000cfc 	.word	0x20000cfc
 8003a68:	20000cbc 	.word	0x20000cbc
 8003a6c:	20000d04 	.word	0x20000d04
 8003a70:	2000082c 	.word	0x2000082c
 8003a74:	20000828 	.word	0x20000828
 8003a78:	20000d10 	.word	0x20000d10
 8003a7c:	20000d0c 	.word	0x20000d0c
 8003a80:	e000ed04 	.word	0xe000ed04

08003a84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a8a:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <xTaskGetTickCount+0x1c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a90:	687b      	ldr	r3, [r7, #4]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20000d00 	.word	0x20000d00

08003aa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aae:	4b4f      	ldr	r3, [pc, #316]	; (8003bec <xTaskIncrementTick+0x148>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f040 808f 	bne.w	8003bd6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ab8:	4b4d      	ldr	r3, [pc, #308]	; (8003bf0 <xTaskIncrementTick+0x14c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ac0:	4a4b      	ldr	r2, [pc, #300]	; (8003bf0 <xTaskIncrementTick+0x14c>)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d120      	bne.n	8003b0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003acc:	4b49      	ldr	r3, [pc, #292]	; (8003bf4 <xTaskIncrementTick+0x150>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <xTaskIncrementTick+0x48>
	__asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	603b      	str	r3, [r7, #0]
}
 8003ae8:	bf00      	nop
 8003aea:	e7fe      	b.n	8003aea <xTaskIncrementTick+0x46>
 8003aec:	4b41      	ldr	r3, [pc, #260]	; (8003bf4 <xTaskIncrementTick+0x150>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	4b41      	ldr	r3, [pc, #260]	; (8003bf8 <xTaskIncrementTick+0x154>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a3f      	ldr	r2, [pc, #252]	; (8003bf4 <xTaskIncrementTick+0x150>)
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	4a3f      	ldr	r2, [pc, #252]	; (8003bf8 <xTaskIncrementTick+0x154>)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	4b3e      	ldr	r3, [pc, #248]	; (8003bfc <xTaskIncrementTick+0x158>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3301      	adds	r3, #1
 8003b06:	4a3d      	ldr	r2, [pc, #244]	; (8003bfc <xTaskIncrementTick+0x158>)
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	f000 fad1 	bl	80040b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b0e:	4b3c      	ldr	r3, [pc, #240]	; (8003c00 <xTaskIncrementTick+0x15c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d349      	bcc.n	8003bac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b18:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <xTaskIncrementTick+0x150>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d104      	bne.n	8003b2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b22:	4b37      	ldr	r3, [pc, #220]	; (8003c00 <xTaskIncrementTick+0x15c>)
 8003b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b28:	601a      	str	r2, [r3, #0]
					break;
 8003b2a:	e03f      	b.n	8003bac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b2c:	4b31      	ldr	r3, [pc, #196]	; (8003bf4 <xTaskIncrementTick+0x150>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d203      	bcs.n	8003b4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b44:	4a2e      	ldr	r2, [pc, #184]	; (8003c00 <xTaskIncrementTick+0x15c>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b4a:	e02f      	b.n	8003bac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe fe09 	bl	8002768 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d004      	beq.n	8003b68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	3318      	adds	r3, #24
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fe00 	bl	8002768 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6c:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <xTaskIncrementTick+0x160>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d903      	bls.n	8003b7c <xTaskIncrementTick+0xd8>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	4a22      	ldr	r2, [pc, #136]	; (8003c04 <xTaskIncrementTick+0x160>)
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4a1f      	ldr	r2, [pc, #124]	; (8003c08 <xTaskIncrementTick+0x164>)
 8003b8a:	441a      	add	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f7fe fd8b 	bl	80026ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <xTaskIncrementTick+0x168>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d3b8      	bcc.n	8003b18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003baa:	e7b5      	b.n	8003b18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bac:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <xTaskIncrementTick+0x168>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb2:	4915      	ldr	r1, [pc, #84]	; (8003c08 <xTaskIncrementTick+0x164>)
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d901      	bls.n	8003bc8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003bc8:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <xTaskIncrementTick+0x16c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	e004      	b.n	8003be0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003bd6:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <xTaskIncrementTick+0x170>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	4a0d      	ldr	r2, [pc, #52]	; (8003c14 <xTaskIncrementTick+0x170>)
 8003bde:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003be0:	697b      	ldr	r3, [r7, #20]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000d24 	.word	0x20000d24
 8003bf0:	20000d00 	.word	0x20000d00
 8003bf4:	20000cb4 	.word	0x20000cb4
 8003bf8:	20000cb8 	.word	0x20000cb8
 8003bfc:	20000d14 	.word	0x20000d14
 8003c00:	20000d1c 	.word	0x20000d1c
 8003c04:	20000d04 	.word	0x20000d04
 8003c08:	2000082c 	.word	0x2000082c
 8003c0c:	20000828 	.word	0x20000828
 8003c10:	20000d10 	.word	0x20000d10
 8003c14:	20000d0c 	.word	0x20000d0c

08003c18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c1e:	4b28      	ldr	r3, [pc, #160]	; (8003cc0 <vTaskSwitchContext+0xa8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c26:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <vTaskSwitchContext+0xac>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c2c:	e041      	b.n	8003cb2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003c2e:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <vTaskSwitchContext+0xac>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c34:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <vTaskSwitchContext+0xb0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	e010      	b.n	8003c5e <vTaskSwitchContext+0x46>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10a      	bne.n	8003c58 <vTaskSwitchContext+0x40>
	__asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	607b      	str	r3, [r7, #4]
}
 8003c54:	bf00      	nop
 8003c56:	e7fe      	b.n	8003c56 <vTaskSwitchContext+0x3e>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	491b      	ldr	r1, [pc, #108]	; (8003ccc <vTaskSwitchContext+0xb4>)
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0e4      	beq.n	8003c3c <vTaskSwitchContext+0x24>
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4a13      	ldr	r2, [pc, #76]	; (8003ccc <vTaskSwitchContext+0xb4>)
 8003c7e:	4413      	add	r3, r2
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	605a      	str	r2, [r3, #4]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	3308      	adds	r3, #8
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d104      	bne.n	8003ca2 <vTaskSwitchContext+0x8a>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4a09      	ldr	r2, [pc, #36]	; (8003cd0 <vTaskSwitchContext+0xb8>)
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	4a06      	ldr	r2, [pc, #24]	; (8003cc8 <vTaskSwitchContext+0xb0>)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6013      	str	r3, [r2, #0]
}
 8003cb2:	bf00      	nop
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000d24 	.word	0x20000d24
 8003cc4:	20000d10 	.word	0x20000d10
 8003cc8:	20000d04 	.word	0x20000d04
 8003ccc:	2000082c 	.word	0x2000082c
 8003cd0:	20000828 	.word	0x20000828

08003cd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	60fb      	str	r3, [r7, #12]
}
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <vTaskPlaceOnEventList+0x44>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3318      	adds	r3, #24
 8003d00:	4619      	mov	r1, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fe fcf7 	bl	80026f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d08:	2101      	movs	r1, #1
 8003d0a:	6838      	ldr	r0, [r7, #0]
 8003d0c:	f000 fb7a 	bl	8004404 <prvAddCurrentTaskToDelayedList>
}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20000828 	.word	0x20000828

08003d1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	617b      	str	r3, [r7, #20]
}
 8003d40:	bf00      	nop
 8003d42:	e7fe      	b.n	8003d42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d44:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3318      	adds	r3, #24
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7fe fcae 	bl	80026ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	68b8      	ldr	r0, [r7, #8]
 8003d62:	f000 fb4f 	bl	8004404 <prvAddCurrentTaskToDelayedList>
	}
 8003d66:	bf00      	nop
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000828 	.word	0x20000828

08003d74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10a      	bne.n	8003da0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	60fb      	str	r3, [r7, #12]
}
 8003d9c:	bf00      	nop
 8003d9e:	e7fe      	b.n	8003d9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	3318      	adds	r3, #24
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fe fcdf 	bl	8002768 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003daa:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <xTaskRemoveFromEventList+0xb0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d11d      	bne.n	8003dee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	3304      	adds	r3, #4
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fe fcd6 	bl	8002768 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <xTaskRemoveFromEventList+0xb4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d903      	bls.n	8003dd0 <xTaskRemoveFromEventList+0x5c>
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	4a16      	ldr	r2, [pc, #88]	; (8003e28 <xTaskRemoveFromEventList+0xb4>)
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <xTaskRemoveFromEventList+0xb8>)
 8003dde:	441a      	add	r2, r3
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4619      	mov	r1, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f7fe fc61 	bl	80026ae <vListInsertEnd>
 8003dec:	e005      	b.n	8003dfa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	3318      	adds	r3, #24
 8003df2:	4619      	mov	r1, r3
 8003df4:	480e      	ldr	r0, [pc, #56]	; (8003e30 <xTaskRemoveFromEventList+0xbc>)
 8003df6:	f7fe fc5a 	bl	80026ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfe:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <xTaskRemoveFromEventList+0xc0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d905      	bls.n	8003e14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <xTaskRemoveFromEventList+0xc4>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	e001      	b.n	8003e18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e18:	697b      	ldr	r3, [r7, #20]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000d24 	.word	0x20000d24
 8003e28:	20000d04 	.word	0x20000d04
 8003e2c:	2000082c 	.word	0x2000082c
 8003e30:	20000cbc 	.word	0x20000cbc
 8003e34:	20000828 	.word	0x20000828
 8003e38:	20000d10 	.word	0x20000d10

08003e3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e44:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <vTaskInternalSetTimeOutState+0x24>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <vTaskInternalSetTimeOutState+0x28>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	605a      	str	r2, [r3, #4]
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	20000d14 	.word	0x20000d14
 8003e64:	20000d00 	.word	0x20000d00

08003e68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	613b      	str	r3, [r7, #16]
}
 8003e8a:	bf00      	nop
 8003e8c:	e7fe      	b.n	8003e8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	60fb      	str	r3, [r7, #12]
}
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003eaa:	f000 ff7b 	bl	8004da4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003eae:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <xTaskCheckForTimeOut+0xbc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ec6:	d102      	bne.n	8003ece <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	e023      	b.n	8003f16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <xTaskCheckForTimeOut+0xc0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d007      	beq.n	8003eea <xTaskCheckForTimeOut+0x82>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d302      	bcc.n	8003eea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	e015      	b.n	8003f16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d20b      	bcs.n	8003f0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	1ad2      	subs	r2, r2, r3
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff ff9b 	bl	8003e3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	e004      	b.n	8003f16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f12:	2301      	movs	r3, #1
 8003f14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f16:	f000 ff75 	bl	8004e04 <vPortExitCritical>

	return xReturn;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20000d00 	.word	0x20000d00
 8003f28:	20000d14 	.word	0x20000d14

08003f2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <vTaskMissedYield+0x14>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
}
 8003f36:	bf00      	nop
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	20000d10 	.word	0x20000d10

08003f44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f4c:	f000 f852 	bl	8003ff4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <prvIdleTask+0x28>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d9f9      	bls.n	8003f4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f58:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <prvIdleTask+0x2c>)
 8003f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f68:	e7f0      	b.n	8003f4c <prvIdleTask+0x8>
 8003f6a:	bf00      	nop
 8003f6c:	2000082c 	.word	0x2000082c
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	607b      	str	r3, [r7, #4]
 8003f7e:	e00c      	b.n	8003f9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <prvInitialiseTaskLists+0x60>)
 8003f8c:	4413      	add	r3, r2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe fb60 	bl	8002654 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3301      	adds	r3, #1
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b37      	cmp	r3, #55	; 0x37
 8003f9e:	d9ef      	bls.n	8003f80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fa0:	480d      	ldr	r0, [pc, #52]	; (8003fd8 <prvInitialiseTaskLists+0x64>)
 8003fa2:	f7fe fb57 	bl	8002654 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fa6:	480d      	ldr	r0, [pc, #52]	; (8003fdc <prvInitialiseTaskLists+0x68>)
 8003fa8:	f7fe fb54 	bl	8002654 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fac:	480c      	ldr	r0, [pc, #48]	; (8003fe0 <prvInitialiseTaskLists+0x6c>)
 8003fae:	f7fe fb51 	bl	8002654 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fb2:	480c      	ldr	r0, [pc, #48]	; (8003fe4 <prvInitialiseTaskLists+0x70>)
 8003fb4:	f7fe fb4e 	bl	8002654 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fb8:	480b      	ldr	r0, [pc, #44]	; (8003fe8 <prvInitialiseTaskLists+0x74>)
 8003fba:	f7fe fb4b 	bl	8002654 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <prvInitialiseTaskLists+0x78>)
 8003fc0:	4a05      	ldr	r2, [pc, #20]	; (8003fd8 <prvInitialiseTaskLists+0x64>)
 8003fc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <prvInitialiseTaskLists+0x7c>)
 8003fc6:	4a05      	ldr	r2, [pc, #20]	; (8003fdc <prvInitialiseTaskLists+0x68>)
 8003fc8:	601a      	str	r2, [r3, #0]
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	2000082c 	.word	0x2000082c
 8003fd8:	20000c8c 	.word	0x20000c8c
 8003fdc:	20000ca0 	.word	0x20000ca0
 8003fe0:	20000cbc 	.word	0x20000cbc
 8003fe4:	20000cd0 	.word	0x20000cd0
 8003fe8:	20000ce8 	.word	0x20000ce8
 8003fec:	20000cb4 	.word	0x20000cb4
 8003ff0:	20000cb8 	.word	0x20000cb8

08003ff4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ffa:	e019      	b.n	8004030 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ffc:	f000 fed2 	bl	8004da4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004000:	4b10      	ldr	r3, [pc, #64]	; (8004044 <prvCheckTasksWaitingTermination+0x50>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	4618      	mov	r0, r3
 800400e:	f7fe fbab 	bl	8002768 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004012:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <prvCheckTasksWaitingTermination+0x54>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3b01      	subs	r3, #1
 8004018:	4a0b      	ldr	r2, [pc, #44]	; (8004048 <prvCheckTasksWaitingTermination+0x54>)
 800401a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <prvCheckTasksWaitingTermination+0x58>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3b01      	subs	r3, #1
 8004022:	4a0a      	ldr	r2, [pc, #40]	; (800404c <prvCheckTasksWaitingTermination+0x58>)
 8004024:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004026:	f000 feed 	bl	8004e04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f810 	bl	8004050 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <prvCheckTasksWaitingTermination+0x58>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e1      	bne.n	8003ffc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000cd0 	.word	0x20000cd0
 8004048:	20000cfc 	.word	0x20000cfc
 800404c:	20000ce4 	.word	0x20000ce4

08004050 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800405e:	2b00      	cmp	r3, #0
 8004060:	d108      	bne.n	8004074 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	4618      	mov	r0, r3
 8004068:	f001 f88a 	bl	8005180 <vPortFree>
				vPortFree( pxTCB );
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f001 f887 	bl	8005180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004072:	e018      	b.n	80040a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800407a:	2b01      	cmp	r3, #1
 800407c:	d103      	bne.n	8004086 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f001 f87e 	bl	8005180 <vPortFree>
	}
 8004084:	e00f      	b.n	80040a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800408c:	2b02      	cmp	r3, #2
 800408e:	d00a      	beq.n	80040a6 <prvDeleteTCB+0x56>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	60fb      	str	r3, [r7, #12]
}
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <prvDeleteTCB+0x54>
	}
 80040a6:	bf00      	nop
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040b6:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <prvResetNextTaskUnblockTime+0x38>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d104      	bne.n	80040ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040c0:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <prvResetNextTaskUnblockTime+0x3c>)
 80040c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040c8:	e008      	b.n	80040dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ca:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <prvResetNextTaskUnblockTime+0x38>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4a04      	ldr	r2, [pc, #16]	; (80040ec <prvResetNextTaskUnblockTime+0x3c>)
 80040da:	6013      	str	r3, [r2, #0]
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	20000cb4 	.word	0x20000cb4
 80040ec:	20000d1c 	.word	0x20000d1c

080040f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040f6:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <xTaskGetSchedulerState+0x34>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040fe:	2301      	movs	r3, #1
 8004100:	607b      	str	r3, [r7, #4]
 8004102:	e008      	b.n	8004116 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004104:	4b08      	ldr	r3, [pc, #32]	; (8004128 <xTaskGetSchedulerState+0x38>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d102      	bne.n	8004112 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800410c:	2302      	movs	r3, #2
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	e001      	b.n	8004116 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004112:	2300      	movs	r3, #0
 8004114:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004116:	687b      	ldr	r3, [r7, #4]
	}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	20000d08 	.word	0x20000d08
 8004128:	20000d24 	.word	0x20000d24

0800412c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004138:	2300      	movs	r3, #0
 800413a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d051      	beq.n	80041e6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004146:	4b2a      	ldr	r3, [pc, #168]	; (80041f0 <xTaskPriorityInherit+0xc4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	429a      	cmp	r2, r3
 800414e:	d241      	bcs.n	80041d4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	db06      	blt.n	8004166 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004158:	4b25      	ldr	r3, [pc, #148]	; (80041f0 <xTaskPriorityInherit+0xc4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	6959      	ldr	r1, [r3, #20]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <xTaskPriorityInherit+0xc8>)
 8004178:	4413      	add	r3, r2
 800417a:	4299      	cmp	r1, r3
 800417c:	d122      	bne.n	80041c4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	3304      	adds	r3, #4
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe faf0 	bl	8002768 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004188:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <xTaskPriorityInherit+0xc4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004196:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <xTaskPriorityInherit+0xcc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d903      	bls.n	80041a6 <xTaskPriorityInherit+0x7a>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	4a15      	ldr	r2, [pc, #84]	; (80041f8 <xTaskPriorityInherit+0xcc>)
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4a10      	ldr	r2, [pc, #64]	; (80041f4 <xTaskPriorityInherit+0xc8>)
 80041b4:	441a      	add	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	3304      	adds	r3, #4
 80041ba:	4619      	mov	r1, r3
 80041bc:	4610      	mov	r0, r2
 80041be:	f7fe fa76 	bl	80026ae <vListInsertEnd>
 80041c2:	e004      	b.n	80041ce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80041c4:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <xTaskPriorityInherit+0xc4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80041ce:	2301      	movs	r3, #1
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	e008      	b.n	80041e6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <xTaskPriorityInherit+0xc4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	429a      	cmp	r2, r3
 80041e0:	d201      	bcs.n	80041e6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80041e2:	2301      	movs	r3, #1
 80041e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041e6:	68fb      	ldr	r3, [r7, #12]
	}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	20000828 	.word	0x20000828
 80041f4:	2000082c 	.word	0x2000082c
 80041f8:	20000d04 	.word	0x20000d04

080041fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d056      	beq.n	80042c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004212:	4b2e      	ldr	r3, [pc, #184]	; (80042cc <xTaskPriorityDisinherit+0xd0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	429a      	cmp	r2, r3
 800421a:	d00a      	beq.n	8004232 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	60fb      	str	r3, [r7, #12]
}
 800422e:	bf00      	nop
 8004230:	e7fe      	b.n	8004230 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	60bb      	str	r3, [r7, #8]
}
 800424c:	bf00      	nop
 800424e:	e7fe      	b.n	800424e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004254:	1e5a      	subs	r2, r3, #1
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004262:	429a      	cmp	r2, r3
 8004264:	d02c      	beq.n	80042c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426a:	2b00      	cmp	r3, #0
 800426c:	d128      	bne.n	80042c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	3304      	adds	r3, #4
 8004272:	4618      	mov	r0, r3
 8004274:	f7fe fa78 	bl	8002768 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004290:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <xTaskPriorityDisinherit+0xd4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d903      	bls.n	80042a0 <xTaskPriorityDisinherit+0xa4>
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	4a0c      	ldr	r2, [pc, #48]	; (80042d0 <xTaskPriorityDisinherit+0xd4>)
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4a09      	ldr	r2, [pc, #36]	; (80042d4 <xTaskPriorityDisinherit+0xd8>)
 80042ae:	441a      	add	r2, r3
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f7fe f9f9 	bl	80026ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042bc:	2301      	movs	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042c0:	697b      	ldr	r3, [r7, #20]
	}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000828 	.word	0x20000828
 80042d0:	20000d04 	.word	0x20000d04
 80042d4:	2000082c 	.word	0x2000082c

080042d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d06a      	beq.n	80043c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	60fb      	str	r3, [r7, #12]
}
 800430a:	bf00      	nop
 800430c:	e7fe      	b.n	800430c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d902      	bls.n	800431e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	61fb      	str	r3, [r7, #28]
 800431c:	e002      	b.n	8004324 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004322:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	429a      	cmp	r2, r3
 800432c:	d04b      	beq.n	80043c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	429a      	cmp	r2, r3
 8004336:	d146      	bne.n	80043c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004338:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	429a      	cmp	r2, r3
 8004340:	d10a      	bne.n	8004358 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	60bb      	str	r3, [r7, #8]
}
 8004354:	bf00      	nop
 8004356:	e7fe      	b.n	8004356 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	db04      	blt.n	8004376 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	6959      	ldr	r1, [r3, #20]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4a13      	ldr	r2, [pc, #76]	; (80043d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004386:	4413      	add	r3, r2
 8004388:	4299      	cmp	r1, r3
 800438a:	d11c      	bne.n	80043c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	3304      	adds	r3, #4
 8004390:	4618      	mov	r0, r3
 8004392:	f7fe f9e9 	bl	8002768 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439a:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d903      	bls.n	80043aa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	4a0c      	ldr	r2, [pc, #48]	; (80043d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4a07      	ldr	r2, [pc, #28]	; (80043d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80043b8:	441a      	add	r2, r3
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	3304      	adds	r3, #4
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f7fe f974 	bl	80026ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043c6:	bf00      	nop
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000828 	.word	0x20000828
 80043d4:	2000082c 	.word	0x2000082c
 80043d8:	20000d04 	.word	0x20000d04

080043dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80043e0:	4b07      	ldr	r3, [pc, #28]	; (8004400 <pvTaskIncrementMutexHeldCount+0x24>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <pvTaskIncrementMutexHeldCount+0x24>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043ee:	3201      	adds	r2, #1
 80043f0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80043f2:	4b03      	ldr	r3, [pc, #12]	; (8004400 <pvTaskIncrementMutexHeldCount+0x24>)
 80043f4:	681b      	ldr	r3, [r3, #0]
	}
 80043f6:	4618      	mov	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	20000828 	.word	0x20000828

08004404 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800440e:	4b21      	ldr	r3, [pc, #132]	; (8004494 <prvAddCurrentTaskToDelayedList+0x90>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004414:	4b20      	ldr	r3, [pc, #128]	; (8004498 <prvAddCurrentTaskToDelayedList+0x94>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3304      	adds	r3, #4
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe f9a4 	bl	8002768 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004426:	d10a      	bne.n	800443e <prvAddCurrentTaskToDelayedList+0x3a>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800442e:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <prvAddCurrentTaskToDelayedList+0x94>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3304      	adds	r3, #4
 8004434:	4619      	mov	r1, r3
 8004436:	4819      	ldr	r0, [pc, #100]	; (800449c <prvAddCurrentTaskToDelayedList+0x98>)
 8004438:	f7fe f939 	bl	80026ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800443c:	e026      	b.n	800448c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4413      	add	r3, r2
 8004444:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004446:	4b14      	ldr	r3, [pc, #80]	; (8004498 <prvAddCurrentTaskToDelayedList+0x94>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	429a      	cmp	r2, r3
 8004454:	d209      	bcs.n	800446a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004456:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <prvAddCurrentTaskToDelayedList+0x94>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3304      	adds	r3, #4
 8004460:	4619      	mov	r1, r3
 8004462:	4610      	mov	r0, r2
 8004464:	f7fe f947 	bl	80026f6 <vListInsert>
}
 8004468:	e010      	b.n	800448c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800446a:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <prvAddCurrentTaskToDelayedList+0x94>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3304      	adds	r3, #4
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f7fe f93d 	bl	80026f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800447c:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	429a      	cmp	r2, r3
 8004484:	d202      	bcs.n	800448c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004486:	4a08      	ldr	r2, [pc, #32]	; (80044a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	6013      	str	r3, [r2, #0]
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20000d00 	.word	0x20000d00
 8004498:	20000828 	.word	0x20000828
 800449c:	20000ce8 	.word	0x20000ce8
 80044a0:	20000cb8 	.word	0x20000cb8
 80044a4:	20000cb4 	.word	0x20000cb4
 80044a8:	20000d1c 	.word	0x20000d1c

080044ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	; 0x28
 80044b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044b6:	f000 fb07 	bl	8004ac8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044ba:	4b1c      	ldr	r3, [pc, #112]	; (800452c <xTimerCreateTimerTask+0x80>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d021      	beq.n	8004506 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80044ca:	1d3a      	adds	r2, r7, #4
 80044cc:	f107 0108 	add.w	r1, r7, #8
 80044d0:	f107 030c 	add.w	r3, r7, #12
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fe f8a3 	bl	8002620 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	9202      	str	r2, [sp, #8]
 80044e2:	9301      	str	r3, [sp, #4]
 80044e4:	2302      	movs	r3, #2
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	2300      	movs	r3, #0
 80044ea:	460a      	mov	r2, r1
 80044ec:	4910      	ldr	r1, [pc, #64]	; (8004530 <xTimerCreateTimerTask+0x84>)
 80044ee:	4811      	ldr	r0, [pc, #68]	; (8004534 <xTimerCreateTimerTask+0x88>)
 80044f0:	f7fe ffe0 	bl	80034b4 <xTaskCreateStatic>
 80044f4:	4603      	mov	r3, r0
 80044f6:	4a10      	ldr	r2, [pc, #64]	; (8004538 <xTimerCreateTimerTask+0x8c>)
 80044f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044fa:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <xTimerCreateTimerTask+0x8c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004502:	2301      	movs	r3, #1
 8004504:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	613b      	str	r3, [r7, #16]
}
 800451e:	bf00      	nop
 8004520:	e7fe      	b.n	8004520 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004522:	697b      	ldr	r3, [r7, #20]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000d58 	.word	0x20000d58
 8004530:	080064d8 	.word	0x080064d8
 8004534:	08004671 	.word	0x08004671
 8004538:	20000d5c 	.word	0x20000d5c

0800453c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	; 0x28
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800454a:	2300      	movs	r3, #0
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10a      	bne.n	800456a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	623b      	str	r3, [r7, #32]
}
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800456a:	4b1a      	ldr	r3, [pc, #104]	; (80045d4 <xTimerGenericCommand+0x98>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d02a      	beq.n	80045c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b05      	cmp	r3, #5
 8004582:	dc18      	bgt.n	80045b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004584:	f7ff fdb4 	bl	80040f0 <xTaskGetSchedulerState>
 8004588:	4603      	mov	r3, r0
 800458a:	2b02      	cmp	r3, #2
 800458c:	d109      	bne.n	80045a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800458e:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <xTimerGenericCommand+0x98>)
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	f107 0110 	add.w	r1, r7, #16
 8004596:	2300      	movs	r3, #0
 8004598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459a:	f7fe fa7f 	bl	8002a9c <xQueueGenericSend>
 800459e:	6278      	str	r0, [r7, #36]	; 0x24
 80045a0:	e012      	b.n	80045c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045a2:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <xTimerGenericCommand+0x98>)
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	f107 0110 	add.w	r1, r7, #16
 80045aa:	2300      	movs	r3, #0
 80045ac:	2200      	movs	r2, #0
 80045ae:	f7fe fa75 	bl	8002a9c <xQueueGenericSend>
 80045b2:	6278      	str	r0, [r7, #36]	; 0x24
 80045b4:	e008      	b.n	80045c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045b6:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <xTimerGenericCommand+0x98>)
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	f107 0110 	add.w	r1, r7, #16
 80045be:	2300      	movs	r3, #0
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	f7fe fb69 	bl	8002c98 <xQueueGenericSendFromISR>
 80045c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3728      	adds	r7, #40	; 0x28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000d58 	.word	0x20000d58

080045d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b088      	sub	sp, #32
 80045dc:	af02      	add	r7, sp, #8
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045e2:	4b22      	ldr	r3, [pc, #136]	; (800466c <prvProcessExpiredTimer+0x94>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fe f8b9 	bl	8002768 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d022      	beq.n	800464a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	699a      	ldr	r2, [r3, #24]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	18d1      	adds	r1, r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	6978      	ldr	r0, [r7, #20]
 8004612:	f000 f8d1 	bl	80047b8 <prvInsertTimerInActiveList>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01f      	beq.n	800465c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800461c:	2300      	movs	r3, #0
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	2300      	movs	r3, #0
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	2100      	movs	r1, #0
 8004626:	6978      	ldr	r0, [r7, #20]
 8004628:	f7ff ff88 	bl	800453c <xTimerGenericCommand>
 800462c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d113      	bne.n	800465c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	60fb      	str	r3, [r7, #12]
}
 8004646:	bf00      	nop
 8004648:	e7fe      	b.n	8004648 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004650:	f023 0301 	bic.w	r3, r3, #1
 8004654:	b2da      	uxtb	r2, r3
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	6978      	ldr	r0, [r7, #20]
 8004662:	4798      	blx	r3
}
 8004664:	bf00      	nop
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20000d50 	.word	0x20000d50

08004670 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004678:	f107 0308 	add.w	r3, r7, #8
 800467c:	4618      	mov	r0, r3
 800467e:	f000 f857 	bl	8004730 <prvGetNextExpireTime>
 8004682:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4619      	mov	r1, r3
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f803 	bl	8004694 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800468e:	f000 f8d5 	bl	800483c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004692:	e7f1      	b.n	8004678 <prvTimerTask+0x8>

08004694 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800469e:	f7ff f945 	bl	800392c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046a2:	f107 0308 	add.w	r3, r7, #8
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 f866 	bl	8004778 <prvSampleTimeNow>
 80046ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d130      	bne.n	8004716 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <prvProcessTimerOrBlockTask+0x3c>
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d806      	bhi.n	80046d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046c2:	f7ff f941 	bl	8003948 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046c6:	68f9      	ldr	r1, [r7, #12]
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ff85 	bl	80045d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80046ce:	e024      	b.n	800471a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046d6:	4b13      	ldr	r3, [pc, #76]	; (8004724 <prvProcessTimerOrBlockTask+0x90>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <prvProcessTimerOrBlockTask+0x50>
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <prvProcessTimerOrBlockTask+0x52>
 80046e4:	2300      	movs	r3, #0
 80046e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046e8:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <prvProcessTimerOrBlockTask+0x94>)
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	4619      	mov	r1, r3
 80046f6:	f7fe fea9 	bl	800344c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046fa:	f7ff f925 	bl	8003948 <xTaskResumeAll>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10a      	bne.n	800471a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004704:	4b09      	ldr	r3, [pc, #36]	; (800472c <prvProcessTimerOrBlockTask+0x98>)
 8004706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	f3bf 8f6f 	isb	sy
}
 8004714:	e001      	b.n	800471a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004716:	f7ff f917 	bl	8003948 <xTaskResumeAll>
}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000d54 	.word	0x20000d54
 8004728:	20000d58 	.word	0x20000d58
 800472c:	e000ed04 	.word	0xe000ed04

08004730 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004738:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <prvGetNextExpireTime+0x44>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <prvGetNextExpireTime+0x16>
 8004742:	2201      	movs	r2, #1
 8004744:	e000      	b.n	8004748 <prvGetNextExpireTime+0x18>
 8004746:	2200      	movs	r2, #0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d105      	bne.n	8004760 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004754:	4b07      	ldr	r3, [pc, #28]	; (8004774 <prvGetNextExpireTime+0x44>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	e001      	b.n	8004764 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004764:	68fb      	ldr	r3, [r7, #12]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000d50 	.word	0x20000d50

08004778 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004780:	f7ff f980 	bl	8003a84 <xTaskGetTickCount>
 8004784:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004786:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <prvSampleTimeNow+0x3c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	429a      	cmp	r2, r3
 800478e:	d205      	bcs.n	800479c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004790:	f000 f936 	bl	8004a00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e002      	b.n	80047a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80047a2:	4a04      	ldr	r2, [pc, #16]	; (80047b4 <prvSampleTimeNow+0x3c>)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80047a8:	68fb      	ldr	r3, [r7, #12]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000d60 	.word	0x20000d60

080047b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d812      	bhi.n	8004804 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	1ad2      	subs	r2, r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d302      	bcc.n	80047f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047ec:	2301      	movs	r3, #1
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	e01b      	b.n	800482a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047f2:	4b10      	ldr	r3, [pc, #64]	; (8004834 <prvInsertTimerInActiveList+0x7c>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3304      	adds	r3, #4
 80047fa:	4619      	mov	r1, r3
 80047fc:	4610      	mov	r0, r2
 80047fe:	f7fd ff7a 	bl	80026f6 <vListInsert>
 8004802:	e012      	b.n	800482a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d206      	bcs.n	800481a <prvInsertTimerInActiveList+0x62>
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d302      	bcc.n	800481a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004814:	2301      	movs	r3, #1
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	e007      	b.n	800482a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800481a:	4b07      	ldr	r3, [pc, #28]	; (8004838 <prvInsertTimerInActiveList+0x80>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3304      	adds	r3, #4
 8004822:	4619      	mov	r1, r3
 8004824:	4610      	mov	r0, r2
 8004826:	f7fd ff66 	bl	80026f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800482a:	697b      	ldr	r3, [r7, #20]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000d54 	.word	0x20000d54
 8004838:	20000d50 	.word	0x20000d50

0800483c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08e      	sub	sp, #56	; 0x38
 8004840:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004842:	e0ca      	b.n	80049da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	da18      	bge.n	800487c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800484a:	1d3b      	adds	r3, r7, #4
 800484c:	3304      	adds	r3, #4
 800484e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10a      	bne.n	800486c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	61fb      	str	r3, [r7, #28]
}
 8004868:	bf00      	nop
 800486a:	e7fe      	b.n	800486a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004872:	6850      	ldr	r0, [r2, #4]
 8004874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004876:	6892      	ldr	r2, [r2, #8]
 8004878:	4611      	mov	r1, r2
 800487a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	f2c0 80aa 	blt.w	80049d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d004      	beq.n	800489a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004892:	3304      	adds	r3, #4
 8004894:	4618      	mov	r0, r3
 8004896:	f7fd ff67 	bl	8002768 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800489a:	463b      	mov	r3, r7
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff ff6b 	bl	8004778 <prvSampleTimeNow>
 80048a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b09      	cmp	r3, #9
 80048a8:	f200 8097 	bhi.w	80049da <prvProcessReceivedCommands+0x19e>
 80048ac:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <prvProcessReceivedCommands+0x78>)
 80048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b2:	bf00      	nop
 80048b4:	080048dd 	.word	0x080048dd
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048dd 	.word	0x080048dd
 80048c0:	08004951 	.word	0x08004951
 80048c4:	08004965 	.word	0x08004965
 80048c8:	080049af 	.word	0x080049af
 80048cc:	080048dd 	.word	0x080048dd
 80048d0:	080048dd 	.word	0x080048dd
 80048d4:	08004951 	.word	0x08004951
 80048d8:	08004965 	.word	0x08004965
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	18d1      	adds	r1, r2, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048fc:	f7ff ff5c 	bl	80047b8 <prvInsertTimerInActiveList>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d069      	beq.n	80049da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800490c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d05e      	beq.n	80049da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	441a      	add	r2, r3
 8004924:	2300      	movs	r3, #0
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	2300      	movs	r3, #0
 800492a:	2100      	movs	r1, #0
 800492c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800492e:	f7ff fe05 	bl	800453c <xTimerGenericCommand>
 8004932:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d14f      	bne.n	80049da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	61bb      	str	r3, [r7, #24]
}
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	b2da      	uxtb	r2, r3
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004962:	e03a      	b.n	80049da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800496a:	f043 0301 	orr.w	r3, r3, #1
 800496e:	b2da      	uxtb	r2, r3
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	617b      	str	r3, [r7, #20]
}
 8004996:	bf00      	nop
 8004998:	e7fe      	b.n	8004998 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	18d1      	adds	r1, r2, r3
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049a8:	f7ff ff06 	bl	80047b8 <prvInsertTimerInActiveList>
					break;
 80049ac:	e015      	b.n	80049da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d103      	bne.n	80049c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80049bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049be:	f000 fbdf 	bl	8005180 <vPortFree>
 80049c2:	e00a      	b.n	80049da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049d6:	e000      	b.n	80049da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80049d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049da:	4b08      	ldr	r3, [pc, #32]	; (80049fc <prvProcessReceivedCommands+0x1c0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	1d39      	adds	r1, r7, #4
 80049e0:	2200      	movs	r2, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe f9f4 	bl	8002dd0 <xQueueReceive>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f47f af2a 	bne.w	8004844 <prvProcessReceivedCommands+0x8>
	}
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	3730      	adds	r7, #48	; 0x30
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000d58 	.word	0x20000d58

08004a00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a06:	e048      	b.n	8004a9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a08:	4b2d      	ldr	r3, [pc, #180]	; (8004ac0 <prvSwitchTimerLists+0xc0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a12:	4b2b      	ldr	r3, [pc, #172]	; (8004ac0 <prvSwitchTimerLists+0xc0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fd fea1 	bl	8002768 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d02e      	beq.n	8004a9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4413      	add	r3, r2
 8004a44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d90e      	bls.n	8004a6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a5a:	4b19      	ldr	r3, [pc, #100]	; (8004ac0 <prvSwitchTimerLists+0xc0>)
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3304      	adds	r3, #4
 8004a62:	4619      	mov	r1, r3
 8004a64:	4610      	mov	r0, r2
 8004a66:	f7fd fe46 	bl	80026f6 <vListInsert>
 8004a6a:	e016      	b.n	8004a9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	2300      	movs	r3, #0
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	2100      	movs	r1, #0
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f7ff fd60 	bl	800453c <xTimerGenericCommand>
 8004a7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	603b      	str	r3, [r7, #0]
}
 8004a96:	bf00      	nop
 8004a98:	e7fe      	b.n	8004a98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a9a:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <prvSwitchTimerLists+0xc0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1b1      	bne.n	8004a08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <prvSwitchTimerLists+0xc0>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <prvSwitchTimerLists+0xc4>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a04      	ldr	r2, [pc, #16]	; (8004ac0 <prvSwitchTimerLists+0xc0>)
 8004ab0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ab2:	4a04      	ldr	r2, [pc, #16]	; (8004ac4 <prvSwitchTimerLists+0xc4>)
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	6013      	str	r3, [r2, #0]
}
 8004ab8:	bf00      	nop
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	20000d50 	.word	0x20000d50
 8004ac4:	20000d54 	.word	0x20000d54

08004ac8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ace:	f000 f969 	bl	8004da4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ad2:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <prvCheckForValidListAndQueue+0x60>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d120      	bne.n	8004b1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ada:	4814      	ldr	r0, [pc, #80]	; (8004b2c <prvCheckForValidListAndQueue+0x64>)
 8004adc:	f7fd fdba 	bl	8002654 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ae0:	4813      	ldr	r0, [pc, #76]	; (8004b30 <prvCheckForValidListAndQueue+0x68>)
 8004ae2:	f7fd fdb7 	bl	8002654 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <prvCheckForValidListAndQueue+0x6c>)
 8004ae8:	4a10      	ldr	r2, [pc, #64]	; (8004b2c <prvCheckForValidListAndQueue+0x64>)
 8004aea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004aec:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <prvCheckForValidListAndQueue+0x70>)
 8004aee:	4a10      	ldr	r2, [pc, #64]	; (8004b30 <prvCheckForValidListAndQueue+0x68>)
 8004af0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004af2:	2300      	movs	r3, #0
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	4b11      	ldr	r3, [pc, #68]	; (8004b3c <prvCheckForValidListAndQueue+0x74>)
 8004af8:	4a11      	ldr	r2, [pc, #68]	; (8004b40 <prvCheckForValidListAndQueue+0x78>)
 8004afa:	2110      	movs	r1, #16
 8004afc:	200a      	movs	r0, #10
 8004afe:	f7fd fec5 	bl	800288c <xQueueGenericCreateStatic>
 8004b02:	4603      	mov	r3, r0
 8004b04:	4a08      	ldr	r2, [pc, #32]	; (8004b28 <prvCheckForValidListAndQueue+0x60>)
 8004b06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b08:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <prvCheckForValidListAndQueue+0x60>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <prvCheckForValidListAndQueue+0x60>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	490b      	ldr	r1, [pc, #44]	; (8004b44 <prvCheckForValidListAndQueue+0x7c>)
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fe fc6e 	bl	80033f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b1c:	f000 f972 	bl	8004e04 <vPortExitCritical>
}
 8004b20:	bf00      	nop
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000d58 	.word	0x20000d58
 8004b2c:	20000d28 	.word	0x20000d28
 8004b30:	20000d3c 	.word	0x20000d3c
 8004b34:	20000d50 	.word	0x20000d50
 8004b38:	20000d54 	.word	0x20000d54
 8004b3c:	20000e04 	.word	0x20000e04
 8004b40:	20000d64 	.word	0x20000d64
 8004b44:	080064e0 	.word	0x080064e0

08004b48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3b04      	subs	r3, #4
 8004b58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3b04      	subs	r3, #4
 8004b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f023 0201 	bic.w	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3b04      	subs	r3, #4
 8004b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b78:	4a0c      	ldr	r2, [pc, #48]	; (8004bac <pxPortInitialiseStack+0x64>)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3b14      	subs	r3, #20
 8004b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3b04      	subs	r3, #4
 8004b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f06f 0202 	mvn.w	r2, #2
 8004b96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3b20      	subs	r3, #32
 8004b9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	08004bb1 	.word	0x08004bb1

08004bb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bba:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <prvTaskExitError+0x54>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bc2:	d00a      	beq.n	8004bda <prvTaskExitError+0x2a>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	60fb      	str	r3, [r7, #12]
}
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <prvTaskExitError+0x28>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	60bb      	str	r3, [r7, #8]
}
 8004bec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bee:	bf00      	nop
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0fc      	beq.n	8004bf0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	2000000c 	.word	0x2000000c
	...

08004c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c10:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <pxCurrentTCBConst2>)
 8004c12:	6819      	ldr	r1, [r3, #0]
 8004c14:	6808      	ldr	r0, [r1, #0]
 8004c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1a:	f380 8809 	msr	PSP, r0
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f04f 0000 	mov.w	r0, #0
 8004c26:	f380 8811 	msr	BASEPRI, r0
 8004c2a:	4770      	bx	lr
 8004c2c:	f3af 8000 	nop.w

08004c30 <pxCurrentTCBConst2>:
 8004c30:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop

08004c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c38:	4808      	ldr	r0, [pc, #32]	; (8004c5c <prvPortStartFirstTask+0x24>)
 8004c3a:	6800      	ldr	r0, [r0, #0]
 8004c3c:	6800      	ldr	r0, [r0, #0]
 8004c3e:	f380 8808 	msr	MSP, r0
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f380 8814 	msr	CONTROL, r0
 8004c4a:	b662      	cpsie	i
 8004c4c:	b661      	cpsie	f
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	df00      	svc	0
 8004c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c5a:	bf00      	nop
 8004c5c:	e000ed08 	.word	0xe000ed08

08004c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c66:	4b46      	ldr	r3, [pc, #280]	; (8004d80 <xPortStartScheduler+0x120>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a46      	ldr	r2, [pc, #280]	; (8004d84 <xPortStartScheduler+0x124>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d10a      	bne.n	8004c86 <xPortStartScheduler+0x26>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	613b      	str	r3, [r7, #16]
}
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c86:	4b3e      	ldr	r3, [pc, #248]	; (8004d80 <xPortStartScheduler+0x120>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a3f      	ldr	r2, [pc, #252]	; (8004d88 <xPortStartScheduler+0x128>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d10a      	bne.n	8004ca6 <xPortStartScheduler+0x46>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	60fb      	str	r3, [r7, #12]
}
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ca6:	4b39      	ldr	r3, [pc, #228]	; (8004d8c <xPortStartScheduler+0x12c>)
 8004ca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	22ff      	movs	r2, #255	; 0xff
 8004cb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	4b31      	ldr	r3, [pc, #196]	; (8004d90 <xPortStartScheduler+0x130>)
 8004ccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cce:	4b31      	ldr	r3, [pc, #196]	; (8004d94 <xPortStartScheduler+0x134>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cd4:	e009      	b.n	8004cea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004cd6:	4b2f      	ldr	r3, [pc, #188]	; (8004d94 <xPortStartScheduler+0x134>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	4a2d      	ldr	r2, [pc, #180]	; (8004d94 <xPortStartScheduler+0x134>)
 8004cde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cea:	78fb      	ldrb	r3, [r7, #3]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf2:	2b80      	cmp	r3, #128	; 0x80
 8004cf4:	d0ef      	beq.n	8004cd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cf6:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <xPortStartScheduler+0x134>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f1c3 0307 	rsb	r3, r3, #7
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d00a      	beq.n	8004d18 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	60bb      	str	r3, [r7, #8]
}
 8004d14:	bf00      	nop
 8004d16:	e7fe      	b.n	8004d16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d18:	4b1e      	ldr	r3, [pc, #120]	; (8004d94 <xPortStartScheduler+0x134>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	4a1d      	ldr	r2, [pc, #116]	; (8004d94 <xPortStartScheduler+0x134>)
 8004d20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d22:	4b1c      	ldr	r3, [pc, #112]	; (8004d94 <xPortStartScheduler+0x134>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d2a:	4a1a      	ldr	r2, [pc, #104]	; (8004d94 <xPortStartScheduler+0x134>)
 8004d2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d36:	4b18      	ldr	r3, [pc, #96]	; (8004d98 <xPortStartScheduler+0x138>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a17      	ldr	r2, [pc, #92]	; (8004d98 <xPortStartScheduler+0x138>)
 8004d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d42:	4b15      	ldr	r3, [pc, #84]	; (8004d98 <xPortStartScheduler+0x138>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a14      	ldr	r2, [pc, #80]	; (8004d98 <xPortStartScheduler+0x138>)
 8004d48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d4e:	f000 f8dd 	bl	8004f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <xPortStartScheduler+0x13c>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d58:	f000 f8fc 	bl	8004f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d5c:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <xPortStartScheduler+0x140>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a0f      	ldr	r2, [pc, #60]	; (8004da0 <xPortStartScheduler+0x140>)
 8004d62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d68:	f7ff ff66 	bl	8004c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d6c:	f7fe ff54 	bl	8003c18 <vTaskSwitchContext>
	prvTaskExitError();
 8004d70:	f7ff ff1e 	bl	8004bb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	e000ed00 	.word	0xe000ed00
 8004d84:	410fc271 	.word	0x410fc271
 8004d88:	410fc270 	.word	0x410fc270
 8004d8c:	e000e400 	.word	0xe000e400
 8004d90:	20000e54 	.word	0x20000e54
 8004d94:	20000e58 	.word	0x20000e58
 8004d98:	e000ed20 	.word	0xe000ed20
 8004d9c:	2000000c 	.word	0x2000000c
 8004da0:	e000ef34 	.word	0xe000ef34

08004da4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	607b      	str	r3, [r7, #4]
}
 8004dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dbe:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <vPortEnterCritical+0x58>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	4a0d      	ldr	r2, [pc, #52]	; (8004dfc <vPortEnterCritical+0x58>)
 8004dc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <vPortEnterCritical+0x58>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d10f      	bne.n	8004df0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <vPortEnterCritical+0x5c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	603b      	str	r3, [r7, #0]
}
 8004dec:	bf00      	nop
 8004dee:	e7fe      	b.n	8004dee <vPortEnterCritical+0x4a>
	}
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	2000000c 	.word	0x2000000c
 8004e00:	e000ed04 	.word	0xe000ed04

08004e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e0a:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <vPortExitCritical+0x50>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <vPortExitCritical+0x24>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	607b      	str	r3, [r7, #4]
}
 8004e24:	bf00      	nop
 8004e26:	e7fe      	b.n	8004e26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e28:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <vPortExitCritical+0x50>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <vPortExitCritical+0x50>)
 8004e30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e32:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <vPortExitCritical+0x50>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d105      	bne.n	8004e46 <vPortExitCritical+0x42>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	f383 8811 	msr	BASEPRI, r3
}
 8004e44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	2000000c 	.word	0x2000000c
	...

08004e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e60:	f3ef 8009 	mrs	r0, PSP
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <pxCurrentTCBConst>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	f01e 0f10 	tst.w	lr, #16
 8004e70:	bf08      	it	eq
 8004e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e7a:	6010      	str	r0, [r2, #0]
 8004e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e84:	f380 8811 	msr	BASEPRI, r0
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f7fe fec2 	bl	8003c18 <vTaskSwitchContext>
 8004e94:	f04f 0000 	mov.w	r0, #0
 8004e98:	f380 8811 	msr	BASEPRI, r0
 8004e9c:	bc09      	pop	{r0, r3}
 8004e9e:	6819      	ldr	r1, [r3, #0]
 8004ea0:	6808      	ldr	r0, [r1, #0]
 8004ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea6:	f01e 0f10 	tst.w	lr, #16
 8004eaa:	bf08      	it	eq
 8004eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004eb0:	f380 8809 	msr	PSP, r0
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	f3af 8000 	nop.w

08004ec0 <pxCurrentTCBConst>:
 8004ec0:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop

08004ec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	607b      	str	r3, [r7, #4]
}
 8004ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ee2:	f7fe fddf 	bl	8003aa4 <xTaskIncrementTick>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004eec:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <xPortSysTickHandler+0x40>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	f383 8811 	msr	BASEPRI, r3
}
 8004efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f00:	bf00      	nop
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	e000ed04 	.word	0xe000ed04

08004f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f10:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <vPortSetupTimerInterrupt+0x34>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f16:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <vPortSetupTimerInterrupt+0x38>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <vPortSetupTimerInterrupt+0x3c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <vPortSetupTimerInterrupt+0x40>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	099b      	lsrs	r3, r3, #6
 8004f28:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <vPortSetupTimerInterrupt+0x44>)
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f2e:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <vPortSetupTimerInterrupt+0x34>)
 8004f30:	2207      	movs	r2, #7
 8004f32:	601a      	str	r2, [r3, #0]
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	e000e010 	.word	0xe000e010
 8004f44:	e000e018 	.word	0xe000e018
 8004f48:	20000000 	.word	0x20000000
 8004f4c:	10624dd3 	.word	0x10624dd3
 8004f50:	e000e014 	.word	0xe000e014

08004f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f64 <vPortEnableVFP+0x10>
 8004f58:	6801      	ldr	r1, [r0, #0]
 8004f5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f5e:	6001      	str	r1, [r0, #0]
 8004f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f62:	bf00      	nop
 8004f64:	e000ed88 	.word	0xe000ed88

08004f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f6e:	f3ef 8305 	mrs	r3, IPSR
 8004f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b0f      	cmp	r3, #15
 8004f78:	d914      	bls.n	8004fa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f7a:	4a17      	ldr	r2, [pc, #92]	; (8004fd8 <vPortValidateInterruptPriority+0x70>)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f84:	4b15      	ldr	r3, [pc, #84]	; (8004fdc <vPortValidateInterruptPriority+0x74>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	7afa      	ldrb	r2, [r7, #11]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d20a      	bcs.n	8004fa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	607b      	str	r3, [r7, #4]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fa4:	4b0e      	ldr	r3, [pc, #56]	; (8004fe0 <vPortValidateInterruptPriority+0x78>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fac:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <vPortValidateInterruptPriority+0x7c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d90a      	bls.n	8004fca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	603b      	str	r3, [r7, #0]
}
 8004fc6:	bf00      	nop
 8004fc8:	e7fe      	b.n	8004fc8 <vPortValidateInterruptPriority+0x60>
	}
 8004fca:	bf00      	nop
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	e000e3f0 	.word	0xe000e3f0
 8004fdc:	20000e54 	.word	0x20000e54
 8004fe0:	e000ed0c 	.word	0xe000ed0c
 8004fe4:	20000e58 	.word	0x20000e58

08004fe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ff4:	f7fe fc9a 	bl	800392c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ff8:	4b5b      	ldr	r3, [pc, #364]	; (8005168 <pvPortMalloc+0x180>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005000:	f000 f920 	bl	8005244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005004:	4b59      	ldr	r3, [pc, #356]	; (800516c <pvPortMalloc+0x184>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4013      	ands	r3, r2
 800500c:	2b00      	cmp	r3, #0
 800500e:	f040 8093 	bne.w	8005138 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01d      	beq.n	8005054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005018:	2208      	movs	r2, #8
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4413      	add	r3, r2
 800501e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	2b00      	cmp	r3, #0
 8005028:	d014      	beq.n	8005054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f023 0307 	bic.w	r3, r3, #7
 8005030:	3308      	adds	r3, #8
 8005032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <pvPortMalloc+0x6c>
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	617b      	str	r3, [r7, #20]
}
 8005050:	bf00      	nop
 8005052:	e7fe      	b.n	8005052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d06e      	beq.n	8005138 <pvPortMalloc+0x150>
 800505a:	4b45      	ldr	r3, [pc, #276]	; (8005170 <pvPortMalloc+0x188>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	429a      	cmp	r2, r3
 8005062:	d869      	bhi.n	8005138 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005064:	4b43      	ldr	r3, [pc, #268]	; (8005174 <pvPortMalloc+0x18c>)
 8005066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005068:	4b42      	ldr	r3, [pc, #264]	; (8005174 <pvPortMalloc+0x18c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800506e:	e004      	b.n	800507a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	429a      	cmp	r2, r3
 8005082:	d903      	bls.n	800508c <pvPortMalloc+0xa4>
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1f1      	bne.n	8005070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800508c:	4b36      	ldr	r3, [pc, #216]	; (8005168 <pvPortMalloc+0x180>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005092:	429a      	cmp	r2, r3
 8005094:	d050      	beq.n	8005138 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2208      	movs	r2, #8
 800509c:	4413      	add	r3, r2
 800509e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	1ad2      	subs	r2, r2, r3
 80050b0:	2308      	movs	r3, #8
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d91f      	bls.n	80050f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4413      	add	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <pvPortMalloc+0xf8>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	613b      	str	r3, [r7, #16]
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	1ad2      	subs	r2, r2, r3
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050f2:	69b8      	ldr	r0, [r7, #24]
 80050f4:	f000 f908 	bl	8005308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050f8:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <pvPortMalloc+0x188>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	4a1b      	ldr	r2, [pc, #108]	; (8005170 <pvPortMalloc+0x188>)
 8005104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005106:	4b1a      	ldr	r3, [pc, #104]	; (8005170 <pvPortMalloc+0x188>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <pvPortMalloc+0x190>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d203      	bcs.n	800511a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005112:	4b17      	ldr	r3, [pc, #92]	; (8005170 <pvPortMalloc+0x188>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a18      	ldr	r2, [pc, #96]	; (8005178 <pvPortMalloc+0x190>)
 8005118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	4b13      	ldr	r3, [pc, #76]	; (800516c <pvPortMalloc+0x184>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	431a      	orrs	r2, r3
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800512e:	4b13      	ldr	r3, [pc, #76]	; (800517c <pvPortMalloc+0x194>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	4a11      	ldr	r2, [pc, #68]	; (800517c <pvPortMalloc+0x194>)
 8005136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005138:	f7fe fc06 	bl	8003948 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <pvPortMalloc+0x174>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	60fb      	str	r3, [r7, #12]
}
 8005158:	bf00      	nop
 800515a:	e7fe      	b.n	800515a <pvPortMalloc+0x172>
	return pvReturn;
 800515c:	69fb      	ldr	r3, [r7, #28]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3728      	adds	r7, #40	; 0x28
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20004a64 	.word	0x20004a64
 800516c:	20004a78 	.word	0x20004a78
 8005170:	20004a68 	.word	0x20004a68
 8005174:	20004a5c 	.word	0x20004a5c
 8005178:	20004a6c 	.word	0x20004a6c
 800517c:	20004a70 	.word	0x20004a70

08005180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d04d      	beq.n	800522e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005192:	2308      	movs	r3, #8
 8005194:	425b      	negs	r3, r3
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4413      	add	r3, r2
 800519a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	4b24      	ldr	r3, [pc, #144]	; (8005238 <vPortFree+0xb8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10a      	bne.n	80051c4 <vPortFree+0x44>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	60fb      	str	r3, [r7, #12]
}
 80051c0:	bf00      	nop
 80051c2:	e7fe      	b.n	80051c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <vPortFree+0x62>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	60bb      	str	r3, [r7, #8]
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	4b14      	ldr	r3, [pc, #80]	; (8005238 <vPortFree+0xb8>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01e      	beq.n	800522e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d11a      	bne.n	800522e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <vPortFree+0xb8>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	43db      	mvns	r3, r3
 8005202:	401a      	ands	r2, r3
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005208:	f7fe fb90 	bl	800392c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	4b0a      	ldr	r3, [pc, #40]	; (800523c <vPortFree+0xbc>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4413      	add	r3, r2
 8005216:	4a09      	ldr	r2, [pc, #36]	; (800523c <vPortFree+0xbc>)
 8005218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800521a:	6938      	ldr	r0, [r7, #16]
 800521c:	f000 f874 	bl	8005308 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <vPortFree+0xc0>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3301      	adds	r3, #1
 8005226:	4a06      	ldr	r2, [pc, #24]	; (8005240 <vPortFree+0xc0>)
 8005228:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800522a:	f7fe fb8d 	bl	8003948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800522e:	bf00      	nop
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20004a78 	.word	0x20004a78
 800523c:	20004a68 	.word	0x20004a68
 8005240:	20004a74 	.word	0x20004a74

08005244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800524a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800524e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005250:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <prvHeapInit+0xac>)
 8005252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00c      	beq.n	8005278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3307      	adds	r3, #7
 8005262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0307 	bic.w	r3, r3, #7
 800526a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	4a1f      	ldr	r2, [pc, #124]	; (80052f0 <prvHeapInit+0xac>)
 8005274:	4413      	add	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800527c:	4a1d      	ldr	r2, [pc, #116]	; (80052f4 <prvHeapInit+0xb0>)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005282:	4b1c      	ldr	r3, [pc, #112]	; (80052f4 <prvHeapInit+0xb0>)
 8005284:	2200      	movs	r2, #0
 8005286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	4413      	add	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005290:	2208      	movs	r2, #8
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0307 	bic.w	r3, r3, #7
 800529e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a15      	ldr	r2, [pc, #84]	; (80052f8 <prvHeapInit+0xb4>)
 80052a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052a6:	4b14      	ldr	r3, [pc, #80]	; (80052f8 <prvHeapInit+0xb4>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2200      	movs	r2, #0
 80052ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052ae:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <prvHeapInit+0xb4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	1ad2      	subs	r2, r2, r3
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052c4:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <prvHeapInit+0xb4>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	4a0a      	ldr	r2, [pc, #40]	; (80052fc <prvHeapInit+0xb8>)
 80052d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	4a09      	ldr	r2, [pc, #36]	; (8005300 <prvHeapInit+0xbc>)
 80052da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052dc:	4b09      	ldr	r3, [pc, #36]	; (8005304 <prvHeapInit+0xc0>)
 80052de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052e2:	601a      	str	r2, [r3, #0]
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	20000e5c 	.word	0x20000e5c
 80052f4:	20004a5c 	.word	0x20004a5c
 80052f8:	20004a64 	.word	0x20004a64
 80052fc:	20004a6c 	.word	0x20004a6c
 8005300:	20004a68 	.word	0x20004a68
 8005304:	20004a78 	.word	0x20004a78

08005308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005310:	4b28      	ldr	r3, [pc, #160]	; (80053b4 <prvInsertBlockIntoFreeList+0xac>)
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	e002      	b.n	800531c <prvInsertBlockIntoFreeList+0x14>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	429a      	cmp	r2, r3
 8005324:	d8f7      	bhi.n	8005316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	4413      	add	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	429a      	cmp	r2, r3
 8005336:	d108      	bne.n	800534a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	441a      	add	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	441a      	add	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d118      	bne.n	8005390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4b15      	ldr	r3, [pc, #84]	; (80053b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d00d      	beq.n	8005386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	441a      	add	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	e008      	b.n	8005398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005386:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	e003      	b.n	8005398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	429a      	cmp	r2, r3
 800539e:	d002      	beq.n	80053a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20004a5c 	.word	0x20004a5c
 80053b8:	20004a64 	.word	0x20004a64

080053bc <__errno>:
 80053bc:	4b01      	ldr	r3, [pc, #4]	; (80053c4 <__errno+0x8>)
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20000010 	.word	0x20000010

080053c8 <__libc_init_array>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	4d0d      	ldr	r5, [pc, #52]	; (8005400 <__libc_init_array+0x38>)
 80053cc:	4c0d      	ldr	r4, [pc, #52]	; (8005404 <__libc_init_array+0x3c>)
 80053ce:	1b64      	subs	r4, r4, r5
 80053d0:	10a4      	asrs	r4, r4, #2
 80053d2:	2600      	movs	r6, #0
 80053d4:	42a6      	cmp	r6, r4
 80053d6:	d109      	bne.n	80053ec <__libc_init_array+0x24>
 80053d8:	4d0b      	ldr	r5, [pc, #44]	; (8005408 <__libc_init_array+0x40>)
 80053da:	4c0c      	ldr	r4, [pc, #48]	; (800540c <__libc_init_array+0x44>)
 80053dc:	f001 f832 	bl	8006444 <_init>
 80053e0:	1b64      	subs	r4, r4, r5
 80053e2:	10a4      	asrs	r4, r4, #2
 80053e4:	2600      	movs	r6, #0
 80053e6:	42a6      	cmp	r6, r4
 80053e8:	d105      	bne.n	80053f6 <__libc_init_array+0x2e>
 80053ea:	bd70      	pop	{r4, r5, r6, pc}
 80053ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f0:	4798      	blx	r3
 80053f2:	3601      	adds	r6, #1
 80053f4:	e7ee      	b.n	80053d4 <__libc_init_array+0xc>
 80053f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fa:	4798      	blx	r3
 80053fc:	3601      	adds	r6, #1
 80053fe:	e7f2      	b.n	80053e6 <__libc_init_array+0x1e>
 8005400:	080065a0 	.word	0x080065a0
 8005404:	080065a0 	.word	0x080065a0
 8005408:	080065a0 	.word	0x080065a0
 800540c:	080065a4 	.word	0x080065a4

08005410 <memcpy>:
 8005410:	440a      	add	r2, r1
 8005412:	4291      	cmp	r1, r2
 8005414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005418:	d100      	bne.n	800541c <memcpy+0xc>
 800541a:	4770      	bx	lr
 800541c:	b510      	push	{r4, lr}
 800541e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005426:	4291      	cmp	r1, r2
 8005428:	d1f9      	bne.n	800541e <memcpy+0xe>
 800542a:	bd10      	pop	{r4, pc}

0800542c <memset>:
 800542c:	4402      	add	r2, r0
 800542e:	4603      	mov	r3, r0
 8005430:	4293      	cmp	r3, r2
 8005432:	d100      	bne.n	8005436 <memset+0xa>
 8005434:	4770      	bx	lr
 8005436:	f803 1b01 	strb.w	r1, [r3], #1
 800543a:	e7f9      	b.n	8005430 <memset+0x4>

0800543c <iprintf>:
 800543c:	b40f      	push	{r0, r1, r2, r3}
 800543e:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <iprintf+0x2c>)
 8005440:	b513      	push	{r0, r1, r4, lr}
 8005442:	681c      	ldr	r4, [r3, #0]
 8005444:	b124      	cbz	r4, 8005450 <iprintf+0x14>
 8005446:	69a3      	ldr	r3, [r4, #24]
 8005448:	b913      	cbnz	r3, 8005450 <iprintf+0x14>
 800544a:	4620      	mov	r0, r4
 800544c:	f000 fa5e 	bl	800590c <__sinit>
 8005450:	ab05      	add	r3, sp, #20
 8005452:	9a04      	ldr	r2, [sp, #16]
 8005454:	68a1      	ldr	r1, [r4, #8]
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	4620      	mov	r0, r4
 800545a:	f000 fc67 	bl	8005d2c <_vfiprintf_r>
 800545e:	b002      	add	sp, #8
 8005460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005464:	b004      	add	sp, #16
 8005466:	4770      	bx	lr
 8005468:	20000010 	.word	0x20000010

0800546c <_puts_r>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	460e      	mov	r6, r1
 8005470:	4605      	mov	r5, r0
 8005472:	b118      	cbz	r0, 800547c <_puts_r+0x10>
 8005474:	6983      	ldr	r3, [r0, #24]
 8005476:	b90b      	cbnz	r3, 800547c <_puts_r+0x10>
 8005478:	f000 fa48 	bl	800590c <__sinit>
 800547c:	69ab      	ldr	r3, [r5, #24]
 800547e:	68ac      	ldr	r4, [r5, #8]
 8005480:	b913      	cbnz	r3, 8005488 <_puts_r+0x1c>
 8005482:	4628      	mov	r0, r5
 8005484:	f000 fa42 	bl	800590c <__sinit>
 8005488:	4b2c      	ldr	r3, [pc, #176]	; (800553c <_puts_r+0xd0>)
 800548a:	429c      	cmp	r4, r3
 800548c:	d120      	bne.n	80054d0 <_puts_r+0x64>
 800548e:	686c      	ldr	r4, [r5, #4]
 8005490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005492:	07db      	lsls	r3, r3, #31
 8005494:	d405      	bmi.n	80054a2 <_puts_r+0x36>
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	0598      	lsls	r0, r3, #22
 800549a:	d402      	bmi.n	80054a2 <_puts_r+0x36>
 800549c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800549e:	f000 fad3 	bl	8005a48 <__retarget_lock_acquire_recursive>
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	0719      	lsls	r1, r3, #28
 80054a6:	d51d      	bpl.n	80054e4 <_puts_r+0x78>
 80054a8:	6923      	ldr	r3, [r4, #16]
 80054aa:	b1db      	cbz	r3, 80054e4 <_puts_r+0x78>
 80054ac:	3e01      	subs	r6, #1
 80054ae:	68a3      	ldr	r3, [r4, #8]
 80054b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054b4:	3b01      	subs	r3, #1
 80054b6:	60a3      	str	r3, [r4, #8]
 80054b8:	bb39      	cbnz	r1, 800550a <_puts_r+0x9e>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	da38      	bge.n	8005530 <_puts_r+0xc4>
 80054be:	4622      	mov	r2, r4
 80054c0:	210a      	movs	r1, #10
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 f848 	bl	8005558 <__swbuf_r>
 80054c8:	3001      	adds	r0, #1
 80054ca:	d011      	beq.n	80054f0 <_puts_r+0x84>
 80054cc:	250a      	movs	r5, #10
 80054ce:	e011      	b.n	80054f4 <_puts_r+0x88>
 80054d0:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <_puts_r+0xd4>)
 80054d2:	429c      	cmp	r4, r3
 80054d4:	d101      	bne.n	80054da <_puts_r+0x6e>
 80054d6:	68ac      	ldr	r4, [r5, #8]
 80054d8:	e7da      	b.n	8005490 <_puts_r+0x24>
 80054da:	4b1a      	ldr	r3, [pc, #104]	; (8005544 <_puts_r+0xd8>)
 80054dc:	429c      	cmp	r4, r3
 80054de:	bf08      	it	eq
 80054e0:	68ec      	ldreq	r4, [r5, #12]
 80054e2:	e7d5      	b.n	8005490 <_puts_r+0x24>
 80054e4:	4621      	mov	r1, r4
 80054e6:	4628      	mov	r0, r5
 80054e8:	f000 f888 	bl	80055fc <__swsetup_r>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d0dd      	beq.n	80054ac <_puts_r+0x40>
 80054f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80054f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054f6:	07da      	lsls	r2, r3, #31
 80054f8:	d405      	bmi.n	8005506 <_puts_r+0x9a>
 80054fa:	89a3      	ldrh	r3, [r4, #12]
 80054fc:	059b      	lsls	r3, r3, #22
 80054fe:	d402      	bmi.n	8005506 <_puts_r+0x9a>
 8005500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005502:	f000 faa2 	bl	8005a4a <__retarget_lock_release_recursive>
 8005506:	4628      	mov	r0, r5
 8005508:	bd70      	pop	{r4, r5, r6, pc}
 800550a:	2b00      	cmp	r3, #0
 800550c:	da04      	bge.n	8005518 <_puts_r+0xac>
 800550e:	69a2      	ldr	r2, [r4, #24]
 8005510:	429a      	cmp	r2, r3
 8005512:	dc06      	bgt.n	8005522 <_puts_r+0xb6>
 8005514:	290a      	cmp	r1, #10
 8005516:	d004      	beq.n	8005522 <_puts_r+0xb6>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	6022      	str	r2, [r4, #0]
 800551e:	7019      	strb	r1, [r3, #0]
 8005520:	e7c5      	b.n	80054ae <_puts_r+0x42>
 8005522:	4622      	mov	r2, r4
 8005524:	4628      	mov	r0, r5
 8005526:	f000 f817 	bl	8005558 <__swbuf_r>
 800552a:	3001      	adds	r0, #1
 800552c:	d1bf      	bne.n	80054ae <_puts_r+0x42>
 800552e:	e7df      	b.n	80054f0 <_puts_r+0x84>
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	250a      	movs	r5, #10
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	6022      	str	r2, [r4, #0]
 8005538:	701d      	strb	r5, [r3, #0]
 800553a:	e7db      	b.n	80054f4 <_puts_r+0x88>
 800553c:	08006524 	.word	0x08006524
 8005540:	08006544 	.word	0x08006544
 8005544:	08006504 	.word	0x08006504

08005548 <puts>:
 8005548:	4b02      	ldr	r3, [pc, #8]	; (8005554 <puts+0xc>)
 800554a:	4601      	mov	r1, r0
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	f7ff bf8d 	b.w	800546c <_puts_r>
 8005552:	bf00      	nop
 8005554:	20000010 	.word	0x20000010

08005558 <__swbuf_r>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	460e      	mov	r6, r1
 800555c:	4614      	mov	r4, r2
 800555e:	4605      	mov	r5, r0
 8005560:	b118      	cbz	r0, 800556a <__swbuf_r+0x12>
 8005562:	6983      	ldr	r3, [r0, #24]
 8005564:	b90b      	cbnz	r3, 800556a <__swbuf_r+0x12>
 8005566:	f000 f9d1 	bl	800590c <__sinit>
 800556a:	4b21      	ldr	r3, [pc, #132]	; (80055f0 <__swbuf_r+0x98>)
 800556c:	429c      	cmp	r4, r3
 800556e:	d12b      	bne.n	80055c8 <__swbuf_r+0x70>
 8005570:	686c      	ldr	r4, [r5, #4]
 8005572:	69a3      	ldr	r3, [r4, #24]
 8005574:	60a3      	str	r3, [r4, #8]
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	071a      	lsls	r2, r3, #28
 800557a:	d52f      	bpl.n	80055dc <__swbuf_r+0x84>
 800557c:	6923      	ldr	r3, [r4, #16]
 800557e:	b36b      	cbz	r3, 80055dc <__swbuf_r+0x84>
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	6820      	ldr	r0, [r4, #0]
 8005584:	1ac0      	subs	r0, r0, r3
 8005586:	6963      	ldr	r3, [r4, #20]
 8005588:	b2f6      	uxtb	r6, r6
 800558a:	4283      	cmp	r3, r0
 800558c:	4637      	mov	r7, r6
 800558e:	dc04      	bgt.n	800559a <__swbuf_r+0x42>
 8005590:	4621      	mov	r1, r4
 8005592:	4628      	mov	r0, r5
 8005594:	f000 f926 	bl	80057e4 <_fflush_r>
 8005598:	bb30      	cbnz	r0, 80055e8 <__swbuf_r+0x90>
 800559a:	68a3      	ldr	r3, [r4, #8]
 800559c:	3b01      	subs	r3, #1
 800559e:	60a3      	str	r3, [r4, #8]
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	6022      	str	r2, [r4, #0]
 80055a6:	701e      	strb	r6, [r3, #0]
 80055a8:	6963      	ldr	r3, [r4, #20]
 80055aa:	3001      	adds	r0, #1
 80055ac:	4283      	cmp	r3, r0
 80055ae:	d004      	beq.n	80055ba <__swbuf_r+0x62>
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	07db      	lsls	r3, r3, #31
 80055b4:	d506      	bpl.n	80055c4 <__swbuf_r+0x6c>
 80055b6:	2e0a      	cmp	r6, #10
 80055b8:	d104      	bne.n	80055c4 <__swbuf_r+0x6c>
 80055ba:	4621      	mov	r1, r4
 80055bc:	4628      	mov	r0, r5
 80055be:	f000 f911 	bl	80057e4 <_fflush_r>
 80055c2:	b988      	cbnz	r0, 80055e8 <__swbuf_r+0x90>
 80055c4:	4638      	mov	r0, r7
 80055c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <__swbuf_r+0x9c>)
 80055ca:	429c      	cmp	r4, r3
 80055cc:	d101      	bne.n	80055d2 <__swbuf_r+0x7a>
 80055ce:	68ac      	ldr	r4, [r5, #8]
 80055d0:	e7cf      	b.n	8005572 <__swbuf_r+0x1a>
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <__swbuf_r+0xa0>)
 80055d4:	429c      	cmp	r4, r3
 80055d6:	bf08      	it	eq
 80055d8:	68ec      	ldreq	r4, [r5, #12]
 80055da:	e7ca      	b.n	8005572 <__swbuf_r+0x1a>
 80055dc:	4621      	mov	r1, r4
 80055de:	4628      	mov	r0, r5
 80055e0:	f000 f80c 	bl	80055fc <__swsetup_r>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d0cb      	beq.n	8005580 <__swbuf_r+0x28>
 80055e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80055ec:	e7ea      	b.n	80055c4 <__swbuf_r+0x6c>
 80055ee:	bf00      	nop
 80055f0:	08006524 	.word	0x08006524
 80055f4:	08006544 	.word	0x08006544
 80055f8:	08006504 	.word	0x08006504

080055fc <__swsetup_r>:
 80055fc:	4b32      	ldr	r3, [pc, #200]	; (80056c8 <__swsetup_r+0xcc>)
 80055fe:	b570      	push	{r4, r5, r6, lr}
 8005600:	681d      	ldr	r5, [r3, #0]
 8005602:	4606      	mov	r6, r0
 8005604:	460c      	mov	r4, r1
 8005606:	b125      	cbz	r5, 8005612 <__swsetup_r+0x16>
 8005608:	69ab      	ldr	r3, [r5, #24]
 800560a:	b913      	cbnz	r3, 8005612 <__swsetup_r+0x16>
 800560c:	4628      	mov	r0, r5
 800560e:	f000 f97d 	bl	800590c <__sinit>
 8005612:	4b2e      	ldr	r3, [pc, #184]	; (80056cc <__swsetup_r+0xd0>)
 8005614:	429c      	cmp	r4, r3
 8005616:	d10f      	bne.n	8005638 <__swsetup_r+0x3c>
 8005618:	686c      	ldr	r4, [r5, #4]
 800561a:	89a3      	ldrh	r3, [r4, #12]
 800561c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005620:	0719      	lsls	r1, r3, #28
 8005622:	d42c      	bmi.n	800567e <__swsetup_r+0x82>
 8005624:	06dd      	lsls	r5, r3, #27
 8005626:	d411      	bmi.n	800564c <__swsetup_r+0x50>
 8005628:	2309      	movs	r3, #9
 800562a:	6033      	str	r3, [r6, #0]
 800562c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005630:	81a3      	strh	r3, [r4, #12]
 8005632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005636:	e03e      	b.n	80056b6 <__swsetup_r+0xba>
 8005638:	4b25      	ldr	r3, [pc, #148]	; (80056d0 <__swsetup_r+0xd4>)
 800563a:	429c      	cmp	r4, r3
 800563c:	d101      	bne.n	8005642 <__swsetup_r+0x46>
 800563e:	68ac      	ldr	r4, [r5, #8]
 8005640:	e7eb      	b.n	800561a <__swsetup_r+0x1e>
 8005642:	4b24      	ldr	r3, [pc, #144]	; (80056d4 <__swsetup_r+0xd8>)
 8005644:	429c      	cmp	r4, r3
 8005646:	bf08      	it	eq
 8005648:	68ec      	ldreq	r4, [r5, #12]
 800564a:	e7e6      	b.n	800561a <__swsetup_r+0x1e>
 800564c:	0758      	lsls	r0, r3, #29
 800564e:	d512      	bpl.n	8005676 <__swsetup_r+0x7a>
 8005650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005652:	b141      	cbz	r1, 8005666 <__swsetup_r+0x6a>
 8005654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005658:	4299      	cmp	r1, r3
 800565a:	d002      	beq.n	8005662 <__swsetup_r+0x66>
 800565c:	4630      	mov	r0, r6
 800565e:	f000 fa5b 	bl	8005b18 <_free_r>
 8005662:	2300      	movs	r3, #0
 8005664:	6363      	str	r3, [r4, #52]	; 0x34
 8005666:	89a3      	ldrh	r3, [r4, #12]
 8005668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800566c:	81a3      	strh	r3, [r4, #12]
 800566e:	2300      	movs	r3, #0
 8005670:	6063      	str	r3, [r4, #4]
 8005672:	6923      	ldr	r3, [r4, #16]
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	f043 0308 	orr.w	r3, r3, #8
 800567c:	81a3      	strh	r3, [r4, #12]
 800567e:	6923      	ldr	r3, [r4, #16]
 8005680:	b94b      	cbnz	r3, 8005696 <__swsetup_r+0x9a>
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800568c:	d003      	beq.n	8005696 <__swsetup_r+0x9a>
 800568e:	4621      	mov	r1, r4
 8005690:	4630      	mov	r0, r6
 8005692:	f000 fa01 	bl	8005a98 <__smakebuf_r>
 8005696:	89a0      	ldrh	r0, [r4, #12]
 8005698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800569c:	f010 0301 	ands.w	r3, r0, #1
 80056a0:	d00a      	beq.n	80056b8 <__swsetup_r+0xbc>
 80056a2:	2300      	movs	r3, #0
 80056a4:	60a3      	str	r3, [r4, #8]
 80056a6:	6963      	ldr	r3, [r4, #20]
 80056a8:	425b      	negs	r3, r3
 80056aa:	61a3      	str	r3, [r4, #24]
 80056ac:	6923      	ldr	r3, [r4, #16]
 80056ae:	b943      	cbnz	r3, 80056c2 <__swsetup_r+0xc6>
 80056b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056b4:	d1ba      	bne.n	800562c <__swsetup_r+0x30>
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
 80056b8:	0781      	lsls	r1, r0, #30
 80056ba:	bf58      	it	pl
 80056bc:	6963      	ldrpl	r3, [r4, #20]
 80056be:	60a3      	str	r3, [r4, #8]
 80056c0:	e7f4      	b.n	80056ac <__swsetup_r+0xb0>
 80056c2:	2000      	movs	r0, #0
 80056c4:	e7f7      	b.n	80056b6 <__swsetup_r+0xba>
 80056c6:	bf00      	nop
 80056c8:	20000010 	.word	0x20000010
 80056cc:	08006524 	.word	0x08006524
 80056d0:	08006544 	.word	0x08006544
 80056d4:	08006504 	.word	0x08006504

080056d8 <__sflush_r>:
 80056d8:	898a      	ldrh	r2, [r1, #12]
 80056da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056de:	4605      	mov	r5, r0
 80056e0:	0710      	lsls	r0, r2, #28
 80056e2:	460c      	mov	r4, r1
 80056e4:	d458      	bmi.n	8005798 <__sflush_r+0xc0>
 80056e6:	684b      	ldr	r3, [r1, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	dc05      	bgt.n	80056f8 <__sflush_r+0x20>
 80056ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dc02      	bgt.n	80056f8 <__sflush_r+0x20>
 80056f2:	2000      	movs	r0, #0
 80056f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	d0f9      	beq.n	80056f2 <__sflush_r+0x1a>
 80056fe:	2300      	movs	r3, #0
 8005700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005704:	682f      	ldr	r7, [r5, #0]
 8005706:	602b      	str	r3, [r5, #0]
 8005708:	d032      	beq.n	8005770 <__sflush_r+0x98>
 800570a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	075a      	lsls	r2, r3, #29
 8005710:	d505      	bpl.n	800571e <__sflush_r+0x46>
 8005712:	6863      	ldr	r3, [r4, #4]
 8005714:	1ac0      	subs	r0, r0, r3
 8005716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005718:	b10b      	cbz	r3, 800571e <__sflush_r+0x46>
 800571a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800571c:	1ac0      	subs	r0, r0, r3
 800571e:	2300      	movs	r3, #0
 8005720:	4602      	mov	r2, r0
 8005722:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005724:	6a21      	ldr	r1, [r4, #32]
 8005726:	4628      	mov	r0, r5
 8005728:	47b0      	blx	r6
 800572a:	1c43      	adds	r3, r0, #1
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	d106      	bne.n	800573e <__sflush_r+0x66>
 8005730:	6829      	ldr	r1, [r5, #0]
 8005732:	291d      	cmp	r1, #29
 8005734:	d82c      	bhi.n	8005790 <__sflush_r+0xb8>
 8005736:	4a2a      	ldr	r2, [pc, #168]	; (80057e0 <__sflush_r+0x108>)
 8005738:	40ca      	lsrs	r2, r1
 800573a:	07d6      	lsls	r6, r2, #31
 800573c:	d528      	bpl.n	8005790 <__sflush_r+0xb8>
 800573e:	2200      	movs	r2, #0
 8005740:	6062      	str	r2, [r4, #4]
 8005742:	04d9      	lsls	r1, r3, #19
 8005744:	6922      	ldr	r2, [r4, #16]
 8005746:	6022      	str	r2, [r4, #0]
 8005748:	d504      	bpl.n	8005754 <__sflush_r+0x7c>
 800574a:	1c42      	adds	r2, r0, #1
 800574c:	d101      	bne.n	8005752 <__sflush_r+0x7a>
 800574e:	682b      	ldr	r3, [r5, #0]
 8005750:	b903      	cbnz	r3, 8005754 <__sflush_r+0x7c>
 8005752:	6560      	str	r0, [r4, #84]	; 0x54
 8005754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005756:	602f      	str	r7, [r5, #0]
 8005758:	2900      	cmp	r1, #0
 800575a:	d0ca      	beq.n	80056f2 <__sflush_r+0x1a>
 800575c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005760:	4299      	cmp	r1, r3
 8005762:	d002      	beq.n	800576a <__sflush_r+0x92>
 8005764:	4628      	mov	r0, r5
 8005766:	f000 f9d7 	bl	8005b18 <_free_r>
 800576a:	2000      	movs	r0, #0
 800576c:	6360      	str	r0, [r4, #52]	; 0x34
 800576e:	e7c1      	b.n	80056f4 <__sflush_r+0x1c>
 8005770:	6a21      	ldr	r1, [r4, #32]
 8005772:	2301      	movs	r3, #1
 8005774:	4628      	mov	r0, r5
 8005776:	47b0      	blx	r6
 8005778:	1c41      	adds	r1, r0, #1
 800577a:	d1c7      	bne.n	800570c <__sflush_r+0x34>
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0c4      	beq.n	800570c <__sflush_r+0x34>
 8005782:	2b1d      	cmp	r3, #29
 8005784:	d001      	beq.n	800578a <__sflush_r+0xb2>
 8005786:	2b16      	cmp	r3, #22
 8005788:	d101      	bne.n	800578e <__sflush_r+0xb6>
 800578a:	602f      	str	r7, [r5, #0]
 800578c:	e7b1      	b.n	80056f2 <__sflush_r+0x1a>
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005794:	81a3      	strh	r3, [r4, #12]
 8005796:	e7ad      	b.n	80056f4 <__sflush_r+0x1c>
 8005798:	690f      	ldr	r7, [r1, #16]
 800579a:	2f00      	cmp	r7, #0
 800579c:	d0a9      	beq.n	80056f2 <__sflush_r+0x1a>
 800579e:	0793      	lsls	r3, r2, #30
 80057a0:	680e      	ldr	r6, [r1, #0]
 80057a2:	bf08      	it	eq
 80057a4:	694b      	ldreq	r3, [r1, #20]
 80057a6:	600f      	str	r7, [r1, #0]
 80057a8:	bf18      	it	ne
 80057aa:	2300      	movne	r3, #0
 80057ac:	eba6 0807 	sub.w	r8, r6, r7
 80057b0:	608b      	str	r3, [r1, #8]
 80057b2:	f1b8 0f00 	cmp.w	r8, #0
 80057b6:	dd9c      	ble.n	80056f2 <__sflush_r+0x1a>
 80057b8:	6a21      	ldr	r1, [r4, #32]
 80057ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057bc:	4643      	mov	r3, r8
 80057be:	463a      	mov	r2, r7
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b0      	blx	r6
 80057c4:	2800      	cmp	r0, #0
 80057c6:	dc06      	bgt.n	80057d6 <__sflush_r+0xfe>
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ce:	81a3      	strh	r3, [r4, #12]
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057d4:	e78e      	b.n	80056f4 <__sflush_r+0x1c>
 80057d6:	4407      	add	r7, r0
 80057d8:	eba8 0800 	sub.w	r8, r8, r0
 80057dc:	e7e9      	b.n	80057b2 <__sflush_r+0xda>
 80057de:	bf00      	nop
 80057e0:	20400001 	.word	0x20400001

080057e4 <_fflush_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	690b      	ldr	r3, [r1, #16]
 80057e8:	4605      	mov	r5, r0
 80057ea:	460c      	mov	r4, r1
 80057ec:	b913      	cbnz	r3, 80057f4 <_fflush_r+0x10>
 80057ee:	2500      	movs	r5, #0
 80057f0:	4628      	mov	r0, r5
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	b118      	cbz	r0, 80057fe <_fflush_r+0x1a>
 80057f6:	6983      	ldr	r3, [r0, #24]
 80057f8:	b90b      	cbnz	r3, 80057fe <_fflush_r+0x1a>
 80057fa:	f000 f887 	bl	800590c <__sinit>
 80057fe:	4b14      	ldr	r3, [pc, #80]	; (8005850 <_fflush_r+0x6c>)
 8005800:	429c      	cmp	r4, r3
 8005802:	d11b      	bne.n	800583c <_fflush_r+0x58>
 8005804:	686c      	ldr	r4, [r5, #4]
 8005806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0ef      	beq.n	80057ee <_fflush_r+0xa>
 800580e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005810:	07d0      	lsls	r0, r2, #31
 8005812:	d404      	bmi.n	800581e <_fflush_r+0x3a>
 8005814:	0599      	lsls	r1, r3, #22
 8005816:	d402      	bmi.n	800581e <_fflush_r+0x3a>
 8005818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800581a:	f000 f915 	bl	8005a48 <__retarget_lock_acquire_recursive>
 800581e:	4628      	mov	r0, r5
 8005820:	4621      	mov	r1, r4
 8005822:	f7ff ff59 	bl	80056d8 <__sflush_r>
 8005826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005828:	07da      	lsls	r2, r3, #31
 800582a:	4605      	mov	r5, r0
 800582c:	d4e0      	bmi.n	80057f0 <_fflush_r+0xc>
 800582e:	89a3      	ldrh	r3, [r4, #12]
 8005830:	059b      	lsls	r3, r3, #22
 8005832:	d4dd      	bmi.n	80057f0 <_fflush_r+0xc>
 8005834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005836:	f000 f908 	bl	8005a4a <__retarget_lock_release_recursive>
 800583a:	e7d9      	b.n	80057f0 <_fflush_r+0xc>
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <_fflush_r+0x70>)
 800583e:	429c      	cmp	r4, r3
 8005840:	d101      	bne.n	8005846 <_fflush_r+0x62>
 8005842:	68ac      	ldr	r4, [r5, #8]
 8005844:	e7df      	b.n	8005806 <_fflush_r+0x22>
 8005846:	4b04      	ldr	r3, [pc, #16]	; (8005858 <_fflush_r+0x74>)
 8005848:	429c      	cmp	r4, r3
 800584a:	bf08      	it	eq
 800584c:	68ec      	ldreq	r4, [r5, #12]
 800584e:	e7da      	b.n	8005806 <_fflush_r+0x22>
 8005850:	08006524 	.word	0x08006524
 8005854:	08006544 	.word	0x08006544
 8005858:	08006504 	.word	0x08006504

0800585c <std>:
 800585c:	2300      	movs	r3, #0
 800585e:	b510      	push	{r4, lr}
 8005860:	4604      	mov	r4, r0
 8005862:	e9c0 3300 	strd	r3, r3, [r0]
 8005866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800586a:	6083      	str	r3, [r0, #8]
 800586c:	8181      	strh	r1, [r0, #12]
 800586e:	6643      	str	r3, [r0, #100]	; 0x64
 8005870:	81c2      	strh	r2, [r0, #14]
 8005872:	6183      	str	r3, [r0, #24]
 8005874:	4619      	mov	r1, r3
 8005876:	2208      	movs	r2, #8
 8005878:	305c      	adds	r0, #92	; 0x5c
 800587a:	f7ff fdd7 	bl	800542c <memset>
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <std+0x38>)
 8005880:	6263      	str	r3, [r4, #36]	; 0x24
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <std+0x3c>)
 8005884:	62a3      	str	r3, [r4, #40]	; 0x28
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <std+0x40>)
 8005888:	62e3      	str	r3, [r4, #44]	; 0x2c
 800588a:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <std+0x44>)
 800588c:	6224      	str	r4, [r4, #32]
 800588e:	6323      	str	r3, [r4, #48]	; 0x30
 8005890:	bd10      	pop	{r4, pc}
 8005892:	bf00      	nop
 8005894:	080062d5 	.word	0x080062d5
 8005898:	080062f7 	.word	0x080062f7
 800589c:	0800632f 	.word	0x0800632f
 80058a0:	08006353 	.word	0x08006353

080058a4 <_cleanup_r>:
 80058a4:	4901      	ldr	r1, [pc, #4]	; (80058ac <_cleanup_r+0x8>)
 80058a6:	f000 b8af 	b.w	8005a08 <_fwalk_reent>
 80058aa:	bf00      	nop
 80058ac:	080057e5 	.word	0x080057e5

080058b0 <__sfmoreglue>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	2268      	movs	r2, #104	; 0x68
 80058b4:	1e4d      	subs	r5, r1, #1
 80058b6:	4355      	muls	r5, r2
 80058b8:	460e      	mov	r6, r1
 80058ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058be:	f000 f997 	bl	8005bf0 <_malloc_r>
 80058c2:	4604      	mov	r4, r0
 80058c4:	b140      	cbz	r0, 80058d8 <__sfmoreglue+0x28>
 80058c6:	2100      	movs	r1, #0
 80058c8:	e9c0 1600 	strd	r1, r6, [r0]
 80058cc:	300c      	adds	r0, #12
 80058ce:	60a0      	str	r0, [r4, #8]
 80058d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058d4:	f7ff fdaa 	bl	800542c <memset>
 80058d8:	4620      	mov	r0, r4
 80058da:	bd70      	pop	{r4, r5, r6, pc}

080058dc <__sfp_lock_acquire>:
 80058dc:	4801      	ldr	r0, [pc, #4]	; (80058e4 <__sfp_lock_acquire+0x8>)
 80058de:	f000 b8b3 	b.w	8005a48 <__retarget_lock_acquire_recursive>
 80058e2:	bf00      	nop
 80058e4:	20004a7d 	.word	0x20004a7d

080058e8 <__sfp_lock_release>:
 80058e8:	4801      	ldr	r0, [pc, #4]	; (80058f0 <__sfp_lock_release+0x8>)
 80058ea:	f000 b8ae 	b.w	8005a4a <__retarget_lock_release_recursive>
 80058ee:	bf00      	nop
 80058f0:	20004a7d 	.word	0x20004a7d

080058f4 <__sinit_lock_acquire>:
 80058f4:	4801      	ldr	r0, [pc, #4]	; (80058fc <__sinit_lock_acquire+0x8>)
 80058f6:	f000 b8a7 	b.w	8005a48 <__retarget_lock_acquire_recursive>
 80058fa:	bf00      	nop
 80058fc:	20004a7e 	.word	0x20004a7e

08005900 <__sinit_lock_release>:
 8005900:	4801      	ldr	r0, [pc, #4]	; (8005908 <__sinit_lock_release+0x8>)
 8005902:	f000 b8a2 	b.w	8005a4a <__retarget_lock_release_recursive>
 8005906:	bf00      	nop
 8005908:	20004a7e 	.word	0x20004a7e

0800590c <__sinit>:
 800590c:	b510      	push	{r4, lr}
 800590e:	4604      	mov	r4, r0
 8005910:	f7ff fff0 	bl	80058f4 <__sinit_lock_acquire>
 8005914:	69a3      	ldr	r3, [r4, #24]
 8005916:	b11b      	cbz	r3, 8005920 <__sinit+0x14>
 8005918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800591c:	f7ff bff0 	b.w	8005900 <__sinit_lock_release>
 8005920:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005924:	6523      	str	r3, [r4, #80]	; 0x50
 8005926:	4b13      	ldr	r3, [pc, #76]	; (8005974 <__sinit+0x68>)
 8005928:	4a13      	ldr	r2, [pc, #76]	; (8005978 <__sinit+0x6c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	62a2      	str	r2, [r4, #40]	; 0x28
 800592e:	42a3      	cmp	r3, r4
 8005930:	bf04      	itt	eq
 8005932:	2301      	moveq	r3, #1
 8005934:	61a3      	streq	r3, [r4, #24]
 8005936:	4620      	mov	r0, r4
 8005938:	f000 f820 	bl	800597c <__sfp>
 800593c:	6060      	str	r0, [r4, #4]
 800593e:	4620      	mov	r0, r4
 8005940:	f000 f81c 	bl	800597c <__sfp>
 8005944:	60a0      	str	r0, [r4, #8]
 8005946:	4620      	mov	r0, r4
 8005948:	f000 f818 	bl	800597c <__sfp>
 800594c:	2200      	movs	r2, #0
 800594e:	60e0      	str	r0, [r4, #12]
 8005950:	2104      	movs	r1, #4
 8005952:	6860      	ldr	r0, [r4, #4]
 8005954:	f7ff ff82 	bl	800585c <std>
 8005958:	68a0      	ldr	r0, [r4, #8]
 800595a:	2201      	movs	r2, #1
 800595c:	2109      	movs	r1, #9
 800595e:	f7ff ff7d 	bl	800585c <std>
 8005962:	68e0      	ldr	r0, [r4, #12]
 8005964:	2202      	movs	r2, #2
 8005966:	2112      	movs	r1, #18
 8005968:	f7ff ff78 	bl	800585c <std>
 800596c:	2301      	movs	r3, #1
 800596e:	61a3      	str	r3, [r4, #24]
 8005970:	e7d2      	b.n	8005918 <__sinit+0xc>
 8005972:	bf00      	nop
 8005974:	08006500 	.word	0x08006500
 8005978:	080058a5 	.word	0x080058a5

0800597c <__sfp>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	4607      	mov	r7, r0
 8005980:	f7ff ffac 	bl	80058dc <__sfp_lock_acquire>
 8005984:	4b1e      	ldr	r3, [pc, #120]	; (8005a00 <__sfp+0x84>)
 8005986:	681e      	ldr	r6, [r3, #0]
 8005988:	69b3      	ldr	r3, [r6, #24]
 800598a:	b913      	cbnz	r3, 8005992 <__sfp+0x16>
 800598c:	4630      	mov	r0, r6
 800598e:	f7ff ffbd 	bl	800590c <__sinit>
 8005992:	3648      	adds	r6, #72	; 0x48
 8005994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005998:	3b01      	subs	r3, #1
 800599a:	d503      	bpl.n	80059a4 <__sfp+0x28>
 800599c:	6833      	ldr	r3, [r6, #0]
 800599e:	b30b      	cbz	r3, 80059e4 <__sfp+0x68>
 80059a0:	6836      	ldr	r6, [r6, #0]
 80059a2:	e7f7      	b.n	8005994 <__sfp+0x18>
 80059a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059a8:	b9d5      	cbnz	r5, 80059e0 <__sfp+0x64>
 80059aa:	4b16      	ldr	r3, [pc, #88]	; (8005a04 <__sfp+0x88>)
 80059ac:	60e3      	str	r3, [r4, #12]
 80059ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059b2:	6665      	str	r5, [r4, #100]	; 0x64
 80059b4:	f000 f847 	bl	8005a46 <__retarget_lock_init_recursive>
 80059b8:	f7ff ff96 	bl	80058e8 <__sfp_lock_release>
 80059bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80059c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80059c4:	6025      	str	r5, [r4, #0]
 80059c6:	61a5      	str	r5, [r4, #24]
 80059c8:	2208      	movs	r2, #8
 80059ca:	4629      	mov	r1, r5
 80059cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059d0:	f7ff fd2c 	bl	800542c <memset>
 80059d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059dc:	4620      	mov	r0, r4
 80059de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e0:	3468      	adds	r4, #104	; 0x68
 80059e2:	e7d9      	b.n	8005998 <__sfp+0x1c>
 80059e4:	2104      	movs	r1, #4
 80059e6:	4638      	mov	r0, r7
 80059e8:	f7ff ff62 	bl	80058b0 <__sfmoreglue>
 80059ec:	4604      	mov	r4, r0
 80059ee:	6030      	str	r0, [r6, #0]
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d1d5      	bne.n	80059a0 <__sfp+0x24>
 80059f4:	f7ff ff78 	bl	80058e8 <__sfp_lock_release>
 80059f8:	230c      	movs	r3, #12
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	e7ee      	b.n	80059dc <__sfp+0x60>
 80059fe:	bf00      	nop
 8005a00:	08006500 	.word	0x08006500
 8005a04:	ffff0001 	.word	0xffff0001

08005a08 <_fwalk_reent>:
 8005a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a0c:	4606      	mov	r6, r0
 8005a0e:	4688      	mov	r8, r1
 8005a10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a14:	2700      	movs	r7, #0
 8005a16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a1a:	f1b9 0901 	subs.w	r9, r9, #1
 8005a1e:	d505      	bpl.n	8005a2c <_fwalk_reent+0x24>
 8005a20:	6824      	ldr	r4, [r4, #0]
 8005a22:	2c00      	cmp	r4, #0
 8005a24:	d1f7      	bne.n	8005a16 <_fwalk_reent+0xe>
 8005a26:	4638      	mov	r0, r7
 8005a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a2c:	89ab      	ldrh	r3, [r5, #12]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d907      	bls.n	8005a42 <_fwalk_reent+0x3a>
 8005a32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a36:	3301      	adds	r3, #1
 8005a38:	d003      	beq.n	8005a42 <_fwalk_reent+0x3a>
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	47c0      	blx	r8
 8005a40:	4307      	orrs	r7, r0
 8005a42:	3568      	adds	r5, #104	; 0x68
 8005a44:	e7e9      	b.n	8005a1a <_fwalk_reent+0x12>

08005a46 <__retarget_lock_init_recursive>:
 8005a46:	4770      	bx	lr

08005a48 <__retarget_lock_acquire_recursive>:
 8005a48:	4770      	bx	lr

08005a4a <__retarget_lock_release_recursive>:
 8005a4a:	4770      	bx	lr

08005a4c <__swhatbuf_r>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	460e      	mov	r6, r1
 8005a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a54:	2900      	cmp	r1, #0
 8005a56:	b096      	sub	sp, #88	; 0x58
 8005a58:	4614      	mov	r4, r2
 8005a5a:	461d      	mov	r5, r3
 8005a5c:	da08      	bge.n	8005a70 <__swhatbuf_r+0x24>
 8005a5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	602a      	str	r2, [r5, #0]
 8005a66:	061a      	lsls	r2, r3, #24
 8005a68:	d410      	bmi.n	8005a8c <__swhatbuf_r+0x40>
 8005a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a6e:	e00e      	b.n	8005a8e <__swhatbuf_r+0x42>
 8005a70:	466a      	mov	r2, sp
 8005a72:	f000 fc95 	bl	80063a0 <_fstat_r>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	dbf1      	blt.n	8005a5e <__swhatbuf_r+0x12>
 8005a7a:	9a01      	ldr	r2, [sp, #4]
 8005a7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a84:	425a      	negs	r2, r3
 8005a86:	415a      	adcs	r2, r3
 8005a88:	602a      	str	r2, [r5, #0]
 8005a8a:	e7ee      	b.n	8005a6a <__swhatbuf_r+0x1e>
 8005a8c:	2340      	movs	r3, #64	; 0x40
 8005a8e:	2000      	movs	r0, #0
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	b016      	add	sp, #88	; 0x58
 8005a94:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a98 <__smakebuf_r>:
 8005a98:	898b      	ldrh	r3, [r1, #12]
 8005a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a9c:	079d      	lsls	r5, r3, #30
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	d507      	bpl.n	8005ab4 <__smakebuf_r+0x1c>
 8005aa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	6123      	str	r3, [r4, #16]
 8005aac:	2301      	movs	r3, #1
 8005aae:	6163      	str	r3, [r4, #20]
 8005ab0:	b002      	add	sp, #8
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	ab01      	add	r3, sp, #4
 8005ab6:	466a      	mov	r2, sp
 8005ab8:	f7ff ffc8 	bl	8005a4c <__swhatbuf_r>
 8005abc:	9900      	ldr	r1, [sp, #0]
 8005abe:	4605      	mov	r5, r0
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	f000 f895 	bl	8005bf0 <_malloc_r>
 8005ac6:	b948      	cbnz	r0, 8005adc <__smakebuf_r+0x44>
 8005ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005acc:	059a      	lsls	r2, r3, #22
 8005ace:	d4ef      	bmi.n	8005ab0 <__smakebuf_r+0x18>
 8005ad0:	f023 0303 	bic.w	r3, r3, #3
 8005ad4:	f043 0302 	orr.w	r3, r3, #2
 8005ad8:	81a3      	strh	r3, [r4, #12]
 8005ada:	e7e3      	b.n	8005aa4 <__smakebuf_r+0xc>
 8005adc:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <__smakebuf_r+0x7c>)
 8005ade:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	6020      	str	r0, [r4, #0]
 8005ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae8:	81a3      	strh	r3, [r4, #12]
 8005aea:	9b00      	ldr	r3, [sp, #0]
 8005aec:	6163      	str	r3, [r4, #20]
 8005aee:	9b01      	ldr	r3, [sp, #4]
 8005af0:	6120      	str	r0, [r4, #16]
 8005af2:	b15b      	cbz	r3, 8005b0c <__smakebuf_r+0x74>
 8005af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005af8:	4630      	mov	r0, r6
 8005afa:	f000 fc63 	bl	80063c4 <_isatty_r>
 8005afe:	b128      	cbz	r0, 8005b0c <__smakebuf_r+0x74>
 8005b00:	89a3      	ldrh	r3, [r4, #12]
 8005b02:	f023 0303 	bic.w	r3, r3, #3
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	81a3      	strh	r3, [r4, #12]
 8005b0c:	89a0      	ldrh	r0, [r4, #12]
 8005b0e:	4305      	orrs	r5, r0
 8005b10:	81a5      	strh	r5, [r4, #12]
 8005b12:	e7cd      	b.n	8005ab0 <__smakebuf_r+0x18>
 8005b14:	080058a5 	.word	0x080058a5

08005b18 <_free_r>:
 8005b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b1a:	2900      	cmp	r1, #0
 8005b1c:	d044      	beq.n	8005ba8 <_free_r+0x90>
 8005b1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b22:	9001      	str	r0, [sp, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f1a1 0404 	sub.w	r4, r1, #4
 8005b2a:	bfb8      	it	lt
 8005b2c:	18e4      	addlt	r4, r4, r3
 8005b2e:	f000 fc6b 	bl	8006408 <__malloc_lock>
 8005b32:	4a1e      	ldr	r2, [pc, #120]	; (8005bac <_free_r+0x94>)
 8005b34:	9801      	ldr	r0, [sp, #4]
 8005b36:	6813      	ldr	r3, [r2, #0]
 8005b38:	b933      	cbnz	r3, 8005b48 <_free_r+0x30>
 8005b3a:	6063      	str	r3, [r4, #4]
 8005b3c:	6014      	str	r4, [r2, #0]
 8005b3e:	b003      	add	sp, #12
 8005b40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b44:	f000 bc66 	b.w	8006414 <__malloc_unlock>
 8005b48:	42a3      	cmp	r3, r4
 8005b4a:	d908      	bls.n	8005b5e <_free_r+0x46>
 8005b4c:	6825      	ldr	r5, [r4, #0]
 8005b4e:	1961      	adds	r1, r4, r5
 8005b50:	428b      	cmp	r3, r1
 8005b52:	bf01      	itttt	eq
 8005b54:	6819      	ldreq	r1, [r3, #0]
 8005b56:	685b      	ldreq	r3, [r3, #4]
 8005b58:	1949      	addeq	r1, r1, r5
 8005b5a:	6021      	streq	r1, [r4, #0]
 8005b5c:	e7ed      	b.n	8005b3a <_free_r+0x22>
 8005b5e:	461a      	mov	r2, r3
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	b10b      	cbz	r3, 8005b68 <_free_r+0x50>
 8005b64:	42a3      	cmp	r3, r4
 8005b66:	d9fa      	bls.n	8005b5e <_free_r+0x46>
 8005b68:	6811      	ldr	r1, [r2, #0]
 8005b6a:	1855      	adds	r5, r2, r1
 8005b6c:	42a5      	cmp	r5, r4
 8005b6e:	d10b      	bne.n	8005b88 <_free_r+0x70>
 8005b70:	6824      	ldr	r4, [r4, #0]
 8005b72:	4421      	add	r1, r4
 8005b74:	1854      	adds	r4, r2, r1
 8005b76:	42a3      	cmp	r3, r4
 8005b78:	6011      	str	r1, [r2, #0]
 8005b7a:	d1e0      	bne.n	8005b3e <_free_r+0x26>
 8005b7c:	681c      	ldr	r4, [r3, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	6053      	str	r3, [r2, #4]
 8005b82:	4421      	add	r1, r4
 8005b84:	6011      	str	r1, [r2, #0]
 8005b86:	e7da      	b.n	8005b3e <_free_r+0x26>
 8005b88:	d902      	bls.n	8005b90 <_free_r+0x78>
 8005b8a:	230c      	movs	r3, #12
 8005b8c:	6003      	str	r3, [r0, #0]
 8005b8e:	e7d6      	b.n	8005b3e <_free_r+0x26>
 8005b90:	6825      	ldr	r5, [r4, #0]
 8005b92:	1961      	adds	r1, r4, r5
 8005b94:	428b      	cmp	r3, r1
 8005b96:	bf04      	itt	eq
 8005b98:	6819      	ldreq	r1, [r3, #0]
 8005b9a:	685b      	ldreq	r3, [r3, #4]
 8005b9c:	6063      	str	r3, [r4, #4]
 8005b9e:	bf04      	itt	eq
 8005ba0:	1949      	addeq	r1, r1, r5
 8005ba2:	6021      	streq	r1, [r4, #0]
 8005ba4:	6054      	str	r4, [r2, #4]
 8005ba6:	e7ca      	b.n	8005b3e <_free_r+0x26>
 8005ba8:	b003      	add	sp, #12
 8005baa:	bd30      	pop	{r4, r5, pc}
 8005bac:	20004a80 	.word	0x20004a80

08005bb0 <sbrk_aligned>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	4e0e      	ldr	r6, [pc, #56]	; (8005bec <sbrk_aligned+0x3c>)
 8005bb4:	460c      	mov	r4, r1
 8005bb6:	6831      	ldr	r1, [r6, #0]
 8005bb8:	4605      	mov	r5, r0
 8005bba:	b911      	cbnz	r1, 8005bc2 <sbrk_aligned+0x12>
 8005bbc:	f000 fb7a 	bl	80062b4 <_sbrk_r>
 8005bc0:	6030      	str	r0, [r6, #0]
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f000 fb75 	bl	80062b4 <_sbrk_r>
 8005bca:	1c43      	adds	r3, r0, #1
 8005bcc:	d00a      	beq.n	8005be4 <sbrk_aligned+0x34>
 8005bce:	1cc4      	adds	r4, r0, #3
 8005bd0:	f024 0403 	bic.w	r4, r4, #3
 8005bd4:	42a0      	cmp	r0, r4
 8005bd6:	d007      	beq.n	8005be8 <sbrk_aligned+0x38>
 8005bd8:	1a21      	subs	r1, r4, r0
 8005bda:	4628      	mov	r0, r5
 8005bdc:	f000 fb6a 	bl	80062b4 <_sbrk_r>
 8005be0:	3001      	adds	r0, #1
 8005be2:	d101      	bne.n	8005be8 <sbrk_aligned+0x38>
 8005be4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005be8:	4620      	mov	r0, r4
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	20004a84 	.word	0x20004a84

08005bf0 <_malloc_r>:
 8005bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf4:	1ccd      	adds	r5, r1, #3
 8005bf6:	f025 0503 	bic.w	r5, r5, #3
 8005bfa:	3508      	adds	r5, #8
 8005bfc:	2d0c      	cmp	r5, #12
 8005bfe:	bf38      	it	cc
 8005c00:	250c      	movcc	r5, #12
 8005c02:	2d00      	cmp	r5, #0
 8005c04:	4607      	mov	r7, r0
 8005c06:	db01      	blt.n	8005c0c <_malloc_r+0x1c>
 8005c08:	42a9      	cmp	r1, r5
 8005c0a:	d905      	bls.n	8005c18 <_malloc_r+0x28>
 8005c0c:	230c      	movs	r3, #12
 8005c0e:	603b      	str	r3, [r7, #0]
 8005c10:	2600      	movs	r6, #0
 8005c12:	4630      	mov	r0, r6
 8005c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c18:	4e2e      	ldr	r6, [pc, #184]	; (8005cd4 <_malloc_r+0xe4>)
 8005c1a:	f000 fbf5 	bl	8006408 <__malloc_lock>
 8005c1e:	6833      	ldr	r3, [r6, #0]
 8005c20:	461c      	mov	r4, r3
 8005c22:	bb34      	cbnz	r4, 8005c72 <_malloc_r+0x82>
 8005c24:	4629      	mov	r1, r5
 8005c26:	4638      	mov	r0, r7
 8005c28:	f7ff ffc2 	bl	8005bb0 <sbrk_aligned>
 8005c2c:	1c43      	adds	r3, r0, #1
 8005c2e:	4604      	mov	r4, r0
 8005c30:	d14d      	bne.n	8005cce <_malloc_r+0xde>
 8005c32:	6834      	ldr	r4, [r6, #0]
 8005c34:	4626      	mov	r6, r4
 8005c36:	2e00      	cmp	r6, #0
 8005c38:	d140      	bne.n	8005cbc <_malloc_r+0xcc>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4638      	mov	r0, r7
 8005c40:	eb04 0803 	add.w	r8, r4, r3
 8005c44:	f000 fb36 	bl	80062b4 <_sbrk_r>
 8005c48:	4580      	cmp	r8, r0
 8005c4a:	d13a      	bne.n	8005cc2 <_malloc_r+0xd2>
 8005c4c:	6821      	ldr	r1, [r4, #0]
 8005c4e:	3503      	adds	r5, #3
 8005c50:	1a6d      	subs	r5, r5, r1
 8005c52:	f025 0503 	bic.w	r5, r5, #3
 8005c56:	3508      	adds	r5, #8
 8005c58:	2d0c      	cmp	r5, #12
 8005c5a:	bf38      	it	cc
 8005c5c:	250c      	movcc	r5, #12
 8005c5e:	4629      	mov	r1, r5
 8005c60:	4638      	mov	r0, r7
 8005c62:	f7ff ffa5 	bl	8005bb0 <sbrk_aligned>
 8005c66:	3001      	adds	r0, #1
 8005c68:	d02b      	beq.n	8005cc2 <_malloc_r+0xd2>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	442b      	add	r3, r5
 8005c6e:	6023      	str	r3, [r4, #0]
 8005c70:	e00e      	b.n	8005c90 <_malloc_r+0xa0>
 8005c72:	6822      	ldr	r2, [r4, #0]
 8005c74:	1b52      	subs	r2, r2, r5
 8005c76:	d41e      	bmi.n	8005cb6 <_malloc_r+0xc6>
 8005c78:	2a0b      	cmp	r2, #11
 8005c7a:	d916      	bls.n	8005caa <_malloc_r+0xba>
 8005c7c:	1961      	adds	r1, r4, r5
 8005c7e:	42a3      	cmp	r3, r4
 8005c80:	6025      	str	r5, [r4, #0]
 8005c82:	bf18      	it	ne
 8005c84:	6059      	strne	r1, [r3, #4]
 8005c86:	6863      	ldr	r3, [r4, #4]
 8005c88:	bf08      	it	eq
 8005c8a:	6031      	streq	r1, [r6, #0]
 8005c8c:	5162      	str	r2, [r4, r5]
 8005c8e:	604b      	str	r3, [r1, #4]
 8005c90:	4638      	mov	r0, r7
 8005c92:	f104 060b 	add.w	r6, r4, #11
 8005c96:	f000 fbbd 	bl	8006414 <__malloc_unlock>
 8005c9a:	f026 0607 	bic.w	r6, r6, #7
 8005c9e:	1d23      	adds	r3, r4, #4
 8005ca0:	1af2      	subs	r2, r6, r3
 8005ca2:	d0b6      	beq.n	8005c12 <_malloc_r+0x22>
 8005ca4:	1b9b      	subs	r3, r3, r6
 8005ca6:	50a3      	str	r3, [r4, r2]
 8005ca8:	e7b3      	b.n	8005c12 <_malloc_r+0x22>
 8005caa:	6862      	ldr	r2, [r4, #4]
 8005cac:	42a3      	cmp	r3, r4
 8005cae:	bf0c      	ite	eq
 8005cb0:	6032      	streq	r2, [r6, #0]
 8005cb2:	605a      	strne	r2, [r3, #4]
 8005cb4:	e7ec      	b.n	8005c90 <_malloc_r+0xa0>
 8005cb6:	4623      	mov	r3, r4
 8005cb8:	6864      	ldr	r4, [r4, #4]
 8005cba:	e7b2      	b.n	8005c22 <_malloc_r+0x32>
 8005cbc:	4634      	mov	r4, r6
 8005cbe:	6876      	ldr	r6, [r6, #4]
 8005cc0:	e7b9      	b.n	8005c36 <_malloc_r+0x46>
 8005cc2:	230c      	movs	r3, #12
 8005cc4:	603b      	str	r3, [r7, #0]
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	f000 fba4 	bl	8006414 <__malloc_unlock>
 8005ccc:	e7a1      	b.n	8005c12 <_malloc_r+0x22>
 8005cce:	6025      	str	r5, [r4, #0]
 8005cd0:	e7de      	b.n	8005c90 <_malloc_r+0xa0>
 8005cd2:	bf00      	nop
 8005cd4:	20004a80 	.word	0x20004a80

08005cd8 <__sfputc_r>:
 8005cd8:	6893      	ldr	r3, [r2, #8]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	b410      	push	{r4}
 8005ce0:	6093      	str	r3, [r2, #8]
 8005ce2:	da08      	bge.n	8005cf6 <__sfputc_r+0x1e>
 8005ce4:	6994      	ldr	r4, [r2, #24]
 8005ce6:	42a3      	cmp	r3, r4
 8005ce8:	db01      	blt.n	8005cee <__sfputc_r+0x16>
 8005cea:	290a      	cmp	r1, #10
 8005cec:	d103      	bne.n	8005cf6 <__sfputc_r+0x1e>
 8005cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cf2:	f7ff bc31 	b.w	8005558 <__swbuf_r>
 8005cf6:	6813      	ldr	r3, [r2, #0]
 8005cf8:	1c58      	adds	r0, r3, #1
 8005cfa:	6010      	str	r0, [r2, #0]
 8005cfc:	7019      	strb	r1, [r3, #0]
 8005cfe:	4608      	mov	r0, r1
 8005d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <__sfputs_r>:
 8005d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d08:	4606      	mov	r6, r0
 8005d0a:	460f      	mov	r7, r1
 8005d0c:	4614      	mov	r4, r2
 8005d0e:	18d5      	adds	r5, r2, r3
 8005d10:	42ac      	cmp	r4, r5
 8005d12:	d101      	bne.n	8005d18 <__sfputs_r+0x12>
 8005d14:	2000      	movs	r0, #0
 8005d16:	e007      	b.n	8005d28 <__sfputs_r+0x22>
 8005d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d1c:	463a      	mov	r2, r7
 8005d1e:	4630      	mov	r0, r6
 8005d20:	f7ff ffda 	bl	8005cd8 <__sfputc_r>
 8005d24:	1c43      	adds	r3, r0, #1
 8005d26:	d1f3      	bne.n	8005d10 <__sfputs_r+0xa>
 8005d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d2c <_vfiprintf_r>:
 8005d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d30:	460d      	mov	r5, r1
 8005d32:	b09d      	sub	sp, #116	; 0x74
 8005d34:	4614      	mov	r4, r2
 8005d36:	4698      	mov	r8, r3
 8005d38:	4606      	mov	r6, r0
 8005d3a:	b118      	cbz	r0, 8005d44 <_vfiprintf_r+0x18>
 8005d3c:	6983      	ldr	r3, [r0, #24]
 8005d3e:	b90b      	cbnz	r3, 8005d44 <_vfiprintf_r+0x18>
 8005d40:	f7ff fde4 	bl	800590c <__sinit>
 8005d44:	4b89      	ldr	r3, [pc, #548]	; (8005f6c <_vfiprintf_r+0x240>)
 8005d46:	429d      	cmp	r5, r3
 8005d48:	d11b      	bne.n	8005d82 <_vfiprintf_r+0x56>
 8005d4a:	6875      	ldr	r5, [r6, #4]
 8005d4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d4e:	07d9      	lsls	r1, r3, #31
 8005d50:	d405      	bmi.n	8005d5e <_vfiprintf_r+0x32>
 8005d52:	89ab      	ldrh	r3, [r5, #12]
 8005d54:	059a      	lsls	r2, r3, #22
 8005d56:	d402      	bmi.n	8005d5e <_vfiprintf_r+0x32>
 8005d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d5a:	f7ff fe75 	bl	8005a48 <__retarget_lock_acquire_recursive>
 8005d5e:	89ab      	ldrh	r3, [r5, #12]
 8005d60:	071b      	lsls	r3, r3, #28
 8005d62:	d501      	bpl.n	8005d68 <_vfiprintf_r+0x3c>
 8005d64:	692b      	ldr	r3, [r5, #16]
 8005d66:	b9eb      	cbnz	r3, 8005da4 <_vfiprintf_r+0x78>
 8005d68:	4629      	mov	r1, r5
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f7ff fc46 	bl	80055fc <__swsetup_r>
 8005d70:	b1c0      	cbz	r0, 8005da4 <_vfiprintf_r+0x78>
 8005d72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d74:	07dc      	lsls	r4, r3, #31
 8005d76:	d50e      	bpl.n	8005d96 <_vfiprintf_r+0x6a>
 8005d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d7c:	b01d      	add	sp, #116	; 0x74
 8005d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d82:	4b7b      	ldr	r3, [pc, #492]	; (8005f70 <_vfiprintf_r+0x244>)
 8005d84:	429d      	cmp	r5, r3
 8005d86:	d101      	bne.n	8005d8c <_vfiprintf_r+0x60>
 8005d88:	68b5      	ldr	r5, [r6, #8]
 8005d8a:	e7df      	b.n	8005d4c <_vfiprintf_r+0x20>
 8005d8c:	4b79      	ldr	r3, [pc, #484]	; (8005f74 <_vfiprintf_r+0x248>)
 8005d8e:	429d      	cmp	r5, r3
 8005d90:	bf08      	it	eq
 8005d92:	68f5      	ldreq	r5, [r6, #12]
 8005d94:	e7da      	b.n	8005d4c <_vfiprintf_r+0x20>
 8005d96:	89ab      	ldrh	r3, [r5, #12]
 8005d98:	0598      	lsls	r0, r3, #22
 8005d9a:	d4ed      	bmi.n	8005d78 <_vfiprintf_r+0x4c>
 8005d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d9e:	f7ff fe54 	bl	8005a4a <__retarget_lock_release_recursive>
 8005da2:	e7e9      	b.n	8005d78 <_vfiprintf_r+0x4c>
 8005da4:	2300      	movs	r3, #0
 8005da6:	9309      	str	r3, [sp, #36]	; 0x24
 8005da8:	2320      	movs	r3, #32
 8005daa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dae:	f8cd 800c 	str.w	r8, [sp, #12]
 8005db2:	2330      	movs	r3, #48	; 0x30
 8005db4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005f78 <_vfiprintf_r+0x24c>
 8005db8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dbc:	f04f 0901 	mov.w	r9, #1
 8005dc0:	4623      	mov	r3, r4
 8005dc2:	469a      	mov	sl, r3
 8005dc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dc8:	b10a      	cbz	r2, 8005dce <_vfiprintf_r+0xa2>
 8005dca:	2a25      	cmp	r2, #37	; 0x25
 8005dcc:	d1f9      	bne.n	8005dc2 <_vfiprintf_r+0x96>
 8005dce:	ebba 0b04 	subs.w	fp, sl, r4
 8005dd2:	d00b      	beq.n	8005dec <_vfiprintf_r+0xc0>
 8005dd4:	465b      	mov	r3, fp
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	4629      	mov	r1, r5
 8005dda:	4630      	mov	r0, r6
 8005ddc:	f7ff ff93 	bl	8005d06 <__sfputs_r>
 8005de0:	3001      	adds	r0, #1
 8005de2:	f000 80aa 	beq.w	8005f3a <_vfiprintf_r+0x20e>
 8005de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005de8:	445a      	add	r2, fp
 8005dea:	9209      	str	r2, [sp, #36]	; 0x24
 8005dec:	f89a 3000 	ldrb.w	r3, [sl]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80a2 	beq.w	8005f3a <_vfiprintf_r+0x20e>
 8005df6:	2300      	movs	r3, #0
 8005df8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e00:	f10a 0a01 	add.w	sl, sl, #1
 8005e04:	9304      	str	r3, [sp, #16]
 8005e06:	9307      	str	r3, [sp, #28]
 8005e08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e0c:	931a      	str	r3, [sp, #104]	; 0x68
 8005e0e:	4654      	mov	r4, sl
 8005e10:	2205      	movs	r2, #5
 8005e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e16:	4858      	ldr	r0, [pc, #352]	; (8005f78 <_vfiprintf_r+0x24c>)
 8005e18:	f7fa f9e2 	bl	80001e0 <memchr>
 8005e1c:	9a04      	ldr	r2, [sp, #16]
 8005e1e:	b9d8      	cbnz	r0, 8005e58 <_vfiprintf_r+0x12c>
 8005e20:	06d1      	lsls	r1, r2, #27
 8005e22:	bf44      	itt	mi
 8005e24:	2320      	movmi	r3, #32
 8005e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e2a:	0713      	lsls	r3, r2, #28
 8005e2c:	bf44      	itt	mi
 8005e2e:	232b      	movmi	r3, #43	; 0x2b
 8005e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e34:	f89a 3000 	ldrb.w	r3, [sl]
 8005e38:	2b2a      	cmp	r3, #42	; 0x2a
 8005e3a:	d015      	beq.n	8005e68 <_vfiprintf_r+0x13c>
 8005e3c:	9a07      	ldr	r2, [sp, #28]
 8005e3e:	4654      	mov	r4, sl
 8005e40:	2000      	movs	r0, #0
 8005e42:	f04f 0c0a 	mov.w	ip, #10
 8005e46:	4621      	mov	r1, r4
 8005e48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e4c:	3b30      	subs	r3, #48	; 0x30
 8005e4e:	2b09      	cmp	r3, #9
 8005e50:	d94e      	bls.n	8005ef0 <_vfiprintf_r+0x1c4>
 8005e52:	b1b0      	cbz	r0, 8005e82 <_vfiprintf_r+0x156>
 8005e54:	9207      	str	r2, [sp, #28]
 8005e56:	e014      	b.n	8005e82 <_vfiprintf_r+0x156>
 8005e58:	eba0 0308 	sub.w	r3, r0, r8
 8005e5c:	fa09 f303 	lsl.w	r3, r9, r3
 8005e60:	4313      	orrs	r3, r2
 8005e62:	9304      	str	r3, [sp, #16]
 8005e64:	46a2      	mov	sl, r4
 8005e66:	e7d2      	b.n	8005e0e <_vfiprintf_r+0xe2>
 8005e68:	9b03      	ldr	r3, [sp, #12]
 8005e6a:	1d19      	adds	r1, r3, #4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	9103      	str	r1, [sp, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	bfbb      	ittet	lt
 8005e74:	425b      	neglt	r3, r3
 8005e76:	f042 0202 	orrlt.w	r2, r2, #2
 8005e7a:	9307      	strge	r3, [sp, #28]
 8005e7c:	9307      	strlt	r3, [sp, #28]
 8005e7e:	bfb8      	it	lt
 8005e80:	9204      	strlt	r2, [sp, #16]
 8005e82:	7823      	ldrb	r3, [r4, #0]
 8005e84:	2b2e      	cmp	r3, #46	; 0x2e
 8005e86:	d10c      	bne.n	8005ea2 <_vfiprintf_r+0x176>
 8005e88:	7863      	ldrb	r3, [r4, #1]
 8005e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e8c:	d135      	bne.n	8005efa <_vfiprintf_r+0x1ce>
 8005e8e:	9b03      	ldr	r3, [sp, #12]
 8005e90:	1d1a      	adds	r2, r3, #4
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	9203      	str	r2, [sp, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	bfb8      	it	lt
 8005e9a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e9e:	3402      	adds	r4, #2
 8005ea0:	9305      	str	r3, [sp, #20]
 8005ea2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005f88 <_vfiprintf_r+0x25c>
 8005ea6:	7821      	ldrb	r1, [r4, #0]
 8005ea8:	2203      	movs	r2, #3
 8005eaa:	4650      	mov	r0, sl
 8005eac:	f7fa f998 	bl	80001e0 <memchr>
 8005eb0:	b140      	cbz	r0, 8005ec4 <_vfiprintf_r+0x198>
 8005eb2:	2340      	movs	r3, #64	; 0x40
 8005eb4:	eba0 000a 	sub.w	r0, r0, sl
 8005eb8:	fa03 f000 	lsl.w	r0, r3, r0
 8005ebc:	9b04      	ldr	r3, [sp, #16]
 8005ebe:	4303      	orrs	r3, r0
 8005ec0:	3401      	adds	r4, #1
 8005ec2:	9304      	str	r3, [sp, #16]
 8005ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ec8:	482c      	ldr	r0, [pc, #176]	; (8005f7c <_vfiprintf_r+0x250>)
 8005eca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ece:	2206      	movs	r2, #6
 8005ed0:	f7fa f986 	bl	80001e0 <memchr>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d03f      	beq.n	8005f58 <_vfiprintf_r+0x22c>
 8005ed8:	4b29      	ldr	r3, [pc, #164]	; (8005f80 <_vfiprintf_r+0x254>)
 8005eda:	bb1b      	cbnz	r3, 8005f24 <_vfiprintf_r+0x1f8>
 8005edc:	9b03      	ldr	r3, [sp, #12]
 8005ede:	3307      	adds	r3, #7
 8005ee0:	f023 0307 	bic.w	r3, r3, #7
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	9303      	str	r3, [sp, #12]
 8005ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eea:	443b      	add	r3, r7
 8005eec:	9309      	str	r3, [sp, #36]	; 0x24
 8005eee:	e767      	b.n	8005dc0 <_vfiprintf_r+0x94>
 8005ef0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	2001      	movs	r0, #1
 8005ef8:	e7a5      	b.n	8005e46 <_vfiprintf_r+0x11a>
 8005efa:	2300      	movs	r3, #0
 8005efc:	3401      	adds	r4, #1
 8005efe:	9305      	str	r3, [sp, #20]
 8005f00:	4619      	mov	r1, r3
 8005f02:	f04f 0c0a 	mov.w	ip, #10
 8005f06:	4620      	mov	r0, r4
 8005f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f0c:	3a30      	subs	r2, #48	; 0x30
 8005f0e:	2a09      	cmp	r2, #9
 8005f10:	d903      	bls.n	8005f1a <_vfiprintf_r+0x1ee>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0c5      	beq.n	8005ea2 <_vfiprintf_r+0x176>
 8005f16:	9105      	str	r1, [sp, #20]
 8005f18:	e7c3      	b.n	8005ea2 <_vfiprintf_r+0x176>
 8005f1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f1e:	4604      	mov	r4, r0
 8005f20:	2301      	movs	r3, #1
 8005f22:	e7f0      	b.n	8005f06 <_vfiprintf_r+0x1da>
 8005f24:	ab03      	add	r3, sp, #12
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	462a      	mov	r2, r5
 8005f2a:	4b16      	ldr	r3, [pc, #88]	; (8005f84 <_vfiprintf_r+0x258>)
 8005f2c:	a904      	add	r1, sp, #16
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f3af 8000 	nop.w
 8005f34:	4607      	mov	r7, r0
 8005f36:	1c78      	adds	r0, r7, #1
 8005f38:	d1d6      	bne.n	8005ee8 <_vfiprintf_r+0x1bc>
 8005f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f3c:	07d9      	lsls	r1, r3, #31
 8005f3e:	d405      	bmi.n	8005f4c <_vfiprintf_r+0x220>
 8005f40:	89ab      	ldrh	r3, [r5, #12]
 8005f42:	059a      	lsls	r2, r3, #22
 8005f44:	d402      	bmi.n	8005f4c <_vfiprintf_r+0x220>
 8005f46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f48:	f7ff fd7f 	bl	8005a4a <__retarget_lock_release_recursive>
 8005f4c:	89ab      	ldrh	r3, [r5, #12]
 8005f4e:	065b      	lsls	r3, r3, #25
 8005f50:	f53f af12 	bmi.w	8005d78 <_vfiprintf_r+0x4c>
 8005f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f56:	e711      	b.n	8005d7c <_vfiprintf_r+0x50>
 8005f58:	ab03      	add	r3, sp, #12
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	462a      	mov	r2, r5
 8005f5e:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <_vfiprintf_r+0x258>)
 8005f60:	a904      	add	r1, sp, #16
 8005f62:	4630      	mov	r0, r6
 8005f64:	f000 f880 	bl	8006068 <_printf_i>
 8005f68:	e7e4      	b.n	8005f34 <_vfiprintf_r+0x208>
 8005f6a:	bf00      	nop
 8005f6c:	08006524 	.word	0x08006524
 8005f70:	08006544 	.word	0x08006544
 8005f74:	08006504 	.word	0x08006504
 8005f78:	08006564 	.word	0x08006564
 8005f7c:	0800656e 	.word	0x0800656e
 8005f80:	00000000 	.word	0x00000000
 8005f84:	08005d07 	.word	0x08005d07
 8005f88:	0800656a 	.word	0x0800656a

08005f8c <_printf_common>:
 8005f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f90:	4616      	mov	r6, r2
 8005f92:	4699      	mov	r9, r3
 8005f94:	688a      	ldr	r2, [r1, #8]
 8005f96:	690b      	ldr	r3, [r1, #16]
 8005f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	bfb8      	it	lt
 8005fa0:	4613      	movlt	r3, r2
 8005fa2:	6033      	str	r3, [r6, #0]
 8005fa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fa8:	4607      	mov	r7, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	b10a      	cbz	r2, 8005fb2 <_printf_common+0x26>
 8005fae:	3301      	adds	r3, #1
 8005fb0:	6033      	str	r3, [r6, #0]
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	0699      	lsls	r1, r3, #26
 8005fb6:	bf42      	ittt	mi
 8005fb8:	6833      	ldrmi	r3, [r6, #0]
 8005fba:	3302      	addmi	r3, #2
 8005fbc:	6033      	strmi	r3, [r6, #0]
 8005fbe:	6825      	ldr	r5, [r4, #0]
 8005fc0:	f015 0506 	ands.w	r5, r5, #6
 8005fc4:	d106      	bne.n	8005fd4 <_printf_common+0x48>
 8005fc6:	f104 0a19 	add.w	sl, r4, #25
 8005fca:	68e3      	ldr	r3, [r4, #12]
 8005fcc:	6832      	ldr	r2, [r6, #0]
 8005fce:	1a9b      	subs	r3, r3, r2
 8005fd0:	42ab      	cmp	r3, r5
 8005fd2:	dc26      	bgt.n	8006022 <_printf_common+0x96>
 8005fd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fd8:	1e13      	subs	r3, r2, #0
 8005fda:	6822      	ldr	r2, [r4, #0]
 8005fdc:	bf18      	it	ne
 8005fde:	2301      	movne	r3, #1
 8005fe0:	0692      	lsls	r2, r2, #26
 8005fe2:	d42b      	bmi.n	800603c <_printf_common+0xb0>
 8005fe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fe8:	4649      	mov	r1, r9
 8005fea:	4638      	mov	r0, r7
 8005fec:	47c0      	blx	r8
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d01e      	beq.n	8006030 <_printf_common+0xa4>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	68e5      	ldr	r5, [r4, #12]
 8005ff6:	6832      	ldr	r2, [r6, #0]
 8005ff8:	f003 0306 	and.w	r3, r3, #6
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	bf08      	it	eq
 8006000:	1aad      	subeq	r5, r5, r2
 8006002:	68a3      	ldr	r3, [r4, #8]
 8006004:	6922      	ldr	r2, [r4, #16]
 8006006:	bf0c      	ite	eq
 8006008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800600c:	2500      	movne	r5, #0
 800600e:	4293      	cmp	r3, r2
 8006010:	bfc4      	itt	gt
 8006012:	1a9b      	subgt	r3, r3, r2
 8006014:	18ed      	addgt	r5, r5, r3
 8006016:	2600      	movs	r6, #0
 8006018:	341a      	adds	r4, #26
 800601a:	42b5      	cmp	r5, r6
 800601c:	d11a      	bne.n	8006054 <_printf_common+0xc8>
 800601e:	2000      	movs	r0, #0
 8006020:	e008      	b.n	8006034 <_printf_common+0xa8>
 8006022:	2301      	movs	r3, #1
 8006024:	4652      	mov	r2, sl
 8006026:	4649      	mov	r1, r9
 8006028:	4638      	mov	r0, r7
 800602a:	47c0      	blx	r8
 800602c:	3001      	adds	r0, #1
 800602e:	d103      	bne.n	8006038 <_printf_common+0xac>
 8006030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006038:	3501      	adds	r5, #1
 800603a:	e7c6      	b.n	8005fca <_printf_common+0x3e>
 800603c:	18e1      	adds	r1, r4, r3
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	2030      	movs	r0, #48	; 0x30
 8006042:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006046:	4422      	add	r2, r4
 8006048:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800604c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006050:	3302      	adds	r3, #2
 8006052:	e7c7      	b.n	8005fe4 <_printf_common+0x58>
 8006054:	2301      	movs	r3, #1
 8006056:	4622      	mov	r2, r4
 8006058:	4649      	mov	r1, r9
 800605a:	4638      	mov	r0, r7
 800605c:	47c0      	blx	r8
 800605e:	3001      	adds	r0, #1
 8006060:	d0e6      	beq.n	8006030 <_printf_common+0xa4>
 8006062:	3601      	adds	r6, #1
 8006064:	e7d9      	b.n	800601a <_printf_common+0x8e>
	...

08006068 <_printf_i>:
 8006068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800606c:	7e0f      	ldrb	r7, [r1, #24]
 800606e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006070:	2f78      	cmp	r7, #120	; 0x78
 8006072:	4691      	mov	r9, r2
 8006074:	4680      	mov	r8, r0
 8006076:	460c      	mov	r4, r1
 8006078:	469a      	mov	sl, r3
 800607a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800607e:	d807      	bhi.n	8006090 <_printf_i+0x28>
 8006080:	2f62      	cmp	r7, #98	; 0x62
 8006082:	d80a      	bhi.n	800609a <_printf_i+0x32>
 8006084:	2f00      	cmp	r7, #0
 8006086:	f000 80d8 	beq.w	800623a <_printf_i+0x1d2>
 800608a:	2f58      	cmp	r7, #88	; 0x58
 800608c:	f000 80a3 	beq.w	80061d6 <_printf_i+0x16e>
 8006090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006094:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006098:	e03a      	b.n	8006110 <_printf_i+0xa8>
 800609a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800609e:	2b15      	cmp	r3, #21
 80060a0:	d8f6      	bhi.n	8006090 <_printf_i+0x28>
 80060a2:	a101      	add	r1, pc, #4	; (adr r1, 80060a8 <_printf_i+0x40>)
 80060a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060a8:	08006101 	.word	0x08006101
 80060ac:	08006115 	.word	0x08006115
 80060b0:	08006091 	.word	0x08006091
 80060b4:	08006091 	.word	0x08006091
 80060b8:	08006091 	.word	0x08006091
 80060bc:	08006091 	.word	0x08006091
 80060c0:	08006115 	.word	0x08006115
 80060c4:	08006091 	.word	0x08006091
 80060c8:	08006091 	.word	0x08006091
 80060cc:	08006091 	.word	0x08006091
 80060d0:	08006091 	.word	0x08006091
 80060d4:	08006221 	.word	0x08006221
 80060d8:	08006145 	.word	0x08006145
 80060dc:	08006203 	.word	0x08006203
 80060e0:	08006091 	.word	0x08006091
 80060e4:	08006091 	.word	0x08006091
 80060e8:	08006243 	.word	0x08006243
 80060ec:	08006091 	.word	0x08006091
 80060f0:	08006145 	.word	0x08006145
 80060f4:	08006091 	.word	0x08006091
 80060f8:	08006091 	.word	0x08006091
 80060fc:	0800620b 	.word	0x0800620b
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	1d1a      	adds	r2, r3, #4
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	602a      	str	r2, [r5, #0]
 8006108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800610c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006110:	2301      	movs	r3, #1
 8006112:	e0a3      	b.n	800625c <_printf_i+0x1f4>
 8006114:	6820      	ldr	r0, [r4, #0]
 8006116:	6829      	ldr	r1, [r5, #0]
 8006118:	0606      	lsls	r6, r0, #24
 800611a:	f101 0304 	add.w	r3, r1, #4
 800611e:	d50a      	bpl.n	8006136 <_printf_i+0xce>
 8006120:	680e      	ldr	r6, [r1, #0]
 8006122:	602b      	str	r3, [r5, #0]
 8006124:	2e00      	cmp	r6, #0
 8006126:	da03      	bge.n	8006130 <_printf_i+0xc8>
 8006128:	232d      	movs	r3, #45	; 0x2d
 800612a:	4276      	negs	r6, r6
 800612c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006130:	485e      	ldr	r0, [pc, #376]	; (80062ac <_printf_i+0x244>)
 8006132:	230a      	movs	r3, #10
 8006134:	e019      	b.n	800616a <_printf_i+0x102>
 8006136:	680e      	ldr	r6, [r1, #0]
 8006138:	602b      	str	r3, [r5, #0]
 800613a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800613e:	bf18      	it	ne
 8006140:	b236      	sxthne	r6, r6
 8006142:	e7ef      	b.n	8006124 <_printf_i+0xbc>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	6820      	ldr	r0, [r4, #0]
 8006148:	1d19      	adds	r1, r3, #4
 800614a:	6029      	str	r1, [r5, #0]
 800614c:	0601      	lsls	r1, r0, #24
 800614e:	d501      	bpl.n	8006154 <_printf_i+0xec>
 8006150:	681e      	ldr	r6, [r3, #0]
 8006152:	e002      	b.n	800615a <_printf_i+0xf2>
 8006154:	0646      	lsls	r6, r0, #25
 8006156:	d5fb      	bpl.n	8006150 <_printf_i+0xe8>
 8006158:	881e      	ldrh	r6, [r3, #0]
 800615a:	4854      	ldr	r0, [pc, #336]	; (80062ac <_printf_i+0x244>)
 800615c:	2f6f      	cmp	r7, #111	; 0x6f
 800615e:	bf0c      	ite	eq
 8006160:	2308      	moveq	r3, #8
 8006162:	230a      	movne	r3, #10
 8006164:	2100      	movs	r1, #0
 8006166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800616a:	6865      	ldr	r5, [r4, #4]
 800616c:	60a5      	str	r5, [r4, #8]
 800616e:	2d00      	cmp	r5, #0
 8006170:	bfa2      	ittt	ge
 8006172:	6821      	ldrge	r1, [r4, #0]
 8006174:	f021 0104 	bicge.w	r1, r1, #4
 8006178:	6021      	strge	r1, [r4, #0]
 800617a:	b90e      	cbnz	r6, 8006180 <_printf_i+0x118>
 800617c:	2d00      	cmp	r5, #0
 800617e:	d04d      	beq.n	800621c <_printf_i+0x1b4>
 8006180:	4615      	mov	r5, r2
 8006182:	fbb6 f1f3 	udiv	r1, r6, r3
 8006186:	fb03 6711 	mls	r7, r3, r1, r6
 800618a:	5dc7      	ldrb	r7, [r0, r7]
 800618c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006190:	4637      	mov	r7, r6
 8006192:	42bb      	cmp	r3, r7
 8006194:	460e      	mov	r6, r1
 8006196:	d9f4      	bls.n	8006182 <_printf_i+0x11a>
 8006198:	2b08      	cmp	r3, #8
 800619a:	d10b      	bne.n	80061b4 <_printf_i+0x14c>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	07de      	lsls	r6, r3, #31
 80061a0:	d508      	bpl.n	80061b4 <_printf_i+0x14c>
 80061a2:	6923      	ldr	r3, [r4, #16]
 80061a4:	6861      	ldr	r1, [r4, #4]
 80061a6:	4299      	cmp	r1, r3
 80061a8:	bfde      	ittt	le
 80061aa:	2330      	movle	r3, #48	; 0x30
 80061ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80061b4:	1b52      	subs	r2, r2, r5
 80061b6:	6122      	str	r2, [r4, #16]
 80061b8:	f8cd a000 	str.w	sl, [sp]
 80061bc:	464b      	mov	r3, r9
 80061be:	aa03      	add	r2, sp, #12
 80061c0:	4621      	mov	r1, r4
 80061c2:	4640      	mov	r0, r8
 80061c4:	f7ff fee2 	bl	8005f8c <_printf_common>
 80061c8:	3001      	adds	r0, #1
 80061ca:	d14c      	bne.n	8006266 <_printf_i+0x1fe>
 80061cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061d0:	b004      	add	sp, #16
 80061d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d6:	4835      	ldr	r0, [pc, #212]	; (80062ac <_printf_i+0x244>)
 80061d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80061dc:	6829      	ldr	r1, [r5, #0]
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80061e4:	6029      	str	r1, [r5, #0]
 80061e6:	061d      	lsls	r5, r3, #24
 80061e8:	d514      	bpl.n	8006214 <_printf_i+0x1ac>
 80061ea:	07df      	lsls	r7, r3, #31
 80061ec:	bf44      	itt	mi
 80061ee:	f043 0320 	orrmi.w	r3, r3, #32
 80061f2:	6023      	strmi	r3, [r4, #0]
 80061f4:	b91e      	cbnz	r6, 80061fe <_printf_i+0x196>
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	f023 0320 	bic.w	r3, r3, #32
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	2310      	movs	r3, #16
 8006200:	e7b0      	b.n	8006164 <_printf_i+0xfc>
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	f043 0320 	orr.w	r3, r3, #32
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	2378      	movs	r3, #120	; 0x78
 800620c:	4828      	ldr	r0, [pc, #160]	; (80062b0 <_printf_i+0x248>)
 800620e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006212:	e7e3      	b.n	80061dc <_printf_i+0x174>
 8006214:	0659      	lsls	r1, r3, #25
 8006216:	bf48      	it	mi
 8006218:	b2b6      	uxthmi	r6, r6
 800621a:	e7e6      	b.n	80061ea <_printf_i+0x182>
 800621c:	4615      	mov	r5, r2
 800621e:	e7bb      	b.n	8006198 <_printf_i+0x130>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	6826      	ldr	r6, [r4, #0]
 8006224:	6961      	ldr	r1, [r4, #20]
 8006226:	1d18      	adds	r0, r3, #4
 8006228:	6028      	str	r0, [r5, #0]
 800622a:	0635      	lsls	r5, r6, #24
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	d501      	bpl.n	8006234 <_printf_i+0x1cc>
 8006230:	6019      	str	r1, [r3, #0]
 8006232:	e002      	b.n	800623a <_printf_i+0x1d2>
 8006234:	0670      	lsls	r0, r6, #25
 8006236:	d5fb      	bpl.n	8006230 <_printf_i+0x1c8>
 8006238:	8019      	strh	r1, [r3, #0]
 800623a:	2300      	movs	r3, #0
 800623c:	6123      	str	r3, [r4, #16]
 800623e:	4615      	mov	r5, r2
 8006240:	e7ba      	b.n	80061b8 <_printf_i+0x150>
 8006242:	682b      	ldr	r3, [r5, #0]
 8006244:	1d1a      	adds	r2, r3, #4
 8006246:	602a      	str	r2, [r5, #0]
 8006248:	681d      	ldr	r5, [r3, #0]
 800624a:	6862      	ldr	r2, [r4, #4]
 800624c:	2100      	movs	r1, #0
 800624e:	4628      	mov	r0, r5
 8006250:	f7f9 ffc6 	bl	80001e0 <memchr>
 8006254:	b108      	cbz	r0, 800625a <_printf_i+0x1f2>
 8006256:	1b40      	subs	r0, r0, r5
 8006258:	6060      	str	r0, [r4, #4]
 800625a:	6863      	ldr	r3, [r4, #4]
 800625c:	6123      	str	r3, [r4, #16]
 800625e:	2300      	movs	r3, #0
 8006260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006264:	e7a8      	b.n	80061b8 <_printf_i+0x150>
 8006266:	6923      	ldr	r3, [r4, #16]
 8006268:	462a      	mov	r2, r5
 800626a:	4649      	mov	r1, r9
 800626c:	4640      	mov	r0, r8
 800626e:	47d0      	blx	sl
 8006270:	3001      	adds	r0, #1
 8006272:	d0ab      	beq.n	80061cc <_printf_i+0x164>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	079b      	lsls	r3, r3, #30
 8006278:	d413      	bmi.n	80062a2 <_printf_i+0x23a>
 800627a:	68e0      	ldr	r0, [r4, #12]
 800627c:	9b03      	ldr	r3, [sp, #12]
 800627e:	4298      	cmp	r0, r3
 8006280:	bfb8      	it	lt
 8006282:	4618      	movlt	r0, r3
 8006284:	e7a4      	b.n	80061d0 <_printf_i+0x168>
 8006286:	2301      	movs	r3, #1
 8006288:	4632      	mov	r2, r6
 800628a:	4649      	mov	r1, r9
 800628c:	4640      	mov	r0, r8
 800628e:	47d0      	blx	sl
 8006290:	3001      	adds	r0, #1
 8006292:	d09b      	beq.n	80061cc <_printf_i+0x164>
 8006294:	3501      	adds	r5, #1
 8006296:	68e3      	ldr	r3, [r4, #12]
 8006298:	9903      	ldr	r1, [sp, #12]
 800629a:	1a5b      	subs	r3, r3, r1
 800629c:	42ab      	cmp	r3, r5
 800629e:	dcf2      	bgt.n	8006286 <_printf_i+0x21e>
 80062a0:	e7eb      	b.n	800627a <_printf_i+0x212>
 80062a2:	2500      	movs	r5, #0
 80062a4:	f104 0619 	add.w	r6, r4, #25
 80062a8:	e7f5      	b.n	8006296 <_printf_i+0x22e>
 80062aa:	bf00      	nop
 80062ac:	08006575 	.word	0x08006575
 80062b0:	08006586 	.word	0x08006586

080062b4 <_sbrk_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4d06      	ldr	r5, [pc, #24]	; (80062d0 <_sbrk_r+0x1c>)
 80062b8:	2300      	movs	r3, #0
 80062ba:	4604      	mov	r4, r0
 80062bc:	4608      	mov	r0, r1
 80062be:	602b      	str	r3, [r5, #0]
 80062c0:	f7fa fc50 	bl	8000b64 <_sbrk>
 80062c4:	1c43      	adds	r3, r0, #1
 80062c6:	d102      	bne.n	80062ce <_sbrk_r+0x1a>
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	b103      	cbz	r3, 80062ce <_sbrk_r+0x1a>
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	bd38      	pop	{r3, r4, r5, pc}
 80062d0:	20004a88 	.word	0x20004a88

080062d4 <__sread>:
 80062d4:	b510      	push	{r4, lr}
 80062d6:	460c      	mov	r4, r1
 80062d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062dc:	f000 f8a0 	bl	8006420 <_read_r>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	bfab      	itete	ge
 80062e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062e6:	89a3      	ldrhlt	r3, [r4, #12]
 80062e8:	181b      	addge	r3, r3, r0
 80062ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062ee:	bfac      	ite	ge
 80062f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80062f2:	81a3      	strhlt	r3, [r4, #12]
 80062f4:	bd10      	pop	{r4, pc}

080062f6 <__swrite>:
 80062f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fa:	461f      	mov	r7, r3
 80062fc:	898b      	ldrh	r3, [r1, #12]
 80062fe:	05db      	lsls	r3, r3, #23
 8006300:	4605      	mov	r5, r0
 8006302:	460c      	mov	r4, r1
 8006304:	4616      	mov	r6, r2
 8006306:	d505      	bpl.n	8006314 <__swrite+0x1e>
 8006308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800630c:	2302      	movs	r3, #2
 800630e:	2200      	movs	r2, #0
 8006310:	f000 f868 	bl	80063e4 <_lseek_r>
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800631a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800631e:	81a3      	strh	r3, [r4, #12]
 8006320:	4632      	mov	r2, r6
 8006322:	463b      	mov	r3, r7
 8006324:	4628      	mov	r0, r5
 8006326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800632a:	f000 b817 	b.w	800635c <_write_r>

0800632e <__sseek>:
 800632e:	b510      	push	{r4, lr}
 8006330:	460c      	mov	r4, r1
 8006332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006336:	f000 f855 	bl	80063e4 <_lseek_r>
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	89a3      	ldrh	r3, [r4, #12]
 800633e:	bf15      	itete	ne
 8006340:	6560      	strne	r0, [r4, #84]	; 0x54
 8006342:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006346:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800634a:	81a3      	strheq	r3, [r4, #12]
 800634c:	bf18      	it	ne
 800634e:	81a3      	strhne	r3, [r4, #12]
 8006350:	bd10      	pop	{r4, pc}

08006352 <__sclose>:
 8006352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006356:	f000 b813 	b.w	8006380 <_close_r>
	...

0800635c <_write_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4d07      	ldr	r5, [pc, #28]	; (800637c <_write_r+0x20>)
 8006360:	4604      	mov	r4, r0
 8006362:	4608      	mov	r0, r1
 8006364:	4611      	mov	r1, r2
 8006366:	2200      	movs	r2, #0
 8006368:	602a      	str	r2, [r5, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	f7fa fba9 	bl	8000ac2 <_write>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d102      	bne.n	800637a <_write_r+0x1e>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	b103      	cbz	r3, 800637a <_write_r+0x1e>
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	bd38      	pop	{r3, r4, r5, pc}
 800637c:	20004a88 	.word	0x20004a88

08006380 <_close_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4d06      	ldr	r5, [pc, #24]	; (800639c <_close_r+0x1c>)
 8006384:	2300      	movs	r3, #0
 8006386:	4604      	mov	r4, r0
 8006388:	4608      	mov	r0, r1
 800638a:	602b      	str	r3, [r5, #0]
 800638c:	f7fa fbb5 	bl	8000afa <_close>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d102      	bne.n	800639a <_close_r+0x1a>
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	b103      	cbz	r3, 800639a <_close_r+0x1a>
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	bd38      	pop	{r3, r4, r5, pc}
 800639c:	20004a88 	.word	0x20004a88

080063a0 <_fstat_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d07      	ldr	r5, [pc, #28]	; (80063c0 <_fstat_r+0x20>)
 80063a4:	2300      	movs	r3, #0
 80063a6:	4604      	mov	r4, r0
 80063a8:	4608      	mov	r0, r1
 80063aa:	4611      	mov	r1, r2
 80063ac:	602b      	str	r3, [r5, #0]
 80063ae:	f7fa fbb0 	bl	8000b12 <_fstat>
 80063b2:	1c43      	adds	r3, r0, #1
 80063b4:	d102      	bne.n	80063bc <_fstat_r+0x1c>
 80063b6:	682b      	ldr	r3, [r5, #0]
 80063b8:	b103      	cbz	r3, 80063bc <_fstat_r+0x1c>
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	bd38      	pop	{r3, r4, r5, pc}
 80063be:	bf00      	nop
 80063c0:	20004a88 	.word	0x20004a88

080063c4 <_isatty_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	4d06      	ldr	r5, [pc, #24]	; (80063e0 <_isatty_r+0x1c>)
 80063c8:	2300      	movs	r3, #0
 80063ca:	4604      	mov	r4, r0
 80063cc:	4608      	mov	r0, r1
 80063ce:	602b      	str	r3, [r5, #0]
 80063d0:	f7fa fbaf 	bl	8000b32 <_isatty>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d102      	bne.n	80063de <_isatty_r+0x1a>
 80063d8:	682b      	ldr	r3, [r5, #0]
 80063da:	b103      	cbz	r3, 80063de <_isatty_r+0x1a>
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	20004a88 	.word	0x20004a88

080063e4 <_lseek_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4d07      	ldr	r5, [pc, #28]	; (8006404 <_lseek_r+0x20>)
 80063e8:	4604      	mov	r4, r0
 80063ea:	4608      	mov	r0, r1
 80063ec:	4611      	mov	r1, r2
 80063ee:	2200      	movs	r2, #0
 80063f0:	602a      	str	r2, [r5, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	f7fa fba8 	bl	8000b48 <_lseek>
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d102      	bne.n	8006402 <_lseek_r+0x1e>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	b103      	cbz	r3, 8006402 <_lseek_r+0x1e>
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	bd38      	pop	{r3, r4, r5, pc}
 8006404:	20004a88 	.word	0x20004a88

08006408 <__malloc_lock>:
 8006408:	4801      	ldr	r0, [pc, #4]	; (8006410 <__malloc_lock+0x8>)
 800640a:	f7ff bb1d 	b.w	8005a48 <__retarget_lock_acquire_recursive>
 800640e:	bf00      	nop
 8006410:	20004a7c 	.word	0x20004a7c

08006414 <__malloc_unlock>:
 8006414:	4801      	ldr	r0, [pc, #4]	; (800641c <__malloc_unlock+0x8>)
 8006416:	f7ff bb18 	b.w	8005a4a <__retarget_lock_release_recursive>
 800641a:	bf00      	nop
 800641c:	20004a7c 	.word	0x20004a7c

08006420 <_read_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	4d07      	ldr	r5, [pc, #28]	; (8006440 <_read_r+0x20>)
 8006424:	4604      	mov	r4, r0
 8006426:	4608      	mov	r0, r1
 8006428:	4611      	mov	r1, r2
 800642a:	2200      	movs	r2, #0
 800642c:	602a      	str	r2, [r5, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	f7fa fb2a 	bl	8000a88 <_read>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_read_r+0x1e>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	b103      	cbz	r3, 800643e <_read_r+0x1e>
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	20004a88 	.word	0x20004a88

08006444 <_init>:
 8006444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006446:	bf00      	nop
 8006448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644a:	bc08      	pop	{r3}
 800644c:	469e      	mov	lr, r3
 800644e:	4770      	bx	lr

08006450 <_fini>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	bf00      	nop
 8006454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006456:	bc08      	pop	{r3}
 8006458:	469e      	mov	lr, r3
 800645a:	4770      	bx	lr
