
10_KillingTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005128  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005368  08005368  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005370  08005370  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005374  08005374  00015374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a1c  20000010  08005388  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a2c  08005388  00024a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ce4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000311e  00000000  00000000  00037d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0003ae48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  0003c260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003dec  00000000  00000000  0003d560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162e9  00000000  00000000  0004134c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db192  00000000  00000000  00057635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001327c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f8  00000000  00000000  00132818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080052e0 	.word	0x080052e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	080052e0 	.word	0x080052e0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
uint32_t execution_monitor;
uint32_t resume_monitor;
bool is_killed = false;

int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af02      	add	r7, sp, #8

  HAL_Init();
 800051a:	f000 fb15 	bl	8000b48 <HAL_Init>
  SystemClock_Config();
 800051e:	f000 f837 	bl	8000590 <SystemClock_Config>
  MX_GPIO_Init();
 8000522:	f000 f8cd 	bl	80006c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000526:	f000 f8a1 	bl	800066c <MX_USART2_UART_Init>

  xTaskCreate(vBlueLedControllerTask,
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <main+0x58>)
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2301      	movs	r3, #1
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2300      	movs	r3, #0
 8000534:	2264      	movs	r2, #100	; 0x64
 8000536:	490e      	ldr	r1, [pc, #56]	; (8000570 <main+0x5c>)
 8000538:	480e      	ldr	r0, [pc, #56]	; (8000574 <main+0x60>)
 800053a:	f002 ffa2 	bl	8003482 <xTaskCreate>
			  100,
			  NULL,
			  1,
			  &blue_handle);

  xTaskCreate(vRedLedControllerTask,
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <main+0x64>)
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2301      	movs	r3, #1
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2300      	movs	r3, #0
 8000548:	2264      	movs	r2, #100	; 0x64
 800054a:	490c      	ldr	r1, [pc, #48]	; (800057c <main+0x68>)
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <main+0x6c>)
 800054e:	f002 ff98 	bl	8003482 <xTaskCreate>
			  100,
			  NULL,
			  1,
			  &red_handle);

  xTaskCreate(vGreenLedControllerTask,
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <main+0x70>)
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2264      	movs	r2, #100	; 0x64
 800055e:	490a      	ldr	r1, [pc, #40]	; (8000588 <main+0x74>)
 8000560:	480a      	ldr	r0, [pc, #40]	; (800058c <main+0x78>)
 8000562:	f002 ff8e 	bl	8003482 <xTaskCreate>
			  100,
			  NULL,
			  1,
			  &green_handle);

  vTaskStartScheduler();
 8000566:	f003 f9d3 	bl	8003910 <vTaskStartScheduler>

  while (1)
 800056a:	e7fe      	b.n	800056a <main+0x56>
 800056c:	2000007c 	.word	0x2000007c
 8000570:	080052f8 	.word	0x080052f8
 8000574:	0800079d 	.word	0x0800079d
 8000578:	20000080 	.word	0x20000080
 800057c:	0800530c 	.word	0x0800530c
 8000580:	080007cd 	.word	0x080007cd
 8000584:	20000084 	.word	0x20000084
 8000588:	08005320 	.word	0x08005320
 800058c:	08000829 	.word	0x08000829

08000590 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2234      	movs	r2, #52	; 0x34
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 fe96 	bl	80052d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <SystemClock_Config+0xd4>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a29      	ldr	r2, [pc, #164]	; (8000664 <SystemClock_Config+0xd4>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <SystemClock_Config+0xd4>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <SystemClock_Config+0xd8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005dc:	4a22      	ldr	r2, [pc, #136]	; (8000668 <SystemClock_Config+0xd8>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <SystemClock_Config+0xd8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000604:	2310      	movs	r3, #16
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000608:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800060c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060e:	2304      	movs	r3, #4
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000612:	2302      	movs	r3, #2
 8000614:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4618      	mov	r0, r3
 8000620:	f001 f8e0 	bl	80017e4 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800062a:	f000 f945 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2102      	movs	r1, #2
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fd4e 	bl	80010ec <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000656:	f000 f92f 	bl	80008b8 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_USART2_UART_Init+0x50>)
 8000674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 80006a4:	f001 fdea 	bl	800227c <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ae:	f000 f903 	bl	80008b8 <Error_Handler>
  }

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000002c 	.word	0x2000002c
 80006bc:	40004400 	.word	0x40004400

080006c0 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a2c      	ldr	r2, [pc, #176]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a25      	ldr	r2, [pc, #148]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a17      	ldr	r2, [pc, #92]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2120      	movs	r1, #32
 800074a:	4812      	ldr	r0, [pc, #72]	; (8000794 <MX_GPIO_Init+0xd4>)
 800074c:	f000 fcb4 	bl	80010b8 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = B1_Pin;
 8000750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000756:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_GPIO_Init+0xd8>)
 8000768:	f000 fb12 	bl	8000d90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD2_Pin;
 800076c:	2320      	movs	r3, #32
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000784:	f000 fb04 	bl	8000d90 <HAL_GPIO_Init>

}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	; 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40020000 	.word	0x40020000
 8000798:	40020800 	.word	0x40020800

0800079c <vBlueLedControllerTask>:

void vBlueLedControllerTask(void *pvParameters)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		BlueTaskProfiler++;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <vBlueLedControllerTask+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3301      	adds	r3, #1
 80007aa:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <vBlueLedControllerTask+0x28>)
 80007ac:	6013      	str	r3, [r2, #0]
		for(i = 0; i < 100000; i++){}
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e002      	b.n	80007ba <vBlueLedControllerTask+0x1e>
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	3301      	adds	r3, #1
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	4a02      	ldr	r2, [pc, #8]	; (80007c8 <vBlueLedControllerTask+0x2c>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	ddf8      	ble.n	80007b4 <vBlueLedControllerTask+0x18>
		BlueTaskProfiler++;
 80007c2:	e7ef      	b.n	80007a4 <vBlueLedControllerTask+0x8>
 80007c4:	20000070 	.word	0x20000070
 80007c8:	0001869f 	.word	0x0001869f

080007cc <vRedLedControllerTask>:
	}
}

void vRedLedControllerTask(void *pvParameters)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		RedTaskProfiler++;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <vRedLedControllerTask+0x4c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <vRedLedControllerTask+0x4c>)
 80007dc:	6013      	str	r3, [r2, #0]
		for(i = 0; i < 100000; i++){}
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	e002      	b.n	80007ea <vRedLedControllerTask+0x1e>
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3301      	adds	r3, #1
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	4a0b      	ldr	r2, [pc, #44]	; (800081c <vRedLedControllerTask+0x50>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	ddf8      	ble.n	80007e4 <vRedLedControllerTask+0x18>

		execution_monitor++;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <vRedLedControllerTask+0x54>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	4a09      	ldr	r2, [pc, #36]	; (8000820 <vRedLedControllerTask+0x54>)
 80007fa:	6013      	str	r3, [r2, #0]

		if(execution_monitor >= 50)
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <vRedLedControllerTask+0x54>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b31      	cmp	r3, #49	; 0x31
 8000802:	d9e7      	bls.n	80007d4 <vRedLedControllerTask+0x8>
		{
			is_killed = true;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <vRedLedControllerTask+0x58>)
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
			execution_monitor = 0;
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <vRedLedControllerTask+0x54>)
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
			vTaskDelete(NULL);
 8000810:	2000      	movs	r0, #0
 8000812:	f002 ff7b 	bl	800370c <vTaskDelete>
		RedTaskProfiler++;
 8000816:	e7dd      	b.n	80007d4 <vRedLedControllerTask+0x8>
 8000818:	20000074 	.word	0x20000074
 800081c:	0001869f 	.word	0x0001869f
 8000820:	20000088 	.word	0x20000088
 8000824:	20000090 	.word	0x20000090

08000828 <vGreenLedControllerTask>:
		}
	}
}

void vGreenLedControllerTask(void *pvParameters)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		GreenTaskProfiler++;
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <vGreenLedControllerTask+0x58>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <vGreenLedControllerTask+0x58>)
 8000838:	6013      	str	r3, [r2, #0]
		for(i = 0; i < 100000; i++){}
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	e002      	b.n	8000846 <vGreenLedControllerTask+0x1e>
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	3301      	adds	r3, #1
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <vGreenLedControllerTask+0x5c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	ddf8      	ble.n	8000840 <vGreenLedControllerTask+0x18>

		if(is_killed)
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <vGreenLedControllerTask+0x60>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0ec      	beq.n	8000830 <vGreenLedControllerTask+0x8>
		{
			resume_monitor++;
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <vGreenLedControllerTask+0x64>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	4a0b      	ldr	r2, [pc, #44]	; (800088c <vGreenLedControllerTask+0x64>)
 800085e:	6013      	str	r3, [r2, #0]
			if(resume_monitor >= 30)
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <vGreenLedControllerTask+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b1d      	cmp	r3, #29
 8000866:	d9e3      	bls.n	8000830 <vGreenLedControllerTask+0x8>
			{
				vTaskResume(red_handle);
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <vGreenLedControllerTask+0x68>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f002 fff1 	bl	8003854 <vTaskResume>
				resume_monitor = 0;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <vGreenLedControllerTask+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
				is_killed = false;
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <vGreenLedControllerTask+0x60>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
		GreenTaskProfiler++;
 800087e:	e7d7      	b.n	8000830 <vGreenLedControllerTask+0x8>
 8000880:	20000078 	.word	0x20000078
 8000884:	0001869f 	.word	0x0001869f
 8000888:	20000090 	.word	0x20000090
 800088c:	2000008c 	.word	0x2000008c
 8000890:	20000080 	.word	0x20000080

08000894 <HAL_TIM_PeriodElapsedCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
	return ch;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d101      	bne.n	80008aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a6:	f000 f971 	bl	8000b8c <HAL_IncTick>
  }

}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40010000 	.word	0x40010000

080008b8 <Error_Handler>:

void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  __disable_irq();
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <Error_Handler+0x8>
	...

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_MspInit+0x54>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a11      	ldr	r2, [pc, #68]	; (8000918 <HAL_MspInit+0x54>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_MspInit+0x54>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_MspInit+0x54>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <HAL_MspInit+0x54>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_MspInit+0x54>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	210f      	movs	r1, #15
 8000906:	f06f 0001 	mvn.w	r0, #1
 800090a:	f000 fa17 	bl	8000d3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <HAL_UART_MspInit+0x84>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12b      	bne.n	8000996 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_UART_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000976:	230c      	movs	r3, #12
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000986:	2307      	movs	r3, #7
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <HAL_UART_MspInit+0x8c>)
 8000992:	f000 f9fd 	bl	8000d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	; 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40004400 	.word	0x40004400
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000

080009ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08c      	sub	sp, #48	; 0x30
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <HAL_InitTick+0xd0>)
 80009c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c4:	4a2d      	ldr	r2, [pc, #180]	; (8000a7c <HAL_InitTick+0xd0>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	6453      	str	r3, [r2, #68]	; 0x44
 80009cc:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <HAL_InitTick+0xd0>)
 80009ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d8:	f107 020c 	add.w	r2, r7, #12
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	4611      	mov	r1, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fc9c 	bl	8001320 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009e8:	f000 fc86 	bl	80012f8 <HAL_RCC_GetPCLK2Freq>
 80009ec:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f0:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <HAL_InitTick+0xd4>)
 80009f2:	fba2 2303 	umull	r2, r3, r2, r3
 80009f6:	0c9b      	lsrs	r3, r3, #18
 80009f8:	3b01      	subs	r3, #1
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009fc:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <HAL_InitTick+0xd8>)
 80009fe:	4a22      	ldr	r2, [pc, #136]	; (8000a88 <HAL_InitTick+0xdc>)
 8000a00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <HAL_InitTick+0xd8>)
 8000a04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <HAL_InitTick+0xd8>)
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_InitTick+0xd8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <HAL_InitTick+0xd8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <HAL_InitTick+0xd8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a22:	4818      	ldr	r0, [pc, #96]	; (8000a84 <HAL_InitTick+0xd8>)
 8000a24:	f001 f97c 	bl	8001d20 <HAL_TIM_Base_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d11b      	bne.n	8000a6e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a36:	4813      	ldr	r0, [pc, #76]	; (8000a84 <HAL_InitTick+0xd8>)
 8000a38:	f001 f9cc 	bl	8001dd4 <HAL_TIM_Base_Start_IT>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d111      	bne.n	8000a6e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a4a:	2019      	movs	r0, #25
 8000a4c:	f000 f992 	bl	8000d74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b0f      	cmp	r3, #15
 8000a54:	d808      	bhi.n	8000a68 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a56:	2200      	movs	r2, #0
 8000a58:	6879      	ldr	r1, [r7, #4]
 8000a5a:	2019      	movs	r0, #25
 8000a5c:	f000 f96e 	bl	8000d3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_InitTick+0xe0>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	e002      	b.n	8000a6e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3730      	adds	r7, #48	; 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	431bde83 	.word	0x431bde83
 8000a84:	20000094 	.word	0x20000094
 8000a88:	40010000 	.word	0x40010000
 8000a8c:	20000004 	.word	0x20000004

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ac2:	f001 f9f7 	bl	8001eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000094 	.word	0x20000094

08000ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000afa:	490e      	ldr	r1, [pc, #56]	; (8000b34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000afc:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b10:	4c0b      	ldr	r4, [pc, #44]	; (8000b40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b1e:	f7ff ffd7 	bl	8000ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f004 fba3 	bl	800526c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b26:	f7ff fcf5 	bl	8000514 <main>
  bx  lr    
 8000b2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b38:	08005378 	.word	0x08005378
  ldr r2, =_sbss
 8000b3c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b40:	20004a2c 	.word	0x20004a2c

08000b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <HAL_Init+0x40>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_Init+0x40>)
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_Init+0x40>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f8d8 	bl	8000d26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	200f      	movs	r0, #15
 8000b78:	f7ff ff18 	bl	80009ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fea2 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	200000dc 	.word	0x200000dc

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200000dc 	.word	0x200000dc

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0b      	blt.n	8000c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	4907      	ldr	r1, [pc, #28]	; (8000c68 <__NVIC_EnableIRQ+0x38>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	2001      	movs	r0, #1
 8000c52:	fa00 f202 	lsl.w	r2, r0, r2
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	; 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ff4c 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4e:	f7ff ff61 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	68b9      	ldr	r1, [r7, #8]
 8000d58:	6978      	ldr	r0, [r7, #20]
 8000d5a:	f7ff ffb1 	bl	8000cc0 <NVIC_EncodePriority>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff80 	bl	8000c6c <__NVIC_SetPriority>
}
 8000d6c:	bf00      	nop
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff54 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	e165      	b.n	8001078 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f040 8154 	bne.w	8001072 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d005      	beq.n	8000de2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d130      	bne.n	8000e44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	091b      	lsrs	r3, r3, #4
 8000e2e:	f003 0201 	and.w	r2, r3, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d017      	beq.n	8000e80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d123      	bne.n	8000ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691a      	ldr	r2, [r3, #16]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3208      	adds	r2, #8
 8000ece:	69b9      	ldr	r1, [r7, #24]
 8000ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0203 	and.w	r2, r3, #3
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80ae 	beq.w	8001072 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b5d      	ldr	r3, [pc, #372]	; (8001090 <HAL_GPIO_Init+0x300>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a5c      	ldr	r2, [pc, #368]	; (8001090 <HAL_GPIO_Init+0x300>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b5a      	ldr	r3, [pc, #360]	; (8001090 <HAL_GPIO_Init+0x300>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f32:	4a58      	ldr	r2, [pc, #352]	; (8001094 <HAL_GPIO_Init+0x304>)
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	220f      	movs	r2, #15
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4f      	ldr	r2, [pc, #316]	; (8001098 <HAL_GPIO_Init+0x308>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d025      	beq.n	8000faa <HAL_GPIO_Init+0x21a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4e      	ldr	r2, [pc, #312]	; (800109c <HAL_GPIO_Init+0x30c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d01f      	beq.n	8000fa6 <HAL_GPIO_Init+0x216>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4d      	ldr	r2, [pc, #308]	; (80010a0 <HAL_GPIO_Init+0x310>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d019      	beq.n	8000fa2 <HAL_GPIO_Init+0x212>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4c      	ldr	r2, [pc, #304]	; (80010a4 <HAL_GPIO_Init+0x314>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_GPIO_Init+0x20e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4b      	ldr	r2, [pc, #300]	; (80010a8 <HAL_GPIO_Init+0x318>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d00d      	beq.n	8000f9a <HAL_GPIO_Init+0x20a>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4a      	ldr	r2, [pc, #296]	; (80010ac <HAL_GPIO_Init+0x31c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d007      	beq.n	8000f96 <HAL_GPIO_Init+0x206>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a49      	ldr	r2, [pc, #292]	; (80010b0 <HAL_GPIO_Init+0x320>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d101      	bne.n	8000f92 <HAL_GPIO_Init+0x202>
 8000f8e:	2306      	movs	r3, #6
 8000f90:	e00c      	b.n	8000fac <HAL_GPIO_Init+0x21c>
 8000f92:	2307      	movs	r3, #7
 8000f94:	e00a      	b.n	8000fac <HAL_GPIO_Init+0x21c>
 8000f96:	2305      	movs	r3, #5
 8000f98:	e008      	b.n	8000fac <HAL_GPIO_Init+0x21c>
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	e006      	b.n	8000fac <HAL_GPIO_Init+0x21c>
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e004      	b.n	8000fac <HAL_GPIO_Init+0x21c>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e002      	b.n	8000fac <HAL_GPIO_Init+0x21c>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <HAL_GPIO_Init+0x21c>
 8000faa:	2300      	movs	r3, #0
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	f002 0203 	and.w	r2, r2, #3
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	4093      	lsls	r3, r2
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fbc:	4935      	ldr	r1, [pc, #212]	; (8001094 <HAL_GPIO_Init+0x304>)
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fca:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <HAL_GPIO_Init+0x324>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fee:	4a31      	ldr	r2, [pc, #196]	; (80010b4 <HAL_GPIO_Init+0x324>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <HAL_GPIO_Init+0x324>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001018:	4a26      	ldr	r2, [pc, #152]	; (80010b4 <HAL_GPIO_Init+0x324>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <HAL_GPIO_Init+0x324>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001042:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <HAL_GPIO_Init+0x324>)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <HAL_GPIO_Init+0x324>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800106c:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <HAL_GPIO_Init+0x324>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3301      	adds	r3, #1
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	2b0f      	cmp	r3, #15
 800107c:	f67f ae96 	bls.w	8000dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40013800 	.word	0x40013800
 8001098:	40020000 	.word	0x40020000
 800109c:	40020400 	.word	0x40020400
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40021400 	.word	0x40021400
 80010b0:	40021800 	.word	0x40021800
 80010b4:	40013c00 	.word	0x40013c00

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d4:	e003      	b.n	80010de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	619a      	str	r2, [r3, #24]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e0cc      	b.n	800129a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001100:	4b68      	ldr	r3, [pc, #416]	; (80012a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 030f 	and.w	r3, r3, #15
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	429a      	cmp	r2, r3
 800110c:	d90c      	bls.n	8001128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110e:	4b65      	ldr	r3, [pc, #404]	; (80012a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001116:	4b63      	ldr	r3, [pc, #396]	; (80012a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d001      	beq.n	8001128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e0b8      	b.n	800129a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d020      	beq.n	8001176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001140:	4b59      	ldr	r3, [pc, #356]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	4a58      	ldr	r2, [pc, #352]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800114a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001158:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	4a52      	ldr	r2, [pc, #328]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001164:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	494d      	ldr	r1, [pc, #308]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	4313      	orrs	r3, r2
 8001174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	d044      	beq.n	800120c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d107      	bne.n	800119a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118a:	4b47      	ldr	r3, [pc, #284]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d119      	bne.n	80011ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e07f      	b.n	800129a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d003      	beq.n	80011aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d107      	bne.n	80011ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011aa:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d109      	bne.n	80011ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e06f      	b.n	800129a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ba:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e067      	b.n	800129a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ca:	4b37      	ldr	r3, [pc, #220]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f023 0203 	bic.w	r2, r3, #3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4934      	ldr	r1, [pc, #208]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011dc:	f7ff fcea 	bl	8000bb4 <HAL_GetTick>
 80011e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e2:	e00a      	b.n	80011fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e4:	f7ff fce6 	bl	8000bb4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e04f      	b.n	800129a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fa:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 020c 	and.w	r2, r3, #12
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	429a      	cmp	r2, r3
 800120a:	d1eb      	bne.n	80011e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <HAL_RCC_ClockConfig+0x1b8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 030f 	and.w	r3, r3, #15
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d20c      	bcs.n	8001234 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121a:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <HAL_RCC_ClockConfig+0x1b8>)
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d001      	beq.n	8001234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e032      	b.n	800129a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	d008      	beq.n	8001252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	4916      	ldr	r1, [pc, #88]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	4313      	orrs	r3, r2
 8001250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d009      	beq.n	8001272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	490e      	ldr	r1, [pc, #56]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 800126e:	4313      	orrs	r3, r2
 8001270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001272:	f000 f887 	bl	8001384 <HAL_RCC_GetSysClockFreq>
 8001276:	4602      	mov	r2, r0
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	490a      	ldr	r1, [pc, #40]	; (80012ac <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	5ccb      	ldrb	r3, [r1, r3]
 8001286:	fa22 f303 	lsr.w	r3, r2, r3
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 800128c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fb8a 	bl	80009ac <HAL_InitTick>

  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023c00 	.word	0x40023c00
 80012a8:	40023800 	.word	0x40023800
 80012ac:	08005350 	.word	0x08005350
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000004 	.word	0x20000004

080012b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_RCC_GetHCLKFreq+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000000 	.word	0x20000000

080012d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012d4:	f7ff fff0 	bl	80012b8 <HAL_RCC_GetHCLKFreq>
 80012d8:	4602      	mov	r2, r0
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	0a9b      	lsrs	r3, r3, #10
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	4903      	ldr	r1, [pc, #12]	; (80012f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012e6:	5ccb      	ldrb	r3, [r1, r3]
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40023800 	.word	0x40023800
 80012f4:	08005360 	.word	0x08005360

080012f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012fc:	f7ff ffdc 	bl	80012b8 <HAL_RCC_GetHCLKFreq>
 8001300:	4602      	mov	r2, r0
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	0b5b      	lsrs	r3, r3, #13
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	4903      	ldr	r1, [pc, #12]	; (800131c <HAL_RCC_GetPCLK2Freq+0x24>)
 800130e:	5ccb      	ldrb	r3, [r1, r3]
 8001310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001314:	4618      	mov	r0, r3
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	08005360 	.word	0x08005360

08001320 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	220f      	movs	r2, #15
 800132e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_RCC_GetClockConfig+0x5c>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 0203 	and.w	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_RCC_GetClockConfig+0x5c>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_RCC_GetClockConfig+0x5c>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_RCC_GetClockConfig+0x5c>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	08db      	lsrs	r3, r3, #3
 800135a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <HAL_RCC_GetClockConfig+0x60>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 020f 	and.w	r2, r3, #15
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	601a      	str	r2, [r3, #0]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40023c00 	.word	0x40023c00

08001384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001388:	b0ae      	sub	sp, #184	; 0xb8
 800138a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013aa:	4bcb      	ldr	r3, [pc, #812]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	f200 8206 	bhi.w	80017c4 <HAL_RCC_GetSysClockFreq+0x440>
 80013b8:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	080013f5 	.word	0x080013f5
 80013c4:	080017c5 	.word	0x080017c5
 80013c8:	080017c5 	.word	0x080017c5
 80013cc:	080017c5 	.word	0x080017c5
 80013d0:	080013fd 	.word	0x080013fd
 80013d4:	080017c5 	.word	0x080017c5
 80013d8:	080017c5 	.word	0x080017c5
 80013dc:	080017c5 	.word	0x080017c5
 80013e0:	08001405 	.word	0x08001405
 80013e4:	080017c5 	.word	0x080017c5
 80013e8:	080017c5 	.word	0x080017c5
 80013ec:	080017c5 	.word	0x080017c5
 80013f0:	080015f5 	.word	0x080015f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013f4:	4bb9      	ldr	r3, [pc, #740]	; (80016dc <HAL_RCC_GetSysClockFreq+0x358>)
 80013f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80013fa:	e1e7      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013fc:	4bb8      	ldr	r3, [pc, #736]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001402:	e1e3      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001404:	4bb4      	ldr	r3, [pc, #720]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800140c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001410:	4bb1      	ldr	r3, [pc, #708]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d071      	beq.n	8001500 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800141c:	4bae      	ldr	r3, [pc, #696]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	099b      	lsrs	r3, r3, #6
 8001422:	2200      	movs	r2, #0
 8001424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001428:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800142c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001434:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800143e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001442:	4622      	mov	r2, r4
 8001444:	462b      	mov	r3, r5
 8001446:	f04f 0000 	mov.w	r0, #0
 800144a:	f04f 0100 	mov.w	r1, #0
 800144e:	0159      	lsls	r1, r3, #5
 8001450:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001454:	0150      	lsls	r0, r2, #5
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4621      	mov	r1, r4
 800145c:	1a51      	subs	r1, r2, r1
 800145e:	6439      	str	r1, [r7, #64]	; 0x40
 8001460:	4629      	mov	r1, r5
 8001462:	eb63 0301 	sbc.w	r3, r3, r1
 8001466:	647b      	str	r3, [r7, #68]	; 0x44
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001474:	4649      	mov	r1, r9
 8001476:	018b      	lsls	r3, r1, #6
 8001478:	4641      	mov	r1, r8
 800147a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800147e:	4641      	mov	r1, r8
 8001480:	018a      	lsls	r2, r1, #6
 8001482:	4641      	mov	r1, r8
 8001484:	1a51      	subs	r1, r2, r1
 8001486:	63b9      	str	r1, [r7, #56]	; 0x38
 8001488:	4649      	mov	r1, r9
 800148a:	eb63 0301 	sbc.w	r3, r3, r1
 800148e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800149c:	4649      	mov	r1, r9
 800149e:	00cb      	lsls	r3, r1, #3
 80014a0:	4641      	mov	r1, r8
 80014a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014a6:	4641      	mov	r1, r8
 80014a8:	00ca      	lsls	r2, r1, #3
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	4603      	mov	r3, r0
 80014b0:	4622      	mov	r2, r4
 80014b2:	189b      	adds	r3, r3, r2
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
 80014b6:	462b      	mov	r3, r5
 80014b8:	460a      	mov	r2, r1
 80014ba:	eb42 0303 	adc.w	r3, r2, r3
 80014be:	637b      	str	r3, [r7, #52]	; 0x34
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014cc:	4629      	mov	r1, r5
 80014ce:	024b      	lsls	r3, r1, #9
 80014d0:	4621      	mov	r1, r4
 80014d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014d6:	4621      	mov	r1, r4
 80014d8:	024a      	lsls	r2, r1, #9
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014e2:	2200      	movs	r2, #0
 80014e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80014f0:	f7fe fe8e 	bl	8000210 <__aeabi_uldivmod>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4613      	mov	r3, r2
 80014fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014fe:	e067      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001500:	4b75      	ldr	r3, [pc, #468]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	099b      	lsrs	r3, r3, #6
 8001506:	2200      	movs	r2, #0
 8001508:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800150c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001510:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001518:	67bb      	str	r3, [r7, #120]	; 0x78
 800151a:	2300      	movs	r3, #0
 800151c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800151e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001522:	4622      	mov	r2, r4
 8001524:	462b      	mov	r3, r5
 8001526:	f04f 0000 	mov.w	r0, #0
 800152a:	f04f 0100 	mov.w	r1, #0
 800152e:	0159      	lsls	r1, r3, #5
 8001530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001534:	0150      	lsls	r0, r2, #5
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4621      	mov	r1, r4
 800153c:	1a51      	subs	r1, r2, r1
 800153e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001540:	4629      	mov	r1, r5
 8001542:	eb63 0301 	sbc.w	r3, r3, r1
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001554:	4649      	mov	r1, r9
 8001556:	018b      	lsls	r3, r1, #6
 8001558:	4641      	mov	r1, r8
 800155a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800155e:	4641      	mov	r1, r8
 8001560:	018a      	lsls	r2, r1, #6
 8001562:	4641      	mov	r1, r8
 8001564:	ebb2 0a01 	subs.w	sl, r2, r1
 8001568:	4649      	mov	r1, r9
 800156a:	eb63 0b01 	sbc.w	fp, r3, r1
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800157a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800157e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001582:	4692      	mov	sl, r2
 8001584:	469b      	mov	fp, r3
 8001586:	4623      	mov	r3, r4
 8001588:	eb1a 0303 	adds.w	r3, sl, r3
 800158c:	623b      	str	r3, [r7, #32]
 800158e:	462b      	mov	r3, r5
 8001590:	eb4b 0303 	adc.w	r3, fp, r3
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015a2:	4629      	mov	r1, r5
 80015a4:	028b      	lsls	r3, r1, #10
 80015a6:	4621      	mov	r1, r4
 80015a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015ac:	4621      	mov	r1, r4
 80015ae:	028a      	lsls	r2, r1, #10
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015b8:	2200      	movs	r2, #0
 80015ba:	673b      	str	r3, [r7, #112]	; 0x70
 80015bc:	677a      	str	r2, [r7, #116]	; 0x74
 80015be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015c2:	f7fe fe25 	bl	8000210 <__aeabi_uldivmod>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4613      	mov	r3, r2
 80015cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015d0:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	0c1b      	lsrs	r3, r3, #16
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	3301      	adds	r3, #1
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80015e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80015e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015f2:	e0eb      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015f4:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001600:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d06b      	beq.n	80016e4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800160c:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	099b      	lsrs	r3, r3, #6
 8001612:	2200      	movs	r2, #0
 8001614:	66bb      	str	r3, [r7, #104]	; 0x68
 8001616:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800161a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800161e:	663b      	str	r3, [r7, #96]	; 0x60
 8001620:	2300      	movs	r3, #0
 8001622:	667b      	str	r3, [r7, #100]	; 0x64
 8001624:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001628:	4622      	mov	r2, r4
 800162a:	462b      	mov	r3, r5
 800162c:	f04f 0000 	mov.w	r0, #0
 8001630:	f04f 0100 	mov.w	r1, #0
 8001634:	0159      	lsls	r1, r3, #5
 8001636:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800163a:	0150      	lsls	r0, r2, #5
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4621      	mov	r1, r4
 8001642:	1a51      	subs	r1, r2, r1
 8001644:	61b9      	str	r1, [r7, #24]
 8001646:	4629      	mov	r1, r5
 8001648:	eb63 0301 	sbc.w	r3, r3, r1
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800165a:	4659      	mov	r1, fp
 800165c:	018b      	lsls	r3, r1, #6
 800165e:	4651      	mov	r1, sl
 8001660:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001664:	4651      	mov	r1, sl
 8001666:	018a      	lsls	r2, r1, #6
 8001668:	4651      	mov	r1, sl
 800166a:	ebb2 0801 	subs.w	r8, r2, r1
 800166e:	4659      	mov	r1, fp
 8001670:	eb63 0901 	sbc.w	r9, r3, r1
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001680:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001684:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001688:	4690      	mov	r8, r2
 800168a:	4699      	mov	r9, r3
 800168c:	4623      	mov	r3, r4
 800168e:	eb18 0303 	adds.w	r3, r8, r3
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	462b      	mov	r3, r5
 8001696:	eb49 0303 	adc.w	r3, r9, r3
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016a8:	4629      	mov	r1, r5
 80016aa:	024b      	lsls	r3, r1, #9
 80016ac:	4621      	mov	r1, r4
 80016ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016b2:	4621      	mov	r1, r4
 80016b4:	024a      	lsls	r2, r1, #9
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016be:	2200      	movs	r2, #0
 80016c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80016c2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016c8:	f7fe fda2 	bl	8000210 <__aeabi_uldivmod>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4613      	mov	r3, r2
 80016d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016d6:	e065      	b.n	80017a4 <HAL_RCC_GetSysClockFreq+0x420>
 80016d8:	40023800 	.word	0x40023800
 80016dc:	00f42400 	.word	0x00f42400
 80016e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e4:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <HAL_RCC_GetSysClockFreq+0x458>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	099b      	lsrs	r3, r3, #6
 80016ea:	2200      	movs	r2, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	4611      	mov	r1, r2
 80016f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016f4:	653b      	str	r3, [r7, #80]	; 0x50
 80016f6:	2300      	movs	r3, #0
 80016f8:	657b      	str	r3, [r7, #84]	; 0x54
 80016fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80016fe:	4642      	mov	r2, r8
 8001700:	464b      	mov	r3, r9
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	f04f 0100 	mov.w	r1, #0
 800170a:	0159      	lsls	r1, r3, #5
 800170c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001710:	0150      	lsls	r0, r2, #5
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4641      	mov	r1, r8
 8001718:	1a51      	subs	r1, r2, r1
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	4649      	mov	r1, r9
 800171e:	eb63 0301 	sbc.w	r3, r3, r1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001730:	4659      	mov	r1, fp
 8001732:	018b      	lsls	r3, r1, #6
 8001734:	4651      	mov	r1, sl
 8001736:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800173a:	4651      	mov	r1, sl
 800173c:	018a      	lsls	r2, r1, #6
 800173e:	4651      	mov	r1, sl
 8001740:	1a54      	subs	r4, r2, r1
 8001742:	4659      	mov	r1, fp
 8001744:	eb63 0501 	sbc.w	r5, r3, r1
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	00eb      	lsls	r3, r5, #3
 8001752:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001756:	00e2      	lsls	r2, r4, #3
 8001758:	4614      	mov	r4, r2
 800175a:	461d      	mov	r5, r3
 800175c:	4643      	mov	r3, r8
 800175e:	18e3      	adds	r3, r4, r3
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	464b      	mov	r3, r9
 8001764:	eb45 0303 	adc.w	r3, r5, r3
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001776:	4629      	mov	r1, r5
 8001778:	028b      	lsls	r3, r1, #10
 800177a:	4621      	mov	r1, r4
 800177c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001780:	4621      	mov	r1, r4
 8001782:	028a      	lsls	r2, r1, #10
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800178c:	2200      	movs	r2, #0
 800178e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001790:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001792:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001796:	f7fe fd3b 	bl	8000210 <__aeabi_uldivmod>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4613      	mov	r3, r2
 80017a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_RCC_GetSysClockFreq+0x458>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	0f1b      	lsrs	r3, r3, #28
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80017b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80017be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017c2:	e003      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80017c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	37b8      	adds	r7, #184	; 0xb8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	00f42400 	.word	0x00f42400

080017e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e28d      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 8083 	beq.w	800190a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001804:	4b94      	ldr	r3, [pc, #592]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	2b04      	cmp	r3, #4
 800180e:	d019      	beq.n	8001844 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001810:	4b91      	ldr	r3, [pc, #580]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001818:	2b08      	cmp	r3, #8
 800181a:	d106      	bne.n	800182a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800181c:	4b8e      	ldr	r3, [pc, #568]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001828:	d00c      	beq.n	8001844 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800182a:	4b8b      	ldr	r3, [pc, #556]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001832:	2b0c      	cmp	r3, #12
 8001834:	d112      	bne.n	800185c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001836:	4b88      	ldr	r3, [pc, #544]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001842:	d10b      	bne.n	800185c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	4b84      	ldr	r3, [pc, #528]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d05b      	beq.n	8001908 <HAL_RCC_OscConfig+0x124>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d157      	bne.n	8001908 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e25a      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001864:	d106      	bne.n	8001874 <HAL_RCC_OscConfig+0x90>
 8001866:	4b7c      	ldr	r3, [pc, #496]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a7b      	ldr	r2, [pc, #492]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 800186c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e01d      	b.n	80018b0 <HAL_RCC_OscConfig+0xcc>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0xb4>
 800187e:	4b76      	ldr	r3, [pc, #472]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a75      	ldr	r2, [pc, #468]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 8001884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b73      	ldr	r3, [pc, #460]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a72      	ldr	r2, [pc, #456]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0xcc>
 8001898:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a6e      	ldr	r2, [pc, #440]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 800189e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b6c      	ldr	r3, [pc, #432]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a6b      	ldr	r2, [pc, #428]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 80018aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d013      	beq.n	80018e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff f97c 	bl	8000bb4 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff f978 	bl	8000bb4 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e21f      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	4b61      	ldr	r3, [pc, #388]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0xdc>
 80018de:	e014      	b.n	800190a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff f968 	bl	8000bb4 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff f964 	bl	8000bb4 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e20b      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	4b57      	ldr	r3, [pc, #348]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x104>
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d06f      	beq.n	80019f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001916:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b00      	cmp	r3, #0
 8001920:	d017      	beq.n	8001952 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001922:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800192a:	2b08      	cmp	r3, #8
 800192c:	d105      	bne.n	800193a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800192e:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00b      	beq.n	8001952 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001942:	2b0c      	cmp	r3, #12
 8001944:	d11c      	bne.n	8001980 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001946:	4b44      	ldr	r3, [pc, #272]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d116      	bne.n	8001980 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001952:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_RCC_OscConfig+0x186>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e1d3      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b3b      	ldr	r3, [pc, #236]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4937      	ldr	r1, [pc, #220]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	e03a      	b.n	80019f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d020      	beq.n	80019ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001988:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <HAL_RCC_OscConfig+0x278>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198e:	f7ff f911 	bl	8000bb4 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001996:	f7ff f90d 	bl	8000bb4 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e1b4      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4925      	ldr	r1, [pc, #148]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
 80019c8:	e015      	b.n	80019f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_RCC_OscConfig+0x278>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff f8f0 	bl	8000bb4 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d8:	f7ff f8ec 	bl	8000bb4 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e193      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d036      	beq.n	8001a70 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d016      	beq.n	8001a38 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a10:	f7ff f8d0 	bl	8000bb4 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff f8cc 	bl	8000bb4 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e173      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 8001a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x234>
 8001a36:	e01b      	b.n	8001a70 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3e:	f7ff f8b9 	bl	8000bb4 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	e00e      	b.n	8001a64 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a46:	f7ff f8b5 	bl	8000bb4 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d907      	bls.n	8001a64 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e15c      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	42470000 	.word	0x42470000
 8001a60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a64:	4b8a      	ldr	r3, [pc, #552]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1ea      	bne.n	8001a46 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 8097 	beq.w	8001bac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a82:	4b83      	ldr	r3, [pc, #524]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10f      	bne.n	8001aae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	4b7f      	ldr	r3, [pc, #508]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a7e      	ldr	r2, [pc, #504]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b7c      	ldr	r3, [pc, #496]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aae:	4b79      	ldr	r3, [pc, #484]	; (8001c94 <HAL_RCC_OscConfig+0x4b0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d118      	bne.n	8001aec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aba:	4b76      	ldr	r3, [pc, #472]	; (8001c94 <HAL_RCC_OscConfig+0x4b0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a75      	ldr	r2, [pc, #468]	; (8001c94 <HAL_RCC_OscConfig+0x4b0>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f875 	bl	8000bb4 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7ff f871 	bl	8000bb4 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e118      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	4b6c      	ldr	r3, [pc, #432]	; (8001c94 <HAL_RCC_OscConfig+0x4b0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x31e>
 8001af4:	4b66      	ldr	r3, [pc, #408]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af8:	4a65      	ldr	r2, [pc, #404]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6713      	str	r3, [r2, #112]	; 0x70
 8001b00:	e01c      	b.n	8001b3c <HAL_RCC_OscConfig+0x358>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b05      	cmp	r3, #5
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x340>
 8001b0a:	4b61      	ldr	r3, [pc, #388]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0e:	4a60      	ldr	r2, [pc, #384]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6713      	str	r3, [r2, #112]	; 0x70
 8001b16:	4b5e      	ldr	r3, [pc, #376]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1a:	4a5d      	ldr	r2, [pc, #372]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6713      	str	r3, [r2, #112]	; 0x70
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0x358>
 8001b24:	4b5a      	ldr	r3, [pc, #360]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b28:	4a59      	ldr	r2, [pc, #356]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001b2a:	f023 0301 	bic.w	r3, r3, #1
 8001b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b30:	4b57      	ldr	r3, [pc, #348]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b34:	4a56      	ldr	r2, [pc, #344]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001b36:	f023 0304 	bic.w	r3, r3, #4
 8001b3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d015      	beq.n	8001b70 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b44:	f7ff f836 	bl	8000bb4 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4a:	e00a      	b.n	8001b62 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4c:	f7ff f832 	bl	8000bb4 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e0d7      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b62:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0ee      	beq.n	8001b4c <HAL_RCC_OscConfig+0x368>
 8001b6e:	e014      	b.n	8001b9a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b70:	f7ff f820 	bl	8000bb4 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b76:	e00a      	b.n	8001b8e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b78:	f7ff f81c 	bl	8000bb4 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e0c1      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8e:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ee      	bne.n	8001b78 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b9a:	7dfb      	ldrb	r3, [r7, #23]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d105      	bne.n	8001bac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba0:	4b3b      	ldr	r3, [pc, #236]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	4a3a      	ldr	r2, [pc, #232]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001baa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 80ad 	beq.w	8001d10 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bb6:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d060      	beq.n	8001c84 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d145      	bne.n	8001c56 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bca:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <HAL_RCC_OscConfig+0x4b4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7fe fff0 	bl	8000bb4 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7fe ffec 	bl	8000bb4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e093      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bea:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69da      	ldr	r2, [r3, #28]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	019b      	lsls	r3, r3, #6
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	085b      	lsrs	r3, r3, #1
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	041b      	lsls	r3, r3, #16
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	061b      	lsls	r3, r3, #24
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	071b      	lsls	r3, r3, #28
 8001c22:	491b      	ldr	r1, [pc, #108]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_RCC_OscConfig+0x4b4>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2e:	f7fe ffc1 	bl	8000bb4 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c36:	f7fe ffbd 	bl	8000bb4 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e064      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x452>
 8001c54:	e05c      	b.n	8001d10 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_RCC_OscConfig+0x4b4>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7fe ffaa 	bl	8000bb4 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c64:	f7fe ffa6 	bl	8000bb4 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e04d      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_RCC_OscConfig+0x4ac>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x480>
 8001c82:	e045      	b.n	8001d10 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e040      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40007000 	.word	0x40007000
 8001c98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <HAL_RCC_OscConfig+0x538>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d030      	beq.n	8001d0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d129      	bne.n	8001d0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d122      	bne.n	8001d0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ccc:	4013      	ands	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d119      	bne.n	8001d0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	085b      	lsrs	r3, r3, #1
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d10f      	bne.n	8001d0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d107      	bne.n	8001d0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e041      	b.n	8001db6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d106      	bne.n	8001d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f839 	bl	8001dbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4610      	mov	r0, r2
 8001d60:	f000 f9d8 	bl	8002114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d001      	beq.n	8001dec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e04e      	b.n	8001e8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a23      	ldr	r2, [pc, #140]	; (8001e98 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d022      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e16:	d01d      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a1f      	ldr	r2, [pc, #124]	; (8001e9c <HAL_TIM_Base_Start_IT+0xc8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d018      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1e      	ldr	r2, [pc, #120]	; (8001ea0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00e      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ea8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d009      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a19      	ldr	r2, [pc, #100]	; (8001eac <HAL_TIM_Base_Start_IT+0xd8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d004      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x80>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d111      	bne.n	8001e78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d010      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0201 	orr.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e76:	e007      	b.n	8001e88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40010000 	.word	0x40010000
 8001e9c:	40000400 	.word	0x40000400
 8001ea0:	40000800 	.word	0x40000800
 8001ea4:	40000c00 	.word	0x40000c00
 8001ea8:	40010400 	.word	0x40010400
 8001eac:	40014000 	.word	0x40014000
 8001eb0:	40001800 	.word	0x40001800

08001eb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d122      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d11b      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0202 	mvn.w	r2, #2
 8001ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8ee 	bl	80020d8 <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8e0 	bl	80020c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f8f1 	bl	80020ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d122      	bne.n	8001f64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d11b      	bne.n	8001f64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0204 	mvn.w	r2, #4
 8001f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8c4 	bl	80020d8 <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f8b6 	bl	80020c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f8c7 	bl	80020ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d122      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d11b      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0208 	mvn.w	r2, #8
 8001f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f89a 	bl	80020d8 <HAL_TIM_IC_CaptureCallback>
 8001fa4:	e005      	b.n	8001fb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f88c 	bl	80020c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f89d 	bl	80020ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	d122      	bne.n	800200c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	2b10      	cmp	r3, #16
 8001fd2:	d11b      	bne.n	800200c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0210 	mvn.w	r2, #16
 8001fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f870 	bl	80020d8 <HAL_TIM_IC_CaptureCallback>
 8001ff8:	e005      	b.n	8002006 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f862 	bl	80020c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f873 	bl	80020ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b01      	cmp	r3, #1
 8002018:	d10e      	bne.n	8002038 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b01      	cmp	r3, #1
 8002026:	d107      	bne.n	8002038 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0201 	mvn.w	r2, #1
 8002030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7fe fc2e 	bl	8000894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002042:	2b80      	cmp	r3, #128	; 0x80
 8002044:	d10e      	bne.n	8002064 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002050:	2b80      	cmp	r3, #128	; 0x80
 8002052:	d107      	bne.n	8002064 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800205c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f902 	bl	8002268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206e:	2b40      	cmp	r3, #64	; 0x40
 8002070:	d10e      	bne.n	8002090 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207c:	2b40      	cmp	r3, #64	; 0x40
 800207e:	d107      	bne.n	8002090 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f838 	bl	8002100 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b20      	cmp	r3, #32
 800209c:	d10e      	bne.n	80020bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	d107      	bne.n	80020bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0220 	mvn.w	r2, #32
 80020b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f8cc 	bl	8002254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a40      	ldr	r2, [pc, #256]	; (8002228 <TIM_Base_SetConfig+0x114>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d013      	beq.n	8002154 <TIM_Base_SetConfig+0x40>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002132:	d00f      	beq.n	8002154 <TIM_Base_SetConfig+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3d      	ldr	r2, [pc, #244]	; (800222c <TIM_Base_SetConfig+0x118>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00b      	beq.n	8002154 <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a3c      	ldr	r2, [pc, #240]	; (8002230 <TIM_Base_SetConfig+0x11c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3b      	ldr	r2, [pc, #236]	; (8002234 <TIM_Base_SetConfig+0x120>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d003      	beq.n	8002154 <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a3a      	ldr	r2, [pc, #232]	; (8002238 <TIM_Base_SetConfig+0x124>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d108      	bne.n	8002166 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a2f      	ldr	r2, [pc, #188]	; (8002228 <TIM_Base_SetConfig+0x114>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02b      	beq.n	80021c6 <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002174:	d027      	beq.n	80021c6 <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a2c      	ldr	r2, [pc, #176]	; (800222c <TIM_Base_SetConfig+0x118>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d023      	beq.n	80021c6 <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2b      	ldr	r2, [pc, #172]	; (8002230 <TIM_Base_SetConfig+0x11c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d01f      	beq.n	80021c6 <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a2a      	ldr	r2, [pc, #168]	; (8002234 <TIM_Base_SetConfig+0x120>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01b      	beq.n	80021c6 <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a29      	ldr	r2, [pc, #164]	; (8002238 <TIM_Base_SetConfig+0x124>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d017      	beq.n	80021c6 <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a28      	ldr	r2, [pc, #160]	; (800223c <TIM_Base_SetConfig+0x128>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a27      	ldr	r2, [pc, #156]	; (8002240 <TIM_Base_SetConfig+0x12c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00f      	beq.n	80021c6 <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a26      	ldr	r2, [pc, #152]	; (8002244 <TIM_Base_SetConfig+0x130>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00b      	beq.n	80021c6 <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a25      	ldr	r2, [pc, #148]	; (8002248 <TIM_Base_SetConfig+0x134>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d007      	beq.n	80021c6 <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a24      	ldr	r2, [pc, #144]	; (800224c <TIM_Base_SetConfig+0x138>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d003      	beq.n	80021c6 <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a23      	ldr	r2, [pc, #140]	; (8002250 <TIM_Base_SetConfig+0x13c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d108      	bne.n	80021d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <TIM_Base_SetConfig+0x114>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d003      	beq.n	800220c <TIM_Base_SetConfig+0xf8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <TIM_Base_SetConfig+0x124>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d103      	bne.n	8002214 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	615a      	str	r2, [r3, #20]
}
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40010000 	.word	0x40010000
 800222c:	40000400 	.word	0x40000400
 8002230:	40000800 	.word	0x40000800
 8002234:	40000c00 	.word	0x40000c00
 8002238:	40010400 	.word	0x40010400
 800223c:	40014000 	.word	0x40014000
 8002240:	40014400 	.word	0x40014400
 8002244:	40014800 	.word	0x40014800
 8002248:	40001800 	.word	0x40001800
 800224c:	40001c00 	.word	0x40001c00
 8002250:	40002000 	.word	0x40002000

08002254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e03f      	b.n	800230e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fb3a 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	; 0x24
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f829 	bl	8002318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800231c:	b0c0      	sub	sp, #256	; 0x100
 800231e:	af00      	add	r7, sp, #0
 8002320:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002334:	68d9      	ldr	r1, [r3, #12]
 8002336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	ea40 0301 	orr.w	r3, r0, r1
 8002340:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	431a      	orrs	r2, r3
 8002350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	431a      	orrs	r2, r3
 8002358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002370:	f021 010c 	bic.w	r1, r1, #12
 8002374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800237e:	430b      	orrs	r3, r1
 8002380:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800238e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002392:	6999      	ldr	r1, [r3, #24]
 8002394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	ea40 0301 	orr.w	r3, r0, r1
 800239e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4b8f      	ldr	r3, [pc, #572]	; (80025e4 <UART_SetConfig+0x2cc>)
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d005      	beq.n	80023b8 <UART_SetConfig+0xa0>
 80023ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4b8d      	ldr	r3, [pc, #564]	; (80025e8 <UART_SetConfig+0x2d0>)
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d104      	bne.n	80023c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023b8:	f7fe ff9e 	bl	80012f8 <HAL_RCC_GetPCLK2Freq>
 80023bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023c0:	e003      	b.n	80023ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023c2:	f7fe ff85 	bl	80012d0 <HAL_RCC_GetPCLK1Freq>
 80023c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023d4:	f040 810c 	bne.w	80025f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023dc:	2200      	movs	r2, #0
 80023de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80023e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80023e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80023ea:	4622      	mov	r2, r4
 80023ec:	462b      	mov	r3, r5
 80023ee:	1891      	adds	r1, r2, r2
 80023f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80023f2:	415b      	adcs	r3, r3
 80023f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023fa:	4621      	mov	r1, r4
 80023fc:	eb12 0801 	adds.w	r8, r2, r1
 8002400:	4629      	mov	r1, r5
 8002402:	eb43 0901 	adc.w	r9, r3, r1
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800241a:	4690      	mov	r8, r2
 800241c:	4699      	mov	r9, r3
 800241e:	4623      	mov	r3, r4
 8002420:	eb18 0303 	adds.w	r3, r8, r3
 8002424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002428:	462b      	mov	r3, r5
 800242a:	eb49 0303 	adc.w	r3, r9, r3
 800242e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800243e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002442:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002446:	460b      	mov	r3, r1
 8002448:	18db      	adds	r3, r3, r3
 800244a:	653b      	str	r3, [r7, #80]	; 0x50
 800244c:	4613      	mov	r3, r2
 800244e:	eb42 0303 	adc.w	r3, r2, r3
 8002452:	657b      	str	r3, [r7, #84]	; 0x54
 8002454:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002458:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800245c:	f7fd fed8 	bl	8000210 <__aeabi_uldivmod>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4b61      	ldr	r3, [pc, #388]	; (80025ec <UART_SetConfig+0x2d4>)
 8002466:	fba3 2302 	umull	r2, r3, r3, r2
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	011c      	lsls	r4, r3, #4
 800246e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002472:	2200      	movs	r2, #0
 8002474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002478:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800247c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002480:	4642      	mov	r2, r8
 8002482:	464b      	mov	r3, r9
 8002484:	1891      	adds	r1, r2, r2
 8002486:	64b9      	str	r1, [r7, #72]	; 0x48
 8002488:	415b      	adcs	r3, r3
 800248a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800248c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002490:	4641      	mov	r1, r8
 8002492:	eb12 0a01 	adds.w	sl, r2, r1
 8002496:	4649      	mov	r1, r9
 8002498:	eb43 0b01 	adc.w	fp, r3, r1
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024b0:	4692      	mov	sl, r2
 80024b2:	469b      	mov	fp, r3
 80024b4:	4643      	mov	r3, r8
 80024b6:	eb1a 0303 	adds.w	r3, sl, r3
 80024ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024be:	464b      	mov	r3, r9
 80024c0:	eb4b 0303 	adc.w	r3, fp, r3
 80024c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80024d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80024dc:	460b      	mov	r3, r1
 80024de:	18db      	adds	r3, r3, r3
 80024e0:	643b      	str	r3, [r7, #64]	; 0x40
 80024e2:	4613      	mov	r3, r2
 80024e4:	eb42 0303 	adc.w	r3, r2, r3
 80024e8:	647b      	str	r3, [r7, #68]	; 0x44
 80024ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80024f2:	f7fd fe8d 	bl	8000210 <__aeabi_uldivmod>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4611      	mov	r1, r2
 80024fc:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <UART_SetConfig+0x2d4>)
 80024fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	2264      	movs	r2, #100	; 0x64
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	1acb      	subs	r3, r1, r3
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002512:	4b36      	ldr	r3, [pc, #216]	; (80025ec <UART_SetConfig+0x2d4>)
 8002514:	fba3 2302 	umull	r2, r3, r3, r2
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002520:	441c      	add	r4, r3
 8002522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002526:	2200      	movs	r2, #0
 8002528:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800252c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002530:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002534:	4642      	mov	r2, r8
 8002536:	464b      	mov	r3, r9
 8002538:	1891      	adds	r1, r2, r2
 800253a:	63b9      	str	r1, [r7, #56]	; 0x38
 800253c:	415b      	adcs	r3, r3
 800253e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002544:	4641      	mov	r1, r8
 8002546:	1851      	adds	r1, r2, r1
 8002548:	6339      	str	r1, [r7, #48]	; 0x30
 800254a:	4649      	mov	r1, r9
 800254c:	414b      	adcs	r3, r1
 800254e:	637b      	str	r3, [r7, #52]	; 0x34
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800255c:	4659      	mov	r1, fp
 800255e:	00cb      	lsls	r3, r1, #3
 8002560:	4651      	mov	r1, sl
 8002562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002566:	4651      	mov	r1, sl
 8002568:	00ca      	lsls	r2, r1, #3
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	4603      	mov	r3, r0
 8002570:	4642      	mov	r2, r8
 8002572:	189b      	adds	r3, r3, r2
 8002574:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002578:	464b      	mov	r3, r9
 800257a:	460a      	mov	r2, r1
 800257c:	eb42 0303 	adc.w	r3, r2, r3
 8002580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002590:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002594:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002598:	460b      	mov	r3, r1
 800259a:	18db      	adds	r3, r3, r3
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
 800259e:	4613      	mov	r3, r2
 80025a0:	eb42 0303 	adc.w	r3, r2, r3
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025ae:	f7fd fe2f 	bl	8000210 <__aeabi_uldivmod>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <UART_SetConfig+0x2d4>)
 80025b8:	fba3 1302 	umull	r1, r3, r3, r2
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	2164      	movs	r1, #100	; 0x64
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	3332      	adds	r3, #50	; 0x32
 80025ca:	4a08      	ldr	r2, [pc, #32]	; (80025ec <UART_SetConfig+0x2d4>)
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	095b      	lsrs	r3, r3, #5
 80025d2:	f003 0207 	and.w	r2, r3, #7
 80025d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4422      	add	r2, r4
 80025de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025e0:	e105      	b.n	80027ee <UART_SetConfig+0x4d6>
 80025e2:	bf00      	nop
 80025e4:	40011000 	.word	0x40011000
 80025e8:	40011400 	.word	0x40011400
 80025ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025f4:	2200      	movs	r2, #0
 80025f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002602:	4642      	mov	r2, r8
 8002604:	464b      	mov	r3, r9
 8002606:	1891      	adds	r1, r2, r2
 8002608:	6239      	str	r1, [r7, #32]
 800260a:	415b      	adcs	r3, r3
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
 800260e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002612:	4641      	mov	r1, r8
 8002614:	1854      	adds	r4, r2, r1
 8002616:	4649      	mov	r1, r9
 8002618:	eb43 0501 	adc.w	r5, r3, r1
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	00eb      	lsls	r3, r5, #3
 8002626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800262a:	00e2      	lsls	r2, r4, #3
 800262c:	4614      	mov	r4, r2
 800262e:	461d      	mov	r5, r3
 8002630:	4643      	mov	r3, r8
 8002632:	18e3      	adds	r3, r4, r3
 8002634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002638:	464b      	mov	r3, r9
 800263a:	eb45 0303 	adc.w	r3, r5, r3
 800263e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800264e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800265e:	4629      	mov	r1, r5
 8002660:	008b      	lsls	r3, r1, #2
 8002662:	4621      	mov	r1, r4
 8002664:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002668:	4621      	mov	r1, r4
 800266a:	008a      	lsls	r2, r1, #2
 800266c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002670:	f7fd fdce 	bl	8000210 <__aeabi_uldivmod>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4b60      	ldr	r3, [pc, #384]	; (80027fc <UART_SetConfig+0x4e4>)
 800267a:	fba3 2302 	umull	r2, r3, r3, r2
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	011c      	lsls	r4, r3, #4
 8002682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002686:	2200      	movs	r2, #0
 8002688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800268c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002690:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002694:	4642      	mov	r2, r8
 8002696:	464b      	mov	r3, r9
 8002698:	1891      	adds	r1, r2, r2
 800269a:	61b9      	str	r1, [r7, #24]
 800269c:	415b      	adcs	r3, r3
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026a4:	4641      	mov	r1, r8
 80026a6:	1851      	adds	r1, r2, r1
 80026a8:	6139      	str	r1, [r7, #16]
 80026aa:	4649      	mov	r1, r9
 80026ac:	414b      	adcs	r3, r1
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026bc:	4659      	mov	r1, fp
 80026be:	00cb      	lsls	r3, r1, #3
 80026c0:	4651      	mov	r1, sl
 80026c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026c6:	4651      	mov	r1, sl
 80026c8:	00ca      	lsls	r2, r1, #3
 80026ca:	4610      	mov	r0, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	4642      	mov	r2, r8
 80026d2:	189b      	adds	r3, r3, r2
 80026d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026d8:	464b      	mov	r3, r9
 80026da:	460a      	mov	r2, r1
 80026dc:	eb42 0303 	adc.w	r3, r2, r3
 80026e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80026ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026fc:	4649      	mov	r1, r9
 80026fe:	008b      	lsls	r3, r1, #2
 8002700:	4641      	mov	r1, r8
 8002702:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002706:	4641      	mov	r1, r8
 8002708:	008a      	lsls	r2, r1, #2
 800270a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800270e:	f7fd fd7f 	bl	8000210 <__aeabi_uldivmod>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4b39      	ldr	r3, [pc, #228]	; (80027fc <UART_SetConfig+0x4e4>)
 8002718:	fba3 1302 	umull	r1, r3, r3, r2
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	2164      	movs	r1, #100	; 0x64
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	3332      	adds	r3, #50	; 0x32
 800272a:	4a34      	ldr	r2, [pc, #208]	; (80027fc <UART_SetConfig+0x4e4>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002736:	441c      	add	r4, r3
 8002738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800273c:	2200      	movs	r2, #0
 800273e:	673b      	str	r3, [r7, #112]	; 0x70
 8002740:	677a      	str	r2, [r7, #116]	; 0x74
 8002742:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002746:	4642      	mov	r2, r8
 8002748:	464b      	mov	r3, r9
 800274a:	1891      	adds	r1, r2, r2
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	415b      	adcs	r3, r3
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002756:	4641      	mov	r1, r8
 8002758:	1851      	adds	r1, r2, r1
 800275a:	6039      	str	r1, [r7, #0]
 800275c:	4649      	mov	r1, r9
 800275e:	414b      	adcs	r3, r1
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800276e:	4659      	mov	r1, fp
 8002770:	00cb      	lsls	r3, r1, #3
 8002772:	4651      	mov	r1, sl
 8002774:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002778:	4651      	mov	r1, sl
 800277a:	00ca      	lsls	r2, r1, #3
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	4603      	mov	r3, r0
 8002782:	4642      	mov	r2, r8
 8002784:	189b      	adds	r3, r3, r2
 8002786:	66bb      	str	r3, [r7, #104]	; 0x68
 8002788:	464b      	mov	r3, r9
 800278a:	460a      	mov	r2, r1
 800278c:	eb42 0303 	adc.w	r3, r2, r3
 8002790:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	663b      	str	r3, [r7, #96]	; 0x60
 800279c:	667a      	str	r2, [r7, #100]	; 0x64
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027aa:	4649      	mov	r1, r9
 80027ac:	008b      	lsls	r3, r1, #2
 80027ae:	4641      	mov	r1, r8
 80027b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027b4:	4641      	mov	r1, r8
 80027b6:	008a      	lsls	r2, r1, #2
 80027b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027bc:	f7fd fd28 	bl	8000210 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <UART_SetConfig+0x4e4>)
 80027c6:	fba3 1302 	umull	r1, r3, r3, r2
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2164      	movs	r1, #100	; 0x64
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	3332      	adds	r3, #50	; 0x32
 80027d8:	4a08      	ldr	r2, [pc, #32]	; (80027fc <UART_SetConfig+0x4e4>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	f003 020f 	and.w	r2, r3, #15
 80027e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4422      	add	r2, r4
 80027ec:	609a      	str	r2, [r3, #8]
}
 80027ee:	bf00      	nop
 80027f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80027f4:	46bd      	mov	sp, r7
 80027f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027fa:	bf00      	nop
 80027fc:	51eb851f 	.word	0x51eb851f

08002800 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <SysTick_Handler+0x1c>)
 8002806:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002808:	f001 fcca 	bl	80041a0 <xTaskGetSchedulerState>
 800280c:	4603      	mov	r3, r0
 800280e:	2b01      	cmp	r3, #1
 8002810:	d001      	beq.n	8002816 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002812:	f002 fab1 	bl	8004d78 <xPortSysTickHandler>
  }
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	e000e010 	.word	0xe000e010

08002820 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a07      	ldr	r2, [pc, #28]	; (800284c <vApplicationGetIdleTaskMemory+0x2c>)
 8002830:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	4a06      	ldr	r2, [pc, #24]	; (8002850 <vApplicationGetIdleTaskMemory+0x30>)
 8002836:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2280      	movs	r2, #128	; 0x80
 800283c:	601a      	str	r2, [r3, #0]
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	200000e0 	.word	0x200000e0
 8002850:	2000013c 	.word	0x2000013c

08002854 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4a07      	ldr	r2, [pc, #28]	; (8002880 <vApplicationGetTimerTaskMemory+0x2c>)
 8002864:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4a06      	ldr	r2, [pc, #24]	; (8002884 <vApplicationGetTimerTaskMemory+0x30>)
 800286a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002872:	601a      	str	r2, [r3, #0]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	2000033c 	.word	0x2000033c
 8002884:	20000398 	.word	0x20000398

08002888 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f103 0208 	add.w	r2, r3, #8
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f04f 32ff 	mov.w	r2, #4294967295
 80028a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f103 0208 	add.w	r2, r3, #8
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f103 0208 	add.w	r2, r3, #8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	601a      	str	r2, [r3, #0]
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800292a:	b480      	push	{r7}
 800292c:	b085      	sub	sp, #20
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d103      	bne.n	800294a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	e00c      	b.n	8002964 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3308      	adds	r3, #8
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e002      	b.n	8002958 <vListInsert+0x2e>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	429a      	cmp	r2, r3
 8002962:	d2f6      	bcs.n	8002952 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6892      	ldr	r2, [r2, #8]
 80029b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6852      	ldr	r2, [r2, #4]
 80029bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d103      	bne.n	80029d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	1e5a      	subs	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10a      	bne.n	8002a1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a16:	bf00      	nop
 8002a18:	e7fe      	b.n	8002a18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a1a:	f002 f91b 	bl	8004c54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a26:	68f9      	ldr	r1, [r7, #12]
 8002a28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	441a      	add	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	68f9      	ldr	r1, [r7, #12]
 8002a4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	441a      	add	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	22ff      	movs	r2, #255	; 0xff
 8002a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	22ff      	movs	r2, #255	; 0xff
 8002a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d114      	bne.n	8002a9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01a      	beq.n	8002aae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3310      	adds	r3, #16
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f001 f9d1 	bl	8003e24 <xTaskRemoveFromEventList>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d012      	beq.n	8002aae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <xQueueGenericReset+0xcc>)
 8002a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	e009      	b.n	8002aae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3310      	adds	r3, #16
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fef2 	bl	8002888 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3324      	adds	r3, #36	; 0x24
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff feed 	bl	8002888 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002aae:	f002 f901 	bl	8004cb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ab2:	2301      	movs	r3, #1
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	e000ed04 	.word	0xe000ed04

08002ac0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08e      	sub	sp, #56	; 0x38
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ae6:	bf00      	nop
 8002ae8:	e7fe      	b.n	8002ae8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b02:	bf00      	nop
 8002b04:	e7fe      	b.n	8002b04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <xQueueGenericCreateStatic+0x52>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <xQueueGenericCreateStatic+0x56>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <xQueueGenericCreateStatic+0x58>
 8002b16:	2300      	movs	r3, #0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	623b      	str	r3, [r7, #32]
}
 8002b2e:	bf00      	nop
 8002b30:	e7fe      	b.n	8002b30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <xQueueGenericCreateStatic+0x7e>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <xQueueGenericCreateStatic+0x82>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <xQueueGenericCreateStatic+0x84>
 8002b42:	2300      	movs	r3, #0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10a      	bne.n	8002b5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	61fb      	str	r3, [r7, #28]
}
 8002b5a:	bf00      	nop
 8002b5c:	e7fe      	b.n	8002b5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b5e:	2350      	movs	r3, #80	; 0x50
 8002b60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b50      	cmp	r3, #80	; 0x50
 8002b66:	d00a      	beq.n	8002b7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	61bb      	str	r3, [r7, #24]
}
 8002b7a:	bf00      	nop
 8002b7c:	e7fe      	b.n	8002b7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00d      	beq.n	8002ba6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f805 	bl	8002bb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3730      	adds	r7, #48	; 0x30
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d103      	bne.n	8002bcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	e002      	b.n	8002bd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bde:	2101      	movs	r1, #1
 8002be0:	69b8      	ldr	r0, [r7, #24]
 8002be2:	f7ff ff05 	bl	80029f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08e      	sub	sp, #56	; 0x38
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c06:	2300      	movs	r3, #0
 8002c08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <xQueueGenericSend+0x32>
	__asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c26:	bf00      	nop
 8002c28:	e7fe      	b.n	8002c28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d103      	bne.n	8002c38 <xQueueGenericSend+0x40>
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <xQueueGenericSend+0x44>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <xQueueGenericSend+0x46>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10a      	bne.n	8002c58 <xQueueGenericSend+0x60>
	__asm volatile
 8002c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c54:	bf00      	nop
 8002c56:	e7fe      	b.n	8002c56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d103      	bne.n	8002c66 <xQueueGenericSend+0x6e>
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <xQueueGenericSend+0x72>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <xQueueGenericSend+0x74>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10a      	bne.n	8002c86 <xQueueGenericSend+0x8e>
	__asm volatile
 8002c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	623b      	str	r3, [r7, #32]
}
 8002c82:	bf00      	nop
 8002c84:	e7fe      	b.n	8002c84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c86:	f001 fa8b 	bl	80041a0 <xTaskGetSchedulerState>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <xQueueGenericSend+0x9e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <xQueueGenericSend+0xa2>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <xQueueGenericSend+0xa4>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	61fb      	str	r3, [r7, #28]
}
 8002cb2:	bf00      	nop
 8002cb4:	e7fe      	b.n	8002cb4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cb6:	f001 ffcd 	bl	8004c54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d302      	bcc.n	8002ccc <xQueueGenericSend+0xd4>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d129      	bne.n	8002d20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cd2:	f000 fa0b 	bl	80030ec <prvCopyDataToQueue>
 8002cd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d010      	beq.n	8002d02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	3324      	adds	r3, #36	; 0x24
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f001 f89d 	bl	8003e24 <xTaskRemoveFromEventList>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d013      	beq.n	8002d18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002cf0:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <xQueueGenericSend+0x1f8>)
 8002cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	e00a      	b.n	8002d18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d08:	4b39      	ldr	r3, [pc, #228]	; (8002df0 <xQueueGenericSend+0x1f8>)
 8002d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d18:	f001 ffcc 	bl	8004cb4 <vPortExitCritical>
				return pdPASS;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e063      	b.n	8002de8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d103      	bne.n	8002d2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d26:	f001 ffc5 	bl	8004cb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e05c      	b.n	8002de8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d106      	bne.n	8002d42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 f8d7 	bl	8003eec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d42:	f001 ffb7 	bl	8004cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d46:	f000 fe49 	bl	80039dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d4a:	f001 ff83 	bl	8004c54 <vPortEnterCritical>
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5a:	d103      	bne.n	8002d64 <xQueueGenericSend+0x16c>
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d6a:	b25b      	sxtb	r3, r3
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d103      	bne.n	8002d7a <xQueueGenericSend+0x182>
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d7a:	f001 ff9b 	bl	8004cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d7e:	1d3a      	adds	r2, r7, #4
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 f8c6 	bl	8003f18 <xTaskCheckForTimeOut>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d124      	bne.n	8002ddc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d94:	f000 faa2 	bl	80032dc <prvIsQueueFull>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d018      	beq.n	8002dd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	3310      	adds	r3, #16
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 ffec 	bl	8003d84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dae:	f000 fa2d 	bl	800320c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002db2:	f000 fe21 	bl	80039f8 <xTaskResumeAll>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f47f af7c 	bne.w	8002cb6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <xQueueGenericSend+0x1f8>)
 8002dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	e772      	b.n	8002cb6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dd2:	f000 fa1b 	bl	800320c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dd6:	f000 fe0f 	bl	80039f8 <xTaskResumeAll>
 8002dda:	e76c      	b.n	8002cb6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dde:	f000 fa15 	bl	800320c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002de2:	f000 fe09 	bl	80039f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002de6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3738      	adds	r7, #56	; 0x38
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	e000ed04 	.word	0xe000ed04

08002df4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b090      	sub	sp, #64	; 0x40
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e1e:	bf00      	nop
 8002e20:	e7fe      	b.n	8002e20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d103      	bne.n	8002e30 <xQueueGenericSendFromISR+0x3c>
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <xQueueGenericSendFromISR+0x40>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <xQueueGenericSendFromISR+0x42>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10a      	bne.n	8002e50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e4c:	bf00      	nop
 8002e4e:	e7fe      	b.n	8002e4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d103      	bne.n	8002e5e <xQueueGenericSendFromISR+0x6a>
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <xQueueGenericSendFromISR+0x6e>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <xQueueGenericSendFromISR+0x70>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10a      	bne.n	8002e7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	623b      	str	r3, [r7, #32]
}
 8002e7a:	bf00      	nop
 8002e7c:	e7fe      	b.n	8002e7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e7e:	f001 ffcb 	bl	8004e18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e82:	f3ef 8211 	mrs	r2, BASEPRI
 8002e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	61fa      	str	r2, [r7, #28]
 8002e98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d302      	bcc.n	8002eb0 <xQueueGenericSendFromISR+0xbc>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d12f      	bne.n	8002f10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	68b9      	ldr	r1, [r7, #8]
 8002ec4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ec6:	f000 f911 	bl	80030ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002eca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed2:	d112      	bne.n	8002efa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d016      	beq.n	8002f0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ede:	3324      	adds	r3, #36	; 0x24
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 ff9f 	bl	8003e24 <xTaskRemoveFromEventList>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00e      	beq.n	8002f0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e007      	b.n	8002f0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002efa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002efe:	3301      	adds	r3, #1
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	b25a      	sxtb	r2, r3
 8002f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002f0e:	e001      	b.n	8002f14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3740      	adds	r7, #64	; 0x40
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	; 0x30
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10a      	bne.n	8002f5c <xQueueReceive+0x30>
	__asm volatile
 8002f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	623b      	str	r3, [r7, #32]
}
 8002f58:	bf00      	nop
 8002f5a:	e7fe      	b.n	8002f5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d103      	bne.n	8002f6a <xQueueReceive+0x3e>
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <xQueueReceive+0x42>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <xQueueReceive+0x44>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10a      	bne.n	8002f8a <xQueueReceive+0x5e>
	__asm volatile
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	61fb      	str	r3, [r7, #28]
}
 8002f86:	bf00      	nop
 8002f88:	e7fe      	b.n	8002f88 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f8a:	f001 f909 	bl	80041a0 <xTaskGetSchedulerState>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d102      	bne.n	8002f9a <xQueueReceive+0x6e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <xQueueReceive+0x72>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <xQueueReceive+0x74>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <xQueueReceive+0x8e>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	61bb      	str	r3, [r7, #24]
}
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fba:	f001 fe4b 	bl	8004c54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d01f      	beq.n	800300a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fce:	f000 f8f7 	bl	80031c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	1e5a      	subs	r2, r3, #1
 8002fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00f      	beq.n	8003002 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe4:	3310      	adds	r3, #16
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 ff1c 	bl	8003e24 <xTaskRemoveFromEventList>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ff2:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <xQueueReceive+0x1bc>)
 8002ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003002:	f001 fe57 	bl	8004cb4 <vPortExitCritical>
				return pdPASS;
 8003006:	2301      	movs	r3, #1
 8003008:	e069      	b.n	80030de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d103      	bne.n	8003018 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003010:	f001 fe50 	bl	8004cb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003014:	2300      	movs	r3, #0
 8003016:	e062      	b.n	80030de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800301e:	f107 0310 	add.w	r3, r7, #16
 8003022:	4618      	mov	r0, r3
 8003024:	f000 ff62 	bl	8003eec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003028:	2301      	movs	r3, #1
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800302c:	f001 fe42 	bl	8004cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003030:	f000 fcd4 	bl	80039dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003034:	f001 fe0e 	bl	8004c54 <vPortEnterCritical>
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800303e:	b25b      	sxtb	r3, r3
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d103      	bne.n	800304e <xQueueReceive+0x122>
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003054:	b25b      	sxtb	r3, r3
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d103      	bne.n	8003064 <xQueueReceive+0x138>
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003064:	f001 fe26 	bl	8004cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003068:	1d3a      	adds	r2, r7, #4
 800306a:	f107 0310 	add.w	r3, r7, #16
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f000 ff51 	bl	8003f18 <xTaskCheckForTimeOut>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d123      	bne.n	80030c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800307c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800307e:	f000 f917 	bl	80032b0 <prvIsQueueEmpty>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d017      	beq.n	80030b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	3324      	adds	r3, #36	; 0x24
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fe77 	bl	8003d84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003098:	f000 f8b8 	bl	800320c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800309c:	f000 fcac 	bl	80039f8 <xTaskResumeAll>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d189      	bne.n	8002fba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <xQueueReceive+0x1bc>)
 80030a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	e780      	b.n	8002fba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ba:	f000 f8a7 	bl	800320c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030be:	f000 fc9b 	bl	80039f8 <xTaskResumeAll>
 80030c2:	e77a      	b.n	8002fba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030c6:	f000 f8a1 	bl	800320c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030ca:	f000 fc95 	bl	80039f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030d0:	f000 f8ee 	bl	80032b0 <prvIsQueueEmpty>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f43f af6f 	beq.w	8002fba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3730      	adds	r7, #48	; 0x30
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	e000ed04 	.word	0xe000ed04

080030ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10d      	bne.n	8003126 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d14d      	bne.n	80031ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	4618      	mov	r0, r3
 8003118:	f001 f860 	bl	80041dc <xTaskPriorityDisinherit>
 800311c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	e043      	b.n	80031ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d119      	bne.n	8003160 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6858      	ldr	r0, [r3, #4]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	461a      	mov	r2, r3
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	f002 f8bc 	bl	80052b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	441a      	add	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	429a      	cmp	r2, r3
 8003154:	d32b      	bcc.n	80031ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	e026      	b.n	80031ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	68d8      	ldr	r0, [r3, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	461a      	mov	r2, r3
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	f002 f8a2 	bl	80052b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	425b      	negs	r3, r3
 800317a:	441a      	add	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d207      	bcs.n	800319c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	425b      	negs	r3, r3
 8003196:	441a      	add	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d105      	bne.n	80031ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80031b6:	697b      	ldr	r3, [r7, #20]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d018      	beq.n	8003204 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	441a      	add	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d303      	bcc.n	80031f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68d9      	ldr	r1, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	461a      	mov	r2, r3
 80031fe:	6838      	ldr	r0, [r7, #0]
 8003200:	f002 f858 	bl	80052b4 <memcpy>
	}
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003214:	f001 fd1e 	bl	8004c54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800321e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003220:	e011      	b.n	8003246 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	2b00      	cmp	r3, #0
 8003228:	d012      	beq.n	8003250 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3324      	adds	r3, #36	; 0x24
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fdf8 	bl	8003e24 <xTaskRemoveFromEventList>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800323a:	f000 fecf 	bl	8003fdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	3b01      	subs	r3, #1
 8003242:	b2db      	uxtb	r3, r3
 8003244:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324a:	2b00      	cmp	r3, #0
 800324c:	dce9      	bgt.n	8003222 <prvUnlockQueue+0x16>
 800324e:	e000      	b.n	8003252 <prvUnlockQueue+0x46>
					break;
 8003250:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	22ff      	movs	r2, #255	; 0xff
 8003256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800325a:	f001 fd2b 	bl	8004cb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800325e:	f001 fcf9 	bl	8004c54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003268:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800326a:	e011      	b.n	8003290 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d012      	beq.n	800329a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3310      	adds	r3, #16
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fdd3 	bl	8003e24 <xTaskRemoveFromEventList>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003284:	f000 feaa 	bl	8003fdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003288:	7bbb      	ldrb	r3, [r7, #14]
 800328a:	3b01      	subs	r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003290:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003294:	2b00      	cmp	r3, #0
 8003296:	dce9      	bgt.n	800326c <prvUnlockQueue+0x60>
 8003298:	e000      	b.n	800329c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800329a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	22ff      	movs	r2, #255	; 0xff
 80032a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80032a4:	f001 fd06 	bl	8004cb4 <vPortExitCritical>
}
 80032a8:	bf00      	nop
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032b8:	f001 fccc 	bl	8004c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d102      	bne.n	80032ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e001      	b.n	80032ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032ce:	f001 fcf1 	bl	8004cb4 <vPortExitCritical>

	return xReturn;
 80032d2:	68fb      	ldr	r3, [r7, #12]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032e4:	f001 fcb6 	bl	8004c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d102      	bne.n	80032fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80032f4:	2301      	movs	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	e001      	b.n	80032fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032fe:	f001 fcd9 	bl	8004cb4 <vPortExitCritical>

	return xReturn;
 8003302:	68fb      	ldr	r3, [r7, #12]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e014      	b.n	8003346 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800331c:	4a0f      	ldr	r2, [pc, #60]	; (800335c <vQueueAddToRegistry+0x50>)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10b      	bne.n	8003340 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003328:	490c      	ldr	r1, [pc, #48]	; (800335c <vQueueAddToRegistry+0x50>)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <vQueueAddToRegistry+0x50>)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4413      	add	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800333e:	e006      	b.n	800334e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3301      	adds	r3, #1
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b07      	cmp	r3, #7
 800334a:	d9e7      	bls.n	800331c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000798 	.word	0x20000798

08003360 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003370:	f001 fc70 	bl	8004c54 <vPortEnterCritical>
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800337a:	b25b      	sxtb	r3, r3
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d103      	bne.n	800338a <vQueueWaitForMessageRestricted+0x2a>
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003390:	b25b      	sxtb	r3, r3
 8003392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003396:	d103      	bne.n	80033a0 <vQueueWaitForMessageRestricted+0x40>
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033a0:	f001 fc88 	bl	8004cb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d106      	bne.n	80033ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	3324      	adds	r3, #36	; 0x24
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fd09 	bl	8003dcc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80033ba:	6978      	ldr	r0, [r7, #20]
 80033bc:	f7ff ff26 	bl	800320c <prvUnlockQueue>
	}
 80033c0:	bf00      	nop
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08e      	sub	sp, #56	; 0x38
 80033cc:	af04      	add	r7, sp, #16
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	623b      	str	r3, [r7, #32]
}
 80033ee:	bf00      	nop
 80033f0:	e7fe      	b.n	80033f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80033f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <xTaskCreateStatic+0x46>
	__asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	61fb      	str	r3, [r7, #28]
}
 800340a:	bf00      	nop
 800340c:	e7fe      	b.n	800340c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800340e:	235c      	movs	r3, #92	; 0x5c
 8003410:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b5c      	cmp	r3, #92	; 0x5c
 8003416:	d00a      	beq.n	800342e <xTaskCreateStatic+0x66>
	__asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	61bb      	str	r3, [r7, #24]
}
 800342a:	bf00      	nop
 800342c:	e7fe      	b.n	800342c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800342e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003432:	2b00      	cmp	r3, #0
 8003434:	d01e      	beq.n	8003474 <xTaskCreateStatic+0xac>
 8003436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01b      	beq.n	8003474 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800343c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003444:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	2202      	movs	r2, #2
 800344a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800344e:	2300      	movs	r3, #0
 8003450:	9303      	str	r3, [sp, #12]
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	9302      	str	r3, [sp, #8]
 8003456:	f107 0314 	add.w	r3, r7, #20
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f850 	bl	800350c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800346c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800346e:	f000 f8dd 	bl	800362c <prvAddNewTaskToReadyList>
 8003472:	e001      	b.n	8003478 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003478:	697b      	ldr	r3, [r7, #20]
	}
 800347a:	4618      	mov	r0, r3
 800347c:	3728      	adds	r7, #40	; 0x28
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003482:	b580      	push	{r7, lr}
 8003484:	b08c      	sub	sp, #48	; 0x30
 8003486:	af04      	add	r7, sp, #16
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	603b      	str	r3, [r7, #0]
 800348e:	4613      	mov	r3, r2
 8003490:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4618      	mov	r0, r3
 8003498:	f001 fcfe 	bl	8004e98 <pvPortMalloc>
 800349c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00e      	beq.n	80034c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80034a4:	205c      	movs	r0, #92	; 0x5c
 80034a6:	f001 fcf7 	bl	8004e98 <pvPortMalloc>
 80034aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
 80034b8:	e005      	b.n	80034c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034ba:	6978      	ldr	r0, [r7, #20]
 80034bc:	f001 fdb8 	bl	8005030 <vPortFree>
 80034c0:	e001      	b.n	80034c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d017      	beq.n	80034fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034d4:	88fa      	ldrh	r2, [r7, #6]
 80034d6:	2300      	movs	r3, #0
 80034d8:	9303      	str	r3, [sp, #12]
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	9302      	str	r3, [sp, #8]
 80034de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f80e 	bl	800350c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034f0:	69f8      	ldr	r0, [r7, #28]
 80034f2:	f000 f89b 	bl	800362c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034f6:	2301      	movs	r3, #1
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	e002      	b.n	8003502 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003500:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003502:	69bb      	ldr	r3, [r7, #24]
	}
 8003504:	4618      	mov	r0, r3
 8003506:	3720      	adds	r7, #32
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	461a      	mov	r2, r3
 8003524:	21a5      	movs	r1, #165	; 0xa5
 8003526:	f001 fed3 	bl	80052d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003534:	3b01      	subs	r3, #1
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f023 0307 	bic.w	r3, r3, #7
 8003542:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <prvInitialiseNewTask+0x58>
	__asm volatile
 800354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	617b      	str	r3, [r7, #20]
}
 8003560:	bf00      	nop
 8003562:	e7fe      	b.n	8003562 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01f      	beq.n	80035aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
 800356e:	e012      	b.n	8003596 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	4413      	add	r3, r2
 8003576:	7819      	ldrb	r1, [r3, #0]
 8003578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	3334      	adds	r3, #52	; 0x34
 8003580:	460a      	mov	r2, r1
 8003582:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d006      	beq.n	800359e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	3301      	adds	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	2b0f      	cmp	r3, #15
 800359a:	d9e9      	bls.n	8003570 <prvInitialiseNewTask+0x64>
 800359c:	e000      	b.n	80035a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800359e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035a8:	e003      	b.n	80035b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	2b37      	cmp	r3, #55	; 0x37
 80035b6:	d901      	bls.n	80035bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035b8:	2337      	movs	r3, #55	; 0x37
 80035ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80035c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ca:	2200      	movs	r2, #0
 80035cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	3304      	adds	r3, #4
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff f978 	bl	80028c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	3318      	adds	r3, #24
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff f973 	bl	80028c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	2200      	movs	r2, #0
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	68f9      	ldr	r1, [r7, #12]
 800360a:	69b8      	ldr	r0, [r7, #24]
 800360c:	f001 f9f6 	bl	80049fc <pxPortInitialiseStack>
 8003610:	4602      	mov	r2, r0
 8003612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003614:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003620:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003622:	bf00      	nop
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003634:	f001 fb0e 	bl	8004c54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003638:	4b2d      	ldr	r3, [pc, #180]	; (80036f0 <prvAddNewTaskToReadyList+0xc4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3301      	adds	r3, #1
 800363e:	4a2c      	ldr	r2, [pc, #176]	; (80036f0 <prvAddNewTaskToReadyList+0xc4>)
 8003640:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003642:	4b2c      	ldr	r3, [pc, #176]	; (80036f4 <prvAddNewTaskToReadyList+0xc8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800364a:	4a2a      	ldr	r2, [pc, #168]	; (80036f4 <prvAddNewTaskToReadyList+0xc8>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003650:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <prvAddNewTaskToReadyList+0xc4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d110      	bne.n	800367a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003658:	f000 fce4 	bl	8004024 <prvInitialiseTaskLists>
 800365c:	e00d      	b.n	800367a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800365e:	4b26      	ldr	r3, [pc, #152]	; (80036f8 <prvAddNewTaskToReadyList+0xcc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d109      	bne.n	800367a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003666:	4b23      	ldr	r3, [pc, #140]	; (80036f4 <prvAddNewTaskToReadyList+0xc8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	429a      	cmp	r2, r3
 8003672:	d802      	bhi.n	800367a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003674:	4a1f      	ldr	r2, [pc, #124]	; (80036f4 <prvAddNewTaskToReadyList+0xc8>)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800367a:	4b20      	ldr	r3, [pc, #128]	; (80036fc <prvAddNewTaskToReadyList+0xd0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3301      	adds	r3, #1
 8003680:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <prvAddNewTaskToReadyList+0xd0>)
 8003682:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <prvAddNewTaskToReadyList+0xd0>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <prvAddNewTaskToReadyList+0xd4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d903      	bls.n	80036a0 <prvAddNewTaskToReadyList+0x74>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	4a18      	ldr	r2, [pc, #96]	; (8003700 <prvAddNewTaskToReadyList+0xd4>)
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4a15      	ldr	r2, [pc, #84]	; (8003704 <prvAddNewTaskToReadyList+0xd8>)
 80036ae:	441a      	add	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3304      	adds	r3, #4
 80036b4:	4619      	mov	r1, r3
 80036b6:	4610      	mov	r0, r2
 80036b8:	f7ff f913 	bl	80028e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036bc:	f001 fafa 	bl	8004cb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80036c0:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <prvAddNewTaskToReadyList+0xcc>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00e      	beq.n	80036e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <prvAddNewTaskToReadyList+0xc8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d207      	bcs.n	80036e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80036d6:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <prvAddNewTaskToReadyList+0xdc>)
 80036d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000cac 	.word	0x20000cac
 80036f4:	200007d8 	.word	0x200007d8
 80036f8:	20000cb8 	.word	0x20000cb8
 80036fc:	20000cc8 	.word	0x20000cc8
 8003700:	20000cb4 	.word	0x20000cb4
 8003704:	200007dc 	.word	0x200007dc
 8003708:	e000ed04 	.word	0xe000ed04

0800370c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003714:	f001 fa9e 	bl	8004c54 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d102      	bne.n	8003724 <vTaskDelete+0x18>
 800371e:	4b2c      	ldr	r3, [pc, #176]	; (80037d0 <vTaskDelete+0xc4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	e000      	b.n	8003726 <vTaskDelete+0x1a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3304      	adds	r3, #4
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff f935 	bl	800299c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	2b00      	cmp	r3, #0
 8003738:	d004      	beq.n	8003744 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3318      	adds	r3, #24
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff f92c 	bl	800299c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003744:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <vTaskDelete+0xc8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3301      	adds	r3, #1
 800374a:	4a22      	ldr	r2, [pc, #136]	; (80037d4 <vTaskDelete+0xc8>)
 800374c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <vTaskDelete+0xc4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	429a      	cmp	r2, r3
 8003756:	d10b      	bne.n	8003770 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3304      	adds	r3, #4
 800375c:	4619      	mov	r1, r3
 800375e:	481e      	ldr	r0, [pc, #120]	; (80037d8 <vTaskDelete+0xcc>)
 8003760:	f7ff f8bf 	bl	80028e2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003764:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <vTaskDelete+0xd0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3301      	adds	r3, #1
 800376a:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <vTaskDelete+0xd0>)
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e009      	b.n	8003784 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003770:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <vTaskDelete+0xd4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3b01      	subs	r3, #1
 8003776:	4a1a      	ldr	r2, [pc, #104]	; (80037e0 <vTaskDelete+0xd4>)
 8003778:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 fcc0 	bl	8004100 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003780:	f000 fcee 	bl	8004160 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003784:	f001 fa96 	bl	8004cb4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003788:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <vTaskDelete+0xd8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01b      	beq.n	80037c8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <vTaskDelete+0xc4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	429a      	cmp	r2, r3
 8003798:	d116      	bne.n	80037c8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800379a:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <vTaskDelete+0xdc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <vTaskDelete+0xac>
	__asm volatile
 80037a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	60bb      	str	r3, [r7, #8]
}
 80037b4:	bf00      	nop
 80037b6:	e7fe      	b.n	80037b6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <vTaskDelete+0xe0>)
 80037ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200007d8 	.word	0x200007d8
 80037d4:	20000cc8 	.word	0x20000cc8
 80037d8:	20000c80 	.word	0x20000c80
 80037dc:	20000c94 	.word	0x20000c94
 80037e0:	20000cac 	.word	0x20000cac
 80037e4:	20000cb8 	.word	0x20000cb8
 80037e8:	20000cd4 	.word	0x20000cd4
 80037ec:	e000ed04 	.word	0xe000ed04

080037f0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8003806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	60fb      	str	r3, [r7, #12]
}
 8003818:	bf00      	nop
 800381a:	e7fe      	b.n	800381a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	4a0a      	ldr	r2, [pc, #40]	; (800384c <prvTaskIsTaskSuspended+0x5c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10a      	bne.n	800383c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	4a09      	ldr	r2, [pc, #36]	; (8003850 <prvTaskIsTaskSuspended+0x60>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d005      	beq.n	800383c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8003838:	2301      	movs	r3, #1
 800383a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800383c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800383e:	4618      	mov	r0, r3
 8003840:	371c      	adds	r7, #28
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000c98 	.word	0x20000c98
 8003850:	20000c6c 	.word	0x20000c6c

08003854 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10a      	bne.n	800387c <vTaskResume+0x28>
	__asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	60bb      	str	r3, [r7, #8]
}
 8003878:	bf00      	nop
 800387a:	e7fe      	b.n	800387a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800387c:	4b20      	ldr	r3, [pc, #128]	; (8003900 <vTaskResume+0xac>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	429a      	cmp	r2, r3
 8003884:	d038      	beq.n	80038f8 <vTaskResume+0xa4>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d035      	beq.n	80038f8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800388c:	f001 f9e2 	bl	8004c54 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f7ff ffad 	bl	80037f0 <prvTaskIsTaskSuspended>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d02b      	beq.n	80038f4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3304      	adds	r3, #4
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff f87b 	bl	800299c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038aa:	4b16      	ldr	r3, [pc, #88]	; (8003904 <vTaskResume+0xb0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d903      	bls.n	80038ba <vTaskResume+0x66>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	4a13      	ldr	r2, [pc, #76]	; (8003904 <vTaskResume+0xb0>)
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4a10      	ldr	r2, [pc, #64]	; (8003908 <vTaskResume+0xb4>)
 80038c8:	441a      	add	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	4610      	mov	r0, r2
 80038d2:	f7ff f806 	bl	80028e2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <vTaskResume+0xac>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d307      	bcc.n	80038f4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80038e4:	4b09      	ldr	r3, [pc, #36]	; (800390c <vTaskResume+0xb8>)
 80038e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80038f4:	f001 f9de 	bl	8004cb4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	200007d8 	.word	0x200007d8
 8003904:	20000cb4 	.word	0x20000cb4
 8003908:	200007dc 	.word	0x200007dc
 800390c:	e000ed04 	.word	0xe000ed04

08003910 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	; 0x28
 8003914:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800391e:	463a      	mov	r2, r7
 8003920:	1d39      	adds	r1, r7, #4
 8003922:	f107 0308 	add.w	r3, r7, #8
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe ff7a 	bl	8002820 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800392c:	6839      	ldr	r1, [r7, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	9202      	str	r2, [sp, #8]
 8003934:	9301      	str	r3, [sp, #4]
 8003936:	2300      	movs	r3, #0
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	2300      	movs	r3, #0
 800393c:	460a      	mov	r2, r1
 800393e:	4921      	ldr	r1, [pc, #132]	; (80039c4 <vTaskStartScheduler+0xb4>)
 8003940:	4821      	ldr	r0, [pc, #132]	; (80039c8 <vTaskStartScheduler+0xb8>)
 8003942:	f7ff fd41 	bl	80033c8 <xTaskCreateStatic>
 8003946:	4603      	mov	r3, r0
 8003948:	4a20      	ldr	r2, [pc, #128]	; (80039cc <vTaskStartScheduler+0xbc>)
 800394a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800394c:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <vTaskStartScheduler+0xbc>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003954:	2301      	movs	r3, #1
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	e001      	b.n	800395e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d102      	bne.n	800396a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003964:	f000 fcfc 	bl	8004360 <xTimerCreateTimerTask>
 8003968:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d116      	bne.n	800399e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	613b      	str	r3, [r7, #16]
}
 8003982:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003984:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <vTaskStartScheduler+0xc0>)
 8003986:	f04f 32ff 	mov.w	r2, #4294967295
 800398a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <vTaskStartScheduler+0xc4>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <vTaskStartScheduler+0xc8>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003998:	f001 f8ba 	bl	8004b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800399c:	e00e      	b.n	80039bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d10a      	bne.n	80039bc <vTaskStartScheduler+0xac>
	__asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	60fb      	str	r3, [r7, #12]
}
 80039b8:	bf00      	nop
 80039ba:	e7fe      	b.n	80039ba <vTaskStartScheduler+0xaa>
}
 80039bc:	bf00      	nop
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	08005338 	.word	0x08005338
 80039c8:	08003ff5 	.word	0x08003ff5
 80039cc:	20000cd0 	.word	0x20000cd0
 80039d0:	20000ccc 	.word	0x20000ccc
 80039d4:	20000cb8 	.word	0x20000cb8
 80039d8:	20000cb0 	.word	0x20000cb0

080039dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <vTaskSuspendAll+0x18>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	4a03      	ldr	r2, [pc, #12]	; (80039f4 <vTaskSuspendAll+0x18>)
 80039e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039ea:	bf00      	nop
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	20000cd4 	.word	0x20000cd4

080039f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a06:	4b42      	ldr	r3, [pc, #264]	; (8003b10 <xTaskResumeAll+0x118>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <xTaskResumeAll+0x2c>
	__asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	603b      	str	r3, [r7, #0]
}
 8003a20:	bf00      	nop
 8003a22:	e7fe      	b.n	8003a22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a24:	f001 f916 	bl	8004c54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a28:	4b39      	ldr	r3, [pc, #228]	; (8003b10 <xTaskResumeAll+0x118>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	4a38      	ldr	r2, [pc, #224]	; (8003b10 <xTaskResumeAll+0x118>)
 8003a30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a32:	4b37      	ldr	r3, [pc, #220]	; (8003b10 <xTaskResumeAll+0x118>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d162      	bne.n	8003b00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a3a:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <xTaskResumeAll+0x11c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d05e      	beq.n	8003b00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a42:	e02f      	b.n	8003aa4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a44:	4b34      	ldr	r3, [pc, #208]	; (8003b18 <xTaskResumeAll+0x120>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3318      	adds	r3, #24
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe ffa3 	bl	800299c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe ff9e 	bl	800299c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a64:	4b2d      	ldr	r3, [pc, #180]	; (8003b1c <xTaskResumeAll+0x124>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d903      	bls.n	8003a74 <xTaskResumeAll+0x7c>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	4a2a      	ldr	r2, [pc, #168]	; (8003b1c <xTaskResumeAll+0x124>)
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4a27      	ldr	r2, [pc, #156]	; (8003b20 <xTaskResumeAll+0x128>)
 8003a82:	441a      	add	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3304      	adds	r3, #4
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	f7fe ff29 	bl	80028e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a94:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <xTaskResumeAll+0x12c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d302      	bcc.n	8003aa4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a9e:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <xTaskResumeAll+0x130>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aa4:	4b1c      	ldr	r3, [pc, #112]	; (8003b18 <xTaskResumeAll+0x120>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1cb      	bne.n	8003a44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ab2:	f000 fb55 	bl	8004160 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ab6:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <xTaskResumeAll+0x134>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d010      	beq.n	8003ae4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ac2:	f000 f847 	bl	8003b54 <xTaskIncrementTick>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003acc:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <xTaskResumeAll+0x130>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f1      	bne.n	8003ac2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003ade:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <xTaskResumeAll+0x134>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ae4:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <xTaskResumeAll+0x130>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d009      	beq.n	8003b00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003aec:	2301      	movs	r3, #1
 8003aee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003af0:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <xTaskResumeAll+0x138>)
 8003af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b00:	f001 f8d8 	bl	8004cb4 <vPortExitCritical>

	return xAlreadyYielded;
 8003b04:	68bb      	ldr	r3, [r7, #8]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000cd4 	.word	0x20000cd4
 8003b14:	20000cac 	.word	0x20000cac
 8003b18:	20000c6c 	.word	0x20000c6c
 8003b1c:	20000cb4 	.word	0x20000cb4
 8003b20:	200007dc 	.word	0x200007dc
 8003b24:	200007d8 	.word	0x200007d8
 8003b28:	20000cc0 	.word	0x20000cc0
 8003b2c:	20000cbc 	.word	0x20000cbc
 8003b30:	e000ed04 	.word	0xe000ed04

08003b34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <xTaskGetTickCount+0x1c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b40:	687b      	ldr	r3, [r7, #4]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000cb0 	.word	0x20000cb0

08003b54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b5e:	4b4f      	ldr	r3, [pc, #316]	; (8003c9c <xTaskIncrementTick+0x148>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f040 808f 	bne.w	8003c86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b68:	4b4d      	ldr	r3, [pc, #308]	; (8003ca0 <xTaskIncrementTick+0x14c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b70:	4a4b      	ldr	r2, [pc, #300]	; (8003ca0 <xTaskIncrementTick+0x14c>)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d120      	bne.n	8003bbe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b7c:	4b49      	ldr	r3, [pc, #292]	; (8003ca4 <xTaskIncrementTick+0x150>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <xTaskIncrementTick+0x48>
	__asm volatile
 8003b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	603b      	str	r3, [r7, #0]
}
 8003b98:	bf00      	nop
 8003b9a:	e7fe      	b.n	8003b9a <xTaskIncrementTick+0x46>
 8003b9c:	4b41      	ldr	r3, [pc, #260]	; (8003ca4 <xTaskIncrementTick+0x150>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	4b41      	ldr	r3, [pc, #260]	; (8003ca8 <xTaskIncrementTick+0x154>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a3f      	ldr	r2, [pc, #252]	; (8003ca4 <xTaskIncrementTick+0x150>)
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	4a3f      	ldr	r2, [pc, #252]	; (8003ca8 <xTaskIncrementTick+0x154>)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	4b3e      	ldr	r3, [pc, #248]	; (8003cac <xTaskIncrementTick+0x158>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	4a3d      	ldr	r2, [pc, #244]	; (8003cac <xTaskIncrementTick+0x158>)
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	f000 fad1 	bl	8004160 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bbe:	4b3c      	ldr	r3, [pc, #240]	; (8003cb0 <xTaskIncrementTick+0x15c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d349      	bcc.n	8003c5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bc8:	4b36      	ldr	r3, [pc, #216]	; (8003ca4 <xTaskIncrementTick+0x150>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d104      	bne.n	8003bdc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd2:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <xTaskIncrementTick+0x15c>)
 8003bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd8:	601a      	str	r2, [r3, #0]
					break;
 8003bda:	e03f      	b.n	8003c5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bdc:	4b31      	ldr	r3, [pc, #196]	; (8003ca4 <xTaskIncrementTick+0x150>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d203      	bcs.n	8003bfc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bf4:	4a2e      	ldr	r2, [pc, #184]	; (8003cb0 <xTaskIncrementTick+0x15c>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003bfa:	e02f      	b.n	8003c5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fe fecb 	bl	800299c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d004      	beq.n	8003c18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	3318      	adds	r3, #24
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe fec2 	bl	800299c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1c:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <xTaskIncrementTick+0x160>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d903      	bls.n	8003c2c <xTaskIncrementTick+0xd8>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	4a22      	ldr	r2, [pc, #136]	; (8003cb4 <xTaskIncrementTick+0x160>)
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <xTaskIncrementTick+0x164>)
 8003c3a:	441a      	add	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f7fe fe4d 	bl	80028e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <xTaskIncrementTick+0x168>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d3b8      	bcc.n	8003bc8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c56:	2301      	movs	r3, #1
 8003c58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c5a:	e7b5      	b.n	8003bc8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c5c:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <xTaskIncrementTick+0x168>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	4915      	ldr	r1, [pc, #84]	; (8003cb8 <xTaskIncrementTick+0x164>)
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d901      	bls.n	8003c78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003c74:	2301      	movs	r3, #1
 8003c76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <xTaskIncrementTick+0x16c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c80:	2301      	movs	r3, #1
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	e004      	b.n	8003c90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c86:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <xTaskIncrementTick+0x170>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	4a0d      	ldr	r2, [pc, #52]	; (8003cc4 <xTaskIncrementTick+0x170>)
 8003c8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c90:	697b      	ldr	r3, [r7, #20]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000cd4 	.word	0x20000cd4
 8003ca0:	20000cb0 	.word	0x20000cb0
 8003ca4:	20000c64 	.word	0x20000c64
 8003ca8:	20000c68 	.word	0x20000c68
 8003cac:	20000cc4 	.word	0x20000cc4
 8003cb0:	20000ccc 	.word	0x20000ccc
 8003cb4:	20000cb4 	.word	0x20000cb4
 8003cb8:	200007dc 	.word	0x200007dc
 8003cbc:	200007d8 	.word	0x200007d8
 8003cc0:	20000cc0 	.word	0x20000cc0
 8003cc4:	20000cbc 	.word	0x20000cbc

08003cc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cce:	4b28      	ldr	r3, [pc, #160]	; (8003d70 <vTaskSwitchContext+0xa8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cd6:	4b27      	ldr	r3, [pc, #156]	; (8003d74 <vTaskSwitchContext+0xac>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cdc:	e041      	b.n	8003d62 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003cde:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <vTaskSwitchContext+0xac>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce4:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <vTaskSwitchContext+0xb0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	e010      	b.n	8003d0e <vTaskSwitchContext+0x46>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <vTaskSwitchContext+0x40>
	__asm volatile
 8003cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	607b      	str	r3, [r7, #4]
}
 8003d04:	bf00      	nop
 8003d06:	e7fe      	b.n	8003d06 <vTaskSwitchContext+0x3e>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	491b      	ldr	r1, [pc, #108]	; (8003d7c <vTaskSwitchContext+0xb4>)
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4613      	mov	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0e4      	beq.n	8003cec <vTaskSwitchContext+0x24>
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4a13      	ldr	r2, [pc, #76]	; (8003d7c <vTaskSwitchContext+0xb4>)
 8003d2e:	4413      	add	r3, r2
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	605a      	str	r2, [r3, #4]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	3308      	adds	r3, #8
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d104      	bne.n	8003d52 <vTaskSwitchContext+0x8a>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <vTaskSwitchContext+0xb8>)
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	4a06      	ldr	r2, [pc, #24]	; (8003d78 <vTaskSwitchContext+0xb0>)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6013      	str	r3, [r2, #0]
}
 8003d62:	bf00      	nop
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20000cd4 	.word	0x20000cd4
 8003d74:	20000cc0 	.word	0x20000cc0
 8003d78:	20000cb4 	.word	0x20000cb4
 8003d7c:	200007dc 	.word	0x200007dc
 8003d80:	200007d8 	.word	0x200007d8

08003d84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	60fb      	str	r3, [r7, #12]
}
 8003da6:	bf00      	nop
 8003da8:	e7fe      	b.n	8003da8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003daa:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <vTaskPlaceOnEventList+0x44>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3318      	adds	r3, #24
 8003db0:	4619      	mov	r1, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fe fdb9 	bl	800292a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003db8:	2101      	movs	r1, #1
 8003dba:	6838      	ldr	r0, [r7, #0]
 8003dbc:	f000 fa7c 	bl	80042b8 <prvAddCurrentTaskToDelayedList>
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	200007d8 	.word	0x200007d8

08003dcc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	617b      	str	r3, [r7, #20]
}
 8003df0:	bf00      	nop
 8003df2:	e7fe      	b.n	8003df2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <vTaskPlaceOnEventListRestricted+0x54>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3318      	adds	r3, #24
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f7fe fd70 	bl	80028e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e08:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	68b8      	ldr	r0, [r7, #8]
 8003e12:	f000 fa51 	bl	80042b8 <prvAddCurrentTaskToDelayedList>
	}
 8003e16:	bf00      	nop
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	200007d8 	.word	0x200007d8

08003e24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10a      	bne.n	8003e50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	60fb      	str	r3, [r7, #12]
}
 8003e4c:	bf00      	nop
 8003e4e:	e7fe      	b.n	8003e4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	3318      	adds	r3, #24
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe fda1 	bl	800299c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <xTaskRemoveFromEventList+0xb0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d11d      	bne.n	8003e9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	3304      	adds	r3, #4
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe fd98 	bl	800299c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e70:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <xTaskRemoveFromEventList+0xb4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d903      	bls.n	8003e80 <xTaskRemoveFromEventList+0x5c>
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	4a16      	ldr	r2, [pc, #88]	; (8003ed8 <xTaskRemoveFromEventList+0xb4>)
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4a13      	ldr	r2, [pc, #76]	; (8003edc <xTaskRemoveFromEventList+0xb8>)
 8003e8e:	441a      	add	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	4610      	mov	r0, r2
 8003e98:	f7fe fd23 	bl	80028e2 <vListInsertEnd>
 8003e9c:	e005      	b.n	8003eaa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	3318      	adds	r3, #24
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	480e      	ldr	r0, [pc, #56]	; (8003ee0 <xTaskRemoveFromEventList+0xbc>)
 8003ea6:	f7fe fd1c 	bl	80028e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eae:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <xTaskRemoveFromEventList+0xc0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d905      	bls.n	8003ec4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <xTaskRemoveFromEventList+0xc4>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	e001      	b.n	8003ec8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ec8:	697b      	ldr	r3, [r7, #20]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000cd4 	.word	0x20000cd4
 8003ed8:	20000cb4 	.word	0x20000cb4
 8003edc:	200007dc 	.word	0x200007dc
 8003ee0:	20000c6c 	.word	0x20000c6c
 8003ee4:	200007d8 	.word	0x200007d8
 8003ee8:	20000cc0 	.word	0x20000cc0

08003eec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <vTaskInternalSetTimeOutState+0x24>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <vTaskInternalSetTimeOutState+0x28>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	605a      	str	r2, [r3, #4]
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	20000cc4 	.word	0x20000cc4
 8003f14:	20000cb0 	.word	0x20000cb0

08003f18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	613b      	str	r3, [r7, #16]
}
 8003f3a:	bf00      	nop
 8003f3c:	e7fe      	b.n	8003f3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10a      	bne.n	8003f5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	60fb      	str	r3, [r7, #12]
}
 8003f56:	bf00      	nop
 8003f58:	e7fe      	b.n	8003f58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f5a:	f000 fe7b 	bl	8004c54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f5e:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <xTaskCheckForTimeOut+0xbc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f76:	d102      	bne.n	8003f7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	e023      	b.n	8003fc6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <xTaskCheckForTimeOut+0xc0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d007      	beq.n	8003f9a <xTaskCheckForTimeOut+0x82>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d302      	bcc.n	8003f9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f94:	2301      	movs	r3, #1
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	e015      	b.n	8003fc6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d20b      	bcs.n	8003fbc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	1ad2      	subs	r2, r2, r3
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff ff9b 	bl	8003eec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	e004      	b.n	8003fc6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fc6:	f000 fe75 	bl	8004cb4 <vPortExitCritical>

	return xReturn;
 8003fca:	69fb      	ldr	r3, [r7, #28]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3720      	adds	r7, #32
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20000cb0 	.word	0x20000cb0
 8003fd8:	20000cc4 	.word	0x20000cc4

08003fdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <vTaskMissedYield+0x14>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
}
 8003fe6:	bf00      	nop
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	20000cc0 	.word	0x20000cc0

08003ff4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ffc:	f000 f852 	bl	80040a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <prvIdleTask+0x28>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d9f9      	bls.n	8003ffc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <prvIdleTask+0x2c>)
 800400a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004018:	e7f0      	b.n	8003ffc <prvIdleTask+0x8>
 800401a:	bf00      	nop
 800401c:	200007dc 	.word	0x200007dc
 8004020:	e000ed04 	.word	0xe000ed04

08004024 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800402a:	2300      	movs	r3, #0
 800402c:	607b      	str	r3, [r7, #4]
 800402e:	e00c      	b.n	800404a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4a12      	ldr	r2, [pc, #72]	; (8004084 <prvInitialiseTaskLists+0x60>)
 800403c:	4413      	add	r3, r2
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe fc22 	bl	8002888 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3301      	adds	r3, #1
 8004048:	607b      	str	r3, [r7, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b37      	cmp	r3, #55	; 0x37
 800404e:	d9ef      	bls.n	8004030 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004050:	480d      	ldr	r0, [pc, #52]	; (8004088 <prvInitialiseTaskLists+0x64>)
 8004052:	f7fe fc19 	bl	8002888 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004056:	480d      	ldr	r0, [pc, #52]	; (800408c <prvInitialiseTaskLists+0x68>)
 8004058:	f7fe fc16 	bl	8002888 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800405c:	480c      	ldr	r0, [pc, #48]	; (8004090 <prvInitialiseTaskLists+0x6c>)
 800405e:	f7fe fc13 	bl	8002888 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004062:	480c      	ldr	r0, [pc, #48]	; (8004094 <prvInitialiseTaskLists+0x70>)
 8004064:	f7fe fc10 	bl	8002888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004068:	480b      	ldr	r0, [pc, #44]	; (8004098 <prvInitialiseTaskLists+0x74>)
 800406a:	f7fe fc0d 	bl	8002888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800406e:	4b0b      	ldr	r3, [pc, #44]	; (800409c <prvInitialiseTaskLists+0x78>)
 8004070:	4a05      	ldr	r2, [pc, #20]	; (8004088 <prvInitialiseTaskLists+0x64>)
 8004072:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <prvInitialiseTaskLists+0x7c>)
 8004076:	4a05      	ldr	r2, [pc, #20]	; (800408c <prvInitialiseTaskLists+0x68>)
 8004078:	601a      	str	r2, [r3, #0]
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	200007dc 	.word	0x200007dc
 8004088:	20000c3c 	.word	0x20000c3c
 800408c:	20000c50 	.word	0x20000c50
 8004090:	20000c6c 	.word	0x20000c6c
 8004094:	20000c80 	.word	0x20000c80
 8004098:	20000c98 	.word	0x20000c98
 800409c:	20000c64 	.word	0x20000c64
 80040a0:	20000c68 	.word	0x20000c68

080040a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040aa:	e019      	b.n	80040e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040ac:	f000 fdd2 	bl	8004c54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <prvCheckTasksWaitingTermination+0x50>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3304      	adds	r3, #4
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fe fc6d 	bl	800299c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040c2:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <prvCheckTasksWaitingTermination+0x54>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	4a0b      	ldr	r2, [pc, #44]	; (80040f8 <prvCheckTasksWaitingTermination+0x54>)
 80040ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <prvCheckTasksWaitingTermination+0x58>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <prvCheckTasksWaitingTermination+0x58>)
 80040d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040d6:	f000 fded 	bl	8004cb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f810 	bl	8004100 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040e0:	4b06      	ldr	r3, [pc, #24]	; (80040fc <prvCheckTasksWaitingTermination+0x58>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e1      	bne.n	80040ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000c80 	.word	0x20000c80
 80040f8:	20000cac 	.word	0x20000cac
 80040fc:	20000c94 	.word	0x20000c94

08004100 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800410e:	2b00      	cmp	r3, #0
 8004110:	d108      	bne.n	8004124 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	4618      	mov	r0, r3
 8004118:	f000 ff8a 	bl	8005030 <vPortFree>
				vPortFree( pxTCB );
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 ff87 	bl	8005030 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004122:	e018      	b.n	8004156 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800412a:	2b01      	cmp	r3, #1
 800412c:	d103      	bne.n	8004136 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 ff7e 	bl	8005030 <vPortFree>
	}
 8004134:	e00f      	b.n	8004156 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800413c:	2b02      	cmp	r3, #2
 800413e:	d00a      	beq.n	8004156 <prvDeleteTCB+0x56>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	60fb      	str	r3, [r7, #12]
}
 8004152:	bf00      	nop
 8004154:	e7fe      	b.n	8004154 <prvDeleteTCB+0x54>
	}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004166:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <prvResetNextTaskUnblockTime+0x38>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d104      	bne.n	800417a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004170:	4b0a      	ldr	r3, [pc, #40]	; (800419c <prvResetNextTaskUnblockTime+0x3c>)
 8004172:	f04f 32ff 	mov.w	r2, #4294967295
 8004176:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004178:	e008      	b.n	800418c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800417a:	4b07      	ldr	r3, [pc, #28]	; (8004198 <prvResetNextTaskUnblockTime+0x38>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4a04      	ldr	r2, [pc, #16]	; (800419c <prvResetNextTaskUnblockTime+0x3c>)
 800418a:	6013      	str	r3, [r2, #0]
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	20000c64 	.word	0x20000c64
 800419c:	20000ccc 	.word	0x20000ccc

080041a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041a6:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <xTaskGetSchedulerState+0x34>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d102      	bne.n	80041b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041ae:	2301      	movs	r3, #1
 80041b0:	607b      	str	r3, [r7, #4]
 80041b2:	e008      	b.n	80041c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041b4:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <xTaskGetSchedulerState+0x38>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d102      	bne.n	80041c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041bc:	2302      	movs	r3, #2
 80041be:	607b      	str	r3, [r7, #4]
 80041c0:	e001      	b.n	80041c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041c2:	2300      	movs	r3, #0
 80041c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041c6:	687b      	ldr	r3, [r7, #4]
	}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	20000cb8 	.word	0x20000cb8
 80041d8:	20000cd4 	.word	0x20000cd4

080041dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d056      	beq.n	80042a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041f2:	4b2e      	ldr	r3, [pc, #184]	; (80042ac <xTaskPriorityDisinherit+0xd0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d00a      	beq.n	8004212 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	60fb      	str	r3, [r7, #12]
}
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	60bb      	str	r3, [r7, #8]
}
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004234:	1e5a      	subs	r2, r3, #1
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004242:	429a      	cmp	r2, r3
 8004244:	d02c      	beq.n	80042a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424a:	2b00      	cmp	r3, #0
 800424c:	d128      	bne.n	80042a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	3304      	adds	r3, #4
 8004252:	4618      	mov	r0, r3
 8004254:	f7fe fba2 	bl	800299c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004270:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <xTaskPriorityDisinherit+0xd4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d903      	bls.n	8004280 <xTaskPriorityDisinherit+0xa4>
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	4a0c      	ldr	r2, [pc, #48]	; (80042b0 <xTaskPriorityDisinherit+0xd4>)
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4a09      	ldr	r2, [pc, #36]	; (80042b4 <xTaskPriorityDisinherit+0xd8>)
 800428e:	441a      	add	r2, r3
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	3304      	adds	r3, #4
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f7fe fb23 	bl	80028e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800429c:	2301      	movs	r3, #1
 800429e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042a0:	697b      	ldr	r3, [r7, #20]
	}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	200007d8 	.word	0x200007d8
 80042b0:	20000cb4 	.word	0x20000cb4
 80042b4:	200007dc 	.word	0x200007dc

080042b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042c2:	4b21      	ldr	r3, [pc, #132]	; (8004348 <prvAddCurrentTaskToDelayedList+0x90>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042c8:	4b20      	ldr	r3, [pc, #128]	; (800434c <prvAddCurrentTaskToDelayedList+0x94>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3304      	adds	r3, #4
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fe fb64 	bl	800299c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d10a      	bne.n	80042f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042e2:	4b1a      	ldr	r3, [pc, #104]	; (800434c <prvAddCurrentTaskToDelayedList+0x94>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3304      	adds	r3, #4
 80042e8:	4619      	mov	r1, r3
 80042ea:	4819      	ldr	r0, [pc, #100]	; (8004350 <prvAddCurrentTaskToDelayedList+0x98>)
 80042ec:	f7fe faf9 	bl	80028e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042f0:	e026      	b.n	8004340 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4413      	add	r3, r2
 80042f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042fa:	4b14      	ldr	r3, [pc, #80]	; (800434c <prvAddCurrentTaskToDelayedList+0x94>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	429a      	cmp	r2, r3
 8004308:	d209      	bcs.n	800431e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <prvAddCurrentTaskToDelayedList+0x9c>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b0f      	ldr	r3, [pc, #60]	; (800434c <prvAddCurrentTaskToDelayedList+0x94>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3304      	adds	r3, #4
 8004314:	4619      	mov	r1, r3
 8004316:	4610      	mov	r0, r2
 8004318:	f7fe fb07 	bl	800292a <vListInsert>
}
 800431c:	e010      	b.n	8004340 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800431e:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <prvAddCurrentTaskToDelayedList+0x94>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3304      	adds	r3, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f7fe fafd 	bl	800292a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	429a      	cmp	r2, r3
 8004338:	d202      	bcs.n	8004340 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800433a:	4a08      	ldr	r2, [pc, #32]	; (800435c <prvAddCurrentTaskToDelayedList+0xa4>)
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	6013      	str	r3, [r2, #0]
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20000cb0 	.word	0x20000cb0
 800434c:	200007d8 	.word	0x200007d8
 8004350:	20000c98 	.word	0x20000c98
 8004354:	20000c68 	.word	0x20000c68
 8004358:	20000c64 	.word	0x20000c64
 800435c:	20000ccc 	.word	0x20000ccc

08004360 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	; 0x28
 8004364:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800436a:	f000 fb07 	bl	800497c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800436e:	4b1c      	ldr	r3, [pc, #112]	; (80043e0 <xTimerCreateTimerTask+0x80>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d021      	beq.n	80043ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800437e:	1d3a      	adds	r2, r7, #4
 8004380:	f107 0108 	add.w	r1, r7, #8
 8004384:	f107 030c 	add.w	r3, r7, #12
 8004388:	4618      	mov	r0, r3
 800438a:	f7fe fa63 	bl	8002854 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	9202      	str	r2, [sp, #8]
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	2302      	movs	r3, #2
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	2300      	movs	r3, #0
 800439e:	460a      	mov	r2, r1
 80043a0:	4910      	ldr	r1, [pc, #64]	; (80043e4 <xTimerCreateTimerTask+0x84>)
 80043a2:	4811      	ldr	r0, [pc, #68]	; (80043e8 <xTimerCreateTimerTask+0x88>)
 80043a4:	f7ff f810 	bl	80033c8 <xTaskCreateStatic>
 80043a8:	4603      	mov	r3, r0
 80043aa:	4a10      	ldr	r2, [pc, #64]	; (80043ec <xTimerCreateTimerTask+0x8c>)
 80043ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <xTimerCreateTimerTask+0x8c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80043b6:	2301      	movs	r3, #1
 80043b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	613b      	str	r3, [r7, #16]
}
 80043d2:	bf00      	nop
 80043d4:	e7fe      	b.n	80043d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80043d6:	697b      	ldr	r3, [r7, #20]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20000d08 	.word	0x20000d08
 80043e4:	08005340 	.word	0x08005340
 80043e8:	08004525 	.word	0x08004525
 80043ec:	20000d0c 	.word	0x20000d0c

080043f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08a      	sub	sp, #40	; 0x28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80043fe:	2300      	movs	r3, #0
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	623b      	str	r3, [r7, #32]
}
 800441a:	bf00      	nop
 800441c:	e7fe      	b.n	800441c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800441e:	4b1a      	ldr	r3, [pc, #104]	; (8004488 <xTimerGenericCommand+0x98>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d02a      	beq.n	800447c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b05      	cmp	r3, #5
 8004436:	dc18      	bgt.n	800446a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004438:	f7ff feb2 	bl	80041a0 <xTaskGetSchedulerState>
 800443c:	4603      	mov	r3, r0
 800443e:	2b02      	cmp	r3, #2
 8004440:	d109      	bne.n	8004456 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004442:	4b11      	ldr	r3, [pc, #68]	; (8004488 <xTimerGenericCommand+0x98>)
 8004444:	6818      	ldr	r0, [r3, #0]
 8004446:	f107 0110 	add.w	r1, r7, #16
 800444a:	2300      	movs	r3, #0
 800444c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800444e:	f7fe fbd3 	bl	8002bf8 <xQueueGenericSend>
 8004452:	6278      	str	r0, [r7, #36]	; 0x24
 8004454:	e012      	b.n	800447c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <xTimerGenericCommand+0x98>)
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	f107 0110 	add.w	r1, r7, #16
 800445e:	2300      	movs	r3, #0
 8004460:	2200      	movs	r2, #0
 8004462:	f7fe fbc9 	bl	8002bf8 <xQueueGenericSend>
 8004466:	6278      	str	r0, [r7, #36]	; 0x24
 8004468:	e008      	b.n	800447c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800446a:	4b07      	ldr	r3, [pc, #28]	; (8004488 <xTimerGenericCommand+0x98>)
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	f107 0110 	add.w	r1, r7, #16
 8004472:	2300      	movs	r3, #0
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	f7fe fcbd 	bl	8002df4 <xQueueGenericSendFromISR>
 800447a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800447e:	4618      	mov	r0, r3
 8004480:	3728      	adds	r7, #40	; 0x28
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000d08 	.word	0x20000d08

0800448c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af02      	add	r7, sp, #8
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004496:	4b22      	ldr	r3, [pc, #136]	; (8004520 <prvProcessExpiredTimer+0x94>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe fa79 	bl	800299c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d022      	beq.n	80044fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	699a      	ldr	r2, [r3, #24]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	18d1      	adds	r1, r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	6978      	ldr	r0, [r7, #20]
 80044c6:	f000 f8d1 	bl	800466c <prvInsertTimerInActiveList>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d01f      	beq.n	8004510 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044d0:	2300      	movs	r3, #0
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	2300      	movs	r3, #0
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	2100      	movs	r1, #0
 80044da:	6978      	ldr	r0, [r7, #20]
 80044dc:	f7ff ff88 	bl	80043f0 <xTimerGenericCommand>
 80044e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d113      	bne.n	8004510 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	60fb      	str	r3, [r7, #12]
}
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	b2da      	uxtb	r2, r3
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	6978      	ldr	r0, [r7, #20]
 8004516:	4798      	blx	r3
}
 8004518:	bf00      	nop
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000d00 	.word	0x20000d00

08004524 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800452c:	f107 0308 	add.w	r3, r7, #8
 8004530:	4618      	mov	r0, r3
 8004532:	f000 f857 	bl	80045e4 <prvGetNextExpireTime>
 8004536:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4619      	mov	r1, r3
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 f803 	bl	8004548 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004542:	f000 f8d5 	bl	80046f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004546:	e7f1      	b.n	800452c <prvTimerTask+0x8>

08004548 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004552:	f7ff fa43 	bl	80039dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004556:	f107 0308 	add.w	r3, r7, #8
 800455a:	4618      	mov	r0, r3
 800455c:	f000 f866 	bl	800462c <prvSampleTimeNow>
 8004560:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d130      	bne.n	80045ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <prvProcessTimerOrBlockTask+0x3c>
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	429a      	cmp	r2, r3
 8004574:	d806      	bhi.n	8004584 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004576:	f7ff fa3f 	bl	80039f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800457a:	68f9      	ldr	r1, [r7, #12]
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff ff85 	bl	800448c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004582:	e024      	b.n	80045ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800458a:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <prvProcessTimerOrBlockTask+0x90>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <prvProcessTimerOrBlockTask+0x50>
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <prvProcessTimerOrBlockTask+0x52>
 8004598:	2300      	movs	r3, #0
 800459a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800459c:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <prvProcessTimerOrBlockTask+0x94>)
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	4619      	mov	r1, r3
 80045aa:	f7fe fed9 	bl	8003360 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80045ae:	f7ff fa23 	bl	80039f8 <xTaskResumeAll>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10a      	bne.n	80045ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <prvProcessTimerOrBlockTask+0x98>)
 80045ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	f3bf 8f6f 	isb	sy
}
 80045c8:	e001      	b.n	80045ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80045ca:	f7ff fa15 	bl	80039f8 <xTaskResumeAll>
}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20000d04 	.word	0x20000d04
 80045dc:	20000d08 	.word	0x20000d08
 80045e0:	e000ed04 	.word	0xe000ed04

080045e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045ec:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <prvGetNextExpireTime+0x44>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <prvGetNextExpireTime+0x16>
 80045f6:	2201      	movs	r2, #1
 80045f8:	e000      	b.n	80045fc <prvGetNextExpireTime+0x18>
 80045fa:	2200      	movs	r2, #0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d105      	bne.n	8004614 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004608:	4b07      	ldr	r3, [pc, #28]	; (8004628 <prvGetNextExpireTime+0x44>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	e001      	b.n	8004618 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004618:	68fb      	ldr	r3, [r7, #12]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000d00 	.word	0x20000d00

0800462c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004634:	f7ff fa7e 	bl	8003b34 <xTaskGetTickCount>
 8004638:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800463a:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <prvSampleTimeNow+0x3c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	429a      	cmp	r2, r3
 8004642:	d205      	bcs.n	8004650 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004644:	f000 f936 	bl	80048b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	e002      	b.n	8004656 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004656:	4a04      	ldr	r2, [pc, #16]	; (8004668 <prvSampleTimeNow+0x3c>)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800465c:	68fb      	ldr	r3, [r7, #12]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20000d10 	.word	0x20000d10

0800466c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	429a      	cmp	r2, r3
 8004690:	d812      	bhi.n	80046b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	1ad2      	subs	r2, r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	429a      	cmp	r2, r3
 800469e:	d302      	bcc.n	80046a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80046a0:	2301      	movs	r3, #1
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	e01b      	b.n	80046de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <prvInsertTimerInActiveList+0x7c>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3304      	adds	r3, #4
 80046ae:	4619      	mov	r1, r3
 80046b0:	4610      	mov	r0, r2
 80046b2:	f7fe f93a 	bl	800292a <vListInsert>
 80046b6:	e012      	b.n	80046de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d206      	bcs.n	80046ce <prvInsertTimerInActiveList+0x62>
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d302      	bcc.n	80046ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80046c8:	2301      	movs	r3, #1
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	e007      	b.n	80046de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046ce:	4b07      	ldr	r3, [pc, #28]	; (80046ec <prvInsertTimerInActiveList+0x80>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3304      	adds	r3, #4
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f7fe f926 	bl	800292a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80046de:	697b      	ldr	r3, [r7, #20]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20000d04 	.word	0x20000d04
 80046ec:	20000d00 	.word	0x20000d00

080046f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08e      	sub	sp, #56	; 0x38
 80046f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046f6:	e0ca      	b.n	800488e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	da18      	bge.n	8004730 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80046fe:	1d3b      	adds	r3, r7, #4
 8004700:	3304      	adds	r3, #4
 8004702:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	61fb      	str	r3, [r7, #28]
}
 800471c:	bf00      	nop
 800471e:	e7fe      	b.n	800471e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004726:	6850      	ldr	r0, [r2, #4]
 8004728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800472a:	6892      	ldr	r2, [r2, #8]
 800472c:	4611      	mov	r1, r2
 800472e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f2c0 80aa 	blt.w	800488c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	3304      	adds	r3, #4
 8004748:	4618      	mov	r0, r3
 800474a:	f7fe f927 	bl	800299c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800474e:	463b      	mov	r3, r7
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff ff6b 	bl	800462c <prvSampleTimeNow>
 8004756:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b09      	cmp	r3, #9
 800475c:	f200 8097 	bhi.w	800488e <prvProcessReceivedCommands+0x19e>
 8004760:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <prvProcessReceivedCommands+0x78>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	08004791 	.word	0x08004791
 800476c:	08004791 	.word	0x08004791
 8004770:	08004791 	.word	0x08004791
 8004774:	08004805 	.word	0x08004805
 8004778:	08004819 	.word	0x08004819
 800477c:	08004863 	.word	0x08004863
 8004780:	08004791 	.word	0x08004791
 8004784:	08004791 	.word	0x08004791
 8004788:	08004805 	.word	0x08004805
 800478c:	08004819 	.word	0x08004819
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	b2da      	uxtb	r2, r3
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	18d1      	adds	r1, r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047b0:	f7ff ff5c 	bl	800466c <prvInsertTimerInActiveList>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d069      	beq.n	800488e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d05e      	beq.n	800488e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	441a      	add	r2, r3
 80047d8:	2300      	movs	r3, #0
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	2300      	movs	r3, #0
 80047de:	2100      	movs	r1, #0
 80047e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047e2:	f7ff fe05 	bl	80043f0 <xTimerGenericCommand>
 80047e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d14f      	bne.n	800488e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	61bb      	str	r3, [r7, #24]
}
 8004800:	bf00      	nop
 8004802:	e7fe      	b.n	8004802 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800480a:	f023 0301 	bic.w	r3, r3, #1
 800480e:	b2da      	uxtb	r2, r3
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004816:	e03a      	b.n	800488e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	b2da      	uxtb	r2, r3
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	617b      	str	r3, [r7, #20]
}
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	18d1      	adds	r1, r2, r3
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800485c:	f7ff ff06 	bl	800466c <prvInsertTimerInActiveList>
					break;
 8004860:	e015      	b.n	800488e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d103      	bne.n	8004878 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004872:	f000 fbdd 	bl	8005030 <vPortFree>
 8004876:	e00a      	b.n	800488e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800487e:	f023 0301 	bic.w	r3, r3, #1
 8004882:	b2da      	uxtb	r2, r3
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800488a:	e000      	b.n	800488e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800488c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800488e:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <prvProcessReceivedCommands+0x1c0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	1d39      	adds	r1, r7, #4
 8004894:	2200      	movs	r2, #0
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe fb48 	bl	8002f2c <xQueueReceive>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f47f af2a 	bne.w	80046f8 <prvProcessReceivedCommands+0x8>
	}
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	3730      	adds	r7, #48	; 0x30
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000d08 	.word	0x20000d08

080048b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048ba:	e048      	b.n	800494e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048bc:	4b2d      	ldr	r3, [pc, #180]	; (8004974 <prvSwitchTimerLists+0xc0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c6:	4b2b      	ldr	r3, [pc, #172]	; (8004974 <prvSwitchTimerLists+0xc0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fe f861 	bl	800299c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d02e      	beq.n	800494e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4413      	add	r3, r2
 80048f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d90e      	bls.n	8004920 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800490e:	4b19      	ldr	r3, [pc, #100]	; (8004974 <prvSwitchTimerLists+0xc0>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3304      	adds	r3, #4
 8004916:	4619      	mov	r1, r3
 8004918:	4610      	mov	r0, r2
 800491a:	f7fe f806 	bl	800292a <vListInsert>
 800491e:	e016      	b.n	800494e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004920:	2300      	movs	r3, #0
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	2300      	movs	r3, #0
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	2100      	movs	r1, #0
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f7ff fd60 	bl	80043f0 <xTimerGenericCommand>
 8004930:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10a      	bne.n	800494e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	603b      	str	r3, [r7, #0]
}
 800494a:	bf00      	nop
 800494c:	e7fe      	b.n	800494c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <prvSwitchTimerLists+0xc0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1b1      	bne.n	80048bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <prvSwitchTimerLists+0xc0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800495e:	4b06      	ldr	r3, [pc, #24]	; (8004978 <prvSwitchTimerLists+0xc4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a04      	ldr	r2, [pc, #16]	; (8004974 <prvSwitchTimerLists+0xc0>)
 8004964:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004966:	4a04      	ldr	r2, [pc, #16]	; (8004978 <prvSwitchTimerLists+0xc4>)
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	6013      	str	r3, [r2, #0]
}
 800496c:	bf00      	nop
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000d00 	.word	0x20000d00
 8004978:	20000d04 	.word	0x20000d04

0800497c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004982:	f000 f967 	bl	8004c54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004986:	4b15      	ldr	r3, [pc, #84]	; (80049dc <prvCheckForValidListAndQueue+0x60>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d120      	bne.n	80049d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800498e:	4814      	ldr	r0, [pc, #80]	; (80049e0 <prvCheckForValidListAndQueue+0x64>)
 8004990:	f7fd ff7a 	bl	8002888 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004994:	4813      	ldr	r0, [pc, #76]	; (80049e4 <prvCheckForValidListAndQueue+0x68>)
 8004996:	f7fd ff77 	bl	8002888 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800499a:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <prvCheckForValidListAndQueue+0x6c>)
 800499c:	4a10      	ldr	r2, [pc, #64]	; (80049e0 <prvCheckForValidListAndQueue+0x64>)
 800499e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80049a0:	4b12      	ldr	r3, [pc, #72]	; (80049ec <prvCheckForValidListAndQueue+0x70>)
 80049a2:	4a10      	ldr	r2, [pc, #64]	; (80049e4 <prvCheckForValidListAndQueue+0x68>)
 80049a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80049a6:	2300      	movs	r3, #0
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <prvCheckForValidListAndQueue+0x74>)
 80049ac:	4a11      	ldr	r2, [pc, #68]	; (80049f4 <prvCheckForValidListAndQueue+0x78>)
 80049ae:	2110      	movs	r1, #16
 80049b0:	200a      	movs	r0, #10
 80049b2:	f7fe f885 	bl	8002ac0 <xQueueGenericCreateStatic>
 80049b6:	4603      	mov	r3, r0
 80049b8:	4a08      	ldr	r2, [pc, #32]	; (80049dc <prvCheckForValidListAndQueue+0x60>)
 80049ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80049bc:	4b07      	ldr	r3, [pc, #28]	; (80049dc <prvCheckForValidListAndQueue+0x60>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <prvCheckForValidListAndQueue+0x60>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	490b      	ldr	r1, [pc, #44]	; (80049f8 <prvCheckForValidListAndQueue+0x7c>)
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fe fc9e 	bl	800330c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049d0:	f000 f970 	bl	8004cb4 <vPortExitCritical>
}
 80049d4:	bf00      	nop
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000d08 	.word	0x20000d08
 80049e0:	20000cd8 	.word	0x20000cd8
 80049e4:	20000cec 	.word	0x20000cec
 80049e8:	20000d00 	.word	0x20000d00
 80049ec:	20000d04 	.word	0x20000d04
 80049f0:	20000db4 	.word	0x20000db4
 80049f4:	20000d14 	.word	0x20000d14
 80049f8:	08005348 	.word	0x08005348

080049fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3b04      	subs	r3, #4
 8004a0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3b04      	subs	r3, #4
 8004a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f023 0201 	bic.w	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3b04      	subs	r3, #4
 8004a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a2c:	4a0c      	ldr	r2, [pc, #48]	; (8004a60 <pxPortInitialiseStack+0x64>)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3b14      	subs	r3, #20
 8004a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3b04      	subs	r3, #4
 8004a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f06f 0202 	mvn.w	r2, #2
 8004a4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3b20      	subs	r3, #32
 8004a50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a52:	68fb      	ldr	r3, [r7, #12]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	08004a65 	.word	0x08004a65

08004a64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a6e:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <prvTaskExitError+0x54>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a76:	d00a      	beq.n	8004a8e <prvTaskExitError+0x2a>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	60fb      	str	r3, [r7, #12]
}
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <prvTaskExitError+0x28>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	60bb      	str	r3, [r7, #8]
}
 8004aa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004aa2:	bf00      	nop
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0fc      	beq.n	8004aa4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	2000000c 	.word	0x2000000c
 8004abc:	00000000 	.word	0x00000000

08004ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <pxCurrentTCBConst2>)
 8004ac2:	6819      	ldr	r1, [r3, #0]
 8004ac4:	6808      	ldr	r0, [r1, #0]
 8004ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aca:	f380 8809 	msr	PSP, r0
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f04f 0000 	mov.w	r0, #0
 8004ad6:	f380 8811 	msr	BASEPRI, r0
 8004ada:	4770      	bx	lr
 8004adc:	f3af 8000 	nop.w

08004ae0 <pxCurrentTCBConst2>:
 8004ae0:	200007d8 	.word	0x200007d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop

08004ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ae8:	4808      	ldr	r0, [pc, #32]	; (8004b0c <prvPortStartFirstTask+0x24>)
 8004aea:	6800      	ldr	r0, [r0, #0]
 8004aec:	6800      	ldr	r0, [r0, #0]
 8004aee:	f380 8808 	msr	MSP, r0
 8004af2:	f04f 0000 	mov.w	r0, #0
 8004af6:	f380 8814 	msr	CONTROL, r0
 8004afa:	b662      	cpsie	i
 8004afc:	b661      	cpsie	f
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	df00      	svc	0
 8004b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b0a:	bf00      	nop
 8004b0c:	e000ed08 	.word	0xe000ed08

08004b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b16:	4b46      	ldr	r3, [pc, #280]	; (8004c30 <xPortStartScheduler+0x120>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a46      	ldr	r2, [pc, #280]	; (8004c34 <xPortStartScheduler+0x124>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d10a      	bne.n	8004b36 <xPortStartScheduler+0x26>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	613b      	str	r3, [r7, #16]
}
 8004b32:	bf00      	nop
 8004b34:	e7fe      	b.n	8004b34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b36:	4b3e      	ldr	r3, [pc, #248]	; (8004c30 <xPortStartScheduler+0x120>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a3f      	ldr	r2, [pc, #252]	; (8004c38 <xPortStartScheduler+0x128>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d10a      	bne.n	8004b56 <xPortStartScheduler+0x46>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	60fb      	str	r3, [r7, #12]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b56:	4b39      	ldr	r3, [pc, #228]	; (8004c3c <xPortStartScheduler+0x12c>)
 8004b58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	22ff      	movs	r2, #255	; 0xff
 8004b66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	4b31      	ldr	r3, [pc, #196]	; (8004c40 <xPortStartScheduler+0x130>)
 8004b7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b7e:	4b31      	ldr	r3, [pc, #196]	; (8004c44 <xPortStartScheduler+0x134>)
 8004b80:	2207      	movs	r2, #7
 8004b82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b84:	e009      	b.n	8004b9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b86:	4b2f      	ldr	r3, [pc, #188]	; (8004c44 <xPortStartScheduler+0x134>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	4a2d      	ldr	r2, [pc, #180]	; (8004c44 <xPortStartScheduler+0x134>)
 8004b8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba2:	2b80      	cmp	r3, #128	; 0x80
 8004ba4:	d0ef      	beq.n	8004b86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ba6:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <xPortStartScheduler+0x134>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f1c3 0307 	rsb	r3, r3, #7
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d00a      	beq.n	8004bc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	60bb      	str	r3, [r7, #8]
}
 8004bc4:	bf00      	nop
 8004bc6:	e7fe      	b.n	8004bc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bc8:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	4a1d      	ldr	r2, [pc, #116]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bd2:	4b1c      	ldr	r3, [pc, #112]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bda:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004be6:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <xPortStartScheduler+0x138>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a17      	ldr	r2, [pc, #92]	; (8004c48 <xPortStartScheduler+0x138>)
 8004bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bf2:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <xPortStartScheduler+0x138>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <xPortStartScheduler+0x138>)
 8004bf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bfe:	f000 f8dd 	bl	8004dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <xPortStartScheduler+0x13c>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c08:	f000 f8fc 	bl	8004e04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c0c:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <xPortStartScheduler+0x140>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0f      	ldr	r2, [pc, #60]	; (8004c50 <xPortStartScheduler+0x140>)
 8004c12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c18:	f7ff ff66 	bl	8004ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c1c:	f7ff f854 	bl	8003cc8 <vTaskSwitchContext>
	prvTaskExitError();
 8004c20:	f7ff ff20 	bl	8004a64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	e000ed00 	.word	0xe000ed00
 8004c34:	410fc271 	.word	0x410fc271
 8004c38:	410fc270 	.word	0x410fc270
 8004c3c:	e000e400 	.word	0xe000e400
 8004c40:	20000e04 	.word	0x20000e04
 8004c44:	20000e08 	.word	0x20000e08
 8004c48:	e000ed20 	.word	0xe000ed20
 8004c4c:	2000000c 	.word	0x2000000c
 8004c50:	e000ef34 	.word	0xe000ef34

08004c54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	607b      	str	r3, [r7, #4]
}
 8004c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c6e:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <vPortEnterCritical+0x58>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3301      	adds	r3, #1
 8004c74:	4a0d      	ldr	r2, [pc, #52]	; (8004cac <vPortEnterCritical+0x58>)
 8004c76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <vPortEnterCritical+0x58>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d10f      	bne.n	8004ca0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <vPortEnterCritical+0x5c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	603b      	str	r3, [r7, #0]
}
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <vPortEnterCritical+0x4a>
	}
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	2000000c 	.word	0x2000000c
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <vPortExitCritical+0x50>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <vPortExitCritical+0x24>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	607b      	str	r3, [r7, #4]
}
 8004cd4:	bf00      	nop
 8004cd6:	e7fe      	b.n	8004cd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <vPortExitCritical+0x50>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <vPortExitCritical+0x50>)
 8004ce0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <vPortExitCritical+0x50>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d105      	bne.n	8004cf6 <vPortExitCritical+0x42>
 8004cea:	2300      	movs	r3, #0
 8004cec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	f383 8811 	msr	BASEPRI, r3
}
 8004cf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	2000000c 	.word	0x2000000c
	...

08004d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d10:	f3ef 8009 	mrs	r0, PSP
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <pxCurrentTCBConst>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	f01e 0f10 	tst.w	lr, #16
 8004d20:	bf08      	it	eq
 8004d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2a:	6010      	str	r0, [r2, #0]
 8004d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d34:	f380 8811 	msr	BASEPRI, r0
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f7fe ffc2 	bl	8003cc8 <vTaskSwitchContext>
 8004d44:	f04f 0000 	mov.w	r0, #0
 8004d48:	f380 8811 	msr	BASEPRI, r0
 8004d4c:	bc09      	pop	{r0, r3}
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	6808      	ldr	r0, [r1, #0]
 8004d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d56:	f01e 0f10 	tst.w	lr, #16
 8004d5a:	bf08      	it	eq
 8004d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d60:	f380 8809 	msr	PSP, r0
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	f3af 8000 	nop.w

08004d70 <pxCurrentTCBConst>:
 8004d70:	200007d8 	.word	0x200007d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop

08004d78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	607b      	str	r3, [r7, #4]
}
 8004d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d92:	f7fe fedf 	bl	8003b54 <xTaskIncrementTick>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <xPortSysTickHandler+0x40>)
 8004d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	2300      	movs	r3, #0
 8004da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f383 8811 	msr	BASEPRI, r3
}
 8004dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	e000ed04 	.word	0xe000ed04

08004dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <vPortSetupTimerInterrupt+0x34>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004dc6:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <vPortSetupTimerInterrupt+0x38>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <vPortSetupTimerInterrupt+0x3c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a0a      	ldr	r2, [pc, #40]	; (8004dfc <vPortSetupTimerInterrupt+0x40>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	099b      	lsrs	r3, r3, #6
 8004dd8:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <vPortSetupTimerInterrupt+0x44>)
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dde:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <vPortSetupTimerInterrupt+0x34>)
 8004de0:	2207      	movs	r2, #7
 8004de2:	601a      	str	r2, [r3, #0]
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	e000e010 	.word	0xe000e010
 8004df4:	e000e018 	.word	0xe000e018
 8004df8:	20000000 	.word	0x20000000
 8004dfc:	10624dd3 	.word	0x10624dd3
 8004e00:	e000e014 	.word	0xe000e014

08004e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e14 <vPortEnableVFP+0x10>
 8004e08:	6801      	ldr	r1, [r0, #0]
 8004e0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e0e:	6001      	str	r1, [r0, #0]
 8004e10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e12:	bf00      	nop
 8004e14:	e000ed88 	.word	0xe000ed88

08004e18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e1e:	f3ef 8305 	mrs	r3, IPSR
 8004e22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b0f      	cmp	r3, #15
 8004e28:	d914      	bls.n	8004e54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e2a:	4a17      	ldr	r2, [pc, #92]	; (8004e88 <vPortValidateInterruptPriority+0x70>)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e34:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <vPortValidateInterruptPriority+0x74>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	7afa      	ldrb	r2, [r7, #11]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d20a      	bcs.n	8004e54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	607b      	str	r3, [r7, #4]
}
 8004e50:	bf00      	nop
 8004e52:	e7fe      	b.n	8004e52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e54:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <vPortValidateInterruptPriority+0x78>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <vPortValidateInterruptPriority+0x7c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d90a      	bls.n	8004e7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	603b      	str	r3, [r7, #0]
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <vPortValidateInterruptPriority+0x60>
	}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	e000e3f0 	.word	0xe000e3f0
 8004e8c:	20000e04 	.word	0x20000e04
 8004e90:	e000ed0c 	.word	0xe000ed0c
 8004e94:	20000e08 	.word	0x20000e08

08004e98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	; 0x28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ea4:	f7fe fd9a 	bl	80039dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ea8:	4b5b      	ldr	r3, [pc, #364]	; (8005018 <pvPortMalloc+0x180>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004eb0:	f000 f920 	bl	80050f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004eb4:	4b59      	ldr	r3, [pc, #356]	; (800501c <pvPortMalloc+0x184>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f040 8093 	bne.w	8004fe8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01d      	beq.n	8004f04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004ec8:	2208      	movs	r2, #8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4413      	add	r3, r2
 8004ece:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d014      	beq.n	8004f04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f023 0307 	bic.w	r3, r3, #7
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <pvPortMalloc+0x6c>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	617b      	str	r3, [r7, #20]
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d06e      	beq.n	8004fe8 <pvPortMalloc+0x150>
 8004f0a:	4b45      	ldr	r3, [pc, #276]	; (8005020 <pvPortMalloc+0x188>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d869      	bhi.n	8004fe8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f14:	4b43      	ldr	r3, [pc, #268]	; (8005024 <pvPortMalloc+0x18c>)
 8004f16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f18:	4b42      	ldr	r3, [pc, #264]	; (8005024 <pvPortMalloc+0x18c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f1e:	e004      	b.n	8004f2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d903      	bls.n	8004f3c <pvPortMalloc+0xa4>
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f1      	bne.n	8004f20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f3c:	4b36      	ldr	r3, [pc, #216]	; (8005018 <pvPortMalloc+0x180>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d050      	beq.n	8004fe8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2208      	movs	r2, #8
 8004f4c:	4413      	add	r3, r2
 8004f4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	1ad2      	subs	r2, r2, r3
 8004f60:	2308      	movs	r3, #8
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d91f      	bls.n	8004fa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <pvPortMalloc+0xf8>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	613b      	str	r3, [r7, #16]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	1ad2      	subs	r2, r2, r3
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fa2:	69b8      	ldr	r0, [r7, #24]
 8004fa4:	f000 f908 	bl	80051b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <pvPortMalloc+0x188>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	4a1b      	ldr	r2, [pc, #108]	; (8005020 <pvPortMalloc+0x188>)
 8004fb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fb6:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <pvPortMalloc+0x188>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <pvPortMalloc+0x190>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d203      	bcs.n	8004fca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fc2:	4b17      	ldr	r3, [pc, #92]	; (8005020 <pvPortMalloc+0x188>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a18      	ldr	r2, [pc, #96]	; (8005028 <pvPortMalloc+0x190>)
 8004fc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <pvPortMalloc+0x184>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004fde:	4b13      	ldr	r3, [pc, #76]	; (800502c <pvPortMalloc+0x194>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	4a11      	ldr	r2, [pc, #68]	; (800502c <pvPortMalloc+0x194>)
 8004fe6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fe8:	f7fe fd06 	bl	80039f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <pvPortMalloc+0x174>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	60fb      	str	r3, [r7, #12]
}
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <pvPortMalloc+0x172>
	return pvReturn;
 800500c:	69fb      	ldr	r3, [r7, #28]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3728      	adds	r7, #40	; 0x28
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20004a14 	.word	0x20004a14
 800501c:	20004a28 	.word	0x20004a28
 8005020:	20004a18 	.word	0x20004a18
 8005024:	20004a0c 	.word	0x20004a0c
 8005028:	20004a1c 	.word	0x20004a1c
 800502c:	20004a20 	.word	0x20004a20

08005030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d04d      	beq.n	80050de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005042:	2308      	movs	r3, #8
 8005044:	425b      	negs	r3, r3
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4413      	add	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <vPortFree+0xb8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <vPortFree+0x44>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	60fb      	str	r3, [r7, #12]
}
 8005070:	bf00      	nop
 8005072:	e7fe      	b.n	8005072 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <vPortFree+0x62>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	60bb      	str	r3, [r7, #8]
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <vPortFree+0xb8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4013      	ands	r3, r2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01e      	beq.n	80050de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d11a      	bne.n	80050de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <vPortFree+0xb8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	401a      	ands	r2, r3
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050b8:	f7fe fc90 	bl	80039dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <vPortFree+0xbc>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4413      	add	r3, r2
 80050c6:	4a09      	ldr	r2, [pc, #36]	; (80050ec <vPortFree+0xbc>)
 80050c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050ca:	6938      	ldr	r0, [r7, #16]
 80050cc:	f000 f874 	bl	80051b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80050d0:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <vPortFree+0xc0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3301      	adds	r3, #1
 80050d6:	4a06      	ldr	r2, [pc, #24]	; (80050f0 <vPortFree+0xc0>)
 80050d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80050da:	f7fe fc8d 	bl	80039f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050de:	bf00      	nop
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20004a28 	.word	0x20004a28
 80050ec:	20004a18 	.word	0x20004a18
 80050f0:	20004a24 	.word	0x20004a24

080050f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80050fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005100:	4b27      	ldr	r3, [pc, #156]	; (80051a0 <prvHeapInit+0xac>)
 8005102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00c      	beq.n	8005128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3307      	adds	r3, #7
 8005112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0307 	bic.w	r3, r3, #7
 800511a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	4a1f      	ldr	r2, [pc, #124]	; (80051a0 <prvHeapInit+0xac>)
 8005124:	4413      	add	r3, r2
 8005126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800512c:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <prvHeapInit+0xb0>)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005132:	4b1c      	ldr	r3, [pc, #112]	; (80051a4 <prvHeapInit+0xb0>)
 8005134:	2200      	movs	r2, #0
 8005136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	4413      	add	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005140:	2208      	movs	r2, #8
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1a9b      	subs	r3, r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0307 	bic.w	r3, r3, #7
 800514e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <prvHeapInit+0xb4>)
 8005154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005156:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <prvHeapInit+0xb4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2200      	movs	r2, #0
 800515c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800515e:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <prvHeapInit+0xb4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <prvHeapInit+0xb4>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <prvHeapInit+0xb8>)
 8005182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	4a09      	ldr	r2, [pc, #36]	; (80051b0 <prvHeapInit+0xbc>)
 800518a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800518c:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <prvHeapInit+0xc0>)
 800518e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005192:	601a      	str	r2, [r3, #0]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	20000e0c 	.word	0x20000e0c
 80051a4:	20004a0c 	.word	0x20004a0c
 80051a8:	20004a14 	.word	0x20004a14
 80051ac:	20004a1c 	.word	0x20004a1c
 80051b0:	20004a18 	.word	0x20004a18
 80051b4:	20004a28 	.word	0x20004a28

080051b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051c0:	4b28      	ldr	r3, [pc, #160]	; (8005264 <prvInsertBlockIntoFreeList+0xac>)
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	e002      	b.n	80051cc <prvInsertBlockIntoFreeList+0x14>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d8f7      	bhi.n	80051c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	4413      	add	r3, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d108      	bne.n	80051fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	441a      	add	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	441a      	add	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d118      	bne.n	8005240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4b15      	ldr	r3, [pc, #84]	; (8005268 <prvInsertBlockIntoFreeList+0xb0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d00d      	beq.n	8005236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	441a      	add	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	e008      	b.n	8005248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005236:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <prvInsertBlockIntoFreeList+0xb0>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	e003      	b.n	8005248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	429a      	cmp	r2, r3
 800524e:	d002      	beq.n	8005256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005256:	bf00      	nop
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20004a0c 	.word	0x20004a0c
 8005268:	20004a14 	.word	0x20004a14

0800526c <__libc_init_array>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	4d0d      	ldr	r5, [pc, #52]	; (80052a4 <__libc_init_array+0x38>)
 8005270:	4c0d      	ldr	r4, [pc, #52]	; (80052a8 <__libc_init_array+0x3c>)
 8005272:	1b64      	subs	r4, r4, r5
 8005274:	10a4      	asrs	r4, r4, #2
 8005276:	2600      	movs	r6, #0
 8005278:	42a6      	cmp	r6, r4
 800527a:	d109      	bne.n	8005290 <__libc_init_array+0x24>
 800527c:	4d0b      	ldr	r5, [pc, #44]	; (80052ac <__libc_init_array+0x40>)
 800527e:	4c0c      	ldr	r4, [pc, #48]	; (80052b0 <__libc_init_array+0x44>)
 8005280:	f000 f82e 	bl	80052e0 <_init>
 8005284:	1b64      	subs	r4, r4, r5
 8005286:	10a4      	asrs	r4, r4, #2
 8005288:	2600      	movs	r6, #0
 800528a:	42a6      	cmp	r6, r4
 800528c:	d105      	bne.n	800529a <__libc_init_array+0x2e>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	f855 3b04 	ldr.w	r3, [r5], #4
 8005294:	4798      	blx	r3
 8005296:	3601      	adds	r6, #1
 8005298:	e7ee      	b.n	8005278 <__libc_init_array+0xc>
 800529a:	f855 3b04 	ldr.w	r3, [r5], #4
 800529e:	4798      	blx	r3
 80052a0:	3601      	adds	r6, #1
 80052a2:	e7f2      	b.n	800528a <__libc_init_array+0x1e>
 80052a4:	08005370 	.word	0x08005370
 80052a8:	08005370 	.word	0x08005370
 80052ac:	08005370 	.word	0x08005370
 80052b0:	08005374 	.word	0x08005374

080052b4 <memcpy>:
 80052b4:	440a      	add	r2, r1
 80052b6:	4291      	cmp	r1, r2
 80052b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80052bc:	d100      	bne.n	80052c0 <memcpy+0xc>
 80052be:	4770      	bx	lr
 80052c0:	b510      	push	{r4, lr}
 80052c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052ca:	4291      	cmp	r1, r2
 80052cc:	d1f9      	bne.n	80052c2 <memcpy+0xe>
 80052ce:	bd10      	pop	{r4, pc}

080052d0 <memset>:
 80052d0:	4402      	add	r2, r0
 80052d2:	4603      	mov	r3, r0
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d100      	bne.n	80052da <memset+0xa>
 80052d8:	4770      	bx	lr
 80052da:	f803 1b01 	strb.w	r1, [r3], #1
 80052de:	e7f9      	b.n	80052d4 <memset+0x4>

080052e0 <_init>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	bf00      	nop
 80052e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e6:	bc08      	pop	{r3}
 80052e8:	469e      	mov	lr, r3
 80052ea:	4770      	bx	lr

080052ec <_fini>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr
