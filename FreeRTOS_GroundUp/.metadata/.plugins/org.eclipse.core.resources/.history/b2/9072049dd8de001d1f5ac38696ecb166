#include <stdio.h>
#include <stdbool.h>
#include "main.h"
#include "cmsis_os.h"

UART_HandleTypeDef huart2;

#define STACK_SIZE 			512

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
int USART2_write(int ch);
int __io_putchar(int ch);

void vGreenLedControllerTask(void *pvParameters);
void vOrangeLedControllerTask(void *pvParameters);
void vBlueLedControllerTask(void *pvParameters);
void vRedLedControllerTask(void *pvParameters);
void Timer1_Callback(void *arg);
void Timer2_Callback(void *arg);

typedef uint32_t TaskProfiler;
TaskProfiler Orange_TaskProfiler, Red_TaskProfiler, Green_TaskProfiler, Blue_TaskProfiler;
TaskProfiler Timer_1_TaskProfiler, Timer_2_TaskProfiler;

osThreadId_t red_id, green_id, blue_id, orange_id;

osTimerId_t	timer_1_id, timer_2_id;

osMessageQueueId_t msg_queue_id;

const osMessageQueueAttr_t msgQueueAttribs = {
		.name = "Msg1 Queue"
};

int main(void)
{

  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_USART2_UART_Init();

  //Initialize Kernel
  osKernelInitialize();

  timer_1_id = osTimerNew(Timer1_Callback, osTimerOnce, NULL, NULL);
  timer_2_id = osTimerNew(Timer2_Callback, osTimerPeriodic, NULL, NULL);

  //Create the threads
  osThreadAttr_t greenThreadAttribs = { .name = "GreenTasks",
		  	  	  	  	  	  	  	  	.stack_size = STACK_SIZE,
										.priority = osPriorityNormal
  	  	  	  	  	  	  	  	  	  };

  green_id = osThreadNew(vGreenLedControllerTask, NULL, &greenThreadAttribs);

  osThreadAttr_t redThreadAttribs = { .name = "RedTasks",
		  	  	  	  	  	  	  	  	.stack_size = STACK_SIZE,
										.priority = osPriorityNormal
  	  	  	  	  	  	  	  	  	  };

  red_id = osThreadNew(vRedLedControllerTask, NULL, &redThreadAttribs);

  osThreadAttr_t blueThreadAttribs = { .name = "BlueTasks",
		  	  	  	  	  	  	  	  	.stack_size = STACK_SIZE,
										.priority = osPriorityNormal
  	  	  	  	  	  	  	  	  	  };

  blue_id = osThreadNew(vBlueLedControllerTask, NULL, &blueThreadAttribs);

  osThreadAttr_t orangeThreadAttribs = { .name = "OrangeTasks",
		  	  	  	  	  	  	  	  	.stack_size = STACK_SIZE,
										.priority = osPriorityNormal
  	  	  	  	  	  	  	  	  	  };

  orange_id = osThreadNew(vOrangeLedControllerTask, NULL, &orangeThreadAttribs);

  msg_queue_id = osMessageQueueNew(5, sizeof(uint16_t), &msgQueueAttribs);

  //Start the kernel
  osKernelStart();


  while (1)
  {

  }
}

void Timer1_Callback(void *arg)
{
	Timer_1_TaskProfiler++;
}

void Timer2_Callback(void *arg)
{
	Timer_2_TaskProfiler++;
}

void vGreenLedControllerTask(void *pvParameters)
{
	while(1)
	{
		Green_TaskProfiler++;
		osDelay(100);
	}
}

void vOrangeLedControllerTask(void *pvParameters)
{
	while(1)
	{
		Orange_TaskProfiler++;
		osDelay(100);
	}
}


void vBlueLedControllerTask(void *pvParameters)
{

	int32_t rcv_msg[1];
	int32_t date;

	osTimerStart(timer_1_id, 5000);
	osTimerStart(timer_2_id, 1000);

	while(1)
	{
		Blue_TaskProfiler++;
		osMessageQueueGet(msg_queue_id, &rcv_msg, NULL, osWaitForever);
		date = rcv_msg[0];
		printf("The message received is : %d \r\n", date);

		osDelay(100);
	}
}

void vRedLedControllerTask(void *pvParameters)
{
	uint16_t valueToSend[1] = {2050};
	while(1)
	{
		Red_TaskProfiler++;
		osMessageQueuePut(msg_queue_id, &valueToSend, 0, 0);

		osDelay(100);
	}
}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}


static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }

}


static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}


int USART2_write(int ch)
{
	while(!(USART2->SR & 0x0080))
	{
		USART2->DR = (ch & 0xFF);
	}
	return ch;
}

int __io_putchar(int ch)
{
//	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
	USART2_write(ch);
	return ch;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }

}

void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {
  }
}

#ifdef  USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line)
{
}
#endif /* USE_FULL_ASSERT */
