
22_GateKeeper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c8  080066c8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080066c8  080066c8  000166c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066d0  080066d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066d0  080066d0  000166d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066d4  080066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080066d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a20  20000074  0800674c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a94  0800674c  00024a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a44  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003767  00000000  00000000  00039ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  0003d250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003e7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024805  00000000  00000000  0003fc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186a9  00000000  00000000  0006442d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc7f2  00000000  00000000  0007cad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001592c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006230  00000000  00000000  00159318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006594 	.word	0x08006594

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006594 	.word	0x08006594

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <adc_init>:
#include "stm32f4xx_hal.h"

void adc_init(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	//Enable the GPIOA clock
	RCC -> AHB1ENR |= (1U << 0);
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <adc_init+0x50>)
 80005ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005bc:	4a11      	ldr	r2, [pc, #68]	; (8000604 <adc_init+0x50>)
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6313      	str	r3, [r2, #48]	; 0x30

	//Enable clock for ADC1
	RCC -> APB2ENR |= (1U << 8);
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <adc_init+0x50>)
 80005c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005c8:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <adc_init+0x50>)
 80005ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ce:	6453      	str	r3, [r2, #68]	; 0x44

	//Set PA1 to analog mode
	GPIOA -> MODER |= 0xC;
 80005d0:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <adc_init+0x54>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0c      	ldr	r2, [pc, #48]	; (8000608 <adc_init+0x54>)
 80005d6:	f043 030c 	orr.w	r3, r3, #12
 80005da:	6013      	str	r3, [r2, #0]

	ADC1 -> CR2 = 0;	// SW trigger
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <adc_init+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
	ADC1 -> SQR3 = 1;	// conversion sequence starts at channel 1
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <adc_init+0x58>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1 -> SQR1 = 0;	// conversion sequence length 1
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <adc_init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1 -> CR2 |= 1;	// enable ADC1
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <adc_init+0x58>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4a06      	ldr	r2, [pc, #24]	; (800060c <adc_init+0x58>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6093      	str	r3, [r2, #8]
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	40023800 	.word	0x40023800
 8000608:	40020000 	.word	0x40020000
 800060c:	40012000 	.word	0x40012000

08000610 <read_analog_sensor>:

uint32_t read_analog_sensor(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
	ADC1 -> CR2 |= (1U << 30); // Start conversion
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <read_analog_sensor+0x2c>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	4a08      	ldr	r2, [pc, #32]	; (800063c <read_analog_sensor+0x2c>)
 800061a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800061e:	6093      	str	r3, [r2, #8]

	while(!(ADC1 -> SR & 2)){} // Wait for conversion to complete
 8000620:	bf00      	nop
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <read_analog_sensor+0x2c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f9      	beq.n	8000622 <read_analog_sensor+0x12>

	return ADC1 -> DR;
 800062e:	4b03      	ldr	r3, [pc, #12]	; (800063c <read_analog_sensor+0x2c>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40012000 	.word	0x40012000

08000640 <goio_init>:

	NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void goio_init(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
	//Enable GPIOC clock
	RCC -> AHB1ENR |= 4;
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <goio_init+0x1c>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <goio_init+0x1c>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800

08000660 <read_digital_sensor>:

uint8_t read_digital_sensor(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
	if(GPIOC -> IDR & 0x2000)
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <read_digital_sensor+0x20>)
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <read_digital_sensor+0x14>
	{
		return 1;
 8000670:	2301      	movs	r3, #1
 8000672:	e000      	b.n	8000676 <read_digital_sensor+0x16>
	}
	else
	{
		return 0;
 8000674:	2300      	movs	r3, #0
	}
}
 8000676:	4618      	mov	r0, r3
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	40020800 	.word	0x40020800

08000684 <main>:
int value_to_print;

QueueHandle_t xPrintQueue;

int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af02      	add	r7, sp, #8

  HAL_Init();
 800068a:	f000 fba7 	bl	8000ddc <HAL_Init>
  SystemClock_Config();
 800068e:	f000 f893 	bl	80007b8 <SystemClock_Config>
  MX_GPIO_Init();
 8000692:	f000 f8ff 	bl	8000894 <MX_GPIO_Init>
  USART2_UART_TX_Init();
 8000696:	f000 fb2f 	bl	8000cf8 <USART2_UART_TX_Init>

  printf("system initializing.....\r\n");
 800069a:	4816      	ldr	r0, [pc, #88]	; (80006f4 <main+0x70>)
 800069c:	f004 fffc 	bl	8005698 <puts>


  xTaskCreate(digital_sensor_task,
 80006a0:	2300      	movs	r3, #0
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	2301      	movs	r3, #1
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2300      	movs	r3, #0
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	4912      	ldr	r1, [pc, #72]	; (80006f8 <main+0x74>)
 80006ae:	4813      	ldr	r0, [pc, #76]	; (80006fc <main+0x78>)
 80006b0:	f003 f906 	bl	80038c0 <xTaskCreate>
			  128,
			  NULL,
			  1,
			  NULL);

  xTaskCreate(analog_sensor_task,
 80006b4:	2300      	movs	r3, #0
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2301      	movs	r3, #1
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2300      	movs	r3, #0
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	490f      	ldr	r1, [pc, #60]	; (8000700 <main+0x7c>)
 80006c2:	4810      	ldr	r0, [pc, #64]	; (8000704 <main+0x80>)
 80006c4:	f003 f8fc 	bl	80038c0 <xTaskCreate>
			  128,
			  NULL,
			  1,
			  NULL);

  xTaskCreate(lcd_task,
 80006c8:	2300      	movs	r3, #0
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	2300      	movs	r3, #0
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2300      	movs	r3, #0
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	490c      	ldr	r1, [pc, #48]	; (8000708 <main+0x84>)
 80006d6:	480d      	ldr	r0, [pc, #52]	; (800070c <main+0x88>)
 80006d8:	f003 f8f2 	bl	80038c0 <xTaskCreate>
			  128,
			  NULL,
			  0,
			  NULL);

  xPrintQueue = xQueueCreate(2, sizeof(int32_t));
 80006dc:	2200      	movs	r2, #0
 80006de:	2104      	movs	r1, #4
 80006e0:	2002      	movs	r0, #2
 80006e2:	f002 fbaf 	bl	8002e44 <xQueueGenericCreate>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a09      	ldr	r2, [pc, #36]	; (8000710 <main+0x8c>)
 80006ea:	6013      	str	r3, [r2, #0]

  vTaskStartScheduler();
 80006ec:	f003 fa60 	bl	8003bb0 <vTaskStartScheduler>

  while (1)
 80006f0:	e7fe      	b.n	80006f0 <main+0x6c>
 80006f2:	bf00      	nop
 80006f4:	080065ac 	.word	0x080065ac
 80006f8:	080065c8 	.word	0x080065c8
 80006fc:	08000715 	.word	0x08000715
 8000700:	080065d4 	.word	0x080065d4
 8000704:	0800074d 	.word	0x0800074d
 8000708:	080065e0 	.word	0x080065e0
 800070c:	08000785 	.word	0x08000785
 8000710:	2000009c 	.word	0x2000009c

08000714 <digital_sensor_task>:
  }

}

void digital_sensor_task(void *pvParameters)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	goio_init();
 800071c:	f7ff ff90 	bl	8000640 <goio_init>
	while(1)
	{
		btn_state = read_digital_sensor();
 8000720:	f7ff ff9e 	bl	8000660 <read_digital_sensor>
 8000724:	4603      	mov	r3, r0
 8000726:	461a      	mov	r2, r3
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <digital_sensor_task+0x30>)
 800072a:	701a      	strb	r2, [r3, #0]
		xQueueSendToBack(xPrintQueue, &btn_state, 0);
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <digital_sensor_task+0x34>)
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	2300      	movs	r3, #0
 8000732:	2200      	movs	r2, #0
 8000734:	4903      	ldr	r1, [pc, #12]	; (8000744 <digital_sensor_task+0x30>)
 8000736:	f002 fbe5 	bl	8002f04 <xQueueGenericSend>

		vTaskDelay(10);
 800073a:	200a      	movs	r0, #10
 800073c:	f003 fa04 	bl	8003b48 <vTaskDelay>
		btn_state = read_digital_sensor();
 8000740:	e7ee      	b.n	8000720 <digital_sensor_task+0xc>
 8000742:	bf00      	nop
 8000744:	20000090 	.word	0x20000090
 8000748:	2000009c 	.word	0x2000009c

0800074c <analog_sensor_task>:
	}
}

void analog_sensor_task(void *pvParameters)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	adc_init();
 8000754:	f7ff ff2e 	bl	80005b4 <adc_init>
	while(1)
	{
		sensor_value = read_analog_sensor();
 8000758:	f7ff ff5a 	bl	8000610 <read_analog_sensor>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <analog_sensor_task+0x30>)
 8000762:	601a      	str	r2, [r3, #0]
		xQueueSendToBack(xPrintQueue, &sensor_value, 0);
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <analog_sensor_task+0x34>)
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	2300      	movs	r3, #0
 800076a:	2200      	movs	r2, #0
 800076c:	4903      	ldr	r1, [pc, #12]	; (800077c <analog_sensor_task+0x30>)
 800076e:	f002 fbc9 	bl	8002f04 <xQueueGenericSend>

		vTaskDelay(10);
 8000772:	200a      	movs	r0, #10
 8000774:	f003 f9e8 	bl	8003b48 <vTaskDelay>
		sensor_value = read_analog_sensor();
 8000778:	e7ee      	b.n	8000758 <analog_sensor_task+0xc>
 800077a:	bf00      	nop
 800077c:	20000094 	.word	0x20000094
 8000780:	2000009c 	.word	0x2000009c

08000784 <lcd_task>:
	}
}

void lcd_task(void *pvParameters)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//Wait for a message to arrive
		xQueueReceive(xPrintQueue, &value_to_print, portMAX_DELAY);
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <lcd_task+0x28>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f04f 32ff 	mov.w	r2, #4294967295
 8000794:	4906      	ldr	r1, [pc, #24]	; (80007b0 <lcd_task+0x2c>)
 8000796:	4618      	mov	r0, r3
 8000798:	f002 fd80 	bl	800329c <xQueueReceive>
		printf("New Value : %d \r\n", value_to_print);
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <lcd_task+0x2c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <lcd_task+0x30>)
 80007a4:	f004 fef2 	bl	800558c <iprintf>
		xQueueReceive(xPrintQueue, &value_to_print, portMAX_DELAY);
 80007a8:	e7f0      	b.n	800078c <lcd_task+0x8>
 80007aa:	bf00      	nop
 80007ac:	2000009c 	.word	0x2000009c
 80007b0:	20000098 	.word	0x20000098
 80007b4:	080065ec 	.word	0x080065ec

080007b8 <SystemClock_Config>:
	}
}


void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	; 0x50
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	2234      	movs	r2, #52	; 0x34
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f004 fed8 	bl	800557c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <SystemClock_Config+0xd4>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a29      	ldr	r2, [pc, #164]	; (800088c <SystemClock_Config+0xd4>)
 80007e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <SystemClock_Config+0xd4>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007f8:	2300      	movs	r3, #0
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <SystemClock_Config+0xd8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000804:	4a22      	ldr	r2, [pc, #136]	; (8000890 <SystemClock_Config+0xd8>)
 8000806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <SystemClock_Config+0xd8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000818:	2302      	movs	r3, #2
 800081a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	2301      	movs	r3, #1
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000820:	2310      	movs	r3, #16
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000828:	2300      	movs	r3, #0
 800082a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800082c:	2310      	movs	r3, #16
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000830:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000834:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000836:	2304      	movs	r3, #4
 8000838:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800083a:	2302      	movs	r3, #2
 800083c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4618      	mov	r0, r3
 8000848:	f001 f916 	bl	8001a78 <HAL_RCC_OscConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000852:	f000 f88f 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	230f      	movs	r3, #15
 8000858:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085a:	2302      	movs	r3, #2
 800085c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	2102      	movs	r1, #2
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fd84 	bl	8001380 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800087e:	f000 f879 	bl	8000974 <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3750      	adds	r7, #80	; 0x50
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b26      	ldr	r3, [pc, #152]	; (8000948 <MX_GPIO_Init+0xb4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a25      	ldr	r2, [pc, #148]	; (8000948 <MX_GPIO_Init+0xb4>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b23      	ldr	r3, [pc, #140]	; (8000948 <MX_GPIO_Init+0xb4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_GPIO_Init+0xb4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a1e      	ldr	r2, [pc, #120]	; (8000948 <MX_GPIO_Init+0xb4>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_GPIO_Init+0xb4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_GPIO_Init+0xb4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a17      	ldr	r2, [pc, #92]	; (8000948 <MX_GPIO_Init+0xb4>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_GPIO_Init+0xb4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_GPIO_Init+0xb4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a10      	ldr	r2, [pc, #64]	; (8000948 <MX_GPIO_Init+0xb4>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_GPIO_Init+0xb4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2120      	movs	r1, #32
 800091e:	480b      	ldr	r0, [pc, #44]	; (800094c <MX_GPIO_Init+0xb8>)
 8000920:	f000 fd14 	bl	800134c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = LD2_Pin;
 8000924:	2320      	movs	r3, #32
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_GPIO_Init+0xb8>)
 800093c:	f000 fb72 	bl	8001024 <HAL_GPIO_Init>

}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	; 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000

08000950 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d101      	bne.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000962:	f000 fa5d 	bl	8000e20 <HAL_IncTick>
  }

}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40010000 	.word	0x40010000

08000974 <Error_Handler>:

void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_MspInit+0x54>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <HAL_MspInit+0x54>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <HAL_MspInit+0x54>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <HAL_MspInit+0x54>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <HAL_MspInit+0x54>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_MspInit+0x54>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	210f      	movs	r1, #15
 80009c2:	f06f 0001 	mvn.w	r0, #1
 80009c6:	f000 fb03 	bl	8000fd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <HAL_UART_MspInit+0x84>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d12b      	bne.n	8000a52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <HAL_UART_MspInit+0x88>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <HAL_UART_MspInit+0x88>)
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_UART_MspInit+0x88>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_UART_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <HAL_UART_MspInit+0x88>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_UART_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a32:	230c      	movs	r3, #12
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a42:	2307      	movs	r3, #7
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <HAL_UART_MspInit+0x8c>)
 8000a4e:	f000 fae9 	bl	8001024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	; 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40004400 	.word	0x40004400
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000

08000a68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08c      	sub	sp, #48	; 0x30
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	4b2e      	ldr	r3, [pc, #184]	; (8000b38 <HAL_InitTick+0xd0>)
 8000a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a80:	4a2d      	ldr	r2, [pc, #180]	; (8000b38 <HAL_InitTick+0xd0>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	6453      	str	r3, [r2, #68]	; 0x44
 8000a88:	4b2b      	ldr	r3, [pc, #172]	; (8000b38 <HAL_InitTick+0xd0>)
 8000a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a94:	f107 020c 	add.w	r2, r7, #12
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fd88 	bl	80015b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000aa4:	f000 fd72 	bl	800158c <HAL_RCC_GetPCLK2Freq>
 8000aa8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aac:	4a23      	ldr	r2, [pc, #140]	; (8000b3c <HAL_InitTick+0xd4>)
 8000aae:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab2:	0c9b      	lsrs	r3, r3, #18
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ab8:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <HAL_InitTick+0xd8>)
 8000aba:	4a22      	ldr	r2, [pc, #136]	; (8000b44 <HAL_InitTick+0xdc>)
 8000abc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <HAL_InitTick+0xd8>)
 8000ac0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ac4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ac6:	4a1e      	ldr	r2, [pc, #120]	; (8000b40 <HAL_InitTick+0xd8>)
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000acc:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <HAL_InitTick+0xd8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <HAL_InitTick+0xd8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <HAL_InitTick+0xd8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ade:	4818      	ldr	r0, [pc, #96]	; (8000b40 <HAL_InitTick+0xd8>)
 8000ae0:	f001 fa68 	bl	8001fb4 <HAL_TIM_Base_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d11b      	bne.n	8000b2a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000af2:	4813      	ldr	r0, [pc, #76]	; (8000b40 <HAL_InitTick+0xd8>)
 8000af4:	f001 fab8 	bl	8002068 <HAL_TIM_Base_Start_IT>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d111      	bne.n	8000b2a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b06:	2019      	movs	r0, #25
 8000b08:	f000 fa7e 	bl	8001008 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b0f      	cmp	r3, #15
 8000b10:	d808      	bhi.n	8000b24 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b12:	2200      	movs	r2, #0
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	2019      	movs	r0, #25
 8000b18:	f000 fa5a 	bl	8000fd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_InitTick+0xe0>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	e002      	b.n	8000b2a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3730      	adds	r7, #48	; 0x30
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	431bde83 	.word	0x431bde83
 8000b40:	200000a0 	.word	0x200000a0
 8000b44:	40010000 	.word	0x40010000
 8000b48:	20000004 	.word	0x20000004

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b7e:	f001 fae3 	bl	8002148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000a0 	.word	0x200000a0

08000b8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	e00a      	b.n	8000bb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b9e:	f3af 8000 	nop.w
 8000ba2:	4601      	mov	r1, r0
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	60ba      	str	r2, [r7, #8]
 8000baa:	b2ca      	uxtb	r2, r1
 8000bac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dbf0      	blt.n	8000b9e <_read+0x12>
  }

  return len;
 8000bbc:	687b      	ldr	r3, [r7, #4]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	e009      	b.n	8000bec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 f8c5 	bl	8000d70 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	dbf1      	blt.n	8000bd8 <_write+0x12>
  }
  return len;
 8000bf4:	687b      	ldr	r3, [r7, #4]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_close>:

int _close(int file)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c26:	605a      	str	r2, [r3, #4]
  return 0;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <_isatty>:

int _isatty(int file)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c70:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <_sbrk+0x5c>)
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <_sbrk+0x60>)
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <_sbrk+0x64>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <_sbrk+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d207      	bcs.n	8000ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c98:	f004 fc38 	bl	800550c <__errno>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	e009      	b.n	8000cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <_sbrk+0x64>)
 8000cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20020000 	.word	0x20020000
 8000cc8:	00000400 	.word	0x00000400
 8000ccc:	200000e8 	.word	0x200000e8
 8000cd0:	20004a98 	.word	0x20004a98

08000cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <SystemInit+0x20>)
 8000cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <SystemInit+0x20>)
 8000ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <USART2_UART_TX_Init>:
int __io_putchar(int ch);

UART_HandleTypeDef huart2;

void USART2_UART_TX_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <USART2_UART_TX_Init+0x40>)
 8000cfe:	4a0f      	ldr	r2, [pc, #60]	; (8000d3c <USART2_UART_TX_Init+0x44>)
 8000d00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <USART2_UART_TX_Init+0x40>)
 8000d04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <USART2_UART_TX_Init+0x40>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <USART2_UART_TX_Init+0x40>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <USART2_UART_TX_Init+0x40>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <USART2_UART_TX_Init+0x40>)
 8000d1e:	2208      	movs	r2, #8
 8000d20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d22:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <USART2_UART_TX_Init+0x40>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <USART2_UART_TX_Init+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d2e:	4802      	ldr	r0, [pc, #8]	; (8000d38 <USART2_UART_TX_Init+0x40>)
 8000d30:	f001 fbee 	bl	8002510 <HAL_UART_Init>
  {
  }
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200000ec 	.word	0x200000ec
 8000d3c:	40004400 	.word	0x40004400

08000d40 <USART2_write>:
  {
  }
}

int USART2_write(int ch)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & USART_SR_TXE)){}
 8000d48:	bf00      	nop
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <USART2_write+0x2c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0f9      	beq.n	8000d4a <USART2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <USART2_write+0x2c>)
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	6053      	str	r3, [r2, #4]
	return ch;
 8000d5e:	687b      	ldr	r3, [r7, #4]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	40004400 	.word	0x40004400

08000d70 <__io_putchar>:

int __io_putchar(int ch)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	USART2_write(ch);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ffe1 	bl	8000d40 <USART2_write>
	return ch;
 8000d7e:	687b      	ldr	r3, [r7, #4]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d8e:	490e      	ldr	r1, [pc, #56]	; (8000dc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da4:	4c0b      	ldr	r4, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db2:	f7ff ff8f 	bl	8000cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db6:	f004 fbaf 	bl	8005518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fc63 	bl	8000684 <main>
  bx  lr    
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dcc:	080066d8 	.word	0x080066d8
  ldr r2, =_sbss
 8000dd0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dd4:	20004a94 	.word	0x20004a94

08000dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f8d8 	bl	8000fba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f7ff fe2c 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fdb6 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000130 	.word	0x20000130

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000130 	.word	0x20000130

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4907      	ldr	r1, [pc, #28]	; (8000efc <__NVIC_EnableIRQ+0x38>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	; (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ff4c 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe2:	f7ff ff61 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 8000fe6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	6978      	ldr	r0, [r7, #20]
 8000fee:	f7ff ffb1 	bl	8000f54 <NVIC_EncodePriority>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff80 	bl	8000f00 <__NVIC_SetPriority>
}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff54 	bl	8000ec4 <__NVIC_EnableIRQ>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	e165      	b.n	800130c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	429a      	cmp	r2, r3
 800105a:	f040 8154 	bne.w	8001306 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b01      	cmp	r3, #1
 8001068:	d005      	beq.n	8001076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001072:	2b02      	cmp	r3, #2
 8001074:	d130      	bne.n	80010d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	f003 0201 	and.w	r2, r3, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d017      	beq.n	8001114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d123      	bne.n	8001168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	08da      	lsrs	r2, r3, #3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3208      	adds	r2, #8
 8001128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	69b9      	ldr	r1, [r7, #24]
 8001164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0203 	and.w	r2, r3, #3
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 80ae 	beq.w	8001306 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b5d      	ldr	r3, [pc, #372]	; (8001324 <HAL_GPIO_Init+0x300>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a5c      	ldr	r2, [pc, #368]	; (8001324 <HAL_GPIO_Init+0x300>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b5a      	ldr	r3, [pc, #360]	; (8001324 <HAL_GPIO_Init+0x300>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c6:	4a58      	ldr	r2, [pc, #352]	; (8001328 <HAL_GPIO_Init+0x304>)
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4f      	ldr	r2, [pc, #316]	; (800132c <HAL_GPIO_Init+0x308>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d025      	beq.n	800123e <HAL_GPIO_Init+0x21a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4e      	ldr	r2, [pc, #312]	; (8001330 <HAL_GPIO_Init+0x30c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d01f      	beq.n	800123a <HAL_GPIO_Init+0x216>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4d      	ldr	r2, [pc, #308]	; (8001334 <HAL_GPIO_Init+0x310>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d019      	beq.n	8001236 <HAL_GPIO_Init+0x212>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4c      	ldr	r2, [pc, #304]	; (8001338 <HAL_GPIO_Init+0x314>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d013      	beq.n	8001232 <HAL_GPIO_Init+0x20e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4b      	ldr	r2, [pc, #300]	; (800133c <HAL_GPIO_Init+0x318>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d00d      	beq.n	800122e <HAL_GPIO_Init+0x20a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4a      	ldr	r2, [pc, #296]	; (8001340 <HAL_GPIO_Init+0x31c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d007      	beq.n	800122a <HAL_GPIO_Init+0x206>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a49      	ldr	r2, [pc, #292]	; (8001344 <HAL_GPIO_Init+0x320>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d101      	bne.n	8001226 <HAL_GPIO_Init+0x202>
 8001222:	2306      	movs	r3, #6
 8001224:	e00c      	b.n	8001240 <HAL_GPIO_Init+0x21c>
 8001226:	2307      	movs	r3, #7
 8001228:	e00a      	b.n	8001240 <HAL_GPIO_Init+0x21c>
 800122a:	2305      	movs	r3, #5
 800122c:	e008      	b.n	8001240 <HAL_GPIO_Init+0x21c>
 800122e:	2304      	movs	r3, #4
 8001230:	e006      	b.n	8001240 <HAL_GPIO_Init+0x21c>
 8001232:	2303      	movs	r3, #3
 8001234:	e004      	b.n	8001240 <HAL_GPIO_Init+0x21c>
 8001236:	2302      	movs	r3, #2
 8001238:	e002      	b.n	8001240 <HAL_GPIO_Init+0x21c>
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <HAL_GPIO_Init+0x21c>
 800123e:	2300      	movs	r3, #0
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	f002 0203 	and.w	r2, r2, #3
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	4093      	lsls	r3, r2
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001250:	4935      	ldr	r1, [pc, #212]	; (8001328 <HAL_GPIO_Init+0x304>)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800125e:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <HAL_GPIO_Init+0x324>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001282:	4a31      	ldr	r2, [pc, #196]	; (8001348 <HAL_GPIO_Init+0x324>)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001288:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <HAL_GPIO_Init+0x324>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ac:	4a26      	ldr	r2, [pc, #152]	; (8001348 <HAL_GPIO_Init+0x324>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012b2:	4b25      	ldr	r3, [pc, #148]	; (8001348 <HAL_GPIO_Init+0x324>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d6:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <HAL_GPIO_Init+0x324>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <HAL_GPIO_Init+0x324>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001300:	4a11      	ldr	r2, [pc, #68]	; (8001348 <HAL_GPIO_Init+0x324>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3301      	adds	r3, #1
 800130a:	61fb      	str	r3, [r7, #28]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	2b0f      	cmp	r3, #15
 8001310:	f67f ae96 	bls.w	8001040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40013800 	.word	0x40013800
 800132c:	40020000 	.word	0x40020000
 8001330:	40020400 	.word	0x40020400
 8001334:	40020800 	.word	0x40020800
 8001338:	40020c00 	.word	0x40020c00
 800133c:	40021000 	.word	0x40021000
 8001340:	40021400 	.word	0x40021400
 8001344:	40021800 	.word	0x40021800
 8001348:	40013c00 	.word	0x40013c00

0800134c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
 8001358:	4613      	mov	r3, r2
 800135a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001368:	e003      	b.n	8001372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	041a      	lsls	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	619a      	str	r2, [r3, #24]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0cc      	b.n	800152e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001394:	4b68      	ldr	r3, [pc, #416]	; (8001538 <HAL_RCC_ClockConfig+0x1b8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d90c      	bls.n	80013bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a2:	4b65      	ldr	r3, [pc, #404]	; (8001538 <HAL_RCC_ClockConfig+0x1b8>)
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013aa:	4b63      	ldr	r3, [pc, #396]	; (8001538 <HAL_RCC_ClockConfig+0x1b8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0b8      	b.n	800152e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d020      	beq.n	800140a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d005      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d4:	4b59      	ldr	r3, [pc, #356]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	4a58      	ldr	r2, [pc, #352]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013ec:	4b53      	ldr	r3, [pc, #332]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	4a52      	ldr	r2, [pc, #328]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f8:	4b50      	ldr	r3, [pc, #320]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	494d      	ldr	r1, [pc, #308]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	4313      	orrs	r3, r2
 8001408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d044      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d107      	bne.n	800142e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	4b47      	ldr	r3, [pc, #284]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d119      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e07f      	b.n	800152e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d003      	beq.n	800143e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800143a:	2b03      	cmp	r3, #3
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143e:	4b3f      	ldr	r3, [pc, #252]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e06f      	b.n	800152e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144e:	4b3b      	ldr	r3, [pc, #236]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e067      	b.n	800152e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800145e:	4b37      	ldr	r3, [pc, #220]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f023 0203 	bic.w	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4934      	ldr	r1, [pc, #208]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 800146c:	4313      	orrs	r3, r2
 800146e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001470:	f7ff fcea 	bl	8000e48 <HAL_GetTick>
 8001474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001476:	e00a      	b.n	800148e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001478:	f7ff fce6 	bl	8000e48 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f241 3288 	movw	r2, #5000	; 0x1388
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e04f      	b.n	800152e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148e:	4b2b      	ldr	r3, [pc, #172]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 020c 	and.w	r2, r3, #12
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	429a      	cmp	r2, r3
 800149e:	d1eb      	bne.n	8001478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <HAL_RCC_ClockConfig+0x1b8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 030f 	and.w	r3, r3, #15
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d20c      	bcs.n	80014c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <HAL_RCC_ClockConfig+0x1b8>)
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_RCC_ClockConfig+0x1b8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e032      	b.n	800152e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4916      	ldr	r1, [pc, #88]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	490e      	ldr	r1, [pc, #56]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	4313      	orrs	r3, r2
 8001504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001506:	f000 f887 	bl	8001618 <HAL_RCC_GetSysClockFreq>
 800150a:	4602      	mov	r2, r0
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	490a      	ldr	r1, [pc, #40]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 8001518:	5ccb      	ldrb	r3, [r1, r3]
 800151a:	fa22 f303 	lsr.w	r3, r2, r3
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_RCC_ClockConfig+0x1c8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fa9e 	bl	8000a68 <HAL_InitTick>

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023c00 	.word	0x40023c00
 800153c:	40023800 	.word	0x40023800
 8001540:	08006618 	.word	0x08006618
 8001544:	20000000 	.word	0x20000000
 8001548:	20000004 	.word	0x20000004

0800154c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_RCC_GetHCLKFreq+0x14>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000000 	.word	0x20000000

08001564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001568:	f7ff fff0 	bl	800154c <HAL_RCC_GetHCLKFreq>
 800156c:	4602      	mov	r2, r0
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	0a9b      	lsrs	r3, r3, #10
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	4903      	ldr	r1, [pc, #12]	; (8001588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800157a:	5ccb      	ldrb	r3, [r1, r3]
 800157c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001580:	4618      	mov	r0, r3
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	08006628 	.word	0x08006628

0800158c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001590:	f7ff ffdc 	bl	800154c <HAL_RCC_GetHCLKFreq>
 8001594:	4602      	mov	r2, r0
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	0b5b      	lsrs	r3, r3, #13
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	4903      	ldr	r1, [pc, #12]	; (80015b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015a2:	5ccb      	ldrb	r3, [r1, r3]
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40023800 	.word	0x40023800
 80015b0:	08006628 	.word	0x08006628

080015b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	220f      	movs	r2, #15
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_RCC_GetClockConfig+0x5c>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0203 	and.w	r2, r3, #3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_RCC_GetClockConfig+0x5c>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_RCC_GetClockConfig+0x5c>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_RCC_GetClockConfig+0x5c>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	08db      	lsrs	r3, r3, #3
 80015ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <HAL_RCC_GetClockConfig+0x60>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 020f 	and.w	r2, r3, #15
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	601a      	str	r2, [r3, #0]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40023c00 	.word	0x40023c00

08001618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800161c:	b0ae      	sub	sp, #184	; 0xb8
 800161e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800163e:	4bcb      	ldr	r3, [pc, #812]	; (800196c <HAL_RCC_GetSysClockFreq+0x354>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b0c      	cmp	r3, #12
 8001648:	f200 8206 	bhi.w	8001a58 <HAL_RCC_GetSysClockFreq+0x440>
 800164c:	a201      	add	r2, pc, #4	; (adr r2, 8001654 <HAL_RCC_GetSysClockFreq+0x3c>)
 800164e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001652:	bf00      	nop
 8001654:	08001689 	.word	0x08001689
 8001658:	08001a59 	.word	0x08001a59
 800165c:	08001a59 	.word	0x08001a59
 8001660:	08001a59 	.word	0x08001a59
 8001664:	08001691 	.word	0x08001691
 8001668:	08001a59 	.word	0x08001a59
 800166c:	08001a59 	.word	0x08001a59
 8001670:	08001a59 	.word	0x08001a59
 8001674:	08001699 	.word	0x08001699
 8001678:	08001a59 	.word	0x08001a59
 800167c:	08001a59 	.word	0x08001a59
 8001680:	08001a59 	.word	0x08001a59
 8001684:	08001889 	.word	0x08001889
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001688:	4bb9      	ldr	r3, [pc, #740]	; (8001970 <HAL_RCC_GetSysClockFreq+0x358>)
 800168a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800168e:	e1e7      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001690:	4bb8      	ldr	r3, [pc, #736]	; (8001974 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001692:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001696:	e1e3      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001698:	4bb4      	ldr	r3, [pc, #720]	; (800196c <HAL_RCC_GetSysClockFreq+0x354>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016a4:	4bb1      	ldr	r3, [pc, #708]	; (800196c <HAL_RCC_GetSysClockFreq+0x354>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d071      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b0:	4bae      	ldr	r3, [pc, #696]	; (800196c <HAL_RCC_GetSysClockFreq+0x354>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	099b      	lsrs	r3, r3, #6
 80016b6:	2200      	movs	r2, #0
 80016b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016bc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80016d6:	4622      	mov	r2, r4
 80016d8:	462b      	mov	r3, r5
 80016da:	f04f 0000 	mov.w	r0, #0
 80016de:	f04f 0100 	mov.w	r1, #0
 80016e2:	0159      	lsls	r1, r3, #5
 80016e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016e8:	0150      	lsls	r0, r2, #5
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4621      	mov	r1, r4
 80016f0:	1a51      	subs	r1, r2, r1
 80016f2:	6439      	str	r1, [r7, #64]	; 0x40
 80016f4:	4629      	mov	r1, r5
 80016f6:	eb63 0301 	sbc.w	r3, r3, r1
 80016fa:	647b      	str	r3, [r7, #68]	; 0x44
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001708:	4649      	mov	r1, r9
 800170a:	018b      	lsls	r3, r1, #6
 800170c:	4641      	mov	r1, r8
 800170e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001712:	4641      	mov	r1, r8
 8001714:	018a      	lsls	r2, r1, #6
 8001716:	4641      	mov	r1, r8
 8001718:	1a51      	subs	r1, r2, r1
 800171a:	63b9      	str	r1, [r7, #56]	; 0x38
 800171c:	4649      	mov	r1, r9
 800171e:	eb63 0301 	sbc.w	r3, r3, r1
 8001722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001730:	4649      	mov	r1, r9
 8001732:	00cb      	lsls	r3, r1, #3
 8001734:	4641      	mov	r1, r8
 8001736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800173a:	4641      	mov	r1, r8
 800173c:	00ca      	lsls	r2, r1, #3
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	4603      	mov	r3, r0
 8001744:	4622      	mov	r2, r4
 8001746:	189b      	adds	r3, r3, r2
 8001748:	633b      	str	r3, [r7, #48]	; 0x30
 800174a:	462b      	mov	r3, r5
 800174c:	460a      	mov	r2, r1
 800174e:	eb42 0303 	adc.w	r3, r2, r3
 8001752:	637b      	str	r3, [r7, #52]	; 0x34
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001760:	4629      	mov	r1, r5
 8001762:	024b      	lsls	r3, r1, #9
 8001764:	4621      	mov	r1, r4
 8001766:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800176a:	4621      	mov	r1, r4
 800176c:	024a      	lsls	r2, r1, #9
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001776:	2200      	movs	r2, #0
 8001778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800177c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001780:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001784:	f7fe fd94 	bl	80002b0 <__aeabi_uldivmod>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4613      	mov	r3, r2
 800178e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001792:	e067      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001794:	4b75      	ldr	r3, [pc, #468]	; (800196c <HAL_RCC_GetSysClockFreq+0x354>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	2200      	movs	r2, #0
 800179c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017a0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80017a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80017ae:	2300      	movs	r3, #0
 80017b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017b6:	4622      	mov	r2, r4
 80017b8:	462b      	mov	r3, r5
 80017ba:	f04f 0000 	mov.w	r0, #0
 80017be:	f04f 0100 	mov.w	r1, #0
 80017c2:	0159      	lsls	r1, r3, #5
 80017c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017c8:	0150      	lsls	r0, r2, #5
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4621      	mov	r1, r4
 80017d0:	1a51      	subs	r1, r2, r1
 80017d2:	62b9      	str	r1, [r7, #40]	; 0x28
 80017d4:	4629      	mov	r1, r5
 80017d6:	eb63 0301 	sbc.w	r3, r3, r1
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80017e8:	4649      	mov	r1, r9
 80017ea:	018b      	lsls	r3, r1, #6
 80017ec:	4641      	mov	r1, r8
 80017ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017f2:	4641      	mov	r1, r8
 80017f4:	018a      	lsls	r2, r1, #6
 80017f6:	4641      	mov	r1, r8
 80017f8:	ebb2 0a01 	subs.w	sl, r2, r1
 80017fc:	4649      	mov	r1, r9
 80017fe:	eb63 0b01 	sbc.w	fp, r3, r1
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800180e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001812:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001816:	4692      	mov	sl, r2
 8001818:	469b      	mov	fp, r3
 800181a:	4623      	mov	r3, r4
 800181c:	eb1a 0303 	adds.w	r3, sl, r3
 8001820:	623b      	str	r3, [r7, #32]
 8001822:	462b      	mov	r3, r5
 8001824:	eb4b 0303 	adc.w	r3, fp, r3
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001836:	4629      	mov	r1, r5
 8001838:	028b      	lsls	r3, r1, #10
 800183a:	4621      	mov	r1, r4
 800183c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001840:	4621      	mov	r1, r4
 8001842:	028a      	lsls	r2, r1, #10
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800184c:	2200      	movs	r2, #0
 800184e:	673b      	str	r3, [r7, #112]	; 0x70
 8001850:	677a      	str	r2, [r7, #116]	; 0x74
 8001852:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001856:	f7fe fd2b 	bl	80002b0 <__aeabi_uldivmod>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4613      	mov	r3, r2
 8001860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001864:	4b41      	ldr	r3, [pc, #260]	; (800196c <HAL_RCC_GetSysClockFreq+0x354>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	0c1b      	lsrs	r3, r3, #16
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	3301      	adds	r3, #1
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001876:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800187a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001882:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001886:	e0eb      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001888:	4b38      	ldr	r3, [pc, #224]	; (800196c <HAL_RCC_GetSysClockFreq+0x354>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001890:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001894:	4b35      	ldr	r3, [pc, #212]	; (800196c <HAL_RCC_GetSysClockFreq+0x354>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d06b      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a0:	4b32      	ldr	r3, [pc, #200]	; (800196c <HAL_RCC_GetSysClockFreq+0x354>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	099b      	lsrs	r3, r3, #6
 80018a6:	2200      	movs	r2, #0
 80018a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80018aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018b2:	663b      	str	r3, [r7, #96]	; 0x60
 80018b4:	2300      	movs	r3, #0
 80018b6:	667b      	str	r3, [r7, #100]	; 0x64
 80018b8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018bc:	4622      	mov	r2, r4
 80018be:	462b      	mov	r3, r5
 80018c0:	f04f 0000 	mov.w	r0, #0
 80018c4:	f04f 0100 	mov.w	r1, #0
 80018c8:	0159      	lsls	r1, r3, #5
 80018ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ce:	0150      	lsls	r0, r2, #5
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4621      	mov	r1, r4
 80018d6:	1a51      	subs	r1, r2, r1
 80018d8:	61b9      	str	r1, [r7, #24]
 80018da:	4629      	mov	r1, r5
 80018dc:	eb63 0301 	sbc.w	r3, r3, r1
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80018ee:	4659      	mov	r1, fp
 80018f0:	018b      	lsls	r3, r1, #6
 80018f2:	4651      	mov	r1, sl
 80018f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018f8:	4651      	mov	r1, sl
 80018fa:	018a      	lsls	r2, r1, #6
 80018fc:	4651      	mov	r1, sl
 80018fe:	ebb2 0801 	subs.w	r8, r2, r1
 8001902:	4659      	mov	r1, fp
 8001904:	eb63 0901 	sbc.w	r9, r3, r1
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001914:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001918:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800191c:	4690      	mov	r8, r2
 800191e:	4699      	mov	r9, r3
 8001920:	4623      	mov	r3, r4
 8001922:	eb18 0303 	adds.w	r3, r8, r3
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	462b      	mov	r3, r5
 800192a:	eb49 0303 	adc.w	r3, r9, r3
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800193c:	4629      	mov	r1, r5
 800193e:	024b      	lsls	r3, r1, #9
 8001940:	4621      	mov	r1, r4
 8001942:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001946:	4621      	mov	r1, r4
 8001948:	024a      	lsls	r2, r1, #9
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001952:	2200      	movs	r2, #0
 8001954:	65bb      	str	r3, [r7, #88]	; 0x58
 8001956:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001958:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800195c:	f7fe fca8 	bl	80002b0 <__aeabi_uldivmod>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4613      	mov	r3, r2
 8001966:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800196a:	e065      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x420>
 800196c:	40023800 	.word	0x40023800
 8001970:	00f42400 	.word	0x00f42400
 8001974:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001978:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x458>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	2200      	movs	r2, #0
 8001980:	4618      	mov	r0, r3
 8001982:	4611      	mov	r1, r2
 8001984:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001988:	653b      	str	r3, [r7, #80]	; 0x50
 800198a:	2300      	movs	r3, #0
 800198c:	657b      	str	r3, [r7, #84]	; 0x54
 800198e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001992:	4642      	mov	r2, r8
 8001994:	464b      	mov	r3, r9
 8001996:	f04f 0000 	mov.w	r0, #0
 800199a:	f04f 0100 	mov.w	r1, #0
 800199e:	0159      	lsls	r1, r3, #5
 80019a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019a4:	0150      	lsls	r0, r2, #5
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4641      	mov	r1, r8
 80019ac:	1a51      	subs	r1, r2, r1
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	4649      	mov	r1, r9
 80019b2:	eb63 0301 	sbc.w	r3, r3, r1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80019c4:	4659      	mov	r1, fp
 80019c6:	018b      	lsls	r3, r1, #6
 80019c8:	4651      	mov	r1, sl
 80019ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ce:	4651      	mov	r1, sl
 80019d0:	018a      	lsls	r2, r1, #6
 80019d2:	4651      	mov	r1, sl
 80019d4:	1a54      	subs	r4, r2, r1
 80019d6:	4659      	mov	r1, fp
 80019d8:	eb63 0501 	sbc.w	r5, r3, r1
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	00eb      	lsls	r3, r5, #3
 80019e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019ea:	00e2      	lsls	r2, r4, #3
 80019ec:	4614      	mov	r4, r2
 80019ee:	461d      	mov	r5, r3
 80019f0:	4643      	mov	r3, r8
 80019f2:	18e3      	adds	r3, r4, r3
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	464b      	mov	r3, r9
 80019f8:	eb45 0303 	adc.w	r3, r5, r3
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	028b      	lsls	r3, r1, #10
 8001a0e:	4621      	mov	r1, r4
 8001a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a14:	4621      	mov	r1, r4
 8001a16:	028a      	lsls	r2, r1, #10
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a20:	2200      	movs	r2, #0
 8001a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a24:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a26:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a2a:	f7fe fc41 	bl	80002b0 <__aeabi_uldivmod>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4613      	mov	r3, r2
 8001a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	0f1b      	lsrs	r3, r3, #28
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001a46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a56:	e003      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	37b8      	adds	r7, #184	; 0xb8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	00f42400 	.word	0x00f42400

08001a78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e28d      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8083 	beq.w	8001b9e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a98:	4b94      	ldr	r3, [pc, #592]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d019      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aa4:	4b91      	ldr	r3, [pc, #580]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d106      	bne.n	8001abe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ab0:	4b8e      	ldr	r3, [pc, #568]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001abc:	d00c      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001abe:	4b8b      	ldr	r3, [pc, #556]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d112      	bne.n	8001af0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aca:	4b88      	ldr	r3, [pc, #544]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ad6:	d10b      	bne.n	8001af0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad8:	4b84      	ldr	r3, [pc, #528]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d05b      	beq.n	8001b9c <HAL_RCC_OscConfig+0x124>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d157      	bne.n	8001b9c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e25a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af8:	d106      	bne.n	8001b08 <HAL_RCC_OscConfig+0x90>
 8001afa:	4b7c      	ldr	r3, [pc, #496]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a7b      	ldr	r2, [pc, #492]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	e01d      	b.n	8001b44 <HAL_RCC_OscConfig+0xcc>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0xb4>
 8001b12:	4b76      	ldr	r3, [pc, #472]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a75      	ldr	r2, [pc, #468]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a72      	ldr	r2, [pc, #456]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e00b      	b.n	8001b44 <HAL_RCC_OscConfig+0xcc>
 8001b2c:	4b6f      	ldr	r3, [pc, #444]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6e      	ldr	r2, [pc, #440]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b6c      	ldr	r3, [pc, #432]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a6b      	ldr	r2, [pc, #428]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d013      	beq.n	8001b74 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f97c 	bl	8000e48 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff f978 	bl	8000e48 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e21f      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b61      	ldr	r3, [pc, #388]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0xdc>
 8001b72:	e014      	b.n	8001b9e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff f968 	bl	8000e48 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff f964 	bl	8000e48 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e20b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	4b57      	ldr	r3, [pc, #348]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x104>
 8001b9a:	e000      	b.n	8001b9e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d06f      	beq.n	8001c8a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001baa:	4b50      	ldr	r3, [pc, #320]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d017      	beq.n	8001be6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bb6:	4b4d      	ldr	r3, [pc, #308]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d105      	bne.n	8001bce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bc2:	4b4a      	ldr	r3, [pc, #296]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bce:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d11c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bda:	4b44      	ldr	r3, [pc, #272]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d116      	bne.n	8001c14 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be6:	4b41      	ldr	r3, [pc, #260]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_RCC_OscConfig+0x186>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e1d3      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4937      	ldr	r1, [pc, #220]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c12:	e03a      	b.n	8001c8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d020      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c1c:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <HAL_RCC_OscConfig+0x278>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c22:	f7ff f911 	bl	8000e48 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2a:	f7ff f90d 	bl	8000e48 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e1b4      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b28      	ldr	r3, [pc, #160]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4925      	ldr	r1, [pc, #148]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
 8001c5c:	e015      	b.n	8001c8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <HAL_RCC_OscConfig+0x278>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff f8f0 	bl	8000e48 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6c:	f7ff f8ec 	bl	8000e48 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e193      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d036      	beq.n	8001d04 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d016      	beq.n	8001ccc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_RCC_OscConfig+0x27c>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f8d0 	bl	8000e48 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cac:	f7ff f8cc 	bl	8000e48 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e173      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x234>
 8001cca:	e01b      	b.n	8001d04 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_RCC_OscConfig+0x27c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd2:	f7ff f8b9 	bl	8000e48 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd8:	e00e      	b.n	8001cf8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cda:	f7ff f8b5 	bl	8000e48 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d907      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e15c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	42470000 	.word	0x42470000
 8001cf4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf8:	4b8a      	ldr	r3, [pc, #552]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1ea      	bne.n	8001cda <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 8097 	beq.w	8001e40 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d16:	4b83      	ldr	r3, [pc, #524]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10f      	bne.n	8001d42 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	4b7f      	ldr	r3, [pc, #508]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	4a7e      	ldr	r2, [pc, #504]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d30:	6413      	str	r3, [r2, #64]	; 0x40
 8001d32:	4b7c      	ldr	r3, [pc, #496]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d42:	4b79      	ldr	r3, [pc, #484]	; (8001f28 <HAL_RCC_OscConfig+0x4b0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d118      	bne.n	8001d80 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4e:	4b76      	ldr	r3, [pc, #472]	; (8001f28 <HAL_RCC_OscConfig+0x4b0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a75      	ldr	r2, [pc, #468]	; (8001f28 <HAL_RCC_OscConfig+0x4b0>)
 8001d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5a:	f7ff f875 	bl	8000e48 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d62:	f7ff f871 	bl	8000e48 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e118      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	4b6c      	ldr	r3, [pc, #432]	; (8001f28 <HAL_RCC_OscConfig+0x4b0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d106      	bne.n	8001d96 <HAL_RCC_OscConfig+0x31e>
 8001d88:	4b66      	ldr	r3, [pc, #408]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8c:	4a65      	ldr	r2, [pc, #404]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6713      	str	r3, [r2, #112]	; 0x70
 8001d94:	e01c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x358>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b05      	cmp	r3, #5
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x340>
 8001d9e:	4b61      	ldr	r3, [pc, #388]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	4a60      	ldr	r2, [pc, #384]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	6713      	str	r3, [r2, #112]	; 0x70
 8001daa:	4b5e      	ldr	r3, [pc, #376]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dae:	4a5d      	ldr	r2, [pc, #372]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6713      	str	r3, [r2, #112]	; 0x70
 8001db6:	e00b      	b.n	8001dd0 <HAL_RCC_OscConfig+0x358>
 8001db8:	4b5a      	ldr	r3, [pc, #360]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbc:	4a59      	ldr	r2, [pc, #356]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc4:	4b57      	ldr	r3, [pc, #348]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	4a56      	ldr	r2, [pc, #344]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001dca:	f023 0304 	bic.w	r3, r3, #4
 8001dce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d015      	beq.n	8001e04 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd8:	f7ff f836 	bl	8000e48 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de0:	f7ff f832 	bl	8000e48 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e0d7      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df6:	4b4b      	ldr	r3, [pc, #300]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0ee      	beq.n	8001de0 <HAL_RCC_OscConfig+0x368>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e04:	f7ff f820 	bl	8000e48 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0c:	f7ff f81c 	bl	8000e48 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e0c1      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e22:	4b40      	ldr	r3, [pc, #256]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ee      	bne.n	8001e0c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e34:	4b3b      	ldr	r3, [pc, #236]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	4a3a      	ldr	r2, [pc, #232]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80ad 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e4a:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d060      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d145      	bne.n	8001eea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <HAL_RCC_OscConfig+0x4b4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7fe fff0 	bl	8000e48 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7fe ffec 	bl	8000e48 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e093      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69da      	ldr	r2, [r3, #28]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	019b      	lsls	r3, r3, #6
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	085b      	lsrs	r3, r3, #1
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	041b      	lsls	r3, r3, #16
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	061b      	lsls	r3, r3, #24
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	071b      	lsls	r3, r3, #28
 8001eb6:	491b      	ldr	r1, [pc, #108]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_RCC_OscConfig+0x4b4>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7fe ffc1 	bl	8000e48 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eca:	f7fe ffbd 	bl	8000e48 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e064      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x452>
 8001ee8:	e05c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_RCC_OscConfig+0x4b4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7fe ffaa 	bl	8000e48 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7fe ffa6 	bl	8000e48 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e04d      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_RCC_OscConfig+0x4ac>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x480>
 8001f16:	e045      	b.n	8001fa4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e040      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f30:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <HAL_RCC_OscConfig+0x538>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d030      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d129      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d122      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f60:	4013      	ands	r3, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d119      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	085b      	lsrs	r3, r3, #1
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d10f      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800

08001fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e041      	b.n	800204a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f839 	bl	8002052 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	f000 f9d8 	bl	80023a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d001      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e04e      	b.n	800211e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a23      	ldr	r2, [pc, #140]	; (800212c <HAL_TIM_Base_Start_IT+0xc4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d022      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0x80>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020aa:	d01d      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0x80>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <HAL_TIM_Base_Start_IT+0xc8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d018      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0x80>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <HAL_TIM_Base_Start_IT+0xcc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d013      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0x80>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <HAL_TIM_Base_Start_IT+0xd0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00e      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0x80>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a1b      	ldr	r2, [pc, #108]	; (800213c <HAL_TIM_Base_Start_IT+0xd4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d009      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0x80>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a19      	ldr	r2, [pc, #100]	; (8002140 <HAL_TIM_Base_Start_IT+0xd8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d004      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0x80>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a18      	ldr	r2, [pc, #96]	; (8002144 <HAL_TIM_Base_Start_IT+0xdc>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d111      	bne.n	800210c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d010      	beq.n	800211c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210a:	e007      	b.n	800211c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000
 8002130:	40000400 	.word	0x40000400
 8002134:	40000800 	.word	0x40000800
 8002138:	40000c00 	.word	0x40000c00
 800213c:	40010400 	.word	0x40010400
 8002140:	40014000 	.word	0x40014000
 8002144:	40001800 	.word	0x40001800

08002148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b02      	cmp	r3, #2
 800215c:	d122      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b02      	cmp	r3, #2
 800216a:	d11b      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0202 	mvn.w	r2, #2
 8002174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f8ee 	bl	800236c <HAL_TIM_IC_CaptureCallback>
 8002190:	e005      	b.n	800219e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f8e0 	bl	8002358 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f8f1 	bl	8002380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d122      	bne.n	80021f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d11b      	bne.n	80021f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0204 	mvn.w	r2, #4
 80021c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2202      	movs	r2, #2
 80021ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f8c4 	bl	800236c <HAL_TIM_IC_CaptureCallback>
 80021e4:	e005      	b.n	80021f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f8b6 	bl	8002358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f8c7 	bl	8002380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b08      	cmp	r3, #8
 8002204:	d122      	bne.n	800224c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b08      	cmp	r3, #8
 8002212:	d11b      	bne.n	800224c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0208 	mvn.w	r2, #8
 800221c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2204      	movs	r2, #4
 8002222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f89a 	bl	800236c <HAL_TIM_IC_CaptureCallback>
 8002238:	e005      	b.n	8002246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f88c 	bl	8002358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f89d 	bl	8002380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b10      	cmp	r3, #16
 8002258:	d122      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	2b10      	cmp	r3, #16
 8002266:	d11b      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0210 	mvn.w	r2, #16
 8002270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2208      	movs	r2, #8
 8002276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f870 	bl	800236c <HAL_TIM_IC_CaptureCallback>
 800228c:	e005      	b.n	800229a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f862 	bl	8002358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f873 	bl	8002380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10e      	bne.n	80022cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d107      	bne.n	80022cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0201 	mvn.w	r2, #1
 80022c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fb42 	bl	8000950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d6:	2b80      	cmp	r3, #128	; 0x80
 80022d8:	d10e      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e4:	2b80      	cmp	r3, #128	; 0x80
 80022e6:	d107      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f902 	bl	80024fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	2b40      	cmp	r3, #64	; 0x40
 8002304:	d10e      	bne.n	8002324 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b40      	cmp	r3, #64	; 0x40
 8002312:	d107      	bne.n	8002324 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800231c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f838 	bl	8002394 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b20      	cmp	r3, #32
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b20      	cmp	r3, #32
 800233e:	d107      	bne.n	8002350 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0220 	mvn.w	r2, #32
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f8cc 	bl	80024e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a40      	ldr	r2, [pc, #256]	; (80024bc <TIM_Base_SetConfig+0x114>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d013      	beq.n	80023e8 <TIM_Base_SetConfig+0x40>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c6:	d00f      	beq.n	80023e8 <TIM_Base_SetConfig+0x40>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a3d      	ldr	r2, [pc, #244]	; (80024c0 <TIM_Base_SetConfig+0x118>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d00b      	beq.n	80023e8 <TIM_Base_SetConfig+0x40>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a3c      	ldr	r2, [pc, #240]	; (80024c4 <TIM_Base_SetConfig+0x11c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d007      	beq.n	80023e8 <TIM_Base_SetConfig+0x40>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a3b      	ldr	r2, [pc, #236]	; (80024c8 <TIM_Base_SetConfig+0x120>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d003      	beq.n	80023e8 <TIM_Base_SetConfig+0x40>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a3a      	ldr	r2, [pc, #232]	; (80024cc <TIM_Base_SetConfig+0x124>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d108      	bne.n	80023fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a2f      	ldr	r2, [pc, #188]	; (80024bc <TIM_Base_SetConfig+0x114>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d02b      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002408:	d027      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a2c      	ldr	r2, [pc, #176]	; (80024c0 <TIM_Base_SetConfig+0x118>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d023      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a2b      	ldr	r2, [pc, #172]	; (80024c4 <TIM_Base_SetConfig+0x11c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d01f      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a2a      	ldr	r2, [pc, #168]	; (80024c8 <TIM_Base_SetConfig+0x120>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d01b      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a29      	ldr	r2, [pc, #164]	; (80024cc <TIM_Base_SetConfig+0x124>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d017      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a28      	ldr	r2, [pc, #160]	; (80024d0 <TIM_Base_SetConfig+0x128>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d013      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a27      	ldr	r2, [pc, #156]	; (80024d4 <TIM_Base_SetConfig+0x12c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00f      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a26      	ldr	r2, [pc, #152]	; (80024d8 <TIM_Base_SetConfig+0x130>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00b      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a25      	ldr	r2, [pc, #148]	; (80024dc <TIM_Base_SetConfig+0x134>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d007      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a24      	ldr	r2, [pc, #144]	; (80024e0 <TIM_Base_SetConfig+0x138>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d003      	beq.n	800245a <TIM_Base_SetConfig+0xb2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a23      	ldr	r2, [pc, #140]	; (80024e4 <TIM_Base_SetConfig+0x13c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d108      	bne.n	800246c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	4313      	orrs	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <TIM_Base_SetConfig+0x114>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d003      	beq.n	80024a0 <TIM_Base_SetConfig+0xf8>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a0c      	ldr	r2, [pc, #48]	; (80024cc <TIM_Base_SetConfig+0x124>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d103      	bne.n	80024a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	615a      	str	r2, [r3, #20]
}
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40010000 	.word	0x40010000
 80024c0:	40000400 	.word	0x40000400
 80024c4:	40000800 	.word	0x40000800
 80024c8:	40000c00 	.word	0x40000c00
 80024cc:	40010400 	.word	0x40010400
 80024d0:	40014000 	.word	0x40014000
 80024d4:	40014400 	.word	0x40014400
 80024d8:	40014800 	.word	0x40014800
 80024dc:	40001800 	.word	0x40001800
 80024e0:	40001c00 	.word	0x40001c00
 80024e4:	40002000 	.word	0x40002000

080024e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e03f      	b.n	80025a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe fa4e 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2224      	movs	r2, #36	; 0x24
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f829 	bl	80025ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025b0:	b0c0      	sub	sp, #256	; 0x100
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c8:	68d9      	ldr	r1, [r3, #12]
 80025ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	ea40 0301 	orr.w	r3, r0, r1
 80025d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002604:	f021 010c 	bic.w	r1, r1, #12
 8002608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002612:	430b      	orrs	r3, r1
 8002614:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002626:	6999      	ldr	r1, [r3, #24]
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	ea40 0301 	orr.w	r3, r0, r1
 8002632:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4b8f      	ldr	r3, [pc, #572]	; (8002878 <UART_SetConfig+0x2cc>)
 800263c:	429a      	cmp	r2, r3
 800263e:	d005      	beq.n	800264c <UART_SetConfig+0xa0>
 8002640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4b8d      	ldr	r3, [pc, #564]	; (800287c <UART_SetConfig+0x2d0>)
 8002648:	429a      	cmp	r2, r3
 800264a:	d104      	bne.n	8002656 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800264c:	f7fe ff9e 	bl	800158c <HAL_RCC_GetPCLK2Freq>
 8002650:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002654:	e003      	b.n	800265e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002656:	f7fe ff85 	bl	8001564 <HAL_RCC_GetPCLK1Freq>
 800265a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800265e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002668:	f040 810c 	bne.w	8002884 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800266c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002670:	2200      	movs	r2, #0
 8002672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002676:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800267a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800267e:	4622      	mov	r2, r4
 8002680:	462b      	mov	r3, r5
 8002682:	1891      	adds	r1, r2, r2
 8002684:	65b9      	str	r1, [r7, #88]	; 0x58
 8002686:	415b      	adcs	r3, r3
 8002688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800268a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800268e:	4621      	mov	r1, r4
 8002690:	eb12 0801 	adds.w	r8, r2, r1
 8002694:	4629      	mov	r1, r5
 8002696:	eb43 0901 	adc.w	r9, r3, r1
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ae:	4690      	mov	r8, r2
 80026b0:	4699      	mov	r9, r3
 80026b2:	4623      	mov	r3, r4
 80026b4:	eb18 0303 	adds.w	r3, r8, r3
 80026b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026bc:	462b      	mov	r3, r5
 80026be:	eb49 0303 	adc.w	r3, r9, r3
 80026c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80026da:	460b      	mov	r3, r1
 80026dc:	18db      	adds	r3, r3, r3
 80026de:	653b      	str	r3, [r7, #80]	; 0x50
 80026e0:	4613      	mov	r3, r2
 80026e2:	eb42 0303 	adc.w	r3, r2, r3
 80026e6:	657b      	str	r3, [r7, #84]	; 0x54
 80026e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026f0:	f7fd fdde 	bl	80002b0 <__aeabi_uldivmod>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4b61      	ldr	r3, [pc, #388]	; (8002880 <UART_SetConfig+0x2d4>)
 80026fa:	fba3 2302 	umull	r2, r3, r3, r2
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	011c      	lsls	r4, r3, #4
 8002702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002706:	2200      	movs	r2, #0
 8002708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800270c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002710:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002714:	4642      	mov	r2, r8
 8002716:	464b      	mov	r3, r9
 8002718:	1891      	adds	r1, r2, r2
 800271a:	64b9      	str	r1, [r7, #72]	; 0x48
 800271c:	415b      	adcs	r3, r3
 800271e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002720:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002724:	4641      	mov	r1, r8
 8002726:	eb12 0a01 	adds.w	sl, r2, r1
 800272a:	4649      	mov	r1, r9
 800272c:	eb43 0b01 	adc.w	fp, r3, r1
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800273c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002744:	4692      	mov	sl, r2
 8002746:	469b      	mov	fp, r3
 8002748:	4643      	mov	r3, r8
 800274a:	eb1a 0303 	adds.w	r3, sl, r3
 800274e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002752:	464b      	mov	r3, r9
 8002754:	eb4b 0303 	adc.w	r3, fp, r3
 8002758:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800275c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002768:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800276c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002770:	460b      	mov	r3, r1
 8002772:	18db      	adds	r3, r3, r3
 8002774:	643b      	str	r3, [r7, #64]	; 0x40
 8002776:	4613      	mov	r3, r2
 8002778:	eb42 0303 	adc.w	r3, r2, r3
 800277c:	647b      	str	r3, [r7, #68]	; 0x44
 800277e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002782:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002786:	f7fd fd93 	bl	80002b0 <__aeabi_uldivmod>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4611      	mov	r1, r2
 8002790:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <UART_SetConfig+0x2d4>)
 8002792:	fba3 2301 	umull	r2, r3, r3, r1
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	2264      	movs	r2, #100	; 0x64
 800279a:	fb02 f303 	mul.w	r3, r2, r3
 800279e:	1acb      	subs	r3, r1, r3
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027a6:	4b36      	ldr	r3, [pc, #216]	; (8002880 <UART_SetConfig+0x2d4>)
 80027a8:	fba3 2302 	umull	r2, r3, r3, r2
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027b4:	441c      	add	r4, r3
 80027b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027ba:	2200      	movs	r2, #0
 80027bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027c8:	4642      	mov	r2, r8
 80027ca:	464b      	mov	r3, r9
 80027cc:	1891      	adds	r1, r2, r2
 80027ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80027d0:	415b      	adcs	r3, r3
 80027d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027d8:	4641      	mov	r1, r8
 80027da:	1851      	adds	r1, r2, r1
 80027dc:	6339      	str	r1, [r7, #48]	; 0x30
 80027de:	4649      	mov	r1, r9
 80027e0:	414b      	adcs	r3, r1
 80027e2:	637b      	str	r3, [r7, #52]	; 0x34
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80027f0:	4659      	mov	r1, fp
 80027f2:	00cb      	lsls	r3, r1, #3
 80027f4:	4651      	mov	r1, sl
 80027f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027fa:	4651      	mov	r1, sl
 80027fc:	00ca      	lsls	r2, r1, #3
 80027fe:	4610      	mov	r0, r2
 8002800:	4619      	mov	r1, r3
 8002802:	4603      	mov	r3, r0
 8002804:	4642      	mov	r2, r8
 8002806:	189b      	adds	r3, r3, r2
 8002808:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800280c:	464b      	mov	r3, r9
 800280e:	460a      	mov	r2, r1
 8002810:	eb42 0303 	adc.w	r3, r2, r3
 8002814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002824:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800282c:	460b      	mov	r3, r1
 800282e:	18db      	adds	r3, r3, r3
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
 8002832:	4613      	mov	r3, r2
 8002834:	eb42 0303 	adc.w	r3, r2, r3
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800283a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800283e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002842:	f7fd fd35 	bl	80002b0 <__aeabi_uldivmod>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <UART_SetConfig+0x2d4>)
 800284c:	fba3 1302 	umull	r1, r3, r3, r2
 8002850:	095b      	lsrs	r3, r3, #5
 8002852:	2164      	movs	r1, #100	; 0x64
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	3332      	adds	r3, #50	; 0x32
 800285e:	4a08      	ldr	r2, [pc, #32]	; (8002880 <UART_SetConfig+0x2d4>)
 8002860:	fba2 2303 	umull	r2, r3, r2, r3
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	f003 0207 	and.w	r2, r3, #7
 800286a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4422      	add	r2, r4
 8002872:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002874:	e105      	b.n	8002a82 <UART_SetConfig+0x4d6>
 8002876:	bf00      	nop
 8002878:	40011000 	.word	0x40011000
 800287c:	40011400 	.word	0x40011400
 8002880:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002888:	2200      	movs	r2, #0
 800288a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800288e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002892:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002896:	4642      	mov	r2, r8
 8002898:	464b      	mov	r3, r9
 800289a:	1891      	adds	r1, r2, r2
 800289c:	6239      	str	r1, [r7, #32]
 800289e:	415b      	adcs	r3, r3
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
 80028a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028a6:	4641      	mov	r1, r8
 80028a8:	1854      	adds	r4, r2, r1
 80028aa:	4649      	mov	r1, r9
 80028ac:	eb43 0501 	adc.w	r5, r3, r1
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	00eb      	lsls	r3, r5, #3
 80028ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028be:	00e2      	lsls	r2, r4, #3
 80028c0:	4614      	mov	r4, r2
 80028c2:	461d      	mov	r5, r3
 80028c4:	4643      	mov	r3, r8
 80028c6:	18e3      	adds	r3, r4, r3
 80028c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028cc:	464b      	mov	r3, r9
 80028ce:	eb45 0303 	adc.w	r3, r5, r3
 80028d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028f2:	4629      	mov	r1, r5
 80028f4:	008b      	lsls	r3, r1, #2
 80028f6:	4621      	mov	r1, r4
 80028f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028fc:	4621      	mov	r1, r4
 80028fe:	008a      	lsls	r2, r1, #2
 8002900:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002904:	f7fd fcd4 	bl	80002b0 <__aeabi_uldivmod>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4b60      	ldr	r3, [pc, #384]	; (8002a90 <UART_SetConfig+0x4e4>)
 800290e:	fba3 2302 	umull	r2, r3, r3, r2
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	011c      	lsls	r4, r3, #4
 8002916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800291a:	2200      	movs	r2, #0
 800291c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002920:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002924:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002928:	4642      	mov	r2, r8
 800292a:	464b      	mov	r3, r9
 800292c:	1891      	adds	r1, r2, r2
 800292e:	61b9      	str	r1, [r7, #24]
 8002930:	415b      	adcs	r3, r3
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002938:	4641      	mov	r1, r8
 800293a:	1851      	adds	r1, r2, r1
 800293c:	6139      	str	r1, [r7, #16]
 800293e:	4649      	mov	r1, r9
 8002940:	414b      	adcs	r3, r1
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002950:	4659      	mov	r1, fp
 8002952:	00cb      	lsls	r3, r1, #3
 8002954:	4651      	mov	r1, sl
 8002956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800295a:	4651      	mov	r1, sl
 800295c:	00ca      	lsls	r2, r1, #3
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	4603      	mov	r3, r0
 8002964:	4642      	mov	r2, r8
 8002966:	189b      	adds	r3, r3, r2
 8002968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800296c:	464b      	mov	r3, r9
 800296e:	460a      	mov	r2, r1
 8002970:	eb42 0303 	adc.w	r3, r2, r3
 8002974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	67bb      	str	r3, [r7, #120]	; 0x78
 8002982:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002990:	4649      	mov	r1, r9
 8002992:	008b      	lsls	r3, r1, #2
 8002994:	4641      	mov	r1, r8
 8002996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800299a:	4641      	mov	r1, r8
 800299c:	008a      	lsls	r2, r1, #2
 800299e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029a2:	f7fd fc85 	bl	80002b0 <__aeabi_uldivmod>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <UART_SetConfig+0x4e4>)
 80029ac:	fba3 1302 	umull	r1, r3, r3, r2
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	2164      	movs	r1, #100	; 0x64
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	3332      	adds	r3, #50	; 0x32
 80029be:	4a34      	ldr	r2, [pc, #208]	; (8002a90 <UART_SetConfig+0x4e4>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ca:	441c      	add	r4, r3
 80029cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029d0:	2200      	movs	r2, #0
 80029d2:	673b      	str	r3, [r7, #112]	; 0x70
 80029d4:	677a      	str	r2, [r7, #116]	; 0x74
 80029d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80029da:	4642      	mov	r2, r8
 80029dc:	464b      	mov	r3, r9
 80029de:	1891      	adds	r1, r2, r2
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	415b      	adcs	r3, r3
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ea:	4641      	mov	r1, r8
 80029ec:	1851      	adds	r1, r2, r1
 80029ee:	6039      	str	r1, [r7, #0]
 80029f0:	4649      	mov	r1, r9
 80029f2:	414b      	adcs	r3, r1
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a02:	4659      	mov	r1, fp
 8002a04:	00cb      	lsls	r3, r1, #3
 8002a06:	4651      	mov	r1, sl
 8002a08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a0c:	4651      	mov	r1, sl
 8002a0e:	00ca      	lsls	r2, r1, #3
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	4603      	mov	r3, r0
 8002a16:	4642      	mov	r2, r8
 8002a18:	189b      	adds	r3, r3, r2
 8002a1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a1c:	464b      	mov	r3, r9
 8002a1e:	460a      	mov	r2, r1
 8002a20:	eb42 0303 	adc.w	r3, r2, r3
 8002a24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	663b      	str	r3, [r7, #96]	; 0x60
 8002a30:	667a      	str	r2, [r7, #100]	; 0x64
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a3e:	4649      	mov	r1, r9
 8002a40:	008b      	lsls	r3, r1, #2
 8002a42:	4641      	mov	r1, r8
 8002a44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a48:	4641      	mov	r1, r8
 8002a4a:	008a      	lsls	r2, r1, #2
 8002a4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a50:	f7fd fc2e 	bl	80002b0 <__aeabi_uldivmod>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <UART_SetConfig+0x4e4>)
 8002a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2164      	movs	r1, #100	; 0x64
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	3332      	adds	r3, #50	; 0x32
 8002a6c:	4a08      	ldr	r2, [pc, #32]	; (8002a90 <UART_SetConfig+0x4e4>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	f003 020f 	and.w	r2, r3, #15
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4422      	add	r2, r4
 8002a80:	609a      	str	r2, [r3, #8]
}
 8002a82:	bf00      	nop
 8002a84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a8e:	bf00      	nop
 8002a90:	51eb851f 	.word	0x51eb851f

08002a94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <SysTick_Handler+0x1c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002a9c:	f001 fcd0 	bl	8004440 <xTaskGetSchedulerState>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d001      	beq.n	8002aaa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002aa6:	f002 fab7 	bl	8005018 <xPortSysTickHandler>
  }
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	e000e010 	.word	0xe000e010

08002ab4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4a07      	ldr	r2, [pc, #28]	; (8002ae0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ac4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4a06      	ldr	r2, [pc, #24]	; (8002ae4 <vApplicationGetIdleTaskMemory+0x30>)
 8002aca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2280      	movs	r2, #128	; 0x80
 8002ad0:	601a      	str	r2, [r3, #0]
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000134 	.word	0x20000134
 8002ae4:	20000190 	.word	0x20000190

08002ae8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a07      	ldr	r2, [pc, #28]	; (8002b14 <vApplicationGetTimerTaskMemory+0x2c>)
 8002af8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4a06      	ldr	r2, [pc, #24]	; (8002b18 <vApplicationGetTimerTaskMemory+0x30>)
 8002afe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b06:	601a      	str	r2, [r3, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	20000390 	.word	0x20000390
 8002b18:	200003ec 	.word	0x200003ec

08002b1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f103 0208 	add.w	r2, r3, #8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295
 8002b34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f103 0208 	add.w	r2, r3, #8
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f103 0208 	add.w	r2, r3, #8
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b76:	b480      	push	{r7}
 8002b78:	b085      	sub	sp, #20
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	601a      	str	r2, [r3, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d103      	bne.n	8002bde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	e00c      	b.n	8002bf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3308      	adds	r3, #8
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e002      	b.n	8002bec <vListInsert+0x2e>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d2f6      	bcs.n	8002be6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	601a      	str	r2, [r3, #0]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6892      	ldr	r2, [r2, #8]
 8002c46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6852      	ldr	r2, [r2, #4]
 8002c50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d103      	bne.n	8002c64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	1e5a      	subs	r2, r3, #1
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002caa:	bf00      	nop
 8002cac:	e7fe      	b.n	8002cac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002cae:	f002 f921 	bl	8004ef4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	441a      	add	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	68f9      	ldr	r1, [r7, #12]
 8002ce2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	441a      	add	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	22ff      	movs	r2, #255	; 0xff
 8002cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	22ff      	movs	r2, #255	; 0xff
 8002cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d114      	bne.n	8002d2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01a      	beq.n	8002d42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3310      	adds	r3, #16
 8002d10:	4618      	mov	r0, r3
 8002d12:	f001 f9d7 	bl	80040c4 <xTaskRemoveFromEventList>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d012      	beq.n	8002d42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <xQueueGenericReset+0xcc>)
 8002d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	e009      	b.n	8002d42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3310      	adds	r3, #16
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fef2 	bl	8002b1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	3324      	adds	r3, #36	; 0x24
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff feed 	bl	8002b1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d42:	f002 f907 	bl	8004f54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	e000ed04 	.word	0xe000ed04

08002d54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08e      	sub	sp, #56	; 0x38
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d88:	f383 8811 	msr	BASEPRI, r3
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d96:	bf00      	nop
 8002d98:	e7fe      	b.n	8002d98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <xQueueGenericCreateStatic+0x52>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <xQueueGenericCreateStatic+0x56>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <xQueueGenericCreateStatic+0x58>
 8002daa:	2300      	movs	r3, #0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10a      	bne.n	8002dc6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	623b      	str	r3, [r7, #32]
}
 8002dc2:	bf00      	nop
 8002dc4:	e7fe      	b.n	8002dc4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <xQueueGenericCreateStatic+0x7e>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <xQueueGenericCreateStatic+0x82>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <xQueueGenericCreateStatic+0x84>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	61fb      	str	r3, [r7, #28]
}
 8002dee:	bf00      	nop
 8002df0:	e7fe      	b.n	8002df0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002df2:	2354      	movs	r3, #84	; 0x54
 8002df4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b54      	cmp	r3, #84	; 0x54
 8002dfa:	d00a      	beq.n	8002e12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	61bb      	str	r3, [r7, #24]
}
 8002e0e:	bf00      	nop
 8002e10:	e7fe      	b.n	8002e10 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00d      	beq.n	8002e3a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f83f 	bl	8002eb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3730      	adds	r7, #48	; 0x30
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	; 0x28
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10a      	bne.n	8002e6e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	613b      	str	r3, [r7, #16]
}
 8002e6a:	bf00      	nop
 8002e6c:	e7fe      	b.n	8002e6c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	3354      	adds	r3, #84	; 0x54
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f002 f95b 	bl	8005138 <pvPortMalloc>
 8002e82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d011      	beq.n	8002eae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3354      	adds	r3, #84	; 0x54
 8002e92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e9c:	79fa      	ldrb	r2, [r7, #7]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f805 	bl	8002eb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002eae:	69bb      	ldr	r3, [r7, #24]
	}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d103      	bne.n	8002ed4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	e002      	b.n	8002eda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	69b8      	ldr	r0, [r7, #24]
 8002eea:	f7ff fecb 	bl	8002c84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002efc:	bf00      	nop
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08e      	sub	sp, #56	; 0x38
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f12:	2300      	movs	r3, #0
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10a      	bne.n	8002f36 <xQueueGenericSend+0x32>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f32:	bf00      	nop
 8002f34:	e7fe      	b.n	8002f34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d103      	bne.n	8002f44 <xQueueGenericSend+0x40>
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <xQueueGenericSend+0x44>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <xQueueGenericSend+0x46>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <xQueueGenericSend+0x60>
	__asm volatile
 8002f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	623b      	str	r3, [r7, #32]
}
 8002f60:	bf00      	nop
 8002f62:	e7fe      	b.n	8002f62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d103      	bne.n	8002f72 <xQueueGenericSend+0x6e>
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <xQueueGenericSend+0x72>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <xQueueGenericSend+0x74>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <xQueueGenericSend+0x8e>
	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	61fb      	str	r3, [r7, #28]
}
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f92:	f001 fa55 	bl	8004440 <xTaskGetSchedulerState>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <xQueueGenericSend+0x9e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <xQueueGenericSend+0xa2>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <xQueueGenericSend+0xa4>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <xQueueGenericSend+0xbe>
	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	61bb      	str	r3, [r7, #24]
}
 8002fbe:	bf00      	nop
 8002fc0:	e7fe      	b.n	8002fc0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fc2:	f001 ff97 	bl	8004ef4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d302      	bcc.n	8002fd8 <xQueueGenericSend+0xd4>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d145      	bne.n	8003064 <xQueueGenericSend+0x160>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	68b9      	ldr	r1, [r7, #8]
 8002fe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fe4:	f000 fa3a 	bl	800345c <prvCopyDataToQueue>
 8002fe8:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d014      	beq.n	800301c <xQueueGenericSend+0x118>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d102      	bne.n	8002ffe <xQueueGenericSend+0xfa>
 8002ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d12e      	bne.n	800305c <xQueueGenericSend+0x158>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003000:	f000 fba8 	bl	8003754 <prvNotifyQueueSetContainer>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d028      	beq.n	800305c <xQueueGenericSend+0x158>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 800300a:	4b4a      	ldr	r3, [pc, #296]	; (8003134 <xQueueGenericSend+0x230>)
 800300c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	e01f      	b.n	800305c <xQueueGenericSend+0x158>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	2b00      	cmp	r3, #0
 8003022:	d010      	beq.n	8003046 <xQueueGenericSend+0x142>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003026:	3324      	adds	r3, #36	; 0x24
 8003028:	4618      	mov	r0, r3
 800302a:	f001 f84b 	bl	80040c4 <xTaskRemoveFromEventList>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d013      	beq.n	800305c <xQueueGenericSend+0x158>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8003034:	4b3f      	ldr	r3, [pc, #252]	; (8003134 <xQueueGenericSend+0x230>)
 8003036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	e00a      	b.n	800305c <xQueueGenericSend+0x158>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <xQueueGenericSend+0x158>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 800304c:	4b39      	ldr	r3, [pc, #228]	; (8003134 <xQueueGenericSend+0x230>)
 800304e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800305c:	f001 ff7a 	bl	8004f54 <vPortExitCritical>
				return pdPASS;
 8003060:	2301      	movs	r3, #1
 8003062:	e063      	b.n	800312c <xQueueGenericSend+0x228>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <xQueueGenericSend+0x16e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800306a:	f001 ff73 	bl	8004f54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800306e:	2300      	movs	r3, #0
 8003070:	e05c      	b.n	800312c <xQueueGenericSend+0x228>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <xQueueGenericSend+0x182>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003078:	f107 0310 	add.w	r3, r7, #16
 800307c:	4618      	mov	r0, r3
 800307e:	f001 f885 	bl	800418c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003082:	2301      	movs	r3, #1
 8003084:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003086:	f001 ff65 	bl	8004f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800308a:	f000 fdf7 	bl	8003c7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800308e:	f001 ff31 	bl	8004ef4 <vPortEnterCritical>
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003098:	b25b      	sxtb	r3, r3
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d103      	bne.n	80030a8 <xQueueGenericSend+0x1a4>
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ae:	b25b      	sxtb	r3, r3
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d103      	bne.n	80030be <xQueueGenericSend+0x1ba>
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030be:	f001 ff49 	bl	8004f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030c2:	1d3a      	adds	r2, r7, #4
 80030c4:	f107 0310 	add.w	r3, r7, #16
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f001 f874 	bl	80041b8 <xTaskCheckForTimeOut>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d124      	bne.n	8003120 <xQueueGenericSend+0x21c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030d8:	f000 fac5 	bl	8003666 <prvIsQueueFull>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d018      	beq.n	8003114 <xQueueGenericSend+0x210>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	3310      	adds	r3, #16
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 ff9a 	bl	8004024 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030f2:	f000 fa43 	bl	800357c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030f6:	f000 fdcf 	bl	8003c98 <xTaskResumeAll>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f47f af60 	bne.w	8002fc2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003102:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <xQueueGenericSend+0x230>)
 8003104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	e756      	b.n	8002fc2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003116:	f000 fa31 	bl	800357c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800311a:	f000 fdbd 	bl	8003c98 <xTaskResumeAll>
 800311e:	e750      	b.n	8002fc2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003122:	f000 fa2b 	bl	800357c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003126:	f000 fdb7 	bl	8003c98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800312a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800312c:	4618      	mov	r0, r3
 800312e:	3738      	adds	r7, #56	; 0x38
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	e000ed04 	.word	0xe000ed04

08003138 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b090      	sub	sp, #64	; 0x40
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800314a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10a      	bne.n	8003166 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003162:	bf00      	nop
 8003164:	e7fe      	b.n	8003164 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d103      	bne.n	8003174 <xQueueGenericSendFromISR+0x3c>
 800316c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <xQueueGenericSendFromISR+0x40>
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <xQueueGenericSendFromISR+0x42>
 8003178:	2300      	movs	r3, #0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10a      	bne.n	8003194 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003190:	bf00      	nop
 8003192:	e7fe      	b.n	8003192 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d103      	bne.n	80031a2 <xQueueGenericSendFromISR+0x6a>
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <xQueueGenericSendFromISR+0x6e>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <xQueueGenericSendFromISR+0x70>
 80031a6:	2300      	movs	r3, #0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	623b      	str	r3, [r7, #32]
}
 80031be:	bf00      	nop
 80031c0:	e7fe      	b.n	80031c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031c2:	f001 ff79 	bl	80050b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031c6:	f3ef 8211 	mrs	r2, BASEPRI
 80031ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	61fa      	str	r2, [r7, #28]
 80031dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d302      	bcc.n	80031f4 <xQueueGenericSendFromISR+0xbc>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d146      	bne.n	8003282 <xQueueGenericSendFromISR+0x14a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800320a:	f000 f927 	bl	800345c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800320e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003216:	d129      	bne.n	800326c <xQueueGenericSendFromISR+0x134>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8003218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321c:	2b00      	cmp	r3, #0
 800321e:	d012      	beq.n	8003246 <xQueueGenericSendFromISR+0x10e>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d102      	bne.n	800322c <xQueueGenericSendFromISR+0xf4>
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d127      	bne.n	800327c <xQueueGenericSendFromISR+0x144>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800322c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800322e:	f000 fa91 	bl	8003754 <prvNotifyQueueSetContainer>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d021      	beq.n	800327c <xQueueGenericSendFromISR+0x144>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d01e      	beq.n	800327c <xQueueGenericSendFromISR+0x144>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e01a      	b.n	800327c <xQueueGenericSendFromISR+0x144>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <xQueueGenericSendFromISR+0x144>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	3324      	adds	r3, #36	; 0x24
 8003252:	4618      	mov	r0, r3
 8003254:	f000 ff36 	bl	80040c4 <xTaskRemoveFromEventList>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00e      	beq.n	800327c <xQueueGenericSendFromISR+0x144>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00b      	beq.n	800327c <xQueueGenericSendFromISR+0x144>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	e007      	b.n	800327c <xQueueGenericSendFromISR+0x144>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800326c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003270:	3301      	adds	r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	b25a      	sxtb	r2, r3
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800327c:	2301      	movs	r3, #1
 800327e:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003280:	e001      	b.n	8003286 <xQueueGenericSendFromISR+0x14e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003282:	2300      	movs	r3, #0
 8003284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003288:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003290:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003294:	4618      	mov	r0, r3
 8003296:	3740      	adds	r7, #64	; 0x40
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08c      	sub	sp, #48	; 0x30
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <xQueueReceive+0x30>
	__asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	623b      	str	r3, [r7, #32]
}
 80032c8:	bf00      	nop
 80032ca:	e7fe      	b.n	80032ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <xQueueReceive+0x3e>
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <xQueueReceive+0x42>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <xQueueReceive+0x44>
 80032de:	2300      	movs	r3, #0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <xQueueReceive+0x5e>
	__asm volatile
 80032e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	61fb      	str	r3, [r7, #28]
}
 80032f6:	bf00      	nop
 80032f8:	e7fe      	b.n	80032f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032fa:	f001 f8a1 	bl	8004440 <xTaskGetSchedulerState>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d102      	bne.n	800330a <xQueueReceive+0x6e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <xQueueReceive+0x72>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <xQueueReceive+0x74>
 800330e:	2300      	movs	r3, #0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <xQueueReceive+0x8e>
	__asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	61bb      	str	r3, [r7, #24]
}
 8003326:	bf00      	nop
 8003328:	e7fe      	b.n	8003328 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800332a:	f001 fde3 	bl	8004ef4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01f      	beq.n	800337a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800333e:	f000 f8f7 	bl	8003530 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1e5a      	subs	r2, r3, #1
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00f      	beq.n	8003372 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	3310      	adds	r3, #16
 8003356:	4618      	mov	r0, r3
 8003358:	f000 feb4 	bl	80040c4 <xTaskRemoveFromEventList>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003362:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <xQueueReceive+0x1bc>)
 8003364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003372:	f001 fdef 	bl	8004f54 <vPortExitCritical>
				return pdPASS;
 8003376:	2301      	movs	r3, #1
 8003378:	e069      	b.n	800344e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d103      	bne.n	8003388 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003380:	f001 fde8 	bl	8004f54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003384:	2300      	movs	r3, #0
 8003386:	e062      	b.n	800344e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800338e:	f107 0310 	add.w	r3, r7, #16
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fefa 	bl	800418c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003398:	2301      	movs	r3, #1
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800339c:	f001 fdda 	bl	8004f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033a0:	f000 fc6c 	bl	8003c7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033a4:	f001 fda6 	bl	8004ef4 <vPortEnterCritical>
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ae:	b25b      	sxtb	r3, r3
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d103      	bne.n	80033be <xQueueReceive+0x122>
 80033b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033c4:	b25b      	sxtb	r3, r3
 80033c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ca:	d103      	bne.n	80033d4 <xQueueReceive+0x138>
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033d4:	f001 fdbe 	bl	8004f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033d8:	1d3a      	adds	r2, r7, #4
 80033da:	f107 0310 	add.w	r3, r7, #16
 80033de:	4611      	mov	r1, r2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fee9 	bl	80041b8 <xTaskCheckForTimeOut>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d123      	bne.n	8003434 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ee:	f000 f924 	bl	800363a <prvIsQueueEmpty>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d017      	beq.n	8003428 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	3324      	adds	r3, #36	; 0x24
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4611      	mov	r1, r2
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fe0f 	bl	8004024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003408:	f000 f8b8 	bl	800357c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800340c:	f000 fc44 	bl	8003c98 <xTaskResumeAll>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d189      	bne.n	800332a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <xQueueReceive+0x1bc>)
 8003418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	e780      	b.n	800332a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800342a:	f000 f8a7 	bl	800357c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800342e:	f000 fc33 	bl	8003c98 <xTaskResumeAll>
 8003432:	e77a      	b.n	800332a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003436:	f000 f8a1 	bl	800357c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800343a:	f000 fc2d 	bl	8003c98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800343e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003440:	f000 f8fb 	bl	800363a <prvIsQueueEmpty>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	f43f af6f 	beq.w	800332a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800344c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800344e:	4618      	mov	r0, r3
 8003450:	3730      	adds	r7, #48	; 0x30
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	e000ed04 	.word	0xe000ed04

0800345c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10d      	bne.n	8003496 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d14d      	bne.n	800351e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fff8 	bl	800447c <xTaskPriorityDisinherit>
 800348c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	e043      	b.n	800351e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d119      	bne.n	80034d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6858      	ldr	r0, [r3, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	461a      	mov	r2, r3
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	f002 f85a 	bl	8005560 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	441a      	add	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d32b      	bcc.n	800351e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	e026      	b.n	800351e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	68d8      	ldr	r0, [r3, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	461a      	mov	r2, r3
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	f002 f840 	bl	8005560 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	425b      	negs	r3, r3
 80034ea:	441a      	add	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d207      	bcs.n	800350c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	425b      	negs	r3, r3
 8003506:	441a      	add	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d105      	bne.n	800351e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	3b01      	subs	r3, #1
 800351c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003526:	697b      	ldr	r3, [r7, #20]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	2b00      	cmp	r3, #0
 8003540:	d018      	beq.n	8003574 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	441a      	add	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	429a      	cmp	r2, r3
 800355a:	d303      	bcc.n	8003564 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68d9      	ldr	r1, [r3, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	461a      	mov	r2, r3
 800356e:	6838      	ldr	r0, [r7, #0]
 8003570:	f001 fff6 	bl	8005560 <memcpy>
	}
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003584:	f001 fcb6 	bl	8004ef4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800358e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003590:	e01e      	b.n	80035d0 <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <prvUnlockQueue+0x30>
				{
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f8da 	bl	8003754 <prvNotifyQueueSetContainer>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d010      	beq.n	80035c8 <prvUnlockQueue+0x4c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 80035a6:	f000 fe69 	bl	800427c <vTaskMissedYield>
 80035aa:	e00d      	b.n	80035c8 <prvUnlockQueue+0x4c>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d012      	beq.n	80035da <prvUnlockQueue+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3324      	adds	r3, #36	; 0x24
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fd83 	bl	80040c4 <xTaskRemoveFromEventList>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <prvUnlockQueue+0x4c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 80035c4:	f000 fe5a 	bl	800427c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	dcdc      	bgt.n	8003592 <prvUnlockQueue+0x16>
 80035d8:	e000      	b.n	80035dc <prvUnlockQueue+0x60>
						break;
 80035da:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	22ff      	movs	r2, #255	; 0xff
 80035e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80035e4:	f001 fcb6 	bl	8004f54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035e8:	f001 fc84 	bl	8004ef4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035f2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035f4:	e011      	b.n	800361a <prvUnlockQueue+0x9e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d012      	beq.n	8003624 <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3310      	adds	r3, #16
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fd5e 	bl	80040c4 <xTaskRemoveFromEventList>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
 800360e:	f000 fe35 	bl	800427c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003612:	7bbb      	ldrb	r3, [r7, #14]
 8003614:	3b01      	subs	r3, #1
 8003616:	b2db      	uxtb	r3, r3
 8003618:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800361a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800361e:	2b00      	cmp	r3, #0
 8003620:	dce9      	bgt.n	80035f6 <prvUnlockQueue+0x7a>
 8003622:	e000      	b.n	8003626 <prvUnlockQueue+0xaa>
			}
			else
			{
				break;
 8003624:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	22ff      	movs	r2, #255	; 0xff
 800362a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800362e:	f001 fc91 	bl	8004f54 <vPortExitCritical>
}
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003642:	f001 fc57 	bl	8004ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800364e:	2301      	movs	r3, #1
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	e001      	b.n	8003658 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003658:	f001 fc7c 	bl	8004f54 <vPortExitCritical>

	return xReturn;
 800365c:	68fb      	ldr	r3, [r7, #12]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800366e:	f001 fc41 	bl	8004ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	429a      	cmp	r2, r3
 800367c:	d102      	bne.n	8003684 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800367e:	2301      	movs	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	e001      	b.n	8003688 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003688:	f001 fc64 	bl	8004f54 <vPortExitCritical>

	return xReturn;
 800368c:	68fb      	ldr	r3, [r7, #12]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	e014      	b.n	80036d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80036a8:	4a0f      	ldr	r2, [pc, #60]	; (80036e8 <vQueueAddToRegistry+0x50>)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80036b4:	490c      	ldr	r1, [pc, #48]	; (80036e8 <vQueueAddToRegistry+0x50>)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80036be:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <vQueueAddToRegistry+0x50>)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4413      	add	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80036ca:	e006      	b.n	80036da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3301      	adds	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b07      	cmp	r3, #7
 80036d6:	d9e7      	bls.n	80036a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	200007ec 	.word	0x200007ec

080036ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80036fc:	f001 fbfa 	bl	8004ef4 <vPortEnterCritical>
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003706:	b25b      	sxtb	r3, r3
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370c:	d103      	bne.n	8003716 <vQueueWaitForMessageRestricted+0x2a>
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800371c:	b25b      	sxtb	r3, r3
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003722:	d103      	bne.n	800372c <vQueueWaitForMessageRestricted+0x40>
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800372c:	f001 fc12 	bl	8004f54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	2b00      	cmp	r3, #0
 8003736:	d106      	bne.n	8003746 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	3324      	adds	r3, #36	; 0x24
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fc93 	bl	800406c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003746:	6978      	ldr	r0, [r7, #20]
 8003748:	f7ff ff18 	bl	800357c <prvUnlockQueue>
	}
 800374c:	bf00      	nop
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003760:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <prvNotifyQueueSetContainer+0x2e>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	613b      	str	r3, [r7, #16]
}
 800377e:	bf00      	nop
 8003780:	e7fe      	b.n	8003780 <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378a:	429a      	cmp	r2, r3
 800378c:	d30a      	bcc.n	80037a4 <prvNotifyQueueSetContainer+0x50>
	__asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	60fb      	str	r3, [r7, #12]
}
 80037a0:	bf00      	nop
 80037a2:	e7fe      	b.n	80037a2 <prvNotifyQueueSetContainer+0x4e>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d225      	bcs.n	80037fc <prvNotifyQueueSetContainer+0xa8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037b6:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80037b8:	1d3b      	adds	r3, r7, #4
 80037ba:	2200      	movs	r2, #0
 80037bc:	4619      	mov	r1, r3
 80037be:	69b8      	ldr	r0, [r7, #24]
 80037c0:	f7ff fe4c 	bl	800345c <prvCopyDataToQueue>
 80037c4:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 80037c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ce:	d10e      	bne.n	80037ee <prvNotifyQueueSetContainer+0x9a>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d011      	beq.n	80037fc <prvNotifyQueueSetContainer+0xa8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	3324      	adds	r3, #36	; 0x24
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fc71 	bl	80040c4 <xTaskRemoveFromEventList>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d009      	beq.n	80037fc <prvNotifyQueueSetContainer+0xa8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80037e8:	2301      	movs	r3, #1
 80037ea:	61fb      	str	r3, [r7, #28]
 80037ec:	e006      	b.n	80037fc <prvNotifyQueueSetContainer+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
 80037f0:	3301      	adds	r3, #1
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	b25a      	sxtb	r2, r3
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80037fc:	69fb      	ldr	r3, [r7, #28]
	}
 80037fe:	4618      	mov	r0, r3
 8003800:	3720      	adds	r7, #32
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003806:	b580      	push	{r7, lr}
 8003808:	b08e      	sub	sp, #56	; 0x38
 800380a:	af04      	add	r7, sp, #16
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <xTaskCreateStatic+0x2a>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	623b      	str	r3, [r7, #32]
}
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <xTaskCreateStatic+0x46>
	__asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	61fb      	str	r3, [r7, #28]
}
 8003848:	bf00      	nop
 800384a:	e7fe      	b.n	800384a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800384c:	235c      	movs	r3, #92	; 0x5c
 800384e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b5c      	cmp	r3, #92	; 0x5c
 8003854:	d00a      	beq.n	800386c <xTaskCreateStatic+0x66>
	__asm volatile
 8003856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	61bb      	str	r3, [r7, #24]
}
 8003868:	bf00      	nop
 800386a:	e7fe      	b.n	800386a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800386c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01e      	beq.n	80038b2 <xTaskCreateStatic+0xac>
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01b      	beq.n	80038b2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003882:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800388c:	2300      	movs	r3, #0
 800388e:	9303      	str	r3, [sp, #12]
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	9302      	str	r3, [sp, #8]
 8003894:	f107 0314 	add.w	r3, r7, #20
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f850 	bl	800394a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038ac:	f000 f8dc 	bl	8003a68 <prvAddNewTaskToReadyList>
 80038b0:	e001      	b.n	80038b6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038b6:	697b      	ldr	r3, [r7, #20]
	}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3728      	adds	r7, #40	; 0x28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08c      	sub	sp, #48	; 0x30
 80038c4:	af04      	add	r7, sp, #16
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	4613      	mov	r3, r2
 80038ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f001 fc2f 	bl	8005138 <pvPortMalloc>
 80038da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00e      	beq.n	8003900 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038e2:	205c      	movs	r0, #92	; 0x5c
 80038e4:	f001 fc28 	bl	8005138 <pvPortMalloc>
 80038e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
 80038f6:	e005      	b.n	8003904 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038f8:	6978      	ldr	r0, [r7, #20]
 80038fa:	f001 fce9 	bl	80052d0 <vPortFree>
 80038fe:	e001      	b.n	8003904 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003900:	2300      	movs	r3, #0
 8003902:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d017      	beq.n	800393a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003912:	88fa      	ldrh	r2, [r7, #6]
 8003914:	2300      	movs	r3, #0
 8003916:	9303      	str	r3, [sp, #12]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	9302      	str	r3, [sp, #8]
 800391c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f80e 	bl	800394a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800392e:	69f8      	ldr	r0, [r7, #28]
 8003930:	f000 f89a 	bl	8003a68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003934:	2301      	movs	r3, #1
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	e002      	b.n	8003940 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800393a:	f04f 33ff 	mov.w	r3, #4294967295
 800393e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003940:	69bb      	ldr	r3, [r7, #24]
	}
 8003942:	4618      	mov	r0, r3
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b088      	sub	sp, #32
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	461a      	mov	r2, r3
 8003962:	21a5      	movs	r1, #165	; 0xa5
 8003964:	f001 fe0a 	bl	800557c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003972:	3b01      	subs	r3, #1
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f023 0307 	bic.w	r3, r3, #7
 8003980:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <prvInitialiseNewTask+0x58>
	__asm volatile
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	617b      	str	r3, [r7, #20]
}
 800399e:	bf00      	nop
 80039a0:	e7fe      	b.n	80039a0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01f      	beq.n	80039e8 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039a8:	2300      	movs	r3, #0
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	e012      	b.n	80039d4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	4413      	add	r3, r2
 80039b4:	7819      	ldrb	r1, [r3, #0]
 80039b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	3334      	adds	r3, #52	; 0x34
 80039be:	460a      	mov	r2, r1
 80039c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	4413      	add	r3, r2
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d006      	beq.n	80039dc <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3301      	adds	r3, #1
 80039d2:	61fb      	str	r3, [r7, #28]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b0f      	cmp	r3, #15
 80039d8:	d9e9      	bls.n	80039ae <prvInitialiseNewTask+0x64>
 80039da:	e000      	b.n	80039de <prvInitialiseNewTask+0x94>
			{
				break;
 80039dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039e6:	e003      	b.n	80039f0 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f2:	2b37      	cmp	r3, #55	; 0x37
 80039f4:	d901      	bls.n	80039fa <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039f6:	2337      	movs	r3, #55	; 0x37
 80039f8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a04:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	2200      	movs	r2, #0
 8003a0a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	3304      	adds	r3, #4
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff f8a3 	bl	8002b5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	3318      	adds	r3, #24
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff f89e 	bl	8002b5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	2200      	movs	r2, #0
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	68f9      	ldr	r1, [r7, #12]
 8003a48:	69b8      	ldr	r0, [r7, #24]
 8003a4a:	f001 f927 	bl	8004c9c <pxPortInitialiseStack>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a60:	bf00      	nop
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a70:	f001 fa40 	bl	8004ef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a74:	4b2d      	ldr	r3, [pc, #180]	; (8003b2c <prvAddNewTaskToReadyList+0xc4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	4a2c      	ldr	r2, [pc, #176]	; (8003b2c <prvAddNewTaskToReadyList+0xc4>)
 8003a7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a7e:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <prvAddNewTaskToReadyList+0xc8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a86:	4a2a      	ldr	r2, [pc, #168]	; (8003b30 <prvAddNewTaskToReadyList+0xc8>)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a8c:	4b27      	ldr	r3, [pc, #156]	; (8003b2c <prvAddNewTaskToReadyList+0xc4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d110      	bne.n	8003ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a94:	f000 fc16 	bl	80042c4 <prvInitialiseTaskLists>
 8003a98:	e00d      	b.n	8003ab6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a9a:	4b26      	ldr	r3, [pc, #152]	; (8003b34 <prvAddNewTaskToReadyList+0xcc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003aa2:	4b23      	ldr	r3, [pc, #140]	; (8003b30 <prvAddNewTaskToReadyList+0xc8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d802      	bhi.n	8003ab6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ab0:	4a1f      	ldr	r2, [pc, #124]	; (8003b30 <prvAddNewTaskToReadyList+0xc8>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ab6:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <prvAddNewTaskToReadyList+0xd0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3301      	adds	r3, #1
 8003abc:	4a1e      	ldr	r2, [pc, #120]	; (8003b38 <prvAddNewTaskToReadyList+0xd0>)
 8003abe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <prvAddNewTaskToReadyList+0xd0>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003acc:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <prvAddNewTaskToReadyList+0xd4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d903      	bls.n	8003adc <prvAddNewTaskToReadyList+0x74>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <prvAddNewTaskToReadyList+0xd4>)
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <prvAddNewTaskToReadyList+0xd8>)
 8003aea:	441a      	add	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4619      	mov	r1, r3
 8003af2:	4610      	mov	r0, r2
 8003af4:	f7ff f83f 	bl	8002b76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003af8:	f001 fa2c 	bl	8004f54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003afc:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <prvAddNewTaskToReadyList+0xcc>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00e      	beq.n	8003b22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b04:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <prvAddNewTaskToReadyList+0xc8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d207      	bcs.n	8003b22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b12:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <prvAddNewTaskToReadyList+0xdc>)
 8003b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000d00 	.word	0x20000d00
 8003b30:	2000082c 	.word	0x2000082c
 8003b34:	20000d0c 	.word	0x20000d0c
 8003b38:	20000d1c 	.word	0x20000d1c
 8003b3c:	20000d08 	.word	0x20000d08
 8003b40:	20000830 	.word	0x20000830
 8003b44:	e000ed04 	.word	0xe000ed04

08003b48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d017      	beq.n	8003b8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b5a:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <vTaskDelay+0x60>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <vTaskDelay+0x30>
	__asm volatile
 8003b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	60bb      	str	r3, [r7, #8]
}
 8003b74:	bf00      	nop
 8003b76:	e7fe      	b.n	8003b76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b78:	f000 f880 	bl	8003c7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fcea 	bl	8004558 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b84:	f000 f888 	bl	8003c98 <xTaskResumeAll>
 8003b88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d107      	bne.n	8003ba0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <vTaskDelay+0x64>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ba0:	bf00      	nop
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000d28 	.word	0x20000d28
 8003bac:	e000ed04 	.word	0xe000ed04

08003bb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	; 0x28
 8003bb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bbe:	463a      	mov	r2, r7
 8003bc0:	1d39      	adds	r1, r7, #4
 8003bc2:	f107 0308 	add.w	r3, r7, #8
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe ff74 	bl	8002ab4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bcc:	6839      	ldr	r1, [r7, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	9202      	str	r2, [sp, #8]
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	460a      	mov	r2, r1
 8003bde:	4921      	ldr	r1, [pc, #132]	; (8003c64 <vTaskStartScheduler+0xb4>)
 8003be0:	4821      	ldr	r0, [pc, #132]	; (8003c68 <vTaskStartScheduler+0xb8>)
 8003be2:	f7ff fe10 	bl	8003806 <xTaskCreateStatic>
 8003be6:	4603      	mov	r3, r0
 8003be8:	4a20      	ldr	r2, [pc, #128]	; (8003c6c <vTaskStartScheduler+0xbc>)
 8003bea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bec:	4b1f      	ldr	r3, [pc, #124]	; (8003c6c <vTaskStartScheduler+0xbc>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	e001      	b.n	8003bfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d102      	bne.n	8003c0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c04:	f000 fcfc 	bl	8004600 <xTimerCreateTimerTask>
 8003c08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d116      	bne.n	8003c3e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	613b      	str	r3, [r7, #16]
}
 8003c22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c24:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <vTaskStartScheduler+0xc0>)
 8003c26:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c2c:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <vTaskStartScheduler+0xc4>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c32:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <vTaskStartScheduler+0xc8>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c38:	f001 f8ba 	bl	8004db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c3c:	e00e      	b.n	8003c5c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c44:	d10a      	bne.n	8003c5c <vTaskStartScheduler+0xac>
	__asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	60fb      	str	r3, [r7, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	e7fe      	b.n	8003c5a <vTaskStartScheduler+0xaa>
}
 8003c5c:	bf00      	nop
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	08006600 	.word	0x08006600
 8003c68:	08004295 	.word	0x08004295
 8003c6c:	20000d24 	.word	0x20000d24
 8003c70:	20000d20 	.word	0x20000d20
 8003c74:	20000d0c 	.word	0x20000d0c
 8003c78:	20000d04 	.word	0x20000d04

08003c7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c80:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <vTaskSuspendAll+0x18>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3301      	adds	r3, #1
 8003c86:	4a03      	ldr	r2, [pc, #12]	; (8003c94 <vTaskSuspendAll+0x18>)
 8003c88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c8a:	bf00      	nop
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	20000d28 	.word	0x20000d28

08003c98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ca6:	4b42      	ldr	r3, [pc, #264]	; (8003db0 <xTaskResumeAll+0x118>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	603b      	str	r3, [r7, #0]
}
 8003cc0:	bf00      	nop
 8003cc2:	e7fe      	b.n	8003cc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cc4:	f001 f916 	bl	8004ef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cc8:	4b39      	ldr	r3, [pc, #228]	; (8003db0 <xTaskResumeAll+0x118>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	4a38      	ldr	r2, [pc, #224]	; (8003db0 <xTaskResumeAll+0x118>)
 8003cd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cd2:	4b37      	ldr	r3, [pc, #220]	; (8003db0 <xTaskResumeAll+0x118>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d162      	bne.n	8003da0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cda:	4b36      	ldr	r3, [pc, #216]	; (8003db4 <xTaskResumeAll+0x11c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d05e      	beq.n	8003da0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ce2:	e02f      	b.n	8003d44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce4:	4b34      	ldr	r3, [pc, #208]	; (8003db8 <xTaskResumeAll+0x120>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3318      	adds	r3, #24
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe ff9d 	bl	8002c30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe ff98 	bl	8002c30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d04:	4b2d      	ldr	r3, [pc, #180]	; (8003dbc <xTaskResumeAll+0x124>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d903      	bls.n	8003d14 <xTaskResumeAll+0x7c>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	4a2a      	ldr	r2, [pc, #168]	; (8003dbc <xTaskResumeAll+0x124>)
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4a27      	ldr	r2, [pc, #156]	; (8003dc0 <xTaskResumeAll+0x128>)
 8003d22:	441a      	add	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3304      	adds	r3, #4
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	f7fe ff23 	bl	8002b76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d34:	4b23      	ldr	r3, [pc, #140]	; (8003dc4 <xTaskResumeAll+0x12c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d302      	bcc.n	8003d44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d3e:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <xTaskResumeAll+0x130>)
 8003d40:	2201      	movs	r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d44:	4b1c      	ldr	r3, [pc, #112]	; (8003db8 <xTaskResumeAll+0x120>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1cb      	bne.n	8003ce4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d52:	f000 fb55 	bl	8004400 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <xTaskResumeAll+0x134>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d010      	beq.n	8003d84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d62:	f000 f847 	bl	8003df4 <xTaskIncrementTick>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d6c:	4b16      	ldr	r3, [pc, #88]	; (8003dc8 <xTaskResumeAll+0x130>)
 8003d6e:	2201      	movs	r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f1      	bne.n	8003d62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003d7e:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <xTaskResumeAll+0x134>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d84:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <xTaskResumeAll+0x130>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d009      	beq.n	8003da0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d90:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <xTaskResumeAll+0x138>)
 8003d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003da0:	f001 f8d8 	bl	8004f54 <vPortExitCritical>

	return xAlreadyYielded;
 8003da4:	68bb      	ldr	r3, [r7, #8]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000d28 	.word	0x20000d28
 8003db4:	20000d00 	.word	0x20000d00
 8003db8:	20000cc0 	.word	0x20000cc0
 8003dbc:	20000d08 	.word	0x20000d08
 8003dc0:	20000830 	.word	0x20000830
 8003dc4:	2000082c 	.word	0x2000082c
 8003dc8:	20000d14 	.word	0x20000d14
 8003dcc:	20000d10 	.word	0x20000d10
 8003dd0:	e000ed04 	.word	0xe000ed04

08003dd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <xTaskGetTickCount+0x1c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003de0:	687b      	ldr	r3, [r7, #4]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20000d04 	.word	0x20000d04

08003df4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dfe:	4b4f      	ldr	r3, [pc, #316]	; (8003f3c <xTaskIncrementTick+0x148>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 808f 	bne.w	8003f26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e08:	4b4d      	ldr	r3, [pc, #308]	; (8003f40 <xTaskIncrementTick+0x14c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e10:	4a4b      	ldr	r2, [pc, #300]	; (8003f40 <xTaskIncrementTick+0x14c>)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d120      	bne.n	8003e5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e1c:	4b49      	ldr	r3, [pc, #292]	; (8003f44 <xTaskIncrementTick+0x150>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <xTaskIncrementTick+0x48>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	603b      	str	r3, [r7, #0]
}
 8003e38:	bf00      	nop
 8003e3a:	e7fe      	b.n	8003e3a <xTaskIncrementTick+0x46>
 8003e3c:	4b41      	ldr	r3, [pc, #260]	; (8003f44 <xTaskIncrementTick+0x150>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <xTaskIncrementTick+0x154>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a3f      	ldr	r2, [pc, #252]	; (8003f44 <xTaskIncrementTick+0x150>)
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4a3f      	ldr	r2, [pc, #252]	; (8003f48 <xTaskIncrementTick+0x154>)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	4b3e      	ldr	r3, [pc, #248]	; (8003f4c <xTaskIncrementTick+0x158>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3301      	adds	r3, #1
 8003e56:	4a3d      	ldr	r2, [pc, #244]	; (8003f4c <xTaskIncrementTick+0x158>)
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	f000 fad1 	bl	8004400 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e5e:	4b3c      	ldr	r3, [pc, #240]	; (8003f50 <xTaskIncrementTick+0x15c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d349      	bcc.n	8003efc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e68:	4b36      	ldr	r3, [pc, #216]	; (8003f44 <xTaskIncrementTick+0x150>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d104      	bne.n	8003e7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e72:	4b37      	ldr	r3, [pc, #220]	; (8003f50 <xTaskIncrementTick+0x15c>)
 8003e74:	f04f 32ff 	mov.w	r2, #4294967295
 8003e78:	601a      	str	r2, [r3, #0]
					break;
 8003e7a:	e03f      	b.n	8003efc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e7c:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <xTaskIncrementTick+0x150>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d203      	bcs.n	8003e9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e94:	4a2e      	ldr	r2, [pc, #184]	; (8003f50 <xTaskIncrementTick+0x15c>)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e9a:	e02f      	b.n	8003efc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe fec5 	bl	8002c30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	3318      	adds	r3, #24
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe febc 	bl	8002c30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebc:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <xTaskIncrementTick+0x160>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d903      	bls.n	8003ecc <xTaskIncrementTick+0xd8>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	4a22      	ldr	r2, [pc, #136]	; (8003f54 <xTaskIncrementTick+0x160>)
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4a1f      	ldr	r2, [pc, #124]	; (8003f58 <xTaskIncrementTick+0x164>)
 8003eda:	441a      	add	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	f7fe fe47 	bl	8002b76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eec:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <xTaskIncrementTick+0x168>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d3b8      	bcc.n	8003e68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003efa:	e7b5      	b.n	8003e68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003efc:	4b17      	ldr	r3, [pc, #92]	; (8003f5c <xTaskIncrementTick+0x168>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f02:	4915      	ldr	r1, [pc, #84]	; (8003f58 <xTaskIncrementTick+0x164>)
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d901      	bls.n	8003f18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f14:	2301      	movs	r3, #1
 8003f16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f18:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <xTaskIncrementTick+0x16c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e004      	b.n	8003f30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f26:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <xTaskIncrementTick+0x170>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	4a0d      	ldr	r2, [pc, #52]	; (8003f64 <xTaskIncrementTick+0x170>)
 8003f2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f30:	697b      	ldr	r3, [r7, #20]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000d28 	.word	0x20000d28
 8003f40:	20000d04 	.word	0x20000d04
 8003f44:	20000cb8 	.word	0x20000cb8
 8003f48:	20000cbc 	.word	0x20000cbc
 8003f4c:	20000d18 	.word	0x20000d18
 8003f50:	20000d20 	.word	0x20000d20
 8003f54:	20000d08 	.word	0x20000d08
 8003f58:	20000830 	.word	0x20000830
 8003f5c:	2000082c 	.word	0x2000082c
 8003f60:	20000d14 	.word	0x20000d14
 8003f64:	20000d10 	.word	0x20000d10

08003f68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f6e:	4b28      	ldr	r3, [pc, #160]	; (8004010 <vTaskSwitchContext+0xa8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f76:	4b27      	ldr	r3, [pc, #156]	; (8004014 <vTaskSwitchContext+0xac>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f7c:	e041      	b.n	8004002 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003f7e:	4b25      	ldr	r3, [pc, #148]	; (8004014 <vTaskSwitchContext+0xac>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f84:	4b24      	ldr	r3, [pc, #144]	; (8004018 <vTaskSwitchContext+0xb0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	e010      	b.n	8003fae <vTaskSwitchContext+0x46>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	607b      	str	r3, [r7, #4]
}
 8003fa4:	bf00      	nop
 8003fa6:	e7fe      	b.n	8003fa6 <vTaskSwitchContext+0x3e>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	491b      	ldr	r1, [pc, #108]	; (800401c <vTaskSwitchContext+0xb4>)
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0e4      	beq.n	8003f8c <vTaskSwitchContext+0x24>
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4a13      	ldr	r2, [pc, #76]	; (800401c <vTaskSwitchContext+0xb4>)
 8003fce:	4413      	add	r3, r2
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d104      	bne.n	8003ff2 <vTaskSwitchContext+0x8a>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4a09      	ldr	r2, [pc, #36]	; (8004020 <vTaskSwitchContext+0xb8>)
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4a06      	ldr	r2, [pc, #24]	; (8004018 <vTaskSwitchContext+0xb0>)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6013      	str	r3, [r2, #0]
}
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20000d28 	.word	0x20000d28
 8004014:	20000d14 	.word	0x20000d14
 8004018:	20000d08 	.word	0x20000d08
 800401c:	20000830 	.word	0x20000830
 8004020:	2000082c 	.word	0x2000082c

08004024 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	60fb      	str	r3, [r7, #12]
}
 8004046:	bf00      	nop
 8004048:	e7fe      	b.n	8004048 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800404a:	4b07      	ldr	r3, [pc, #28]	; (8004068 <vTaskPlaceOnEventList+0x44>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3318      	adds	r3, #24
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fe fdb3 	bl	8002bbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004058:	2101      	movs	r1, #1
 800405a:	6838      	ldr	r0, [r7, #0]
 800405c:	f000 fa7c 	bl	8004558 <prvAddCurrentTaskToDelayedList>
}
 8004060:	bf00      	nop
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	2000082c 	.word	0x2000082c

0800406c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10a      	bne.n	8004094 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	617b      	str	r3, [r7, #20]
}
 8004090:	bf00      	nop
 8004092:	e7fe      	b.n	8004092 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004094:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3318      	adds	r3, #24
 800409a:	4619      	mov	r1, r3
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7fe fd6a 	bl	8002b76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80040a8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	68b8      	ldr	r0, [r7, #8]
 80040b2:	f000 fa51 	bl	8004558 <prvAddCurrentTaskToDelayedList>
	}
 80040b6:	bf00      	nop
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	2000082c 	.word	0x2000082c

080040c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	60fb      	str	r3, [r7, #12]
}
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	3318      	adds	r3, #24
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe fd9b 	bl	8002c30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040fa:	4b1e      	ldr	r3, [pc, #120]	; (8004174 <xTaskRemoveFromEventList+0xb0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d11d      	bne.n	800413e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	3304      	adds	r3, #4
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe fd92 	bl	8002c30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004110:	4b19      	ldr	r3, [pc, #100]	; (8004178 <xTaskRemoveFromEventList+0xb4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d903      	bls.n	8004120 <xTaskRemoveFromEventList+0x5c>
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	4a16      	ldr	r2, [pc, #88]	; (8004178 <xTaskRemoveFromEventList+0xb4>)
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4a13      	ldr	r2, [pc, #76]	; (800417c <xTaskRemoveFromEventList+0xb8>)
 800412e:	441a      	add	r2, r3
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f7fe fd1d 	bl	8002b76 <vListInsertEnd>
 800413c:	e005      	b.n	800414a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	3318      	adds	r3, #24
 8004142:	4619      	mov	r1, r3
 8004144:	480e      	ldr	r0, [pc, #56]	; (8004180 <xTaskRemoveFromEventList+0xbc>)
 8004146:	f7fe fd16 	bl	8002b76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414e:	4b0d      	ldr	r3, [pc, #52]	; (8004184 <xTaskRemoveFromEventList+0xc0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	429a      	cmp	r2, r3
 8004156:	d905      	bls.n	8004164 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004158:	2301      	movs	r3, #1
 800415a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <xTaskRemoveFromEventList+0xc4>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	e001      	b.n	8004168 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004168:	697b      	ldr	r3, [r7, #20]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000d28 	.word	0x20000d28
 8004178:	20000d08 	.word	0x20000d08
 800417c:	20000830 	.word	0x20000830
 8004180:	20000cc0 	.word	0x20000cc0
 8004184:	2000082c 	.word	0x2000082c
 8004188:	20000d14 	.word	0x20000d14

0800418c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004194:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <vTaskInternalSetTimeOutState+0x24>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <vTaskInternalSetTimeOutState+0x28>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	605a      	str	r2, [r3, #4]
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	20000d18 	.word	0x20000d18
 80041b4:	20000d04 	.word	0x20000d04

080041b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	613b      	str	r3, [r7, #16]
}
 80041da:	bf00      	nop
 80041dc:	e7fe      	b.n	80041dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	60fb      	str	r3, [r7, #12]
}
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80041fa:	f000 fe7b 	bl	8004ef4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041fe:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <xTaskCheckForTimeOut+0xbc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004216:	d102      	bne.n	800421e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004218:	2300      	movs	r3, #0
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	e023      	b.n	8004266 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4b15      	ldr	r3, [pc, #84]	; (8004278 <xTaskCheckForTimeOut+0xc0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d007      	beq.n	800423a <xTaskCheckForTimeOut+0x82>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	429a      	cmp	r2, r3
 8004232:	d302      	bcc.n	800423a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004234:	2301      	movs	r3, #1
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	e015      	b.n	8004266 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	429a      	cmp	r2, r3
 8004242:	d20b      	bcs.n	800425c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	1ad2      	subs	r2, r2, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ff9b 	bl	800418c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	e004      	b.n	8004266 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004262:	2301      	movs	r3, #1
 8004264:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004266:	f000 fe75 	bl	8004f54 <vPortExitCritical>

	return xReturn;
 800426a:	69fb      	ldr	r3, [r7, #28]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3720      	adds	r7, #32
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000d04 	.word	0x20000d04
 8004278:	20000d18 	.word	0x20000d18

0800427c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004280:	4b03      	ldr	r3, [pc, #12]	; (8004290 <vTaskMissedYield+0x14>)
 8004282:	2201      	movs	r2, #1
 8004284:	601a      	str	r2, [r3, #0]
}
 8004286:	bf00      	nop
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	20000d14 	.word	0x20000d14

08004294 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800429c:	f000 f852 	bl	8004344 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <prvIdleTask+0x28>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d9f9      	bls.n	800429c <prvIdleTask+0x8>
			{
				taskYIELD();
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <prvIdleTask+0x2c>)
 80042aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042b8:	e7f0      	b.n	800429c <prvIdleTask+0x8>
 80042ba:	bf00      	nop
 80042bc:	20000830 	.word	0x20000830
 80042c0:	e000ed04 	.word	0xe000ed04

080042c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042ca:	2300      	movs	r3, #0
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	e00c      	b.n	80042ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4a12      	ldr	r2, [pc, #72]	; (8004324 <prvInitialiseTaskLists+0x60>)
 80042dc:	4413      	add	r3, r2
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe fc1c 	bl	8002b1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3301      	adds	r3, #1
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b37      	cmp	r3, #55	; 0x37
 80042ee:	d9ef      	bls.n	80042d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042f0:	480d      	ldr	r0, [pc, #52]	; (8004328 <prvInitialiseTaskLists+0x64>)
 80042f2:	f7fe fc13 	bl	8002b1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042f6:	480d      	ldr	r0, [pc, #52]	; (800432c <prvInitialiseTaskLists+0x68>)
 80042f8:	f7fe fc10 	bl	8002b1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042fc:	480c      	ldr	r0, [pc, #48]	; (8004330 <prvInitialiseTaskLists+0x6c>)
 80042fe:	f7fe fc0d 	bl	8002b1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004302:	480c      	ldr	r0, [pc, #48]	; (8004334 <prvInitialiseTaskLists+0x70>)
 8004304:	f7fe fc0a 	bl	8002b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004308:	480b      	ldr	r0, [pc, #44]	; (8004338 <prvInitialiseTaskLists+0x74>)
 800430a:	f7fe fc07 	bl	8002b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800430e:	4b0b      	ldr	r3, [pc, #44]	; (800433c <prvInitialiseTaskLists+0x78>)
 8004310:	4a05      	ldr	r2, [pc, #20]	; (8004328 <prvInitialiseTaskLists+0x64>)
 8004312:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004314:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <prvInitialiseTaskLists+0x7c>)
 8004316:	4a05      	ldr	r2, [pc, #20]	; (800432c <prvInitialiseTaskLists+0x68>)
 8004318:	601a      	str	r2, [r3, #0]
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000830 	.word	0x20000830
 8004328:	20000c90 	.word	0x20000c90
 800432c:	20000ca4 	.word	0x20000ca4
 8004330:	20000cc0 	.word	0x20000cc0
 8004334:	20000cd4 	.word	0x20000cd4
 8004338:	20000cec 	.word	0x20000cec
 800433c:	20000cb8 	.word	0x20000cb8
 8004340:	20000cbc 	.word	0x20000cbc

08004344 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800434a:	e019      	b.n	8004380 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800434c:	f000 fdd2 	bl	8004ef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004350:	4b10      	ldr	r3, [pc, #64]	; (8004394 <prvCheckTasksWaitingTermination+0x50>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3304      	adds	r3, #4
 800435c:	4618      	mov	r0, r3
 800435e:	f7fe fc67 	bl	8002c30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004362:	4b0d      	ldr	r3, [pc, #52]	; (8004398 <prvCheckTasksWaitingTermination+0x54>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3b01      	subs	r3, #1
 8004368:	4a0b      	ldr	r2, [pc, #44]	; (8004398 <prvCheckTasksWaitingTermination+0x54>)
 800436a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <prvCheckTasksWaitingTermination+0x58>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3b01      	subs	r3, #1
 8004372:	4a0a      	ldr	r2, [pc, #40]	; (800439c <prvCheckTasksWaitingTermination+0x58>)
 8004374:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004376:	f000 fded 	bl	8004f54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f810 	bl	80043a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004380:	4b06      	ldr	r3, [pc, #24]	; (800439c <prvCheckTasksWaitingTermination+0x58>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e1      	bne.n	800434c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000cd4 	.word	0x20000cd4
 8004398:	20000d00 	.word	0x20000d00
 800439c:	20000ce8 	.word	0x20000ce8

080043a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d108      	bne.n	80043c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 ff8a 	bl	80052d0 <vPortFree>
				vPortFree( pxTCB );
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 ff87 	bl	80052d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043c2:	e018      	b.n	80043f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d103      	bne.n	80043d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 ff7e 	bl	80052d0 <vPortFree>
	}
 80043d4:	e00f      	b.n	80043f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d00a      	beq.n	80043f6 <prvDeleteTCB+0x56>
	__asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	60fb      	str	r3, [r7, #12]
}
 80043f2:	bf00      	nop
 80043f4:	e7fe      	b.n	80043f4 <prvDeleteTCB+0x54>
	}
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004406:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <prvResetNextTaskUnblockTime+0x38>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d104      	bne.n	800441a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <prvResetNextTaskUnblockTime+0x3c>)
 8004412:	f04f 32ff 	mov.w	r2, #4294967295
 8004416:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004418:	e008      	b.n	800442c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800441a:	4b07      	ldr	r3, [pc, #28]	; (8004438 <prvResetNextTaskUnblockTime+0x38>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	4a04      	ldr	r2, [pc, #16]	; (800443c <prvResetNextTaskUnblockTime+0x3c>)
 800442a:	6013      	str	r3, [r2, #0]
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	20000cb8 	.word	0x20000cb8
 800443c:	20000d20 	.word	0x20000d20

08004440 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <xTaskGetSchedulerState+0x34>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800444e:	2301      	movs	r3, #1
 8004450:	607b      	str	r3, [r7, #4]
 8004452:	e008      	b.n	8004466 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004454:	4b08      	ldr	r3, [pc, #32]	; (8004478 <xTaskGetSchedulerState+0x38>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d102      	bne.n	8004462 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800445c:	2302      	movs	r3, #2
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	e001      	b.n	8004466 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004462:	2300      	movs	r3, #0
 8004464:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004466:	687b      	ldr	r3, [r7, #4]
	}
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	20000d0c 	.word	0x20000d0c
 8004478:	20000d28 	.word	0x20000d28

0800447c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d056      	beq.n	8004540 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004492:	4b2e      	ldr	r3, [pc, #184]	; (800454c <xTaskPriorityDisinherit+0xd0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	429a      	cmp	r2, r3
 800449a:	d00a      	beq.n	80044b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	60fb      	str	r3, [r7, #12]
}
 80044ae:	bf00      	nop
 80044b0:	e7fe      	b.n	80044b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	60bb      	str	r3, [r7, #8]
}
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d4:	1e5a      	subs	r2, r3, #1
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d02c      	beq.n	8004540 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d128      	bne.n	8004540 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	3304      	adds	r3, #4
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe fb9c 	bl	8002c30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004510:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <xTaskPriorityDisinherit+0xd4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d903      	bls.n	8004520 <xTaskPriorityDisinherit+0xa4>
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	4a0c      	ldr	r2, [pc, #48]	; (8004550 <xTaskPriorityDisinherit+0xd4>)
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4a09      	ldr	r2, [pc, #36]	; (8004554 <xTaskPriorityDisinherit+0xd8>)
 800452e:	441a      	add	r2, r3
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	3304      	adds	r3, #4
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f7fe fb1d 	bl	8002b76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800453c:	2301      	movs	r3, #1
 800453e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004540:	697b      	ldr	r3, [r7, #20]
	}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	2000082c 	.word	0x2000082c
 8004550:	20000d08 	.word	0x20000d08
 8004554:	20000830 	.word	0x20000830

08004558 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004562:	4b21      	ldr	r3, [pc, #132]	; (80045e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004568:	4b20      	ldr	r3, [pc, #128]	; (80045ec <prvAddCurrentTaskToDelayedList+0x94>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3304      	adds	r3, #4
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe fb5e 	bl	8002c30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d10a      	bne.n	8004592 <prvAddCurrentTaskToDelayedList+0x3a>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004582:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <prvAddCurrentTaskToDelayedList+0x94>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3304      	adds	r3, #4
 8004588:	4619      	mov	r1, r3
 800458a:	4819      	ldr	r0, [pc, #100]	; (80045f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800458c:	f7fe faf3 	bl	8002b76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004590:	e026      	b.n	80045e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4413      	add	r3, r2
 8004598:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800459a:	4b14      	ldr	r3, [pc, #80]	; (80045ec <prvAddCurrentTaskToDelayedList+0x94>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d209      	bcs.n	80045be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045aa:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <prvAddCurrentTaskToDelayedList+0x94>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3304      	adds	r3, #4
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f7fe fb01 	bl	8002bbe <vListInsert>
}
 80045bc:	e010      	b.n	80045e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045be:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <prvAddCurrentTaskToDelayedList+0x94>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f7fe faf7 	bl	8002bbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045d0:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d202      	bcs.n	80045e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80045da:	4a08      	ldr	r2, [pc, #32]	; (80045fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	6013      	str	r3, [r2, #0]
}
 80045e0:	bf00      	nop
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	20000d04 	.word	0x20000d04
 80045ec:	2000082c 	.word	0x2000082c
 80045f0:	20000cec 	.word	0x20000cec
 80045f4:	20000cbc 	.word	0x20000cbc
 80045f8:	20000cb8 	.word	0x20000cb8
 80045fc:	20000d20 	.word	0x20000d20

08004600 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	; 0x28
 8004604:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800460a:	f000 fb07 	bl	8004c1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800460e:	4b1c      	ldr	r3, [pc, #112]	; (8004680 <xTimerCreateTimerTask+0x80>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d021      	beq.n	800465a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800461e:	1d3a      	adds	r2, r7, #4
 8004620:	f107 0108 	add.w	r1, r7, #8
 8004624:	f107 030c 	add.w	r3, r7, #12
 8004628:	4618      	mov	r0, r3
 800462a:	f7fe fa5d 	bl	8002ae8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	9202      	str	r2, [sp, #8]
 8004636:	9301      	str	r3, [sp, #4]
 8004638:	2302      	movs	r3, #2
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2300      	movs	r3, #0
 800463e:	460a      	mov	r2, r1
 8004640:	4910      	ldr	r1, [pc, #64]	; (8004684 <xTimerCreateTimerTask+0x84>)
 8004642:	4811      	ldr	r0, [pc, #68]	; (8004688 <xTimerCreateTimerTask+0x88>)
 8004644:	f7ff f8df 	bl	8003806 <xTaskCreateStatic>
 8004648:	4603      	mov	r3, r0
 800464a:	4a10      	ldr	r2, [pc, #64]	; (800468c <xTimerCreateTimerTask+0x8c>)
 800464c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800464e:	4b0f      	ldr	r3, [pc, #60]	; (800468c <xTimerCreateTimerTask+0x8c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004656:	2301      	movs	r3, #1
 8004658:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10a      	bne.n	8004676 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	613b      	str	r3, [r7, #16]
}
 8004672:	bf00      	nop
 8004674:	e7fe      	b.n	8004674 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004676:	697b      	ldr	r3, [r7, #20]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20000d5c 	.word	0x20000d5c
 8004684:	08006608 	.word	0x08006608
 8004688:	080047c5 	.word	0x080047c5
 800468c:	20000d60 	.word	0x20000d60

08004690 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	; 0x28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800469e:	2300      	movs	r3, #0
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10a      	bne.n	80046be <xTimerGenericCommand+0x2e>
	__asm volatile
 80046a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	623b      	str	r3, [r7, #32]
}
 80046ba:	bf00      	nop
 80046bc:	e7fe      	b.n	80046bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046be:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <xTimerGenericCommand+0x98>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d02a      	beq.n	800471c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b05      	cmp	r3, #5
 80046d6:	dc18      	bgt.n	800470a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046d8:	f7ff feb2 	bl	8004440 <xTaskGetSchedulerState>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d109      	bne.n	80046f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046e2:	4b11      	ldr	r3, [pc, #68]	; (8004728 <xTimerGenericCommand+0x98>)
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	f107 0110 	add.w	r1, r7, #16
 80046ea:	2300      	movs	r3, #0
 80046ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ee:	f7fe fc09 	bl	8002f04 <xQueueGenericSend>
 80046f2:	6278      	str	r0, [r7, #36]	; 0x24
 80046f4:	e012      	b.n	800471c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046f6:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <xTimerGenericCommand+0x98>)
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	f107 0110 	add.w	r1, r7, #16
 80046fe:	2300      	movs	r3, #0
 8004700:	2200      	movs	r2, #0
 8004702:	f7fe fbff 	bl	8002f04 <xQueueGenericSend>
 8004706:	6278      	str	r0, [r7, #36]	; 0x24
 8004708:	e008      	b.n	800471c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800470a:	4b07      	ldr	r3, [pc, #28]	; (8004728 <xTimerGenericCommand+0x98>)
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	f107 0110 	add.w	r1, r7, #16
 8004712:	2300      	movs	r3, #0
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	f7fe fd0f 	bl	8003138 <xQueueGenericSendFromISR>
 800471a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800471e:	4618      	mov	r0, r3
 8004720:	3728      	adds	r7, #40	; 0x28
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000d5c 	.word	0x20000d5c

0800472c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af02      	add	r7, sp, #8
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004736:	4b22      	ldr	r3, [pc, #136]	; (80047c0 <prvProcessExpiredTimer+0x94>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	3304      	adds	r3, #4
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe fa73 	bl	8002c30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d022      	beq.n	800479e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	699a      	ldr	r2, [r3, #24]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	18d1      	adds	r1, r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	6978      	ldr	r0, [r7, #20]
 8004766:	f000 f8d1 	bl	800490c <prvInsertTimerInActiveList>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01f      	beq.n	80047b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004770:	2300      	movs	r3, #0
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	2300      	movs	r3, #0
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	2100      	movs	r1, #0
 800477a:	6978      	ldr	r0, [r7, #20]
 800477c:	f7ff ff88 	bl	8004690 <xTimerGenericCommand>
 8004780:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d113      	bne.n	80047b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	60fb      	str	r3, [r7, #12]
}
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	6978      	ldr	r0, [r7, #20]
 80047b6:	4798      	blx	r3
}
 80047b8:	bf00      	nop
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20000d54 	.word	0x20000d54

080047c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047cc:	f107 0308 	add.w	r3, r7, #8
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 f857 	bl	8004884 <prvGetNextExpireTime>
 80047d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4619      	mov	r1, r3
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f803 	bl	80047e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047e2:	f000 f8d5 	bl	8004990 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047e6:	e7f1      	b.n	80047cc <prvTimerTask+0x8>

080047e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047f2:	f7ff fa43 	bl	8003c7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047f6:	f107 0308 	add.w	r3, r7, #8
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 f866 	bl	80048cc <prvSampleTimeNow>
 8004800:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d130      	bne.n	800486a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10a      	bne.n	8004824 <prvProcessTimerOrBlockTask+0x3c>
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	429a      	cmp	r2, r3
 8004814:	d806      	bhi.n	8004824 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004816:	f7ff fa3f 	bl	8003c98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800481a:	68f9      	ldr	r1, [r7, #12]
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff ff85 	bl	800472c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004822:	e024      	b.n	800486e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800482a:	4b13      	ldr	r3, [pc, #76]	; (8004878 <prvProcessTimerOrBlockTask+0x90>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <prvProcessTimerOrBlockTask+0x50>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <prvProcessTimerOrBlockTask+0x52>
 8004838:	2300      	movs	r3, #0
 800483a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <prvProcessTimerOrBlockTask+0x94>)
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	4619      	mov	r1, r3
 800484a:	f7fe ff4f 	bl	80036ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800484e:	f7ff fa23 	bl	8003c98 <xTaskResumeAll>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10a      	bne.n	800486e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004858:	4b09      	ldr	r3, [pc, #36]	; (8004880 <prvProcessTimerOrBlockTask+0x98>)
 800485a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	f3bf 8f6f 	isb	sy
}
 8004868:	e001      	b.n	800486e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800486a:	f7ff fa15 	bl	8003c98 <xTaskResumeAll>
}
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000d58 	.word	0x20000d58
 800487c:	20000d5c 	.word	0x20000d5c
 8004880:	e000ed04 	.word	0xe000ed04

08004884 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800488c:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <prvGetNextExpireTime+0x44>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <prvGetNextExpireTime+0x16>
 8004896:	2201      	movs	r2, #1
 8004898:	e000      	b.n	800489c <prvGetNextExpireTime+0x18>
 800489a:	2200      	movs	r2, #0
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048a8:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <prvGetNextExpireTime+0x44>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	e001      	b.n	80048b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048b8:	68fb      	ldr	r3, [r7, #12]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20000d54 	.word	0x20000d54

080048cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048d4:	f7ff fa7e 	bl	8003dd4 <xTaskGetTickCount>
 80048d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048da:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <prvSampleTimeNow+0x3c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d205      	bcs.n	80048f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048e4:	f000 f936 	bl	8004b54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	e002      	b.n	80048f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048f6:	4a04      	ldr	r2, [pc, #16]	; (8004908 <prvSampleTimeNow+0x3c>)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048fc:	68fb      	ldr	r3, [r7, #12]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20000d64 	.word	0x20000d64

0800490c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	429a      	cmp	r2, r3
 8004930:	d812      	bhi.n	8004958 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	1ad2      	subs	r2, r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	429a      	cmp	r2, r3
 800493e:	d302      	bcc.n	8004946 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004940:	2301      	movs	r3, #1
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	e01b      	b.n	800497e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004946:	4b10      	ldr	r3, [pc, #64]	; (8004988 <prvInsertTimerInActiveList+0x7c>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3304      	adds	r3, #4
 800494e:	4619      	mov	r1, r3
 8004950:	4610      	mov	r0, r2
 8004952:	f7fe f934 	bl	8002bbe <vListInsert>
 8004956:	e012      	b.n	800497e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	d206      	bcs.n	800496e <prvInsertTimerInActiveList+0x62>
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d302      	bcc.n	800496e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004968:	2301      	movs	r3, #1
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	e007      	b.n	800497e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800496e:	4b07      	ldr	r3, [pc, #28]	; (800498c <prvInsertTimerInActiveList+0x80>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3304      	adds	r3, #4
 8004976:	4619      	mov	r1, r3
 8004978:	4610      	mov	r0, r2
 800497a:	f7fe f920 	bl	8002bbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800497e:	697b      	ldr	r3, [r7, #20]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20000d58 	.word	0x20000d58
 800498c:	20000d54 	.word	0x20000d54

08004990 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08e      	sub	sp, #56	; 0x38
 8004994:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004996:	e0ca      	b.n	8004b2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	da18      	bge.n	80049d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800499e:	1d3b      	adds	r3, r7, #4
 80049a0:	3304      	adds	r3, #4
 80049a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	61fb      	str	r3, [r7, #28]
}
 80049bc:	bf00      	nop
 80049be:	e7fe      	b.n	80049be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c6:	6850      	ldr	r0, [r2, #4]
 80049c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ca:	6892      	ldr	r2, [r2, #8]
 80049cc:	4611      	mov	r1, r2
 80049ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f2c0 80aa 	blt.w	8004b2c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	3304      	adds	r3, #4
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fe f921 	bl	8002c30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049ee:	463b      	mov	r3, r7
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff ff6b 	bl	80048cc <prvSampleTimeNow>
 80049f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b09      	cmp	r3, #9
 80049fc:	f200 8097 	bhi.w	8004b2e <prvProcessReceivedCommands+0x19e>
 8004a00:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <prvProcessReceivedCommands+0x78>)
 8004a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a06:	bf00      	nop
 8004a08:	08004a31 	.word	0x08004a31
 8004a0c:	08004a31 	.word	0x08004a31
 8004a10:	08004a31 	.word	0x08004a31
 8004a14:	08004aa5 	.word	0x08004aa5
 8004a18:	08004ab9 	.word	0x08004ab9
 8004a1c:	08004b03 	.word	0x08004b03
 8004a20:	08004a31 	.word	0x08004a31
 8004a24:	08004a31 	.word	0x08004a31
 8004a28:	08004aa5 	.word	0x08004aa5
 8004a2c:	08004ab9 	.word	0x08004ab9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	18d1      	adds	r1, r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a50:	f7ff ff5c 	bl	800490c <prvInsertTimerInActiveList>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d069      	beq.n	8004b2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d05e      	beq.n	8004b2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	441a      	add	r2, r3
 8004a78:	2300      	movs	r3, #0
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	2100      	movs	r1, #0
 8004a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a82:	f7ff fe05 	bl	8004690 <xTimerGenericCommand>
 8004a86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d14f      	bne.n	8004b2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	61bb      	str	r3, [r7, #24]
}
 8004aa0:	bf00      	nop
 8004aa2:	e7fe      	b.n	8004aa2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004ab6:	e03a      	b.n	8004b2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004abe:	f043 0301 	orr.w	r3, r3, #1
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	617b      	str	r3, [r7, #20]
}
 8004aea:	bf00      	nop
 8004aec:	e7fe      	b.n	8004aec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	18d1      	adds	r1, r2, r3
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004afc:	f7ff ff06 	bl	800490c <prvInsertTimerInActiveList>
					break;
 8004b00:	e015      	b.n	8004b2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d103      	bne.n	8004b18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b12:	f000 fbdd 	bl	80052d0 <vPortFree>
 8004b16:	e00a      	b.n	8004b2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b2a:	e000      	b.n	8004b2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <prvProcessReceivedCommands+0x1c0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	1d39      	adds	r1, r7, #4
 8004b34:	2200      	movs	r2, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fe fbb0 	bl	800329c <xQueueReceive>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f47f af2a 	bne.w	8004998 <prvProcessReceivedCommands+0x8>
	}
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop
 8004b48:	3730      	adds	r7, #48	; 0x30
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000d5c 	.word	0x20000d5c

08004b54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b5a:	e048      	b.n	8004bee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b5c:	4b2d      	ldr	r3, [pc, #180]	; (8004c14 <prvSwitchTimerLists+0xc0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b66:	4b2b      	ldr	r3, [pc, #172]	; (8004c14 <prvSwitchTimerLists+0xc0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fe f85b 	bl	8002c30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d02e      	beq.n	8004bee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4413      	add	r3, r2
 8004b98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d90e      	bls.n	8004bc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bae:	4b19      	ldr	r3, [pc, #100]	; (8004c14 <prvSwitchTimerLists+0xc0>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4610      	mov	r0, r2
 8004bba:	f7fe f800 	bl	8002bbe <vListInsert>
 8004bbe:	e016      	b.n	8004bee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	2100      	movs	r1, #0
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f7ff fd60 	bl	8004690 <xTimerGenericCommand>
 8004bd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	603b      	str	r3, [r7, #0]
}
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bee:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <prvSwitchTimerLists+0xc0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1b1      	bne.n	8004b5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <prvSwitchTimerLists+0xc0>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004bfe:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <prvSwitchTimerLists+0xc4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a04      	ldr	r2, [pc, #16]	; (8004c14 <prvSwitchTimerLists+0xc0>)
 8004c04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c06:	4a04      	ldr	r2, [pc, #16]	; (8004c18 <prvSwitchTimerLists+0xc4>)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	6013      	str	r3, [r2, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	20000d54 	.word	0x20000d54
 8004c18:	20000d58 	.word	0x20000d58

08004c1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c22:	f000 f967 	bl	8004ef4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c26:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <prvCheckForValidListAndQueue+0x60>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d120      	bne.n	8004c70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c2e:	4814      	ldr	r0, [pc, #80]	; (8004c80 <prvCheckForValidListAndQueue+0x64>)
 8004c30:	f7fd ff74 	bl	8002b1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c34:	4813      	ldr	r0, [pc, #76]	; (8004c84 <prvCheckForValidListAndQueue+0x68>)
 8004c36:	f7fd ff71 	bl	8002b1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c3a:	4b13      	ldr	r3, [pc, #76]	; (8004c88 <prvCheckForValidListAndQueue+0x6c>)
 8004c3c:	4a10      	ldr	r2, [pc, #64]	; (8004c80 <prvCheckForValidListAndQueue+0x64>)
 8004c3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c40:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <prvCheckForValidListAndQueue+0x70>)
 8004c42:	4a10      	ldr	r2, [pc, #64]	; (8004c84 <prvCheckForValidListAndQueue+0x68>)
 8004c44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c46:	2300      	movs	r3, #0
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <prvCheckForValidListAndQueue+0x74>)
 8004c4c:	4a11      	ldr	r2, [pc, #68]	; (8004c94 <prvCheckForValidListAndQueue+0x78>)
 8004c4e:	2110      	movs	r1, #16
 8004c50:	200a      	movs	r0, #10
 8004c52:	f7fe f87f 	bl	8002d54 <xQueueGenericCreateStatic>
 8004c56:	4603      	mov	r3, r0
 8004c58:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <prvCheckForValidListAndQueue+0x60>)
 8004c5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c5c:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <prvCheckForValidListAndQueue+0x60>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c64:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <prvCheckForValidListAndQueue+0x60>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	490b      	ldr	r1, [pc, #44]	; (8004c98 <prvCheckForValidListAndQueue+0x7c>)
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fe fd14 	bl	8003698 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c70:	f000 f970 	bl	8004f54 <vPortExitCritical>
}
 8004c74:	bf00      	nop
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000d5c 	.word	0x20000d5c
 8004c80:	20000d2c 	.word	0x20000d2c
 8004c84:	20000d40 	.word	0x20000d40
 8004c88:	20000d54 	.word	0x20000d54
 8004c8c:	20000d58 	.word	0x20000d58
 8004c90:	20000e08 	.word	0x20000e08
 8004c94:	20000d68 	.word	0x20000d68
 8004c98:	08006610 	.word	0x08006610

08004c9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3b04      	subs	r3, #4
 8004cac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3b04      	subs	r3, #4
 8004cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f023 0201 	bic.w	r2, r3, #1
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	3b04      	subs	r3, #4
 8004cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ccc:	4a0c      	ldr	r2, [pc, #48]	; (8004d00 <pxPortInitialiseStack+0x64>)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3b14      	subs	r3, #20
 8004cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3b04      	subs	r3, #4
 8004ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f06f 0202 	mvn.w	r2, #2
 8004cea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3b20      	subs	r3, #32
 8004cf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	08004d05 	.word	0x08004d05

08004d04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <prvTaskExitError+0x54>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d16:	d00a      	beq.n	8004d2e <prvTaskExitError+0x2a>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	60fb      	str	r3, [r7, #12]
}
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <prvTaskExitError+0x28>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	60bb      	str	r3, [r7, #8]
}
 8004d40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d42:	bf00      	nop
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0fc      	beq.n	8004d44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d4a:	bf00      	nop
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	2000000c 	.word	0x2000000c
 8004d5c:	00000000 	.word	0x00000000

08004d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d60:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <pxCurrentTCBConst2>)
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	6808      	ldr	r0, [r1, #0]
 8004d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6a:	f380 8809 	msr	PSP, r0
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f380 8811 	msr	BASEPRI, r0
 8004d7a:	4770      	bx	lr
 8004d7c:	f3af 8000 	nop.w

08004d80 <pxCurrentTCBConst2>:
 8004d80:	2000082c 	.word	0x2000082c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop

08004d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d88:	4808      	ldr	r0, [pc, #32]	; (8004dac <prvPortStartFirstTask+0x24>)
 8004d8a:	6800      	ldr	r0, [r0, #0]
 8004d8c:	6800      	ldr	r0, [r0, #0]
 8004d8e:	f380 8808 	msr	MSP, r0
 8004d92:	f04f 0000 	mov.w	r0, #0
 8004d96:	f380 8814 	msr	CONTROL, r0
 8004d9a:	b662      	cpsie	i
 8004d9c:	b661      	cpsie	f
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	df00      	svc	0
 8004da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004daa:	bf00      	nop
 8004dac:	e000ed08 	.word	0xe000ed08

08004db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004db6:	4b46      	ldr	r3, [pc, #280]	; (8004ed0 <xPortStartScheduler+0x120>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a46      	ldr	r2, [pc, #280]	; (8004ed4 <xPortStartScheduler+0x124>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d10a      	bne.n	8004dd6 <xPortStartScheduler+0x26>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	613b      	str	r3, [r7, #16]
}
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004dd6:	4b3e      	ldr	r3, [pc, #248]	; (8004ed0 <xPortStartScheduler+0x120>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a3f      	ldr	r2, [pc, #252]	; (8004ed8 <xPortStartScheduler+0x128>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d10a      	bne.n	8004df6 <xPortStartScheduler+0x46>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	60fb      	str	r3, [r7, #12]
}
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004df6:	4b39      	ldr	r3, [pc, #228]	; (8004edc <xPortStartScheduler+0x12c>)
 8004df8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	22ff      	movs	r2, #255	; 0xff
 8004e06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	4b31      	ldr	r3, [pc, #196]	; (8004ee0 <xPortStartScheduler+0x130>)
 8004e1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e1e:	4b31      	ldr	r3, [pc, #196]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e20:	2207      	movs	r2, #7
 8004e22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e24:	e009      	b.n	8004e3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e26:	4b2f      	ldr	r3, [pc, #188]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e3a:	78fb      	ldrb	r3, [r7, #3]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b80      	cmp	r3, #128	; 0x80
 8004e44:	d0ef      	beq.n	8004e26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e46:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f1c3 0307 	rsb	r3, r3, #7
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d00a      	beq.n	8004e68 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	60bb      	str	r3, [r7, #8]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e68:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e72:	4b1c      	ldr	r3, [pc, #112]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ee4 <xPortStartScheduler+0x134>)
 8004e7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e86:	4b18      	ldr	r3, [pc, #96]	; (8004ee8 <xPortStartScheduler+0x138>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a17      	ldr	r2, [pc, #92]	; (8004ee8 <xPortStartScheduler+0x138>)
 8004e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <xPortStartScheduler+0x138>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <xPortStartScheduler+0x138>)
 8004e98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e9e:	f000 f8dd 	bl	800505c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ea2:	4b12      	ldr	r3, [pc, #72]	; (8004eec <xPortStartScheduler+0x13c>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ea8:	f000 f8fc 	bl	80050a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004eac:	4b10      	ldr	r3, [pc, #64]	; (8004ef0 <xPortStartScheduler+0x140>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a0f      	ldr	r2, [pc, #60]	; (8004ef0 <xPortStartScheduler+0x140>)
 8004eb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004eb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004eb8:	f7ff ff66 	bl	8004d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ebc:	f7ff f854 	bl	8003f68 <vTaskSwitchContext>
	prvTaskExitError();
 8004ec0:	f7ff ff20 	bl	8004d04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	e000ed00 	.word	0xe000ed00
 8004ed4:	410fc271 	.word	0x410fc271
 8004ed8:	410fc270 	.word	0x410fc270
 8004edc:	e000e400 	.word	0xe000e400
 8004ee0:	20000e5c 	.word	0x20000e5c
 8004ee4:	20000e60 	.word	0x20000e60
 8004ee8:	e000ed20 	.word	0xe000ed20
 8004eec:	2000000c 	.word	0x2000000c
 8004ef0:	e000ef34 	.word	0xe000ef34

08004ef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	607b      	str	r3, [r7, #4]
}
 8004f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f0e:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <vPortEnterCritical+0x58>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3301      	adds	r3, #1
 8004f14:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <vPortEnterCritical+0x58>)
 8004f16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f18:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <vPortEnterCritical+0x58>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d10f      	bne.n	8004f40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <vPortEnterCritical+0x5c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	603b      	str	r3, [r7, #0]
}
 8004f3c:	bf00      	nop
 8004f3e:	e7fe      	b.n	8004f3e <vPortEnterCritical+0x4a>
	}
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	2000000c 	.word	0x2000000c
 8004f50:	e000ed04 	.word	0xe000ed04

08004f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f5a:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <vPortExitCritical+0x50>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <vPortExitCritical+0x24>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	607b      	str	r3, [r7, #4]
}
 8004f74:	bf00      	nop
 8004f76:	e7fe      	b.n	8004f76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f78:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <vPortExitCritical+0x50>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	4a09      	ldr	r2, [pc, #36]	; (8004fa4 <vPortExitCritical+0x50>)
 8004f80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f82:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <vPortExitCritical+0x50>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <vPortExitCritical+0x42>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	f383 8811 	msr	BASEPRI, r3
}
 8004f94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	2000000c 	.word	0x2000000c
	...

08004fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fb0:	f3ef 8009 	mrs	r0, PSP
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	4b15      	ldr	r3, [pc, #84]	; (8005010 <pxCurrentTCBConst>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	f01e 0f10 	tst.w	lr, #16
 8004fc0:	bf08      	it	eq
 8004fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fca:	6010      	str	r0, [r2, #0]
 8004fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fd4:	f380 8811 	msr	BASEPRI, r0
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f7fe ffc2 	bl	8003f68 <vTaskSwitchContext>
 8004fe4:	f04f 0000 	mov.w	r0, #0
 8004fe8:	f380 8811 	msr	BASEPRI, r0
 8004fec:	bc09      	pop	{r0, r3}
 8004fee:	6819      	ldr	r1, [r3, #0]
 8004ff0:	6808      	ldr	r0, [r1, #0]
 8004ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff6:	f01e 0f10 	tst.w	lr, #16
 8004ffa:	bf08      	it	eq
 8004ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005000:	f380 8809 	msr	PSP, r0
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	f3af 8000 	nop.w

08005010 <pxCurrentTCBConst>:
 8005010:	2000082c 	.word	0x2000082c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop

08005018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	607b      	str	r3, [r7, #4]
}
 8005030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005032:	f7fe fedf 	bl	8003df4 <xTaskIncrementTick>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <xPortSysTickHandler+0x40>)
 800503e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	2300      	movs	r3, #0
 8005046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f383 8811 	msr	BASEPRI, r3
}
 800504e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005050:	bf00      	nop
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <vPortSetupTimerInterrupt+0x34>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005066:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <vPortSetupTimerInterrupt+0x38>)
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <vPortSetupTimerInterrupt+0x3c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0a      	ldr	r2, [pc, #40]	; (800509c <vPortSetupTimerInterrupt+0x40>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	099b      	lsrs	r3, r3, #6
 8005078:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <vPortSetupTimerInterrupt+0x44>)
 800507a:	3b01      	subs	r3, #1
 800507c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800507e:	4b04      	ldr	r3, [pc, #16]	; (8005090 <vPortSetupTimerInterrupt+0x34>)
 8005080:	2207      	movs	r2, #7
 8005082:	601a      	str	r2, [r3, #0]
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	e000e010 	.word	0xe000e010
 8005094:	e000e018 	.word	0xe000e018
 8005098:	20000000 	.word	0x20000000
 800509c:	10624dd3 	.word	0x10624dd3
 80050a0:	e000e014 	.word	0xe000e014

080050a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050b4 <vPortEnableVFP+0x10>
 80050a8:	6801      	ldr	r1, [r0, #0]
 80050aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050ae:	6001      	str	r1, [r0, #0]
 80050b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050b2:	bf00      	nop
 80050b4:	e000ed88 	.word	0xe000ed88

080050b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80050be:	f3ef 8305 	mrs	r3, IPSR
 80050c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b0f      	cmp	r3, #15
 80050c8:	d914      	bls.n	80050f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050ca:	4a17      	ldr	r2, [pc, #92]	; (8005128 <vPortValidateInterruptPriority+0x70>)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050d4:	4b15      	ldr	r3, [pc, #84]	; (800512c <vPortValidateInterruptPriority+0x74>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	7afa      	ldrb	r2, [r7, #11]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d20a      	bcs.n	80050f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	607b      	str	r3, [r7, #4]
}
 80050f0:	bf00      	nop
 80050f2:	e7fe      	b.n	80050f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050f4:	4b0e      	ldr	r3, [pc, #56]	; (8005130 <vPortValidateInterruptPriority+0x78>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050fc:	4b0d      	ldr	r3, [pc, #52]	; (8005134 <vPortValidateInterruptPriority+0x7c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d90a      	bls.n	800511a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	603b      	str	r3, [r7, #0]
}
 8005116:	bf00      	nop
 8005118:	e7fe      	b.n	8005118 <vPortValidateInterruptPriority+0x60>
	}
 800511a:	bf00      	nop
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	e000e3f0 	.word	0xe000e3f0
 800512c:	20000e5c 	.word	0x20000e5c
 8005130:	e000ed0c 	.word	0xe000ed0c
 8005134:	20000e60 	.word	0x20000e60

08005138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	; 0x28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005140:	2300      	movs	r3, #0
 8005142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005144:	f7fe fd9a 	bl	8003c7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005148:	4b5b      	ldr	r3, [pc, #364]	; (80052b8 <pvPortMalloc+0x180>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005150:	f000 f920 	bl	8005394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005154:	4b59      	ldr	r3, [pc, #356]	; (80052bc <pvPortMalloc+0x184>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4013      	ands	r3, r2
 800515c:	2b00      	cmp	r3, #0
 800515e:	f040 8093 	bne.w	8005288 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01d      	beq.n	80051a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005168:	2208      	movs	r2, #8
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4413      	add	r3, r2
 800516e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	2b00      	cmp	r3, #0
 8005178:	d014      	beq.n	80051a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f023 0307 	bic.w	r3, r3, #7
 8005180:	3308      	adds	r3, #8
 8005182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <pvPortMalloc+0x6c>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	617b      	str	r3, [r7, #20]
}
 80051a0:	bf00      	nop
 80051a2:	e7fe      	b.n	80051a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d06e      	beq.n	8005288 <pvPortMalloc+0x150>
 80051aa:	4b45      	ldr	r3, [pc, #276]	; (80052c0 <pvPortMalloc+0x188>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d869      	bhi.n	8005288 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051b4:	4b43      	ldr	r3, [pc, #268]	; (80052c4 <pvPortMalloc+0x18c>)
 80051b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051b8:	4b42      	ldr	r3, [pc, #264]	; (80052c4 <pvPortMalloc+0x18c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051be:	e004      	b.n	80051ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d903      	bls.n	80051dc <pvPortMalloc+0xa4>
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f1      	bne.n	80051c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051dc:	4b36      	ldr	r3, [pc, #216]	; (80052b8 <pvPortMalloc+0x180>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d050      	beq.n	8005288 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2208      	movs	r2, #8
 80051ec:	4413      	add	r3, r2
 80051ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	1ad2      	subs	r2, r2, r3
 8005200:	2308      	movs	r3, #8
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	429a      	cmp	r2, r3
 8005206:	d91f      	bls.n	8005248 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4413      	add	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <pvPortMalloc+0xf8>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	613b      	str	r3, [r7, #16]
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	1ad2      	subs	r2, r2, r3
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005242:	69b8      	ldr	r0, [r7, #24]
 8005244:	f000 f908 	bl	8005458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005248:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <pvPortMalloc+0x188>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	4a1b      	ldr	r2, [pc, #108]	; (80052c0 <pvPortMalloc+0x188>)
 8005254:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005256:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <pvPortMalloc+0x188>)
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	4b1b      	ldr	r3, [pc, #108]	; (80052c8 <pvPortMalloc+0x190>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d203      	bcs.n	800526a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005262:	4b17      	ldr	r3, [pc, #92]	; (80052c0 <pvPortMalloc+0x188>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <pvPortMalloc+0x190>)
 8005268:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	4b13      	ldr	r3, [pc, #76]	; (80052bc <pvPortMalloc+0x184>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	431a      	orrs	r2, r3
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800527e:	4b13      	ldr	r3, [pc, #76]	; (80052cc <pvPortMalloc+0x194>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	4a11      	ldr	r2, [pc, #68]	; (80052cc <pvPortMalloc+0x194>)
 8005286:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005288:	f7fe fd06 	bl	8003c98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <pvPortMalloc+0x174>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	60fb      	str	r3, [r7, #12]
}
 80052a8:	bf00      	nop
 80052aa:	e7fe      	b.n	80052aa <pvPortMalloc+0x172>
	return pvReturn;
 80052ac:	69fb      	ldr	r3, [r7, #28]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3728      	adds	r7, #40	; 0x28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20004a6c 	.word	0x20004a6c
 80052bc:	20004a80 	.word	0x20004a80
 80052c0:	20004a70 	.word	0x20004a70
 80052c4:	20004a64 	.word	0x20004a64
 80052c8:	20004a74 	.word	0x20004a74
 80052cc:	20004a78 	.word	0x20004a78

080052d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d04d      	beq.n	800537e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052e2:	2308      	movs	r3, #8
 80052e4:	425b      	negs	r3, r3
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4413      	add	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	4b24      	ldr	r3, [pc, #144]	; (8005388 <vPortFree+0xb8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4013      	ands	r3, r2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10a      	bne.n	8005314 <vPortFree+0x44>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	60fb      	str	r3, [r7, #12]
}
 8005310:	bf00      	nop
 8005312:	e7fe      	b.n	8005312 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <vPortFree+0x62>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	60bb      	str	r3, [r7, #8]
}
 800532e:	bf00      	nop
 8005330:	e7fe      	b.n	8005330 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	4b14      	ldr	r3, [pc, #80]	; (8005388 <vPortFree+0xb8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01e      	beq.n	800537e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d11a      	bne.n	800537e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <vPortFree+0xb8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	43db      	mvns	r3, r3
 8005352:	401a      	ands	r2, r3
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005358:	f7fe fc90 	bl	8003c7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	4b0a      	ldr	r3, [pc, #40]	; (800538c <vPortFree+0xbc>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4413      	add	r3, r2
 8005366:	4a09      	ldr	r2, [pc, #36]	; (800538c <vPortFree+0xbc>)
 8005368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800536a:	6938      	ldr	r0, [r7, #16]
 800536c:	f000 f874 	bl	8005458 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005370:	4b07      	ldr	r3, [pc, #28]	; (8005390 <vPortFree+0xc0>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3301      	adds	r3, #1
 8005376:	4a06      	ldr	r2, [pc, #24]	; (8005390 <vPortFree+0xc0>)
 8005378:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800537a:	f7fe fc8d 	bl	8003c98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800537e:	bf00      	nop
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20004a80 	.word	0x20004a80
 800538c:	20004a70 	.word	0x20004a70
 8005390:	20004a7c 	.word	0x20004a7c

08005394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800539a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800539e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053a0:	4b27      	ldr	r3, [pc, #156]	; (8005440 <prvHeapInit+0xac>)
 80053a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00c      	beq.n	80053c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3307      	adds	r3, #7
 80053b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0307 	bic.w	r3, r3, #7
 80053ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	4a1f      	ldr	r2, [pc, #124]	; (8005440 <prvHeapInit+0xac>)
 80053c4:	4413      	add	r3, r2
 80053c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053cc:	4a1d      	ldr	r2, [pc, #116]	; (8005444 <prvHeapInit+0xb0>)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053d2:	4b1c      	ldr	r3, [pc, #112]	; (8005444 <prvHeapInit+0xb0>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	4413      	add	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053e0:	2208      	movs	r2, #8
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0307 	bic.w	r3, r3, #7
 80053ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4a15      	ldr	r2, [pc, #84]	; (8005448 <prvHeapInit+0xb4>)
 80053f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053f6:	4b14      	ldr	r3, [pc, #80]	; (8005448 <prvHeapInit+0xb4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2200      	movs	r2, #0
 80053fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053fe:	4b12      	ldr	r3, [pc, #72]	; (8005448 <prvHeapInit+0xb4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	1ad2      	subs	r2, r2, r3
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <prvHeapInit+0xb4>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	4a0a      	ldr	r2, [pc, #40]	; (800544c <prvHeapInit+0xb8>)
 8005422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	4a09      	ldr	r2, [pc, #36]	; (8005450 <prvHeapInit+0xbc>)
 800542a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <prvHeapInit+0xc0>)
 800542e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005432:	601a      	str	r2, [r3, #0]
}
 8005434:	bf00      	nop
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	20000e64 	.word	0x20000e64
 8005444:	20004a64 	.word	0x20004a64
 8005448:	20004a6c 	.word	0x20004a6c
 800544c:	20004a74 	.word	0x20004a74
 8005450:	20004a70 	.word	0x20004a70
 8005454:	20004a80 	.word	0x20004a80

08005458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005460:	4b28      	ldr	r3, [pc, #160]	; (8005504 <prvInsertBlockIntoFreeList+0xac>)
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e002      	b.n	800546c <prvInsertBlockIntoFreeList+0x14>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	429a      	cmp	r2, r3
 8005474:	d8f7      	bhi.n	8005466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	4413      	add	r3, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d108      	bne.n	800549a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	441a      	add	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	441a      	add	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d118      	bne.n	80054e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4b15      	ldr	r3, [pc, #84]	; (8005508 <prvInsertBlockIntoFreeList+0xb0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d00d      	beq.n	80054d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	441a      	add	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	e008      	b.n	80054e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054d6:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <prvInsertBlockIntoFreeList+0xb0>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	e003      	b.n	80054e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d002      	beq.n	80054f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054f6:	bf00      	nop
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20004a64 	.word	0x20004a64
 8005508:	20004a6c 	.word	0x20004a6c

0800550c <__errno>:
 800550c:	4b01      	ldr	r3, [pc, #4]	; (8005514 <__errno+0x8>)
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20000010 	.word	0x20000010

08005518 <__libc_init_array>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	4d0d      	ldr	r5, [pc, #52]	; (8005550 <__libc_init_array+0x38>)
 800551c:	4c0d      	ldr	r4, [pc, #52]	; (8005554 <__libc_init_array+0x3c>)
 800551e:	1b64      	subs	r4, r4, r5
 8005520:	10a4      	asrs	r4, r4, #2
 8005522:	2600      	movs	r6, #0
 8005524:	42a6      	cmp	r6, r4
 8005526:	d109      	bne.n	800553c <__libc_init_array+0x24>
 8005528:	4d0b      	ldr	r5, [pc, #44]	; (8005558 <__libc_init_array+0x40>)
 800552a:	4c0c      	ldr	r4, [pc, #48]	; (800555c <__libc_init_array+0x44>)
 800552c:	f001 f832 	bl	8006594 <_init>
 8005530:	1b64      	subs	r4, r4, r5
 8005532:	10a4      	asrs	r4, r4, #2
 8005534:	2600      	movs	r6, #0
 8005536:	42a6      	cmp	r6, r4
 8005538:	d105      	bne.n	8005546 <__libc_init_array+0x2e>
 800553a:	bd70      	pop	{r4, r5, r6, pc}
 800553c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005540:	4798      	blx	r3
 8005542:	3601      	adds	r6, #1
 8005544:	e7ee      	b.n	8005524 <__libc_init_array+0xc>
 8005546:	f855 3b04 	ldr.w	r3, [r5], #4
 800554a:	4798      	blx	r3
 800554c:	3601      	adds	r6, #1
 800554e:	e7f2      	b.n	8005536 <__libc_init_array+0x1e>
 8005550:	080066d0 	.word	0x080066d0
 8005554:	080066d0 	.word	0x080066d0
 8005558:	080066d0 	.word	0x080066d0
 800555c:	080066d4 	.word	0x080066d4

08005560 <memcpy>:
 8005560:	440a      	add	r2, r1
 8005562:	4291      	cmp	r1, r2
 8005564:	f100 33ff 	add.w	r3, r0, #4294967295
 8005568:	d100      	bne.n	800556c <memcpy+0xc>
 800556a:	4770      	bx	lr
 800556c:	b510      	push	{r4, lr}
 800556e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005572:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005576:	4291      	cmp	r1, r2
 8005578:	d1f9      	bne.n	800556e <memcpy+0xe>
 800557a:	bd10      	pop	{r4, pc}

0800557c <memset>:
 800557c:	4402      	add	r2, r0
 800557e:	4603      	mov	r3, r0
 8005580:	4293      	cmp	r3, r2
 8005582:	d100      	bne.n	8005586 <memset+0xa>
 8005584:	4770      	bx	lr
 8005586:	f803 1b01 	strb.w	r1, [r3], #1
 800558a:	e7f9      	b.n	8005580 <memset+0x4>

0800558c <iprintf>:
 800558c:	b40f      	push	{r0, r1, r2, r3}
 800558e:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <iprintf+0x2c>)
 8005590:	b513      	push	{r0, r1, r4, lr}
 8005592:	681c      	ldr	r4, [r3, #0]
 8005594:	b124      	cbz	r4, 80055a0 <iprintf+0x14>
 8005596:	69a3      	ldr	r3, [r4, #24]
 8005598:	b913      	cbnz	r3, 80055a0 <iprintf+0x14>
 800559a:	4620      	mov	r0, r4
 800559c:	f000 fa5e 	bl	8005a5c <__sinit>
 80055a0:	ab05      	add	r3, sp, #20
 80055a2:	9a04      	ldr	r2, [sp, #16]
 80055a4:	68a1      	ldr	r1, [r4, #8]
 80055a6:	9301      	str	r3, [sp, #4]
 80055a8:	4620      	mov	r0, r4
 80055aa:	f000 fc67 	bl	8005e7c <_vfiprintf_r>
 80055ae:	b002      	add	sp, #8
 80055b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b4:	b004      	add	sp, #16
 80055b6:	4770      	bx	lr
 80055b8:	20000010 	.word	0x20000010

080055bc <_puts_r>:
 80055bc:	b570      	push	{r4, r5, r6, lr}
 80055be:	460e      	mov	r6, r1
 80055c0:	4605      	mov	r5, r0
 80055c2:	b118      	cbz	r0, 80055cc <_puts_r+0x10>
 80055c4:	6983      	ldr	r3, [r0, #24]
 80055c6:	b90b      	cbnz	r3, 80055cc <_puts_r+0x10>
 80055c8:	f000 fa48 	bl	8005a5c <__sinit>
 80055cc:	69ab      	ldr	r3, [r5, #24]
 80055ce:	68ac      	ldr	r4, [r5, #8]
 80055d0:	b913      	cbnz	r3, 80055d8 <_puts_r+0x1c>
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 fa42 	bl	8005a5c <__sinit>
 80055d8:	4b2c      	ldr	r3, [pc, #176]	; (800568c <_puts_r+0xd0>)
 80055da:	429c      	cmp	r4, r3
 80055dc:	d120      	bne.n	8005620 <_puts_r+0x64>
 80055de:	686c      	ldr	r4, [r5, #4]
 80055e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055e2:	07db      	lsls	r3, r3, #31
 80055e4:	d405      	bmi.n	80055f2 <_puts_r+0x36>
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	0598      	lsls	r0, r3, #22
 80055ea:	d402      	bmi.n	80055f2 <_puts_r+0x36>
 80055ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ee:	f000 fad3 	bl	8005b98 <__retarget_lock_acquire_recursive>
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	0719      	lsls	r1, r3, #28
 80055f6:	d51d      	bpl.n	8005634 <_puts_r+0x78>
 80055f8:	6923      	ldr	r3, [r4, #16]
 80055fa:	b1db      	cbz	r3, 8005634 <_puts_r+0x78>
 80055fc:	3e01      	subs	r6, #1
 80055fe:	68a3      	ldr	r3, [r4, #8]
 8005600:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005604:	3b01      	subs	r3, #1
 8005606:	60a3      	str	r3, [r4, #8]
 8005608:	bb39      	cbnz	r1, 800565a <_puts_r+0x9e>
 800560a:	2b00      	cmp	r3, #0
 800560c:	da38      	bge.n	8005680 <_puts_r+0xc4>
 800560e:	4622      	mov	r2, r4
 8005610:	210a      	movs	r1, #10
 8005612:	4628      	mov	r0, r5
 8005614:	f000 f848 	bl	80056a8 <__swbuf_r>
 8005618:	3001      	adds	r0, #1
 800561a:	d011      	beq.n	8005640 <_puts_r+0x84>
 800561c:	250a      	movs	r5, #10
 800561e:	e011      	b.n	8005644 <_puts_r+0x88>
 8005620:	4b1b      	ldr	r3, [pc, #108]	; (8005690 <_puts_r+0xd4>)
 8005622:	429c      	cmp	r4, r3
 8005624:	d101      	bne.n	800562a <_puts_r+0x6e>
 8005626:	68ac      	ldr	r4, [r5, #8]
 8005628:	e7da      	b.n	80055e0 <_puts_r+0x24>
 800562a:	4b1a      	ldr	r3, [pc, #104]	; (8005694 <_puts_r+0xd8>)
 800562c:	429c      	cmp	r4, r3
 800562e:	bf08      	it	eq
 8005630:	68ec      	ldreq	r4, [r5, #12]
 8005632:	e7d5      	b.n	80055e0 <_puts_r+0x24>
 8005634:	4621      	mov	r1, r4
 8005636:	4628      	mov	r0, r5
 8005638:	f000 f888 	bl	800574c <__swsetup_r>
 800563c:	2800      	cmp	r0, #0
 800563e:	d0dd      	beq.n	80055fc <_puts_r+0x40>
 8005640:	f04f 35ff 	mov.w	r5, #4294967295
 8005644:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005646:	07da      	lsls	r2, r3, #31
 8005648:	d405      	bmi.n	8005656 <_puts_r+0x9a>
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	059b      	lsls	r3, r3, #22
 800564e:	d402      	bmi.n	8005656 <_puts_r+0x9a>
 8005650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005652:	f000 faa2 	bl	8005b9a <__retarget_lock_release_recursive>
 8005656:	4628      	mov	r0, r5
 8005658:	bd70      	pop	{r4, r5, r6, pc}
 800565a:	2b00      	cmp	r3, #0
 800565c:	da04      	bge.n	8005668 <_puts_r+0xac>
 800565e:	69a2      	ldr	r2, [r4, #24]
 8005660:	429a      	cmp	r2, r3
 8005662:	dc06      	bgt.n	8005672 <_puts_r+0xb6>
 8005664:	290a      	cmp	r1, #10
 8005666:	d004      	beq.n	8005672 <_puts_r+0xb6>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	6022      	str	r2, [r4, #0]
 800566e:	7019      	strb	r1, [r3, #0]
 8005670:	e7c5      	b.n	80055fe <_puts_r+0x42>
 8005672:	4622      	mov	r2, r4
 8005674:	4628      	mov	r0, r5
 8005676:	f000 f817 	bl	80056a8 <__swbuf_r>
 800567a:	3001      	adds	r0, #1
 800567c:	d1bf      	bne.n	80055fe <_puts_r+0x42>
 800567e:	e7df      	b.n	8005640 <_puts_r+0x84>
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	250a      	movs	r5, #10
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	6022      	str	r2, [r4, #0]
 8005688:	701d      	strb	r5, [r3, #0]
 800568a:	e7db      	b.n	8005644 <_puts_r+0x88>
 800568c:	08006654 	.word	0x08006654
 8005690:	08006674 	.word	0x08006674
 8005694:	08006634 	.word	0x08006634

08005698 <puts>:
 8005698:	4b02      	ldr	r3, [pc, #8]	; (80056a4 <puts+0xc>)
 800569a:	4601      	mov	r1, r0
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	f7ff bf8d 	b.w	80055bc <_puts_r>
 80056a2:	bf00      	nop
 80056a4:	20000010 	.word	0x20000010

080056a8 <__swbuf_r>:
 80056a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056aa:	460e      	mov	r6, r1
 80056ac:	4614      	mov	r4, r2
 80056ae:	4605      	mov	r5, r0
 80056b0:	b118      	cbz	r0, 80056ba <__swbuf_r+0x12>
 80056b2:	6983      	ldr	r3, [r0, #24]
 80056b4:	b90b      	cbnz	r3, 80056ba <__swbuf_r+0x12>
 80056b6:	f000 f9d1 	bl	8005a5c <__sinit>
 80056ba:	4b21      	ldr	r3, [pc, #132]	; (8005740 <__swbuf_r+0x98>)
 80056bc:	429c      	cmp	r4, r3
 80056be:	d12b      	bne.n	8005718 <__swbuf_r+0x70>
 80056c0:	686c      	ldr	r4, [r5, #4]
 80056c2:	69a3      	ldr	r3, [r4, #24]
 80056c4:	60a3      	str	r3, [r4, #8]
 80056c6:	89a3      	ldrh	r3, [r4, #12]
 80056c8:	071a      	lsls	r2, r3, #28
 80056ca:	d52f      	bpl.n	800572c <__swbuf_r+0x84>
 80056cc:	6923      	ldr	r3, [r4, #16]
 80056ce:	b36b      	cbz	r3, 800572c <__swbuf_r+0x84>
 80056d0:	6923      	ldr	r3, [r4, #16]
 80056d2:	6820      	ldr	r0, [r4, #0]
 80056d4:	1ac0      	subs	r0, r0, r3
 80056d6:	6963      	ldr	r3, [r4, #20]
 80056d8:	b2f6      	uxtb	r6, r6
 80056da:	4283      	cmp	r3, r0
 80056dc:	4637      	mov	r7, r6
 80056de:	dc04      	bgt.n	80056ea <__swbuf_r+0x42>
 80056e0:	4621      	mov	r1, r4
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 f926 	bl	8005934 <_fflush_r>
 80056e8:	bb30      	cbnz	r0, 8005738 <__swbuf_r+0x90>
 80056ea:	68a3      	ldr	r3, [r4, #8]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	60a3      	str	r3, [r4, #8]
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	6022      	str	r2, [r4, #0]
 80056f6:	701e      	strb	r6, [r3, #0]
 80056f8:	6963      	ldr	r3, [r4, #20]
 80056fa:	3001      	adds	r0, #1
 80056fc:	4283      	cmp	r3, r0
 80056fe:	d004      	beq.n	800570a <__swbuf_r+0x62>
 8005700:	89a3      	ldrh	r3, [r4, #12]
 8005702:	07db      	lsls	r3, r3, #31
 8005704:	d506      	bpl.n	8005714 <__swbuf_r+0x6c>
 8005706:	2e0a      	cmp	r6, #10
 8005708:	d104      	bne.n	8005714 <__swbuf_r+0x6c>
 800570a:	4621      	mov	r1, r4
 800570c:	4628      	mov	r0, r5
 800570e:	f000 f911 	bl	8005934 <_fflush_r>
 8005712:	b988      	cbnz	r0, 8005738 <__swbuf_r+0x90>
 8005714:	4638      	mov	r0, r7
 8005716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005718:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <__swbuf_r+0x9c>)
 800571a:	429c      	cmp	r4, r3
 800571c:	d101      	bne.n	8005722 <__swbuf_r+0x7a>
 800571e:	68ac      	ldr	r4, [r5, #8]
 8005720:	e7cf      	b.n	80056c2 <__swbuf_r+0x1a>
 8005722:	4b09      	ldr	r3, [pc, #36]	; (8005748 <__swbuf_r+0xa0>)
 8005724:	429c      	cmp	r4, r3
 8005726:	bf08      	it	eq
 8005728:	68ec      	ldreq	r4, [r5, #12]
 800572a:	e7ca      	b.n	80056c2 <__swbuf_r+0x1a>
 800572c:	4621      	mov	r1, r4
 800572e:	4628      	mov	r0, r5
 8005730:	f000 f80c 	bl	800574c <__swsetup_r>
 8005734:	2800      	cmp	r0, #0
 8005736:	d0cb      	beq.n	80056d0 <__swbuf_r+0x28>
 8005738:	f04f 37ff 	mov.w	r7, #4294967295
 800573c:	e7ea      	b.n	8005714 <__swbuf_r+0x6c>
 800573e:	bf00      	nop
 8005740:	08006654 	.word	0x08006654
 8005744:	08006674 	.word	0x08006674
 8005748:	08006634 	.word	0x08006634

0800574c <__swsetup_r>:
 800574c:	4b32      	ldr	r3, [pc, #200]	; (8005818 <__swsetup_r+0xcc>)
 800574e:	b570      	push	{r4, r5, r6, lr}
 8005750:	681d      	ldr	r5, [r3, #0]
 8005752:	4606      	mov	r6, r0
 8005754:	460c      	mov	r4, r1
 8005756:	b125      	cbz	r5, 8005762 <__swsetup_r+0x16>
 8005758:	69ab      	ldr	r3, [r5, #24]
 800575a:	b913      	cbnz	r3, 8005762 <__swsetup_r+0x16>
 800575c:	4628      	mov	r0, r5
 800575e:	f000 f97d 	bl	8005a5c <__sinit>
 8005762:	4b2e      	ldr	r3, [pc, #184]	; (800581c <__swsetup_r+0xd0>)
 8005764:	429c      	cmp	r4, r3
 8005766:	d10f      	bne.n	8005788 <__swsetup_r+0x3c>
 8005768:	686c      	ldr	r4, [r5, #4]
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005770:	0719      	lsls	r1, r3, #28
 8005772:	d42c      	bmi.n	80057ce <__swsetup_r+0x82>
 8005774:	06dd      	lsls	r5, r3, #27
 8005776:	d411      	bmi.n	800579c <__swsetup_r+0x50>
 8005778:	2309      	movs	r3, #9
 800577a:	6033      	str	r3, [r6, #0]
 800577c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005780:	81a3      	strh	r3, [r4, #12]
 8005782:	f04f 30ff 	mov.w	r0, #4294967295
 8005786:	e03e      	b.n	8005806 <__swsetup_r+0xba>
 8005788:	4b25      	ldr	r3, [pc, #148]	; (8005820 <__swsetup_r+0xd4>)
 800578a:	429c      	cmp	r4, r3
 800578c:	d101      	bne.n	8005792 <__swsetup_r+0x46>
 800578e:	68ac      	ldr	r4, [r5, #8]
 8005790:	e7eb      	b.n	800576a <__swsetup_r+0x1e>
 8005792:	4b24      	ldr	r3, [pc, #144]	; (8005824 <__swsetup_r+0xd8>)
 8005794:	429c      	cmp	r4, r3
 8005796:	bf08      	it	eq
 8005798:	68ec      	ldreq	r4, [r5, #12]
 800579a:	e7e6      	b.n	800576a <__swsetup_r+0x1e>
 800579c:	0758      	lsls	r0, r3, #29
 800579e:	d512      	bpl.n	80057c6 <__swsetup_r+0x7a>
 80057a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057a2:	b141      	cbz	r1, 80057b6 <__swsetup_r+0x6a>
 80057a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057a8:	4299      	cmp	r1, r3
 80057aa:	d002      	beq.n	80057b2 <__swsetup_r+0x66>
 80057ac:	4630      	mov	r0, r6
 80057ae:	f000 fa5b 	bl	8005c68 <_free_r>
 80057b2:	2300      	movs	r3, #0
 80057b4:	6363      	str	r3, [r4, #52]	; 0x34
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057bc:	81a3      	strh	r3, [r4, #12]
 80057be:	2300      	movs	r3, #0
 80057c0:	6063      	str	r3, [r4, #4]
 80057c2:	6923      	ldr	r3, [r4, #16]
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	89a3      	ldrh	r3, [r4, #12]
 80057c8:	f043 0308 	orr.w	r3, r3, #8
 80057cc:	81a3      	strh	r3, [r4, #12]
 80057ce:	6923      	ldr	r3, [r4, #16]
 80057d0:	b94b      	cbnz	r3, 80057e6 <__swsetup_r+0x9a>
 80057d2:	89a3      	ldrh	r3, [r4, #12]
 80057d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057dc:	d003      	beq.n	80057e6 <__swsetup_r+0x9a>
 80057de:	4621      	mov	r1, r4
 80057e0:	4630      	mov	r0, r6
 80057e2:	f000 fa01 	bl	8005be8 <__smakebuf_r>
 80057e6:	89a0      	ldrh	r0, [r4, #12]
 80057e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057ec:	f010 0301 	ands.w	r3, r0, #1
 80057f0:	d00a      	beq.n	8005808 <__swsetup_r+0xbc>
 80057f2:	2300      	movs	r3, #0
 80057f4:	60a3      	str	r3, [r4, #8]
 80057f6:	6963      	ldr	r3, [r4, #20]
 80057f8:	425b      	negs	r3, r3
 80057fa:	61a3      	str	r3, [r4, #24]
 80057fc:	6923      	ldr	r3, [r4, #16]
 80057fe:	b943      	cbnz	r3, 8005812 <__swsetup_r+0xc6>
 8005800:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005804:	d1ba      	bne.n	800577c <__swsetup_r+0x30>
 8005806:	bd70      	pop	{r4, r5, r6, pc}
 8005808:	0781      	lsls	r1, r0, #30
 800580a:	bf58      	it	pl
 800580c:	6963      	ldrpl	r3, [r4, #20]
 800580e:	60a3      	str	r3, [r4, #8]
 8005810:	e7f4      	b.n	80057fc <__swsetup_r+0xb0>
 8005812:	2000      	movs	r0, #0
 8005814:	e7f7      	b.n	8005806 <__swsetup_r+0xba>
 8005816:	bf00      	nop
 8005818:	20000010 	.word	0x20000010
 800581c:	08006654 	.word	0x08006654
 8005820:	08006674 	.word	0x08006674
 8005824:	08006634 	.word	0x08006634

08005828 <__sflush_r>:
 8005828:	898a      	ldrh	r2, [r1, #12]
 800582a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800582e:	4605      	mov	r5, r0
 8005830:	0710      	lsls	r0, r2, #28
 8005832:	460c      	mov	r4, r1
 8005834:	d458      	bmi.n	80058e8 <__sflush_r+0xc0>
 8005836:	684b      	ldr	r3, [r1, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	dc05      	bgt.n	8005848 <__sflush_r+0x20>
 800583c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	dc02      	bgt.n	8005848 <__sflush_r+0x20>
 8005842:	2000      	movs	r0, #0
 8005844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800584a:	2e00      	cmp	r6, #0
 800584c:	d0f9      	beq.n	8005842 <__sflush_r+0x1a>
 800584e:	2300      	movs	r3, #0
 8005850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005854:	682f      	ldr	r7, [r5, #0]
 8005856:	602b      	str	r3, [r5, #0]
 8005858:	d032      	beq.n	80058c0 <__sflush_r+0x98>
 800585a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	075a      	lsls	r2, r3, #29
 8005860:	d505      	bpl.n	800586e <__sflush_r+0x46>
 8005862:	6863      	ldr	r3, [r4, #4]
 8005864:	1ac0      	subs	r0, r0, r3
 8005866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005868:	b10b      	cbz	r3, 800586e <__sflush_r+0x46>
 800586a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800586c:	1ac0      	subs	r0, r0, r3
 800586e:	2300      	movs	r3, #0
 8005870:	4602      	mov	r2, r0
 8005872:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005874:	6a21      	ldr	r1, [r4, #32]
 8005876:	4628      	mov	r0, r5
 8005878:	47b0      	blx	r6
 800587a:	1c43      	adds	r3, r0, #1
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	d106      	bne.n	800588e <__sflush_r+0x66>
 8005880:	6829      	ldr	r1, [r5, #0]
 8005882:	291d      	cmp	r1, #29
 8005884:	d82c      	bhi.n	80058e0 <__sflush_r+0xb8>
 8005886:	4a2a      	ldr	r2, [pc, #168]	; (8005930 <__sflush_r+0x108>)
 8005888:	40ca      	lsrs	r2, r1
 800588a:	07d6      	lsls	r6, r2, #31
 800588c:	d528      	bpl.n	80058e0 <__sflush_r+0xb8>
 800588e:	2200      	movs	r2, #0
 8005890:	6062      	str	r2, [r4, #4]
 8005892:	04d9      	lsls	r1, r3, #19
 8005894:	6922      	ldr	r2, [r4, #16]
 8005896:	6022      	str	r2, [r4, #0]
 8005898:	d504      	bpl.n	80058a4 <__sflush_r+0x7c>
 800589a:	1c42      	adds	r2, r0, #1
 800589c:	d101      	bne.n	80058a2 <__sflush_r+0x7a>
 800589e:	682b      	ldr	r3, [r5, #0]
 80058a0:	b903      	cbnz	r3, 80058a4 <__sflush_r+0x7c>
 80058a2:	6560      	str	r0, [r4, #84]	; 0x54
 80058a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058a6:	602f      	str	r7, [r5, #0]
 80058a8:	2900      	cmp	r1, #0
 80058aa:	d0ca      	beq.n	8005842 <__sflush_r+0x1a>
 80058ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058b0:	4299      	cmp	r1, r3
 80058b2:	d002      	beq.n	80058ba <__sflush_r+0x92>
 80058b4:	4628      	mov	r0, r5
 80058b6:	f000 f9d7 	bl	8005c68 <_free_r>
 80058ba:	2000      	movs	r0, #0
 80058bc:	6360      	str	r0, [r4, #52]	; 0x34
 80058be:	e7c1      	b.n	8005844 <__sflush_r+0x1c>
 80058c0:	6a21      	ldr	r1, [r4, #32]
 80058c2:	2301      	movs	r3, #1
 80058c4:	4628      	mov	r0, r5
 80058c6:	47b0      	blx	r6
 80058c8:	1c41      	adds	r1, r0, #1
 80058ca:	d1c7      	bne.n	800585c <__sflush_r+0x34>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0c4      	beq.n	800585c <__sflush_r+0x34>
 80058d2:	2b1d      	cmp	r3, #29
 80058d4:	d001      	beq.n	80058da <__sflush_r+0xb2>
 80058d6:	2b16      	cmp	r3, #22
 80058d8:	d101      	bne.n	80058de <__sflush_r+0xb6>
 80058da:	602f      	str	r7, [r5, #0]
 80058dc:	e7b1      	b.n	8005842 <__sflush_r+0x1a>
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e4:	81a3      	strh	r3, [r4, #12]
 80058e6:	e7ad      	b.n	8005844 <__sflush_r+0x1c>
 80058e8:	690f      	ldr	r7, [r1, #16]
 80058ea:	2f00      	cmp	r7, #0
 80058ec:	d0a9      	beq.n	8005842 <__sflush_r+0x1a>
 80058ee:	0793      	lsls	r3, r2, #30
 80058f0:	680e      	ldr	r6, [r1, #0]
 80058f2:	bf08      	it	eq
 80058f4:	694b      	ldreq	r3, [r1, #20]
 80058f6:	600f      	str	r7, [r1, #0]
 80058f8:	bf18      	it	ne
 80058fa:	2300      	movne	r3, #0
 80058fc:	eba6 0807 	sub.w	r8, r6, r7
 8005900:	608b      	str	r3, [r1, #8]
 8005902:	f1b8 0f00 	cmp.w	r8, #0
 8005906:	dd9c      	ble.n	8005842 <__sflush_r+0x1a>
 8005908:	6a21      	ldr	r1, [r4, #32]
 800590a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800590c:	4643      	mov	r3, r8
 800590e:	463a      	mov	r2, r7
 8005910:	4628      	mov	r0, r5
 8005912:	47b0      	blx	r6
 8005914:	2800      	cmp	r0, #0
 8005916:	dc06      	bgt.n	8005926 <__sflush_r+0xfe>
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800591e:	81a3      	strh	r3, [r4, #12]
 8005920:	f04f 30ff 	mov.w	r0, #4294967295
 8005924:	e78e      	b.n	8005844 <__sflush_r+0x1c>
 8005926:	4407      	add	r7, r0
 8005928:	eba8 0800 	sub.w	r8, r8, r0
 800592c:	e7e9      	b.n	8005902 <__sflush_r+0xda>
 800592e:	bf00      	nop
 8005930:	20400001 	.word	0x20400001

08005934 <_fflush_r>:
 8005934:	b538      	push	{r3, r4, r5, lr}
 8005936:	690b      	ldr	r3, [r1, #16]
 8005938:	4605      	mov	r5, r0
 800593a:	460c      	mov	r4, r1
 800593c:	b913      	cbnz	r3, 8005944 <_fflush_r+0x10>
 800593e:	2500      	movs	r5, #0
 8005940:	4628      	mov	r0, r5
 8005942:	bd38      	pop	{r3, r4, r5, pc}
 8005944:	b118      	cbz	r0, 800594e <_fflush_r+0x1a>
 8005946:	6983      	ldr	r3, [r0, #24]
 8005948:	b90b      	cbnz	r3, 800594e <_fflush_r+0x1a>
 800594a:	f000 f887 	bl	8005a5c <__sinit>
 800594e:	4b14      	ldr	r3, [pc, #80]	; (80059a0 <_fflush_r+0x6c>)
 8005950:	429c      	cmp	r4, r3
 8005952:	d11b      	bne.n	800598c <_fflush_r+0x58>
 8005954:	686c      	ldr	r4, [r5, #4]
 8005956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0ef      	beq.n	800593e <_fflush_r+0xa>
 800595e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005960:	07d0      	lsls	r0, r2, #31
 8005962:	d404      	bmi.n	800596e <_fflush_r+0x3a>
 8005964:	0599      	lsls	r1, r3, #22
 8005966:	d402      	bmi.n	800596e <_fflush_r+0x3a>
 8005968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800596a:	f000 f915 	bl	8005b98 <__retarget_lock_acquire_recursive>
 800596e:	4628      	mov	r0, r5
 8005970:	4621      	mov	r1, r4
 8005972:	f7ff ff59 	bl	8005828 <__sflush_r>
 8005976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005978:	07da      	lsls	r2, r3, #31
 800597a:	4605      	mov	r5, r0
 800597c:	d4e0      	bmi.n	8005940 <_fflush_r+0xc>
 800597e:	89a3      	ldrh	r3, [r4, #12]
 8005980:	059b      	lsls	r3, r3, #22
 8005982:	d4dd      	bmi.n	8005940 <_fflush_r+0xc>
 8005984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005986:	f000 f908 	bl	8005b9a <__retarget_lock_release_recursive>
 800598a:	e7d9      	b.n	8005940 <_fflush_r+0xc>
 800598c:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <_fflush_r+0x70>)
 800598e:	429c      	cmp	r4, r3
 8005990:	d101      	bne.n	8005996 <_fflush_r+0x62>
 8005992:	68ac      	ldr	r4, [r5, #8]
 8005994:	e7df      	b.n	8005956 <_fflush_r+0x22>
 8005996:	4b04      	ldr	r3, [pc, #16]	; (80059a8 <_fflush_r+0x74>)
 8005998:	429c      	cmp	r4, r3
 800599a:	bf08      	it	eq
 800599c:	68ec      	ldreq	r4, [r5, #12]
 800599e:	e7da      	b.n	8005956 <_fflush_r+0x22>
 80059a0:	08006654 	.word	0x08006654
 80059a4:	08006674 	.word	0x08006674
 80059a8:	08006634 	.word	0x08006634

080059ac <std>:
 80059ac:	2300      	movs	r3, #0
 80059ae:	b510      	push	{r4, lr}
 80059b0:	4604      	mov	r4, r0
 80059b2:	e9c0 3300 	strd	r3, r3, [r0]
 80059b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059ba:	6083      	str	r3, [r0, #8]
 80059bc:	8181      	strh	r1, [r0, #12]
 80059be:	6643      	str	r3, [r0, #100]	; 0x64
 80059c0:	81c2      	strh	r2, [r0, #14]
 80059c2:	6183      	str	r3, [r0, #24]
 80059c4:	4619      	mov	r1, r3
 80059c6:	2208      	movs	r2, #8
 80059c8:	305c      	adds	r0, #92	; 0x5c
 80059ca:	f7ff fdd7 	bl	800557c <memset>
 80059ce:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <std+0x38>)
 80059d0:	6263      	str	r3, [r4, #36]	; 0x24
 80059d2:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <std+0x3c>)
 80059d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80059d6:	4b05      	ldr	r3, [pc, #20]	; (80059ec <std+0x40>)
 80059d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059da:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <std+0x44>)
 80059dc:	6224      	str	r4, [r4, #32]
 80059de:	6323      	str	r3, [r4, #48]	; 0x30
 80059e0:	bd10      	pop	{r4, pc}
 80059e2:	bf00      	nop
 80059e4:	08006425 	.word	0x08006425
 80059e8:	08006447 	.word	0x08006447
 80059ec:	0800647f 	.word	0x0800647f
 80059f0:	080064a3 	.word	0x080064a3

080059f4 <_cleanup_r>:
 80059f4:	4901      	ldr	r1, [pc, #4]	; (80059fc <_cleanup_r+0x8>)
 80059f6:	f000 b8af 	b.w	8005b58 <_fwalk_reent>
 80059fa:	bf00      	nop
 80059fc:	08005935 	.word	0x08005935

08005a00 <__sfmoreglue>:
 8005a00:	b570      	push	{r4, r5, r6, lr}
 8005a02:	2268      	movs	r2, #104	; 0x68
 8005a04:	1e4d      	subs	r5, r1, #1
 8005a06:	4355      	muls	r5, r2
 8005a08:	460e      	mov	r6, r1
 8005a0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a0e:	f000 f997 	bl	8005d40 <_malloc_r>
 8005a12:	4604      	mov	r4, r0
 8005a14:	b140      	cbz	r0, 8005a28 <__sfmoreglue+0x28>
 8005a16:	2100      	movs	r1, #0
 8005a18:	e9c0 1600 	strd	r1, r6, [r0]
 8005a1c:	300c      	adds	r0, #12
 8005a1e:	60a0      	str	r0, [r4, #8]
 8005a20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a24:	f7ff fdaa 	bl	800557c <memset>
 8005a28:	4620      	mov	r0, r4
 8005a2a:	bd70      	pop	{r4, r5, r6, pc}

08005a2c <__sfp_lock_acquire>:
 8005a2c:	4801      	ldr	r0, [pc, #4]	; (8005a34 <__sfp_lock_acquire+0x8>)
 8005a2e:	f000 b8b3 	b.w	8005b98 <__retarget_lock_acquire_recursive>
 8005a32:	bf00      	nop
 8005a34:	20004a85 	.word	0x20004a85

08005a38 <__sfp_lock_release>:
 8005a38:	4801      	ldr	r0, [pc, #4]	; (8005a40 <__sfp_lock_release+0x8>)
 8005a3a:	f000 b8ae 	b.w	8005b9a <__retarget_lock_release_recursive>
 8005a3e:	bf00      	nop
 8005a40:	20004a85 	.word	0x20004a85

08005a44 <__sinit_lock_acquire>:
 8005a44:	4801      	ldr	r0, [pc, #4]	; (8005a4c <__sinit_lock_acquire+0x8>)
 8005a46:	f000 b8a7 	b.w	8005b98 <__retarget_lock_acquire_recursive>
 8005a4a:	bf00      	nop
 8005a4c:	20004a86 	.word	0x20004a86

08005a50 <__sinit_lock_release>:
 8005a50:	4801      	ldr	r0, [pc, #4]	; (8005a58 <__sinit_lock_release+0x8>)
 8005a52:	f000 b8a2 	b.w	8005b9a <__retarget_lock_release_recursive>
 8005a56:	bf00      	nop
 8005a58:	20004a86 	.word	0x20004a86

08005a5c <__sinit>:
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	4604      	mov	r4, r0
 8005a60:	f7ff fff0 	bl	8005a44 <__sinit_lock_acquire>
 8005a64:	69a3      	ldr	r3, [r4, #24]
 8005a66:	b11b      	cbz	r3, 8005a70 <__sinit+0x14>
 8005a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a6c:	f7ff bff0 	b.w	8005a50 <__sinit_lock_release>
 8005a70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a74:	6523      	str	r3, [r4, #80]	; 0x50
 8005a76:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <__sinit+0x68>)
 8005a78:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <__sinit+0x6c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a7e:	42a3      	cmp	r3, r4
 8005a80:	bf04      	itt	eq
 8005a82:	2301      	moveq	r3, #1
 8005a84:	61a3      	streq	r3, [r4, #24]
 8005a86:	4620      	mov	r0, r4
 8005a88:	f000 f820 	bl	8005acc <__sfp>
 8005a8c:	6060      	str	r0, [r4, #4]
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f000 f81c 	bl	8005acc <__sfp>
 8005a94:	60a0      	str	r0, [r4, #8]
 8005a96:	4620      	mov	r0, r4
 8005a98:	f000 f818 	bl	8005acc <__sfp>
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	60e0      	str	r0, [r4, #12]
 8005aa0:	2104      	movs	r1, #4
 8005aa2:	6860      	ldr	r0, [r4, #4]
 8005aa4:	f7ff ff82 	bl	80059ac <std>
 8005aa8:	68a0      	ldr	r0, [r4, #8]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	2109      	movs	r1, #9
 8005aae:	f7ff ff7d 	bl	80059ac <std>
 8005ab2:	68e0      	ldr	r0, [r4, #12]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	2112      	movs	r1, #18
 8005ab8:	f7ff ff78 	bl	80059ac <std>
 8005abc:	2301      	movs	r3, #1
 8005abe:	61a3      	str	r3, [r4, #24]
 8005ac0:	e7d2      	b.n	8005a68 <__sinit+0xc>
 8005ac2:	bf00      	nop
 8005ac4:	08006630 	.word	0x08006630
 8005ac8:	080059f5 	.word	0x080059f5

08005acc <__sfp>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	4607      	mov	r7, r0
 8005ad0:	f7ff ffac 	bl	8005a2c <__sfp_lock_acquire>
 8005ad4:	4b1e      	ldr	r3, [pc, #120]	; (8005b50 <__sfp+0x84>)
 8005ad6:	681e      	ldr	r6, [r3, #0]
 8005ad8:	69b3      	ldr	r3, [r6, #24]
 8005ada:	b913      	cbnz	r3, 8005ae2 <__sfp+0x16>
 8005adc:	4630      	mov	r0, r6
 8005ade:	f7ff ffbd 	bl	8005a5c <__sinit>
 8005ae2:	3648      	adds	r6, #72	; 0x48
 8005ae4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	d503      	bpl.n	8005af4 <__sfp+0x28>
 8005aec:	6833      	ldr	r3, [r6, #0]
 8005aee:	b30b      	cbz	r3, 8005b34 <__sfp+0x68>
 8005af0:	6836      	ldr	r6, [r6, #0]
 8005af2:	e7f7      	b.n	8005ae4 <__sfp+0x18>
 8005af4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005af8:	b9d5      	cbnz	r5, 8005b30 <__sfp+0x64>
 8005afa:	4b16      	ldr	r3, [pc, #88]	; (8005b54 <__sfp+0x88>)
 8005afc:	60e3      	str	r3, [r4, #12]
 8005afe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b02:	6665      	str	r5, [r4, #100]	; 0x64
 8005b04:	f000 f847 	bl	8005b96 <__retarget_lock_init_recursive>
 8005b08:	f7ff ff96 	bl	8005a38 <__sfp_lock_release>
 8005b0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b14:	6025      	str	r5, [r4, #0]
 8005b16:	61a5      	str	r5, [r4, #24]
 8005b18:	2208      	movs	r2, #8
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b20:	f7ff fd2c 	bl	800557c <memset>
 8005b24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b30:	3468      	adds	r4, #104	; 0x68
 8005b32:	e7d9      	b.n	8005ae8 <__sfp+0x1c>
 8005b34:	2104      	movs	r1, #4
 8005b36:	4638      	mov	r0, r7
 8005b38:	f7ff ff62 	bl	8005a00 <__sfmoreglue>
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	6030      	str	r0, [r6, #0]
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d1d5      	bne.n	8005af0 <__sfp+0x24>
 8005b44:	f7ff ff78 	bl	8005a38 <__sfp_lock_release>
 8005b48:	230c      	movs	r3, #12
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	e7ee      	b.n	8005b2c <__sfp+0x60>
 8005b4e:	bf00      	nop
 8005b50:	08006630 	.word	0x08006630
 8005b54:	ffff0001 	.word	0xffff0001

08005b58 <_fwalk_reent>:
 8005b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	4688      	mov	r8, r1
 8005b60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b64:	2700      	movs	r7, #0
 8005b66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b6a:	f1b9 0901 	subs.w	r9, r9, #1
 8005b6e:	d505      	bpl.n	8005b7c <_fwalk_reent+0x24>
 8005b70:	6824      	ldr	r4, [r4, #0]
 8005b72:	2c00      	cmp	r4, #0
 8005b74:	d1f7      	bne.n	8005b66 <_fwalk_reent+0xe>
 8005b76:	4638      	mov	r0, r7
 8005b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b7c:	89ab      	ldrh	r3, [r5, #12]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d907      	bls.n	8005b92 <_fwalk_reent+0x3a>
 8005b82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b86:	3301      	adds	r3, #1
 8005b88:	d003      	beq.n	8005b92 <_fwalk_reent+0x3a>
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	47c0      	blx	r8
 8005b90:	4307      	orrs	r7, r0
 8005b92:	3568      	adds	r5, #104	; 0x68
 8005b94:	e7e9      	b.n	8005b6a <_fwalk_reent+0x12>

08005b96 <__retarget_lock_init_recursive>:
 8005b96:	4770      	bx	lr

08005b98 <__retarget_lock_acquire_recursive>:
 8005b98:	4770      	bx	lr

08005b9a <__retarget_lock_release_recursive>:
 8005b9a:	4770      	bx	lr

08005b9c <__swhatbuf_r>:
 8005b9c:	b570      	push	{r4, r5, r6, lr}
 8005b9e:	460e      	mov	r6, r1
 8005ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	b096      	sub	sp, #88	; 0x58
 8005ba8:	4614      	mov	r4, r2
 8005baa:	461d      	mov	r5, r3
 8005bac:	da08      	bge.n	8005bc0 <__swhatbuf_r+0x24>
 8005bae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	602a      	str	r2, [r5, #0]
 8005bb6:	061a      	lsls	r2, r3, #24
 8005bb8:	d410      	bmi.n	8005bdc <__swhatbuf_r+0x40>
 8005bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bbe:	e00e      	b.n	8005bde <__swhatbuf_r+0x42>
 8005bc0:	466a      	mov	r2, sp
 8005bc2:	f000 fc95 	bl	80064f0 <_fstat_r>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	dbf1      	blt.n	8005bae <__swhatbuf_r+0x12>
 8005bca:	9a01      	ldr	r2, [sp, #4]
 8005bcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005bd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bd4:	425a      	negs	r2, r3
 8005bd6:	415a      	adcs	r2, r3
 8005bd8:	602a      	str	r2, [r5, #0]
 8005bda:	e7ee      	b.n	8005bba <__swhatbuf_r+0x1e>
 8005bdc:	2340      	movs	r3, #64	; 0x40
 8005bde:	2000      	movs	r0, #0
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	b016      	add	sp, #88	; 0x58
 8005be4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005be8 <__smakebuf_r>:
 8005be8:	898b      	ldrh	r3, [r1, #12]
 8005bea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bec:	079d      	lsls	r5, r3, #30
 8005bee:	4606      	mov	r6, r0
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	d507      	bpl.n	8005c04 <__smakebuf_r+0x1c>
 8005bf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	6123      	str	r3, [r4, #16]
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	6163      	str	r3, [r4, #20]
 8005c00:	b002      	add	sp, #8
 8005c02:	bd70      	pop	{r4, r5, r6, pc}
 8005c04:	ab01      	add	r3, sp, #4
 8005c06:	466a      	mov	r2, sp
 8005c08:	f7ff ffc8 	bl	8005b9c <__swhatbuf_r>
 8005c0c:	9900      	ldr	r1, [sp, #0]
 8005c0e:	4605      	mov	r5, r0
 8005c10:	4630      	mov	r0, r6
 8005c12:	f000 f895 	bl	8005d40 <_malloc_r>
 8005c16:	b948      	cbnz	r0, 8005c2c <__smakebuf_r+0x44>
 8005c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c1c:	059a      	lsls	r2, r3, #22
 8005c1e:	d4ef      	bmi.n	8005c00 <__smakebuf_r+0x18>
 8005c20:	f023 0303 	bic.w	r3, r3, #3
 8005c24:	f043 0302 	orr.w	r3, r3, #2
 8005c28:	81a3      	strh	r3, [r4, #12]
 8005c2a:	e7e3      	b.n	8005bf4 <__smakebuf_r+0xc>
 8005c2c:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <__smakebuf_r+0x7c>)
 8005c2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	6020      	str	r0, [r4, #0]
 8005c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c38:	81a3      	strh	r3, [r4, #12]
 8005c3a:	9b00      	ldr	r3, [sp, #0]
 8005c3c:	6163      	str	r3, [r4, #20]
 8005c3e:	9b01      	ldr	r3, [sp, #4]
 8005c40:	6120      	str	r0, [r4, #16]
 8005c42:	b15b      	cbz	r3, 8005c5c <__smakebuf_r+0x74>
 8005c44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f000 fc63 	bl	8006514 <_isatty_r>
 8005c4e:	b128      	cbz	r0, 8005c5c <__smakebuf_r+0x74>
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	f023 0303 	bic.w	r3, r3, #3
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	81a3      	strh	r3, [r4, #12]
 8005c5c:	89a0      	ldrh	r0, [r4, #12]
 8005c5e:	4305      	orrs	r5, r0
 8005c60:	81a5      	strh	r5, [r4, #12]
 8005c62:	e7cd      	b.n	8005c00 <__smakebuf_r+0x18>
 8005c64:	080059f5 	.word	0x080059f5

08005c68 <_free_r>:
 8005c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c6a:	2900      	cmp	r1, #0
 8005c6c:	d044      	beq.n	8005cf8 <_free_r+0x90>
 8005c6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c72:	9001      	str	r0, [sp, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f1a1 0404 	sub.w	r4, r1, #4
 8005c7a:	bfb8      	it	lt
 8005c7c:	18e4      	addlt	r4, r4, r3
 8005c7e:	f000 fc6b 	bl	8006558 <__malloc_lock>
 8005c82:	4a1e      	ldr	r2, [pc, #120]	; (8005cfc <_free_r+0x94>)
 8005c84:	9801      	ldr	r0, [sp, #4]
 8005c86:	6813      	ldr	r3, [r2, #0]
 8005c88:	b933      	cbnz	r3, 8005c98 <_free_r+0x30>
 8005c8a:	6063      	str	r3, [r4, #4]
 8005c8c:	6014      	str	r4, [r2, #0]
 8005c8e:	b003      	add	sp, #12
 8005c90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c94:	f000 bc66 	b.w	8006564 <__malloc_unlock>
 8005c98:	42a3      	cmp	r3, r4
 8005c9a:	d908      	bls.n	8005cae <_free_r+0x46>
 8005c9c:	6825      	ldr	r5, [r4, #0]
 8005c9e:	1961      	adds	r1, r4, r5
 8005ca0:	428b      	cmp	r3, r1
 8005ca2:	bf01      	itttt	eq
 8005ca4:	6819      	ldreq	r1, [r3, #0]
 8005ca6:	685b      	ldreq	r3, [r3, #4]
 8005ca8:	1949      	addeq	r1, r1, r5
 8005caa:	6021      	streq	r1, [r4, #0]
 8005cac:	e7ed      	b.n	8005c8a <_free_r+0x22>
 8005cae:	461a      	mov	r2, r3
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	b10b      	cbz	r3, 8005cb8 <_free_r+0x50>
 8005cb4:	42a3      	cmp	r3, r4
 8005cb6:	d9fa      	bls.n	8005cae <_free_r+0x46>
 8005cb8:	6811      	ldr	r1, [r2, #0]
 8005cba:	1855      	adds	r5, r2, r1
 8005cbc:	42a5      	cmp	r5, r4
 8005cbe:	d10b      	bne.n	8005cd8 <_free_r+0x70>
 8005cc0:	6824      	ldr	r4, [r4, #0]
 8005cc2:	4421      	add	r1, r4
 8005cc4:	1854      	adds	r4, r2, r1
 8005cc6:	42a3      	cmp	r3, r4
 8005cc8:	6011      	str	r1, [r2, #0]
 8005cca:	d1e0      	bne.n	8005c8e <_free_r+0x26>
 8005ccc:	681c      	ldr	r4, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	6053      	str	r3, [r2, #4]
 8005cd2:	4421      	add	r1, r4
 8005cd4:	6011      	str	r1, [r2, #0]
 8005cd6:	e7da      	b.n	8005c8e <_free_r+0x26>
 8005cd8:	d902      	bls.n	8005ce0 <_free_r+0x78>
 8005cda:	230c      	movs	r3, #12
 8005cdc:	6003      	str	r3, [r0, #0]
 8005cde:	e7d6      	b.n	8005c8e <_free_r+0x26>
 8005ce0:	6825      	ldr	r5, [r4, #0]
 8005ce2:	1961      	adds	r1, r4, r5
 8005ce4:	428b      	cmp	r3, r1
 8005ce6:	bf04      	itt	eq
 8005ce8:	6819      	ldreq	r1, [r3, #0]
 8005cea:	685b      	ldreq	r3, [r3, #4]
 8005cec:	6063      	str	r3, [r4, #4]
 8005cee:	bf04      	itt	eq
 8005cf0:	1949      	addeq	r1, r1, r5
 8005cf2:	6021      	streq	r1, [r4, #0]
 8005cf4:	6054      	str	r4, [r2, #4]
 8005cf6:	e7ca      	b.n	8005c8e <_free_r+0x26>
 8005cf8:	b003      	add	sp, #12
 8005cfa:	bd30      	pop	{r4, r5, pc}
 8005cfc:	20004a88 	.word	0x20004a88

08005d00 <sbrk_aligned>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	4e0e      	ldr	r6, [pc, #56]	; (8005d3c <sbrk_aligned+0x3c>)
 8005d04:	460c      	mov	r4, r1
 8005d06:	6831      	ldr	r1, [r6, #0]
 8005d08:	4605      	mov	r5, r0
 8005d0a:	b911      	cbnz	r1, 8005d12 <sbrk_aligned+0x12>
 8005d0c:	f000 fb7a 	bl	8006404 <_sbrk_r>
 8005d10:	6030      	str	r0, [r6, #0]
 8005d12:	4621      	mov	r1, r4
 8005d14:	4628      	mov	r0, r5
 8005d16:	f000 fb75 	bl	8006404 <_sbrk_r>
 8005d1a:	1c43      	adds	r3, r0, #1
 8005d1c:	d00a      	beq.n	8005d34 <sbrk_aligned+0x34>
 8005d1e:	1cc4      	adds	r4, r0, #3
 8005d20:	f024 0403 	bic.w	r4, r4, #3
 8005d24:	42a0      	cmp	r0, r4
 8005d26:	d007      	beq.n	8005d38 <sbrk_aligned+0x38>
 8005d28:	1a21      	subs	r1, r4, r0
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	f000 fb6a 	bl	8006404 <_sbrk_r>
 8005d30:	3001      	adds	r0, #1
 8005d32:	d101      	bne.n	8005d38 <sbrk_aligned+0x38>
 8005d34:	f04f 34ff 	mov.w	r4, #4294967295
 8005d38:	4620      	mov	r0, r4
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	20004a8c 	.word	0x20004a8c

08005d40 <_malloc_r>:
 8005d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d44:	1ccd      	adds	r5, r1, #3
 8005d46:	f025 0503 	bic.w	r5, r5, #3
 8005d4a:	3508      	adds	r5, #8
 8005d4c:	2d0c      	cmp	r5, #12
 8005d4e:	bf38      	it	cc
 8005d50:	250c      	movcc	r5, #12
 8005d52:	2d00      	cmp	r5, #0
 8005d54:	4607      	mov	r7, r0
 8005d56:	db01      	blt.n	8005d5c <_malloc_r+0x1c>
 8005d58:	42a9      	cmp	r1, r5
 8005d5a:	d905      	bls.n	8005d68 <_malloc_r+0x28>
 8005d5c:	230c      	movs	r3, #12
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	2600      	movs	r6, #0
 8005d62:	4630      	mov	r0, r6
 8005d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d68:	4e2e      	ldr	r6, [pc, #184]	; (8005e24 <_malloc_r+0xe4>)
 8005d6a:	f000 fbf5 	bl	8006558 <__malloc_lock>
 8005d6e:	6833      	ldr	r3, [r6, #0]
 8005d70:	461c      	mov	r4, r3
 8005d72:	bb34      	cbnz	r4, 8005dc2 <_malloc_r+0x82>
 8005d74:	4629      	mov	r1, r5
 8005d76:	4638      	mov	r0, r7
 8005d78:	f7ff ffc2 	bl	8005d00 <sbrk_aligned>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	4604      	mov	r4, r0
 8005d80:	d14d      	bne.n	8005e1e <_malloc_r+0xde>
 8005d82:	6834      	ldr	r4, [r6, #0]
 8005d84:	4626      	mov	r6, r4
 8005d86:	2e00      	cmp	r6, #0
 8005d88:	d140      	bne.n	8005e0c <_malloc_r+0xcc>
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	4631      	mov	r1, r6
 8005d8e:	4638      	mov	r0, r7
 8005d90:	eb04 0803 	add.w	r8, r4, r3
 8005d94:	f000 fb36 	bl	8006404 <_sbrk_r>
 8005d98:	4580      	cmp	r8, r0
 8005d9a:	d13a      	bne.n	8005e12 <_malloc_r+0xd2>
 8005d9c:	6821      	ldr	r1, [r4, #0]
 8005d9e:	3503      	adds	r5, #3
 8005da0:	1a6d      	subs	r5, r5, r1
 8005da2:	f025 0503 	bic.w	r5, r5, #3
 8005da6:	3508      	adds	r5, #8
 8005da8:	2d0c      	cmp	r5, #12
 8005daa:	bf38      	it	cc
 8005dac:	250c      	movcc	r5, #12
 8005dae:	4629      	mov	r1, r5
 8005db0:	4638      	mov	r0, r7
 8005db2:	f7ff ffa5 	bl	8005d00 <sbrk_aligned>
 8005db6:	3001      	adds	r0, #1
 8005db8:	d02b      	beq.n	8005e12 <_malloc_r+0xd2>
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	442b      	add	r3, r5
 8005dbe:	6023      	str	r3, [r4, #0]
 8005dc0:	e00e      	b.n	8005de0 <_malloc_r+0xa0>
 8005dc2:	6822      	ldr	r2, [r4, #0]
 8005dc4:	1b52      	subs	r2, r2, r5
 8005dc6:	d41e      	bmi.n	8005e06 <_malloc_r+0xc6>
 8005dc8:	2a0b      	cmp	r2, #11
 8005dca:	d916      	bls.n	8005dfa <_malloc_r+0xba>
 8005dcc:	1961      	adds	r1, r4, r5
 8005dce:	42a3      	cmp	r3, r4
 8005dd0:	6025      	str	r5, [r4, #0]
 8005dd2:	bf18      	it	ne
 8005dd4:	6059      	strne	r1, [r3, #4]
 8005dd6:	6863      	ldr	r3, [r4, #4]
 8005dd8:	bf08      	it	eq
 8005dda:	6031      	streq	r1, [r6, #0]
 8005ddc:	5162      	str	r2, [r4, r5]
 8005dde:	604b      	str	r3, [r1, #4]
 8005de0:	4638      	mov	r0, r7
 8005de2:	f104 060b 	add.w	r6, r4, #11
 8005de6:	f000 fbbd 	bl	8006564 <__malloc_unlock>
 8005dea:	f026 0607 	bic.w	r6, r6, #7
 8005dee:	1d23      	adds	r3, r4, #4
 8005df0:	1af2      	subs	r2, r6, r3
 8005df2:	d0b6      	beq.n	8005d62 <_malloc_r+0x22>
 8005df4:	1b9b      	subs	r3, r3, r6
 8005df6:	50a3      	str	r3, [r4, r2]
 8005df8:	e7b3      	b.n	8005d62 <_malloc_r+0x22>
 8005dfa:	6862      	ldr	r2, [r4, #4]
 8005dfc:	42a3      	cmp	r3, r4
 8005dfe:	bf0c      	ite	eq
 8005e00:	6032      	streq	r2, [r6, #0]
 8005e02:	605a      	strne	r2, [r3, #4]
 8005e04:	e7ec      	b.n	8005de0 <_malloc_r+0xa0>
 8005e06:	4623      	mov	r3, r4
 8005e08:	6864      	ldr	r4, [r4, #4]
 8005e0a:	e7b2      	b.n	8005d72 <_malloc_r+0x32>
 8005e0c:	4634      	mov	r4, r6
 8005e0e:	6876      	ldr	r6, [r6, #4]
 8005e10:	e7b9      	b.n	8005d86 <_malloc_r+0x46>
 8005e12:	230c      	movs	r3, #12
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	4638      	mov	r0, r7
 8005e18:	f000 fba4 	bl	8006564 <__malloc_unlock>
 8005e1c:	e7a1      	b.n	8005d62 <_malloc_r+0x22>
 8005e1e:	6025      	str	r5, [r4, #0]
 8005e20:	e7de      	b.n	8005de0 <_malloc_r+0xa0>
 8005e22:	bf00      	nop
 8005e24:	20004a88 	.word	0x20004a88

08005e28 <__sfputc_r>:
 8005e28:	6893      	ldr	r3, [r2, #8]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	b410      	push	{r4}
 8005e30:	6093      	str	r3, [r2, #8]
 8005e32:	da08      	bge.n	8005e46 <__sfputc_r+0x1e>
 8005e34:	6994      	ldr	r4, [r2, #24]
 8005e36:	42a3      	cmp	r3, r4
 8005e38:	db01      	blt.n	8005e3e <__sfputc_r+0x16>
 8005e3a:	290a      	cmp	r1, #10
 8005e3c:	d103      	bne.n	8005e46 <__sfputc_r+0x1e>
 8005e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e42:	f7ff bc31 	b.w	80056a8 <__swbuf_r>
 8005e46:	6813      	ldr	r3, [r2, #0]
 8005e48:	1c58      	adds	r0, r3, #1
 8005e4a:	6010      	str	r0, [r2, #0]
 8005e4c:	7019      	strb	r1, [r3, #0]
 8005e4e:	4608      	mov	r0, r1
 8005e50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <__sfputs_r>:
 8005e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e58:	4606      	mov	r6, r0
 8005e5a:	460f      	mov	r7, r1
 8005e5c:	4614      	mov	r4, r2
 8005e5e:	18d5      	adds	r5, r2, r3
 8005e60:	42ac      	cmp	r4, r5
 8005e62:	d101      	bne.n	8005e68 <__sfputs_r+0x12>
 8005e64:	2000      	movs	r0, #0
 8005e66:	e007      	b.n	8005e78 <__sfputs_r+0x22>
 8005e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e6c:	463a      	mov	r2, r7
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f7ff ffda 	bl	8005e28 <__sfputc_r>
 8005e74:	1c43      	adds	r3, r0, #1
 8005e76:	d1f3      	bne.n	8005e60 <__sfputs_r+0xa>
 8005e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e7c <_vfiprintf_r>:
 8005e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e80:	460d      	mov	r5, r1
 8005e82:	b09d      	sub	sp, #116	; 0x74
 8005e84:	4614      	mov	r4, r2
 8005e86:	4698      	mov	r8, r3
 8005e88:	4606      	mov	r6, r0
 8005e8a:	b118      	cbz	r0, 8005e94 <_vfiprintf_r+0x18>
 8005e8c:	6983      	ldr	r3, [r0, #24]
 8005e8e:	b90b      	cbnz	r3, 8005e94 <_vfiprintf_r+0x18>
 8005e90:	f7ff fde4 	bl	8005a5c <__sinit>
 8005e94:	4b89      	ldr	r3, [pc, #548]	; (80060bc <_vfiprintf_r+0x240>)
 8005e96:	429d      	cmp	r5, r3
 8005e98:	d11b      	bne.n	8005ed2 <_vfiprintf_r+0x56>
 8005e9a:	6875      	ldr	r5, [r6, #4]
 8005e9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e9e:	07d9      	lsls	r1, r3, #31
 8005ea0:	d405      	bmi.n	8005eae <_vfiprintf_r+0x32>
 8005ea2:	89ab      	ldrh	r3, [r5, #12]
 8005ea4:	059a      	lsls	r2, r3, #22
 8005ea6:	d402      	bmi.n	8005eae <_vfiprintf_r+0x32>
 8005ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eaa:	f7ff fe75 	bl	8005b98 <__retarget_lock_acquire_recursive>
 8005eae:	89ab      	ldrh	r3, [r5, #12]
 8005eb0:	071b      	lsls	r3, r3, #28
 8005eb2:	d501      	bpl.n	8005eb8 <_vfiprintf_r+0x3c>
 8005eb4:	692b      	ldr	r3, [r5, #16]
 8005eb6:	b9eb      	cbnz	r3, 8005ef4 <_vfiprintf_r+0x78>
 8005eb8:	4629      	mov	r1, r5
 8005eba:	4630      	mov	r0, r6
 8005ebc:	f7ff fc46 	bl	800574c <__swsetup_r>
 8005ec0:	b1c0      	cbz	r0, 8005ef4 <_vfiprintf_r+0x78>
 8005ec2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ec4:	07dc      	lsls	r4, r3, #31
 8005ec6:	d50e      	bpl.n	8005ee6 <_vfiprintf_r+0x6a>
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	b01d      	add	sp, #116	; 0x74
 8005ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed2:	4b7b      	ldr	r3, [pc, #492]	; (80060c0 <_vfiprintf_r+0x244>)
 8005ed4:	429d      	cmp	r5, r3
 8005ed6:	d101      	bne.n	8005edc <_vfiprintf_r+0x60>
 8005ed8:	68b5      	ldr	r5, [r6, #8]
 8005eda:	e7df      	b.n	8005e9c <_vfiprintf_r+0x20>
 8005edc:	4b79      	ldr	r3, [pc, #484]	; (80060c4 <_vfiprintf_r+0x248>)
 8005ede:	429d      	cmp	r5, r3
 8005ee0:	bf08      	it	eq
 8005ee2:	68f5      	ldreq	r5, [r6, #12]
 8005ee4:	e7da      	b.n	8005e9c <_vfiprintf_r+0x20>
 8005ee6:	89ab      	ldrh	r3, [r5, #12]
 8005ee8:	0598      	lsls	r0, r3, #22
 8005eea:	d4ed      	bmi.n	8005ec8 <_vfiprintf_r+0x4c>
 8005eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eee:	f7ff fe54 	bl	8005b9a <__retarget_lock_release_recursive>
 8005ef2:	e7e9      	b.n	8005ec8 <_vfiprintf_r+0x4c>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef8:	2320      	movs	r3, #32
 8005efa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005efe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f02:	2330      	movs	r3, #48	; 0x30
 8005f04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80060c8 <_vfiprintf_r+0x24c>
 8005f08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f0c:	f04f 0901 	mov.w	r9, #1
 8005f10:	4623      	mov	r3, r4
 8005f12:	469a      	mov	sl, r3
 8005f14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f18:	b10a      	cbz	r2, 8005f1e <_vfiprintf_r+0xa2>
 8005f1a:	2a25      	cmp	r2, #37	; 0x25
 8005f1c:	d1f9      	bne.n	8005f12 <_vfiprintf_r+0x96>
 8005f1e:	ebba 0b04 	subs.w	fp, sl, r4
 8005f22:	d00b      	beq.n	8005f3c <_vfiprintf_r+0xc0>
 8005f24:	465b      	mov	r3, fp
 8005f26:	4622      	mov	r2, r4
 8005f28:	4629      	mov	r1, r5
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f7ff ff93 	bl	8005e56 <__sfputs_r>
 8005f30:	3001      	adds	r0, #1
 8005f32:	f000 80aa 	beq.w	800608a <_vfiprintf_r+0x20e>
 8005f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f38:	445a      	add	r2, fp
 8005f3a:	9209      	str	r2, [sp, #36]	; 0x24
 8005f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 80a2 	beq.w	800608a <_vfiprintf_r+0x20e>
 8005f46:	2300      	movs	r3, #0
 8005f48:	f04f 32ff 	mov.w	r2, #4294967295
 8005f4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f50:	f10a 0a01 	add.w	sl, sl, #1
 8005f54:	9304      	str	r3, [sp, #16]
 8005f56:	9307      	str	r3, [sp, #28]
 8005f58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f5c:	931a      	str	r3, [sp, #104]	; 0x68
 8005f5e:	4654      	mov	r4, sl
 8005f60:	2205      	movs	r2, #5
 8005f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f66:	4858      	ldr	r0, [pc, #352]	; (80060c8 <_vfiprintf_r+0x24c>)
 8005f68:	f7fa f952 	bl	8000210 <memchr>
 8005f6c:	9a04      	ldr	r2, [sp, #16]
 8005f6e:	b9d8      	cbnz	r0, 8005fa8 <_vfiprintf_r+0x12c>
 8005f70:	06d1      	lsls	r1, r2, #27
 8005f72:	bf44      	itt	mi
 8005f74:	2320      	movmi	r3, #32
 8005f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f7a:	0713      	lsls	r3, r2, #28
 8005f7c:	bf44      	itt	mi
 8005f7e:	232b      	movmi	r3, #43	; 0x2b
 8005f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f84:	f89a 3000 	ldrb.w	r3, [sl]
 8005f88:	2b2a      	cmp	r3, #42	; 0x2a
 8005f8a:	d015      	beq.n	8005fb8 <_vfiprintf_r+0x13c>
 8005f8c:	9a07      	ldr	r2, [sp, #28]
 8005f8e:	4654      	mov	r4, sl
 8005f90:	2000      	movs	r0, #0
 8005f92:	f04f 0c0a 	mov.w	ip, #10
 8005f96:	4621      	mov	r1, r4
 8005f98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f9c:	3b30      	subs	r3, #48	; 0x30
 8005f9e:	2b09      	cmp	r3, #9
 8005fa0:	d94e      	bls.n	8006040 <_vfiprintf_r+0x1c4>
 8005fa2:	b1b0      	cbz	r0, 8005fd2 <_vfiprintf_r+0x156>
 8005fa4:	9207      	str	r2, [sp, #28]
 8005fa6:	e014      	b.n	8005fd2 <_vfiprintf_r+0x156>
 8005fa8:	eba0 0308 	sub.w	r3, r0, r8
 8005fac:	fa09 f303 	lsl.w	r3, r9, r3
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	9304      	str	r3, [sp, #16]
 8005fb4:	46a2      	mov	sl, r4
 8005fb6:	e7d2      	b.n	8005f5e <_vfiprintf_r+0xe2>
 8005fb8:	9b03      	ldr	r3, [sp, #12]
 8005fba:	1d19      	adds	r1, r3, #4
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	9103      	str	r1, [sp, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	bfbb      	ittet	lt
 8005fc4:	425b      	neglt	r3, r3
 8005fc6:	f042 0202 	orrlt.w	r2, r2, #2
 8005fca:	9307      	strge	r3, [sp, #28]
 8005fcc:	9307      	strlt	r3, [sp, #28]
 8005fce:	bfb8      	it	lt
 8005fd0:	9204      	strlt	r2, [sp, #16]
 8005fd2:	7823      	ldrb	r3, [r4, #0]
 8005fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8005fd6:	d10c      	bne.n	8005ff2 <_vfiprintf_r+0x176>
 8005fd8:	7863      	ldrb	r3, [r4, #1]
 8005fda:	2b2a      	cmp	r3, #42	; 0x2a
 8005fdc:	d135      	bne.n	800604a <_vfiprintf_r+0x1ce>
 8005fde:	9b03      	ldr	r3, [sp, #12]
 8005fe0:	1d1a      	adds	r2, r3, #4
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	9203      	str	r2, [sp, #12]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bfb8      	it	lt
 8005fea:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fee:	3402      	adds	r4, #2
 8005ff0:	9305      	str	r3, [sp, #20]
 8005ff2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80060d8 <_vfiprintf_r+0x25c>
 8005ff6:	7821      	ldrb	r1, [r4, #0]
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	4650      	mov	r0, sl
 8005ffc:	f7fa f908 	bl	8000210 <memchr>
 8006000:	b140      	cbz	r0, 8006014 <_vfiprintf_r+0x198>
 8006002:	2340      	movs	r3, #64	; 0x40
 8006004:	eba0 000a 	sub.w	r0, r0, sl
 8006008:	fa03 f000 	lsl.w	r0, r3, r0
 800600c:	9b04      	ldr	r3, [sp, #16]
 800600e:	4303      	orrs	r3, r0
 8006010:	3401      	adds	r4, #1
 8006012:	9304      	str	r3, [sp, #16]
 8006014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006018:	482c      	ldr	r0, [pc, #176]	; (80060cc <_vfiprintf_r+0x250>)
 800601a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800601e:	2206      	movs	r2, #6
 8006020:	f7fa f8f6 	bl	8000210 <memchr>
 8006024:	2800      	cmp	r0, #0
 8006026:	d03f      	beq.n	80060a8 <_vfiprintf_r+0x22c>
 8006028:	4b29      	ldr	r3, [pc, #164]	; (80060d0 <_vfiprintf_r+0x254>)
 800602a:	bb1b      	cbnz	r3, 8006074 <_vfiprintf_r+0x1f8>
 800602c:	9b03      	ldr	r3, [sp, #12]
 800602e:	3307      	adds	r3, #7
 8006030:	f023 0307 	bic.w	r3, r3, #7
 8006034:	3308      	adds	r3, #8
 8006036:	9303      	str	r3, [sp, #12]
 8006038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800603a:	443b      	add	r3, r7
 800603c:	9309      	str	r3, [sp, #36]	; 0x24
 800603e:	e767      	b.n	8005f10 <_vfiprintf_r+0x94>
 8006040:	fb0c 3202 	mla	r2, ip, r2, r3
 8006044:	460c      	mov	r4, r1
 8006046:	2001      	movs	r0, #1
 8006048:	e7a5      	b.n	8005f96 <_vfiprintf_r+0x11a>
 800604a:	2300      	movs	r3, #0
 800604c:	3401      	adds	r4, #1
 800604e:	9305      	str	r3, [sp, #20]
 8006050:	4619      	mov	r1, r3
 8006052:	f04f 0c0a 	mov.w	ip, #10
 8006056:	4620      	mov	r0, r4
 8006058:	f810 2b01 	ldrb.w	r2, [r0], #1
 800605c:	3a30      	subs	r2, #48	; 0x30
 800605e:	2a09      	cmp	r2, #9
 8006060:	d903      	bls.n	800606a <_vfiprintf_r+0x1ee>
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0c5      	beq.n	8005ff2 <_vfiprintf_r+0x176>
 8006066:	9105      	str	r1, [sp, #20]
 8006068:	e7c3      	b.n	8005ff2 <_vfiprintf_r+0x176>
 800606a:	fb0c 2101 	mla	r1, ip, r1, r2
 800606e:	4604      	mov	r4, r0
 8006070:	2301      	movs	r3, #1
 8006072:	e7f0      	b.n	8006056 <_vfiprintf_r+0x1da>
 8006074:	ab03      	add	r3, sp, #12
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	462a      	mov	r2, r5
 800607a:	4b16      	ldr	r3, [pc, #88]	; (80060d4 <_vfiprintf_r+0x258>)
 800607c:	a904      	add	r1, sp, #16
 800607e:	4630      	mov	r0, r6
 8006080:	f3af 8000 	nop.w
 8006084:	4607      	mov	r7, r0
 8006086:	1c78      	adds	r0, r7, #1
 8006088:	d1d6      	bne.n	8006038 <_vfiprintf_r+0x1bc>
 800608a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800608c:	07d9      	lsls	r1, r3, #31
 800608e:	d405      	bmi.n	800609c <_vfiprintf_r+0x220>
 8006090:	89ab      	ldrh	r3, [r5, #12]
 8006092:	059a      	lsls	r2, r3, #22
 8006094:	d402      	bmi.n	800609c <_vfiprintf_r+0x220>
 8006096:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006098:	f7ff fd7f 	bl	8005b9a <__retarget_lock_release_recursive>
 800609c:	89ab      	ldrh	r3, [r5, #12]
 800609e:	065b      	lsls	r3, r3, #25
 80060a0:	f53f af12 	bmi.w	8005ec8 <_vfiprintf_r+0x4c>
 80060a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060a6:	e711      	b.n	8005ecc <_vfiprintf_r+0x50>
 80060a8:	ab03      	add	r3, sp, #12
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	462a      	mov	r2, r5
 80060ae:	4b09      	ldr	r3, [pc, #36]	; (80060d4 <_vfiprintf_r+0x258>)
 80060b0:	a904      	add	r1, sp, #16
 80060b2:	4630      	mov	r0, r6
 80060b4:	f000 f880 	bl	80061b8 <_printf_i>
 80060b8:	e7e4      	b.n	8006084 <_vfiprintf_r+0x208>
 80060ba:	bf00      	nop
 80060bc:	08006654 	.word	0x08006654
 80060c0:	08006674 	.word	0x08006674
 80060c4:	08006634 	.word	0x08006634
 80060c8:	08006694 	.word	0x08006694
 80060cc:	0800669e 	.word	0x0800669e
 80060d0:	00000000 	.word	0x00000000
 80060d4:	08005e57 	.word	0x08005e57
 80060d8:	0800669a 	.word	0x0800669a

080060dc <_printf_common>:
 80060dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e0:	4616      	mov	r6, r2
 80060e2:	4699      	mov	r9, r3
 80060e4:	688a      	ldr	r2, [r1, #8]
 80060e6:	690b      	ldr	r3, [r1, #16]
 80060e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060ec:	4293      	cmp	r3, r2
 80060ee:	bfb8      	it	lt
 80060f0:	4613      	movlt	r3, r2
 80060f2:	6033      	str	r3, [r6, #0]
 80060f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060f8:	4607      	mov	r7, r0
 80060fa:	460c      	mov	r4, r1
 80060fc:	b10a      	cbz	r2, 8006102 <_printf_common+0x26>
 80060fe:	3301      	adds	r3, #1
 8006100:	6033      	str	r3, [r6, #0]
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	0699      	lsls	r1, r3, #26
 8006106:	bf42      	ittt	mi
 8006108:	6833      	ldrmi	r3, [r6, #0]
 800610a:	3302      	addmi	r3, #2
 800610c:	6033      	strmi	r3, [r6, #0]
 800610e:	6825      	ldr	r5, [r4, #0]
 8006110:	f015 0506 	ands.w	r5, r5, #6
 8006114:	d106      	bne.n	8006124 <_printf_common+0x48>
 8006116:	f104 0a19 	add.w	sl, r4, #25
 800611a:	68e3      	ldr	r3, [r4, #12]
 800611c:	6832      	ldr	r2, [r6, #0]
 800611e:	1a9b      	subs	r3, r3, r2
 8006120:	42ab      	cmp	r3, r5
 8006122:	dc26      	bgt.n	8006172 <_printf_common+0x96>
 8006124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006128:	1e13      	subs	r3, r2, #0
 800612a:	6822      	ldr	r2, [r4, #0]
 800612c:	bf18      	it	ne
 800612e:	2301      	movne	r3, #1
 8006130:	0692      	lsls	r2, r2, #26
 8006132:	d42b      	bmi.n	800618c <_printf_common+0xb0>
 8006134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006138:	4649      	mov	r1, r9
 800613a:	4638      	mov	r0, r7
 800613c:	47c0      	blx	r8
 800613e:	3001      	adds	r0, #1
 8006140:	d01e      	beq.n	8006180 <_printf_common+0xa4>
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	68e5      	ldr	r5, [r4, #12]
 8006146:	6832      	ldr	r2, [r6, #0]
 8006148:	f003 0306 	and.w	r3, r3, #6
 800614c:	2b04      	cmp	r3, #4
 800614e:	bf08      	it	eq
 8006150:	1aad      	subeq	r5, r5, r2
 8006152:	68a3      	ldr	r3, [r4, #8]
 8006154:	6922      	ldr	r2, [r4, #16]
 8006156:	bf0c      	ite	eq
 8006158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800615c:	2500      	movne	r5, #0
 800615e:	4293      	cmp	r3, r2
 8006160:	bfc4      	itt	gt
 8006162:	1a9b      	subgt	r3, r3, r2
 8006164:	18ed      	addgt	r5, r5, r3
 8006166:	2600      	movs	r6, #0
 8006168:	341a      	adds	r4, #26
 800616a:	42b5      	cmp	r5, r6
 800616c:	d11a      	bne.n	80061a4 <_printf_common+0xc8>
 800616e:	2000      	movs	r0, #0
 8006170:	e008      	b.n	8006184 <_printf_common+0xa8>
 8006172:	2301      	movs	r3, #1
 8006174:	4652      	mov	r2, sl
 8006176:	4649      	mov	r1, r9
 8006178:	4638      	mov	r0, r7
 800617a:	47c0      	blx	r8
 800617c:	3001      	adds	r0, #1
 800617e:	d103      	bne.n	8006188 <_printf_common+0xac>
 8006180:	f04f 30ff 	mov.w	r0, #4294967295
 8006184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006188:	3501      	adds	r5, #1
 800618a:	e7c6      	b.n	800611a <_printf_common+0x3e>
 800618c:	18e1      	adds	r1, r4, r3
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	2030      	movs	r0, #48	; 0x30
 8006192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006196:	4422      	add	r2, r4
 8006198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800619c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061a0:	3302      	adds	r3, #2
 80061a2:	e7c7      	b.n	8006134 <_printf_common+0x58>
 80061a4:	2301      	movs	r3, #1
 80061a6:	4622      	mov	r2, r4
 80061a8:	4649      	mov	r1, r9
 80061aa:	4638      	mov	r0, r7
 80061ac:	47c0      	blx	r8
 80061ae:	3001      	adds	r0, #1
 80061b0:	d0e6      	beq.n	8006180 <_printf_common+0xa4>
 80061b2:	3601      	adds	r6, #1
 80061b4:	e7d9      	b.n	800616a <_printf_common+0x8e>
	...

080061b8 <_printf_i>:
 80061b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061bc:	7e0f      	ldrb	r7, [r1, #24]
 80061be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061c0:	2f78      	cmp	r7, #120	; 0x78
 80061c2:	4691      	mov	r9, r2
 80061c4:	4680      	mov	r8, r0
 80061c6:	460c      	mov	r4, r1
 80061c8:	469a      	mov	sl, r3
 80061ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061ce:	d807      	bhi.n	80061e0 <_printf_i+0x28>
 80061d0:	2f62      	cmp	r7, #98	; 0x62
 80061d2:	d80a      	bhi.n	80061ea <_printf_i+0x32>
 80061d4:	2f00      	cmp	r7, #0
 80061d6:	f000 80d8 	beq.w	800638a <_printf_i+0x1d2>
 80061da:	2f58      	cmp	r7, #88	; 0x58
 80061dc:	f000 80a3 	beq.w	8006326 <_printf_i+0x16e>
 80061e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061e8:	e03a      	b.n	8006260 <_printf_i+0xa8>
 80061ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061ee:	2b15      	cmp	r3, #21
 80061f0:	d8f6      	bhi.n	80061e0 <_printf_i+0x28>
 80061f2:	a101      	add	r1, pc, #4	; (adr r1, 80061f8 <_printf_i+0x40>)
 80061f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061f8:	08006251 	.word	0x08006251
 80061fc:	08006265 	.word	0x08006265
 8006200:	080061e1 	.word	0x080061e1
 8006204:	080061e1 	.word	0x080061e1
 8006208:	080061e1 	.word	0x080061e1
 800620c:	080061e1 	.word	0x080061e1
 8006210:	08006265 	.word	0x08006265
 8006214:	080061e1 	.word	0x080061e1
 8006218:	080061e1 	.word	0x080061e1
 800621c:	080061e1 	.word	0x080061e1
 8006220:	080061e1 	.word	0x080061e1
 8006224:	08006371 	.word	0x08006371
 8006228:	08006295 	.word	0x08006295
 800622c:	08006353 	.word	0x08006353
 8006230:	080061e1 	.word	0x080061e1
 8006234:	080061e1 	.word	0x080061e1
 8006238:	08006393 	.word	0x08006393
 800623c:	080061e1 	.word	0x080061e1
 8006240:	08006295 	.word	0x08006295
 8006244:	080061e1 	.word	0x080061e1
 8006248:	080061e1 	.word	0x080061e1
 800624c:	0800635b 	.word	0x0800635b
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	1d1a      	adds	r2, r3, #4
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	602a      	str	r2, [r5, #0]
 8006258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800625c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006260:	2301      	movs	r3, #1
 8006262:	e0a3      	b.n	80063ac <_printf_i+0x1f4>
 8006264:	6820      	ldr	r0, [r4, #0]
 8006266:	6829      	ldr	r1, [r5, #0]
 8006268:	0606      	lsls	r6, r0, #24
 800626a:	f101 0304 	add.w	r3, r1, #4
 800626e:	d50a      	bpl.n	8006286 <_printf_i+0xce>
 8006270:	680e      	ldr	r6, [r1, #0]
 8006272:	602b      	str	r3, [r5, #0]
 8006274:	2e00      	cmp	r6, #0
 8006276:	da03      	bge.n	8006280 <_printf_i+0xc8>
 8006278:	232d      	movs	r3, #45	; 0x2d
 800627a:	4276      	negs	r6, r6
 800627c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006280:	485e      	ldr	r0, [pc, #376]	; (80063fc <_printf_i+0x244>)
 8006282:	230a      	movs	r3, #10
 8006284:	e019      	b.n	80062ba <_printf_i+0x102>
 8006286:	680e      	ldr	r6, [r1, #0]
 8006288:	602b      	str	r3, [r5, #0]
 800628a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800628e:	bf18      	it	ne
 8006290:	b236      	sxthne	r6, r6
 8006292:	e7ef      	b.n	8006274 <_printf_i+0xbc>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	6820      	ldr	r0, [r4, #0]
 8006298:	1d19      	adds	r1, r3, #4
 800629a:	6029      	str	r1, [r5, #0]
 800629c:	0601      	lsls	r1, r0, #24
 800629e:	d501      	bpl.n	80062a4 <_printf_i+0xec>
 80062a0:	681e      	ldr	r6, [r3, #0]
 80062a2:	e002      	b.n	80062aa <_printf_i+0xf2>
 80062a4:	0646      	lsls	r6, r0, #25
 80062a6:	d5fb      	bpl.n	80062a0 <_printf_i+0xe8>
 80062a8:	881e      	ldrh	r6, [r3, #0]
 80062aa:	4854      	ldr	r0, [pc, #336]	; (80063fc <_printf_i+0x244>)
 80062ac:	2f6f      	cmp	r7, #111	; 0x6f
 80062ae:	bf0c      	ite	eq
 80062b0:	2308      	moveq	r3, #8
 80062b2:	230a      	movne	r3, #10
 80062b4:	2100      	movs	r1, #0
 80062b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062ba:	6865      	ldr	r5, [r4, #4]
 80062bc:	60a5      	str	r5, [r4, #8]
 80062be:	2d00      	cmp	r5, #0
 80062c0:	bfa2      	ittt	ge
 80062c2:	6821      	ldrge	r1, [r4, #0]
 80062c4:	f021 0104 	bicge.w	r1, r1, #4
 80062c8:	6021      	strge	r1, [r4, #0]
 80062ca:	b90e      	cbnz	r6, 80062d0 <_printf_i+0x118>
 80062cc:	2d00      	cmp	r5, #0
 80062ce:	d04d      	beq.n	800636c <_printf_i+0x1b4>
 80062d0:	4615      	mov	r5, r2
 80062d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80062d6:	fb03 6711 	mls	r7, r3, r1, r6
 80062da:	5dc7      	ldrb	r7, [r0, r7]
 80062dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062e0:	4637      	mov	r7, r6
 80062e2:	42bb      	cmp	r3, r7
 80062e4:	460e      	mov	r6, r1
 80062e6:	d9f4      	bls.n	80062d2 <_printf_i+0x11a>
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d10b      	bne.n	8006304 <_printf_i+0x14c>
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	07de      	lsls	r6, r3, #31
 80062f0:	d508      	bpl.n	8006304 <_printf_i+0x14c>
 80062f2:	6923      	ldr	r3, [r4, #16]
 80062f4:	6861      	ldr	r1, [r4, #4]
 80062f6:	4299      	cmp	r1, r3
 80062f8:	bfde      	ittt	le
 80062fa:	2330      	movle	r3, #48	; 0x30
 80062fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006300:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006304:	1b52      	subs	r2, r2, r5
 8006306:	6122      	str	r2, [r4, #16]
 8006308:	f8cd a000 	str.w	sl, [sp]
 800630c:	464b      	mov	r3, r9
 800630e:	aa03      	add	r2, sp, #12
 8006310:	4621      	mov	r1, r4
 8006312:	4640      	mov	r0, r8
 8006314:	f7ff fee2 	bl	80060dc <_printf_common>
 8006318:	3001      	adds	r0, #1
 800631a:	d14c      	bne.n	80063b6 <_printf_i+0x1fe>
 800631c:	f04f 30ff 	mov.w	r0, #4294967295
 8006320:	b004      	add	sp, #16
 8006322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006326:	4835      	ldr	r0, [pc, #212]	; (80063fc <_printf_i+0x244>)
 8006328:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800632c:	6829      	ldr	r1, [r5, #0]
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	f851 6b04 	ldr.w	r6, [r1], #4
 8006334:	6029      	str	r1, [r5, #0]
 8006336:	061d      	lsls	r5, r3, #24
 8006338:	d514      	bpl.n	8006364 <_printf_i+0x1ac>
 800633a:	07df      	lsls	r7, r3, #31
 800633c:	bf44      	itt	mi
 800633e:	f043 0320 	orrmi.w	r3, r3, #32
 8006342:	6023      	strmi	r3, [r4, #0]
 8006344:	b91e      	cbnz	r6, 800634e <_printf_i+0x196>
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	f023 0320 	bic.w	r3, r3, #32
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	2310      	movs	r3, #16
 8006350:	e7b0      	b.n	80062b4 <_printf_i+0xfc>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	f043 0320 	orr.w	r3, r3, #32
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	2378      	movs	r3, #120	; 0x78
 800635c:	4828      	ldr	r0, [pc, #160]	; (8006400 <_printf_i+0x248>)
 800635e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006362:	e7e3      	b.n	800632c <_printf_i+0x174>
 8006364:	0659      	lsls	r1, r3, #25
 8006366:	bf48      	it	mi
 8006368:	b2b6      	uxthmi	r6, r6
 800636a:	e7e6      	b.n	800633a <_printf_i+0x182>
 800636c:	4615      	mov	r5, r2
 800636e:	e7bb      	b.n	80062e8 <_printf_i+0x130>
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	6826      	ldr	r6, [r4, #0]
 8006374:	6961      	ldr	r1, [r4, #20]
 8006376:	1d18      	adds	r0, r3, #4
 8006378:	6028      	str	r0, [r5, #0]
 800637a:	0635      	lsls	r5, r6, #24
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	d501      	bpl.n	8006384 <_printf_i+0x1cc>
 8006380:	6019      	str	r1, [r3, #0]
 8006382:	e002      	b.n	800638a <_printf_i+0x1d2>
 8006384:	0670      	lsls	r0, r6, #25
 8006386:	d5fb      	bpl.n	8006380 <_printf_i+0x1c8>
 8006388:	8019      	strh	r1, [r3, #0]
 800638a:	2300      	movs	r3, #0
 800638c:	6123      	str	r3, [r4, #16]
 800638e:	4615      	mov	r5, r2
 8006390:	e7ba      	b.n	8006308 <_printf_i+0x150>
 8006392:	682b      	ldr	r3, [r5, #0]
 8006394:	1d1a      	adds	r2, r3, #4
 8006396:	602a      	str	r2, [r5, #0]
 8006398:	681d      	ldr	r5, [r3, #0]
 800639a:	6862      	ldr	r2, [r4, #4]
 800639c:	2100      	movs	r1, #0
 800639e:	4628      	mov	r0, r5
 80063a0:	f7f9 ff36 	bl	8000210 <memchr>
 80063a4:	b108      	cbz	r0, 80063aa <_printf_i+0x1f2>
 80063a6:	1b40      	subs	r0, r0, r5
 80063a8:	6060      	str	r0, [r4, #4]
 80063aa:	6863      	ldr	r3, [r4, #4]
 80063ac:	6123      	str	r3, [r4, #16]
 80063ae:	2300      	movs	r3, #0
 80063b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063b4:	e7a8      	b.n	8006308 <_printf_i+0x150>
 80063b6:	6923      	ldr	r3, [r4, #16]
 80063b8:	462a      	mov	r2, r5
 80063ba:	4649      	mov	r1, r9
 80063bc:	4640      	mov	r0, r8
 80063be:	47d0      	blx	sl
 80063c0:	3001      	adds	r0, #1
 80063c2:	d0ab      	beq.n	800631c <_printf_i+0x164>
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	079b      	lsls	r3, r3, #30
 80063c8:	d413      	bmi.n	80063f2 <_printf_i+0x23a>
 80063ca:	68e0      	ldr	r0, [r4, #12]
 80063cc:	9b03      	ldr	r3, [sp, #12]
 80063ce:	4298      	cmp	r0, r3
 80063d0:	bfb8      	it	lt
 80063d2:	4618      	movlt	r0, r3
 80063d4:	e7a4      	b.n	8006320 <_printf_i+0x168>
 80063d6:	2301      	movs	r3, #1
 80063d8:	4632      	mov	r2, r6
 80063da:	4649      	mov	r1, r9
 80063dc:	4640      	mov	r0, r8
 80063de:	47d0      	blx	sl
 80063e0:	3001      	adds	r0, #1
 80063e2:	d09b      	beq.n	800631c <_printf_i+0x164>
 80063e4:	3501      	adds	r5, #1
 80063e6:	68e3      	ldr	r3, [r4, #12]
 80063e8:	9903      	ldr	r1, [sp, #12]
 80063ea:	1a5b      	subs	r3, r3, r1
 80063ec:	42ab      	cmp	r3, r5
 80063ee:	dcf2      	bgt.n	80063d6 <_printf_i+0x21e>
 80063f0:	e7eb      	b.n	80063ca <_printf_i+0x212>
 80063f2:	2500      	movs	r5, #0
 80063f4:	f104 0619 	add.w	r6, r4, #25
 80063f8:	e7f5      	b.n	80063e6 <_printf_i+0x22e>
 80063fa:	bf00      	nop
 80063fc:	080066a5 	.word	0x080066a5
 8006400:	080066b6 	.word	0x080066b6

08006404 <_sbrk_r>:
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	4d06      	ldr	r5, [pc, #24]	; (8006420 <_sbrk_r+0x1c>)
 8006408:	2300      	movs	r3, #0
 800640a:	4604      	mov	r4, r0
 800640c:	4608      	mov	r0, r1
 800640e:	602b      	str	r3, [r5, #0]
 8006410:	f7fa fc2a 	bl	8000c68 <_sbrk>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d102      	bne.n	800641e <_sbrk_r+0x1a>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	b103      	cbz	r3, 800641e <_sbrk_r+0x1a>
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	bd38      	pop	{r3, r4, r5, pc}
 8006420:	20004a90 	.word	0x20004a90

08006424 <__sread>:
 8006424:	b510      	push	{r4, lr}
 8006426:	460c      	mov	r4, r1
 8006428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800642c:	f000 f8a0 	bl	8006570 <_read_r>
 8006430:	2800      	cmp	r0, #0
 8006432:	bfab      	itete	ge
 8006434:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006436:	89a3      	ldrhlt	r3, [r4, #12]
 8006438:	181b      	addge	r3, r3, r0
 800643a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800643e:	bfac      	ite	ge
 8006440:	6563      	strge	r3, [r4, #84]	; 0x54
 8006442:	81a3      	strhlt	r3, [r4, #12]
 8006444:	bd10      	pop	{r4, pc}

08006446 <__swrite>:
 8006446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800644a:	461f      	mov	r7, r3
 800644c:	898b      	ldrh	r3, [r1, #12]
 800644e:	05db      	lsls	r3, r3, #23
 8006450:	4605      	mov	r5, r0
 8006452:	460c      	mov	r4, r1
 8006454:	4616      	mov	r6, r2
 8006456:	d505      	bpl.n	8006464 <__swrite+0x1e>
 8006458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800645c:	2302      	movs	r3, #2
 800645e:	2200      	movs	r2, #0
 8006460:	f000 f868 	bl	8006534 <_lseek_r>
 8006464:	89a3      	ldrh	r3, [r4, #12]
 8006466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800646a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800646e:	81a3      	strh	r3, [r4, #12]
 8006470:	4632      	mov	r2, r6
 8006472:	463b      	mov	r3, r7
 8006474:	4628      	mov	r0, r5
 8006476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800647a:	f000 b817 	b.w	80064ac <_write_r>

0800647e <__sseek>:
 800647e:	b510      	push	{r4, lr}
 8006480:	460c      	mov	r4, r1
 8006482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006486:	f000 f855 	bl	8006534 <_lseek_r>
 800648a:	1c43      	adds	r3, r0, #1
 800648c:	89a3      	ldrh	r3, [r4, #12]
 800648e:	bf15      	itete	ne
 8006490:	6560      	strne	r0, [r4, #84]	; 0x54
 8006492:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006496:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800649a:	81a3      	strheq	r3, [r4, #12]
 800649c:	bf18      	it	ne
 800649e:	81a3      	strhne	r3, [r4, #12]
 80064a0:	bd10      	pop	{r4, pc}

080064a2 <__sclose>:
 80064a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a6:	f000 b813 	b.w	80064d0 <_close_r>
	...

080064ac <_write_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4d07      	ldr	r5, [pc, #28]	; (80064cc <_write_r+0x20>)
 80064b0:	4604      	mov	r4, r0
 80064b2:	4608      	mov	r0, r1
 80064b4:	4611      	mov	r1, r2
 80064b6:	2200      	movs	r2, #0
 80064b8:	602a      	str	r2, [r5, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	f7fa fb83 	bl	8000bc6 <_write>
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	d102      	bne.n	80064ca <_write_r+0x1e>
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	b103      	cbz	r3, 80064ca <_write_r+0x1e>
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	bd38      	pop	{r3, r4, r5, pc}
 80064cc:	20004a90 	.word	0x20004a90

080064d0 <_close_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4d06      	ldr	r5, [pc, #24]	; (80064ec <_close_r+0x1c>)
 80064d4:	2300      	movs	r3, #0
 80064d6:	4604      	mov	r4, r0
 80064d8:	4608      	mov	r0, r1
 80064da:	602b      	str	r3, [r5, #0]
 80064dc:	f7fa fb8f 	bl	8000bfe <_close>
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	d102      	bne.n	80064ea <_close_r+0x1a>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	b103      	cbz	r3, 80064ea <_close_r+0x1a>
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
 80064ec:	20004a90 	.word	0x20004a90

080064f0 <_fstat_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4d07      	ldr	r5, [pc, #28]	; (8006510 <_fstat_r+0x20>)
 80064f4:	2300      	movs	r3, #0
 80064f6:	4604      	mov	r4, r0
 80064f8:	4608      	mov	r0, r1
 80064fa:	4611      	mov	r1, r2
 80064fc:	602b      	str	r3, [r5, #0]
 80064fe:	f7fa fb8a 	bl	8000c16 <_fstat>
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	d102      	bne.n	800650c <_fstat_r+0x1c>
 8006506:	682b      	ldr	r3, [r5, #0]
 8006508:	b103      	cbz	r3, 800650c <_fstat_r+0x1c>
 800650a:	6023      	str	r3, [r4, #0]
 800650c:	bd38      	pop	{r3, r4, r5, pc}
 800650e:	bf00      	nop
 8006510:	20004a90 	.word	0x20004a90

08006514 <_isatty_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	4d06      	ldr	r5, [pc, #24]	; (8006530 <_isatty_r+0x1c>)
 8006518:	2300      	movs	r3, #0
 800651a:	4604      	mov	r4, r0
 800651c:	4608      	mov	r0, r1
 800651e:	602b      	str	r3, [r5, #0]
 8006520:	f7fa fb89 	bl	8000c36 <_isatty>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	d102      	bne.n	800652e <_isatty_r+0x1a>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	b103      	cbz	r3, 800652e <_isatty_r+0x1a>
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	bd38      	pop	{r3, r4, r5, pc}
 8006530:	20004a90 	.word	0x20004a90

08006534 <_lseek_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	4d07      	ldr	r5, [pc, #28]	; (8006554 <_lseek_r+0x20>)
 8006538:	4604      	mov	r4, r0
 800653a:	4608      	mov	r0, r1
 800653c:	4611      	mov	r1, r2
 800653e:	2200      	movs	r2, #0
 8006540:	602a      	str	r2, [r5, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	f7fa fb82 	bl	8000c4c <_lseek>
 8006548:	1c43      	adds	r3, r0, #1
 800654a:	d102      	bne.n	8006552 <_lseek_r+0x1e>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	b103      	cbz	r3, 8006552 <_lseek_r+0x1e>
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	bd38      	pop	{r3, r4, r5, pc}
 8006554:	20004a90 	.word	0x20004a90

08006558 <__malloc_lock>:
 8006558:	4801      	ldr	r0, [pc, #4]	; (8006560 <__malloc_lock+0x8>)
 800655a:	f7ff bb1d 	b.w	8005b98 <__retarget_lock_acquire_recursive>
 800655e:	bf00      	nop
 8006560:	20004a84 	.word	0x20004a84

08006564 <__malloc_unlock>:
 8006564:	4801      	ldr	r0, [pc, #4]	; (800656c <__malloc_unlock+0x8>)
 8006566:	f7ff bb18 	b.w	8005b9a <__retarget_lock_release_recursive>
 800656a:	bf00      	nop
 800656c:	20004a84 	.word	0x20004a84

08006570 <_read_r>:
 8006570:	b538      	push	{r3, r4, r5, lr}
 8006572:	4d07      	ldr	r5, [pc, #28]	; (8006590 <_read_r+0x20>)
 8006574:	4604      	mov	r4, r0
 8006576:	4608      	mov	r0, r1
 8006578:	4611      	mov	r1, r2
 800657a:	2200      	movs	r2, #0
 800657c:	602a      	str	r2, [r5, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	f7fa fb04 	bl	8000b8c <_read>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d102      	bne.n	800658e <_read_r+0x1e>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	b103      	cbz	r3, 800658e <_read_r+0x1e>
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	bd38      	pop	{r3, r4, r5, pc}
 8006590:	20004a90 	.word	0x20004a90

08006594 <_init>:
 8006594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006596:	bf00      	nop
 8006598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659a:	bc08      	pop	{r3}
 800659c:	469e      	mov	lr, r3
 800659e:	4770      	bx	lr

080065a0 <_fini>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	bf00      	nop
 80065a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a6:	bc08      	pop	{r3}
 80065a8:	469e      	mov	lr, r3
 80065aa:	4770      	bx	lr
