
44_Cmsis_Rtos_MessageQueues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b20  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08006cf0  08006cf0  00016cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e2c  08006e2c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006e2c  08006e2c  00016e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e34  08006e34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e34  08006e34  00016e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a48  20000074  08006eb0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004abc  08006eb0  00024abc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a5b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b0  00000000  00000000  00038aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  0003beb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  0003d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a7d  00000000  00000000  0003e778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017070  00000000  00000000  000431f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc7d2  00000000  00000000  0005a265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136a37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006050  00000000  00000000  00136a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006cd8 	.word	0x08006cd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006cd8 	.word	0x08006cd8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
const osMessageQueueAttr_t msgQueueAttribs = {
		.name = "Msg1 Queue"
};

int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b0a4      	sub	sp, #144	; 0x90
 80005b8:	af00      	add	r7, sp, #0

  HAL_Init();
 80005ba:	f000 fc67 	bl	8000e8c <HAL_Init>
  SystemClock_Config();
 80005be:	f000 f93d 	bl	800083c <SystemClock_Config>
  MX_GPIO_Init();
 80005c2:	f000 f9d3 	bl	800096c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c6:	f000 f9a7 	bl	8000918 <MX_USART2_UART_Init>

  //Initialize Kernel
  osKernelInitialize();
 80005ca:	f002 faff 	bl	8002bcc <osKernelInitialize>

  timer_1_id = osTimerNew(Timer1_Callback, osTimerOnce, NULL, NULL);
 80005ce:	2300      	movs	r3, #0
 80005d0:	2200      	movs	r2, #0
 80005d2:	2100      	movs	r1, #0
 80005d4:	483c      	ldr	r0, [pc, #240]	; (80006c8 <main+0x114>)
 80005d6:	f002 fc05 	bl	8002de4 <osTimerNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a3b      	ldr	r2, [pc, #236]	; (80006cc <main+0x118>)
 80005de:	6013      	str	r3, [r2, #0]
  timer_2_id = osTimerNew(Timer2_Callback, osTimerPeriodic, NULL, NULL);
 80005e0:	2300      	movs	r3, #0
 80005e2:	2200      	movs	r2, #0
 80005e4:	2101      	movs	r1, #1
 80005e6:	483a      	ldr	r0, [pc, #232]	; (80006d0 <main+0x11c>)
 80005e8:	f002 fbfc 	bl	8002de4 <osTimerNew>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a39      	ldr	r2, [pc, #228]	; (80006d4 <main+0x120>)
 80005f0:	6013      	str	r3, [r2, #0]

  //Create the threads
  osThreadAttr_t greenThreadAttribs = { .name = "GreenTasks",
 80005f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005f6:	2224      	movs	r2, #36	; 0x24
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f005 fbd6 	bl	8005dac <memset>
 8000600:	4b35      	ldr	r3, [pc, #212]	; (80006d8 <main+0x124>)
 8000602:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800060c:	2318      	movs	r3, #24
 800060e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  	  	  	  	  	  	  	  	.stack_size = STACK_SIZE,
										.priority = osPriorityNormal
  	  	  	  	  	  	  	  	  	  };

  green_id = osThreadNew(vGreenLedControllerTask, NULL, &greenThreadAttribs);
 8000612:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000616:	461a      	mov	r2, r3
 8000618:	2100      	movs	r1, #0
 800061a:	4830      	ldr	r0, [pc, #192]	; (80006dc <main+0x128>)
 800061c:	f002 fb20 	bl	8002c60 <osThreadNew>
 8000620:	4603      	mov	r3, r0
 8000622:	4a2f      	ldr	r2, [pc, #188]	; (80006e0 <main+0x12c>)
 8000624:	6013      	str	r3, [r2, #0]

  osThreadAttr_t redThreadAttribs = { .name = "RedTasks",
 8000626:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800062a:	2224      	movs	r2, #36	; 0x24
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 fbbc 	bl	8005dac <memset>
 8000634:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <main+0x130>)
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
 8000638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800063c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800063e:	2318      	movs	r3, #24
 8000640:	663b      	str	r3, [r7, #96]	; 0x60
		  	  	  	  	  	  	  	  	.stack_size = STACK_SIZE,
										.priority = osPriorityNormal
  	  	  	  	  	  	  	  	  	  };

  red_id = osThreadNew(vRedLedControllerTask, NULL, &redThreadAttribs);
 8000642:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000646:	461a      	mov	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	4827      	ldr	r0, [pc, #156]	; (80006e8 <main+0x134>)
 800064c:	f002 fb08 	bl	8002c60 <osThreadNew>
 8000650:	4603      	mov	r3, r0
 8000652:	4a26      	ldr	r2, [pc, #152]	; (80006ec <main+0x138>)
 8000654:	6013      	str	r3, [r2, #0]

  osThreadAttr_t blueThreadAttribs = { .name = "BlueTasks",
 8000656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065a:	2224      	movs	r2, #36	; 0x24
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fba4 	bl	8005dac <memset>
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <main+0x13c>)
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
 8000668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
 800066e:	2318      	movs	r3, #24
 8000670:	63fb      	str	r3, [r7, #60]	; 0x3c
		  	  	  	  	  	  	  	  	.stack_size = STACK_SIZE,
										.priority = osPriorityNormal
  	  	  	  	  	  	  	  	  	  };

  blue_id = osThreadNew(vBlueLedControllerTask, NULL, &blueThreadAttribs);
 8000672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000676:	461a      	mov	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	481e      	ldr	r0, [pc, #120]	; (80006f4 <main+0x140>)
 800067c:	f002 faf0 	bl	8002c60 <osThreadNew>
 8000680:	4603      	mov	r3, r0
 8000682:	4a1d      	ldr	r2, [pc, #116]	; (80006f8 <main+0x144>)
 8000684:	6013      	str	r3, [r2, #0]

  osThreadAttr_t orangeThreadAttribs = { .name = "OrangeTasks",
 8000686:	463b      	mov	r3, r7
 8000688:	2224      	movs	r2, #36	; 0x24
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f005 fb8d 	bl	8005dac <memset>
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <main+0x148>)
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	2318      	movs	r3, #24
 800069e:	61bb      	str	r3, [r7, #24]
		  	  	  	  	  	  	  	  	.stack_size = STACK_SIZE,
										.priority = osPriorityNormal
  	  	  	  	  	  	  	  	  	  };

  orange_id = osThreadNew(vOrangeLedControllerTask, NULL, &orangeThreadAttribs);
 80006a0:	463b      	mov	r3, r7
 80006a2:	461a      	mov	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	4816      	ldr	r0, [pc, #88]	; (8000700 <main+0x14c>)
 80006a8:	f002 fada 	bl	8002c60 <osThreadNew>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a15      	ldr	r2, [pc, #84]	; (8000704 <main+0x150>)
 80006b0:	6013      	str	r3, [r2, #0]

  msg_queue_id = osMessageQueueNew(5, sizeof(uint16_t), &msgQueueAttribs);
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <main+0x154>)
 80006b4:	2102      	movs	r1, #2
 80006b6:	2005      	movs	r0, #5
 80006b8:	f002 fc3e 	bl	8002f38 <osMessageQueueNew>
 80006bc:	4603      	mov	r3, r0
 80006be:	4a13      	ldr	r2, [pc, #76]	; (800070c <main+0x158>)
 80006c0:	6013      	str	r3, [r2, #0]

  //Start the kernel
  osKernelStart();
 80006c2:	f002 faa7 	bl	8002c14 <osKernelStart>


  while (1)
 80006c6:	e7fe      	b.n	80006c6 <main+0x112>
 80006c8:	08000711 	.word	0x08000711
 80006cc:	200000fc 	.word	0x200000fc
 80006d0:	08000735 	.word	0x08000735
 80006d4:	20000100 	.word	0x20000100
 80006d8:	08006cfc 	.word	0x08006cfc
 80006dc:	08000759 	.word	0x08000759
 80006e0:	200000f0 	.word	0x200000f0
 80006e4:	08006d08 	.word	0x08006d08
 80006e8:	08000805 	.word	0x08000805
 80006ec:	200000ec 	.word	0x200000ec
 80006f0:	08006d14 	.word	0x08006d14
 80006f4:	08000799 	.word	0x08000799
 80006f8:	200000f4 	.word	0x200000f4
 80006fc:	08006d20 	.word	0x08006d20
 8000700:	08000779 	.word	0x08000779
 8000704:	200000f8 	.word	0x200000f8
 8000708:	08006d64 	.word	0x08006d64
 800070c:	20000104 	.word	0x20000104

08000710 <Timer1_Callback>:

  }
}

void Timer1_Callback(void *arg)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	Timer_1_TaskProfiler++;
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <Timer1_Callback+0x20>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	4a04      	ldr	r2, [pc, #16]	; (8000730 <Timer1_Callback+0x20>)
 8000720:	6013      	str	r3, [r2, #0]
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	200000e4 	.word	0x200000e4

08000734 <Timer2_Callback>:

void Timer2_Callback(void *arg)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	Timer_2_TaskProfiler++;
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <Timer2_Callback+0x20>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <Timer2_Callback+0x20>)
 8000744:	6013      	str	r3, [r2, #0]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	200000e8 	.word	0x200000e8

08000758 <vGreenLedControllerTask>:

void vGreenLedControllerTask(void *pvParameters)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Green_TaskProfiler++;
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <vGreenLedControllerTask+0x1c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	4a03      	ldr	r2, [pc, #12]	; (8000774 <vGreenLedControllerTask+0x1c>)
 8000768:	6013      	str	r3, [r2, #0]
		osDelay(100);
 800076a:	2064      	movs	r0, #100	; 0x64
 800076c:	f002 fb0a 	bl	8002d84 <osDelay>
		Green_TaskProfiler++;
 8000770:	e7f6      	b.n	8000760 <vGreenLedControllerTask+0x8>
 8000772:	bf00      	nop
 8000774:	200000dc 	.word	0x200000dc

08000778 <vOrangeLedControllerTask>:
	}
}

void vOrangeLedControllerTask(void *pvParameters)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Orange_TaskProfiler++;
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <vOrangeLedControllerTask+0x1c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	4a03      	ldr	r2, [pc, #12]	; (8000794 <vOrangeLedControllerTask+0x1c>)
 8000788:	6013      	str	r3, [r2, #0]
		osDelay(100);
 800078a:	2064      	movs	r0, #100	; 0x64
 800078c:	f002 fafa 	bl	8002d84 <osDelay>
		Orange_TaskProfiler++;
 8000790:	e7f6      	b.n	8000780 <vOrangeLedControllerTask+0x8>
 8000792:	bf00      	nop
 8000794:	200000d4 	.word	0x200000d4

08000798 <vBlueLedControllerTask>:
	}
}

int32_t rcv_msg[1];
void vBlueLedControllerTask(void *pvParameters)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

	osTimerStart(timer_1_id, 5000);
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <vBlueLedControllerTask+0x54>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f241 3188 	movw	r1, #5000	; 0x1388
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 fb97 	bl	8002edc <osTimerStart>
	osTimerStart(timer_2_id, 1000);
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <vBlueLedControllerTask+0x58>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 fb90 	bl	8002edc <osTimerStart>

	while(1)
	{
		Blue_TaskProfiler++;
 80007bc:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <vBlueLedControllerTask+0x5c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <vBlueLedControllerTask+0x5c>)
 80007c4:	6013      	str	r3, [r2, #0]
		osMessageQueueGet(msg_queue_id, &rcv_msg, NULL, osWaitForever);
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <vBlueLedControllerTask+0x60>)
 80007c8:	6818      	ldr	r0, [r3, #0]
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	2200      	movs	r2, #0
 80007d0:	490a      	ldr	r1, [pc, #40]	; (80007fc <vBlueLedControllerTask+0x64>)
 80007d2:	f002 fc85 	bl	80030e0 <osMessageQueueGet>
		printf("The message received is : %d \r\n", (int)rcv_msg[0]);
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <vBlueLedControllerTask+0x64>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	4808      	ldr	r0, [pc, #32]	; (8000800 <vBlueLedControllerTask+0x68>)
 80007de:	f005 faed 	bl	8005dbc <iprintf>

		osDelay(100);
 80007e2:	2064      	movs	r0, #100	; 0x64
 80007e4:	f002 face 	bl	8002d84 <osDelay>
		Blue_TaskProfiler++;
 80007e8:	e7e8      	b.n	80007bc <vBlueLedControllerTask+0x24>
 80007ea:	bf00      	nop
 80007ec:	200000fc 	.word	0x200000fc
 80007f0:	20000100 	.word	0x20000100
 80007f4:	200000e0 	.word	0x200000e0
 80007f8:	20000104 	.word	0x20000104
 80007fc:	20000108 	.word	0x20000108
 8000800:	08006d2c 	.word	0x08006d2c

08000804 <vRedLedControllerTask>:
	}
}

void vRedLedControllerTask(void *pvParameters)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	uint16_t valueToSend[1] = {2050};
 800080c:	f640 0302 	movw	r3, #2050	; 0x802
 8000810:	81bb      	strh	r3, [r7, #12]
	while(1)
	{
		Red_TaskProfiler++;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <vRedLedControllerTask+0x30>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a06      	ldr	r2, [pc, #24]	; (8000834 <vRedLedControllerTask+0x30>)
 800081a:	6013      	str	r3, [r2, #0]
		osMessageQueuePut(msg_queue_id, &valueToSend, 0, 0);
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <vRedLedControllerTask+0x34>)
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	f107 010c 	add.w	r1, r7, #12
 8000824:	2300      	movs	r3, #0
 8000826:	2200      	movs	r2, #0
 8000828:	f002 fbfa 	bl	8003020 <osMessageQueuePut>

		osDelay(100);
 800082c:	2064      	movs	r0, #100	; 0x64
 800082e:	f002 faa9 	bl	8002d84 <osDelay>
		Red_TaskProfiler++;
 8000832:	e7ee      	b.n	8000812 <vRedLedControllerTask+0xe>
 8000834:	200000d8 	.word	0x200000d8
 8000838:	20000104 	.word	0x20000104

0800083c <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	; 0x50
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2234      	movs	r2, #52	; 0x34
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f005 faae 	bl	8005dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <SystemClock_Config+0xd4>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	4a29      	ldr	r2, [pc, #164]	; (8000910 <SystemClock_Config+0xd4>)
 800086a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086e:	6413      	str	r3, [r2, #64]	; 0x40
 8000870:	4b27      	ldr	r3, [pc, #156]	; (8000910 <SystemClock_Config+0xd4>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <SystemClock_Config+0xd8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000888:	4a22      	ldr	r2, [pc, #136]	; (8000914 <SystemClock_Config+0xd8>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b20      	ldr	r3, [pc, #128]	; (8000914 <SystemClock_Config+0xd8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089c:	2302      	movs	r3, #2
 800089e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a0:	2301      	movs	r3, #1
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a4:	2310      	movs	r3, #16
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a8:	2302      	movs	r3, #2
 80008aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ac:	2300      	movs	r3, #0
 80008ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008b0:	2310      	movs	r3, #16
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ba:	2304      	movs	r3, #4
 80008bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 f92c 	bl	8001b28 <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008d6:	f000 f8ed 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2302      	movs	r3, #2
 80008e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	2102      	movs	r1, #2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fd9a 	bl	8001430 <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000902:	f000 f8d7 	bl	8000ab4 <Error_Handler>
  }
}
 8000906:	bf00      	nop
 8000908:	3750      	adds	r7, #80	; 0x50
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000

08000918 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MX_USART2_UART_Init+0x50>)
 8000920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000950:	f001 fe36 	bl	80025c0 <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800095a:	f000 f8ab 	bl	8000ab4 <Error_Handler>
  }

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000090 	.word	0x20000090
 8000968:	40004400 	.word	0x40004400

0800096c <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <MX_GPIO_Init+0xd0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a2c      	ldr	r2, [pc, #176]	; (8000a3c <MX_GPIO_Init+0xd0>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <MX_GPIO_Init+0xd0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a25      	ldr	r2, [pc, #148]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a1e      	ldr	r2, [pc, #120]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2120      	movs	r1, #32
 80009f6:	4812      	ldr	r0, [pc, #72]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009f8:	f000 fd00 	bl	80013fc <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = B1_Pin;
 80009fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	480c      	ldr	r0, [pc, #48]	; (8000a44 <MX_GPIO_Init+0xd8>)
 8000a14:	f000 fb5e 	bl	80010d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD2_Pin;
 8000a18:	2320      	movs	r3, #32
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_GPIO_Init+0xd4>)
 8000a30:	f000 fb50 	bl	80010d4 <HAL_GPIO_Init>

}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	; 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020800 	.word	0x40020800

08000a48 <USART2_write>:


int USART2_write(int ch)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & 0x0080))
 8000a50:	e003      	b.n	8000a5a <USART2_write+0x12>
	{
		USART2->DR = (ch & 0xFF);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <USART2_write+0x2c>)
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & 0x0080))
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <USART2_write+0x2c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d0f5      	beq.n	8000a52 <USART2_write+0xa>
	}
	return ch;
 8000a66:	687b      	ldr	r3, [r7, #4]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	40004400 	.word	0x40004400

08000a78 <__io_putchar>:

int __io_putchar(int ch)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
	USART2_write(ch);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ffe1 	bl	8000a48 <USART2_write>
	return ch;
 8000a86:	687b      	ldr	r3, [r7, #4]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d101      	bne.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aa2:	f000 fa15 	bl	8000ed0 <HAL_IncTick>
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40010000 	.word	0x40010000

08000ab4 <Error_Handler>:

void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_MspInit+0x54>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a11      	ldr	r2, [pc, #68]	; (8000b14 <HAL_MspInit+0x54>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_MspInit+0x54>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_MspInit+0x54>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_MspInit+0x54>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_MspInit+0x54>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	210f      	movs	r1, #15
 8000b02:	f06f 0001 	mvn.w	r0, #1
 8000b06:	f000 fabb 	bl	8001080 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a19      	ldr	r2, [pc, #100]	; (8000b9c <HAL_UART_MspInit+0x84>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d12b      	bne.n	8000b92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b72:	230c      	movs	r3, #12
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b82:	2307      	movs	r3, #7
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <HAL_UART_MspInit+0x8c>)
 8000b8e:	f000 faa1 	bl	80010d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40004400 	.word	0x40004400
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	; 0x30
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <HAL_InitTick+0xd0>)
 8000bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc0:	4a2d      	ldr	r2, [pc, #180]	; (8000c78 <HAL_InitTick+0xd0>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <HAL_InitTick+0xd0>)
 8000bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd4:	f107 020c 	add.w	r2, r7, #12
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 fd40 	bl	8001664 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000be4:	f000 fd2a 	bl	800163c <HAL_RCC_GetPCLK2Freq>
 8000be8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bec:	4a23      	ldr	r2, [pc, #140]	; (8000c7c <HAL_InitTick+0xd4>)
 8000bee:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf2:	0c9b      	lsrs	r3, r3, #18
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bf8:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <HAL_InitTick+0xd8>)
 8000bfa:	4a22      	ldr	r2, [pc, #136]	; (8000c84 <HAL_InitTick+0xdc>)
 8000bfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bfe:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <HAL_InitTick+0xd8>)
 8000c00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c06:	4a1e      	ldr	r2, [pc, #120]	; (8000c80 <HAL_InitTick+0xd8>)
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <HAL_InitTick+0xd8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <HAL_InitTick+0xd8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <HAL_InitTick+0xd8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c1e:	4818      	ldr	r0, [pc, #96]	; (8000c80 <HAL_InitTick+0xd8>)
 8000c20:	f001 fa20 	bl	8002064 <HAL_TIM_Base_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d11b      	bne.n	8000c6a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c32:	4813      	ldr	r0, [pc, #76]	; (8000c80 <HAL_InitTick+0xd8>)
 8000c34:	f001 fa70 	bl	8002118 <HAL_TIM_Base_Start_IT>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d111      	bne.n	8000c6a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c46:	2019      	movs	r0, #25
 8000c48:	f000 fa36 	bl	80010b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b0f      	cmp	r3, #15
 8000c50:	d808      	bhi.n	8000c64 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c52:	2200      	movs	r2, #0
 8000c54:	6879      	ldr	r1, [r7, #4]
 8000c56:	2019      	movs	r0, #25
 8000c58:	f000 fa12 	bl	8001080 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_InitTick+0xe0>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	e002      	b.n	8000c6a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3730      	adds	r7, #48	; 0x30
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	431bde83 	.word	0x431bde83
 8000c80:	2000010c 	.word	0x2000010c
 8000c84:	40010000 	.word	0x40010000
 8000c88:	20000004 	.word	0x20000004

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cbe:	f001 fa9b 	bl	80021f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2000010c 	.word	0x2000010c

08000ccc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	e00a      	b.n	8000cf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cde:	f3af 8000 	nop.w
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	60ba      	str	r2, [r7, #8]
 8000cea:	b2ca      	uxtb	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dbf0      	blt.n	8000cde <_read+0x12>
  }

  return len;
 8000cfc:	687b      	ldr	r3, [r7, #4]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	e009      	b.n	8000d2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	60ba      	str	r2, [r7, #8]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fea9 	bl	8000a78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbf1      	blt.n	8000d18 <_write+0x12>
  }
  return len;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <_close>:

int _close(int file)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d66:	605a      	str	r2, [r3, #4]
  return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <_isatty>:

int _isatty(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f004 ffb0 	bl	8005d3c <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20020000 	.word	0x20020000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	20000154 	.word	0x20000154
 8000e10:	20004ac0 	.word	0x20004ac0

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e3e:	490e      	ldr	r1, [pc, #56]	; (8000e78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e40:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e54:	4c0b      	ldr	r4, [pc, #44]	; (8000e84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e62:	f7ff ffd7 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e66:	f004 ff6f 	bl	8005d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6a:	f7ff fba3 	bl	80005b4 <main>
  bx  lr    
 8000e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e7c:	08006e3c 	.word	0x08006e3c
  ldr r2, =_sbss
 8000e80:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e84:	20004abc 	.word	0x20004abc

08000e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_Init+0x40>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_Init+0x40>)
 8000ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_Init+0x40>)
 8000eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f8d8 	bl	800106a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	200f      	movs	r0, #15
 8000ebc:	f7ff fe74 	bl	8000ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff fdfe 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023c00 	.word	0x40023c00

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000158 	.word	0x20000158

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000158 	.word	0x20000158

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db0b      	blt.n	8000f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 021f 	and.w	r2, r3, #31
 8000f8c:	4907      	ldr	r1, [pc, #28]	; (8000fac <__NVIC_EnableIRQ+0x38>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	2001      	movs	r0, #1
 8000f96:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100

08000fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	db0a      	blt.n	8000fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	490c      	ldr	r1, [pc, #48]	; (8000ffc <__NVIC_SetPriority+0x4c>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd8:	e00a      	b.n	8000ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4908      	ldr	r1, [pc, #32]	; (8001000 <__NVIC_SetPriority+0x50>)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	3b04      	subs	r3, #4
 8000fe8:	0112      	lsls	r2, r2, #4
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	440b      	add	r3, r1
 8000fee:	761a      	strb	r2, [r3, #24]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f1c3 0307 	rsb	r3, r3, #7
 800101e:	2b04      	cmp	r3, #4
 8001020:	bf28      	it	cs
 8001022:	2304      	movcs	r3, #4
 8001024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3304      	adds	r3, #4
 800102a:	2b06      	cmp	r3, #6
 800102c:	d902      	bls.n	8001034 <NVIC_EncodePriority+0x30>
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3b03      	subs	r3, #3
 8001032:	e000      	b.n	8001036 <NVIC_EncodePriority+0x32>
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	f04f 32ff 	mov.w	r2, #4294967295
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800104c:	f04f 31ff 	mov.w	r1, #4294967295
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	43d9      	mvns	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	4313      	orrs	r3, r2
         );
}
 800105e:	4618      	mov	r0, r3
 8001060:	3724      	adds	r7, #36	; 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ff4c 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001092:	f7ff ff61 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 8001096:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	68b9      	ldr	r1, [r7, #8]
 800109c:	6978      	ldr	r0, [r7, #20]
 800109e:	f7ff ffb1 	bl	8001004 <NVIC_EncodePriority>
 80010a2:	4602      	mov	r2, r0
 80010a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff80 	bl	8000fb0 <__NVIC_SetPriority>
}
 80010b0:	bf00      	nop
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff54 	bl	8000f74 <__NVIC_EnableIRQ>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
 80010ee:	e165      	b.n	80013bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	429a      	cmp	r2, r3
 800110a:	f040 8154 	bne.w	80013b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	2b01      	cmp	r3, #1
 8001118:	d005      	beq.n	8001126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001122:	2b02      	cmp	r3, #2
 8001124:	d130      	bne.n	8001188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	f003 0201 	and.w	r2, r3, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b03      	cmp	r3, #3
 8001192:	d017      	beq.n	80011c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d123      	bne.n	8001218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	08da      	lsrs	r2, r3, #3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3208      	adds	r2, #8
 80011d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	220f      	movs	r2, #15
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	691a      	ldr	r2, [r3, #16]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	69b9      	ldr	r1, [r7, #24]
 8001214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0203 	and.w	r2, r3, #3
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80ae 	beq.w	80013b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b5d      	ldr	r3, [pc, #372]	; (80013d4 <HAL_GPIO_Init+0x300>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a5c      	ldr	r2, [pc, #368]	; (80013d4 <HAL_GPIO_Init+0x300>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b5a      	ldr	r3, [pc, #360]	; (80013d4 <HAL_GPIO_Init+0x300>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001276:	4a58      	ldr	r2, [pc, #352]	; (80013d8 <HAL_GPIO_Init+0x304>)
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	220f      	movs	r2, #15
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4f      	ldr	r2, [pc, #316]	; (80013dc <HAL_GPIO_Init+0x308>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d025      	beq.n	80012ee <HAL_GPIO_Init+0x21a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4e      	ldr	r2, [pc, #312]	; (80013e0 <HAL_GPIO_Init+0x30c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01f      	beq.n	80012ea <HAL_GPIO_Init+0x216>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4d      	ldr	r2, [pc, #308]	; (80013e4 <HAL_GPIO_Init+0x310>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x212>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4c      	ldr	r2, [pc, #304]	; (80013e8 <HAL_GPIO_Init+0x314>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x20e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4b      	ldr	r2, [pc, #300]	; (80013ec <HAL_GPIO_Init+0x318>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x20a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4a      	ldr	r2, [pc, #296]	; (80013f0 <HAL_GPIO_Init+0x31c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x206>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a49      	ldr	r2, [pc, #292]	; (80013f4 <HAL_GPIO_Init+0x320>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x202>
 80012d2:	2306      	movs	r3, #6
 80012d4:	e00c      	b.n	80012f0 <HAL_GPIO_Init+0x21c>
 80012d6:	2307      	movs	r3, #7
 80012d8:	e00a      	b.n	80012f0 <HAL_GPIO_Init+0x21c>
 80012da:	2305      	movs	r3, #5
 80012dc:	e008      	b.n	80012f0 <HAL_GPIO_Init+0x21c>
 80012de:	2304      	movs	r3, #4
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x21c>
 80012e2:	2303      	movs	r3, #3
 80012e4:	e004      	b.n	80012f0 <HAL_GPIO_Init+0x21c>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_Init+0x21c>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x21c>
 80012ee:	2300      	movs	r3, #0
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	f002 0203 	and.w	r2, r2, #3
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	4093      	lsls	r3, r2
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001300:	4935      	ldr	r1, [pc, #212]	; (80013d8 <HAL_GPIO_Init+0x304>)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130e:	4b3a      	ldr	r3, [pc, #232]	; (80013f8 <HAL_GPIO_Init+0x324>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001332:	4a31      	ldr	r2, [pc, #196]	; (80013f8 <HAL_GPIO_Init+0x324>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001338:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <HAL_GPIO_Init+0x324>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800135c:	4a26      	ldr	r2, [pc, #152]	; (80013f8 <HAL_GPIO_Init+0x324>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001362:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <HAL_GPIO_Init+0x324>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001386:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <HAL_GPIO_Init+0x324>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <HAL_GPIO_Init+0x324>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b0:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <HAL_GPIO_Init+0x324>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3301      	adds	r3, #1
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	f67f ae96 	bls.w	80010f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3724      	adds	r7, #36	; 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40013800 	.word	0x40013800
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40020800 	.word	0x40020800
 80013e8:	40020c00 	.word	0x40020c00
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40021400 	.word	0x40021400
 80013f4:	40021800 	.word	0x40021800
 80013f8:	40013c00 	.word	0x40013c00

080013fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
 8001408:	4613      	mov	r3, r2
 800140a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800140c:	787b      	ldrb	r3, [r7, #1]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001418:	e003      	b.n	8001422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800141a:	887b      	ldrh	r3, [r7, #2]
 800141c:	041a      	lsls	r2, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	619a      	str	r2, [r3, #24]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0cc      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001444:	4b68      	ldr	r3, [pc, #416]	; (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 030f 	and.w	r3, r3, #15
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d90c      	bls.n	800146c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001452:	4b65      	ldr	r3, [pc, #404]	; (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800145a:	4b63      	ldr	r3, [pc, #396]	; (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d001      	beq.n	800146c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0b8      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d020      	beq.n	80014ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001484:	4b59      	ldr	r3, [pc, #356]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	4a58      	ldr	r2, [pc, #352]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800148e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800149c:	4b53      	ldr	r3, [pc, #332]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	4a52      	ldr	r2, [pc, #328]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a8:	4b50      	ldr	r3, [pc, #320]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	494d      	ldr	r1, [pc, #308]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d044      	beq.n	8001550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ce:	4b47      	ldr	r3, [pc, #284]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d119      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e07f      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d003      	beq.n	80014ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d107      	bne.n	80014fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ee:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e06f      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fe:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e067      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800150e:	4b37      	ldr	r3, [pc, #220]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f023 0203 	bic.w	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4934      	ldr	r1, [pc, #208]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	4313      	orrs	r3, r2
 800151e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001520:	f7ff fcea 	bl	8000ef8 <HAL_GetTick>
 8001524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001526:	e00a      	b.n	800153e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001528:	f7ff fce6 	bl	8000ef8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f241 3288 	movw	r2, #5000	; 0x1388
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e04f      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 020c 	and.w	r2, r3, #12
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	429a      	cmp	r2, r3
 800154e:	d1eb      	bne.n	8001528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d20c      	bcs.n	8001578 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e032      	b.n	80015de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4916      	ldr	r1, [pc, #88]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	4313      	orrs	r3, r2
 8001594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d009      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	490e      	ldr	r1, [pc, #56]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015b6:	f000 f887 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 80015ba:	4602      	mov	r2, r0
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	490a      	ldr	r1, [pc, #40]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	5ccb      	ldrb	r3, [r1, r3]
 80015ca:	fa22 f303 	lsr.w	r3, r2, r3
 80015ce:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80015d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_RCC_ClockConfig+0x1c8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fae6 	bl	8000ba8 <HAL_InitTick>

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023c00 	.word	0x40023c00
 80015ec:	40023800 	.word	0x40023800
 80015f0:	08006d7c 	.word	0x08006d7c
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000004 	.word	0x20000004

080015fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <HAL_RCC_GetHCLKFreq+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000000 	.word	0x20000000

08001614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001618:	f7ff fff0 	bl	80015fc <HAL_RCC_GetHCLKFreq>
 800161c:	4602      	mov	r2, r0
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	0a9b      	lsrs	r3, r3, #10
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	4903      	ldr	r1, [pc, #12]	; (8001638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800162a:	5ccb      	ldrb	r3, [r1, r3]
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	08006d8c 	.word	0x08006d8c

0800163c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001640:	f7ff ffdc 	bl	80015fc <HAL_RCC_GetHCLKFreq>
 8001644:	4602      	mov	r2, r0
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	0b5b      	lsrs	r3, r3, #13
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	4903      	ldr	r1, [pc, #12]	; (8001660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001652:	5ccb      	ldrb	r3, [r1, r3]
 8001654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001658:	4618      	mov	r0, r3
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40023800 	.word	0x40023800
 8001660:	08006d8c 	.word	0x08006d8c

08001664 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	220f      	movs	r2, #15
 8001672:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_RCC_GetClockConfig+0x5c>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 0203 	and.w	r2, r3, #3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_RCC_GetClockConfig+0x5c>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_RCC_GetClockConfig+0x5c>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_RCC_GetClockConfig+0x5c>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	08db      	lsrs	r3, r3, #3
 800169e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <HAL_RCC_GetClockConfig+0x60>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 020f 	and.w	r2, r3, #15
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	601a      	str	r2, [r3, #0]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40023c00 	.word	0x40023c00

080016c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016cc:	b0ae      	sub	sp, #184	; 0xb8
 80016ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ee:	4bcb      	ldr	r3, [pc, #812]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	f200 8206 	bhi.w	8001b08 <HAL_RCC_GetSysClockFreq+0x440>
 80016fc:	a201      	add	r2, pc, #4	; (adr r2, 8001704 <HAL_RCC_GetSysClockFreq+0x3c>)
 80016fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001702:	bf00      	nop
 8001704:	08001739 	.word	0x08001739
 8001708:	08001b09 	.word	0x08001b09
 800170c:	08001b09 	.word	0x08001b09
 8001710:	08001b09 	.word	0x08001b09
 8001714:	08001741 	.word	0x08001741
 8001718:	08001b09 	.word	0x08001b09
 800171c:	08001b09 	.word	0x08001b09
 8001720:	08001b09 	.word	0x08001b09
 8001724:	08001749 	.word	0x08001749
 8001728:	08001b09 	.word	0x08001b09
 800172c:	08001b09 	.word	0x08001b09
 8001730:	08001b09 	.word	0x08001b09
 8001734:	08001939 	.word	0x08001939
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001738:	4bb9      	ldr	r3, [pc, #740]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x358>)
 800173a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800173e:	e1e7      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001740:	4bb8      	ldr	r3, [pc, #736]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001742:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001746:	e1e3      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001748:	4bb4      	ldr	r3, [pc, #720]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001754:	4bb1      	ldr	r3, [pc, #708]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d071      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001760:	4bae      	ldr	r3, [pc, #696]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	099b      	lsrs	r3, r3, #6
 8001766:	2200      	movs	r2, #0
 8001768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800176c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001770:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001778:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001782:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001786:	4622      	mov	r2, r4
 8001788:	462b      	mov	r3, r5
 800178a:	f04f 0000 	mov.w	r0, #0
 800178e:	f04f 0100 	mov.w	r1, #0
 8001792:	0159      	lsls	r1, r3, #5
 8001794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001798:	0150      	lsls	r0, r2, #5
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4621      	mov	r1, r4
 80017a0:	1a51      	subs	r1, r2, r1
 80017a2:	6439      	str	r1, [r7, #64]	; 0x40
 80017a4:	4629      	mov	r1, r5
 80017a6:	eb63 0301 	sbc.w	r3, r3, r1
 80017aa:	647b      	str	r3, [r7, #68]	; 0x44
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80017b8:	4649      	mov	r1, r9
 80017ba:	018b      	lsls	r3, r1, #6
 80017bc:	4641      	mov	r1, r8
 80017be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017c2:	4641      	mov	r1, r8
 80017c4:	018a      	lsls	r2, r1, #6
 80017c6:	4641      	mov	r1, r8
 80017c8:	1a51      	subs	r1, r2, r1
 80017ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80017cc:	4649      	mov	r1, r9
 80017ce:	eb63 0301 	sbc.w	r3, r3, r1
 80017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80017e0:	4649      	mov	r1, r9
 80017e2:	00cb      	lsls	r3, r1, #3
 80017e4:	4641      	mov	r1, r8
 80017e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017ea:	4641      	mov	r1, r8
 80017ec:	00ca      	lsls	r2, r1, #3
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	4603      	mov	r3, r0
 80017f4:	4622      	mov	r2, r4
 80017f6:	189b      	adds	r3, r3, r2
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
 80017fa:	462b      	mov	r3, r5
 80017fc:	460a      	mov	r2, r1
 80017fe:	eb42 0303 	adc.w	r3, r2, r3
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001810:	4629      	mov	r1, r5
 8001812:	024b      	lsls	r3, r1, #9
 8001814:	4621      	mov	r1, r4
 8001816:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800181a:	4621      	mov	r1, r4
 800181c:	024a      	lsls	r2, r1, #9
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001826:	2200      	movs	r2, #0
 8001828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800182c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001830:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001834:	f7fe fd3c 	bl	80002b0 <__aeabi_uldivmod>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4613      	mov	r3, r2
 800183e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001842:	e067      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001844:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	2200      	movs	r2, #0
 800184c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001850:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001854:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800185c:	67bb      	str	r3, [r7, #120]	; 0x78
 800185e:	2300      	movs	r3, #0
 8001860:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001862:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001866:	4622      	mov	r2, r4
 8001868:	462b      	mov	r3, r5
 800186a:	f04f 0000 	mov.w	r0, #0
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	0159      	lsls	r1, r3, #5
 8001874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001878:	0150      	lsls	r0, r2, #5
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4621      	mov	r1, r4
 8001880:	1a51      	subs	r1, r2, r1
 8001882:	62b9      	str	r1, [r7, #40]	; 0x28
 8001884:	4629      	mov	r1, r5
 8001886:	eb63 0301 	sbc.w	r3, r3, r1
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001898:	4649      	mov	r1, r9
 800189a:	018b      	lsls	r3, r1, #6
 800189c:	4641      	mov	r1, r8
 800189e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018a2:	4641      	mov	r1, r8
 80018a4:	018a      	lsls	r2, r1, #6
 80018a6:	4641      	mov	r1, r8
 80018a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80018ac:	4649      	mov	r1, r9
 80018ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018c6:	4692      	mov	sl, r2
 80018c8:	469b      	mov	fp, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	eb1a 0303 	adds.w	r3, sl, r3
 80018d0:	623b      	str	r3, [r7, #32]
 80018d2:	462b      	mov	r3, r5
 80018d4:	eb4b 0303 	adc.w	r3, fp, r3
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018e6:	4629      	mov	r1, r5
 80018e8:	028b      	lsls	r3, r1, #10
 80018ea:	4621      	mov	r1, r4
 80018ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018f0:	4621      	mov	r1, r4
 80018f2:	028a      	lsls	r2, r1, #10
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018fc:	2200      	movs	r2, #0
 80018fe:	673b      	str	r3, [r7, #112]	; 0x70
 8001900:	677a      	str	r2, [r7, #116]	; 0x74
 8001902:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001906:	f7fe fcd3 	bl	80002b0 <__aeabi_uldivmod>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4613      	mov	r3, r2
 8001910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001914:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	0c1b      	lsrs	r3, r3, #16
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	3301      	adds	r3, #1
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800192a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001936:	e0eb      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001938:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001944:	4b35      	ldr	r3, [pc, #212]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d06b      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001950:	4b32      	ldr	r3, [pc, #200]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x354>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	099b      	lsrs	r3, r3, #6
 8001956:	2200      	movs	r2, #0
 8001958:	66bb      	str	r3, [r7, #104]	; 0x68
 800195a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800195c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800195e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001962:	663b      	str	r3, [r7, #96]	; 0x60
 8001964:	2300      	movs	r3, #0
 8001966:	667b      	str	r3, [r7, #100]	; 0x64
 8001968:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800196c:	4622      	mov	r2, r4
 800196e:	462b      	mov	r3, r5
 8001970:	f04f 0000 	mov.w	r0, #0
 8001974:	f04f 0100 	mov.w	r1, #0
 8001978:	0159      	lsls	r1, r3, #5
 800197a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800197e:	0150      	lsls	r0, r2, #5
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4621      	mov	r1, r4
 8001986:	1a51      	subs	r1, r2, r1
 8001988:	61b9      	str	r1, [r7, #24]
 800198a:	4629      	mov	r1, r5
 800198c:	eb63 0301 	sbc.w	r3, r3, r1
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800199e:	4659      	mov	r1, fp
 80019a0:	018b      	lsls	r3, r1, #6
 80019a2:	4651      	mov	r1, sl
 80019a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019a8:	4651      	mov	r1, sl
 80019aa:	018a      	lsls	r2, r1, #6
 80019ac:	4651      	mov	r1, sl
 80019ae:	ebb2 0801 	subs.w	r8, r2, r1
 80019b2:	4659      	mov	r1, fp
 80019b4:	eb63 0901 	sbc.w	r9, r3, r1
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019cc:	4690      	mov	r8, r2
 80019ce:	4699      	mov	r9, r3
 80019d0:	4623      	mov	r3, r4
 80019d2:	eb18 0303 	adds.w	r3, r8, r3
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	462b      	mov	r3, r5
 80019da:	eb49 0303 	adc.w	r3, r9, r3
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019ec:	4629      	mov	r1, r5
 80019ee:	024b      	lsls	r3, r1, #9
 80019f0:	4621      	mov	r1, r4
 80019f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019f6:	4621      	mov	r1, r4
 80019f8:	024a      	lsls	r2, r1, #9
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a02:	2200      	movs	r2, #0
 8001a04:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a06:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001a08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a0c:	f7fe fc50 	bl	80002b0 <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4613      	mov	r3, r2
 8001a16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a1a:	e065      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x420>
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	00f42400 	.word	0x00f42400
 8001a24:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a28:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	2200      	movs	r2, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	4611      	mov	r1, r2
 8001a34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a38:	653b      	str	r3, [r7, #80]	; 0x50
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	657b      	str	r3, [r7, #84]	; 0x54
 8001a3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a42:	4642      	mov	r2, r8
 8001a44:	464b      	mov	r3, r9
 8001a46:	f04f 0000 	mov.w	r0, #0
 8001a4a:	f04f 0100 	mov.w	r1, #0
 8001a4e:	0159      	lsls	r1, r3, #5
 8001a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a54:	0150      	lsls	r0, r2, #5
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4641      	mov	r1, r8
 8001a5c:	1a51      	subs	r1, r2, r1
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	4649      	mov	r1, r9
 8001a62:	eb63 0301 	sbc.w	r3, r3, r1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a74:	4659      	mov	r1, fp
 8001a76:	018b      	lsls	r3, r1, #6
 8001a78:	4651      	mov	r1, sl
 8001a7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a7e:	4651      	mov	r1, sl
 8001a80:	018a      	lsls	r2, r1, #6
 8001a82:	4651      	mov	r1, sl
 8001a84:	1a54      	subs	r4, r2, r1
 8001a86:	4659      	mov	r1, fp
 8001a88:	eb63 0501 	sbc.w	r5, r3, r1
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	00eb      	lsls	r3, r5, #3
 8001a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a9a:	00e2      	lsls	r2, r4, #3
 8001a9c:	4614      	mov	r4, r2
 8001a9e:	461d      	mov	r5, r3
 8001aa0:	4643      	mov	r3, r8
 8001aa2:	18e3      	adds	r3, r4, r3
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	464b      	mov	r3, r9
 8001aa8:	eb45 0303 	adc.w	r3, r5, r3
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aba:	4629      	mov	r1, r5
 8001abc:	028b      	lsls	r3, r1, #10
 8001abe:	4621      	mov	r1, r4
 8001ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	028a      	lsls	r2, r1, #10
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ad4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ad6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ada:	f7fe fbe9 	bl	80002b0 <__aeabi_uldivmod>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x458>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	0f1b      	lsrs	r3, r3, #28
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001af6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001afa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b06:	e003      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	37b8      	adds	r7, #184	; 0xb8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	00f42400 	.word	0x00f42400

08001b28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e28d      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8083 	beq.w	8001c4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b48:	4b94      	ldr	r3, [pc, #592]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d019      	beq.n	8001b88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b54:	4b91      	ldr	r3, [pc, #580]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d106      	bne.n	8001b6e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b60:	4b8e      	ldr	r3, [pc, #568]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b6c:	d00c      	beq.n	8001b88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b6e:	4b8b      	ldr	r3, [pc, #556]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d112      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7a:	4b88      	ldr	r3, [pc, #544]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b86:	d10b      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	4b84      	ldr	r3, [pc, #528]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d05b      	beq.n	8001c4c <HAL_RCC_OscConfig+0x124>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d157      	bne.n	8001c4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e25a      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba8:	d106      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x90>
 8001baa:	4b7c      	ldr	r3, [pc, #496]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a7b      	ldr	r2, [pc, #492]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e01d      	b.n	8001bf4 <HAL_RCC_OscConfig+0xcc>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0xb4>
 8001bc2:	4b76      	ldr	r3, [pc, #472]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a75      	ldr	r2, [pc, #468]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b73      	ldr	r3, [pc, #460]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a72      	ldr	r2, [pc, #456]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0xcc>
 8001bdc:	4b6f      	ldr	r3, [pc, #444]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a6e      	ldr	r2, [pc, #440]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b6c      	ldr	r3, [pc, #432]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a6b      	ldr	r2, [pc, #428]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff f97c 	bl	8000ef8 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff f978 	bl	8000ef8 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e21f      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	4b61      	ldr	r3, [pc, #388]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0xdc>
 8001c22:	e014      	b.n	8001c4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff f968 	bl	8000ef8 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff f964 	bl	8000ef8 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e20b      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x104>
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d06f      	beq.n	8001d3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c5a:	4b50      	ldr	r3, [pc, #320]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d017      	beq.n	8001c96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c66:	4b4d      	ldr	r3, [pc, #308]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d105      	bne.n	8001c7e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c72:	4b4a      	ldr	r3, [pc, #296]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7e:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c86:	2b0c      	cmp	r3, #12
 8001c88:	d11c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d116      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	4b41      	ldr	r3, [pc, #260]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_RCC_OscConfig+0x186>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e1d3      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cae:	4b3b      	ldr	r3, [pc, #236]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4937      	ldr	r1, [pc, #220]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	e03a      	b.n	8001d3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d020      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ccc:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <HAL_RCC_OscConfig+0x278>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd2:	f7ff f911 	bl	8000ef8 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cda:	f7ff f90d 	bl	8000ef8 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e1b4      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cec:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf8:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4925      	ldr	r1, [pc, #148]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
 8001d0c:	e015      	b.n	8001d3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0e:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_RCC_OscConfig+0x278>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff f8f0 	bl	8000ef8 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1c:	f7ff f8ec 	bl	8000ef8 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e193      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d036      	beq.n	8001db4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d016      	beq.n	8001d7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7ff f8d0 	bl	8000ef8 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7ff f8cc 	bl	8000ef8 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e173      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x234>
 8001d7a:	e01b      	b.n	8001db4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d82:	f7ff f8b9 	bl	8000ef8 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	e00e      	b.n	8001da8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d8a:	f7ff f8b5 	bl	8000ef8 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d907      	bls.n	8001da8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e15c      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	42470000 	.word	0x42470000
 8001da4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da8:	4b8a      	ldr	r3, [pc, #552]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1ea      	bne.n	8001d8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 8097 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc6:	4b83      	ldr	r3, [pc, #524]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10f      	bne.n	8001df2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	4b7f      	ldr	r3, [pc, #508]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a7e      	ldr	r2, [pc, #504]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b7c      	ldr	r3, [pc, #496]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dee:	2301      	movs	r3, #1
 8001df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df2:	4b79      	ldr	r3, [pc, #484]	; (8001fd8 <HAL_RCC_OscConfig+0x4b0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d118      	bne.n	8001e30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfe:	4b76      	ldr	r3, [pc, #472]	; (8001fd8 <HAL_RCC_OscConfig+0x4b0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a75      	ldr	r2, [pc, #468]	; (8001fd8 <HAL_RCC_OscConfig+0x4b0>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff f875 	bl	8000ef8 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e12:	f7ff f871 	bl	8000ef8 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e118      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	4b6c      	ldr	r3, [pc, #432]	; (8001fd8 <HAL_RCC_OscConfig+0x4b0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x31e>
 8001e38:	4b66      	ldr	r3, [pc, #408]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3c:	4a65      	ldr	r2, [pc, #404]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6713      	str	r3, [r2, #112]	; 0x70
 8001e44:	e01c      	b.n	8001e80 <HAL_RCC_OscConfig+0x358>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b05      	cmp	r3, #5
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x340>
 8001e4e:	4b61      	ldr	r3, [pc, #388]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e52:	4a60      	ldr	r2, [pc, #384]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5a:	4b5e      	ldr	r3, [pc, #376]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	4a5d      	ldr	r2, [pc, #372]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6713      	str	r3, [r2, #112]	; 0x70
 8001e66:	e00b      	b.n	8001e80 <HAL_RCC_OscConfig+0x358>
 8001e68:	4b5a      	ldr	r3, [pc, #360]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	4a59      	ldr	r2, [pc, #356]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e6e:	f023 0301 	bic.w	r3, r3, #1
 8001e72:	6713      	str	r3, [r2, #112]	; 0x70
 8001e74:	4b57      	ldr	r3, [pc, #348]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e78:	4a56      	ldr	r2, [pc, #344]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001e7a:	f023 0304 	bic.w	r3, r3, #4
 8001e7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d015      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e88:	f7ff f836 	bl	8000ef8 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e90:	f7ff f832 	bl	8000ef8 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e0d7      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea6:	4b4b      	ldr	r3, [pc, #300]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0ee      	beq.n	8001e90 <HAL_RCC_OscConfig+0x368>
 8001eb2:	e014      	b.n	8001ede <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb4:	f7ff f820 	bl	8000ef8 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f7ff f81c 	bl	8000ef8 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e0c1      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed2:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1ee      	bne.n	8001ebc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee4:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	4a3a      	ldr	r2, [pc, #232]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80ad 	beq.w	8002054 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001efa:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d060      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d145      	bne.n	8001f9a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0e:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <HAL_RCC_OscConfig+0x4b4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7fe fff0 	bl	8000ef8 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7fe ffec 	bl	8000ef8 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e093      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	019b      	lsls	r3, r3, #6
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	085b      	lsrs	r3, r3, #1
 8001f52:	3b01      	subs	r3, #1
 8001f54:	041b      	lsls	r3, r3, #16
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	061b      	lsls	r3, r3, #24
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	071b      	lsls	r3, r3, #28
 8001f66:	491b      	ldr	r1, [pc, #108]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_RCC_OscConfig+0x4b4>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7fe ffc1 	bl	8000ef8 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7a:	f7fe ffbd 	bl	8000ef8 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e064      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x452>
 8001f98:	e05c      	b.n	8002054 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_RCC_OscConfig+0x4b4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7fe ffaa 	bl	8000ef8 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7fe ffa6 	bl	8000ef8 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e04d      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_RCC_OscConfig+0x4ac>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x480>
 8001fc6:	e045      	b.n	8002054 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d107      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e040      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40007000 	.word	0x40007000
 8001fdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <HAL_RCC_OscConfig+0x538>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d030      	beq.n	8002050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d129      	bne.n	8002050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d122      	bne.n	8002050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002010:	4013      	ands	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002016:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002018:	4293      	cmp	r3, r2
 800201a:	d119      	bne.n	8002050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	3b01      	subs	r3, #1
 800202a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800202c:	429a      	cmp	r2, r3
 800202e:	d10f      	bne.n	8002050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d107      	bne.n	8002050 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e041      	b.n	80020fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d106      	bne.n	8002090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f839 	bl	8002102 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3304      	adds	r3, #4
 80020a0:	4619      	mov	r1, r3
 80020a2:	4610      	mov	r0, r2
 80020a4:	f000 f9d8 	bl	8002458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b01      	cmp	r3, #1
 800212a:	d001      	beq.n	8002130 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e04e      	b.n	80021ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a23      	ldr	r2, [pc, #140]	; (80021dc <HAL_TIM_Base_Start_IT+0xc4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d022      	beq.n	8002198 <HAL_TIM_Base_Start_IT+0x80>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800215a:	d01d      	beq.n	8002198 <HAL_TIM_Base_Start_IT+0x80>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1f      	ldr	r2, [pc, #124]	; (80021e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d018      	beq.n	8002198 <HAL_TIM_Base_Start_IT+0x80>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1e      	ldr	r2, [pc, #120]	; (80021e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d013      	beq.n	8002198 <HAL_TIM_Base_Start_IT+0x80>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00e      	beq.n	8002198 <HAL_TIM_Base_Start_IT+0x80>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <HAL_TIM_Base_Start_IT+0xd4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d009      	beq.n	8002198 <HAL_TIM_Base_Start_IT+0x80>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a19      	ldr	r2, [pc, #100]	; (80021f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d004      	beq.n	8002198 <HAL_TIM_Base_Start_IT+0x80>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a18      	ldr	r2, [pc, #96]	; (80021f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d111      	bne.n	80021bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b06      	cmp	r3, #6
 80021a8:	d010      	beq.n	80021cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ba:	e007      	b.n	80021cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40010000 	.word	0x40010000
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40000800 	.word	0x40000800
 80021e8:	40000c00 	.word	0x40000c00
 80021ec:	40010400 	.word	0x40010400
 80021f0:	40014000 	.word	0x40014000
 80021f4:	40001800 	.word	0x40001800

080021f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b02      	cmp	r3, #2
 800220c:	d122      	bne.n	8002254 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b02      	cmp	r3, #2
 800221a:	d11b      	bne.n	8002254 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0202 	mvn.w	r2, #2
 8002224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f8ee 	bl	800241c <HAL_TIM_IC_CaptureCallback>
 8002240:	e005      	b.n	800224e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f8e0 	bl	8002408 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f8f1 	bl	8002430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b04      	cmp	r3, #4
 8002260:	d122      	bne.n	80022a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b04      	cmp	r3, #4
 800226e:	d11b      	bne.n	80022a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0204 	mvn.w	r2, #4
 8002278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2202      	movs	r2, #2
 800227e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f8c4 	bl	800241c <HAL_TIM_IC_CaptureCallback>
 8002294:	e005      	b.n	80022a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f8b6 	bl	8002408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f8c7 	bl	8002430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d122      	bne.n	80022fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d11b      	bne.n	80022fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0208 	mvn.w	r2, #8
 80022cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2204      	movs	r2, #4
 80022d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f89a 	bl	800241c <HAL_TIM_IC_CaptureCallback>
 80022e8:	e005      	b.n	80022f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f88c 	bl	8002408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f89d 	bl	8002430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b10      	cmp	r3, #16
 8002308:	d122      	bne.n	8002350 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b10      	cmp	r3, #16
 8002316:	d11b      	bne.n	8002350 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0210 	mvn.w	r2, #16
 8002320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2208      	movs	r2, #8
 8002326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f870 	bl	800241c <HAL_TIM_IC_CaptureCallback>
 800233c:	e005      	b.n	800234a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f862 	bl	8002408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f873 	bl	8002430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b01      	cmp	r3, #1
 800235c:	d10e      	bne.n	800237c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b01      	cmp	r3, #1
 800236a:	d107      	bne.n	800237c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0201 	mvn.w	r2, #1
 8002374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe fb8a 	bl	8000a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	2b80      	cmp	r3, #128	; 0x80
 8002388:	d10e      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002394:	2b80      	cmp	r3, #128	; 0x80
 8002396:	d107      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f902 	bl	80025ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b2:	2b40      	cmp	r3, #64	; 0x40
 80023b4:	d10e      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c0:	2b40      	cmp	r3, #64	; 0x40
 80023c2:	d107      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f838 	bl	8002444 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d10e      	bne.n	8002400 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d107      	bne.n	8002400 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0220 	mvn.w	r2, #32
 80023f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f8cc 	bl	8002598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a40      	ldr	r2, [pc, #256]	; (800256c <TIM_Base_SetConfig+0x114>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d013      	beq.n	8002498 <TIM_Base_SetConfig+0x40>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002476:	d00f      	beq.n	8002498 <TIM_Base_SetConfig+0x40>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a3d      	ldr	r2, [pc, #244]	; (8002570 <TIM_Base_SetConfig+0x118>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d00b      	beq.n	8002498 <TIM_Base_SetConfig+0x40>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a3c      	ldr	r2, [pc, #240]	; (8002574 <TIM_Base_SetConfig+0x11c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d007      	beq.n	8002498 <TIM_Base_SetConfig+0x40>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a3b      	ldr	r2, [pc, #236]	; (8002578 <TIM_Base_SetConfig+0x120>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d003      	beq.n	8002498 <TIM_Base_SetConfig+0x40>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a3a      	ldr	r2, [pc, #232]	; (800257c <TIM_Base_SetConfig+0x124>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d108      	bne.n	80024aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a2f      	ldr	r2, [pc, #188]	; (800256c <TIM_Base_SetConfig+0x114>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d02b      	beq.n	800250a <TIM_Base_SetConfig+0xb2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d027      	beq.n	800250a <TIM_Base_SetConfig+0xb2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a2c      	ldr	r2, [pc, #176]	; (8002570 <TIM_Base_SetConfig+0x118>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d023      	beq.n	800250a <TIM_Base_SetConfig+0xb2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a2b      	ldr	r2, [pc, #172]	; (8002574 <TIM_Base_SetConfig+0x11c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d01f      	beq.n	800250a <TIM_Base_SetConfig+0xb2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a2a      	ldr	r2, [pc, #168]	; (8002578 <TIM_Base_SetConfig+0x120>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d01b      	beq.n	800250a <TIM_Base_SetConfig+0xb2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a29      	ldr	r2, [pc, #164]	; (800257c <TIM_Base_SetConfig+0x124>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d017      	beq.n	800250a <TIM_Base_SetConfig+0xb2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a28      	ldr	r2, [pc, #160]	; (8002580 <TIM_Base_SetConfig+0x128>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <TIM_Base_SetConfig+0xb2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a27      	ldr	r2, [pc, #156]	; (8002584 <TIM_Base_SetConfig+0x12c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00f      	beq.n	800250a <TIM_Base_SetConfig+0xb2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a26      	ldr	r2, [pc, #152]	; (8002588 <TIM_Base_SetConfig+0x130>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00b      	beq.n	800250a <TIM_Base_SetConfig+0xb2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a25      	ldr	r2, [pc, #148]	; (800258c <TIM_Base_SetConfig+0x134>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <TIM_Base_SetConfig+0xb2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a24      	ldr	r2, [pc, #144]	; (8002590 <TIM_Base_SetConfig+0x138>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d003      	beq.n	800250a <TIM_Base_SetConfig+0xb2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a23      	ldr	r2, [pc, #140]	; (8002594 <TIM_Base_SetConfig+0x13c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d108      	bne.n	800251c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a0a      	ldr	r2, [pc, #40]	; (800256c <TIM_Base_SetConfig+0x114>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d003      	beq.n	8002550 <TIM_Base_SetConfig+0xf8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a0c      	ldr	r2, [pc, #48]	; (800257c <TIM_Base_SetConfig+0x124>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d103      	bne.n	8002558 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	615a      	str	r2, [r3, #20]
}
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40010000 	.word	0x40010000
 8002570:	40000400 	.word	0x40000400
 8002574:	40000800 	.word	0x40000800
 8002578:	40000c00 	.word	0x40000c00
 800257c:	40010400 	.word	0x40010400
 8002580:	40014000 	.word	0x40014000
 8002584:	40014400 	.word	0x40014400
 8002588:	40014800 	.word	0x40014800
 800258c:	40001800 	.word	0x40001800
 8002590:	40001c00 	.word	0x40001c00
 8002594:	40002000 	.word	0x40002000

08002598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e03f      	b.n	8002652 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7fe fa96 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f829 	bl	800265c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800265c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002660:	b0c0      	sub	sp, #256	; 0x100
 8002662:	af00      	add	r7, sp, #0
 8002664:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002678:	68d9      	ldr	r1, [r3, #12]
 800267a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	ea40 0301 	orr.w	r3, r0, r1
 8002684:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	431a      	orrs	r2, r3
 8002694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	431a      	orrs	r2, r3
 800269c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026b4:	f021 010c 	bic.w	r1, r1, #12
 80026b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026c2:	430b      	orrs	r3, r1
 80026c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80026d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d6:	6999      	ldr	r1, [r3, #24]
 80026d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	ea40 0301 	orr.w	r3, r0, r1
 80026e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4b8f      	ldr	r3, [pc, #572]	; (8002928 <UART_SetConfig+0x2cc>)
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d005      	beq.n	80026fc <UART_SetConfig+0xa0>
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	4b8d      	ldr	r3, [pc, #564]	; (800292c <UART_SetConfig+0x2d0>)
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d104      	bne.n	8002706 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026fc:	f7fe ff9e 	bl	800163c <HAL_RCC_GetPCLK2Freq>
 8002700:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002704:	e003      	b.n	800270e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002706:	f7fe ff85 	bl	8001614 <HAL_RCC_GetPCLK1Freq>
 800270a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800270e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002718:	f040 810c 	bne.w	8002934 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800271c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002720:	2200      	movs	r2, #0
 8002722:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002726:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800272a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800272e:	4622      	mov	r2, r4
 8002730:	462b      	mov	r3, r5
 8002732:	1891      	adds	r1, r2, r2
 8002734:	65b9      	str	r1, [r7, #88]	; 0x58
 8002736:	415b      	adcs	r3, r3
 8002738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800273a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800273e:	4621      	mov	r1, r4
 8002740:	eb12 0801 	adds.w	r8, r2, r1
 8002744:	4629      	mov	r1, r5
 8002746:	eb43 0901 	adc.w	r9, r3, r1
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800275a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800275e:	4690      	mov	r8, r2
 8002760:	4699      	mov	r9, r3
 8002762:	4623      	mov	r3, r4
 8002764:	eb18 0303 	adds.w	r3, r8, r3
 8002768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800276c:	462b      	mov	r3, r5
 800276e:	eb49 0303 	adc.w	r3, r9, r3
 8002772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002782:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002786:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800278a:	460b      	mov	r3, r1
 800278c:	18db      	adds	r3, r3, r3
 800278e:	653b      	str	r3, [r7, #80]	; 0x50
 8002790:	4613      	mov	r3, r2
 8002792:	eb42 0303 	adc.w	r3, r2, r3
 8002796:	657b      	str	r3, [r7, #84]	; 0x54
 8002798:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800279c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80027a0:	f7fd fd86 	bl	80002b0 <__aeabi_uldivmod>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4b61      	ldr	r3, [pc, #388]	; (8002930 <UART_SetConfig+0x2d4>)
 80027aa:	fba3 2302 	umull	r2, r3, r3, r2
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	011c      	lsls	r4, r3, #4
 80027b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027b6:	2200      	movs	r2, #0
 80027b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80027c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80027c4:	4642      	mov	r2, r8
 80027c6:	464b      	mov	r3, r9
 80027c8:	1891      	adds	r1, r2, r2
 80027ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80027cc:	415b      	adcs	r3, r3
 80027ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027d4:	4641      	mov	r1, r8
 80027d6:	eb12 0a01 	adds.w	sl, r2, r1
 80027da:	4649      	mov	r1, r9
 80027dc:	eb43 0b01 	adc.w	fp, r3, r1
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027f4:	4692      	mov	sl, r2
 80027f6:	469b      	mov	fp, r3
 80027f8:	4643      	mov	r3, r8
 80027fa:	eb1a 0303 	adds.w	r3, sl, r3
 80027fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002802:	464b      	mov	r3, r9
 8002804:	eb4b 0303 	adc.w	r3, fp, r3
 8002808:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002818:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800281c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002820:	460b      	mov	r3, r1
 8002822:	18db      	adds	r3, r3, r3
 8002824:	643b      	str	r3, [r7, #64]	; 0x40
 8002826:	4613      	mov	r3, r2
 8002828:	eb42 0303 	adc.w	r3, r2, r3
 800282c:	647b      	str	r3, [r7, #68]	; 0x44
 800282e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002832:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002836:	f7fd fd3b 	bl	80002b0 <__aeabi_uldivmod>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4611      	mov	r1, r2
 8002840:	4b3b      	ldr	r3, [pc, #236]	; (8002930 <UART_SetConfig+0x2d4>)
 8002842:	fba3 2301 	umull	r2, r3, r3, r1
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2264      	movs	r2, #100	; 0x64
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	1acb      	subs	r3, r1, r3
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002856:	4b36      	ldr	r3, [pc, #216]	; (8002930 <UART_SetConfig+0x2d4>)
 8002858:	fba3 2302 	umull	r2, r3, r3, r2
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002864:	441c      	add	r4, r3
 8002866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800286a:	2200      	movs	r2, #0
 800286c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002870:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002874:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002878:	4642      	mov	r2, r8
 800287a:	464b      	mov	r3, r9
 800287c:	1891      	adds	r1, r2, r2
 800287e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002880:	415b      	adcs	r3, r3
 8002882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002884:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002888:	4641      	mov	r1, r8
 800288a:	1851      	adds	r1, r2, r1
 800288c:	6339      	str	r1, [r7, #48]	; 0x30
 800288e:	4649      	mov	r1, r9
 8002890:	414b      	adcs	r3, r1
 8002892:	637b      	str	r3, [r7, #52]	; 0x34
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80028a0:	4659      	mov	r1, fp
 80028a2:	00cb      	lsls	r3, r1, #3
 80028a4:	4651      	mov	r1, sl
 80028a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028aa:	4651      	mov	r1, sl
 80028ac:	00ca      	lsls	r2, r1, #3
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	4603      	mov	r3, r0
 80028b4:	4642      	mov	r2, r8
 80028b6:	189b      	adds	r3, r3, r2
 80028b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028bc:	464b      	mov	r3, r9
 80028be:	460a      	mov	r2, r1
 80028c0:	eb42 0303 	adc.w	r3, r2, r3
 80028c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80028d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80028d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80028dc:	460b      	mov	r3, r1
 80028de:	18db      	adds	r3, r3, r3
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028e2:	4613      	mov	r3, r2
 80028e4:	eb42 0303 	adc.w	r3, r2, r3
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80028f2:	f7fd fcdd 	bl	80002b0 <__aeabi_uldivmod>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <UART_SetConfig+0x2d4>)
 80028fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002900:	095b      	lsrs	r3, r3, #5
 8002902:	2164      	movs	r1, #100	; 0x64
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	3332      	adds	r3, #50	; 0x32
 800290e:	4a08      	ldr	r2, [pc, #32]	; (8002930 <UART_SetConfig+0x2d4>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	f003 0207 	and.w	r2, r3, #7
 800291a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4422      	add	r2, r4
 8002922:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002924:	e105      	b.n	8002b32 <UART_SetConfig+0x4d6>
 8002926:	bf00      	nop
 8002928:	40011000 	.word	0x40011000
 800292c:	40011400 	.word	0x40011400
 8002930:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002938:	2200      	movs	r2, #0
 800293a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800293e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002942:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002946:	4642      	mov	r2, r8
 8002948:	464b      	mov	r3, r9
 800294a:	1891      	adds	r1, r2, r2
 800294c:	6239      	str	r1, [r7, #32]
 800294e:	415b      	adcs	r3, r3
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
 8002952:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002956:	4641      	mov	r1, r8
 8002958:	1854      	adds	r4, r2, r1
 800295a:	4649      	mov	r1, r9
 800295c:	eb43 0501 	adc.w	r5, r3, r1
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	00eb      	lsls	r3, r5, #3
 800296a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800296e:	00e2      	lsls	r2, r4, #3
 8002970:	4614      	mov	r4, r2
 8002972:	461d      	mov	r5, r3
 8002974:	4643      	mov	r3, r8
 8002976:	18e3      	adds	r3, r4, r3
 8002978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800297c:	464b      	mov	r3, r9
 800297e:	eb45 0303 	adc.w	r3, r5, r3
 8002982:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002992:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029a2:	4629      	mov	r1, r5
 80029a4:	008b      	lsls	r3, r1, #2
 80029a6:	4621      	mov	r1, r4
 80029a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ac:	4621      	mov	r1, r4
 80029ae:	008a      	lsls	r2, r1, #2
 80029b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80029b4:	f7fd fc7c 	bl	80002b0 <__aeabi_uldivmod>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4b60      	ldr	r3, [pc, #384]	; (8002b40 <UART_SetConfig+0x4e4>)
 80029be:	fba3 2302 	umull	r2, r3, r3, r2
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	011c      	lsls	r4, r3, #4
 80029c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ca:	2200      	movs	r2, #0
 80029cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80029d8:	4642      	mov	r2, r8
 80029da:	464b      	mov	r3, r9
 80029dc:	1891      	adds	r1, r2, r2
 80029de:	61b9      	str	r1, [r7, #24]
 80029e0:	415b      	adcs	r3, r3
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e8:	4641      	mov	r1, r8
 80029ea:	1851      	adds	r1, r2, r1
 80029ec:	6139      	str	r1, [r7, #16]
 80029ee:	4649      	mov	r1, r9
 80029f0:	414b      	adcs	r3, r1
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a00:	4659      	mov	r1, fp
 8002a02:	00cb      	lsls	r3, r1, #3
 8002a04:	4651      	mov	r1, sl
 8002a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a0a:	4651      	mov	r1, sl
 8002a0c:	00ca      	lsls	r2, r1, #3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	4642      	mov	r2, r8
 8002a16:	189b      	adds	r3, r3, r2
 8002a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a1c:	464b      	mov	r3, r9
 8002a1e:	460a      	mov	r2, r1
 8002a20:	eb42 0303 	adc.w	r3, r2, r3
 8002a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a40:	4649      	mov	r1, r9
 8002a42:	008b      	lsls	r3, r1, #2
 8002a44:	4641      	mov	r1, r8
 8002a46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a4a:	4641      	mov	r1, r8
 8002a4c:	008a      	lsls	r2, r1, #2
 8002a4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a52:	f7fd fc2d 	bl	80002b0 <__aeabi_uldivmod>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <UART_SetConfig+0x4e4>)
 8002a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	2164      	movs	r1, #100	; 0x64
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	3332      	adds	r3, #50	; 0x32
 8002a6e:	4a34      	ldr	r2, [pc, #208]	; (8002b40 <UART_SetConfig+0x4e4>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a7a:	441c      	add	r4, r3
 8002a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a80:	2200      	movs	r2, #0
 8002a82:	673b      	str	r3, [r7, #112]	; 0x70
 8002a84:	677a      	str	r2, [r7, #116]	; 0x74
 8002a86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a8a:	4642      	mov	r2, r8
 8002a8c:	464b      	mov	r3, r9
 8002a8e:	1891      	adds	r1, r2, r2
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	415b      	adcs	r3, r3
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a9a:	4641      	mov	r1, r8
 8002a9c:	1851      	adds	r1, r2, r1
 8002a9e:	6039      	str	r1, [r7, #0]
 8002aa0:	4649      	mov	r1, r9
 8002aa2:	414b      	adcs	r3, r1
 8002aa4:	607b      	str	r3, [r7, #4]
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ab2:	4659      	mov	r1, fp
 8002ab4:	00cb      	lsls	r3, r1, #3
 8002ab6:	4651      	mov	r1, sl
 8002ab8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002abc:	4651      	mov	r1, sl
 8002abe:	00ca      	lsls	r2, r1, #3
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4642      	mov	r2, r8
 8002ac8:	189b      	adds	r3, r3, r2
 8002aca:	66bb      	str	r3, [r7, #104]	; 0x68
 8002acc:	464b      	mov	r3, r9
 8002ace:	460a      	mov	r2, r1
 8002ad0:	eb42 0303 	adc.w	r3, r2, r3
 8002ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	663b      	str	r3, [r7, #96]	; 0x60
 8002ae0:	667a      	str	r2, [r7, #100]	; 0x64
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002aee:	4649      	mov	r1, r9
 8002af0:	008b      	lsls	r3, r1, #2
 8002af2:	4641      	mov	r1, r8
 8002af4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002af8:	4641      	mov	r1, r8
 8002afa:	008a      	lsls	r2, r1, #2
 8002afc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b00:	f7fd fbd6 	bl	80002b0 <__aeabi_uldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <UART_SetConfig+0x4e4>)
 8002b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2164      	movs	r1, #100	; 0x64
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	3332      	adds	r3, #50	; 0x32
 8002b1c:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <UART_SetConfig+0x4e4>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	f003 020f 	and.w	r2, r3, #15
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4422      	add	r2, r4
 8002b30:	609a      	str	r2, [r3, #8]
}
 8002b32:	bf00      	nop
 8002b34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b3e:	bf00      	nop
 8002b40:	51eb851f 	.word	0x51eb851f

08002b44 <__NVIC_SetPriority>:
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	db0a      	blt.n	8002b6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	490c      	ldr	r1, [pc, #48]	; (8002b90 <__NVIC_SetPriority+0x4c>)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	0112      	lsls	r2, r2, #4
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	440b      	add	r3, r1
 8002b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b6c:	e00a      	b.n	8002b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4908      	ldr	r1, [pc, #32]	; (8002b94 <__NVIC_SetPriority+0x50>)
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	3b04      	subs	r3, #4
 8002b7c:	0112      	lsls	r2, r2, #4
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	440b      	add	r3, r1
 8002b82:	761a      	strb	r2, [r3, #24]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000e100 	.word	0xe000e100
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <SysTick_Handler+0x1c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002ba0:	f001 ffa8 	bl	8004af4 <xTaskGetSchedulerState>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d001      	beq.n	8002bae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002baa:	f002 fe4d 	bl	8005848 <xPortSysTickHandler>
  }
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	e000e010 	.word	0xe000e010

08002bb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	f06f 0004 	mvn.w	r0, #4
 8002bc2:	f7ff ffbf 	bl	8002b44 <__NVIC_SetPriority>
#endif
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bd2:	f3ef 8305 	mrs	r3, IPSR
 8002bd6:	603b      	str	r3, [r7, #0]
  return(result);
 8002bd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002bde:	f06f 0305 	mvn.w	r3, #5
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	e00c      	b.n	8002c00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <osKernelInitialize+0x44>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d105      	bne.n	8002bfa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <osKernelInitialize+0x44>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	e002      	b.n	8002c00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c00:	687b      	ldr	r3, [r7, #4]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	2000015c 	.word	0x2000015c

08002c14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c1a:	f3ef 8305 	mrs	r3, IPSR
 8002c1e:	603b      	str	r3, [r7, #0]
  return(result);
 8002c20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002c26:	f06f 0305 	mvn.w	r3, #5
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	e010      	b.n	8002c50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <osKernelStart+0x48>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d109      	bne.n	8002c4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002c36:	f7ff ffbf 	bl	8002bb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <osKernelStart+0x48>)
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c40:	f001 fb10 	bl	8004264 <vTaskStartScheduler>
      stat = osOK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	607b      	str	r3, [r7, #4]
 8002c48:	e002      	b.n	8002c50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c50:	687b      	ldr	r3, [r7, #4]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	2000015c 	.word	0x2000015c

08002c60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08e      	sub	sp, #56	; 0x38
 8002c64:	af04      	add	r7, sp, #16
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c70:	f3ef 8305 	mrs	r3, IPSR
 8002c74:	617b      	str	r3, [r7, #20]
  return(result);
 8002c76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d17e      	bne.n	8002d7a <osThreadNew+0x11a>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d07b      	beq.n	8002d7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002c86:	2318      	movs	r3, #24
 8002c88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d045      	beq.n	8002d26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <osThreadNew+0x48>
        name = attr->name;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <osThreadNew+0x6e>
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b38      	cmp	r3, #56	; 0x38
 8002cc0:	d805      	bhi.n	8002cce <osThreadNew+0x6e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <osThreadNew+0x72>
        return (NULL);
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e054      	b.n	8002d7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00e      	beq.n	8002d08 <osThreadNew+0xa8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b5b      	cmp	r3, #91	; 0x5b
 8002cf0:	d90a      	bls.n	8002d08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d006      	beq.n	8002d08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <osThreadNew+0xa8>
        mem = 1;
 8002d02:	2301      	movs	r3, #1
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	e010      	b.n	8002d2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10c      	bne.n	8002d2a <osThreadNew+0xca>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d108      	bne.n	8002d2a <osThreadNew+0xca>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d104      	bne.n	8002d2a <osThreadNew+0xca>
          mem = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]
 8002d24:	e001      	b.n	8002d2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d110      	bne.n	8002d52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d38:	9202      	str	r2, [sp, #8]
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	6a3a      	ldr	r2, [r7, #32]
 8002d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f001 f8b6 	bl	8003eb8 <xTaskCreateStatic>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	e013      	b.n	8002d7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d110      	bne.n	8002d7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	f107 0310 	add.w	r3, r7, #16
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f001 f901 	bl	8003f72 <xTaskCreate>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d001      	beq.n	8002d7a <osThreadNew+0x11a>
            hTask = NULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002d7a:	693b      	ldr	r3, [r7, #16]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3728      	adds	r7, #40	; 0x28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d8c:	f3ef 8305 	mrs	r3, IPSR
 8002d90:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d92:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <osDelay+0x1c>
    stat = osErrorISR;
 8002d98:	f06f 0305 	mvn.w	r3, #5
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	e007      	b.n	8002db0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f001 fa26 	bl	80041fc <vTaskDelay>
    }
  }

  return (stat);
 8002db0:	68fb      	ldr	r3, [r7, #12]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f002 fb5e 	bl	8005484 <pvTimerGetTimerID>
 8002dc8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <TimerCallback+0x22>
    callb->func (callb->arg);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	6852      	ldr	r2, [r2, #4]
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4798      	blx	r3
  }
}
 8002ddc:	bf00      	nop
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08c      	sub	sp, #48	; 0x30
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	460b      	mov	r3, r1
 8002df2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002df8:	f3ef 8305 	mrs	r3, IPSR
 8002dfc:	613b      	str	r3, [r7, #16]
  return(result);
 8002dfe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d163      	bne.n	8002ecc <osTimerNew+0xe8>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d060      	beq.n	8002ecc <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8002e0a:	2008      	movs	r0, #8
 8002e0c:	f002 fdac 	bl	8005968 <pvPortMalloc>
 8002e10:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d059      	beq.n	8002ecc <osTimerNew+0xe8>
      callb->func = func;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8002e24:	7afb      	ldrb	r3, [r7, #11]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <osTimerNew+0x4c>
        reload = pdFALSE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	e001      	b.n	8002e34 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8002e30:	2301      	movs	r3, #1
 8002e32:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8002e34:	f04f 33ff 	mov.w	r3, #4294967295
 8002e38:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d01c      	beq.n	8002e7e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <osTimerNew+0x6e>
          name = attr->name;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d006      	beq.n	8002e68 <osTimerNew+0x84>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b2b      	cmp	r3, #43	; 0x2b
 8002e60:	d902      	bls.n	8002e68 <osTimerNew+0x84>
          mem = 1;
 8002e62:	2301      	movs	r3, #1
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	e00c      	b.n	8002e82 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d108      	bne.n	8002e82 <osTimerNew+0x9e>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d104      	bne.n	8002e82 <osTimerNew+0x9e>
            mem = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61bb      	str	r3, [r7, #24]
 8002e7c:	e001      	b.n	8002e82 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d10c      	bne.n	8002ea2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <osTimerNew+0xf4>)
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	2101      	movs	r1, #1
 8002e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e9a:	f001 ff74 	bl	8004d86 <xTimerCreateStatic>
 8002e9e:	6238      	str	r0, [r7, #32]
 8002ea0:	e00b      	b.n	8002eba <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d108      	bne.n	8002eba <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <osTimerNew+0xf4>)
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eb4:	f001 ff46 	bl	8004d44 <xTimerCreate>
 8002eb8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <osTimerNew+0xe8>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <osTimerNew+0xe8>
        vPortFree (callb);
 8002ec6:	6978      	ldr	r0, [r7, #20]
 8002ec8:	f002 fe1a 	bl	8005b00 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3728      	adds	r7, #40	; 0x28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	08002dbb 	.word	0x08002dbb

08002edc <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eea:	f3ef 8305 	mrs	r3, IPSR
 8002eee:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <osTimerStart+0x22>
    stat = osErrorISR;
 8002ef6:	f06f 0305 	mvn.w	r3, #5
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	e017      	b.n	8002f2e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d103      	bne.n	8002f0c <osTimerStart+0x30>
    stat = osErrorParameter;
 8002f04:	f06f 0303 	mvn.w	r3, #3
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	e010      	b.n	8002f2e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	2300      	movs	r3, #0
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	2104      	movs	r1, #4
 8002f16:	6938      	ldr	r0, [r7, #16]
 8002f18:	f001 ffae 	bl	8004e78 <xTimerGenericCommand>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d102      	bne.n	8002f28 <osTimerStart+0x4c>
      stat = osOK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e002      	b.n	8002f2e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8002f28:	f06f 0302 	mvn.w	r3, #2
 8002f2c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002f2e:	697b      	ldr	r3, [r7, #20]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f48:	f3ef 8305 	mrs	r3, IPSR
 8002f4c:	613b      	str	r3, [r7, #16]
  return(result);
 8002f4e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d15f      	bne.n	8003014 <osMessageQueueNew+0xdc>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d05c      	beq.n	8003014 <osMessageQueueNew+0xdc>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d059      	beq.n	8003014 <osMessageQueueNew+0xdc>
    mem = -1;
 8002f60:	f04f 33ff 	mov.w	r3, #4294967295
 8002f64:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d029      	beq.n	8002fc0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d012      	beq.n	8002f9a <osMessageQueueNew+0x62>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	2b4f      	cmp	r3, #79	; 0x4f
 8002f7a:	d90e      	bls.n	8002f9a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d302      	bcc.n	8002f9a <osMessageQueueNew+0x62>
        mem = 1;
 8002f94:	2301      	movs	r3, #1
 8002f96:	61bb      	str	r3, [r7, #24]
 8002f98:	e014      	b.n	8002fc4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d110      	bne.n	8002fc4 <osMessageQueueNew+0x8c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10c      	bne.n	8002fc4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d108      	bne.n	8002fc4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d104      	bne.n	8002fc4 <osMessageQueueNew+0x8c>
          mem = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	e001      	b.n	8002fc4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d10b      	bne.n	8002fe2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	9100      	str	r1, [sp, #0]
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 fa2f 	bl	800343c <xQueueGenericCreateStatic>
 8002fde:	61f8      	str	r0, [r7, #28]
 8002fe0:	e008      	b.n	8002ff4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fa9d 	bl	800352c <xQueueGenericCreate>
 8002ff2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00c      	beq.n	8003014 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	e001      	b.n	800300c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800300c:	6979      	ldr	r1, [r7, #20]
 800300e:	69f8      	ldr	r0, [r7, #28]
 8003010:	f000 fef4 	bl	8003dfc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003014:	69fb      	ldr	r3, [r7, #28]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	4613      	mov	r3, r2
 800302e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003038:	f3ef 8305 	mrs	r3, IPSR
 800303c:	617b      	str	r3, [r7, #20]
  return(result);
 800303e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003040:	2b00      	cmp	r3, #0
 8003042:	d028      	beq.n	8003096 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <osMessageQueuePut+0x36>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <osMessageQueuePut+0x36>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003056:	f06f 0303 	mvn.w	r3, #3
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	e038      	b.n	80030d0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003062:	f107 0210 	add.w	r2, r7, #16
 8003066:	2300      	movs	r3, #0
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	69b8      	ldr	r0, [r7, #24]
 800306c:	f000 fbba 	bl	80037e4 <xQueueGenericSendFromISR>
 8003070:	4603      	mov	r3, r0
 8003072:	2b01      	cmp	r3, #1
 8003074:	d003      	beq.n	800307e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003076:	f06f 0302 	mvn.w	r3, #2
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	e028      	b.n	80030d0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d025      	beq.n	80030d0 <osMessageQueuePut+0xb0>
 8003084:	4b15      	ldr	r3, [pc, #84]	; (80030dc <osMessageQueuePut+0xbc>)
 8003086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	e01c      	b.n	80030d0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <osMessageQueuePut+0x82>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d103      	bne.n	80030aa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80030a2:	f06f 0303 	mvn.w	r3, #3
 80030a6:	61fb      	str	r3, [r7, #28]
 80030a8:	e012      	b.n	80030d0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80030aa:	2300      	movs	r3, #0
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	69b8      	ldr	r0, [r7, #24]
 80030b2:	f000 fa99 	bl	80035e8 <xQueueGenericSend>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d009      	beq.n	80030d0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80030c2:	f06f 0301 	mvn.w	r3, #1
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	e002      	b.n	80030d0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80030ca:	f06f 0302 	mvn.w	r3, #2
 80030ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80030d0:	69fb      	ldr	r3, [r7, #28]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3720      	adds	r7, #32
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	e000ed04 	.word	0xe000ed04

080030e0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030f6:	f3ef 8305 	mrs	r3, IPSR
 80030fa:	617b      	str	r3, [r7, #20]
  return(result);
 80030fc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d028      	beq.n	8003154 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <osMessageQueueGet+0x34>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <osMessageQueueGet+0x34>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003114:	f06f 0303 	mvn.w	r3, #3
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	e037      	b.n	800318c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003120:	f107 0310 	add.w	r3, r7, #16
 8003124:	461a      	mov	r2, r3
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	69b8      	ldr	r0, [r7, #24]
 800312a:	f000 fcd7 	bl	8003adc <xQueueReceiveFromISR>
 800312e:	4603      	mov	r3, r0
 8003130:	2b01      	cmp	r3, #1
 8003132:	d003      	beq.n	800313c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003134:	f06f 0302 	mvn.w	r3, #2
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	e027      	b.n	800318c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d024      	beq.n	800318c <osMessageQueueGet+0xac>
 8003142:	4b15      	ldr	r3, [pc, #84]	; (8003198 <osMessageQueueGet+0xb8>)
 8003144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	e01b      	b.n	800318c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <osMessageQueueGet+0x80>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d103      	bne.n	8003168 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003160:	f06f 0303 	mvn.w	r3, #3
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	e011      	b.n	800318c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	69b8      	ldr	r0, [r7, #24]
 800316e:	f000 fbd5 	bl	800391c <xQueueReceive>
 8003172:	4603      	mov	r3, r0
 8003174:	2b01      	cmp	r3, #1
 8003176:	d009      	beq.n	800318c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800317e:	f06f 0301 	mvn.w	r3, #1
 8003182:	61fb      	str	r3, [r7, #28]
 8003184:	e002      	b.n	800318c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003186:	f06f 0302 	mvn.w	r3, #2
 800318a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800318c:	69fb      	ldr	r3, [r7, #28]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	e000ed04 	.word	0xe000ed04

0800319c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4a07      	ldr	r2, [pc, #28]	; (80031c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80031ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4a06      	ldr	r2, [pc, #24]	; (80031cc <vApplicationGetIdleTaskMemory+0x30>)
 80031b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	601a      	str	r2, [r3, #0]
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000160 	.word	0x20000160
 80031cc:	200001bc 	.word	0x200001bc

080031d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4a07      	ldr	r2, [pc, #28]	; (80031fc <vApplicationGetTimerTaskMemory+0x2c>)
 80031e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	4a06      	ldr	r2, [pc, #24]	; (8003200 <vApplicationGetTimerTaskMemory+0x30>)
 80031e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031ee:	601a      	str	r2, [r3, #0]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	200003bc 	.word	0x200003bc
 8003200:	20000418 	.word	0x20000418

08003204 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f103 0208 	add.w	r2, r3, #8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f04f 32ff 	mov.w	r2, #4294967295
 800321c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f103 0208 	add.w	r2, r3, #8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f103 0208 	add.w	r2, r3, #8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800325e:	b480      	push	{r7}
 8003260:	b085      	sub	sp, #20
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	601a      	str	r2, [r3, #0]
}
 800329a:	bf00      	nop
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032a6:	b480      	push	{r7}
 80032a8:	b085      	sub	sp, #20
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d103      	bne.n	80032c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	e00c      	b.n	80032e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3308      	adds	r3, #8
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e002      	b.n	80032d4 <vListInsert+0x2e>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d2f6      	bcs.n	80032ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	601a      	str	r2, [r3, #0]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6892      	ldr	r2, [r2, #8]
 800332e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6852      	ldr	r2, [r2, #4]
 8003338:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	429a      	cmp	r2, r3
 8003342:	d103      	bne.n	800334c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	1e5a      	subs	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003392:	bf00      	nop
 8003394:	e7fe      	b.n	8003394 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003396:	f002 f9c5 	bl	8005724 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a2:	68f9      	ldr	r1, [r7, #12]
 80033a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	441a      	add	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	3b01      	subs	r3, #1
 80033c8:	68f9      	ldr	r1, [r7, #12]
 80033ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	441a      	add	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	22ff      	movs	r2, #255	; 0xff
 80033da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	22ff      	movs	r2, #255	; 0xff
 80033e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d114      	bne.n	8003416 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01a      	beq.n	800342a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	3310      	adds	r3, #16
 80033f8:	4618      	mov	r0, r3
 80033fa:	f001 f9bd 	bl	8004778 <xTaskRemoveFromEventList>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d012      	beq.n	800342a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <xQueueGenericReset+0xcc>)
 8003406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	e009      	b.n	800342a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3310      	adds	r3, #16
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fef2 	bl	8003204 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3324      	adds	r3, #36	; 0x24
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff feed 	bl	8003204 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800342a:	f002 f9ab 	bl	8005784 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800342e:	2301      	movs	r3, #1
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	e000ed04 	.word	0xe000ed04

0800343c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08e      	sub	sp, #56	; 0x38
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003462:	bf00      	nop
 8003464:	e7fe      	b.n	8003464 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10a      	bne.n	8003482 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800347e:	bf00      	nop
 8003480:	e7fe      	b.n	8003480 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <xQueueGenericCreateStatic+0x52>
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <xQueueGenericCreateStatic+0x56>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <xQueueGenericCreateStatic+0x58>
 8003492:	2300      	movs	r3, #0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	623b      	str	r3, [r7, #32]
}
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <xQueueGenericCreateStatic+0x7e>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <xQueueGenericCreateStatic+0x82>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <xQueueGenericCreateStatic+0x84>
 80034be:	2300      	movs	r3, #0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80034c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	61fb      	str	r3, [r7, #28]
}
 80034d6:	bf00      	nop
 80034d8:	e7fe      	b.n	80034d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80034da:	2350      	movs	r3, #80	; 0x50
 80034dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b50      	cmp	r3, #80	; 0x50
 80034e2:	d00a      	beq.n	80034fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	61bb      	str	r3, [r7, #24]
}
 80034f6:	bf00      	nop
 80034f8:	e7fe      	b.n	80034f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80034fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00d      	beq.n	8003522 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800350e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	4613      	mov	r3, r2
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	68b9      	ldr	r1, [r7, #8]
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f83f 	bl	80035a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003524:	4618      	mov	r0, r3
 8003526:	3730      	adds	r7, #48	; 0x30
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	; 0x28
 8003530:	af02      	add	r7, sp, #8
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	4613      	mov	r3, r2
 8003538:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	613b      	str	r3, [r7, #16]
}
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	3350      	adds	r3, #80	; 0x50
 8003564:	4618      	mov	r0, r3
 8003566:	f002 f9ff 	bl	8005968 <pvPortMalloc>
 800356a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d011      	beq.n	8003596 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	3350      	adds	r3, #80	; 0x50
 800357a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003584:	79fa      	ldrb	r2, [r7, #7]
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	4613      	mov	r3, r2
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f805 	bl	80035a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003596:	69bb      	ldr	r3, [r7, #24]
	}
 8003598:	4618      	mov	r0, r3
 800359a:	3720      	adds	r7, #32
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d103      	bne.n	80035bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e002      	b.n	80035c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035ce:	2101      	movs	r1, #1
 80035d0:	69b8      	ldr	r0, [r7, #24]
 80035d2:	f7ff fecb 	bl	800336c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08e      	sub	sp, #56	; 0x38
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035f6:	2300      	movs	r3, #0
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <xQueueGenericSend+0x32>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003616:	bf00      	nop
 8003618:	e7fe      	b.n	8003618 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d103      	bne.n	8003628 <xQueueGenericSend+0x40>
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <xQueueGenericSend+0x44>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <xQueueGenericSend+0x46>
 800362c:	2300      	movs	r3, #0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <xQueueGenericSend+0x60>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003644:	bf00      	nop
 8003646:	e7fe      	b.n	8003646 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d103      	bne.n	8003656 <xQueueGenericSend+0x6e>
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <xQueueGenericSend+0x72>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <xQueueGenericSend+0x74>
 800365a:	2300      	movs	r3, #0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <xQueueGenericSend+0x8e>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	623b      	str	r3, [r7, #32]
}
 8003672:	bf00      	nop
 8003674:	e7fe      	b.n	8003674 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003676:	f001 fa3d 	bl	8004af4 <xTaskGetSchedulerState>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d102      	bne.n	8003686 <xQueueGenericSend+0x9e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <xQueueGenericSend+0xa2>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <xQueueGenericSend+0xa4>
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	61fb      	str	r3, [r7, #28]
}
 80036a2:	bf00      	nop
 80036a4:	e7fe      	b.n	80036a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036a6:	f002 f83d 	bl	8005724 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d302      	bcc.n	80036bc <xQueueGenericSend+0xd4>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d129      	bne.n	8003710 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036c2:	f000 fa8b 	bl	8003bdc <prvCopyDataToQueue>
 80036c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d010      	beq.n	80036f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	3324      	adds	r3, #36	; 0x24
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 f84f 	bl	8004778 <xTaskRemoveFromEventList>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d013      	beq.n	8003708 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80036e0:	4b3f      	ldr	r3, [pc, #252]	; (80037e0 <xQueueGenericSend+0x1f8>)
 80036e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	e00a      	b.n	8003708 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036f8:	4b39      	ldr	r3, [pc, #228]	; (80037e0 <xQueueGenericSend+0x1f8>)
 80036fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003708:	f002 f83c 	bl	8005784 <vPortExitCritical>
				return pdPASS;
 800370c:	2301      	movs	r3, #1
 800370e:	e063      	b.n	80037d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d103      	bne.n	800371e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003716:	f002 f835 	bl	8005784 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800371a:	2300      	movs	r3, #0
 800371c:	e05c      	b.n	80037d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800371e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003720:	2b00      	cmp	r3, #0
 8003722:	d106      	bne.n	8003732 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003724:	f107 0314 	add.w	r3, r7, #20
 8003728:	4618      	mov	r0, r3
 800372a:	f001 f889 	bl	8004840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800372e:	2301      	movs	r3, #1
 8003730:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003732:	f002 f827 	bl	8005784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003736:	f000 fdfb 	bl	8004330 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800373a:	f001 fff3 	bl	8005724 <vPortEnterCritical>
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003744:	b25b      	sxtb	r3, r3
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d103      	bne.n	8003754 <xQueueGenericSend+0x16c>
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800375a:	b25b      	sxtb	r3, r3
 800375c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003760:	d103      	bne.n	800376a <xQueueGenericSend+0x182>
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800376a:	f002 f80b 	bl	8005784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800376e:	1d3a      	adds	r2, r7, #4
 8003770:	f107 0314 	add.w	r3, r7, #20
 8003774:	4611      	mov	r1, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f001 f878 	bl	800486c <xTaskCheckForTimeOut>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d124      	bne.n	80037cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003782:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003784:	f000 fb22 	bl	8003dcc <prvIsQueueFull>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d018      	beq.n	80037c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800378e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003790:	3310      	adds	r3, #16
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f000 ff9e 	bl	80046d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800379c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800379e:	f000 faad 	bl	8003cfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037a2:	f000 fdd3 	bl	800434c <xTaskResumeAll>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f47f af7c 	bne.w	80036a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80037ae:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <xQueueGenericSend+0x1f8>)
 80037b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	e772      	b.n	80036a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037c2:	f000 fa9b 	bl	8003cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037c6:	f000 fdc1 	bl	800434c <xTaskResumeAll>
 80037ca:	e76c      	b.n	80036a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ce:	f000 fa95 	bl	8003cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037d2:	f000 fdbb 	bl	800434c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3738      	adds	r7, #56	; 0x38
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	e000ed04 	.word	0xe000ed04

080037e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b090      	sub	sp, #64	; 0x40
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d103      	bne.n	8003820 <xQueueGenericSendFromISR+0x3c>
 8003818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <xQueueGenericSendFromISR+0x40>
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <xQueueGenericSendFromISR+0x42>
 8003824:	2300      	movs	r3, #0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800383c:	bf00      	nop
 800383e:	e7fe      	b.n	800383e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d103      	bne.n	800384e <xQueueGenericSendFromISR+0x6a>
 8003846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <xQueueGenericSendFromISR+0x6e>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <xQueueGenericSendFromISR+0x70>
 8003852:	2300      	movs	r3, #0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	623b      	str	r3, [r7, #32]
}
 800386a:	bf00      	nop
 800386c:	e7fe      	b.n	800386c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800386e:	f002 f83b 	bl	80058e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003872:	f3ef 8211 	mrs	r2, BASEPRI
 8003876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	61fa      	str	r2, [r7, #28]
 8003888:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800388a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800388e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <xQueueGenericSendFromISR+0xbc>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d12f      	bne.n	8003900 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	68b9      	ldr	r1, [r7, #8]
 80038b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038b6:	f000 f991 	bl	8003bdc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c2:	d112      	bne.n	80038ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d016      	beq.n	80038fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ce:	3324      	adds	r3, #36	; 0x24
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 ff51 	bl	8004778 <xTaskRemoveFromEventList>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00e      	beq.n	80038fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00b      	beq.n	80038fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e007      	b.n	80038fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038ee:	3301      	adds	r3, #1
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	b25a      	sxtb	r2, r3
 80038f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038fa:	2301      	movs	r3, #1
 80038fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80038fe:	e001      	b.n	8003904 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003900:	2300      	movs	r3, #0
 8003902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003906:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800390e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003912:	4618      	mov	r0, r3
 8003914:	3740      	adds	r7, #64	; 0x40
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08c      	sub	sp, #48	; 0x30
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003928:	2300      	movs	r3, #0
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10a      	bne.n	800394c <xQueueReceive+0x30>
	__asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	623b      	str	r3, [r7, #32]
}
 8003948:	bf00      	nop
 800394a:	e7fe      	b.n	800394a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d103      	bne.n	800395a <xQueueReceive+0x3e>
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <xQueueReceive+0x42>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <xQueueReceive+0x44>
 800395e:	2300      	movs	r3, #0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <xQueueReceive+0x5e>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	61fb      	str	r3, [r7, #28]
}
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800397a:	f001 f8bb 	bl	8004af4 <xTaskGetSchedulerState>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <xQueueReceive+0x6e>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <xQueueReceive+0x72>
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <xQueueReceive+0x74>
 800398e:	2300      	movs	r3, #0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <xQueueReceive+0x8e>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	61bb      	str	r3, [r7, #24]
}
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039aa:	f001 febb 	bl	8005724 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01f      	beq.n	80039fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039be:	f000 f977 	bl	8003cb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	1e5a      	subs	r2, r3, #1
 80039c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00f      	beq.n	80039f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	3310      	adds	r3, #16
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fece 	bl	8004778 <xTaskRemoveFromEventList>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039e2:	4b3d      	ldr	r3, [pc, #244]	; (8003ad8 <xQueueReceive+0x1bc>)
 80039e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039f2:	f001 fec7 	bl	8005784 <vPortExitCritical>
				return pdPASS;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e069      	b.n	8003ace <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d103      	bne.n	8003a08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a00:	f001 fec0 	bl	8005784 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e062      	b.n	8003ace <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a0e:	f107 0310 	add.w	r3, r7, #16
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 ff14 	bl	8004840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a1c:	f001 feb2 	bl	8005784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a20:	f000 fc86 	bl	8004330 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a24:	f001 fe7e 	bl	8005724 <vPortEnterCritical>
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a2e:	b25b      	sxtb	r3, r3
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d103      	bne.n	8003a3e <xQueueReceive+0x122>
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a44:	b25b      	sxtb	r3, r3
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4a:	d103      	bne.n	8003a54 <xQueueReceive+0x138>
 8003a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a54:	f001 fe96 	bl	8005784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a58:	1d3a      	adds	r2, r7, #4
 8003a5a:	f107 0310 	add.w	r3, r7, #16
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 ff03 	bl	800486c <xTaskCheckForTimeOut>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d123      	bne.n	8003ab4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a6e:	f000 f997 	bl	8003da0 <prvIsQueueEmpty>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d017      	beq.n	8003aa8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7a:	3324      	adds	r3, #36	; 0x24
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fe29 	bl	80046d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a88:	f000 f938 	bl	8003cfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a8c:	f000 fc5e 	bl	800434c <xTaskResumeAll>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d189      	bne.n	80039aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <xQueueReceive+0x1bc>)
 8003a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	e780      	b.n	80039aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aaa:	f000 f927 	bl	8003cfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003aae:	f000 fc4d 	bl	800434c <xTaskResumeAll>
 8003ab2:	e77a      	b.n	80039aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ab6:	f000 f921 	bl	8003cfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003aba:	f000 fc47 	bl	800434c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ac0:	f000 f96e 	bl	8003da0 <prvIsQueueEmpty>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f43f af6f 	beq.w	80039aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003acc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3730      	adds	r7, #48	; 0x30
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	e000ed04 	.word	0xe000ed04

08003adc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08e      	sub	sp, #56	; 0x38
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	623b      	str	r3, [r7, #32]
}
 8003b04:	bf00      	nop
 8003b06:	e7fe      	b.n	8003b06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <xQueueReceiveFromISR+0x3a>
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <xQueueReceiveFromISR+0x3e>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <xQueueReceiveFromISR+0x40>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	61fb      	str	r3, [r7, #28]
}
 8003b32:	bf00      	nop
 8003b34:	e7fe      	b.n	8003b34 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b36:	f001 fed7 	bl	80058e8 <vPortValidateInterruptPriority>
	__asm volatile
 8003b3a:	f3ef 8211 	mrs	r2, BASEPRI
 8003b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	61ba      	str	r2, [r7, #24]
 8003b50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003b52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d02f      	beq.n	8003bc2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b70:	f000 f89e 	bl	8003cb0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	1e5a      	subs	r2, r3, #1
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003b7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b84:	d112      	bne.n	8003bac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d016      	beq.n	8003bbc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	3310      	adds	r3, #16
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fdf0 	bl	8004778 <xTaskRemoveFromEventList>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00e      	beq.n	8003bbc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00b      	beq.n	8003bbc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	e007      	b.n	8003bbc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	b25a      	sxtb	r2, r3
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc0:	e001      	b.n	8003bc6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f383 8811 	msr	BASEPRI, r3
}
 8003bd0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3738      	adds	r7, #56	; 0x38
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10d      	bne.n	8003c16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d14d      	bne.n	8003c9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 ff92 	bl	8004b30 <xTaskPriorityDisinherit>
 8003c0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	e043      	b.n	8003c9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d119      	bne.n	8003c50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6858      	ldr	r0, [r3, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	461a      	mov	r2, r3
 8003c26:	68b9      	ldr	r1, [r7, #8]
 8003c28:	f002 f8b2 	bl	8005d90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	441a      	add	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d32b      	bcc.n	8003c9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	e026      	b.n	8003c9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68d8      	ldr	r0, [r3, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	461a      	mov	r2, r3
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	f002 f898 	bl	8005d90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	425b      	negs	r3, r3
 8003c6a:	441a      	add	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d207      	bcs.n	8003c8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	425b      	negs	r3, r3
 8003c86:	441a      	add	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d105      	bne.n	8003c9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003ca6:	697b      	ldr	r3, [r7, #20]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d018      	beq.n	8003cf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	441a      	add	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d303      	bcc.n	8003ce4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68d9      	ldr	r1, [r3, #12]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	461a      	mov	r2, r3
 8003cee:	6838      	ldr	r0, [r7, #0]
 8003cf0:	f002 f84e 	bl	8005d90 <memcpy>
	}
}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d04:	f001 fd0e 	bl	8005724 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d10:	e011      	b.n	8003d36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d012      	beq.n	8003d40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3324      	adds	r3, #36	; 0x24
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fd2a 	bl	8004778 <xTaskRemoveFromEventList>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d2a:	f000 fe01 	bl	8004930 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	dce9      	bgt.n	8003d12 <prvUnlockQueue+0x16>
 8003d3e:	e000      	b.n	8003d42 <prvUnlockQueue+0x46>
					break;
 8003d40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	22ff      	movs	r2, #255	; 0xff
 8003d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d4a:	f001 fd1b 	bl	8005784 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d4e:	f001 fce9 	bl	8005724 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d5a:	e011      	b.n	8003d80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d012      	beq.n	8003d8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3310      	adds	r3, #16
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fd05 	bl	8004778 <xTaskRemoveFromEventList>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d74:	f000 fddc 	bl	8004930 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d78:	7bbb      	ldrb	r3, [r7, #14]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	dce9      	bgt.n	8003d5c <prvUnlockQueue+0x60>
 8003d88:	e000      	b.n	8003d8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	22ff      	movs	r2, #255	; 0xff
 8003d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d94:	f001 fcf6 	bl	8005784 <vPortExitCritical>
}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003da8:	f001 fcbc 	bl	8005724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d102      	bne.n	8003dba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003db4:	2301      	movs	r3, #1
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	e001      	b.n	8003dbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dbe:	f001 fce1 	bl	8005784 <vPortExitCritical>

	return xReturn;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dd4:	f001 fca6 	bl	8005724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d102      	bne.n	8003dea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003de4:	2301      	movs	r3, #1
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	e001      	b.n	8003dee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dee:	f001 fcc9 	bl	8005784 <vPortExitCritical>

	return xReturn;
 8003df2:	68fb      	ldr	r3, [r7, #12]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	e014      	b.n	8003e36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e0c:	4a0f      	ldr	r2, [pc, #60]	; (8003e4c <vQueueAddToRegistry+0x50>)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10b      	bne.n	8003e30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e18:	490c      	ldr	r1, [pc, #48]	; (8003e4c <vQueueAddToRegistry+0x50>)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e22:	4a0a      	ldr	r2, [pc, #40]	; (8003e4c <vQueueAddToRegistry+0x50>)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e2e:	e006      	b.n	8003e3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3301      	adds	r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b07      	cmp	r3, #7
 8003e3a:	d9e7      	bls.n	8003e0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20000818 	.word	0x20000818

08003e50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e60:	f001 fc60 	bl	8005724 <vPortEnterCritical>
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e6a:	b25b      	sxtb	r3, r3
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e70:	d103      	bne.n	8003e7a <vQueueWaitForMessageRestricted+0x2a>
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e80:	b25b      	sxtb	r3, r3
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	d103      	bne.n	8003e90 <vQueueWaitForMessageRestricted+0x40>
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e90:	f001 fc78 	bl	8005784 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	3324      	adds	r3, #36	; 0x24
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fc3b 	bl	8004720 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003eaa:	6978      	ldr	r0, [r7, #20]
 8003eac:	f7ff ff26 	bl	8003cfc <prvUnlockQueue>
	}
 8003eb0:	bf00      	nop
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08e      	sub	sp, #56	; 0x38
 8003ebc:	af04      	add	r7, sp, #16
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10a      	bne.n	8003ee2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	623b      	str	r3, [r7, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	e7fe      	b.n	8003ee0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <xTaskCreateStatic+0x46>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	61fb      	str	r3, [r7, #28]
}
 8003efa:	bf00      	nop
 8003efc:	e7fe      	b.n	8003efc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003efe:	235c      	movs	r3, #92	; 0x5c
 8003f00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2b5c      	cmp	r3, #92	; 0x5c
 8003f06:	d00a      	beq.n	8003f1e <xTaskCreateStatic+0x66>
	__asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	61bb      	str	r3, [r7, #24]
}
 8003f1a:	bf00      	nop
 8003f1c:	e7fe      	b.n	8003f1c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d01e      	beq.n	8003f64 <xTaskCreateStatic+0xac>
 8003f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01b      	beq.n	8003f64 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	2202      	movs	r2, #2
 8003f3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f3e:	2300      	movs	r3, #0
 8003f40:	9303      	str	r3, [sp, #12]
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	9302      	str	r3, [sp, #8]
 8003f46:	f107 0314 	add.w	r3, r7, #20
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f850 	bl	8003ffc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f5e:	f000 f8dd 	bl	800411c <prvAddNewTaskToReadyList>
 8003f62:	e001      	b.n	8003f68 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f68:	697b      	ldr	r3, [r7, #20]
	}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3728      	adds	r7, #40	; 0x28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b08c      	sub	sp, #48	; 0x30
 8003f76:	af04      	add	r7, sp, #16
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	603b      	str	r3, [r7, #0]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 fcee 	bl	8005968 <pvPortMalloc>
 8003f8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00e      	beq.n	8003fb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f94:	205c      	movs	r0, #92	; 0x5c
 8003f96:	f001 fce7 	bl	8005968 <pvPortMalloc>
 8003f9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8003fa8:	e005      	b.n	8003fb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003faa:	6978      	ldr	r0, [r7, #20]
 8003fac:	f001 fda8 	bl	8005b00 <vPortFree>
 8003fb0:	e001      	b.n	8003fb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d017      	beq.n	8003fec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fc4:	88fa      	ldrh	r2, [r7, #6]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	9303      	str	r3, [sp, #12]
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	9302      	str	r3, [sp, #8]
 8003fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f80e 	bl	8003ffc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fe0:	69f8      	ldr	r0, [r7, #28]
 8003fe2:	f000 f89b 	bl	800411c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	e002      	b.n	8003ff2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ff2:	69bb      	ldr	r3, [r7, #24]
	}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3720      	adds	r7, #32
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	461a      	mov	r2, r3
 8004014:	21a5      	movs	r1, #165	; 0xa5
 8004016:	f001 fec9 	bl	8005dac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800401a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004024:	3b01      	subs	r3, #1
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	f023 0307 	bic.w	r3, r3, #7
 8004032:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <prvInitialiseNewTask+0x58>
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	617b      	str	r3, [r7, #20]
}
 8004050:	bf00      	nop
 8004052:	e7fe      	b.n	8004052 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01f      	beq.n	800409a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	e012      	b.n	8004086 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	4413      	add	r3, r2
 8004066:	7819      	ldrb	r1, [r3, #0]
 8004068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	4413      	add	r3, r2
 800406e:	3334      	adds	r3, #52	; 0x34
 8004070:	460a      	mov	r2, r1
 8004072:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	4413      	add	r3, r2
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d006      	beq.n	800408e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	3301      	adds	r3, #1
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	2b0f      	cmp	r3, #15
 800408a:	d9e9      	bls.n	8004060 <prvInitialiseNewTask+0x64>
 800408c:	e000      	b.n	8004090 <prvInitialiseNewTask+0x94>
			{
				break;
 800408e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004098:	e003      	b.n	80040a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	2b37      	cmp	r3, #55	; 0x37
 80040a6:	d901      	bls.n	80040ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040a8:	2337      	movs	r3, #55	; 0x37
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	2200      	movs	r2, #0
 80040bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c0:	3304      	adds	r3, #4
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff f8be 	bl	8003244 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	3318      	adds	r3, #24
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff f8b9 	bl	8003244 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	2200      	movs	r2, #0
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	68f9      	ldr	r1, [r7, #12]
 80040fa:	69b8      	ldr	r0, [r7, #24]
 80040fc:	f001 f9e2 	bl	80054c4 <pxPortInitialiseStack>
 8004100:	4602      	mov	r2, r0
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004110:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004112:	bf00      	nop
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004124:	f001 fafe 	bl	8005724 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004128:	4b2d      	ldr	r3, [pc, #180]	; (80041e0 <prvAddNewTaskToReadyList+0xc4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3301      	adds	r3, #1
 800412e:	4a2c      	ldr	r2, [pc, #176]	; (80041e0 <prvAddNewTaskToReadyList+0xc4>)
 8004130:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004132:	4b2c      	ldr	r3, [pc, #176]	; (80041e4 <prvAddNewTaskToReadyList+0xc8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800413a:	4a2a      	ldr	r2, [pc, #168]	; (80041e4 <prvAddNewTaskToReadyList+0xc8>)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004140:	4b27      	ldr	r3, [pc, #156]	; (80041e0 <prvAddNewTaskToReadyList+0xc4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d110      	bne.n	800416a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004148:	f000 fc16 	bl	8004978 <prvInitialiseTaskLists>
 800414c:	e00d      	b.n	800416a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800414e:	4b26      	ldr	r3, [pc, #152]	; (80041e8 <prvAddNewTaskToReadyList+0xcc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004156:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <prvAddNewTaskToReadyList+0xc8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	429a      	cmp	r2, r3
 8004162:	d802      	bhi.n	800416a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004164:	4a1f      	ldr	r2, [pc, #124]	; (80041e4 <prvAddNewTaskToReadyList+0xc8>)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800416a:	4b20      	ldr	r3, [pc, #128]	; (80041ec <prvAddNewTaskToReadyList+0xd0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3301      	adds	r3, #1
 8004170:	4a1e      	ldr	r2, [pc, #120]	; (80041ec <prvAddNewTaskToReadyList+0xd0>)
 8004172:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004174:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <prvAddNewTaskToReadyList+0xd0>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004180:	4b1b      	ldr	r3, [pc, #108]	; (80041f0 <prvAddNewTaskToReadyList+0xd4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d903      	bls.n	8004190 <prvAddNewTaskToReadyList+0x74>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	4a18      	ldr	r2, [pc, #96]	; (80041f0 <prvAddNewTaskToReadyList+0xd4>)
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4a15      	ldr	r2, [pc, #84]	; (80041f4 <prvAddNewTaskToReadyList+0xd8>)
 800419e:	441a      	add	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4619      	mov	r1, r3
 80041a6:	4610      	mov	r0, r2
 80041a8:	f7ff f859 	bl	800325e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041ac:	f001 faea 	bl	8005784 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041b0:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <prvAddNewTaskToReadyList+0xcc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00e      	beq.n	80041d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041b8:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <prvAddNewTaskToReadyList+0xc8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d207      	bcs.n	80041d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041c6:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <prvAddNewTaskToReadyList+0xdc>)
 80041c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000d2c 	.word	0x20000d2c
 80041e4:	20000858 	.word	0x20000858
 80041e8:	20000d38 	.word	0x20000d38
 80041ec:	20000d48 	.word	0x20000d48
 80041f0:	20000d34 	.word	0x20000d34
 80041f4:	2000085c 	.word	0x2000085c
 80041f8:	e000ed04 	.word	0xe000ed04

080041fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d017      	beq.n	800423e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800420e:	4b13      	ldr	r3, [pc, #76]	; (800425c <vTaskDelay+0x60>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <vTaskDelay+0x30>
	__asm volatile
 8004216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	60bb      	str	r3, [r7, #8]
}
 8004228:	bf00      	nop
 800422a:	e7fe      	b.n	800422a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800422c:	f000 f880 	bl	8004330 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004230:	2100      	movs	r1, #0
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fcea 	bl	8004c0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004238:	f000 f888 	bl	800434c <xTaskResumeAll>
 800423c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d107      	bne.n	8004254 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <vTaskDelay+0x64>)
 8004246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004254:	bf00      	nop
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000d54 	.word	0x20000d54
 8004260:	e000ed04 	.word	0xe000ed04

08004264 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800426e:	2300      	movs	r3, #0
 8004270:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004272:	463a      	mov	r2, r7
 8004274:	1d39      	adds	r1, r7, #4
 8004276:	f107 0308 	add.w	r3, r7, #8
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe ff8e 	bl	800319c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004280:	6839      	ldr	r1, [r7, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	9202      	str	r2, [sp, #8]
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	2300      	movs	r3, #0
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	2300      	movs	r3, #0
 8004290:	460a      	mov	r2, r1
 8004292:	4921      	ldr	r1, [pc, #132]	; (8004318 <vTaskStartScheduler+0xb4>)
 8004294:	4821      	ldr	r0, [pc, #132]	; (800431c <vTaskStartScheduler+0xb8>)
 8004296:	f7ff fe0f 	bl	8003eb8 <xTaskCreateStatic>
 800429a:	4603      	mov	r3, r0
 800429c:	4a20      	ldr	r2, [pc, #128]	; (8004320 <vTaskStartScheduler+0xbc>)
 800429e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042a0:	4b1f      	ldr	r3, [pc, #124]	; (8004320 <vTaskStartScheduler+0xbc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042a8:	2301      	movs	r3, #1
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e001      	b.n	80042b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d102      	bne.n	80042be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80042b8:	f000 fcfc 	bl	8004cb4 <xTimerCreateTimerTask>
 80042bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d116      	bne.n	80042f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	613b      	str	r3, [r7, #16]
}
 80042d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042d8:	4b12      	ldr	r3, [pc, #72]	; (8004324 <vTaskStartScheduler+0xc0>)
 80042da:	f04f 32ff 	mov.w	r2, #4294967295
 80042de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <vTaskStartScheduler+0xc4>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042e6:	4b11      	ldr	r3, [pc, #68]	; (800432c <vTaskStartScheduler+0xc8>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042ec:	f001 f978 	bl	80055e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042f0:	e00e      	b.n	8004310 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d10a      	bne.n	8004310 <vTaskStartScheduler+0xac>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	60fb      	str	r3, [r7, #12]
}
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <vTaskStartScheduler+0xaa>
}
 8004310:	bf00      	nop
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	08006d4c 	.word	0x08006d4c
 800431c:	08004949 	.word	0x08004949
 8004320:	20000d50 	.word	0x20000d50
 8004324:	20000d4c 	.word	0x20000d4c
 8004328:	20000d38 	.word	0x20000d38
 800432c:	20000d30 	.word	0x20000d30

08004330 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004334:	4b04      	ldr	r3, [pc, #16]	; (8004348 <vTaskSuspendAll+0x18>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3301      	adds	r3, #1
 800433a:	4a03      	ldr	r2, [pc, #12]	; (8004348 <vTaskSuspendAll+0x18>)
 800433c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800433e:	bf00      	nop
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	20000d54 	.word	0x20000d54

0800434c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004356:	2300      	movs	r3, #0
 8004358:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800435a:	4b42      	ldr	r3, [pc, #264]	; (8004464 <xTaskResumeAll+0x118>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <xTaskResumeAll+0x2c>
	__asm volatile
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	603b      	str	r3, [r7, #0]
}
 8004374:	bf00      	nop
 8004376:	e7fe      	b.n	8004376 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004378:	f001 f9d4 	bl	8005724 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800437c:	4b39      	ldr	r3, [pc, #228]	; (8004464 <xTaskResumeAll+0x118>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3b01      	subs	r3, #1
 8004382:	4a38      	ldr	r2, [pc, #224]	; (8004464 <xTaskResumeAll+0x118>)
 8004384:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004386:	4b37      	ldr	r3, [pc, #220]	; (8004464 <xTaskResumeAll+0x118>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d162      	bne.n	8004454 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800438e:	4b36      	ldr	r3, [pc, #216]	; (8004468 <xTaskResumeAll+0x11c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d05e      	beq.n	8004454 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004396:	e02f      	b.n	80043f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004398:	4b34      	ldr	r3, [pc, #208]	; (800446c <xTaskResumeAll+0x120>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3318      	adds	r3, #24
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fe ffb7 	bl	8003318 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3304      	adds	r3, #4
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fe ffb2 	bl	8003318 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b8:	4b2d      	ldr	r3, [pc, #180]	; (8004470 <xTaskResumeAll+0x124>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d903      	bls.n	80043c8 <xTaskResumeAll+0x7c>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	4a2a      	ldr	r2, [pc, #168]	; (8004470 <xTaskResumeAll+0x124>)
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4a27      	ldr	r2, [pc, #156]	; (8004474 <xTaskResumeAll+0x128>)
 80043d6:	441a      	add	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f7fe ff3d 	bl	800325e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e8:	4b23      	ldr	r3, [pc, #140]	; (8004478 <xTaskResumeAll+0x12c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d302      	bcc.n	80043f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80043f2:	4b22      	ldr	r3, [pc, #136]	; (800447c <xTaskResumeAll+0x130>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043f8:	4b1c      	ldr	r3, [pc, #112]	; (800446c <xTaskResumeAll+0x120>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1cb      	bne.n	8004398 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004406:	f000 fb55 	bl	8004ab4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800440a:	4b1d      	ldr	r3, [pc, #116]	; (8004480 <xTaskResumeAll+0x134>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d010      	beq.n	8004438 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004416:	f000 f847 	bl	80044a8 <xTaskIncrementTick>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004420:	4b16      	ldr	r3, [pc, #88]	; (800447c <xTaskResumeAll+0x130>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3b01      	subs	r3, #1
 800442a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f1      	bne.n	8004416 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004432:	4b13      	ldr	r3, [pc, #76]	; (8004480 <xTaskResumeAll+0x134>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004438:	4b10      	ldr	r3, [pc, #64]	; (800447c <xTaskResumeAll+0x130>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004440:	2301      	movs	r3, #1
 8004442:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <xTaskResumeAll+0x138>)
 8004446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004454:	f001 f996 	bl	8005784 <vPortExitCritical>

	return xAlreadyYielded;
 8004458:	68bb      	ldr	r3, [r7, #8]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20000d54 	.word	0x20000d54
 8004468:	20000d2c 	.word	0x20000d2c
 800446c:	20000cec 	.word	0x20000cec
 8004470:	20000d34 	.word	0x20000d34
 8004474:	2000085c 	.word	0x2000085c
 8004478:	20000858 	.word	0x20000858
 800447c:	20000d40 	.word	0x20000d40
 8004480:	20000d3c 	.word	0x20000d3c
 8004484:	e000ed04 	.word	0xe000ed04

08004488 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <xTaskGetTickCount+0x1c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004494:	687b      	ldr	r3, [r7, #4]
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000d30 	.word	0x20000d30

080044a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044b2:	4b4f      	ldr	r3, [pc, #316]	; (80045f0 <xTaskIncrementTick+0x148>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f040 808f 	bne.w	80045da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044bc:	4b4d      	ldr	r3, [pc, #308]	; (80045f4 <xTaskIncrementTick+0x14c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3301      	adds	r3, #1
 80044c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044c4:	4a4b      	ldr	r2, [pc, #300]	; (80045f4 <xTaskIncrementTick+0x14c>)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d120      	bne.n	8004512 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80044d0:	4b49      	ldr	r3, [pc, #292]	; (80045f8 <xTaskIncrementTick+0x150>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	603b      	str	r3, [r7, #0]
}
 80044ec:	bf00      	nop
 80044ee:	e7fe      	b.n	80044ee <xTaskIncrementTick+0x46>
 80044f0:	4b41      	ldr	r3, [pc, #260]	; (80045f8 <xTaskIncrementTick+0x150>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	4b41      	ldr	r3, [pc, #260]	; (80045fc <xTaskIncrementTick+0x154>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a3f      	ldr	r2, [pc, #252]	; (80045f8 <xTaskIncrementTick+0x150>)
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4a3f      	ldr	r2, [pc, #252]	; (80045fc <xTaskIncrementTick+0x154>)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	4b3e      	ldr	r3, [pc, #248]	; (8004600 <xTaskIncrementTick+0x158>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3301      	adds	r3, #1
 800450a:	4a3d      	ldr	r2, [pc, #244]	; (8004600 <xTaskIncrementTick+0x158>)
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	f000 fad1 	bl	8004ab4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004512:	4b3c      	ldr	r3, [pc, #240]	; (8004604 <xTaskIncrementTick+0x15c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	429a      	cmp	r2, r3
 800451a:	d349      	bcc.n	80045b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800451c:	4b36      	ldr	r3, [pc, #216]	; (80045f8 <xTaskIncrementTick+0x150>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d104      	bne.n	8004530 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004526:	4b37      	ldr	r3, [pc, #220]	; (8004604 <xTaskIncrementTick+0x15c>)
 8004528:	f04f 32ff 	mov.w	r2, #4294967295
 800452c:	601a      	str	r2, [r3, #0]
					break;
 800452e:	e03f      	b.n	80045b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004530:	4b31      	ldr	r3, [pc, #196]	; (80045f8 <xTaskIncrementTick+0x150>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d203      	bcs.n	8004550 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004548:	4a2e      	ldr	r2, [pc, #184]	; (8004604 <xTaskIncrementTick+0x15c>)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800454e:	e02f      	b.n	80045b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	3304      	adds	r3, #4
 8004554:	4618      	mov	r0, r3
 8004556:	f7fe fedf 	bl	8003318 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d004      	beq.n	800456c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	3318      	adds	r3, #24
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe fed6 	bl	8003318 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	4b25      	ldr	r3, [pc, #148]	; (8004608 <xTaskIncrementTick+0x160>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d903      	bls.n	8004580 <xTaskIncrementTick+0xd8>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	4a22      	ldr	r2, [pc, #136]	; (8004608 <xTaskIncrementTick+0x160>)
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4a1f      	ldr	r2, [pc, #124]	; (800460c <xTaskIncrementTick+0x164>)
 800458e:	441a      	add	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f7fe fe61 	bl	800325e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a0:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <xTaskIncrementTick+0x168>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d3b8      	bcc.n	800451c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80045aa:	2301      	movs	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ae:	e7b5      	b.n	800451c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045b0:	4b17      	ldr	r3, [pc, #92]	; (8004610 <xTaskIncrementTick+0x168>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b6:	4915      	ldr	r1, [pc, #84]	; (800460c <xTaskIncrementTick+0x164>)
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d901      	bls.n	80045cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80045c8:	2301      	movs	r3, #1
 80045ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <xTaskIncrementTick+0x16c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d007      	beq.n	80045e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80045d4:	2301      	movs	r3, #1
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	e004      	b.n	80045e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80045da:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <xTaskIncrementTick+0x170>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3301      	adds	r3, #1
 80045e0:	4a0d      	ldr	r2, [pc, #52]	; (8004618 <xTaskIncrementTick+0x170>)
 80045e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80045e4:	697b      	ldr	r3, [r7, #20]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000d54 	.word	0x20000d54
 80045f4:	20000d30 	.word	0x20000d30
 80045f8:	20000ce4 	.word	0x20000ce4
 80045fc:	20000ce8 	.word	0x20000ce8
 8004600:	20000d44 	.word	0x20000d44
 8004604:	20000d4c 	.word	0x20000d4c
 8004608:	20000d34 	.word	0x20000d34
 800460c:	2000085c 	.word	0x2000085c
 8004610:	20000858 	.word	0x20000858
 8004614:	20000d40 	.word	0x20000d40
 8004618:	20000d3c 	.word	0x20000d3c

0800461c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004622:	4b28      	ldr	r3, [pc, #160]	; (80046c4 <vTaskSwitchContext+0xa8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800462a:	4b27      	ldr	r3, [pc, #156]	; (80046c8 <vTaskSwitchContext+0xac>)
 800462c:	2201      	movs	r2, #1
 800462e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004630:	e041      	b.n	80046b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004632:	4b25      	ldr	r3, [pc, #148]	; (80046c8 <vTaskSwitchContext+0xac>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004638:	4b24      	ldr	r3, [pc, #144]	; (80046cc <vTaskSwitchContext+0xb0>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	e010      	b.n	8004662 <vTaskSwitchContext+0x46>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10a      	bne.n	800465c <vTaskSwitchContext+0x40>
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	607b      	str	r3, [r7, #4]
}
 8004658:	bf00      	nop
 800465a:	e7fe      	b.n	800465a <vTaskSwitchContext+0x3e>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3b01      	subs	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	491b      	ldr	r1, [pc, #108]	; (80046d0 <vTaskSwitchContext+0xb4>)
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0e4      	beq.n	8004640 <vTaskSwitchContext+0x24>
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4a13      	ldr	r2, [pc, #76]	; (80046d0 <vTaskSwitchContext+0xb4>)
 8004682:	4413      	add	r3, r2
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	605a      	str	r2, [r3, #4]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	3308      	adds	r3, #8
 8004698:	429a      	cmp	r2, r3
 800469a:	d104      	bne.n	80046a6 <vTaskSwitchContext+0x8a>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a09      	ldr	r2, [pc, #36]	; (80046d4 <vTaskSwitchContext+0xb8>)
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	4a06      	ldr	r2, [pc, #24]	; (80046cc <vTaskSwitchContext+0xb0>)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6013      	str	r3, [r2, #0]
}
 80046b6:	bf00      	nop
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	20000d54 	.word	0x20000d54
 80046c8:	20000d40 	.word	0x20000d40
 80046cc:	20000d34 	.word	0x20000d34
 80046d0:	2000085c 	.word	0x2000085c
 80046d4:	20000858 	.word	0x20000858

080046d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10a      	bne.n	80046fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	60fb      	str	r3, [r7, #12]
}
 80046fa:	bf00      	nop
 80046fc:	e7fe      	b.n	80046fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <vTaskPlaceOnEventList+0x44>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3318      	adds	r3, #24
 8004704:	4619      	mov	r1, r3
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fe fdcd 	bl	80032a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800470c:	2101      	movs	r1, #1
 800470e:	6838      	ldr	r0, [r7, #0]
 8004710:	f000 fa7c 	bl	8004c0c <prvAddCurrentTaskToDelayedList>
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000858 	.word	0x20000858

08004720 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10a      	bne.n	8004748 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	617b      	str	r3, [r7, #20]
}
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <vTaskPlaceOnEventListRestricted+0x54>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3318      	adds	r3, #24
 800474e:	4619      	mov	r1, r3
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f7fe fd84 	bl	800325e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800475c:	f04f 33ff 	mov.w	r3, #4294967295
 8004760:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	68b8      	ldr	r0, [r7, #8]
 8004766:	f000 fa51 	bl	8004c0c <prvAddCurrentTaskToDelayedList>
	}
 800476a:	bf00      	nop
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000858 	.word	0x20000858

08004778 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10a      	bne.n	80047a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	60fb      	str	r3, [r7, #12]
}
 80047a0:	bf00      	nop
 80047a2:	e7fe      	b.n	80047a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	3318      	adds	r3, #24
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fe fdb5 	bl	8003318 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ae:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <xTaskRemoveFromEventList+0xb0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d11d      	bne.n	80047f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	3304      	adds	r3, #4
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe fdac 	bl	8003318 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c4:	4b19      	ldr	r3, [pc, #100]	; (800482c <xTaskRemoveFromEventList+0xb4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d903      	bls.n	80047d4 <xTaskRemoveFromEventList+0x5c>
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	4a16      	ldr	r2, [pc, #88]	; (800482c <xTaskRemoveFromEventList+0xb4>)
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4a13      	ldr	r2, [pc, #76]	; (8004830 <xTaskRemoveFromEventList+0xb8>)
 80047e2:	441a      	add	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f7fe fd37 	bl	800325e <vListInsertEnd>
 80047f0:	e005      	b.n	80047fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3318      	adds	r3, #24
 80047f6:	4619      	mov	r1, r3
 80047f8:	480e      	ldr	r0, [pc, #56]	; (8004834 <xTaskRemoveFromEventList+0xbc>)
 80047fa:	f7fe fd30 	bl	800325e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004802:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <xTaskRemoveFromEventList+0xc0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	429a      	cmp	r2, r3
 800480a:	d905      	bls.n	8004818 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800480c:	2301      	movs	r3, #1
 800480e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004810:	4b0a      	ldr	r3, [pc, #40]	; (800483c <xTaskRemoveFromEventList+0xc4>)
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e001      	b.n	800481c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800481c:	697b      	ldr	r3, [r7, #20]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20000d54 	.word	0x20000d54
 800482c:	20000d34 	.word	0x20000d34
 8004830:	2000085c 	.word	0x2000085c
 8004834:	20000cec 	.word	0x20000cec
 8004838:	20000858 	.word	0x20000858
 800483c:	20000d40 	.word	0x20000d40

08004840 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004848:	4b06      	ldr	r3, [pc, #24]	; (8004864 <vTaskInternalSetTimeOutState+0x24>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <vTaskInternalSetTimeOutState+0x28>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	605a      	str	r2, [r3, #4]
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	20000d44 	.word	0x20000d44
 8004868:	20000d30 	.word	0x20000d30

0800486c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	613b      	str	r3, [r7, #16]
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	60fb      	str	r3, [r7, #12]
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80048ae:	f000 ff39 	bl	8005724 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048b2:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <xTaskCheckForTimeOut+0xbc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d102      	bne.n	80048d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	e023      	b.n	800491a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b15      	ldr	r3, [pc, #84]	; (800492c <xTaskCheckForTimeOut+0xc0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d007      	beq.n	80048ee <xTaskCheckForTimeOut+0x82>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d302      	bcc.n	80048ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048e8:	2301      	movs	r3, #1
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	e015      	b.n	800491a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d20b      	bcs.n	8004910 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	1ad2      	subs	r2, r2, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff ff9b 	bl	8004840 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800490a:	2300      	movs	r3, #0
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	e004      	b.n	800491a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004916:	2301      	movs	r3, #1
 8004918:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800491a:	f000 ff33 	bl	8005784 <vPortExitCritical>

	return xReturn;
 800491e:	69fb      	ldr	r3, [r7, #28]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3720      	adds	r7, #32
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20000d30 	.word	0x20000d30
 800492c:	20000d44 	.word	0x20000d44

08004930 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <vTaskMissedYield+0x14>)
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]
}
 800493a:	bf00      	nop
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	20000d40 	.word	0x20000d40

08004948 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004950:	f000 f852 	bl	80049f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <prvIdleTask+0x28>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d9f9      	bls.n	8004950 <prvIdleTask+0x8>
			{
				taskYIELD();
 800495c:	4b05      	ldr	r3, [pc, #20]	; (8004974 <prvIdleTask+0x2c>)
 800495e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800496c:	e7f0      	b.n	8004950 <prvIdleTask+0x8>
 800496e:	bf00      	nop
 8004970:	2000085c 	.word	0x2000085c
 8004974:	e000ed04 	.word	0xe000ed04

08004978 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800497e:	2300      	movs	r3, #0
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	e00c      	b.n	800499e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4a12      	ldr	r2, [pc, #72]	; (80049d8 <prvInitialiseTaskLists+0x60>)
 8004990:	4413      	add	r3, r2
 8004992:	4618      	mov	r0, r3
 8004994:	f7fe fc36 	bl	8003204 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3301      	adds	r3, #1
 800499c:	607b      	str	r3, [r7, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b37      	cmp	r3, #55	; 0x37
 80049a2:	d9ef      	bls.n	8004984 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049a4:	480d      	ldr	r0, [pc, #52]	; (80049dc <prvInitialiseTaskLists+0x64>)
 80049a6:	f7fe fc2d 	bl	8003204 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049aa:	480d      	ldr	r0, [pc, #52]	; (80049e0 <prvInitialiseTaskLists+0x68>)
 80049ac:	f7fe fc2a 	bl	8003204 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049b0:	480c      	ldr	r0, [pc, #48]	; (80049e4 <prvInitialiseTaskLists+0x6c>)
 80049b2:	f7fe fc27 	bl	8003204 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049b6:	480c      	ldr	r0, [pc, #48]	; (80049e8 <prvInitialiseTaskLists+0x70>)
 80049b8:	f7fe fc24 	bl	8003204 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049bc:	480b      	ldr	r0, [pc, #44]	; (80049ec <prvInitialiseTaskLists+0x74>)
 80049be:	f7fe fc21 	bl	8003204 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <prvInitialiseTaskLists+0x78>)
 80049c4:	4a05      	ldr	r2, [pc, #20]	; (80049dc <prvInitialiseTaskLists+0x64>)
 80049c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <prvInitialiseTaskLists+0x7c>)
 80049ca:	4a05      	ldr	r2, [pc, #20]	; (80049e0 <prvInitialiseTaskLists+0x68>)
 80049cc:	601a      	str	r2, [r3, #0]
}
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	2000085c 	.word	0x2000085c
 80049dc:	20000cbc 	.word	0x20000cbc
 80049e0:	20000cd0 	.word	0x20000cd0
 80049e4:	20000cec 	.word	0x20000cec
 80049e8:	20000d00 	.word	0x20000d00
 80049ec:	20000d18 	.word	0x20000d18
 80049f0:	20000ce4 	.word	0x20000ce4
 80049f4:	20000ce8 	.word	0x20000ce8

080049f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049fe:	e019      	b.n	8004a34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a00:	f000 fe90 	bl	8005724 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a04:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <prvCheckTasksWaitingTermination+0x50>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe fc81 	bl	8003318 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a16:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <prvCheckTasksWaitingTermination+0x54>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	4a0b      	ldr	r2, [pc, #44]	; (8004a4c <prvCheckTasksWaitingTermination+0x54>)
 8004a1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <prvCheckTasksWaitingTermination+0x58>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	4a0a      	ldr	r2, [pc, #40]	; (8004a50 <prvCheckTasksWaitingTermination+0x58>)
 8004a28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a2a:	f000 feab 	bl	8005784 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f810 	bl	8004a54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <prvCheckTasksWaitingTermination+0x58>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e1      	bne.n	8004a00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000d00 	.word	0x20000d00
 8004a4c:	20000d2c 	.word	0x20000d2c
 8004a50:	20000d14 	.word	0x20000d14

08004a54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d108      	bne.n	8004a78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 f848 	bl	8005b00 <vPortFree>
				vPortFree( pxTCB );
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f001 f845 	bl	8005b00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a76:	e018      	b.n	8004aaa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d103      	bne.n	8004a8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f001 f83c 	bl	8005b00 <vPortFree>
	}
 8004a88:	e00f      	b.n	8004aaa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d00a      	beq.n	8004aaa <prvDeleteTCB+0x56>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	60fb      	str	r3, [r7, #12]
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <prvDeleteTCB+0x54>
	}
 8004aaa:	bf00      	nop
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aba:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <prvResetNextTaskUnblockTime+0x38>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d104      	bne.n	8004ace <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ac4:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <prvResetNextTaskUnblockTime+0x3c>)
 8004ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004acc:	e008      	b.n	8004ae0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ace:	4b07      	ldr	r3, [pc, #28]	; (8004aec <prvResetNextTaskUnblockTime+0x38>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	4a04      	ldr	r2, [pc, #16]	; (8004af0 <prvResetNextTaskUnblockTime+0x3c>)
 8004ade:	6013      	str	r3, [r2, #0]
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	20000ce4 	.word	0x20000ce4
 8004af0:	20000d4c 	.word	0x20000d4c

08004af4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004afa:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <xTaskGetSchedulerState+0x34>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d102      	bne.n	8004b08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b02:	2301      	movs	r3, #1
 8004b04:	607b      	str	r3, [r7, #4]
 8004b06:	e008      	b.n	8004b1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b08:	4b08      	ldr	r3, [pc, #32]	; (8004b2c <xTaskGetSchedulerState+0x38>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b10:	2302      	movs	r3, #2
 8004b12:	607b      	str	r3, [r7, #4]
 8004b14:	e001      	b.n	8004b1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b16:	2300      	movs	r3, #0
 8004b18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b1a:	687b      	ldr	r3, [r7, #4]
	}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	20000d38 	.word	0x20000d38
 8004b2c:	20000d54 	.word	0x20000d54

08004b30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d056      	beq.n	8004bf4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b46:	4b2e      	ldr	r3, [pc, #184]	; (8004c00 <xTaskPriorityDisinherit+0xd0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d00a      	beq.n	8004b66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	60fb      	str	r3, [r7, #12]
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	60bb      	str	r3, [r7, #8]
}
 8004b80:	bf00      	nop
 8004b82:	e7fe      	b.n	8004b82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b88:	1e5a      	subs	r2, r3, #1
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d02c      	beq.n	8004bf4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d128      	bne.n	8004bf4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fe fbb6 	bl	8003318 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <xTaskPriorityDisinherit+0xd4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d903      	bls.n	8004bd4 <xTaskPriorityDisinherit+0xa4>
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	4a0c      	ldr	r2, [pc, #48]	; (8004c04 <xTaskPriorityDisinherit+0xd4>)
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4a09      	ldr	r2, [pc, #36]	; (8004c08 <xTaskPriorityDisinherit+0xd8>)
 8004be2:	441a      	add	r2, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4619      	mov	r1, r3
 8004bea:	4610      	mov	r0, r2
 8004bec:	f7fe fb37 	bl	800325e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bf4:	697b      	ldr	r3, [r7, #20]
	}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000858 	.word	0x20000858
 8004c04:	20000d34 	.word	0x20000d34
 8004c08:	2000085c 	.word	0x2000085c

08004c0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c16:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <prvAddCurrentTaskToDelayedList+0x90>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c1c:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe fb78 	bl	8003318 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2e:	d10a      	bne.n	8004c46 <prvAddCurrentTaskToDelayedList+0x3a>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d007      	beq.n	8004c46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c36:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4819      	ldr	r0, [pc, #100]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c40:	f7fe fb0d 	bl	800325e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c44:	e026      	b.n	8004c94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c4e:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d209      	bcs.n	8004c72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c5e:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	f7fe fb1b 	bl	80032a6 <vListInsert>
}
 8004c70:	e010      	b.n	8004c94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c72:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	f7fe fb11 	bl	80032a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c84:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d202      	bcs.n	8004c94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c8e:	4a08      	ldr	r2, [pc, #32]	; (8004cb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	6013      	str	r3, [r2, #0]
}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20000d30 	.word	0x20000d30
 8004ca0:	20000858 	.word	0x20000858
 8004ca4:	20000d18 	.word	0x20000d18
 8004ca8:	20000ce8 	.word	0x20000ce8
 8004cac:	20000ce4 	.word	0x20000ce4
 8004cb0:	20000d4c 	.word	0x20000d4c

08004cb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08a      	sub	sp, #40	; 0x28
 8004cb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004cbe:	f000 fba1 	bl	8005404 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004cc2:	4b1c      	ldr	r3, [pc, #112]	; (8004d34 <xTimerCreateTimerTask+0x80>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d021      	beq.n	8004d0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004cd2:	1d3a      	adds	r2, r7, #4
 8004cd4:	f107 0108 	add.w	r1, r7, #8
 8004cd8:	f107 030c 	add.w	r3, r7, #12
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7fe fa77 	bl	80031d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	9202      	str	r2, [sp, #8]
 8004cea:	9301      	str	r3, [sp, #4]
 8004cec:	2302      	movs	r3, #2
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	460a      	mov	r2, r1
 8004cf4:	4910      	ldr	r1, [pc, #64]	; (8004d38 <xTimerCreateTimerTask+0x84>)
 8004cf6:	4811      	ldr	r0, [pc, #68]	; (8004d3c <xTimerCreateTimerTask+0x88>)
 8004cf8:	f7ff f8de 	bl	8003eb8 <xTaskCreateStatic>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	4a10      	ldr	r2, [pc, #64]	; (8004d40 <xTimerCreateTimerTask+0x8c>)
 8004d00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d02:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <xTimerCreateTimerTask+0x8c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10a      	bne.n	8004d2a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	613b      	str	r3, [r7, #16]
}
 8004d26:	bf00      	nop
 8004d28:	e7fe      	b.n	8004d28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d2a:	697b      	ldr	r3, [r7, #20]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	20000d88 	.word	0x20000d88
 8004d38:	08006d54 	.word	0x08006d54
 8004d3c:	08004fad 	.word	0x08004fad
 8004d40:	20000d8c 	.word	0x20000d8c

08004d44 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b088      	sub	sp, #32
 8004d48:	af02      	add	r7, sp, #8
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004d52:	202c      	movs	r0, #44	; 0x2c
 8004d54:	f000 fe08 	bl	8005968 <pvPortMalloc>
 8004d58:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00d      	beq.n	8004d7c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f843 	bl	8004e02 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004d7c:	697b      	ldr	r3, [r7, #20]
	}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b08a      	sub	sp, #40	; 0x28
 8004d8a:	af02      	add	r7, sp, #8
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004d94:	232c      	movs	r3, #44	; 0x2c
 8004d96:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2b2c      	cmp	r3, #44	; 0x2c
 8004d9c:	d00a      	beq.n	8004db4 <xTimerCreateStatic+0x2e>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	61bb      	str	r3, [r7, #24]
}
 8004db0:	bf00      	nop
 8004db2:	e7fe      	b.n	8004db2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004db4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <xTimerCreateStatic+0x4c>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	617b      	str	r3, [r7, #20]
}
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00d      	beq.n	8004df8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	9301      	str	r3, [sp, #4]
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f805 	bl	8004e02 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004df8:	69fb      	ldr	r3, [r7, #28]
	}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3720      	adds	r7, #32
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b086      	sub	sp, #24
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	617b      	str	r3, [r7, #20]
}
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01e      	beq.n	8004e70 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004e32:	f000 fae7 	bl	8005404 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	6a3a      	ldr	r2, [r7, #32]
 8004e4c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	3304      	adds	r3, #4
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fe f9f6 	bl	8003244 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d008      	beq.n	8004e70 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e64:	f043 0304 	orr.w	r3, r3, #4
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004e70:	bf00      	nop
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	623b      	str	r3, [r7, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ea6:	4b1a      	ldr	r3, [pc, #104]	; (8004f10 <xTimerGenericCommand+0x98>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d02a      	beq.n	8004f04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b05      	cmp	r3, #5
 8004ebe:	dc18      	bgt.n	8004ef2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ec0:	f7ff fe18 	bl	8004af4 <xTaskGetSchedulerState>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d109      	bne.n	8004ede <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004eca:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <xTimerGenericCommand+0x98>)
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	f107 0110 	add.w	r1, r7, #16
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed6:	f7fe fb87 	bl	80035e8 <xQueueGenericSend>
 8004eda:	6278      	str	r0, [r7, #36]	; 0x24
 8004edc:	e012      	b.n	8004f04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ede:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <xTimerGenericCommand+0x98>)
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	f107 0110 	add.w	r1, r7, #16
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f7fe fb7d 	bl	80035e8 <xQueueGenericSend>
 8004eee:	6278      	str	r0, [r7, #36]	; 0x24
 8004ef0:	e008      	b.n	8004f04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ef2:	4b07      	ldr	r3, [pc, #28]	; (8004f10 <xTimerGenericCommand+0x98>)
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	f107 0110 	add.w	r1, r7, #16
 8004efa:	2300      	movs	r3, #0
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	f7fe fc71 	bl	80037e4 <xQueueGenericSendFromISR>
 8004f02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3728      	adds	r7, #40	; 0x28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000d88 	.word	0x20000d88

08004f14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f1e:	4b22      	ldr	r3, [pc, #136]	; (8004fa8 <prvProcessExpiredTimer+0x94>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fe f9f3 	bl	8003318 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d022      	beq.n	8004f86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	699a      	ldr	r2, [r3, #24]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	18d1      	adds	r1, r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	6978      	ldr	r0, [r7, #20]
 8004f4e:	f000 f8d1 	bl	80050f4 <prvInsertTimerInActiveList>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01f      	beq.n	8004f98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f58:	2300      	movs	r3, #0
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	2100      	movs	r1, #0
 8004f62:	6978      	ldr	r0, [r7, #20]
 8004f64:	f7ff ff88 	bl	8004e78 <xTimerGenericCommand>
 8004f68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d113      	bne.n	8004f98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	60fb      	str	r3, [r7, #12]
}
 8004f82:	bf00      	nop
 8004f84:	e7fe      	b.n	8004f84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	6978      	ldr	r0, [r7, #20]
 8004f9e:	4798      	blx	r3
}
 8004fa0:	bf00      	nop
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000d80 	.word	0x20000d80

08004fac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fb4:	f107 0308 	add.w	r3, r7, #8
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 f857 	bl	800506c <prvGetNextExpireTime>
 8004fbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f803 	bl	8004fd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004fca:	f000 f8d5 	bl	8005178 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fce:	e7f1      	b.n	8004fb4 <prvTimerTask+0x8>

08004fd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004fda:	f7ff f9a9 	bl	8004330 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fde:	f107 0308 	add.w	r3, r7, #8
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 f866 	bl	80050b4 <prvSampleTimeNow>
 8004fe8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d130      	bne.n	8005052 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <prvProcessTimerOrBlockTask+0x3c>
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d806      	bhi.n	800500c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ffe:	f7ff f9a5 	bl	800434c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005002:	68f9      	ldr	r1, [r7, #12]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff ff85 	bl	8004f14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800500a:	e024      	b.n	8005056 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d008      	beq.n	8005024 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005012:	4b13      	ldr	r3, [pc, #76]	; (8005060 <prvProcessTimerOrBlockTask+0x90>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <prvProcessTimerOrBlockTask+0x50>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <prvProcessTimerOrBlockTask+0x52>
 8005020:	2300      	movs	r3, #0
 8005022:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005024:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <prvProcessTimerOrBlockTask+0x94>)
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	4619      	mov	r1, r3
 8005032:	f7fe ff0d 	bl	8003e50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005036:	f7ff f989 	bl	800434c <xTaskResumeAll>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <prvProcessTimerOrBlockTask+0x98>)
 8005042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	f3bf 8f6f 	isb	sy
}
 8005050:	e001      	b.n	8005056 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005052:	f7ff f97b 	bl	800434c <xTaskResumeAll>
}
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000d84 	.word	0x20000d84
 8005064:	20000d88 	.word	0x20000d88
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005074:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <prvGetNextExpireTime+0x44>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <prvGetNextExpireTime+0x16>
 800507e:	2201      	movs	r2, #1
 8005080:	e000      	b.n	8005084 <prvGetNextExpireTime+0x18>
 8005082:	2200      	movs	r2, #0
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d105      	bne.n	800509c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005090:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <prvGetNextExpireTime+0x44>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	e001      	b.n	80050a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80050a0:	68fb      	ldr	r3, [r7, #12]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000d80 	.word	0x20000d80

080050b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80050bc:	f7ff f9e4 	bl	8004488 <xTaskGetTickCount>
 80050c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80050c2:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <prvSampleTimeNow+0x3c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d205      	bcs.n	80050d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80050cc:	f000 f936 	bl	800533c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e002      	b.n	80050de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80050de:	4a04      	ldr	r2, [pc, #16]	; (80050f0 <prvSampleTimeNow+0x3c>)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80050e4:	68fb      	ldr	r3, [r7, #12]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000d90 	.word	0x20000d90

080050f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d812      	bhi.n	8005140 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	1ad2      	subs	r2, r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	429a      	cmp	r2, r3
 8005126:	d302      	bcc.n	800512e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005128:	2301      	movs	r3, #1
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	e01b      	b.n	8005166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800512e:	4b10      	ldr	r3, [pc, #64]	; (8005170 <prvInsertTimerInActiveList+0x7c>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3304      	adds	r3, #4
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f7fe f8b4 	bl	80032a6 <vListInsert>
 800513e:	e012      	b.n	8005166 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d206      	bcs.n	8005156 <prvInsertTimerInActiveList+0x62>
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d302      	bcc.n	8005156 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005150:	2301      	movs	r3, #1
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	e007      	b.n	8005166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005156:	4b07      	ldr	r3, [pc, #28]	; (8005174 <prvInsertTimerInActiveList+0x80>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3304      	adds	r3, #4
 800515e:	4619      	mov	r1, r3
 8005160:	4610      	mov	r0, r2
 8005162:	f7fe f8a0 	bl	80032a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005166:	697b      	ldr	r3, [r7, #20]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000d84 	.word	0x20000d84
 8005174:	20000d80 	.word	0x20000d80

08005178 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08e      	sub	sp, #56	; 0x38
 800517c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800517e:	e0ca      	b.n	8005316 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	da18      	bge.n	80051b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005186:	1d3b      	adds	r3, r7, #4
 8005188:	3304      	adds	r3, #4
 800518a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800518c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	61fb      	str	r3, [r7, #28]
}
 80051a4:	bf00      	nop
 80051a6:	e7fe      	b.n	80051a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80051a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ae:	6850      	ldr	r0, [r2, #4]
 80051b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051b2:	6892      	ldr	r2, [r2, #8]
 80051b4:	4611      	mov	r1, r2
 80051b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f2c0 80aa 	blt.w	8005314 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	3304      	adds	r3, #4
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fe f8a1 	bl	8003318 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051d6:	463b      	mov	r3, r7
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff ff6b 	bl	80050b4 <prvSampleTimeNow>
 80051de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b09      	cmp	r3, #9
 80051e4:	f200 8097 	bhi.w	8005316 <prvProcessReceivedCommands+0x19e>
 80051e8:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <prvProcessReceivedCommands+0x78>)
 80051ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ee:	bf00      	nop
 80051f0:	08005219 	.word	0x08005219
 80051f4:	08005219 	.word	0x08005219
 80051f8:	08005219 	.word	0x08005219
 80051fc:	0800528d 	.word	0x0800528d
 8005200:	080052a1 	.word	0x080052a1
 8005204:	080052eb 	.word	0x080052eb
 8005208:	08005219 	.word	0x08005219
 800520c:	08005219 	.word	0x08005219
 8005210:	0800528d 	.word	0x0800528d
 8005214:	080052a1 	.word	0x080052a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800521e:	f043 0301 	orr.w	r3, r3, #1
 8005222:	b2da      	uxtb	r2, r3
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	18d1      	adds	r1, r2, r3
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005238:	f7ff ff5c 	bl	80050f4 <prvInsertTimerInActiveList>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d069      	beq.n	8005316 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005248:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	d05e      	beq.n	8005316 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	441a      	add	r2, r3
 8005260:	2300      	movs	r3, #0
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	2300      	movs	r3, #0
 8005266:	2100      	movs	r1, #0
 8005268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800526a:	f7ff fe05 	bl	8004e78 <xTimerGenericCommand>
 800526e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d14f      	bne.n	8005316 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	61bb      	str	r3, [r7, #24]
}
 8005288:	bf00      	nop
 800528a:	e7fe      	b.n	800528a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005292:	f023 0301 	bic.w	r3, r3, #1
 8005296:	b2da      	uxtb	r2, r3
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800529e:	e03a      	b.n	8005316 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	617b      	str	r3, [r7, #20]
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	699a      	ldr	r2, [r3, #24]
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	18d1      	adds	r1, r2, r3
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052e4:	f7ff ff06 	bl	80050f4 <prvInsertTimerInActiveList>
					break;
 80052e8:	e015      	b.n	8005316 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80052ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d103      	bne.n	8005300 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80052f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052fa:	f000 fc01 	bl	8005b00 <vPortFree>
 80052fe:	e00a      	b.n	8005316 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005306:	f023 0301 	bic.w	r3, r3, #1
 800530a:	b2da      	uxtb	r2, r3
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005312:	e000      	b.n	8005316 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005314:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005316:	4b08      	ldr	r3, [pc, #32]	; (8005338 <prvProcessReceivedCommands+0x1c0>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	1d39      	adds	r1, r7, #4
 800531c:	2200      	movs	r2, #0
 800531e:	4618      	mov	r0, r3
 8005320:	f7fe fafc 	bl	800391c <xQueueReceive>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	f47f af2a 	bne.w	8005180 <prvProcessReceivedCommands+0x8>
	}
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	3730      	adds	r7, #48	; 0x30
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000d88 	.word	0x20000d88

0800533c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005342:	e048      	b.n	80053d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005344:	4b2d      	ldr	r3, [pc, #180]	; (80053fc <prvSwitchTimerLists+0xc0>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800534e:	4b2b      	ldr	r3, [pc, #172]	; (80053fc <prvSwitchTimerLists+0xc0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3304      	adds	r3, #4
 800535c:	4618      	mov	r0, r3
 800535e:	f7fd ffdb 	bl	8003318 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d02e      	beq.n	80053d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4413      	add	r3, r2
 8005380:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	429a      	cmp	r2, r3
 8005388:	d90e      	bls.n	80053a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005396:	4b19      	ldr	r3, [pc, #100]	; (80053fc <prvSwitchTimerLists+0xc0>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3304      	adds	r3, #4
 800539e:	4619      	mov	r1, r3
 80053a0:	4610      	mov	r0, r2
 80053a2:	f7fd ff80 	bl	80032a6 <vListInsert>
 80053a6:	e016      	b.n	80053d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053a8:	2300      	movs	r3, #0
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	2300      	movs	r3, #0
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	2100      	movs	r1, #0
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f7ff fd60 	bl	8004e78 <xTimerGenericCommand>
 80053b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10a      	bne.n	80053d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	603b      	str	r3, [r7, #0]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <prvSwitchTimerLists+0xc0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1b1      	bne.n	8005344 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <prvSwitchTimerLists+0xc0>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80053e6:	4b06      	ldr	r3, [pc, #24]	; (8005400 <prvSwitchTimerLists+0xc4>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a04      	ldr	r2, [pc, #16]	; (80053fc <prvSwitchTimerLists+0xc0>)
 80053ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80053ee:	4a04      	ldr	r2, [pc, #16]	; (8005400 <prvSwitchTimerLists+0xc4>)
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	6013      	str	r3, [r2, #0]
}
 80053f4:	bf00      	nop
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20000d80 	.word	0x20000d80
 8005400:	20000d84 	.word	0x20000d84

08005404 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800540a:	f000 f98b 	bl	8005724 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800540e:	4b15      	ldr	r3, [pc, #84]	; (8005464 <prvCheckForValidListAndQueue+0x60>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d120      	bne.n	8005458 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005416:	4814      	ldr	r0, [pc, #80]	; (8005468 <prvCheckForValidListAndQueue+0x64>)
 8005418:	f7fd fef4 	bl	8003204 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800541c:	4813      	ldr	r0, [pc, #76]	; (800546c <prvCheckForValidListAndQueue+0x68>)
 800541e:	f7fd fef1 	bl	8003204 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005422:	4b13      	ldr	r3, [pc, #76]	; (8005470 <prvCheckForValidListAndQueue+0x6c>)
 8005424:	4a10      	ldr	r2, [pc, #64]	; (8005468 <prvCheckForValidListAndQueue+0x64>)
 8005426:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005428:	4b12      	ldr	r3, [pc, #72]	; (8005474 <prvCheckForValidListAndQueue+0x70>)
 800542a:	4a10      	ldr	r2, [pc, #64]	; (800546c <prvCheckForValidListAndQueue+0x68>)
 800542c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800542e:	2300      	movs	r3, #0
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	4b11      	ldr	r3, [pc, #68]	; (8005478 <prvCheckForValidListAndQueue+0x74>)
 8005434:	4a11      	ldr	r2, [pc, #68]	; (800547c <prvCheckForValidListAndQueue+0x78>)
 8005436:	2110      	movs	r1, #16
 8005438:	200a      	movs	r0, #10
 800543a:	f7fd ffff 	bl	800343c <xQueueGenericCreateStatic>
 800543e:	4603      	mov	r3, r0
 8005440:	4a08      	ldr	r2, [pc, #32]	; (8005464 <prvCheckForValidListAndQueue+0x60>)
 8005442:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005444:	4b07      	ldr	r3, [pc, #28]	; (8005464 <prvCheckForValidListAndQueue+0x60>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800544c:	4b05      	ldr	r3, [pc, #20]	; (8005464 <prvCheckForValidListAndQueue+0x60>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	490b      	ldr	r1, [pc, #44]	; (8005480 <prvCheckForValidListAndQueue+0x7c>)
 8005452:	4618      	mov	r0, r3
 8005454:	f7fe fcd2 	bl	8003dfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005458:	f000 f994 	bl	8005784 <vPortExitCritical>
}
 800545c:	bf00      	nop
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000d88 	.word	0x20000d88
 8005468:	20000d58 	.word	0x20000d58
 800546c:	20000d6c 	.word	0x20000d6c
 8005470:	20000d80 	.word	0x20000d80
 8005474:	20000d84 	.word	0x20000d84
 8005478:	20000e34 	.word	0x20000e34
 800547c:	20000d94 	.word	0x20000d94
 8005480:	08006d5c 	.word	0x08006d5c

08005484 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10a      	bne.n	80054ac <pvTimerGetTimerID+0x28>
	__asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	60fb      	str	r3, [r7, #12]
}
 80054a8:	bf00      	nop
 80054aa:	e7fe      	b.n	80054aa <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80054ac:	f000 f93a 	bl	8005724 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80054b6:	f000 f965 	bl	8005784 <vPortExitCritical>

	return pvReturn;
 80054ba:	693b      	ldr	r3, [r7, #16]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	3b04      	subs	r3, #4
 80054d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3b04      	subs	r3, #4
 80054e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f023 0201 	bic.w	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3b04      	subs	r3, #4
 80054f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054f4:	4a0c      	ldr	r2, [pc, #48]	; (8005528 <pxPortInitialiseStack+0x64>)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3b14      	subs	r3, #20
 80054fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3b04      	subs	r3, #4
 800550a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f06f 0202 	mvn.w	r2, #2
 8005512:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3b20      	subs	r3, #32
 8005518:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800551a:	68fb      	ldr	r3, [r7, #12]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	0800552d 	.word	0x0800552d

0800552c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005536:	4b12      	ldr	r3, [pc, #72]	; (8005580 <prvTaskExitError+0x54>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553e:	d00a      	beq.n	8005556 <prvTaskExitError+0x2a>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	60fb      	str	r3, [r7, #12]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <prvTaskExitError+0x28>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	60bb      	str	r3, [r7, #8]
}
 8005568:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800556a:	bf00      	nop
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0fc      	beq.n	800556c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	2000000c 	.word	0x2000000c
	...

08005590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005590:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <pxCurrentTCBConst2>)
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	6808      	ldr	r0, [r1, #0]
 8005596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559a:	f380 8809 	msr	PSP, r0
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f04f 0000 	mov.w	r0, #0
 80055a6:	f380 8811 	msr	BASEPRI, r0
 80055aa:	4770      	bx	lr
 80055ac:	f3af 8000 	nop.w

080055b0 <pxCurrentTCBConst2>:
 80055b0:	20000858 	.word	0x20000858
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop

080055b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055b8:	4808      	ldr	r0, [pc, #32]	; (80055dc <prvPortStartFirstTask+0x24>)
 80055ba:	6800      	ldr	r0, [r0, #0]
 80055bc:	6800      	ldr	r0, [r0, #0]
 80055be:	f380 8808 	msr	MSP, r0
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f380 8814 	msr	CONTROL, r0
 80055ca:	b662      	cpsie	i
 80055cc:	b661      	cpsie	f
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	df00      	svc	0
 80055d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055da:	bf00      	nop
 80055dc:	e000ed08 	.word	0xe000ed08

080055e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055e6:	4b46      	ldr	r3, [pc, #280]	; (8005700 <xPortStartScheduler+0x120>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a46      	ldr	r2, [pc, #280]	; (8005704 <xPortStartScheduler+0x124>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d10a      	bne.n	8005606 <xPortStartScheduler+0x26>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	613b      	str	r3, [r7, #16]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005606:	4b3e      	ldr	r3, [pc, #248]	; (8005700 <xPortStartScheduler+0x120>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a3f      	ldr	r2, [pc, #252]	; (8005708 <xPortStartScheduler+0x128>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d10a      	bne.n	8005626 <xPortStartScheduler+0x46>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	60fb      	str	r3, [r7, #12]
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005626:	4b39      	ldr	r3, [pc, #228]	; (800570c <xPortStartScheduler+0x12c>)
 8005628:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	22ff      	movs	r2, #255	; 0xff
 8005636:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005648:	b2da      	uxtb	r2, r3
 800564a:	4b31      	ldr	r3, [pc, #196]	; (8005710 <xPortStartScheduler+0x130>)
 800564c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800564e:	4b31      	ldr	r3, [pc, #196]	; (8005714 <xPortStartScheduler+0x134>)
 8005650:	2207      	movs	r2, #7
 8005652:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005654:	e009      	b.n	800566a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005656:	4b2f      	ldr	r3, [pc, #188]	; (8005714 <xPortStartScheduler+0x134>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3b01      	subs	r3, #1
 800565c:	4a2d      	ldr	r2, [pc, #180]	; (8005714 <xPortStartScheduler+0x134>)
 800565e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	b2db      	uxtb	r3, r3
 8005668:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005672:	2b80      	cmp	r3, #128	; 0x80
 8005674:	d0ef      	beq.n	8005656 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005676:	4b27      	ldr	r3, [pc, #156]	; (8005714 <xPortStartScheduler+0x134>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f1c3 0307 	rsb	r3, r3, #7
 800567e:	2b04      	cmp	r3, #4
 8005680:	d00a      	beq.n	8005698 <xPortStartScheduler+0xb8>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	60bb      	str	r3, [r7, #8]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005698:	4b1e      	ldr	r3, [pc, #120]	; (8005714 <xPortStartScheduler+0x134>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	4a1d      	ldr	r2, [pc, #116]	; (8005714 <xPortStartScheduler+0x134>)
 80056a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056a2:	4b1c      	ldr	r3, [pc, #112]	; (8005714 <xPortStartScheduler+0x134>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056aa:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <xPortStartScheduler+0x134>)
 80056ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056b6:	4b18      	ldr	r3, [pc, #96]	; (8005718 <xPortStartScheduler+0x138>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a17      	ldr	r2, [pc, #92]	; (8005718 <xPortStartScheduler+0x138>)
 80056bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056c2:	4b15      	ldr	r3, [pc, #84]	; (8005718 <xPortStartScheduler+0x138>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a14      	ldr	r2, [pc, #80]	; (8005718 <xPortStartScheduler+0x138>)
 80056c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80056cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056ce:	f000 f8dd 	bl	800588c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056d2:	4b12      	ldr	r3, [pc, #72]	; (800571c <xPortStartScheduler+0x13c>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80056d8:	f000 f8fc 	bl	80058d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80056dc:	4b10      	ldr	r3, [pc, #64]	; (8005720 <xPortStartScheduler+0x140>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a0f      	ldr	r2, [pc, #60]	; (8005720 <xPortStartScheduler+0x140>)
 80056e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80056e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056e8:	f7ff ff66 	bl	80055b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056ec:	f7fe ff96 	bl	800461c <vTaskSwitchContext>
	prvTaskExitError();
 80056f0:	f7ff ff1c 	bl	800552c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	e000ed00 	.word	0xe000ed00
 8005704:	410fc271 	.word	0x410fc271
 8005708:	410fc270 	.word	0x410fc270
 800570c:	e000e400 	.word	0xe000e400
 8005710:	20000e84 	.word	0x20000e84
 8005714:	20000e88 	.word	0x20000e88
 8005718:	e000ed20 	.word	0xe000ed20
 800571c:	2000000c 	.word	0x2000000c
 8005720:	e000ef34 	.word	0xe000ef34

08005724 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
	__asm volatile
 800572a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	607b      	str	r3, [r7, #4]
}
 800573c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800573e:	4b0f      	ldr	r3, [pc, #60]	; (800577c <vPortEnterCritical+0x58>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3301      	adds	r3, #1
 8005744:	4a0d      	ldr	r2, [pc, #52]	; (800577c <vPortEnterCritical+0x58>)
 8005746:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005748:	4b0c      	ldr	r3, [pc, #48]	; (800577c <vPortEnterCritical+0x58>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d10f      	bne.n	8005770 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005750:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <vPortEnterCritical+0x5c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <vPortEnterCritical+0x4c>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	603b      	str	r3, [r7, #0]
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <vPortEnterCritical+0x4a>
	}
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	2000000c 	.word	0x2000000c
 8005780:	e000ed04 	.word	0xe000ed04

08005784 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800578a:	4b12      	ldr	r3, [pc, #72]	; (80057d4 <vPortExitCritical+0x50>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <vPortExitCritical+0x24>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	607b      	str	r3, [r7, #4]
}
 80057a4:	bf00      	nop
 80057a6:	e7fe      	b.n	80057a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057a8:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <vPortExitCritical+0x50>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <vPortExitCritical+0x50>)
 80057b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057b2:	4b08      	ldr	r3, [pc, #32]	; (80057d4 <vPortExitCritical+0x50>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d105      	bne.n	80057c6 <vPortExitCritical+0x42>
 80057ba:	2300      	movs	r3, #0
 80057bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	f383 8811 	msr	BASEPRI, r3
}
 80057c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	2000000c 	.word	0x2000000c
	...

080057e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057e0:	f3ef 8009 	mrs	r0, PSP
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	4b15      	ldr	r3, [pc, #84]	; (8005840 <pxCurrentTCBConst>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	f01e 0f10 	tst.w	lr, #16
 80057f0:	bf08      	it	eq
 80057f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80057f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fa:	6010      	str	r0, [r2, #0]
 80057fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005804:	f380 8811 	msr	BASEPRI, r0
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f7fe ff04 	bl	800461c <vTaskSwitchContext>
 8005814:	f04f 0000 	mov.w	r0, #0
 8005818:	f380 8811 	msr	BASEPRI, r0
 800581c:	bc09      	pop	{r0, r3}
 800581e:	6819      	ldr	r1, [r3, #0]
 8005820:	6808      	ldr	r0, [r1, #0]
 8005822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005826:	f01e 0f10 	tst.w	lr, #16
 800582a:	bf08      	it	eq
 800582c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005830:	f380 8809 	msr	PSP, r0
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	f3af 8000 	nop.w

08005840 <pxCurrentTCBConst>:
 8005840:	20000858 	.word	0x20000858
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop

08005848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	607b      	str	r3, [r7, #4]
}
 8005860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005862:	f7fe fe21 	bl	80044a8 <xTaskIncrementTick>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800586c:	4b06      	ldr	r3, [pc, #24]	; (8005888 <xPortSysTickHandler+0x40>)
 800586e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	2300      	movs	r3, #0
 8005876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	f383 8811 	msr	BASEPRI, r3
}
 800587e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005880:	bf00      	nop
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	e000ed04 	.word	0xe000ed04

0800588c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <vPortSetupTimerInterrupt+0x34>)
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005896:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <vPortSetupTimerInterrupt+0x38>)
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800589c:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <vPortSetupTimerInterrupt+0x3c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a0a      	ldr	r2, [pc, #40]	; (80058cc <vPortSetupTimerInterrupt+0x40>)
 80058a2:	fba2 2303 	umull	r2, r3, r2, r3
 80058a6:	099b      	lsrs	r3, r3, #6
 80058a8:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <vPortSetupTimerInterrupt+0x44>)
 80058aa:	3b01      	subs	r3, #1
 80058ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058ae:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <vPortSetupTimerInterrupt+0x34>)
 80058b0:	2207      	movs	r2, #7
 80058b2:	601a      	str	r2, [r3, #0]
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	e000e010 	.word	0xe000e010
 80058c4:	e000e018 	.word	0xe000e018
 80058c8:	20000000 	.word	0x20000000
 80058cc:	10624dd3 	.word	0x10624dd3
 80058d0:	e000e014 	.word	0xe000e014

080058d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80058e4 <vPortEnableVFP+0x10>
 80058d8:	6801      	ldr	r1, [r0, #0]
 80058da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058de:	6001      	str	r1, [r0, #0]
 80058e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058e2:	bf00      	nop
 80058e4:	e000ed88 	.word	0xe000ed88

080058e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80058ee:	f3ef 8305 	mrs	r3, IPSR
 80058f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b0f      	cmp	r3, #15
 80058f8:	d914      	bls.n	8005924 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80058fa:	4a17      	ldr	r2, [pc, #92]	; (8005958 <vPortValidateInterruptPriority+0x70>)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005904:	4b15      	ldr	r3, [pc, #84]	; (800595c <vPortValidateInterruptPriority+0x74>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	7afa      	ldrb	r2, [r7, #11]
 800590a:	429a      	cmp	r2, r3
 800590c:	d20a      	bcs.n	8005924 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	607b      	str	r3, [r7, #4]
}
 8005920:	bf00      	nop
 8005922:	e7fe      	b.n	8005922 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005924:	4b0e      	ldr	r3, [pc, #56]	; (8005960 <vPortValidateInterruptPriority+0x78>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800592c:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <vPortValidateInterruptPriority+0x7c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d90a      	bls.n	800594a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	603b      	str	r3, [r7, #0]
}
 8005946:	bf00      	nop
 8005948:	e7fe      	b.n	8005948 <vPortValidateInterruptPriority+0x60>
	}
 800594a:	bf00      	nop
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	e000e3f0 	.word	0xe000e3f0
 800595c:	20000e84 	.word	0x20000e84
 8005960:	e000ed0c 	.word	0xe000ed0c
 8005964:	20000e88 	.word	0x20000e88

08005968 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	; 0x28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005970:	2300      	movs	r3, #0
 8005972:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005974:	f7fe fcdc 	bl	8004330 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005978:	4b5b      	ldr	r3, [pc, #364]	; (8005ae8 <pvPortMalloc+0x180>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005980:	f000 f920 	bl	8005bc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005984:	4b59      	ldr	r3, [pc, #356]	; (8005aec <pvPortMalloc+0x184>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4013      	ands	r3, r2
 800598c:	2b00      	cmp	r3, #0
 800598e:	f040 8093 	bne.w	8005ab8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01d      	beq.n	80059d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005998:	2208      	movs	r2, #8
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4413      	add	r3, r2
 800599e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f003 0307 	and.w	r3, r3, #7
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d014      	beq.n	80059d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f023 0307 	bic.w	r3, r3, #7
 80059b0:	3308      	adds	r3, #8
 80059b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <pvPortMalloc+0x6c>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	617b      	str	r3, [r7, #20]
}
 80059d0:	bf00      	nop
 80059d2:	e7fe      	b.n	80059d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d06e      	beq.n	8005ab8 <pvPortMalloc+0x150>
 80059da:	4b45      	ldr	r3, [pc, #276]	; (8005af0 <pvPortMalloc+0x188>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d869      	bhi.n	8005ab8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059e4:	4b43      	ldr	r3, [pc, #268]	; (8005af4 <pvPortMalloc+0x18c>)
 80059e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059e8:	4b42      	ldr	r3, [pc, #264]	; (8005af4 <pvPortMalloc+0x18c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059ee:	e004      	b.n	80059fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d903      	bls.n	8005a0c <pvPortMalloc+0xa4>
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1f1      	bne.n	80059f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a0c:	4b36      	ldr	r3, [pc, #216]	; (8005ae8 <pvPortMalloc+0x180>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d050      	beq.n	8005ab8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2208      	movs	r2, #8
 8005a1c:	4413      	add	r3, r2
 8005a1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	1ad2      	subs	r2, r2, r3
 8005a30:	2308      	movs	r3, #8
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d91f      	bls.n	8005a78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <pvPortMalloc+0xf8>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	613b      	str	r3, [r7, #16]
}
 8005a5c:	bf00      	nop
 8005a5e:	e7fe      	b.n	8005a5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	1ad2      	subs	r2, r2, r3
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a72:	69b8      	ldr	r0, [r7, #24]
 8005a74:	f000 f908 	bl	8005c88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a78:	4b1d      	ldr	r3, [pc, #116]	; (8005af0 <pvPortMalloc+0x188>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	4a1b      	ldr	r2, [pc, #108]	; (8005af0 <pvPortMalloc+0x188>)
 8005a84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a86:	4b1a      	ldr	r3, [pc, #104]	; (8005af0 <pvPortMalloc+0x188>)
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	4b1b      	ldr	r3, [pc, #108]	; (8005af8 <pvPortMalloc+0x190>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d203      	bcs.n	8005a9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a92:	4b17      	ldr	r3, [pc, #92]	; (8005af0 <pvPortMalloc+0x188>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a18      	ldr	r2, [pc, #96]	; (8005af8 <pvPortMalloc+0x190>)
 8005a98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	4b13      	ldr	r3, [pc, #76]	; (8005aec <pvPortMalloc+0x184>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005aae:	4b13      	ldr	r3, [pc, #76]	; (8005afc <pvPortMalloc+0x194>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	4a11      	ldr	r2, [pc, #68]	; (8005afc <pvPortMalloc+0x194>)
 8005ab6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ab8:	f7fe fc48 	bl	800434c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <pvPortMalloc+0x174>
	__asm volatile
 8005ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	60fb      	str	r3, [r7, #12]
}
 8005ad8:	bf00      	nop
 8005ada:	e7fe      	b.n	8005ada <pvPortMalloc+0x172>
	return pvReturn;
 8005adc:	69fb      	ldr	r3, [r7, #28]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3728      	adds	r7, #40	; 0x28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20004a94 	.word	0x20004a94
 8005aec:	20004aa8 	.word	0x20004aa8
 8005af0:	20004a98 	.word	0x20004a98
 8005af4:	20004a8c 	.word	0x20004a8c
 8005af8:	20004a9c 	.word	0x20004a9c
 8005afc:	20004aa0 	.word	0x20004aa0

08005b00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d04d      	beq.n	8005bae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b12:	2308      	movs	r3, #8
 8005b14:	425b      	negs	r3, r3
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4413      	add	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	4b24      	ldr	r3, [pc, #144]	; (8005bb8 <vPortFree+0xb8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10a      	bne.n	8005b44 <vPortFree+0x44>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	60fb      	str	r3, [r7, #12]
}
 8005b40:	bf00      	nop
 8005b42:	e7fe      	b.n	8005b42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <vPortFree+0x62>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	60bb      	str	r3, [r7, #8]
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <vPortFree+0xb8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01e      	beq.n	8005bae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d11a      	bne.n	8005bae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	4b0e      	ldr	r3, [pc, #56]	; (8005bb8 <vPortFree+0xb8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	43db      	mvns	r3, r3
 8005b82:	401a      	ands	r2, r3
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b88:	f7fe fbd2 	bl	8004330 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <vPortFree+0xbc>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4413      	add	r3, r2
 8005b96:	4a09      	ldr	r2, [pc, #36]	; (8005bbc <vPortFree+0xbc>)
 8005b98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b9a:	6938      	ldr	r0, [r7, #16]
 8005b9c:	f000 f874 	bl	8005c88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ba0:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <vPortFree+0xc0>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	4a06      	ldr	r2, [pc, #24]	; (8005bc0 <vPortFree+0xc0>)
 8005ba8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005baa:	f7fe fbcf 	bl	800434c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005bae:	bf00      	nop
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20004aa8 	.word	0x20004aa8
 8005bbc:	20004a98 	.word	0x20004a98
 8005bc0:	20004aa4 	.word	0x20004aa4

08005bc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005bca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005bce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005bd0:	4b27      	ldr	r3, [pc, #156]	; (8005c70 <prvHeapInit+0xac>)
 8005bd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00c      	beq.n	8005bf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3307      	adds	r3, #7
 8005be2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0307 	bic.w	r3, r3, #7
 8005bea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	4a1f      	ldr	r2, [pc, #124]	; (8005c70 <prvHeapInit+0xac>)
 8005bf4:	4413      	add	r3, r2
 8005bf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bfc:	4a1d      	ldr	r2, [pc, #116]	; (8005c74 <prvHeapInit+0xb0>)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c02:	4b1c      	ldr	r3, [pc, #112]	; (8005c74 <prvHeapInit+0xb0>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c10:	2208      	movs	r2, #8
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	1a9b      	subs	r3, r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0307 	bic.w	r3, r3, #7
 8005c1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4a15      	ldr	r2, [pc, #84]	; (8005c78 <prvHeapInit+0xb4>)
 8005c24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c26:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <prvHeapInit+0xb4>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c2e:	4b12      	ldr	r3, [pc, #72]	; (8005c78 <prvHeapInit+0xb4>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	1ad2      	subs	r2, r2, r3
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c44:	4b0c      	ldr	r3, [pc, #48]	; (8005c78 <prvHeapInit+0xb4>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	4a0a      	ldr	r2, [pc, #40]	; (8005c7c <prvHeapInit+0xb8>)
 8005c52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <prvHeapInit+0xbc>)
 8005c5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c5c:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <prvHeapInit+0xc0>)
 8005c5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c62:	601a      	str	r2, [r3, #0]
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	20000e8c 	.word	0x20000e8c
 8005c74:	20004a8c 	.word	0x20004a8c
 8005c78:	20004a94 	.word	0x20004a94
 8005c7c:	20004a9c 	.word	0x20004a9c
 8005c80:	20004a98 	.word	0x20004a98
 8005c84:	20004aa8 	.word	0x20004aa8

08005c88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c90:	4b28      	ldr	r3, [pc, #160]	; (8005d34 <prvInsertBlockIntoFreeList+0xac>)
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	e002      	b.n	8005c9c <prvInsertBlockIntoFreeList+0x14>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d8f7      	bhi.n	8005c96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d108      	bne.n	8005cca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	441a      	add	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	441a      	add	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d118      	bne.n	8005d10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b15      	ldr	r3, [pc, #84]	; (8005d38 <prvInsertBlockIntoFreeList+0xb0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d00d      	beq.n	8005d06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	441a      	add	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	e008      	b.n	8005d18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d06:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <prvInsertBlockIntoFreeList+0xb0>)
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e003      	b.n	8005d18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d002      	beq.n	8005d26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d26:	bf00      	nop
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	20004a8c 	.word	0x20004a8c
 8005d38:	20004a94 	.word	0x20004a94

08005d3c <__errno>:
 8005d3c:	4b01      	ldr	r3, [pc, #4]	; (8005d44 <__errno+0x8>)
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	20000010 	.word	0x20000010

08005d48 <__libc_init_array>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	4d0d      	ldr	r5, [pc, #52]	; (8005d80 <__libc_init_array+0x38>)
 8005d4c:	4c0d      	ldr	r4, [pc, #52]	; (8005d84 <__libc_init_array+0x3c>)
 8005d4e:	1b64      	subs	r4, r4, r5
 8005d50:	10a4      	asrs	r4, r4, #2
 8005d52:	2600      	movs	r6, #0
 8005d54:	42a6      	cmp	r6, r4
 8005d56:	d109      	bne.n	8005d6c <__libc_init_array+0x24>
 8005d58:	4d0b      	ldr	r5, [pc, #44]	; (8005d88 <__libc_init_array+0x40>)
 8005d5a:	4c0c      	ldr	r4, [pc, #48]	; (8005d8c <__libc_init_array+0x44>)
 8005d5c:	f000 ffbc 	bl	8006cd8 <_init>
 8005d60:	1b64      	subs	r4, r4, r5
 8005d62:	10a4      	asrs	r4, r4, #2
 8005d64:	2600      	movs	r6, #0
 8005d66:	42a6      	cmp	r6, r4
 8005d68:	d105      	bne.n	8005d76 <__libc_init_array+0x2e>
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}
 8005d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d70:	4798      	blx	r3
 8005d72:	3601      	adds	r6, #1
 8005d74:	e7ee      	b.n	8005d54 <__libc_init_array+0xc>
 8005d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7a:	4798      	blx	r3
 8005d7c:	3601      	adds	r6, #1
 8005d7e:	e7f2      	b.n	8005d66 <__libc_init_array+0x1e>
 8005d80:	08006e34 	.word	0x08006e34
 8005d84:	08006e34 	.word	0x08006e34
 8005d88:	08006e34 	.word	0x08006e34
 8005d8c:	08006e38 	.word	0x08006e38

08005d90 <memcpy>:
 8005d90:	440a      	add	r2, r1
 8005d92:	4291      	cmp	r1, r2
 8005d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d98:	d100      	bne.n	8005d9c <memcpy+0xc>
 8005d9a:	4770      	bx	lr
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005da2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005da6:	4291      	cmp	r1, r2
 8005da8:	d1f9      	bne.n	8005d9e <memcpy+0xe>
 8005daa:	bd10      	pop	{r4, pc}

08005dac <memset>:
 8005dac:	4402      	add	r2, r0
 8005dae:	4603      	mov	r3, r0
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d100      	bne.n	8005db6 <memset+0xa>
 8005db4:	4770      	bx	lr
 8005db6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dba:	e7f9      	b.n	8005db0 <memset+0x4>

08005dbc <iprintf>:
 8005dbc:	b40f      	push	{r0, r1, r2, r3}
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <iprintf+0x2c>)
 8005dc0:	b513      	push	{r0, r1, r4, lr}
 8005dc2:	681c      	ldr	r4, [r3, #0]
 8005dc4:	b124      	cbz	r4, 8005dd0 <iprintf+0x14>
 8005dc6:	69a3      	ldr	r3, [r4, #24]
 8005dc8:	b913      	cbnz	r3, 8005dd0 <iprintf+0x14>
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f000 f866 	bl	8005e9c <__sinit>
 8005dd0:	ab05      	add	r3, sp, #20
 8005dd2:	9a04      	ldr	r2, [sp, #16]
 8005dd4:	68a1      	ldr	r1, [r4, #8]
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f000 f9bd 	bl	8006158 <_vfiprintf_r>
 8005dde:	b002      	add	sp, #8
 8005de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005de4:	b004      	add	sp, #16
 8005de6:	4770      	bx	lr
 8005de8:	20000010 	.word	0x20000010

08005dec <std>:
 8005dec:	2300      	movs	r3, #0
 8005dee:	b510      	push	{r4, lr}
 8005df0:	4604      	mov	r4, r0
 8005df2:	e9c0 3300 	strd	r3, r3, [r0]
 8005df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dfa:	6083      	str	r3, [r0, #8]
 8005dfc:	8181      	strh	r1, [r0, #12]
 8005dfe:	6643      	str	r3, [r0, #100]	; 0x64
 8005e00:	81c2      	strh	r2, [r0, #14]
 8005e02:	6183      	str	r3, [r0, #24]
 8005e04:	4619      	mov	r1, r3
 8005e06:	2208      	movs	r2, #8
 8005e08:	305c      	adds	r0, #92	; 0x5c
 8005e0a:	f7ff ffcf 	bl	8005dac <memset>
 8005e0e:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <std+0x38>)
 8005e10:	6263      	str	r3, [r4, #36]	; 0x24
 8005e12:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <std+0x3c>)
 8005e14:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e16:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <std+0x40>)
 8005e18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <std+0x44>)
 8005e1c:	6224      	str	r4, [r4, #32]
 8005e1e:	6323      	str	r3, [r4, #48]	; 0x30
 8005e20:	bd10      	pop	{r4, pc}
 8005e22:	bf00      	nop
 8005e24:	08006701 	.word	0x08006701
 8005e28:	08006723 	.word	0x08006723
 8005e2c:	0800675b 	.word	0x0800675b
 8005e30:	0800677f 	.word	0x0800677f

08005e34 <_cleanup_r>:
 8005e34:	4901      	ldr	r1, [pc, #4]	; (8005e3c <_cleanup_r+0x8>)
 8005e36:	f000 b8af 	b.w	8005f98 <_fwalk_reent>
 8005e3a:	bf00      	nop
 8005e3c:	08006a59 	.word	0x08006a59

08005e40 <__sfmoreglue>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	2268      	movs	r2, #104	; 0x68
 8005e44:	1e4d      	subs	r5, r1, #1
 8005e46:	4355      	muls	r5, r2
 8005e48:	460e      	mov	r6, r1
 8005e4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e4e:	f000 f8e5 	bl	800601c <_malloc_r>
 8005e52:	4604      	mov	r4, r0
 8005e54:	b140      	cbz	r0, 8005e68 <__sfmoreglue+0x28>
 8005e56:	2100      	movs	r1, #0
 8005e58:	e9c0 1600 	strd	r1, r6, [r0]
 8005e5c:	300c      	adds	r0, #12
 8005e5e:	60a0      	str	r0, [r4, #8]
 8005e60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e64:	f7ff ffa2 	bl	8005dac <memset>
 8005e68:	4620      	mov	r0, r4
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}

08005e6c <__sfp_lock_acquire>:
 8005e6c:	4801      	ldr	r0, [pc, #4]	; (8005e74 <__sfp_lock_acquire+0x8>)
 8005e6e:	f000 b8b3 	b.w	8005fd8 <__retarget_lock_acquire_recursive>
 8005e72:	bf00      	nop
 8005e74:	20004aad 	.word	0x20004aad

08005e78 <__sfp_lock_release>:
 8005e78:	4801      	ldr	r0, [pc, #4]	; (8005e80 <__sfp_lock_release+0x8>)
 8005e7a:	f000 b8ae 	b.w	8005fda <__retarget_lock_release_recursive>
 8005e7e:	bf00      	nop
 8005e80:	20004aad 	.word	0x20004aad

08005e84 <__sinit_lock_acquire>:
 8005e84:	4801      	ldr	r0, [pc, #4]	; (8005e8c <__sinit_lock_acquire+0x8>)
 8005e86:	f000 b8a7 	b.w	8005fd8 <__retarget_lock_acquire_recursive>
 8005e8a:	bf00      	nop
 8005e8c:	20004aae 	.word	0x20004aae

08005e90 <__sinit_lock_release>:
 8005e90:	4801      	ldr	r0, [pc, #4]	; (8005e98 <__sinit_lock_release+0x8>)
 8005e92:	f000 b8a2 	b.w	8005fda <__retarget_lock_release_recursive>
 8005e96:	bf00      	nop
 8005e98:	20004aae 	.word	0x20004aae

08005e9c <__sinit>:
 8005e9c:	b510      	push	{r4, lr}
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	f7ff fff0 	bl	8005e84 <__sinit_lock_acquire>
 8005ea4:	69a3      	ldr	r3, [r4, #24]
 8005ea6:	b11b      	cbz	r3, 8005eb0 <__sinit+0x14>
 8005ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eac:	f7ff bff0 	b.w	8005e90 <__sinit_lock_release>
 8005eb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005eb4:	6523      	str	r3, [r4, #80]	; 0x50
 8005eb6:	4b13      	ldr	r3, [pc, #76]	; (8005f04 <__sinit+0x68>)
 8005eb8:	4a13      	ldr	r2, [pc, #76]	; (8005f08 <__sinit+0x6c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ebe:	42a3      	cmp	r3, r4
 8005ec0:	bf04      	itt	eq
 8005ec2:	2301      	moveq	r3, #1
 8005ec4:	61a3      	streq	r3, [r4, #24]
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f000 f820 	bl	8005f0c <__sfp>
 8005ecc:	6060      	str	r0, [r4, #4]
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f000 f81c 	bl	8005f0c <__sfp>
 8005ed4:	60a0      	str	r0, [r4, #8]
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f000 f818 	bl	8005f0c <__sfp>
 8005edc:	2200      	movs	r2, #0
 8005ede:	60e0      	str	r0, [r4, #12]
 8005ee0:	2104      	movs	r1, #4
 8005ee2:	6860      	ldr	r0, [r4, #4]
 8005ee4:	f7ff ff82 	bl	8005dec <std>
 8005ee8:	68a0      	ldr	r0, [r4, #8]
 8005eea:	2201      	movs	r2, #1
 8005eec:	2109      	movs	r1, #9
 8005eee:	f7ff ff7d 	bl	8005dec <std>
 8005ef2:	68e0      	ldr	r0, [r4, #12]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	2112      	movs	r1, #18
 8005ef8:	f7ff ff78 	bl	8005dec <std>
 8005efc:	2301      	movs	r3, #1
 8005efe:	61a3      	str	r3, [r4, #24]
 8005f00:	e7d2      	b.n	8005ea8 <__sinit+0xc>
 8005f02:	bf00      	nop
 8005f04:	08006d94 	.word	0x08006d94
 8005f08:	08005e35 	.word	0x08005e35

08005f0c <__sfp>:
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0e:	4607      	mov	r7, r0
 8005f10:	f7ff ffac 	bl	8005e6c <__sfp_lock_acquire>
 8005f14:	4b1e      	ldr	r3, [pc, #120]	; (8005f90 <__sfp+0x84>)
 8005f16:	681e      	ldr	r6, [r3, #0]
 8005f18:	69b3      	ldr	r3, [r6, #24]
 8005f1a:	b913      	cbnz	r3, 8005f22 <__sfp+0x16>
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f7ff ffbd 	bl	8005e9c <__sinit>
 8005f22:	3648      	adds	r6, #72	; 0x48
 8005f24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	d503      	bpl.n	8005f34 <__sfp+0x28>
 8005f2c:	6833      	ldr	r3, [r6, #0]
 8005f2e:	b30b      	cbz	r3, 8005f74 <__sfp+0x68>
 8005f30:	6836      	ldr	r6, [r6, #0]
 8005f32:	e7f7      	b.n	8005f24 <__sfp+0x18>
 8005f34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f38:	b9d5      	cbnz	r5, 8005f70 <__sfp+0x64>
 8005f3a:	4b16      	ldr	r3, [pc, #88]	; (8005f94 <__sfp+0x88>)
 8005f3c:	60e3      	str	r3, [r4, #12]
 8005f3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f42:	6665      	str	r5, [r4, #100]	; 0x64
 8005f44:	f000 f847 	bl	8005fd6 <__retarget_lock_init_recursive>
 8005f48:	f7ff ff96 	bl	8005e78 <__sfp_lock_release>
 8005f4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f54:	6025      	str	r5, [r4, #0]
 8005f56:	61a5      	str	r5, [r4, #24]
 8005f58:	2208      	movs	r2, #8
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f60:	f7ff ff24 	bl	8005dac <memset>
 8005f64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f70:	3468      	adds	r4, #104	; 0x68
 8005f72:	e7d9      	b.n	8005f28 <__sfp+0x1c>
 8005f74:	2104      	movs	r1, #4
 8005f76:	4638      	mov	r0, r7
 8005f78:	f7ff ff62 	bl	8005e40 <__sfmoreglue>
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	6030      	str	r0, [r6, #0]
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d1d5      	bne.n	8005f30 <__sfp+0x24>
 8005f84:	f7ff ff78 	bl	8005e78 <__sfp_lock_release>
 8005f88:	230c      	movs	r3, #12
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	e7ee      	b.n	8005f6c <__sfp+0x60>
 8005f8e:	bf00      	nop
 8005f90:	08006d94 	.word	0x08006d94
 8005f94:	ffff0001 	.word	0xffff0001

08005f98 <_fwalk_reent>:
 8005f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f9c:	4606      	mov	r6, r0
 8005f9e:	4688      	mov	r8, r1
 8005fa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005fa4:	2700      	movs	r7, #0
 8005fa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005faa:	f1b9 0901 	subs.w	r9, r9, #1
 8005fae:	d505      	bpl.n	8005fbc <_fwalk_reent+0x24>
 8005fb0:	6824      	ldr	r4, [r4, #0]
 8005fb2:	2c00      	cmp	r4, #0
 8005fb4:	d1f7      	bne.n	8005fa6 <_fwalk_reent+0xe>
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fbc:	89ab      	ldrh	r3, [r5, #12]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d907      	bls.n	8005fd2 <_fwalk_reent+0x3a>
 8005fc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	d003      	beq.n	8005fd2 <_fwalk_reent+0x3a>
 8005fca:	4629      	mov	r1, r5
 8005fcc:	4630      	mov	r0, r6
 8005fce:	47c0      	blx	r8
 8005fd0:	4307      	orrs	r7, r0
 8005fd2:	3568      	adds	r5, #104	; 0x68
 8005fd4:	e7e9      	b.n	8005faa <_fwalk_reent+0x12>

08005fd6 <__retarget_lock_init_recursive>:
 8005fd6:	4770      	bx	lr

08005fd8 <__retarget_lock_acquire_recursive>:
 8005fd8:	4770      	bx	lr

08005fda <__retarget_lock_release_recursive>:
 8005fda:	4770      	bx	lr

08005fdc <sbrk_aligned>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	4e0e      	ldr	r6, [pc, #56]	; (8006018 <sbrk_aligned+0x3c>)
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	6831      	ldr	r1, [r6, #0]
 8005fe4:	4605      	mov	r5, r0
 8005fe6:	b911      	cbnz	r1, 8005fee <sbrk_aligned+0x12>
 8005fe8:	f000 fb7a 	bl	80066e0 <_sbrk_r>
 8005fec:	6030      	str	r0, [r6, #0]
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	f000 fb75 	bl	80066e0 <_sbrk_r>
 8005ff6:	1c43      	adds	r3, r0, #1
 8005ff8:	d00a      	beq.n	8006010 <sbrk_aligned+0x34>
 8005ffa:	1cc4      	adds	r4, r0, #3
 8005ffc:	f024 0403 	bic.w	r4, r4, #3
 8006000:	42a0      	cmp	r0, r4
 8006002:	d007      	beq.n	8006014 <sbrk_aligned+0x38>
 8006004:	1a21      	subs	r1, r4, r0
 8006006:	4628      	mov	r0, r5
 8006008:	f000 fb6a 	bl	80066e0 <_sbrk_r>
 800600c:	3001      	adds	r0, #1
 800600e:	d101      	bne.n	8006014 <sbrk_aligned+0x38>
 8006010:	f04f 34ff 	mov.w	r4, #4294967295
 8006014:	4620      	mov	r0, r4
 8006016:	bd70      	pop	{r4, r5, r6, pc}
 8006018:	20004ab4 	.word	0x20004ab4

0800601c <_malloc_r>:
 800601c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006020:	1ccd      	adds	r5, r1, #3
 8006022:	f025 0503 	bic.w	r5, r5, #3
 8006026:	3508      	adds	r5, #8
 8006028:	2d0c      	cmp	r5, #12
 800602a:	bf38      	it	cc
 800602c:	250c      	movcc	r5, #12
 800602e:	2d00      	cmp	r5, #0
 8006030:	4607      	mov	r7, r0
 8006032:	db01      	blt.n	8006038 <_malloc_r+0x1c>
 8006034:	42a9      	cmp	r1, r5
 8006036:	d905      	bls.n	8006044 <_malloc_r+0x28>
 8006038:	230c      	movs	r3, #12
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	2600      	movs	r6, #0
 800603e:	4630      	mov	r0, r6
 8006040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006044:	4e2e      	ldr	r6, [pc, #184]	; (8006100 <_malloc_r+0xe4>)
 8006046:	f000 fdbb 	bl	8006bc0 <__malloc_lock>
 800604a:	6833      	ldr	r3, [r6, #0]
 800604c:	461c      	mov	r4, r3
 800604e:	bb34      	cbnz	r4, 800609e <_malloc_r+0x82>
 8006050:	4629      	mov	r1, r5
 8006052:	4638      	mov	r0, r7
 8006054:	f7ff ffc2 	bl	8005fdc <sbrk_aligned>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	4604      	mov	r4, r0
 800605c:	d14d      	bne.n	80060fa <_malloc_r+0xde>
 800605e:	6834      	ldr	r4, [r6, #0]
 8006060:	4626      	mov	r6, r4
 8006062:	2e00      	cmp	r6, #0
 8006064:	d140      	bne.n	80060e8 <_malloc_r+0xcc>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	4631      	mov	r1, r6
 800606a:	4638      	mov	r0, r7
 800606c:	eb04 0803 	add.w	r8, r4, r3
 8006070:	f000 fb36 	bl	80066e0 <_sbrk_r>
 8006074:	4580      	cmp	r8, r0
 8006076:	d13a      	bne.n	80060ee <_malloc_r+0xd2>
 8006078:	6821      	ldr	r1, [r4, #0]
 800607a:	3503      	adds	r5, #3
 800607c:	1a6d      	subs	r5, r5, r1
 800607e:	f025 0503 	bic.w	r5, r5, #3
 8006082:	3508      	adds	r5, #8
 8006084:	2d0c      	cmp	r5, #12
 8006086:	bf38      	it	cc
 8006088:	250c      	movcc	r5, #12
 800608a:	4629      	mov	r1, r5
 800608c:	4638      	mov	r0, r7
 800608e:	f7ff ffa5 	bl	8005fdc <sbrk_aligned>
 8006092:	3001      	adds	r0, #1
 8006094:	d02b      	beq.n	80060ee <_malloc_r+0xd2>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	442b      	add	r3, r5
 800609a:	6023      	str	r3, [r4, #0]
 800609c:	e00e      	b.n	80060bc <_malloc_r+0xa0>
 800609e:	6822      	ldr	r2, [r4, #0]
 80060a0:	1b52      	subs	r2, r2, r5
 80060a2:	d41e      	bmi.n	80060e2 <_malloc_r+0xc6>
 80060a4:	2a0b      	cmp	r2, #11
 80060a6:	d916      	bls.n	80060d6 <_malloc_r+0xba>
 80060a8:	1961      	adds	r1, r4, r5
 80060aa:	42a3      	cmp	r3, r4
 80060ac:	6025      	str	r5, [r4, #0]
 80060ae:	bf18      	it	ne
 80060b0:	6059      	strne	r1, [r3, #4]
 80060b2:	6863      	ldr	r3, [r4, #4]
 80060b4:	bf08      	it	eq
 80060b6:	6031      	streq	r1, [r6, #0]
 80060b8:	5162      	str	r2, [r4, r5]
 80060ba:	604b      	str	r3, [r1, #4]
 80060bc:	4638      	mov	r0, r7
 80060be:	f104 060b 	add.w	r6, r4, #11
 80060c2:	f000 fd83 	bl	8006bcc <__malloc_unlock>
 80060c6:	f026 0607 	bic.w	r6, r6, #7
 80060ca:	1d23      	adds	r3, r4, #4
 80060cc:	1af2      	subs	r2, r6, r3
 80060ce:	d0b6      	beq.n	800603e <_malloc_r+0x22>
 80060d0:	1b9b      	subs	r3, r3, r6
 80060d2:	50a3      	str	r3, [r4, r2]
 80060d4:	e7b3      	b.n	800603e <_malloc_r+0x22>
 80060d6:	6862      	ldr	r2, [r4, #4]
 80060d8:	42a3      	cmp	r3, r4
 80060da:	bf0c      	ite	eq
 80060dc:	6032      	streq	r2, [r6, #0]
 80060de:	605a      	strne	r2, [r3, #4]
 80060e0:	e7ec      	b.n	80060bc <_malloc_r+0xa0>
 80060e2:	4623      	mov	r3, r4
 80060e4:	6864      	ldr	r4, [r4, #4]
 80060e6:	e7b2      	b.n	800604e <_malloc_r+0x32>
 80060e8:	4634      	mov	r4, r6
 80060ea:	6876      	ldr	r6, [r6, #4]
 80060ec:	e7b9      	b.n	8006062 <_malloc_r+0x46>
 80060ee:	230c      	movs	r3, #12
 80060f0:	603b      	str	r3, [r7, #0]
 80060f2:	4638      	mov	r0, r7
 80060f4:	f000 fd6a 	bl	8006bcc <__malloc_unlock>
 80060f8:	e7a1      	b.n	800603e <_malloc_r+0x22>
 80060fa:	6025      	str	r5, [r4, #0]
 80060fc:	e7de      	b.n	80060bc <_malloc_r+0xa0>
 80060fe:	bf00      	nop
 8006100:	20004ab0 	.word	0x20004ab0

08006104 <__sfputc_r>:
 8006104:	6893      	ldr	r3, [r2, #8]
 8006106:	3b01      	subs	r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	b410      	push	{r4}
 800610c:	6093      	str	r3, [r2, #8]
 800610e:	da08      	bge.n	8006122 <__sfputc_r+0x1e>
 8006110:	6994      	ldr	r4, [r2, #24]
 8006112:	42a3      	cmp	r3, r4
 8006114:	db01      	blt.n	800611a <__sfputc_r+0x16>
 8006116:	290a      	cmp	r1, #10
 8006118:	d103      	bne.n	8006122 <__sfputc_r+0x1e>
 800611a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800611e:	f000 bb33 	b.w	8006788 <__swbuf_r>
 8006122:	6813      	ldr	r3, [r2, #0]
 8006124:	1c58      	adds	r0, r3, #1
 8006126:	6010      	str	r0, [r2, #0]
 8006128:	7019      	strb	r1, [r3, #0]
 800612a:	4608      	mov	r0, r1
 800612c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006130:	4770      	bx	lr

08006132 <__sfputs_r>:
 8006132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006134:	4606      	mov	r6, r0
 8006136:	460f      	mov	r7, r1
 8006138:	4614      	mov	r4, r2
 800613a:	18d5      	adds	r5, r2, r3
 800613c:	42ac      	cmp	r4, r5
 800613e:	d101      	bne.n	8006144 <__sfputs_r+0x12>
 8006140:	2000      	movs	r0, #0
 8006142:	e007      	b.n	8006154 <__sfputs_r+0x22>
 8006144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006148:	463a      	mov	r2, r7
 800614a:	4630      	mov	r0, r6
 800614c:	f7ff ffda 	bl	8006104 <__sfputc_r>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d1f3      	bne.n	800613c <__sfputs_r+0xa>
 8006154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006158 <_vfiprintf_r>:
 8006158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615c:	460d      	mov	r5, r1
 800615e:	b09d      	sub	sp, #116	; 0x74
 8006160:	4614      	mov	r4, r2
 8006162:	4698      	mov	r8, r3
 8006164:	4606      	mov	r6, r0
 8006166:	b118      	cbz	r0, 8006170 <_vfiprintf_r+0x18>
 8006168:	6983      	ldr	r3, [r0, #24]
 800616a:	b90b      	cbnz	r3, 8006170 <_vfiprintf_r+0x18>
 800616c:	f7ff fe96 	bl	8005e9c <__sinit>
 8006170:	4b89      	ldr	r3, [pc, #548]	; (8006398 <_vfiprintf_r+0x240>)
 8006172:	429d      	cmp	r5, r3
 8006174:	d11b      	bne.n	80061ae <_vfiprintf_r+0x56>
 8006176:	6875      	ldr	r5, [r6, #4]
 8006178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800617a:	07d9      	lsls	r1, r3, #31
 800617c:	d405      	bmi.n	800618a <_vfiprintf_r+0x32>
 800617e:	89ab      	ldrh	r3, [r5, #12]
 8006180:	059a      	lsls	r2, r3, #22
 8006182:	d402      	bmi.n	800618a <_vfiprintf_r+0x32>
 8006184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006186:	f7ff ff27 	bl	8005fd8 <__retarget_lock_acquire_recursive>
 800618a:	89ab      	ldrh	r3, [r5, #12]
 800618c:	071b      	lsls	r3, r3, #28
 800618e:	d501      	bpl.n	8006194 <_vfiprintf_r+0x3c>
 8006190:	692b      	ldr	r3, [r5, #16]
 8006192:	b9eb      	cbnz	r3, 80061d0 <_vfiprintf_r+0x78>
 8006194:	4629      	mov	r1, r5
 8006196:	4630      	mov	r0, r6
 8006198:	f000 fb5a 	bl	8006850 <__swsetup_r>
 800619c:	b1c0      	cbz	r0, 80061d0 <_vfiprintf_r+0x78>
 800619e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061a0:	07dc      	lsls	r4, r3, #31
 80061a2:	d50e      	bpl.n	80061c2 <_vfiprintf_r+0x6a>
 80061a4:	f04f 30ff 	mov.w	r0, #4294967295
 80061a8:	b01d      	add	sp, #116	; 0x74
 80061aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ae:	4b7b      	ldr	r3, [pc, #492]	; (800639c <_vfiprintf_r+0x244>)
 80061b0:	429d      	cmp	r5, r3
 80061b2:	d101      	bne.n	80061b8 <_vfiprintf_r+0x60>
 80061b4:	68b5      	ldr	r5, [r6, #8]
 80061b6:	e7df      	b.n	8006178 <_vfiprintf_r+0x20>
 80061b8:	4b79      	ldr	r3, [pc, #484]	; (80063a0 <_vfiprintf_r+0x248>)
 80061ba:	429d      	cmp	r5, r3
 80061bc:	bf08      	it	eq
 80061be:	68f5      	ldreq	r5, [r6, #12]
 80061c0:	e7da      	b.n	8006178 <_vfiprintf_r+0x20>
 80061c2:	89ab      	ldrh	r3, [r5, #12]
 80061c4:	0598      	lsls	r0, r3, #22
 80061c6:	d4ed      	bmi.n	80061a4 <_vfiprintf_r+0x4c>
 80061c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061ca:	f7ff ff06 	bl	8005fda <__retarget_lock_release_recursive>
 80061ce:	e7e9      	b.n	80061a4 <_vfiprintf_r+0x4c>
 80061d0:	2300      	movs	r3, #0
 80061d2:	9309      	str	r3, [sp, #36]	; 0x24
 80061d4:	2320      	movs	r3, #32
 80061d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061da:	f8cd 800c 	str.w	r8, [sp, #12]
 80061de:	2330      	movs	r3, #48	; 0x30
 80061e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80063a4 <_vfiprintf_r+0x24c>
 80061e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061e8:	f04f 0901 	mov.w	r9, #1
 80061ec:	4623      	mov	r3, r4
 80061ee:	469a      	mov	sl, r3
 80061f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061f4:	b10a      	cbz	r2, 80061fa <_vfiprintf_r+0xa2>
 80061f6:	2a25      	cmp	r2, #37	; 0x25
 80061f8:	d1f9      	bne.n	80061ee <_vfiprintf_r+0x96>
 80061fa:	ebba 0b04 	subs.w	fp, sl, r4
 80061fe:	d00b      	beq.n	8006218 <_vfiprintf_r+0xc0>
 8006200:	465b      	mov	r3, fp
 8006202:	4622      	mov	r2, r4
 8006204:	4629      	mov	r1, r5
 8006206:	4630      	mov	r0, r6
 8006208:	f7ff ff93 	bl	8006132 <__sfputs_r>
 800620c:	3001      	adds	r0, #1
 800620e:	f000 80aa 	beq.w	8006366 <_vfiprintf_r+0x20e>
 8006212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006214:	445a      	add	r2, fp
 8006216:	9209      	str	r2, [sp, #36]	; 0x24
 8006218:	f89a 3000 	ldrb.w	r3, [sl]
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 80a2 	beq.w	8006366 <_vfiprintf_r+0x20e>
 8006222:	2300      	movs	r3, #0
 8006224:	f04f 32ff 	mov.w	r2, #4294967295
 8006228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800622c:	f10a 0a01 	add.w	sl, sl, #1
 8006230:	9304      	str	r3, [sp, #16]
 8006232:	9307      	str	r3, [sp, #28]
 8006234:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006238:	931a      	str	r3, [sp, #104]	; 0x68
 800623a:	4654      	mov	r4, sl
 800623c:	2205      	movs	r2, #5
 800623e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006242:	4858      	ldr	r0, [pc, #352]	; (80063a4 <_vfiprintf_r+0x24c>)
 8006244:	f7f9 ffe4 	bl	8000210 <memchr>
 8006248:	9a04      	ldr	r2, [sp, #16]
 800624a:	b9d8      	cbnz	r0, 8006284 <_vfiprintf_r+0x12c>
 800624c:	06d1      	lsls	r1, r2, #27
 800624e:	bf44      	itt	mi
 8006250:	2320      	movmi	r3, #32
 8006252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006256:	0713      	lsls	r3, r2, #28
 8006258:	bf44      	itt	mi
 800625a:	232b      	movmi	r3, #43	; 0x2b
 800625c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006260:	f89a 3000 	ldrb.w	r3, [sl]
 8006264:	2b2a      	cmp	r3, #42	; 0x2a
 8006266:	d015      	beq.n	8006294 <_vfiprintf_r+0x13c>
 8006268:	9a07      	ldr	r2, [sp, #28]
 800626a:	4654      	mov	r4, sl
 800626c:	2000      	movs	r0, #0
 800626e:	f04f 0c0a 	mov.w	ip, #10
 8006272:	4621      	mov	r1, r4
 8006274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006278:	3b30      	subs	r3, #48	; 0x30
 800627a:	2b09      	cmp	r3, #9
 800627c:	d94e      	bls.n	800631c <_vfiprintf_r+0x1c4>
 800627e:	b1b0      	cbz	r0, 80062ae <_vfiprintf_r+0x156>
 8006280:	9207      	str	r2, [sp, #28]
 8006282:	e014      	b.n	80062ae <_vfiprintf_r+0x156>
 8006284:	eba0 0308 	sub.w	r3, r0, r8
 8006288:	fa09 f303 	lsl.w	r3, r9, r3
 800628c:	4313      	orrs	r3, r2
 800628e:	9304      	str	r3, [sp, #16]
 8006290:	46a2      	mov	sl, r4
 8006292:	e7d2      	b.n	800623a <_vfiprintf_r+0xe2>
 8006294:	9b03      	ldr	r3, [sp, #12]
 8006296:	1d19      	adds	r1, r3, #4
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	9103      	str	r1, [sp, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	bfbb      	ittet	lt
 80062a0:	425b      	neglt	r3, r3
 80062a2:	f042 0202 	orrlt.w	r2, r2, #2
 80062a6:	9307      	strge	r3, [sp, #28]
 80062a8:	9307      	strlt	r3, [sp, #28]
 80062aa:	bfb8      	it	lt
 80062ac:	9204      	strlt	r2, [sp, #16]
 80062ae:	7823      	ldrb	r3, [r4, #0]
 80062b0:	2b2e      	cmp	r3, #46	; 0x2e
 80062b2:	d10c      	bne.n	80062ce <_vfiprintf_r+0x176>
 80062b4:	7863      	ldrb	r3, [r4, #1]
 80062b6:	2b2a      	cmp	r3, #42	; 0x2a
 80062b8:	d135      	bne.n	8006326 <_vfiprintf_r+0x1ce>
 80062ba:	9b03      	ldr	r3, [sp, #12]
 80062bc:	1d1a      	adds	r2, r3, #4
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	9203      	str	r2, [sp, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	bfb8      	it	lt
 80062c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80062ca:	3402      	adds	r4, #2
 80062cc:	9305      	str	r3, [sp, #20]
 80062ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80063b4 <_vfiprintf_r+0x25c>
 80062d2:	7821      	ldrb	r1, [r4, #0]
 80062d4:	2203      	movs	r2, #3
 80062d6:	4650      	mov	r0, sl
 80062d8:	f7f9 ff9a 	bl	8000210 <memchr>
 80062dc:	b140      	cbz	r0, 80062f0 <_vfiprintf_r+0x198>
 80062de:	2340      	movs	r3, #64	; 0x40
 80062e0:	eba0 000a 	sub.w	r0, r0, sl
 80062e4:	fa03 f000 	lsl.w	r0, r3, r0
 80062e8:	9b04      	ldr	r3, [sp, #16]
 80062ea:	4303      	orrs	r3, r0
 80062ec:	3401      	adds	r4, #1
 80062ee:	9304      	str	r3, [sp, #16]
 80062f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f4:	482c      	ldr	r0, [pc, #176]	; (80063a8 <_vfiprintf_r+0x250>)
 80062f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062fa:	2206      	movs	r2, #6
 80062fc:	f7f9 ff88 	bl	8000210 <memchr>
 8006300:	2800      	cmp	r0, #0
 8006302:	d03f      	beq.n	8006384 <_vfiprintf_r+0x22c>
 8006304:	4b29      	ldr	r3, [pc, #164]	; (80063ac <_vfiprintf_r+0x254>)
 8006306:	bb1b      	cbnz	r3, 8006350 <_vfiprintf_r+0x1f8>
 8006308:	9b03      	ldr	r3, [sp, #12]
 800630a:	3307      	adds	r3, #7
 800630c:	f023 0307 	bic.w	r3, r3, #7
 8006310:	3308      	adds	r3, #8
 8006312:	9303      	str	r3, [sp, #12]
 8006314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006316:	443b      	add	r3, r7
 8006318:	9309      	str	r3, [sp, #36]	; 0x24
 800631a:	e767      	b.n	80061ec <_vfiprintf_r+0x94>
 800631c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006320:	460c      	mov	r4, r1
 8006322:	2001      	movs	r0, #1
 8006324:	e7a5      	b.n	8006272 <_vfiprintf_r+0x11a>
 8006326:	2300      	movs	r3, #0
 8006328:	3401      	adds	r4, #1
 800632a:	9305      	str	r3, [sp, #20]
 800632c:	4619      	mov	r1, r3
 800632e:	f04f 0c0a 	mov.w	ip, #10
 8006332:	4620      	mov	r0, r4
 8006334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006338:	3a30      	subs	r2, #48	; 0x30
 800633a:	2a09      	cmp	r2, #9
 800633c:	d903      	bls.n	8006346 <_vfiprintf_r+0x1ee>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0c5      	beq.n	80062ce <_vfiprintf_r+0x176>
 8006342:	9105      	str	r1, [sp, #20]
 8006344:	e7c3      	b.n	80062ce <_vfiprintf_r+0x176>
 8006346:	fb0c 2101 	mla	r1, ip, r1, r2
 800634a:	4604      	mov	r4, r0
 800634c:	2301      	movs	r3, #1
 800634e:	e7f0      	b.n	8006332 <_vfiprintf_r+0x1da>
 8006350:	ab03      	add	r3, sp, #12
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	462a      	mov	r2, r5
 8006356:	4b16      	ldr	r3, [pc, #88]	; (80063b0 <_vfiprintf_r+0x258>)
 8006358:	a904      	add	r1, sp, #16
 800635a:	4630      	mov	r0, r6
 800635c:	f3af 8000 	nop.w
 8006360:	4607      	mov	r7, r0
 8006362:	1c78      	adds	r0, r7, #1
 8006364:	d1d6      	bne.n	8006314 <_vfiprintf_r+0x1bc>
 8006366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006368:	07d9      	lsls	r1, r3, #31
 800636a:	d405      	bmi.n	8006378 <_vfiprintf_r+0x220>
 800636c:	89ab      	ldrh	r3, [r5, #12]
 800636e:	059a      	lsls	r2, r3, #22
 8006370:	d402      	bmi.n	8006378 <_vfiprintf_r+0x220>
 8006372:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006374:	f7ff fe31 	bl	8005fda <__retarget_lock_release_recursive>
 8006378:	89ab      	ldrh	r3, [r5, #12]
 800637a:	065b      	lsls	r3, r3, #25
 800637c:	f53f af12 	bmi.w	80061a4 <_vfiprintf_r+0x4c>
 8006380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006382:	e711      	b.n	80061a8 <_vfiprintf_r+0x50>
 8006384:	ab03      	add	r3, sp, #12
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	462a      	mov	r2, r5
 800638a:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <_vfiprintf_r+0x258>)
 800638c:	a904      	add	r1, sp, #16
 800638e:	4630      	mov	r0, r6
 8006390:	f000 f880 	bl	8006494 <_printf_i>
 8006394:	e7e4      	b.n	8006360 <_vfiprintf_r+0x208>
 8006396:	bf00      	nop
 8006398:	08006db8 	.word	0x08006db8
 800639c:	08006dd8 	.word	0x08006dd8
 80063a0:	08006d98 	.word	0x08006d98
 80063a4:	08006df8 	.word	0x08006df8
 80063a8:	08006e02 	.word	0x08006e02
 80063ac:	00000000 	.word	0x00000000
 80063b0:	08006133 	.word	0x08006133
 80063b4:	08006dfe 	.word	0x08006dfe

080063b8 <_printf_common>:
 80063b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063bc:	4616      	mov	r6, r2
 80063be:	4699      	mov	r9, r3
 80063c0:	688a      	ldr	r2, [r1, #8]
 80063c2:	690b      	ldr	r3, [r1, #16]
 80063c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063c8:	4293      	cmp	r3, r2
 80063ca:	bfb8      	it	lt
 80063cc:	4613      	movlt	r3, r2
 80063ce:	6033      	str	r3, [r6, #0]
 80063d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063d4:	4607      	mov	r7, r0
 80063d6:	460c      	mov	r4, r1
 80063d8:	b10a      	cbz	r2, 80063de <_printf_common+0x26>
 80063da:	3301      	adds	r3, #1
 80063dc:	6033      	str	r3, [r6, #0]
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	0699      	lsls	r1, r3, #26
 80063e2:	bf42      	ittt	mi
 80063e4:	6833      	ldrmi	r3, [r6, #0]
 80063e6:	3302      	addmi	r3, #2
 80063e8:	6033      	strmi	r3, [r6, #0]
 80063ea:	6825      	ldr	r5, [r4, #0]
 80063ec:	f015 0506 	ands.w	r5, r5, #6
 80063f0:	d106      	bne.n	8006400 <_printf_common+0x48>
 80063f2:	f104 0a19 	add.w	sl, r4, #25
 80063f6:	68e3      	ldr	r3, [r4, #12]
 80063f8:	6832      	ldr	r2, [r6, #0]
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	42ab      	cmp	r3, r5
 80063fe:	dc26      	bgt.n	800644e <_printf_common+0x96>
 8006400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006404:	1e13      	subs	r3, r2, #0
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	bf18      	it	ne
 800640a:	2301      	movne	r3, #1
 800640c:	0692      	lsls	r2, r2, #26
 800640e:	d42b      	bmi.n	8006468 <_printf_common+0xb0>
 8006410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006414:	4649      	mov	r1, r9
 8006416:	4638      	mov	r0, r7
 8006418:	47c0      	blx	r8
 800641a:	3001      	adds	r0, #1
 800641c:	d01e      	beq.n	800645c <_printf_common+0xa4>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	68e5      	ldr	r5, [r4, #12]
 8006422:	6832      	ldr	r2, [r6, #0]
 8006424:	f003 0306 	and.w	r3, r3, #6
 8006428:	2b04      	cmp	r3, #4
 800642a:	bf08      	it	eq
 800642c:	1aad      	subeq	r5, r5, r2
 800642e:	68a3      	ldr	r3, [r4, #8]
 8006430:	6922      	ldr	r2, [r4, #16]
 8006432:	bf0c      	ite	eq
 8006434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006438:	2500      	movne	r5, #0
 800643a:	4293      	cmp	r3, r2
 800643c:	bfc4      	itt	gt
 800643e:	1a9b      	subgt	r3, r3, r2
 8006440:	18ed      	addgt	r5, r5, r3
 8006442:	2600      	movs	r6, #0
 8006444:	341a      	adds	r4, #26
 8006446:	42b5      	cmp	r5, r6
 8006448:	d11a      	bne.n	8006480 <_printf_common+0xc8>
 800644a:	2000      	movs	r0, #0
 800644c:	e008      	b.n	8006460 <_printf_common+0xa8>
 800644e:	2301      	movs	r3, #1
 8006450:	4652      	mov	r2, sl
 8006452:	4649      	mov	r1, r9
 8006454:	4638      	mov	r0, r7
 8006456:	47c0      	blx	r8
 8006458:	3001      	adds	r0, #1
 800645a:	d103      	bne.n	8006464 <_printf_common+0xac>
 800645c:	f04f 30ff 	mov.w	r0, #4294967295
 8006460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006464:	3501      	adds	r5, #1
 8006466:	e7c6      	b.n	80063f6 <_printf_common+0x3e>
 8006468:	18e1      	adds	r1, r4, r3
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	2030      	movs	r0, #48	; 0x30
 800646e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006472:	4422      	add	r2, r4
 8006474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800647c:	3302      	adds	r3, #2
 800647e:	e7c7      	b.n	8006410 <_printf_common+0x58>
 8006480:	2301      	movs	r3, #1
 8006482:	4622      	mov	r2, r4
 8006484:	4649      	mov	r1, r9
 8006486:	4638      	mov	r0, r7
 8006488:	47c0      	blx	r8
 800648a:	3001      	adds	r0, #1
 800648c:	d0e6      	beq.n	800645c <_printf_common+0xa4>
 800648e:	3601      	adds	r6, #1
 8006490:	e7d9      	b.n	8006446 <_printf_common+0x8e>
	...

08006494 <_printf_i>:
 8006494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006498:	7e0f      	ldrb	r7, [r1, #24]
 800649a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800649c:	2f78      	cmp	r7, #120	; 0x78
 800649e:	4691      	mov	r9, r2
 80064a0:	4680      	mov	r8, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	469a      	mov	sl, r3
 80064a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064aa:	d807      	bhi.n	80064bc <_printf_i+0x28>
 80064ac:	2f62      	cmp	r7, #98	; 0x62
 80064ae:	d80a      	bhi.n	80064c6 <_printf_i+0x32>
 80064b0:	2f00      	cmp	r7, #0
 80064b2:	f000 80d8 	beq.w	8006666 <_printf_i+0x1d2>
 80064b6:	2f58      	cmp	r7, #88	; 0x58
 80064b8:	f000 80a3 	beq.w	8006602 <_printf_i+0x16e>
 80064bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064c4:	e03a      	b.n	800653c <_printf_i+0xa8>
 80064c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064ca:	2b15      	cmp	r3, #21
 80064cc:	d8f6      	bhi.n	80064bc <_printf_i+0x28>
 80064ce:	a101      	add	r1, pc, #4	; (adr r1, 80064d4 <_printf_i+0x40>)
 80064d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064d4:	0800652d 	.word	0x0800652d
 80064d8:	08006541 	.word	0x08006541
 80064dc:	080064bd 	.word	0x080064bd
 80064e0:	080064bd 	.word	0x080064bd
 80064e4:	080064bd 	.word	0x080064bd
 80064e8:	080064bd 	.word	0x080064bd
 80064ec:	08006541 	.word	0x08006541
 80064f0:	080064bd 	.word	0x080064bd
 80064f4:	080064bd 	.word	0x080064bd
 80064f8:	080064bd 	.word	0x080064bd
 80064fc:	080064bd 	.word	0x080064bd
 8006500:	0800664d 	.word	0x0800664d
 8006504:	08006571 	.word	0x08006571
 8006508:	0800662f 	.word	0x0800662f
 800650c:	080064bd 	.word	0x080064bd
 8006510:	080064bd 	.word	0x080064bd
 8006514:	0800666f 	.word	0x0800666f
 8006518:	080064bd 	.word	0x080064bd
 800651c:	08006571 	.word	0x08006571
 8006520:	080064bd 	.word	0x080064bd
 8006524:	080064bd 	.word	0x080064bd
 8006528:	08006637 	.word	0x08006637
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	1d1a      	adds	r2, r3, #4
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	602a      	str	r2, [r5, #0]
 8006534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800653c:	2301      	movs	r3, #1
 800653e:	e0a3      	b.n	8006688 <_printf_i+0x1f4>
 8006540:	6820      	ldr	r0, [r4, #0]
 8006542:	6829      	ldr	r1, [r5, #0]
 8006544:	0606      	lsls	r6, r0, #24
 8006546:	f101 0304 	add.w	r3, r1, #4
 800654a:	d50a      	bpl.n	8006562 <_printf_i+0xce>
 800654c:	680e      	ldr	r6, [r1, #0]
 800654e:	602b      	str	r3, [r5, #0]
 8006550:	2e00      	cmp	r6, #0
 8006552:	da03      	bge.n	800655c <_printf_i+0xc8>
 8006554:	232d      	movs	r3, #45	; 0x2d
 8006556:	4276      	negs	r6, r6
 8006558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800655c:	485e      	ldr	r0, [pc, #376]	; (80066d8 <_printf_i+0x244>)
 800655e:	230a      	movs	r3, #10
 8006560:	e019      	b.n	8006596 <_printf_i+0x102>
 8006562:	680e      	ldr	r6, [r1, #0]
 8006564:	602b      	str	r3, [r5, #0]
 8006566:	f010 0f40 	tst.w	r0, #64	; 0x40
 800656a:	bf18      	it	ne
 800656c:	b236      	sxthne	r6, r6
 800656e:	e7ef      	b.n	8006550 <_printf_i+0xbc>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	6820      	ldr	r0, [r4, #0]
 8006574:	1d19      	adds	r1, r3, #4
 8006576:	6029      	str	r1, [r5, #0]
 8006578:	0601      	lsls	r1, r0, #24
 800657a:	d501      	bpl.n	8006580 <_printf_i+0xec>
 800657c:	681e      	ldr	r6, [r3, #0]
 800657e:	e002      	b.n	8006586 <_printf_i+0xf2>
 8006580:	0646      	lsls	r6, r0, #25
 8006582:	d5fb      	bpl.n	800657c <_printf_i+0xe8>
 8006584:	881e      	ldrh	r6, [r3, #0]
 8006586:	4854      	ldr	r0, [pc, #336]	; (80066d8 <_printf_i+0x244>)
 8006588:	2f6f      	cmp	r7, #111	; 0x6f
 800658a:	bf0c      	ite	eq
 800658c:	2308      	moveq	r3, #8
 800658e:	230a      	movne	r3, #10
 8006590:	2100      	movs	r1, #0
 8006592:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006596:	6865      	ldr	r5, [r4, #4]
 8006598:	60a5      	str	r5, [r4, #8]
 800659a:	2d00      	cmp	r5, #0
 800659c:	bfa2      	ittt	ge
 800659e:	6821      	ldrge	r1, [r4, #0]
 80065a0:	f021 0104 	bicge.w	r1, r1, #4
 80065a4:	6021      	strge	r1, [r4, #0]
 80065a6:	b90e      	cbnz	r6, 80065ac <_printf_i+0x118>
 80065a8:	2d00      	cmp	r5, #0
 80065aa:	d04d      	beq.n	8006648 <_printf_i+0x1b4>
 80065ac:	4615      	mov	r5, r2
 80065ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80065b2:	fb03 6711 	mls	r7, r3, r1, r6
 80065b6:	5dc7      	ldrb	r7, [r0, r7]
 80065b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065bc:	4637      	mov	r7, r6
 80065be:	42bb      	cmp	r3, r7
 80065c0:	460e      	mov	r6, r1
 80065c2:	d9f4      	bls.n	80065ae <_printf_i+0x11a>
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d10b      	bne.n	80065e0 <_printf_i+0x14c>
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	07de      	lsls	r6, r3, #31
 80065cc:	d508      	bpl.n	80065e0 <_printf_i+0x14c>
 80065ce:	6923      	ldr	r3, [r4, #16]
 80065d0:	6861      	ldr	r1, [r4, #4]
 80065d2:	4299      	cmp	r1, r3
 80065d4:	bfde      	ittt	le
 80065d6:	2330      	movle	r3, #48	; 0x30
 80065d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065e0:	1b52      	subs	r2, r2, r5
 80065e2:	6122      	str	r2, [r4, #16]
 80065e4:	f8cd a000 	str.w	sl, [sp]
 80065e8:	464b      	mov	r3, r9
 80065ea:	aa03      	add	r2, sp, #12
 80065ec:	4621      	mov	r1, r4
 80065ee:	4640      	mov	r0, r8
 80065f0:	f7ff fee2 	bl	80063b8 <_printf_common>
 80065f4:	3001      	adds	r0, #1
 80065f6:	d14c      	bne.n	8006692 <_printf_i+0x1fe>
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	b004      	add	sp, #16
 80065fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006602:	4835      	ldr	r0, [pc, #212]	; (80066d8 <_printf_i+0x244>)
 8006604:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006608:	6829      	ldr	r1, [r5, #0]
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006610:	6029      	str	r1, [r5, #0]
 8006612:	061d      	lsls	r5, r3, #24
 8006614:	d514      	bpl.n	8006640 <_printf_i+0x1ac>
 8006616:	07df      	lsls	r7, r3, #31
 8006618:	bf44      	itt	mi
 800661a:	f043 0320 	orrmi.w	r3, r3, #32
 800661e:	6023      	strmi	r3, [r4, #0]
 8006620:	b91e      	cbnz	r6, 800662a <_printf_i+0x196>
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	f023 0320 	bic.w	r3, r3, #32
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	2310      	movs	r3, #16
 800662c:	e7b0      	b.n	8006590 <_printf_i+0xfc>
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	f043 0320 	orr.w	r3, r3, #32
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	2378      	movs	r3, #120	; 0x78
 8006638:	4828      	ldr	r0, [pc, #160]	; (80066dc <_printf_i+0x248>)
 800663a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800663e:	e7e3      	b.n	8006608 <_printf_i+0x174>
 8006640:	0659      	lsls	r1, r3, #25
 8006642:	bf48      	it	mi
 8006644:	b2b6      	uxthmi	r6, r6
 8006646:	e7e6      	b.n	8006616 <_printf_i+0x182>
 8006648:	4615      	mov	r5, r2
 800664a:	e7bb      	b.n	80065c4 <_printf_i+0x130>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	6826      	ldr	r6, [r4, #0]
 8006650:	6961      	ldr	r1, [r4, #20]
 8006652:	1d18      	adds	r0, r3, #4
 8006654:	6028      	str	r0, [r5, #0]
 8006656:	0635      	lsls	r5, r6, #24
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	d501      	bpl.n	8006660 <_printf_i+0x1cc>
 800665c:	6019      	str	r1, [r3, #0]
 800665e:	e002      	b.n	8006666 <_printf_i+0x1d2>
 8006660:	0670      	lsls	r0, r6, #25
 8006662:	d5fb      	bpl.n	800665c <_printf_i+0x1c8>
 8006664:	8019      	strh	r1, [r3, #0]
 8006666:	2300      	movs	r3, #0
 8006668:	6123      	str	r3, [r4, #16]
 800666a:	4615      	mov	r5, r2
 800666c:	e7ba      	b.n	80065e4 <_printf_i+0x150>
 800666e:	682b      	ldr	r3, [r5, #0]
 8006670:	1d1a      	adds	r2, r3, #4
 8006672:	602a      	str	r2, [r5, #0]
 8006674:	681d      	ldr	r5, [r3, #0]
 8006676:	6862      	ldr	r2, [r4, #4]
 8006678:	2100      	movs	r1, #0
 800667a:	4628      	mov	r0, r5
 800667c:	f7f9 fdc8 	bl	8000210 <memchr>
 8006680:	b108      	cbz	r0, 8006686 <_printf_i+0x1f2>
 8006682:	1b40      	subs	r0, r0, r5
 8006684:	6060      	str	r0, [r4, #4]
 8006686:	6863      	ldr	r3, [r4, #4]
 8006688:	6123      	str	r3, [r4, #16]
 800668a:	2300      	movs	r3, #0
 800668c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006690:	e7a8      	b.n	80065e4 <_printf_i+0x150>
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	462a      	mov	r2, r5
 8006696:	4649      	mov	r1, r9
 8006698:	4640      	mov	r0, r8
 800669a:	47d0      	blx	sl
 800669c:	3001      	adds	r0, #1
 800669e:	d0ab      	beq.n	80065f8 <_printf_i+0x164>
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	079b      	lsls	r3, r3, #30
 80066a4:	d413      	bmi.n	80066ce <_printf_i+0x23a>
 80066a6:	68e0      	ldr	r0, [r4, #12]
 80066a8:	9b03      	ldr	r3, [sp, #12]
 80066aa:	4298      	cmp	r0, r3
 80066ac:	bfb8      	it	lt
 80066ae:	4618      	movlt	r0, r3
 80066b0:	e7a4      	b.n	80065fc <_printf_i+0x168>
 80066b2:	2301      	movs	r3, #1
 80066b4:	4632      	mov	r2, r6
 80066b6:	4649      	mov	r1, r9
 80066b8:	4640      	mov	r0, r8
 80066ba:	47d0      	blx	sl
 80066bc:	3001      	adds	r0, #1
 80066be:	d09b      	beq.n	80065f8 <_printf_i+0x164>
 80066c0:	3501      	adds	r5, #1
 80066c2:	68e3      	ldr	r3, [r4, #12]
 80066c4:	9903      	ldr	r1, [sp, #12]
 80066c6:	1a5b      	subs	r3, r3, r1
 80066c8:	42ab      	cmp	r3, r5
 80066ca:	dcf2      	bgt.n	80066b2 <_printf_i+0x21e>
 80066cc:	e7eb      	b.n	80066a6 <_printf_i+0x212>
 80066ce:	2500      	movs	r5, #0
 80066d0:	f104 0619 	add.w	r6, r4, #25
 80066d4:	e7f5      	b.n	80066c2 <_printf_i+0x22e>
 80066d6:	bf00      	nop
 80066d8:	08006e09 	.word	0x08006e09
 80066dc:	08006e1a 	.word	0x08006e1a

080066e0 <_sbrk_r>:
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	4d06      	ldr	r5, [pc, #24]	; (80066fc <_sbrk_r+0x1c>)
 80066e4:	2300      	movs	r3, #0
 80066e6:	4604      	mov	r4, r0
 80066e8:	4608      	mov	r0, r1
 80066ea:	602b      	str	r3, [r5, #0]
 80066ec:	f7fa fb5c 	bl	8000da8 <_sbrk>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d102      	bne.n	80066fa <_sbrk_r+0x1a>
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	b103      	cbz	r3, 80066fa <_sbrk_r+0x1a>
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	20004ab8 	.word	0x20004ab8

08006700 <__sread>:
 8006700:	b510      	push	{r4, lr}
 8006702:	460c      	mov	r4, r1
 8006704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006708:	f000 fab2 	bl	8006c70 <_read_r>
 800670c:	2800      	cmp	r0, #0
 800670e:	bfab      	itete	ge
 8006710:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006712:	89a3      	ldrhlt	r3, [r4, #12]
 8006714:	181b      	addge	r3, r3, r0
 8006716:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800671a:	bfac      	ite	ge
 800671c:	6563      	strge	r3, [r4, #84]	; 0x54
 800671e:	81a3      	strhlt	r3, [r4, #12]
 8006720:	bd10      	pop	{r4, pc}

08006722 <__swrite>:
 8006722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006726:	461f      	mov	r7, r3
 8006728:	898b      	ldrh	r3, [r1, #12]
 800672a:	05db      	lsls	r3, r3, #23
 800672c:	4605      	mov	r5, r0
 800672e:	460c      	mov	r4, r1
 8006730:	4616      	mov	r6, r2
 8006732:	d505      	bpl.n	8006740 <__swrite+0x1e>
 8006734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006738:	2302      	movs	r3, #2
 800673a:	2200      	movs	r2, #0
 800673c:	f000 f9c8 	bl	8006ad0 <_lseek_r>
 8006740:	89a3      	ldrh	r3, [r4, #12]
 8006742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800674a:	81a3      	strh	r3, [r4, #12]
 800674c:	4632      	mov	r2, r6
 800674e:	463b      	mov	r3, r7
 8006750:	4628      	mov	r0, r5
 8006752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006756:	f000 b869 	b.w	800682c <_write_r>

0800675a <__sseek>:
 800675a:	b510      	push	{r4, lr}
 800675c:	460c      	mov	r4, r1
 800675e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006762:	f000 f9b5 	bl	8006ad0 <_lseek_r>
 8006766:	1c43      	adds	r3, r0, #1
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	bf15      	itete	ne
 800676c:	6560      	strne	r0, [r4, #84]	; 0x54
 800676e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006772:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006776:	81a3      	strheq	r3, [r4, #12]
 8006778:	bf18      	it	ne
 800677a:	81a3      	strhne	r3, [r4, #12]
 800677c:	bd10      	pop	{r4, pc}

0800677e <__sclose>:
 800677e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006782:	f000 b8d3 	b.w	800692c <_close_r>
	...

08006788 <__swbuf_r>:
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	460e      	mov	r6, r1
 800678c:	4614      	mov	r4, r2
 800678e:	4605      	mov	r5, r0
 8006790:	b118      	cbz	r0, 800679a <__swbuf_r+0x12>
 8006792:	6983      	ldr	r3, [r0, #24]
 8006794:	b90b      	cbnz	r3, 800679a <__swbuf_r+0x12>
 8006796:	f7ff fb81 	bl	8005e9c <__sinit>
 800679a:	4b21      	ldr	r3, [pc, #132]	; (8006820 <__swbuf_r+0x98>)
 800679c:	429c      	cmp	r4, r3
 800679e:	d12b      	bne.n	80067f8 <__swbuf_r+0x70>
 80067a0:	686c      	ldr	r4, [r5, #4]
 80067a2:	69a3      	ldr	r3, [r4, #24]
 80067a4:	60a3      	str	r3, [r4, #8]
 80067a6:	89a3      	ldrh	r3, [r4, #12]
 80067a8:	071a      	lsls	r2, r3, #28
 80067aa:	d52f      	bpl.n	800680c <__swbuf_r+0x84>
 80067ac:	6923      	ldr	r3, [r4, #16]
 80067ae:	b36b      	cbz	r3, 800680c <__swbuf_r+0x84>
 80067b0:	6923      	ldr	r3, [r4, #16]
 80067b2:	6820      	ldr	r0, [r4, #0]
 80067b4:	1ac0      	subs	r0, r0, r3
 80067b6:	6963      	ldr	r3, [r4, #20]
 80067b8:	b2f6      	uxtb	r6, r6
 80067ba:	4283      	cmp	r3, r0
 80067bc:	4637      	mov	r7, r6
 80067be:	dc04      	bgt.n	80067ca <__swbuf_r+0x42>
 80067c0:	4621      	mov	r1, r4
 80067c2:	4628      	mov	r0, r5
 80067c4:	f000 f948 	bl	8006a58 <_fflush_r>
 80067c8:	bb30      	cbnz	r0, 8006818 <__swbuf_r+0x90>
 80067ca:	68a3      	ldr	r3, [r4, #8]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	60a3      	str	r3, [r4, #8]
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	6022      	str	r2, [r4, #0]
 80067d6:	701e      	strb	r6, [r3, #0]
 80067d8:	6963      	ldr	r3, [r4, #20]
 80067da:	3001      	adds	r0, #1
 80067dc:	4283      	cmp	r3, r0
 80067de:	d004      	beq.n	80067ea <__swbuf_r+0x62>
 80067e0:	89a3      	ldrh	r3, [r4, #12]
 80067e2:	07db      	lsls	r3, r3, #31
 80067e4:	d506      	bpl.n	80067f4 <__swbuf_r+0x6c>
 80067e6:	2e0a      	cmp	r6, #10
 80067e8:	d104      	bne.n	80067f4 <__swbuf_r+0x6c>
 80067ea:	4621      	mov	r1, r4
 80067ec:	4628      	mov	r0, r5
 80067ee:	f000 f933 	bl	8006a58 <_fflush_r>
 80067f2:	b988      	cbnz	r0, 8006818 <__swbuf_r+0x90>
 80067f4:	4638      	mov	r0, r7
 80067f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f8:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <__swbuf_r+0x9c>)
 80067fa:	429c      	cmp	r4, r3
 80067fc:	d101      	bne.n	8006802 <__swbuf_r+0x7a>
 80067fe:	68ac      	ldr	r4, [r5, #8]
 8006800:	e7cf      	b.n	80067a2 <__swbuf_r+0x1a>
 8006802:	4b09      	ldr	r3, [pc, #36]	; (8006828 <__swbuf_r+0xa0>)
 8006804:	429c      	cmp	r4, r3
 8006806:	bf08      	it	eq
 8006808:	68ec      	ldreq	r4, [r5, #12]
 800680a:	e7ca      	b.n	80067a2 <__swbuf_r+0x1a>
 800680c:	4621      	mov	r1, r4
 800680e:	4628      	mov	r0, r5
 8006810:	f000 f81e 	bl	8006850 <__swsetup_r>
 8006814:	2800      	cmp	r0, #0
 8006816:	d0cb      	beq.n	80067b0 <__swbuf_r+0x28>
 8006818:	f04f 37ff 	mov.w	r7, #4294967295
 800681c:	e7ea      	b.n	80067f4 <__swbuf_r+0x6c>
 800681e:	bf00      	nop
 8006820:	08006db8 	.word	0x08006db8
 8006824:	08006dd8 	.word	0x08006dd8
 8006828:	08006d98 	.word	0x08006d98

0800682c <_write_r>:
 800682c:	b538      	push	{r3, r4, r5, lr}
 800682e:	4d07      	ldr	r5, [pc, #28]	; (800684c <_write_r+0x20>)
 8006830:	4604      	mov	r4, r0
 8006832:	4608      	mov	r0, r1
 8006834:	4611      	mov	r1, r2
 8006836:	2200      	movs	r2, #0
 8006838:	602a      	str	r2, [r5, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	f7fa fa63 	bl	8000d06 <_write>
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d102      	bne.n	800684a <_write_r+0x1e>
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	b103      	cbz	r3, 800684a <_write_r+0x1e>
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	20004ab8 	.word	0x20004ab8

08006850 <__swsetup_r>:
 8006850:	4b32      	ldr	r3, [pc, #200]	; (800691c <__swsetup_r+0xcc>)
 8006852:	b570      	push	{r4, r5, r6, lr}
 8006854:	681d      	ldr	r5, [r3, #0]
 8006856:	4606      	mov	r6, r0
 8006858:	460c      	mov	r4, r1
 800685a:	b125      	cbz	r5, 8006866 <__swsetup_r+0x16>
 800685c:	69ab      	ldr	r3, [r5, #24]
 800685e:	b913      	cbnz	r3, 8006866 <__swsetup_r+0x16>
 8006860:	4628      	mov	r0, r5
 8006862:	f7ff fb1b 	bl	8005e9c <__sinit>
 8006866:	4b2e      	ldr	r3, [pc, #184]	; (8006920 <__swsetup_r+0xd0>)
 8006868:	429c      	cmp	r4, r3
 800686a:	d10f      	bne.n	800688c <__swsetup_r+0x3c>
 800686c:	686c      	ldr	r4, [r5, #4]
 800686e:	89a3      	ldrh	r3, [r4, #12]
 8006870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006874:	0719      	lsls	r1, r3, #28
 8006876:	d42c      	bmi.n	80068d2 <__swsetup_r+0x82>
 8006878:	06dd      	lsls	r5, r3, #27
 800687a:	d411      	bmi.n	80068a0 <__swsetup_r+0x50>
 800687c:	2309      	movs	r3, #9
 800687e:	6033      	str	r3, [r6, #0]
 8006880:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006884:	81a3      	strh	r3, [r4, #12]
 8006886:	f04f 30ff 	mov.w	r0, #4294967295
 800688a:	e03e      	b.n	800690a <__swsetup_r+0xba>
 800688c:	4b25      	ldr	r3, [pc, #148]	; (8006924 <__swsetup_r+0xd4>)
 800688e:	429c      	cmp	r4, r3
 8006890:	d101      	bne.n	8006896 <__swsetup_r+0x46>
 8006892:	68ac      	ldr	r4, [r5, #8]
 8006894:	e7eb      	b.n	800686e <__swsetup_r+0x1e>
 8006896:	4b24      	ldr	r3, [pc, #144]	; (8006928 <__swsetup_r+0xd8>)
 8006898:	429c      	cmp	r4, r3
 800689a:	bf08      	it	eq
 800689c:	68ec      	ldreq	r4, [r5, #12]
 800689e:	e7e6      	b.n	800686e <__swsetup_r+0x1e>
 80068a0:	0758      	lsls	r0, r3, #29
 80068a2:	d512      	bpl.n	80068ca <__swsetup_r+0x7a>
 80068a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068a6:	b141      	cbz	r1, 80068ba <__swsetup_r+0x6a>
 80068a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068ac:	4299      	cmp	r1, r3
 80068ae:	d002      	beq.n	80068b6 <__swsetup_r+0x66>
 80068b0:	4630      	mov	r0, r6
 80068b2:	f000 f991 	bl	8006bd8 <_free_r>
 80068b6:	2300      	movs	r3, #0
 80068b8:	6363      	str	r3, [r4, #52]	; 0x34
 80068ba:	89a3      	ldrh	r3, [r4, #12]
 80068bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068c0:	81a3      	strh	r3, [r4, #12]
 80068c2:	2300      	movs	r3, #0
 80068c4:	6063      	str	r3, [r4, #4]
 80068c6:	6923      	ldr	r3, [r4, #16]
 80068c8:	6023      	str	r3, [r4, #0]
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	f043 0308 	orr.w	r3, r3, #8
 80068d0:	81a3      	strh	r3, [r4, #12]
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	b94b      	cbnz	r3, 80068ea <__swsetup_r+0x9a>
 80068d6:	89a3      	ldrh	r3, [r4, #12]
 80068d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e0:	d003      	beq.n	80068ea <__swsetup_r+0x9a>
 80068e2:	4621      	mov	r1, r4
 80068e4:	4630      	mov	r0, r6
 80068e6:	f000 f92b 	bl	8006b40 <__smakebuf_r>
 80068ea:	89a0      	ldrh	r0, [r4, #12]
 80068ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068f0:	f010 0301 	ands.w	r3, r0, #1
 80068f4:	d00a      	beq.n	800690c <__swsetup_r+0xbc>
 80068f6:	2300      	movs	r3, #0
 80068f8:	60a3      	str	r3, [r4, #8]
 80068fa:	6963      	ldr	r3, [r4, #20]
 80068fc:	425b      	negs	r3, r3
 80068fe:	61a3      	str	r3, [r4, #24]
 8006900:	6923      	ldr	r3, [r4, #16]
 8006902:	b943      	cbnz	r3, 8006916 <__swsetup_r+0xc6>
 8006904:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006908:	d1ba      	bne.n	8006880 <__swsetup_r+0x30>
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	0781      	lsls	r1, r0, #30
 800690e:	bf58      	it	pl
 8006910:	6963      	ldrpl	r3, [r4, #20]
 8006912:	60a3      	str	r3, [r4, #8]
 8006914:	e7f4      	b.n	8006900 <__swsetup_r+0xb0>
 8006916:	2000      	movs	r0, #0
 8006918:	e7f7      	b.n	800690a <__swsetup_r+0xba>
 800691a:	bf00      	nop
 800691c:	20000010 	.word	0x20000010
 8006920:	08006db8 	.word	0x08006db8
 8006924:	08006dd8 	.word	0x08006dd8
 8006928:	08006d98 	.word	0x08006d98

0800692c <_close_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d06      	ldr	r5, [pc, #24]	; (8006948 <_close_r+0x1c>)
 8006930:	2300      	movs	r3, #0
 8006932:	4604      	mov	r4, r0
 8006934:	4608      	mov	r0, r1
 8006936:	602b      	str	r3, [r5, #0]
 8006938:	f7fa fa01 	bl	8000d3e <_close>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d102      	bne.n	8006946 <_close_r+0x1a>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b103      	cbz	r3, 8006946 <_close_r+0x1a>
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	bd38      	pop	{r3, r4, r5, pc}
 8006948:	20004ab8 	.word	0x20004ab8

0800694c <__sflush_r>:
 800694c:	898a      	ldrh	r2, [r1, #12]
 800694e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006952:	4605      	mov	r5, r0
 8006954:	0710      	lsls	r0, r2, #28
 8006956:	460c      	mov	r4, r1
 8006958:	d458      	bmi.n	8006a0c <__sflush_r+0xc0>
 800695a:	684b      	ldr	r3, [r1, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	dc05      	bgt.n	800696c <__sflush_r+0x20>
 8006960:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	dc02      	bgt.n	800696c <__sflush_r+0x20>
 8006966:	2000      	movs	r0, #0
 8006968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800696c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800696e:	2e00      	cmp	r6, #0
 8006970:	d0f9      	beq.n	8006966 <__sflush_r+0x1a>
 8006972:	2300      	movs	r3, #0
 8006974:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006978:	682f      	ldr	r7, [r5, #0]
 800697a:	602b      	str	r3, [r5, #0]
 800697c:	d032      	beq.n	80069e4 <__sflush_r+0x98>
 800697e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	075a      	lsls	r2, r3, #29
 8006984:	d505      	bpl.n	8006992 <__sflush_r+0x46>
 8006986:	6863      	ldr	r3, [r4, #4]
 8006988:	1ac0      	subs	r0, r0, r3
 800698a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800698c:	b10b      	cbz	r3, 8006992 <__sflush_r+0x46>
 800698e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006990:	1ac0      	subs	r0, r0, r3
 8006992:	2300      	movs	r3, #0
 8006994:	4602      	mov	r2, r0
 8006996:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006998:	6a21      	ldr	r1, [r4, #32]
 800699a:	4628      	mov	r0, r5
 800699c:	47b0      	blx	r6
 800699e:	1c43      	adds	r3, r0, #1
 80069a0:	89a3      	ldrh	r3, [r4, #12]
 80069a2:	d106      	bne.n	80069b2 <__sflush_r+0x66>
 80069a4:	6829      	ldr	r1, [r5, #0]
 80069a6:	291d      	cmp	r1, #29
 80069a8:	d82c      	bhi.n	8006a04 <__sflush_r+0xb8>
 80069aa:	4a2a      	ldr	r2, [pc, #168]	; (8006a54 <__sflush_r+0x108>)
 80069ac:	40ca      	lsrs	r2, r1
 80069ae:	07d6      	lsls	r6, r2, #31
 80069b0:	d528      	bpl.n	8006a04 <__sflush_r+0xb8>
 80069b2:	2200      	movs	r2, #0
 80069b4:	6062      	str	r2, [r4, #4]
 80069b6:	04d9      	lsls	r1, r3, #19
 80069b8:	6922      	ldr	r2, [r4, #16]
 80069ba:	6022      	str	r2, [r4, #0]
 80069bc:	d504      	bpl.n	80069c8 <__sflush_r+0x7c>
 80069be:	1c42      	adds	r2, r0, #1
 80069c0:	d101      	bne.n	80069c6 <__sflush_r+0x7a>
 80069c2:	682b      	ldr	r3, [r5, #0]
 80069c4:	b903      	cbnz	r3, 80069c8 <__sflush_r+0x7c>
 80069c6:	6560      	str	r0, [r4, #84]	; 0x54
 80069c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ca:	602f      	str	r7, [r5, #0]
 80069cc:	2900      	cmp	r1, #0
 80069ce:	d0ca      	beq.n	8006966 <__sflush_r+0x1a>
 80069d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069d4:	4299      	cmp	r1, r3
 80069d6:	d002      	beq.n	80069de <__sflush_r+0x92>
 80069d8:	4628      	mov	r0, r5
 80069da:	f000 f8fd 	bl	8006bd8 <_free_r>
 80069de:	2000      	movs	r0, #0
 80069e0:	6360      	str	r0, [r4, #52]	; 0x34
 80069e2:	e7c1      	b.n	8006968 <__sflush_r+0x1c>
 80069e4:	6a21      	ldr	r1, [r4, #32]
 80069e6:	2301      	movs	r3, #1
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b0      	blx	r6
 80069ec:	1c41      	adds	r1, r0, #1
 80069ee:	d1c7      	bne.n	8006980 <__sflush_r+0x34>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0c4      	beq.n	8006980 <__sflush_r+0x34>
 80069f6:	2b1d      	cmp	r3, #29
 80069f8:	d001      	beq.n	80069fe <__sflush_r+0xb2>
 80069fa:	2b16      	cmp	r3, #22
 80069fc:	d101      	bne.n	8006a02 <__sflush_r+0xb6>
 80069fe:	602f      	str	r7, [r5, #0]
 8006a00:	e7b1      	b.n	8006966 <__sflush_r+0x1a>
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a08:	81a3      	strh	r3, [r4, #12]
 8006a0a:	e7ad      	b.n	8006968 <__sflush_r+0x1c>
 8006a0c:	690f      	ldr	r7, [r1, #16]
 8006a0e:	2f00      	cmp	r7, #0
 8006a10:	d0a9      	beq.n	8006966 <__sflush_r+0x1a>
 8006a12:	0793      	lsls	r3, r2, #30
 8006a14:	680e      	ldr	r6, [r1, #0]
 8006a16:	bf08      	it	eq
 8006a18:	694b      	ldreq	r3, [r1, #20]
 8006a1a:	600f      	str	r7, [r1, #0]
 8006a1c:	bf18      	it	ne
 8006a1e:	2300      	movne	r3, #0
 8006a20:	eba6 0807 	sub.w	r8, r6, r7
 8006a24:	608b      	str	r3, [r1, #8]
 8006a26:	f1b8 0f00 	cmp.w	r8, #0
 8006a2a:	dd9c      	ble.n	8006966 <__sflush_r+0x1a>
 8006a2c:	6a21      	ldr	r1, [r4, #32]
 8006a2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a30:	4643      	mov	r3, r8
 8006a32:	463a      	mov	r2, r7
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b0      	blx	r6
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	dc06      	bgt.n	8006a4a <__sflush_r+0xfe>
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a42:	81a3      	strh	r3, [r4, #12]
 8006a44:	f04f 30ff 	mov.w	r0, #4294967295
 8006a48:	e78e      	b.n	8006968 <__sflush_r+0x1c>
 8006a4a:	4407      	add	r7, r0
 8006a4c:	eba8 0800 	sub.w	r8, r8, r0
 8006a50:	e7e9      	b.n	8006a26 <__sflush_r+0xda>
 8006a52:	bf00      	nop
 8006a54:	20400001 	.word	0x20400001

08006a58 <_fflush_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	690b      	ldr	r3, [r1, #16]
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	b913      	cbnz	r3, 8006a68 <_fflush_r+0x10>
 8006a62:	2500      	movs	r5, #0
 8006a64:	4628      	mov	r0, r5
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	b118      	cbz	r0, 8006a72 <_fflush_r+0x1a>
 8006a6a:	6983      	ldr	r3, [r0, #24]
 8006a6c:	b90b      	cbnz	r3, 8006a72 <_fflush_r+0x1a>
 8006a6e:	f7ff fa15 	bl	8005e9c <__sinit>
 8006a72:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <_fflush_r+0x6c>)
 8006a74:	429c      	cmp	r4, r3
 8006a76:	d11b      	bne.n	8006ab0 <_fflush_r+0x58>
 8006a78:	686c      	ldr	r4, [r5, #4]
 8006a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0ef      	beq.n	8006a62 <_fflush_r+0xa>
 8006a82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a84:	07d0      	lsls	r0, r2, #31
 8006a86:	d404      	bmi.n	8006a92 <_fflush_r+0x3a>
 8006a88:	0599      	lsls	r1, r3, #22
 8006a8a:	d402      	bmi.n	8006a92 <_fflush_r+0x3a>
 8006a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a8e:	f7ff faa3 	bl	8005fd8 <__retarget_lock_acquire_recursive>
 8006a92:	4628      	mov	r0, r5
 8006a94:	4621      	mov	r1, r4
 8006a96:	f7ff ff59 	bl	800694c <__sflush_r>
 8006a9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a9c:	07da      	lsls	r2, r3, #31
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	d4e0      	bmi.n	8006a64 <_fflush_r+0xc>
 8006aa2:	89a3      	ldrh	r3, [r4, #12]
 8006aa4:	059b      	lsls	r3, r3, #22
 8006aa6:	d4dd      	bmi.n	8006a64 <_fflush_r+0xc>
 8006aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aaa:	f7ff fa96 	bl	8005fda <__retarget_lock_release_recursive>
 8006aae:	e7d9      	b.n	8006a64 <_fflush_r+0xc>
 8006ab0:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <_fflush_r+0x70>)
 8006ab2:	429c      	cmp	r4, r3
 8006ab4:	d101      	bne.n	8006aba <_fflush_r+0x62>
 8006ab6:	68ac      	ldr	r4, [r5, #8]
 8006ab8:	e7df      	b.n	8006a7a <_fflush_r+0x22>
 8006aba:	4b04      	ldr	r3, [pc, #16]	; (8006acc <_fflush_r+0x74>)
 8006abc:	429c      	cmp	r4, r3
 8006abe:	bf08      	it	eq
 8006ac0:	68ec      	ldreq	r4, [r5, #12]
 8006ac2:	e7da      	b.n	8006a7a <_fflush_r+0x22>
 8006ac4:	08006db8 	.word	0x08006db8
 8006ac8:	08006dd8 	.word	0x08006dd8
 8006acc:	08006d98 	.word	0x08006d98

08006ad0 <_lseek_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	4d07      	ldr	r5, [pc, #28]	; (8006af0 <_lseek_r+0x20>)
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	4608      	mov	r0, r1
 8006ad8:	4611      	mov	r1, r2
 8006ada:	2200      	movs	r2, #0
 8006adc:	602a      	str	r2, [r5, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f7fa f954 	bl	8000d8c <_lseek>
 8006ae4:	1c43      	adds	r3, r0, #1
 8006ae6:	d102      	bne.n	8006aee <_lseek_r+0x1e>
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	b103      	cbz	r3, 8006aee <_lseek_r+0x1e>
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
 8006af0:	20004ab8 	.word	0x20004ab8

08006af4 <__swhatbuf_r>:
 8006af4:	b570      	push	{r4, r5, r6, lr}
 8006af6:	460e      	mov	r6, r1
 8006af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afc:	2900      	cmp	r1, #0
 8006afe:	b096      	sub	sp, #88	; 0x58
 8006b00:	4614      	mov	r4, r2
 8006b02:	461d      	mov	r5, r3
 8006b04:	da08      	bge.n	8006b18 <__swhatbuf_r+0x24>
 8006b06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	602a      	str	r2, [r5, #0]
 8006b0e:	061a      	lsls	r2, r3, #24
 8006b10:	d410      	bmi.n	8006b34 <__swhatbuf_r+0x40>
 8006b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b16:	e00e      	b.n	8006b36 <__swhatbuf_r+0x42>
 8006b18:	466a      	mov	r2, sp
 8006b1a:	f000 f8bb 	bl	8006c94 <_fstat_r>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	dbf1      	blt.n	8006b06 <__swhatbuf_r+0x12>
 8006b22:	9a01      	ldr	r2, [sp, #4]
 8006b24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b2c:	425a      	negs	r2, r3
 8006b2e:	415a      	adcs	r2, r3
 8006b30:	602a      	str	r2, [r5, #0]
 8006b32:	e7ee      	b.n	8006b12 <__swhatbuf_r+0x1e>
 8006b34:	2340      	movs	r3, #64	; 0x40
 8006b36:	2000      	movs	r0, #0
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	b016      	add	sp, #88	; 0x58
 8006b3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b40 <__smakebuf_r>:
 8006b40:	898b      	ldrh	r3, [r1, #12]
 8006b42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b44:	079d      	lsls	r5, r3, #30
 8006b46:	4606      	mov	r6, r0
 8006b48:	460c      	mov	r4, r1
 8006b4a:	d507      	bpl.n	8006b5c <__smakebuf_r+0x1c>
 8006b4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	6123      	str	r3, [r4, #16]
 8006b54:	2301      	movs	r3, #1
 8006b56:	6163      	str	r3, [r4, #20]
 8006b58:	b002      	add	sp, #8
 8006b5a:	bd70      	pop	{r4, r5, r6, pc}
 8006b5c:	ab01      	add	r3, sp, #4
 8006b5e:	466a      	mov	r2, sp
 8006b60:	f7ff ffc8 	bl	8006af4 <__swhatbuf_r>
 8006b64:	9900      	ldr	r1, [sp, #0]
 8006b66:	4605      	mov	r5, r0
 8006b68:	4630      	mov	r0, r6
 8006b6a:	f7ff fa57 	bl	800601c <_malloc_r>
 8006b6e:	b948      	cbnz	r0, 8006b84 <__smakebuf_r+0x44>
 8006b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b74:	059a      	lsls	r2, r3, #22
 8006b76:	d4ef      	bmi.n	8006b58 <__smakebuf_r+0x18>
 8006b78:	f023 0303 	bic.w	r3, r3, #3
 8006b7c:	f043 0302 	orr.w	r3, r3, #2
 8006b80:	81a3      	strh	r3, [r4, #12]
 8006b82:	e7e3      	b.n	8006b4c <__smakebuf_r+0xc>
 8006b84:	4b0d      	ldr	r3, [pc, #52]	; (8006bbc <__smakebuf_r+0x7c>)
 8006b86:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	6020      	str	r0, [r4, #0]
 8006b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b90:	81a3      	strh	r3, [r4, #12]
 8006b92:	9b00      	ldr	r3, [sp, #0]
 8006b94:	6163      	str	r3, [r4, #20]
 8006b96:	9b01      	ldr	r3, [sp, #4]
 8006b98:	6120      	str	r0, [r4, #16]
 8006b9a:	b15b      	cbz	r3, 8006bb4 <__smakebuf_r+0x74>
 8006b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f000 f889 	bl	8006cb8 <_isatty_r>
 8006ba6:	b128      	cbz	r0, 8006bb4 <__smakebuf_r+0x74>
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	f023 0303 	bic.w	r3, r3, #3
 8006bae:	f043 0301 	orr.w	r3, r3, #1
 8006bb2:	81a3      	strh	r3, [r4, #12]
 8006bb4:	89a0      	ldrh	r0, [r4, #12]
 8006bb6:	4305      	orrs	r5, r0
 8006bb8:	81a5      	strh	r5, [r4, #12]
 8006bba:	e7cd      	b.n	8006b58 <__smakebuf_r+0x18>
 8006bbc:	08005e35 	.word	0x08005e35

08006bc0 <__malloc_lock>:
 8006bc0:	4801      	ldr	r0, [pc, #4]	; (8006bc8 <__malloc_lock+0x8>)
 8006bc2:	f7ff ba09 	b.w	8005fd8 <__retarget_lock_acquire_recursive>
 8006bc6:	bf00      	nop
 8006bc8:	20004aac 	.word	0x20004aac

08006bcc <__malloc_unlock>:
 8006bcc:	4801      	ldr	r0, [pc, #4]	; (8006bd4 <__malloc_unlock+0x8>)
 8006bce:	f7ff ba04 	b.w	8005fda <__retarget_lock_release_recursive>
 8006bd2:	bf00      	nop
 8006bd4:	20004aac 	.word	0x20004aac

08006bd8 <_free_r>:
 8006bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bda:	2900      	cmp	r1, #0
 8006bdc:	d044      	beq.n	8006c68 <_free_r+0x90>
 8006bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be2:	9001      	str	r0, [sp, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f1a1 0404 	sub.w	r4, r1, #4
 8006bea:	bfb8      	it	lt
 8006bec:	18e4      	addlt	r4, r4, r3
 8006bee:	f7ff ffe7 	bl	8006bc0 <__malloc_lock>
 8006bf2:	4a1e      	ldr	r2, [pc, #120]	; (8006c6c <_free_r+0x94>)
 8006bf4:	9801      	ldr	r0, [sp, #4]
 8006bf6:	6813      	ldr	r3, [r2, #0]
 8006bf8:	b933      	cbnz	r3, 8006c08 <_free_r+0x30>
 8006bfa:	6063      	str	r3, [r4, #4]
 8006bfc:	6014      	str	r4, [r2, #0]
 8006bfe:	b003      	add	sp, #12
 8006c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c04:	f7ff bfe2 	b.w	8006bcc <__malloc_unlock>
 8006c08:	42a3      	cmp	r3, r4
 8006c0a:	d908      	bls.n	8006c1e <_free_r+0x46>
 8006c0c:	6825      	ldr	r5, [r4, #0]
 8006c0e:	1961      	adds	r1, r4, r5
 8006c10:	428b      	cmp	r3, r1
 8006c12:	bf01      	itttt	eq
 8006c14:	6819      	ldreq	r1, [r3, #0]
 8006c16:	685b      	ldreq	r3, [r3, #4]
 8006c18:	1949      	addeq	r1, r1, r5
 8006c1a:	6021      	streq	r1, [r4, #0]
 8006c1c:	e7ed      	b.n	8006bfa <_free_r+0x22>
 8006c1e:	461a      	mov	r2, r3
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	b10b      	cbz	r3, 8006c28 <_free_r+0x50>
 8006c24:	42a3      	cmp	r3, r4
 8006c26:	d9fa      	bls.n	8006c1e <_free_r+0x46>
 8006c28:	6811      	ldr	r1, [r2, #0]
 8006c2a:	1855      	adds	r5, r2, r1
 8006c2c:	42a5      	cmp	r5, r4
 8006c2e:	d10b      	bne.n	8006c48 <_free_r+0x70>
 8006c30:	6824      	ldr	r4, [r4, #0]
 8006c32:	4421      	add	r1, r4
 8006c34:	1854      	adds	r4, r2, r1
 8006c36:	42a3      	cmp	r3, r4
 8006c38:	6011      	str	r1, [r2, #0]
 8006c3a:	d1e0      	bne.n	8006bfe <_free_r+0x26>
 8006c3c:	681c      	ldr	r4, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	6053      	str	r3, [r2, #4]
 8006c42:	4421      	add	r1, r4
 8006c44:	6011      	str	r1, [r2, #0]
 8006c46:	e7da      	b.n	8006bfe <_free_r+0x26>
 8006c48:	d902      	bls.n	8006c50 <_free_r+0x78>
 8006c4a:	230c      	movs	r3, #12
 8006c4c:	6003      	str	r3, [r0, #0]
 8006c4e:	e7d6      	b.n	8006bfe <_free_r+0x26>
 8006c50:	6825      	ldr	r5, [r4, #0]
 8006c52:	1961      	adds	r1, r4, r5
 8006c54:	428b      	cmp	r3, r1
 8006c56:	bf04      	itt	eq
 8006c58:	6819      	ldreq	r1, [r3, #0]
 8006c5a:	685b      	ldreq	r3, [r3, #4]
 8006c5c:	6063      	str	r3, [r4, #4]
 8006c5e:	bf04      	itt	eq
 8006c60:	1949      	addeq	r1, r1, r5
 8006c62:	6021      	streq	r1, [r4, #0]
 8006c64:	6054      	str	r4, [r2, #4]
 8006c66:	e7ca      	b.n	8006bfe <_free_r+0x26>
 8006c68:	b003      	add	sp, #12
 8006c6a:	bd30      	pop	{r4, r5, pc}
 8006c6c:	20004ab0 	.word	0x20004ab0

08006c70 <_read_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	4d07      	ldr	r5, [pc, #28]	; (8006c90 <_read_r+0x20>)
 8006c74:	4604      	mov	r4, r0
 8006c76:	4608      	mov	r0, r1
 8006c78:	4611      	mov	r1, r2
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	602a      	str	r2, [r5, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f7fa f824 	bl	8000ccc <_read>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	d102      	bne.n	8006c8e <_read_r+0x1e>
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	b103      	cbz	r3, 8006c8e <_read_r+0x1e>
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	bd38      	pop	{r3, r4, r5, pc}
 8006c90:	20004ab8 	.word	0x20004ab8

08006c94 <_fstat_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4d07      	ldr	r5, [pc, #28]	; (8006cb4 <_fstat_r+0x20>)
 8006c98:	2300      	movs	r3, #0
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	602b      	str	r3, [r5, #0]
 8006ca2:	f7fa f858 	bl	8000d56 <_fstat>
 8006ca6:	1c43      	adds	r3, r0, #1
 8006ca8:	d102      	bne.n	8006cb0 <_fstat_r+0x1c>
 8006caa:	682b      	ldr	r3, [r5, #0]
 8006cac:	b103      	cbz	r3, 8006cb0 <_fstat_r+0x1c>
 8006cae:	6023      	str	r3, [r4, #0]
 8006cb0:	bd38      	pop	{r3, r4, r5, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20004ab8 	.word	0x20004ab8

08006cb8 <_isatty_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d06      	ldr	r5, [pc, #24]	; (8006cd4 <_isatty_r+0x1c>)
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	4608      	mov	r0, r1
 8006cc2:	602b      	str	r3, [r5, #0]
 8006cc4:	f7fa f857 	bl	8000d76 <_isatty>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d102      	bne.n	8006cd2 <_isatty_r+0x1a>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	b103      	cbz	r3, 8006cd2 <_isatty_r+0x1a>
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	20004ab8 	.word	0x20004ab8

08006cd8 <_init>:
 8006cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cda:	bf00      	nop
 8006cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cde:	bc08      	pop	{r3}
 8006ce0:	469e      	mov	lr, r3
 8006ce2:	4770      	bx	lr

08006ce4 <_fini>:
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce6:	bf00      	nop
 8006ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cea:	bc08      	pop	{r3}
 8006cec:	469e      	mov	lr, r3
 8006cee:	4770      	bx	lr
