
40_Cmsis_Rtos_osDelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005258  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005428  08005428  00015428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005488  08005488  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005488  08005488  00015488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005490  08005490  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a1c  20000010  080054a8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a2c  080054a8  00024a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fac  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003116  00000000  00000000  00037fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  0003b108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003c530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003df2  00000000  00000000  0003d840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001633f  00000000  00000000  00041632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db287  00000000  00000000  00057971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132bf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005544  00000000  00000000  00132c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005410 	.word	0x08005410

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08005410 	.word	0x08005410

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
uint32_t resume_monitor;
bool _killed = false;


int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b0a4      	sub	sp, #144	; 0x90
 8000518:	af00      	add	r7, sp, #0

  HAL_Init();
 800051a:	f000 fb4b 	bl	8000bb4 <HAL_Init>
  SystemClock_Config();
 800051e:	f000 f8e9 	bl	80006f4 <SystemClock_Config>
  MX_GPIO_Init();
 8000522:	f000 f97f 	bl	8000824 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000526:	f000 f953 	bl	80007d0 <MX_USART2_UART_Init>

  //Initialize Kernel
  osKernelInitialize();
 800052a:	f002 f9e3 	bl	80028f4 <osKernelInitialize>

  //Create the threads
  osThreadAttr_t greenThreadAttribs = { .name = "GreenTasks",
 800052e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000532:	2224      	movs	r2, #36	; 0x24
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f004 ff62 	bl	8005400 <memset>
 800053c:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <main+0xe0>)
 800053e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000548:	2318      	movs	r3, #24
 800054a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  	  	  	  	  	  	  	  	.stack_size = STACK_SIZE,
										.priority = osPriorityNormal
  	  	  	  	  	  	  	  	  	  };

  green_id = osThreadNew(vGreenLedControllerTask, NULL, &greenThreadAttribs);
 800054e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000552:	461a      	mov	r2, r3
 8000554:	2100      	movs	r1, #0
 8000556:	4828      	ldr	r0, [pc, #160]	; (80005f8 <main+0xe4>)
 8000558:	f002 fa16 	bl	8002988 <osThreadNew>
 800055c:	4603      	mov	r3, r0
 800055e:	4a27      	ldr	r2, [pc, #156]	; (80005fc <main+0xe8>)
 8000560:	6013      	str	r3, [r2, #0]

  osThreadAttr_t redThreadAttribs = { .name = "RedTasks",
 8000562:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000566:	2224      	movs	r2, #36	; 0x24
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f004 ff48 	bl	8005400 <memset>
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <main+0xec>)
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
 8000574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000578:	65fb      	str	r3, [r7, #92]	; 0x5c
 800057a:	2319      	movs	r3, #25
 800057c:	663b      	str	r3, [r7, #96]	; 0x60
		  	  	  	  	  	  	  	  	.stack_size = STACK_SIZE,
										.priority = osPriorityNormal1
  	  	  	  	  	  	  	  	  	  };

  red_id = osThreadNew(vRedLedControllerTask, NULL, &redThreadAttribs);
 800057e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000582:	461a      	mov	r2, r3
 8000584:	2100      	movs	r1, #0
 8000586:	481f      	ldr	r0, [pc, #124]	; (8000604 <main+0xf0>)
 8000588:	f002 f9fe 	bl	8002988 <osThreadNew>
 800058c:	4603      	mov	r3, r0
 800058e:	4a1e      	ldr	r2, [pc, #120]	; (8000608 <main+0xf4>)
 8000590:	6013      	str	r3, [r2, #0]

  osThreadAttr_t blueThreadAttribs = { .name = "BlueTasks",
 8000592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000596:	2224      	movs	r2, #36	; 0x24
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f004 ff30 	bl	8005400 <memset>
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <main+0xf8>)
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
 80005a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80005aa:	231a      	movs	r3, #26
 80005ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		  	  	  	  	  	  	  	  	.stack_size = STACK_SIZE,
										.priority = osPriorityNormal2
  	  	  	  	  	  	  	  	  	  };

  blue_id = osThreadNew(vBlueLedControllerTask, NULL, &blueThreadAttribs);
 80005ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b2:	461a      	mov	r2, r3
 80005b4:	2100      	movs	r1, #0
 80005b6:	4816      	ldr	r0, [pc, #88]	; (8000610 <main+0xfc>)
 80005b8:	f002 f9e6 	bl	8002988 <osThreadNew>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <main+0x100>)
 80005c0:	6013      	str	r3, [r2, #0]

  osThreadAttr_t orangeThreadAttribs = { .name = "OrangeTasks",
 80005c2:	463b      	mov	r3, r7
 80005c4:	2224      	movs	r2, #36	; 0x24
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f004 ff19 	bl	8005400 <memset>
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <main+0x104>)
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	231b      	movs	r3, #27
 80005da:	61bb      	str	r3, [r7, #24]
		  	  	  	  	  	  	  	  	.stack_size = STACK_SIZE,
										.priority = osPriorityNormal3
  	  	  	  	  	  	  	  	  	  };

  orange_id = osThreadNew(vOrangeLedControllerTask, NULL, &orangeThreadAttribs);
 80005dc:	463b      	mov	r3, r7
 80005de:	461a      	mov	r2, r3
 80005e0:	2100      	movs	r1, #0
 80005e2:	480e      	ldr	r0, [pc, #56]	; (800061c <main+0x108>)
 80005e4:	f002 f9d0 	bl	8002988 <osThreadNew>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <main+0x10c>)
 80005ec:	6013      	str	r3, [r2, #0]

  //Start the kernel
  osKernelStart();
 80005ee:	f002 f9a5 	bl	800293c <osKernelStart>


  while (1)
 80005f2:	e7fe      	b.n	80005f2 <main+0xde>
 80005f4:	08005428 	.word	0x08005428
 80005f8:	08000625 	.word	0x08000625
 80005fc:	20000084 	.word	0x20000084
 8000600:	08005434 	.word	0x08005434
 8000604:	080006c1 	.word	0x080006c1
 8000608:	20000080 	.word	0x20000080
 800060c:	08005440 	.word	0x08005440
 8000610:	0800068d 	.word	0x0800068d
 8000614:	20000088 	.word	0x20000088
 8000618:	0800544c 	.word	0x0800544c
 800061c:	08000659 	.word	0x08000659
 8000620:	2000008c 	.word	0x2000008c

08000624 <vGreenLedControllerTask>:

  }
}

void vGreenLedControllerTask(void *pvParameters)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Green_TaskProfiler++;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <vGreenLedControllerTask+0x30>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3301      	adds	r3, #1
 8000632:	4a08      	ldr	r2, [pc, #32]	; (8000654 <vGreenLedControllerTask+0x30>)
 8000634:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 7000; i ++){}
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	e002      	b.n	8000642 <vGreenLedControllerTask+0x1e>
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	3301      	adds	r3, #1
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	f641 3257 	movw	r2, #6999	; 0x1b57
 8000648:	4293      	cmp	r3, r2
 800064a:	ddf7      	ble.n	800063c <vGreenLedControllerTask+0x18>
		osDelay(100);
 800064c:	2064      	movs	r0, #100	; 0x64
 800064e:	f002 fa2d 	bl	8002aac <osDelay>
		Green_TaskProfiler++;
 8000652:	e7eb      	b.n	800062c <vGreenLedControllerTask+0x8>
 8000654:	20000078 	.word	0x20000078

08000658 <vOrangeLedControllerTask>:
	}
}

void vOrangeLedControllerTask(void *pvParameters)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Orange_TaskProfiler++;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <vOrangeLedControllerTask+0x30>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	4a08      	ldr	r2, [pc, #32]	; (8000688 <vOrangeLedControllerTask+0x30>)
 8000668:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 7000; i ++){}
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	e002      	b.n	8000676 <vOrangeLedControllerTask+0x1e>
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	3301      	adds	r3, #1
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f641 3257 	movw	r2, #6999	; 0x1b57
 800067c:	4293      	cmp	r3, r2
 800067e:	ddf7      	ble.n	8000670 <vOrangeLedControllerTask+0x18>
		osDelay(100);
 8000680:	2064      	movs	r0, #100	; 0x64
 8000682:	f002 fa13 	bl	8002aac <osDelay>
		Orange_TaskProfiler++;
 8000686:	e7eb      	b.n	8000660 <vOrangeLedControllerTask+0x8>
 8000688:	20000070 	.word	0x20000070

0800068c <vBlueLedControllerTask>:
	}
}

void vBlueLedControllerTask(void *pvParameters)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Blue_TaskProfiler++;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <vBlueLedControllerTask+0x30>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <vBlueLedControllerTask+0x30>)
 800069c:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 7000; i ++){}
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	e002      	b.n	80006aa <vBlueLedControllerTask+0x1e>
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	3301      	adds	r3, #1
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f641 3257 	movw	r2, #6999	; 0x1b57
 80006b0:	4293      	cmp	r3, r2
 80006b2:	ddf7      	ble.n	80006a4 <vBlueLedControllerTask+0x18>
		osDelay(100);
 80006b4:	2064      	movs	r0, #100	; 0x64
 80006b6:	f002 f9f9 	bl	8002aac <osDelay>
		Blue_TaskProfiler++;
 80006ba:	e7eb      	b.n	8000694 <vBlueLedControllerTask+0x8>
 80006bc:	2000007c 	.word	0x2000007c

080006c0 <vRedLedControllerTask>:
	}
}

void vRedLedControllerTask(void *pvParameters)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Red_TaskProfiler++;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <vRedLedControllerTask+0x30>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <vRedLedControllerTask+0x30>)
 80006d0:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 7000; i ++){}
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	e002      	b.n	80006de <vRedLedControllerTask+0x1e>
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3301      	adds	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	f641 3257 	movw	r2, #6999	; 0x1b57
 80006e4:	4293      	cmp	r3, r2
 80006e6:	ddf7      	ble.n	80006d8 <vRedLedControllerTask+0x18>
		osDelay(100);
 80006e8:	2064      	movs	r0, #100	; 0x64
 80006ea:	f002 f9df 	bl	8002aac <osDelay>
		Red_TaskProfiler++;
 80006ee:	e7eb      	b.n	80006c8 <vRedLedControllerTask+0x8>
 80006f0:	20000074 	.word	0x20000074

080006f4 <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2234      	movs	r2, #52	; 0x34
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f004 fe7c 	bl	8005400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <SystemClock_Config+0xd4>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a29      	ldr	r2, [pc, #164]	; (80007c8 <SystemClock_Config+0xd4>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <SystemClock_Config+0xd4>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000734:	2300      	movs	r3, #0
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	4b24      	ldr	r3, [pc, #144]	; (80007cc <SystemClock_Config+0xd8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000740:	4a22      	ldr	r2, [pc, #136]	; (80007cc <SystemClock_Config+0xd8>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b20      	ldr	r3, [pc, #128]	; (80007cc <SystemClock_Config+0xd8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075c:	2310      	movs	r3, #16
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000764:	2300      	movs	r3, #0
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000768:	2310      	movs	r3, #16
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800076c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000770:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000772:	2304      	movs	r3, #4
 8000774:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4618      	mov	r0, r3
 8000784:	f001 f864 	bl	8001850 <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800078e:	f000 f8c9 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	230f      	movs	r3, #15
 8000794:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2302      	movs	r3, #2
 8000798:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	2102      	movs	r1, #2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fcd2 	bl	8001158 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007ba:	f000 f8b3 	bl	8000924 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	; 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_USART2_UART_Init+0x50>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x4c>)
 8000808:	f001 fd6e 	bl	80022e8 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000812:	f000 f887 	bl	8000924 <Error_Handler>
  }

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000002c 	.word	0x2000002c
 8000820:	40004400 	.word	0x40004400

08000824 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a2c      	ldr	r2, [pc, #176]	; (80008f4 <MX_GPIO_Init+0xd0>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <MX_GPIO_Init+0xd0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <MX_GPIO_Init+0xd0>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <MX_GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <MX_GPIO_Init+0xd0>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_GPIO_Init+0xd0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_GPIO_Init+0xd0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <MX_GPIO_Init+0xd0>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_GPIO_Init+0xd0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2120      	movs	r1, #32
 80008ae:	4812      	ldr	r0, [pc, #72]	; (80008f8 <MX_GPIO_Init+0xd4>)
 80008b0:	f000 fc38 	bl	8001124 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = B1_Pin;
 80008b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	480c      	ldr	r0, [pc, #48]	; (80008fc <MX_GPIO_Init+0xd8>)
 80008cc:	f000 fa96 	bl	8000dfc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD2_Pin;
 80008d0:	2320      	movs	r3, #32
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_GPIO_Init+0xd4>)
 80008e8:	f000 fa88 	bl	8000dfc <HAL_GPIO_Init>

}
 80008ec:	bf00      	nop
 80008ee:	3728      	adds	r7, #40	; 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000
 80008fc:	40020800 	.word	0x40020800

08000900 <HAL_TIM_PeriodElapsedCallback>:
	USART2_write(ch);
	return ch;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d101      	bne.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000912:	f000 f971 	bl	8000bf8 <HAL_IncTick>
  }

}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40010000 	.word	0x40010000

08000924 <Error_Handler>:

void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_MspInit+0x54>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a11      	ldr	r2, [pc, #68]	; (8000984 <HAL_MspInit+0x54>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x54>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_MspInit+0x54>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_MspInit+0x54>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_MspInit+0x54>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	210f      	movs	r1, #15
 8000972:	f06f 0001 	mvn.w	r0, #1
 8000976:	f000 fa17 	bl	8000da8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <HAL_UART_MspInit+0x84>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d12b      	bne.n	8000a02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009e2:	230c      	movs	r3, #12
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f2:	2307      	movs	r3, #7
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <HAL_UART_MspInit+0x8c>)
 80009fe:	f000 f9fd 	bl	8000dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	; 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40004400 	.word	0x40004400
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000

08000a18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <HAL_InitTick+0xd0>)
 8000a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a30:	4a2d      	ldr	r2, [pc, #180]	; (8000ae8 <HAL_InitTick+0xd0>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6453      	str	r3, [r2, #68]	; 0x44
 8000a38:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <HAL_InitTick+0xd0>)
 8000a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a44:	f107 020c 	add.w	r2, r7, #12
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fc9c 	bl	800138c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a54:	f000 fc86 	bl	8001364 <HAL_RCC_GetPCLK2Freq>
 8000a58:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5c:	4a23      	ldr	r2, [pc, #140]	; (8000aec <HAL_InitTick+0xd4>)
 8000a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a62:	0c9b      	lsrs	r3, r3, #18
 8000a64:	3b01      	subs	r3, #1
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a68:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <HAL_InitTick+0xd8>)
 8000a6a:	4a22      	ldr	r2, [pc, #136]	; (8000af4 <HAL_InitTick+0xdc>)
 8000a6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a6e:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <HAL_InitTick+0xd8>)
 8000a70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a74:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a76:	4a1e      	ldr	r2, [pc, #120]	; (8000af0 <HAL_InitTick+0xd8>)
 8000a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <HAL_InitTick+0xd8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <HAL_InitTick+0xd8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <HAL_InitTick+0xd8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a8e:	4818      	ldr	r0, [pc, #96]	; (8000af0 <HAL_InitTick+0xd8>)
 8000a90:	f001 f97c 	bl	8001d8c <HAL_TIM_Base_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d11b      	bne.n	8000ada <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000aa2:	4813      	ldr	r0, [pc, #76]	; (8000af0 <HAL_InitTick+0xd8>)
 8000aa4:	f001 f9cc 	bl	8001e40 <HAL_TIM_Base_Start_IT>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000aae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d111      	bne.n	8000ada <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ab6:	2019      	movs	r0, #25
 8000ab8:	f000 f992 	bl	8000de0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b0f      	cmp	r3, #15
 8000ac0:	d808      	bhi.n	8000ad4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	6879      	ldr	r1, [r7, #4]
 8000ac6:	2019      	movs	r0, #25
 8000ac8:	f000 f96e 	bl	8000da8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000acc:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_InitTick+0xe0>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6013      	str	r3, [r2, #0]
 8000ad2:	e002      	b.n	8000ada <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3730      	adds	r7, #48	; 0x30
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	431bde83 	.word	0x431bde83
 8000af0:	20000090 	.word	0x20000090
 8000af4:	40010000 	.word	0x40010000
 8000af8:	20000004 	.word	0x20000004

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b2e:	f001 f9f7 	bl	8001f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000090 	.word	0x20000090

08000b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b66:	490e      	ldr	r1, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b7c:	4c0b      	ldr	r4, [pc, #44]	; (8000bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b8a:	f7ff ffd7 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f004 fc05 	bl	800539c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fcbf 	bl	8000514 <main>
  bx  lr    
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ba4:	08005498 	.word	0x08005498
  ldr r2, =_sbss
 8000ba8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bac:	20004a2c 	.word	0x20004a2c

08000bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <HAL_Init+0x40>)
 8000bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_Init+0x40>)
 8000bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_Init+0x40>)
 8000bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f8d8 	bl	8000d92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	200f      	movs	r0, #15
 8000be4:	f7ff ff18 	bl	8000a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff fea2 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023c00 	.word	0x40023c00

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	200000d8 	.word	0x200000d8

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	200000d8 	.word	0x200000d8

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db0b      	blt.n	8000cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 021f 	and.w	r2, r3, #31
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <__NVIC_EnableIRQ+0x38>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ff4c 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dba:	f7ff ff61 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000dbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	68b9      	ldr	r1, [r7, #8]
 8000dc4:	6978      	ldr	r0, [r7, #20]
 8000dc6:	f7ff ffb1 	bl	8000d2c <NVIC_EncodePriority>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff80 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff54 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	e165      	b.n	80010e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f040 8154 	bne.w	80010de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d005      	beq.n	8000e4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d130      	bne.n	8000eb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	091b      	lsrs	r3, r3, #4
 8000e9a:	f003 0201 	and.w	r2, r3, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d017      	beq.n	8000eec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d123      	bne.n	8000f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	220f      	movs	r2, #15
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	08da      	lsrs	r2, r3, #3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3208      	adds	r2, #8
 8000f3a:	69b9      	ldr	r1, [r7, #24]
 8000f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0203 	and.w	r2, r3, #3
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80ae 	beq.w	80010de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b5d      	ldr	r3, [pc, #372]	; (80010fc <HAL_GPIO_Init+0x300>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a5c      	ldr	r2, [pc, #368]	; (80010fc <HAL_GPIO_Init+0x300>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b5a      	ldr	r3, [pc, #360]	; (80010fc <HAL_GPIO_Init+0x300>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f9e:	4a58      	ldr	r2, [pc, #352]	; (8001100 <HAL_GPIO_Init+0x304>)
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4f      	ldr	r2, [pc, #316]	; (8001104 <HAL_GPIO_Init+0x308>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d025      	beq.n	8001016 <HAL_GPIO_Init+0x21a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4e      	ldr	r2, [pc, #312]	; (8001108 <HAL_GPIO_Init+0x30c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d01f      	beq.n	8001012 <HAL_GPIO_Init+0x216>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4d      	ldr	r2, [pc, #308]	; (800110c <HAL_GPIO_Init+0x310>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d019      	beq.n	800100e <HAL_GPIO_Init+0x212>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4c      	ldr	r2, [pc, #304]	; (8001110 <HAL_GPIO_Init+0x314>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d013      	beq.n	800100a <HAL_GPIO_Init+0x20e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4b      	ldr	r2, [pc, #300]	; (8001114 <HAL_GPIO_Init+0x318>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d00d      	beq.n	8001006 <HAL_GPIO_Init+0x20a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4a      	ldr	r2, [pc, #296]	; (8001118 <HAL_GPIO_Init+0x31c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d007      	beq.n	8001002 <HAL_GPIO_Init+0x206>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a49      	ldr	r2, [pc, #292]	; (800111c <HAL_GPIO_Init+0x320>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d101      	bne.n	8000ffe <HAL_GPIO_Init+0x202>
 8000ffa:	2306      	movs	r3, #6
 8000ffc:	e00c      	b.n	8001018 <HAL_GPIO_Init+0x21c>
 8000ffe:	2307      	movs	r3, #7
 8001000:	e00a      	b.n	8001018 <HAL_GPIO_Init+0x21c>
 8001002:	2305      	movs	r3, #5
 8001004:	e008      	b.n	8001018 <HAL_GPIO_Init+0x21c>
 8001006:	2304      	movs	r3, #4
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x21c>
 800100a:	2303      	movs	r3, #3
 800100c:	e004      	b.n	8001018 <HAL_GPIO_Init+0x21c>
 800100e:	2302      	movs	r3, #2
 8001010:	e002      	b.n	8001018 <HAL_GPIO_Init+0x21c>
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <HAL_GPIO_Init+0x21c>
 8001016:	2300      	movs	r3, #0
 8001018:	69fa      	ldr	r2, [r7, #28]
 800101a:	f002 0203 	and.w	r2, r2, #3
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	4093      	lsls	r3, r2
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001028:	4935      	ldr	r1, [pc, #212]	; (8001100 <HAL_GPIO_Init+0x304>)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001036:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <HAL_GPIO_Init+0x324>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800105a:	4a31      	ldr	r2, [pc, #196]	; (8001120 <HAL_GPIO_Init+0x324>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001060:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <HAL_GPIO_Init+0x324>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001084:	4a26      	ldr	r2, [pc, #152]	; (8001120 <HAL_GPIO_Init+0x324>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <HAL_GPIO_Init+0x324>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ae:	4a1c      	ldr	r2, [pc, #112]	; (8001120 <HAL_GPIO_Init+0x324>)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <HAL_GPIO_Init+0x324>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d8:	4a11      	ldr	r2, [pc, #68]	; (8001120 <HAL_GPIO_Init+0x324>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3301      	adds	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	2b0f      	cmp	r3, #15
 80010e8:	f67f ae96 	bls.w	8000e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40013800 	.word	0x40013800
 8001104:	40020000 	.word	0x40020000
 8001108:	40020400 	.word	0x40020400
 800110c:	40020800 	.word	0x40020800
 8001110:	40020c00 	.word	0x40020c00
 8001114:	40021000 	.word	0x40021000
 8001118:	40021400 	.word	0x40021400
 800111c:	40021800 	.word	0x40021800
 8001120:	40013c00 	.word	0x40013c00

08001124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	807b      	strh	r3, [r7, #2]
 8001130:	4613      	mov	r3, r2
 8001132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001134:	787b      	ldrb	r3, [r7, #1]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001140:	e003      	b.n	800114a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	041a      	lsls	r2, r3, #16
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	619a      	str	r2, [r3, #24]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0cc      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800116c:	4b68      	ldr	r3, [pc, #416]	; (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 030f 	and.w	r3, r3, #15
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d90c      	bls.n	8001194 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117a:	4b65      	ldr	r3, [pc, #404]	; (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001182:	4b63      	ldr	r3, [pc, #396]	; (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d001      	beq.n	8001194 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e0b8      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d020      	beq.n	80011e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4a58      	ldr	r2, [pc, #352]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c4:	4b53      	ldr	r3, [pc, #332]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	4a52      	ldr	r2, [pc, #328]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d0:	4b50      	ldr	r3, [pc, #320]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	494d      	ldr	r1, [pc, #308]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d044      	beq.n	8001278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	4b47      	ldr	r3, [pc, #284]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d119      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e07f      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d003      	beq.n	8001216 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001212:	2b03      	cmp	r3, #3
 8001214:	d107      	bne.n	8001226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d109      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e06f      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001226:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e067      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001236:	4b37      	ldr	r3, [pc, #220]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f023 0203 	bic.w	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4934      	ldr	r1, [pc, #208]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	4313      	orrs	r3, r2
 8001246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001248:	f7ff fcea 	bl	8000c20 <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124e:	e00a      	b.n	8001266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001250:	f7ff fce6 	bl	8000c20 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	f241 3288 	movw	r2, #5000	; 0x1388
 800125e:	4293      	cmp	r3, r2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e04f      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001266:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 020c 	and.w	r2, r3, #12
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	429a      	cmp	r2, r3
 8001276:	d1eb      	bne.n	8001250 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001278:	4b25      	ldr	r3, [pc, #148]	; (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d20c      	bcs.n	80012a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001286:	4b22      	ldr	r3, [pc, #136]	; (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e032      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d008      	beq.n	80012be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	4916      	ldr	r1, [pc, #88]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d009      	beq.n	80012de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	490e      	ldr	r1, [pc, #56]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012de:	f000 f887 	bl	80013f0 <HAL_RCC_GetSysClockFreq>
 80012e2:	4602      	mov	r2, r0
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	490a      	ldr	r1, [pc, #40]	; (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	5ccb      	ldrb	r3, [r1, r3]
 80012f2:	fa22 f303 	lsr.w	r3, r2, r3
 80012f6:	4a09      	ldr	r2, [pc, #36]	; (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_RCC_ClockConfig+0x1c8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fb8a 	bl	8000a18 <HAL_InitTick>

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023c00 	.word	0x40023c00
 8001314:	40023800 	.word	0x40023800
 8001318:	08005470 	.word	0x08005470
 800131c:	20000000 	.word	0x20000000
 8001320:	20000004 	.word	0x20000004

08001324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_RCC_GetHCLKFreq+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000000 	.word	0x20000000

0800133c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001340:	f7ff fff0 	bl	8001324 <HAL_RCC_GetHCLKFreq>
 8001344:	4602      	mov	r2, r0
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	0a9b      	lsrs	r3, r3, #10
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	4903      	ldr	r1, [pc, #12]	; (8001360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001352:	5ccb      	ldrb	r3, [r1, r3]
 8001354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001358:	4618      	mov	r0, r3
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	08005480 	.word	0x08005480

08001364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001368:	f7ff ffdc 	bl	8001324 <HAL_RCC_GetHCLKFreq>
 800136c:	4602      	mov	r2, r0
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	0b5b      	lsrs	r3, r3, #13
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	4903      	ldr	r1, [pc, #12]	; (8001388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800137a:	5ccb      	ldrb	r3, [r1, r3]
 800137c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	08005480 	.word	0x08005480

0800138c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	220f      	movs	r2, #15
 800139a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_RCC_GetClockConfig+0x5c>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 0203 	and.w	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_RCC_GetClockConfig+0x5c>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_RCC_GetClockConfig+0x5c>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_RCC_GetClockConfig+0x5c>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	08db      	lsrs	r3, r3, #3
 80013c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <HAL_RCC_GetClockConfig+0x60>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 020f 	and.w	r2, r3, #15
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	601a      	str	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40023c00 	.word	0x40023c00

080013f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013f4:	b0ae      	sub	sp, #184	; 0xb8
 80013f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001416:	4bcb      	ldr	r3, [pc, #812]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b0c      	cmp	r3, #12
 8001420:	f200 8206 	bhi.w	8001830 <HAL_RCC_GetSysClockFreq+0x440>
 8001424:	a201      	add	r2, pc, #4	; (adr r2, 800142c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	08001461 	.word	0x08001461
 8001430:	08001831 	.word	0x08001831
 8001434:	08001831 	.word	0x08001831
 8001438:	08001831 	.word	0x08001831
 800143c:	08001469 	.word	0x08001469
 8001440:	08001831 	.word	0x08001831
 8001444:	08001831 	.word	0x08001831
 8001448:	08001831 	.word	0x08001831
 800144c:	08001471 	.word	0x08001471
 8001450:	08001831 	.word	0x08001831
 8001454:	08001831 	.word	0x08001831
 8001458:	08001831 	.word	0x08001831
 800145c:	08001661 	.word	0x08001661
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001460:	4bb9      	ldr	r3, [pc, #740]	; (8001748 <HAL_RCC_GetSysClockFreq+0x358>)
 8001462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001466:	e1e7      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001468:	4bb8      	ldr	r3, [pc, #736]	; (800174c <HAL_RCC_GetSysClockFreq+0x35c>)
 800146a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800146e:	e1e3      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001470:	4bb4      	ldr	r3, [pc, #720]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800147c:	4bb1      	ldr	r3, [pc, #708]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d071      	beq.n	800156c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001488:	4bae      	ldr	r3, [pc, #696]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	099b      	lsrs	r3, r3, #6
 800148e:	2200      	movs	r2, #0
 8001490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001494:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800149c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014ae:	4622      	mov	r2, r4
 80014b0:	462b      	mov	r3, r5
 80014b2:	f04f 0000 	mov.w	r0, #0
 80014b6:	f04f 0100 	mov.w	r1, #0
 80014ba:	0159      	lsls	r1, r3, #5
 80014bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014c0:	0150      	lsls	r0, r2, #5
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4621      	mov	r1, r4
 80014c8:	1a51      	subs	r1, r2, r1
 80014ca:	6439      	str	r1, [r7, #64]	; 0x40
 80014cc:	4629      	mov	r1, r5
 80014ce:	eb63 0301 	sbc.w	r3, r3, r1
 80014d2:	647b      	str	r3, [r7, #68]	; 0x44
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80014e0:	4649      	mov	r1, r9
 80014e2:	018b      	lsls	r3, r1, #6
 80014e4:	4641      	mov	r1, r8
 80014e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014ea:	4641      	mov	r1, r8
 80014ec:	018a      	lsls	r2, r1, #6
 80014ee:	4641      	mov	r1, r8
 80014f0:	1a51      	subs	r1, r2, r1
 80014f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80014f4:	4649      	mov	r1, r9
 80014f6:	eb63 0301 	sbc.w	r3, r3, r1
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001508:	4649      	mov	r1, r9
 800150a:	00cb      	lsls	r3, r1, #3
 800150c:	4641      	mov	r1, r8
 800150e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001512:	4641      	mov	r1, r8
 8001514:	00ca      	lsls	r2, r1, #3
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	4603      	mov	r3, r0
 800151c:	4622      	mov	r2, r4
 800151e:	189b      	adds	r3, r3, r2
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
 8001522:	462b      	mov	r3, r5
 8001524:	460a      	mov	r2, r1
 8001526:	eb42 0303 	adc.w	r3, r2, r3
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001538:	4629      	mov	r1, r5
 800153a:	024b      	lsls	r3, r1, #9
 800153c:	4621      	mov	r1, r4
 800153e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001542:	4621      	mov	r1, r4
 8001544:	024a      	lsls	r2, r1, #9
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800154e:	2200      	movs	r2, #0
 8001550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001554:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001558:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800155c:	f7fe fe58 	bl	8000210 <__aeabi_uldivmod>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4613      	mov	r3, r2
 8001566:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800156a:	e067      	b.n	800163c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800156c:	4b75      	ldr	r3, [pc, #468]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	099b      	lsrs	r3, r3, #6
 8001572:	2200      	movs	r2, #0
 8001574:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001578:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800157c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001584:	67bb      	str	r3, [r7, #120]	; 0x78
 8001586:	2300      	movs	r3, #0
 8001588:	67fb      	str	r3, [r7, #124]	; 0x7c
 800158a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800158e:	4622      	mov	r2, r4
 8001590:	462b      	mov	r3, r5
 8001592:	f04f 0000 	mov.w	r0, #0
 8001596:	f04f 0100 	mov.w	r1, #0
 800159a:	0159      	lsls	r1, r3, #5
 800159c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015a0:	0150      	lsls	r0, r2, #5
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4621      	mov	r1, r4
 80015a8:	1a51      	subs	r1, r2, r1
 80015aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80015ac:	4629      	mov	r1, r5
 80015ae:	eb63 0301 	sbc.w	r3, r3, r1
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80015c0:	4649      	mov	r1, r9
 80015c2:	018b      	lsls	r3, r1, #6
 80015c4:	4641      	mov	r1, r8
 80015c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ca:	4641      	mov	r1, r8
 80015cc:	018a      	lsls	r2, r1, #6
 80015ce:	4641      	mov	r1, r8
 80015d0:	ebb2 0a01 	subs.w	sl, r2, r1
 80015d4:	4649      	mov	r1, r9
 80015d6:	eb63 0b01 	sbc.w	fp, r3, r1
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015ee:	4692      	mov	sl, r2
 80015f0:	469b      	mov	fp, r3
 80015f2:	4623      	mov	r3, r4
 80015f4:	eb1a 0303 	adds.w	r3, sl, r3
 80015f8:	623b      	str	r3, [r7, #32]
 80015fa:	462b      	mov	r3, r5
 80015fc:	eb4b 0303 	adc.w	r3, fp, r3
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800160e:	4629      	mov	r1, r5
 8001610:	028b      	lsls	r3, r1, #10
 8001612:	4621      	mov	r1, r4
 8001614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001618:	4621      	mov	r1, r4
 800161a:	028a      	lsls	r2, r1, #10
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001624:	2200      	movs	r2, #0
 8001626:	673b      	str	r3, [r7, #112]	; 0x70
 8001628:	677a      	str	r2, [r7, #116]	; 0x74
 800162a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800162e:	f7fe fdef 	bl	8000210 <__aeabi_uldivmod>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4613      	mov	r3, r2
 8001638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800163c:	4b41      	ldr	r3, [pc, #260]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	0c1b      	lsrs	r3, r3, #16
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	3301      	adds	r3, #1
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800164e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001652:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800165e:	e0eb      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001660:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800166c:	4b35      	ldr	r3, [pc, #212]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d06b      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001678:	4b32      	ldr	r3, [pc, #200]	; (8001744 <HAL_RCC_GetSysClockFreq+0x354>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	099b      	lsrs	r3, r3, #6
 800167e:	2200      	movs	r2, #0
 8001680:	66bb      	str	r3, [r7, #104]	; 0x68
 8001682:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800168a:	663b      	str	r3, [r7, #96]	; 0x60
 800168c:	2300      	movs	r3, #0
 800168e:	667b      	str	r3, [r7, #100]	; 0x64
 8001690:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001694:	4622      	mov	r2, r4
 8001696:	462b      	mov	r3, r5
 8001698:	f04f 0000 	mov.w	r0, #0
 800169c:	f04f 0100 	mov.w	r1, #0
 80016a0:	0159      	lsls	r1, r3, #5
 80016a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a6:	0150      	lsls	r0, r2, #5
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4621      	mov	r1, r4
 80016ae:	1a51      	subs	r1, r2, r1
 80016b0:	61b9      	str	r1, [r7, #24]
 80016b2:	4629      	mov	r1, r5
 80016b4:	eb63 0301 	sbc.w	r3, r3, r1
 80016b8:	61fb      	str	r3, [r7, #28]
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016c6:	4659      	mov	r1, fp
 80016c8:	018b      	lsls	r3, r1, #6
 80016ca:	4651      	mov	r1, sl
 80016cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016d0:	4651      	mov	r1, sl
 80016d2:	018a      	lsls	r2, r1, #6
 80016d4:	4651      	mov	r1, sl
 80016d6:	ebb2 0801 	subs.w	r8, r2, r1
 80016da:	4659      	mov	r1, fp
 80016dc:	eb63 0901 	sbc.w	r9, r3, r1
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016f4:	4690      	mov	r8, r2
 80016f6:	4699      	mov	r9, r3
 80016f8:	4623      	mov	r3, r4
 80016fa:	eb18 0303 	adds.w	r3, r8, r3
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	462b      	mov	r3, r5
 8001702:	eb49 0303 	adc.w	r3, r9, r3
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001714:	4629      	mov	r1, r5
 8001716:	024b      	lsls	r3, r1, #9
 8001718:	4621      	mov	r1, r4
 800171a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800171e:	4621      	mov	r1, r4
 8001720:	024a      	lsls	r2, r1, #9
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800172a:	2200      	movs	r2, #0
 800172c:	65bb      	str	r3, [r7, #88]	; 0x58
 800172e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001730:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001734:	f7fe fd6c 	bl	8000210 <__aeabi_uldivmod>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4613      	mov	r3, r2
 800173e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001742:	e065      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x420>
 8001744:	40023800 	.word	0x40023800
 8001748:	00f42400 	.word	0x00f42400
 800174c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001750:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_RCC_GetSysClockFreq+0x458>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	099b      	lsrs	r3, r3, #6
 8001756:	2200      	movs	r2, #0
 8001758:	4618      	mov	r0, r3
 800175a:	4611      	mov	r1, r2
 800175c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001760:	653b      	str	r3, [r7, #80]	; 0x50
 8001762:	2300      	movs	r3, #0
 8001764:	657b      	str	r3, [r7, #84]	; 0x54
 8001766:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800176a:	4642      	mov	r2, r8
 800176c:	464b      	mov	r3, r9
 800176e:	f04f 0000 	mov.w	r0, #0
 8001772:	f04f 0100 	mov.w	r1, #0
 8001776:	0159      	lsls	r1, r3, #5
 8001778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800177c:	0150      	lsls	r0, r2, #5
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4641      	mov	r1, r8
 8001784:	1a51      	subs	r1, r2, r1
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	4649      	mov	r1, r9
 800178a:	eb63 0301 	sbc.w	r3, r3, r1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800179c:	4659      	mov	r1, fp
 800179e:	018b      	lsls	r3, r1, #6
 80017a0:	4651      	mov	r1, sl
 80017a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017a6:	4651      	mov	r1, sl
 80017a8:	018a      	lsls	r2, r1, #6
 80017aa:	4651      	mov	r1, sl
 80017ac:	1a54      	subs	r4, r2, r1
 80017ae:	4659      	mov	r1, fp
 80017b0:	eb63 0501 	sbc.w	r5, r3, r1
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	00eb      	lsls	r3, r5, #3
 80017be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017c2:	00e2      	lsls	r2, r4, #3
 80017c4:	4614      	mov	r4, r2
 80017c6:	461d      	mov	r5, r3
 80017c8:	4643      	mov	r3, r8
 80017ca:	18e3      	adds	r3, r4, r3
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	464b      	mov	r3, r9
 80017d0:	eb45 0303 	adc.w	r3, r5, r3
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017e2:	4629      	mov	r1, r5
 80017e4:	028b      	lsls	r3, r1, #10
 80017e6:	4621      	mov	r1, r4
 80017e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017ec:	4621      	mov	r1, r4
 80017ee:	028a      	lsls	r2, r1, #10
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017f8:	2200      	movs	r2, #0
 80017fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80017fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001802:	f7fe fd05 	bl	8000210 <__aeabi_uldivmod>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4613      	mov	r3, r2
 800180c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <HAL_RCC_GetSysClockFreq+0x458>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	0f1b      	lsrs	r3, r3, #28
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800181e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001822:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800182e:	e003      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001832:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001836:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001838:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800183c:	4618      	mov	r0, r3
 800183e:	37b8      	adds	r7, #184	; 0xb8
 8001840:	46bd      	mov	sp, r7
 8001842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	00f42400 	.word	0x00f42400

08001850 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e28d      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8083 	beq.w	8001976 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001870:	4b94      	ldr	r3, [pc, #592]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b04      	cmp	r3, #4
 800187a:	d019      	beq.n	80018b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800187c:	4b91      	ldr	r3, [pc, #580]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001884:	2b08      	cmp	r3, #8
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001888:	4b8e      	ldr	r3, [pc, #568]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001894:	d00c      	beq.n	80018b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001896:	4b8b      	ldr	r3, [pc, #556]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d112      	bne.n	80018c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018a2:	4b88      	ldr	r3, [pc, #544]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ae:	d10b      	bne.n	80018c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b0:	4b84      	ldr	r3, [pc, #528]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d05b      	beq.n	8001974 <HAL_RCC_OscConfig+0x124>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d157      	bne.n	8001974 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e25a      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d0:	d106      	bne.n	80018e0 <HAL_RCC_OscConfig+0x90>
 80018d2:	4b7c      	ldr	r3, [pc, #496]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a7b      	ldr	r2, [pc, #492]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e01d      	b.n	800191c <HAL_RCC_OscConfig+0xcc>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0xb4>
 80018ea:	4b76      	ldr	r3, [pc, #472]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a75      	ldr	r2, [pc, #468]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80018f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b73      	ldr	r3, [pc, #460]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a72      	ldr	r2, [pc, #456]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e00b      	b.n	800191c <HAL_RCC_OscConfig+0xcc>
 8001904:	4b6f      	ldr	r3, [pc, #444]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a6e      	ldr	r2, [pc, #440]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 800190a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b6c      	ldr	r3, [pc, #432]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a6b      	ldr	r2, [pc, #428]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d013      	beq.n	800194c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff f97c 	bl	8000c20 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff f978 	bl	8000c20 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e21f      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	4b61      	ldr	r3, [pc, #388]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0xdc>
 800194a:	e014      	b.n	8001976 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff f968 	bl	8000c20 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff f964 	bl	8000c20 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e20b      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001966:	4b57      	ldr	r3, [pc, #348]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x104>
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d06f      	beq.n	8001a62 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001982:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b00      	cmp	r3, #0
 800198c:	d017      	beq.n	80019be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800198e:	4b4d      	ldr	r3, [pc, #308]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001996:	2b08      	cmp	r3, #8
 8001998:	d105      	bne.n	80019a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800199a:	4b4a      	ldr	r3, [pc, #296]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a6:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	d11c      	bne.n	80019ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b2:	4b44      	ldr	r3, [pc, #272]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d116      	bne.n	80019ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d005      	beq.n	80019d6 <HAL_RCC_OscConfig+0x186>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d001      	beq.n	80019d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e1d3      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d6:	4b3b      	ldr	r3, [pc, #236]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4937      	ldr	r1, [pc, #220]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ea:	e03a      	b.n	8001a62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d020      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f4:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <HAL_RCC_OscConfig+0x278>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff f911 	bl	8000c20 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a02:	f7ff f90d 	bl	8000c20 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1b4      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a20:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4925      	ldr	r1, [pc, #148]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
 8001a34:	e015      	b.n	8001a62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a36:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_RCC_OscConfig+0x278>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f8f0 	bl	8000c20 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a44:	f7ff f8ec 	bl	8000c20 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e193      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d036      	beq.n	8001adc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d016      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_RCC_OscConfig+0x27c>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7c:	f7ff f8d0 	bl	8000c20 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a84:	f7ff f8cc 	bl	8000c20 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e173      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_OscConfig+0x274>)
 8001a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x234>
 8001aa2:	e01b      	b.n	8001adc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_RCC_OscConfig+0x27c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aaa:	f7ff f8b9 	bl	8000c20 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab0:	e00e      	b.n	8001ad0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab2:	f7ff f8b5 	bl	8000c20 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d907      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e15c      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	42470000 	.word	0x42470000
 8001acc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	4b8a      	ldr	r3, [pc, #552]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1ea      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 8097 	beq.w	8001c18 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b83      	ldr	r3, [pc, #524]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10f      	bne.n	8001b1a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	4b7f      	ldr	r3, [pc, #508]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a7e      	ldr	r2, [pc, #504]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b7c      	ldr	r3, [pc, #496]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b16:	2301      	movs	r3, #1
 8001b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1a:	4b79      	ldr	r3, [pc, #484]	; (8001d00 <HAL_RCC_OscConfig+0x4b0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d118      	bne.n	8001b58 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b26:	4b76      	ldr	r3, [pc, #472]	; (8001d00 <HAL_RCC_OscConfig+0x4b0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a75      	ldr	r2, [pc, #468]	; (8001d00 <HAL_RCC_OscConfig+0x4b0>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b32:	f7ff f875 	bl	8000c20 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3a:	f7ff f871 	bl	8000c20 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e118      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	4b6c      	ldr	r3, [pc, #432]	; (8001d00 <HAL_RCC_OscConfig+0x4b0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d106      	bne.n	8001b6e <HAL_RCC_OscConfig+0x31e>
 8001b60:	4b66      	ldr	r3, [pc, #408]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b64:	4a65      	ldr	r2, [pc, #404]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6c:	e01c      	b.n	8001ba8 <HAL_RCC_OscConfig+0x358>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b05      	cmp	r3, #5
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x340>
 8001b76:	4b61      	ldr	r3, [pc, #388]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7a:	4a60      	ldr	r2, [pc, #384]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	6713      	str	r3, [r2, #112]	; 0x70
 8001b82:	4b5e      	ldr	r3, [pc, #376]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b86:	4a5d      	ldr	r2, [pc, #372]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8e:	e00b      	b.n	8001ba8 <HAL_RCC_OscConfig+0x358>
 8001b90:	4b5a      	ldr	r3, [pc, #360]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b94:	4a59      	ldr	r2, [pc, #356]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b96:	f023 0301 	bic.w	r3, r3, #1
 8001b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9c:	4b57      	ldr	r3, [pc, #348]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba0:	4a56      	ldr	r2, [pc, #344]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001ba2:	f023 0304 	bic.w	r3, r3, #4
 8001ba6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d015      	beq.n	8001bdc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb0:	f7ff f836 	bl	8000c20 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb8:	f7ff f832 	bl	8000c20 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e0d7      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bce:	4b4b      	ldr	r3, [pc, #300]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0ee      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x368>
 8001bda:	e014      	b.n	8001c06 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7ff f820 	bl	8000c20 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f7ff f81c 	bl	8000c20 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e0c1      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfa:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1ee      	bne.n	8001be4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	4a3a      	ldr	r2, [pc, #232]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80ad 	beq.w	8001d7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c22:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d060      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d145      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c36:	4b33      	ldr	r3, [pc, #204]	; (8001d04 <HAL_RCC_OscConfig+0x4b4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7fe fff0 	bl	8000c20 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c44:	f7fe ffec 	bl	8000c20 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e093      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c56:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69da      	ldr	r2, [r3, #28]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	019b      	lsls	r3, r3, #6
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c78:	085b      	lsrs	r3, r3, #1
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	041b      	lsls	r3, r3, #16
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	061b      	lsls	r3, r3, #24
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	071b      	lsls	r3, r3, #28
 8001c8e:	491b      	ldr	r1, [pc, #108]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_RCC_OscConfig+0x4b4>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7fe ffc1 	bl	8000c20 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca2:	f7fe ffbd 	bl	8000c20 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e064      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x452>
 8001cc0:	e05c      	b.n	8001d7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_RCC_OscConfig+0x4b4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7fe ffaa 	bl	8000c20 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd0:	f7fe ffa6 	bl	8000c20 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e04d      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x480>
 8001cee:	e045      	b.n	8001d7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e040      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40007000 	.word	0x40007000
 8001d04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d08:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <HAL_RCC_OscConfig+0x538>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d030      	beq.n	8001d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d129      	bne.n	8001d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d122      	bne.n	8001d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d38:	4013      	ands	r3, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d119      	bne.n	8001d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	085b      	lsrs	r3, r3, #1
 8001d50:	3b01      	subs	r3, #1
 8001d52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d10f      	bne.n	8001d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800

08001d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e041      	b.n	8001e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f839 	bl	8001e2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f000 f9d8 	bl	8002180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d001      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e04e      	b.n	8001ef6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a23      	ldr	r2, [pc, #140]	; (8001f04 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d022      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e82:	d01d      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d018      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <HAL_TIM_Base_Start_IT+0xcc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d013      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1c      	ldr	r2, [pc, #112]	; (8001f10 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00e      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1b      	ldr	r2, [pc, #108]	; (8001f14 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d009      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a19      	ldr	r2, [pc, #100]	; (8001f18 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d004      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <HAL_TIM_Base_Start_IT+0xdc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d111      	bne.n	8001ee4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d010      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0201 	orr.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee2:	e007      	b.n	8001ef4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40000800 	.word	0x40000800
 8001f10:	40000c00 	.word	0x40000c00
 8001f14:	40010400 	.word	0x40010400
 8001f18:	40014000 	.word	0x40014000
 8001f1c:	40001800 	.word	0x40001800

08001f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d122      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d11b      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0202 	mvn.w	r2, #2
 8001f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8ee 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8e0 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f8f1 	bl	8002158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d122      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d11b      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0204 	mvn.w	r2, #4
 8001fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8c4 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8001fbc:	e005      	b.n	8001fca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8b6 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f8c7 	bl	8002158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d122      	bne.n	8002024 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d11b      	bne.n	8002024 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0208 	mvn.w	r2, #8
 8001ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f89a 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8002010:	e005      	b.n	800201e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f88c 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f89d 	bl	8002158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	2b10      	cmp	r3, #16
 8002030:	d122      	bne.n	8002078 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b10      	cmp	r3, #16
 800203e:	d11b      	bne.n	8002078 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0210 	mvn.w	r2, #16
 8002048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2208      	movs	r2, #8
 800204e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f870 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8002064:	e005      	b.n	8002072 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f862 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f873 	bl	8002158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b01      	cmp	r3, #1
 8002084:	d10e      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d107      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0201 	mvn.w	r2, #1
 800209c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7fe fc2e 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ae:	2b80      	cmp	r3, #128	; 0x80
 80020b0:	d10e      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020bc:	2b80      	cmp	r3, #128	; 0x80
 80020be:	d107      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f902 	bl	80022d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020da:	2b40      	cmp	r3, #64	; 0x40
 80020dc:	d10e      	bne.n	80020fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e8:	2b40      	cmp	r3, #64	; 0x40
 80020ea:	d107      	bne.n	80020fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f838 	bl	800216c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	2b20      	cmp	r3, #32
 8002108:	d10e      	bne.n	8002128 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b20      	cmp	r3, #32
 8002116:	d107      	bne.n	8002128 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0220 	mvn.w	r2, #32
 8002120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f8cc 	bl	80022c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a40      	ldr	r2, [pc, #256]	; (8002294 <TIM_Base_SetConfig+0x114>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d013      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219e:	d00f      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3d      	ldr	r2, [pc, #244]	; (8002298 <TIM_Base_SetConfig+0x118>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00b      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3c      	ldr	r2, [pc, #240]	; (800229c <TIM_Base_SetConfig+0x11c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d007      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3b      	ldr	r2, [pc, #236]	; (80022a0 <TIM_Base_SetConfig+0x120>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d003      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a3a      	ldr	r2, [pc, #232]	; (80022a4 <TIM_Base_SetConfig+0x124>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d108      	bne.n	80021d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2f      	ldr	r2, [pc, #188]	; (8002294 <TIM_Base_SetConfig+0x114>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d02b      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e0:	d027      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2c      	ldr	r2, [pc, #176]	; (8002298 <TIM_Base_SetConfig+0x118>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d023      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2b      	ldr	r2, [pc, #172]	; (800229c <TIM_Base_SetConfig+0x11c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01f      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a2a      	ldr	r2, [pc, #168]	; (80022a0 <TIM_Base_SetConfig+0x120>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01b      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a29      	ldr	r2, [pc, #164]	; (80022a4 <TIM_Base_SetConfig+0x124>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d017      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a28      	ldr	r2, [pc, #160]	; (80022a8 <TIM_Base_SetConfig+0x128>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a27      	ldr	r2, [pc, #156]	; (80022ac <TIM_Base_SetConfig+0x12c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00f      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a26      	ldr	r2, [pc, #152]	; (80022b0 <TIM_Base_SetConfig+0x130>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00b      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <TIM_Base_SetConfig+0x134>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <TIM_Base_SetConfig+0x138>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d003      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a23      	ldr	r2, [pc, #140]	; (80022bc <TIM_Base_SetConfig+0x13c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d108      	bne.n	8002244 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <TIM_Base_SetConfig+0x114>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d003      	beq.n	8002278 <TIM_Base_SetConfig+0xf8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <TIM_Base_SetConfig+0x124>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d103      	bne.n	8002280 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	615a      	str	r2, [r3, #20]
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40010000 	.word	0x40010000
 8002298:	40000400 	.word	0x40000400
 800229c:	40000800 	.word	0x40000800
 80022a0:	40000c00 	.word	0x40000c00
 80022a4:	40010400 	.word	0x40010400
 80022a8:	40014000 	.word	0x40014000
 80022ac:	40014400 	.word	0x40014400
 80022b0:	40014800 	.word	0x40014800
 80022b4:	40001800 	.word	0x40001800
 80022b8:	40001c00 	.word	0x40001c00
 80022bc:	40002000 	.word	0x40002000

080022c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e03f      	b.n	800237a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7fe fb3a 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2224      	movs	r2, #36	; 0x24
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800232a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f829 	bl	8002384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002388:	b0c0      	sub	sp, #256	; 0x100
 800238a:	af00      	add	r7, sp, #0
 800238c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a0:	68d9      	ldr	r1, [r3, #12]
 80023a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	ea40 0301 	orr.w	r3, r0, r1
 80023ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023dc:	f021 010c 	bic.w	r1, r1, #12
 80023e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023ea:	430b      	orrs	r3, r1
 80023ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023fe:	6999      	ldr	r1, [r3, #24]
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	ea40 0301 	orr.w	r3, r0, r1
 800240a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800240c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	4b8f      	ldr	r3, [pc, #572]	; (8002650 <UART_SetConfig+0x2cc>)
 8002414:	429a      	cmp	r2, r3
 8002416:	d005      	beq.n	8002424 <UART_SetConfig+0xa0>
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4b8d      	ldr	r3, [pc, #564]	; (8002654 <UART_SetConfig+0x2d0>)
 8002420:	429a      	cmp	r2, r3
 8002422:	d104      	bne.n	800242e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002424:	f7fe ff9e 	bl	8001364 <HAL_RCC_GetPCLK2Freq>
 8002428:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800242c:	e003      	b.n	8002436 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800242e:	f7fe ff85 	bl	800133c <HAL_RCC_GetPCLK1Freq>
 8002432:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002440:	f040 810c 	bne.w	800265c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002448:	2200      	movs	r2, #0
 800244a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800244e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002452:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002456:	4622      	mov	r2, r4
 8002458:	462b      	mov	r3, r5
 800245a:	1891      	adds	r1, r2, r2
 800245c:	65b9      	str	r1, [r7, #88]	; 0x58
 800245e:	415b      	adcs	r3, r3
 8002460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002462:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002466:	4621      	mov	r1, r4
 8002468:	eb12 0801 	adds.w	r8, r2, r1
 800246c:	4629      	mov	r1, r5
 800246e:	eb43 0901 	adc.w	r9, r3, r1
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800247e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002486:	4690      	mov	r8, r2
 8002488:	4699      	mov	r9, r3
 800248a:	4623      	mov	r3, r4
 800248c:	eb18 0303 	adds.w	r3, r8, r3
 8002490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002494:	462b      	mov	r3, r5
 8002496:	eb49 0303 	adc.w	r3, r9, r3
 800249a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800249e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80024ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80024b2:	460b      	mov	r3, r1
 80024b4:	18db      	adds	r3, r3, r3
 80024b6:	653b      	str	r3, [r7, #80]	; 0x50
 80024b8:	4613      	mov	r3, r2
 80024ba:	eb42 0303 	adc.w	r3, r2, r3
 80024be:	657b      	str	r3, [r7, #84]	; 0x54
 80024c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80024c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80024c8:	f7fd fea2 	bl	8000210 <__aeabi_uldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4b61      	ldr	r3, [pc, #388]	; (8002658 <UART_SetConfig+0x2d4>)
 80024d2:	fba3 2302 	umull	r2, r3, r3, r2
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	011c      	lsls	r4, r3, #4
 80024da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024de:	2200      	movs	r2, #0
 80024e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024ec:	4642      	mov	r2, r8
 80024ee:	464b      	mov	r3, r9
 80024f0:	1891      	adds	r1, r2, r2
 80024f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80024f4:	415b      	adcs	r3, r3
 80024f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024fc:	4641      	mov	r1, r8
 80024fe:	eb12 0a01 	adds.w	sl, r2, r1
 8002502:	4649      	mov	r1, r9
 8002504:	eb43 0b01 	adc.w	fp, r3, r1
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002514:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800251c:	4692      	mov	sl, r2
 800251e:	469b      	mov	fp, r3
 8002520:	4643      	mov	r3, r8
 8002522:	eb1a 0303 	adds.w	r3, sl, r3
 8002526:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800252a:	464b      	mov	r3, r9
 800252c:	eb4b 0303 	adc.w	r3, fp, r3
 8002530:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002540:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002544:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002548:	460b      	mov	r3, r1
 800254a:	18db      	adds	r3, r3, r3
 800254c:	643b      	str	r3, [r7, #64]	; 0x40
 800254e:	4613      	mov	r3, r2
 8002550:	eb42 0303 	adc.w	r3, r2, r3
 8002554:	647b      	str	r3, [r7, #68]	; 0x44
 8002556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800255a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800255e:	f7fd fe57 	bl	8000210 <__aeabi_uldivmod>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4611      	mov	r1, r2
 8002568:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <UART_SetConfig+0x2d4>)
 800256a:	fba3 2301 	umull	r2, r3, r3, r1
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	2264      	movs	r2, #100	; 0x64
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	1acb      	subs	r3, r1, r3
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800257e:	4b36      	ldr	r3, [pc, #216]	; (8002658 <UART_SetConfig+0x2d4>)
 8002580:	fba3 2302 	umull	r2, r3, r3, r2
 8002584:	095b      	lsrs	r3, r3, #5
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800258c:	441c      	add	r4, r3
 800258e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002592:	2200      	movs	r2, #0
 8002594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002598:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800259c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80025a0:	4642      	mov	r2, r8
 80025a2:	464b      	mov	r3, r9
 80025a4:	1891      	adds	r1, r2, r2
 80025a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80025a8:	415b      	adcs	r3, r3
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025b0:	4641      	mov	r1, r8
 80025b2:	1851      	adds	r1, r2, r1
 80025b4:	6339      	str	r1, [r7, #48]	; 0x30
 80025b6:	4649      	mov	r1, r9
 80025b8:	414b      	adcs	r3, r1
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80025c8:	4659      	mov	r1, fp
 80025ca:	00cb      	lsls	r3, r1, #3
 80025cc:	4651      	mov	r1, sl
 80025ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025d2:	4651      	mov	r1, sl
 80025d4:	00ca      	lsls	r2, r1, #3
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	4603      	mov	r3, r0
 80025dc:	4642      	mov	r2, r8
 80025de:	189b      	adds	r3, r3, r2
 80025e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025e4:	464b      	mov	r3, r9
 80025e6:	460a      	mov	r2, r1
 80025e8:	eb42 0303 	adc.w	r3, r2, r3
 80025ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002604:	460b      	mov	r3, r1
 8002606:	18db      	adds	r3, r3, r3
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
 800260a:	4613      	mov	r3, r2
 800260c:	eb42 0303 	adc.w	r3, r2, r3
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002616:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800261a:	f7fd fdf9 	bl	8000210 <__aeabi_uldivmod>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <UART_SetConfig+0x2d4>)
 8002624:	fba3 1302 	umull	r1, r3, r3, r2
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	2164      	movs	r1, #100	; 0x64
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	3332      	adds	r3, #50	; 0x32
 8002636:	4a08      	ldr	r2, [pc, #32]	; (8002658 <UART_SetConfig+0x2d4>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	f003 0207 	and.w	r2, r3, #7
 8002642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4422      	add	r2, r4
 800264a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800264c:	e105      	b.n	800285a <UART_SetConfig+0x4d6>
 800264e:	bf00      	nop
 8002650:	40011000 	.word	0x40011000
 8002654:	40011400 	.word	0x40011400
 8002658:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800265c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002660:	2200      	movs	r2, #0
 8002662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002666:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800266a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800266e:	4642      	mov	r2, r8
 8002670:	464b      	mov	r3, r9
 8002672:	1891      	adds	r1, r2, r2
 8002674:	6239      	str	r1, [r7, #32]
 8002676:	415b      	adcs	r3, r3
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
 800267a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800267e:	4641      	mov	r1, r8
 8002680:	1854      	adds	r4, r2, r1
 8002682:	4649      	mov	r1, r9
 8002684:	eb43 0501 	adc.w	r5, r3, r1
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	00eb      	lsls	r3, r5, #3
 8002692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002696:	00e2      	lsls	r2, r4, #3
 8002698:	4614      	mov	r4, r2
 800269a:	461d      	mov	r5, r3
 800269c:	4643      	mov	r3, r8
 800269e:	18e3      	adds	r3, r4, r3
 80026a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026a4:	464b      	mov	r3, r9
 80026a6:	eb45 0303 	adc.w	r3, r5, r3
 80026aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80026ca:	4629      	mov	r1, r5
 80026cc:	008b      	lsls	r3, r1, #2
 80026ce:	4621      	mov	r1, r4
 80026d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026d4:	4621      	mov	r1, r4
 80026d6:	008a      	lsls	r2, r1, #2
 80026d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80026dc:	f7fd fd98 	bl	8000210 <__aeabi_uldivmod>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4b60      	ldr	r3, [pc, #384]	; (8002868 <UART_SetConfig+0x4e4>)
 80026e6:	fba3 2302 	umull	r2, r3, r3, r2
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	011c      	lsls	r4, r3, #4
 80026ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026f2:	2200      	movs	r2, #0
 80026f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002700:	4642      	mov	r2, r8
 8002702:	464b      	mov	r3, r9
 8002704:	1891      	adds	r1, r2, r2
 8002706:	61b9      	str	r1, [r7, #24]
 8002708:	415b      	adcs	r3, r3
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002710:	4641      	mov	r1, r8
 8002712:	1851      	adds	r1, r2, r1
 8002714:	6139      	str	r1, [r7, #16]
 8002716:	4649      	mov	r1, r9
 8002718:	414b      	adcs	r3, r1
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002728:	4659      	mov	r1, fp
 800272a:	00cb      	lsls	r3, r1, #3
 800272c:	4651      	mov	r1, sl
 800272e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002732:	4651      	mov	r1, sl
 8002734:	00ca      	lsls	r2, r1, #3
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
 800273a:	4603      	mov	r3, r0
 800273c:	4642      	mov	r2, r8
 800273e:	189b      	adds	r3, r3, r2
 8002740:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002744:	464b      	mov	r3, r9
 8002746:	460a      	mov	r2, r1
 8002748:	eb42 0303 	adc.w	r3, r2, r3
 800274c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	67bb      	str	r3, [r7, #120]	; 0x78
 800275a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002768:	4649      	mov	r1, r9
 800276a:	008b      	lsls	r3, r1, #2
 800276c:	4641      	mov	r1, r8
 800276e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002772:	4641      	mov	r1, r8
 8002774:	008a      	lsls	r2, r1, #2
 8002776:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800277a:	f7fd fd49 	bl	8000210 <__aeabi_uldivmod>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4b39      	ldr	r3, [pc, #228]	; (8002868 <UART_SetConfig+0x4e4>)
 8002784:	fba3 1302 	umull	r1, r3, r3, r2
 8002788:	095b      	lsrs	r3, r3, #5
 800278a:	2164      	movs	r1, #100	; 0x64
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	3332      	adds	r3, #50	; 0x32
 8002796:	4a34      	ldr	r2, [pc, #208]	; (8002868 <UART_SetConfig+0x4e4>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a2:	441c      	add	r4, r3
 80027a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027a8:	2200      	movs	r2, #0
 80027aa:	673b      	str	r3, [r7, #112]	; 0x70
 80027ac:	677a      	str	r2, [r7, #116]	; 0x74
 80027ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80027b2:	4642      	mov	r2, r8
 80027b4:	464b      	mov	r3, r9
 80027b6:	1891      	adds	r1, r2, r2
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	415b      	adcs	r3, r3
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027c2:	4641      	mov	r1, r8
 80027c4:	1851      	adds	r1, r2, r1
 80027c6:	6039      	str	r1, [r7, #0]
 80027c8:	4649      	mov	r1, r9
 80027ca:	414b      	adcs	r3, r1
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027da:	4659      	mov	r1, fp
 80027dc:	00cb      	lsls	r3, r1, #3
 80027de:	4651      	mov	r1, sl
 80027e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027e4:	4651      	mov	r1, sl
 80027e6:	00ca      	lsls	r2, r1, #3
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	4603      	mov	r3, r0
 80027ee:	4642      	mov	r2, r8
 80027f0:	189b      	adds	r3, r3, r2
 80027f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80027f4:	464b      	mov	r3, r9
 80027f6:	460a      	mov	r2, r1
 80027f8:	eb42 0303 	adc.w	r3, r2, r3
 80027fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	663b      	str	r3, [r7, #96]	; 0x60
 8002808:	667a      	str	r2, [r7, #100]	; 0x64
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002816:	4649      	mov	r1, r9
 8002818:	008b      	lsls	r3, r1, #2
 800281a:	4641      	mov	r1, r8
 800281c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002820:	4641      	mov	r1, r8
 8002822:	008a      	lsls	r2, r1, #2
 8002824:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002828:	f7fd fcf2 	bl	8000210 <__aeabi_uldivmod>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <UART_SetConfig+0x4e4>)
 8002832:	fba3 1302 	umull	r1, r3, r3, r2
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	2164      	movs	r1, #100	; 0x64
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	3332      	adds	r3, #50	; 0x32
 8002844:	4a08      	ldr	r2, [pc, #32]	; (8002868 <UART_SetConfig+0x4e4>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	f003 020f 	and.w	r2, r3, #15
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4422      	add	r2, r4
 8002858:	609a      	str	r2, [r3, #8]
}
 800285a:	bf00      	nop
 800285c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002860:	46bd      	mov	sp, r7
 8002862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002866:	bf00      	nop
 8002868:	51eb851f 	.word	0x51eb851f

0800286c <__NVIC_SetPriority>:
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	6039      	str	r1, [r7, #0]
 8002876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	2b00      	cmp	r3, #0
 800287e:	db0a      	blt.n	8002896 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	490c      	ldr	r1, [pc, #48]	; (80028b8 <__NVIC_SetPriority+0x4c>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	0112      	lsls	r2, r2, #4
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	440b      	add	r3, r1
 8002890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002894:	e00a      	b.n	80028ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4908      	ldr	r1, [pc, #32]	; (80028bc <__NVIC_SetPriority+0x50>)
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	3b04      	subs	r3, #4
 80028a4:	0112      	lsls	r2, r2, #4
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	440b      	add	r3, r1
 80028aa:	761a      	strb	r2, [r3, #24]
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000e100 	.word	0xe000e100
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <SysTick_Handler+0x1c>)
 80028c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80028c8:	f001 fcfe 	bl	80042c8 <xTaskGetSchedulerState>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d001      	beq.n	80028d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80028d2:	f002 fae9 	bl	8004ea8 <xPortSysTickHandler>
  }
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000e010 	.word	0xe000e010

080028e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80028e4:	2100      	movs	r1, #0
 80028e6:	f06f 0004 	mvn.w	r0, #4
 80028ea:	f7ff ffbf 	bl	800286c <__NVIC_SetPriority>
#endif
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028fa:	f3ef 8305 	mrs	r3, IPSR
 80028fe:	603b      	str	r3, [r7, #0]
  return(result);
 8002900:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002906:	f06f 0305 	mvn.w	r3, #5
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	e00c      	b.n	8002928 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <osKernelInitialize+0x44>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d105      	bne.n	8002922 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <osKernelInitialize+0x44>)
 8002918:	2201      	movs	r2, #1
 800291a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800291c:	2300      	movs	r3, #0
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	e002      	b.n	8002928 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002922:	f04f 33ff 	mov.w	r3, #4294967295
 8002926:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002928:	687b      	ldr	r3, [r7, #4]
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	200000dc 	.word	0x200000dc

0800293c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002942:	f3ef 8305 	mrs	r3, IPSR
 8002946:	603b      	str	r3, [r7, #0]
  return(result);
 8002948:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <osKernelStart+0x1a>
    stat = osErrorISR;
 800294e:	f06f 0305 	mvn.w	r3, #5
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	e010      	b.n	8002978 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <osKernelStart+0x48>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d109      	bne.n	8002972 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800295e:	f7ff ffbf 	bl	80028e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002962:	4b08      	ldr	r3, [pc, #32]	; (8002984 <osKernelStart+0x48>)
 8002964:	2202      	movs	r2, #2
 8002966:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002968:	f001 f866 	bl	8003a38 <vTaskStartScheduler>
      stat = osOK;
 800296c:	2300      	movs	r3, #0
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	e002      	b.n	8002978 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002972:	f04f 33ff 	mov.w	r3, #4294967295
 8002976:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002978:	687b      	ldr	r3, [r7, #4]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200000dc 	.word	0x200000dc

08002988 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b08e      	sub	sp, #56	; 0x38
 800298c:	af04      	add	r7, sp, #16
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002998:	f3ef 8305 	mrs	r3, IPSR
 800299c:	617b      	str	r3, [r7, #20]
  return(result);
 800299e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d17e      	bne.n	8002aa2 <osThreadNew+0x11a>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d07b      	beq.n	8002aa2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80029ae:	2318      	movs	r3, #24
 80029b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80029b6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d045      	beq.n	8002a4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <osThreadNew+0x48>
        name = attr->name;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <osThreadNew+0x6e>
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b38      	cmp	r3, #56	; 0x38
 80029e8:	d805      	bhi.n	80029f6 <osThreadNew+0x6e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <osThreadNew+0x72>
        return (NULL);
 80029f6:	2300      	movs	r3, #0
 80029f8:	e054      	b.n	8002aa4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00e      	beq.n	8002a30 <osThreadNew+0xa8>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2b5b      	cmp	r3, #91	; 0x5b
 8002a18:	d90a      	bls.n	8002a30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d006      	beq.n	8002a30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <osThreadNew+0xa8>
        mem = 1;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	e010      	b.n	8002a52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10c      	bne.n	8002a52 <osThreadNew+0xca>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d108      	bne.n	8002a52 <osThreadNew+0xca>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d104      	bne.n	8002a52 <osThreadNew+0xca>
          mem = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61bb      	str	r3, [r7, #24]
 8002a4c:	e001      	b.n	8002a52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d110      	bne.n	8002a7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a60:	9202      	str	r2, [sp, #8]
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6a3a      	ldr	r2, [r7, #32]
 8002a6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fe0c 	bl	800368c <xTaskCreateStatic>
 8002a74:	4603      	mov	r3, r0
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	e013      	b.n	8002aa2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d110      	bne.n	8002aa2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	f107 0310 	add.w	r3, r7, #16
 8002a88:	9301      	str	r3, [sp, #4]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fe57 	bl	8003746 <xTaskCreate>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d001      	beq.n	8002aa2 <osThreadNew+0x11a>
            hTask = NULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002aa2:	693b      	ldr	r3, [r7, #16]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3728      	adds	r7, #40	; 0x28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ab4:	f3ef 8305 	mrs	r3, IPSR
 8002ab8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002aba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <osDelay+0x1c>
    stat = osErrorISR;
 8002ac0:	f06f 0305 	mvn.w	r3, #5
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	e007      	b.n	8002ad8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 ff7c 	bl	80039d0 <vTaskDelay>
    }
  }

  return (stat);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <vApplicationGetIdleTaskMemory+0x2c>)
 8002af4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4a06      	ldr	r2, [pc, #24]	; (8002b14 <vApplicationGetIdleTaskMemory+0x30>)
 8002afa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2280      	movs	r2, #128	; 0x80
 8002b00:	601a      	str	r2, [r3, #0]
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	200000e0 	.word	0x200000e0
 8002b14:	2000013c 	.word	0x2000013c

08002b18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	4a06      	ldr	r2, [pc, #24]	; (8002b48 <vApplicationGetTimerTaskMemory+0x30>)
 8002b2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b36:	601a      	str	r2, [r3, #0]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	2000033c 	.word	0x2000033c
 8002b48:	20000398 	.word	0x20000398

08002b4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f103 0208 	add.w	r2, r3, #8
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295
 8002b64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f103 0208 	add.w	r2, r3, #8
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f103 0208 	add.w	r2, r3, #8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	601a      	str	r2, [r3, #0]
}
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b085      	sub	sp, #20
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d103      	bne.n	8002c0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e00c      	b.n	8002c28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3308      	adds	r3, #8
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	e002      	b.n	8002c1c <vListInsert+0x2e>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d2f6      	bcs.n	8002c16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	601a      	str	r2, [r3, #0]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6892      	ldr	r2, [r2, #8]
 8002c76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6852      	ldr	r2, [r2, #4]
 8002c80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d103      	bne.n	8002c94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	1e5a      	subs	r2, r3, #1
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10a      	bne.n	8002cde <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cda:	bf00      	nop
 8002cdc:	e7fe      	b.n	8002cdc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002cde:	f002 f851 	bl	8004d84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	68f9      	ldr	r1, [r7, #12]
 8002cec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	441a      	add	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	68f9      	ldr	r1, [r7, #12]
 8002d12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	441a      	add	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	22ff      	movs	r2, #255	; 0xff
 8002d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	22ff      	movs	r2, #255	; 0xff
 8002d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d114      	bne.n	8002d5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01a      	beq.n	8002d72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3310      	adds	r3, #16
 8002d40:	4618      	mov	r0, r3
 8002d42:	f001 f903 	bl	8003f4c <xTaskRemoveFromEventList>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d012      	beq.n	8002d72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <xQueueGenericReset+0xcc>)
 8002d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	e009      	b.n	8002d72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3310      	adds	r3, #16
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fef2 	bl	8002b4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3324      	adds	r3, #36	; 0x24
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff feed 	bl	8002b4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d72:	f002 f837 	bl	8004de4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d76:	2301      	movs	r3, #1
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	e000ed04 	.word	0xe000ed04

08002d84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08e      	sub	sp, #56	; 0x38
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002daa:	bf00      	nop
 8002dac:	e7fe      	b.n	8002dac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <xQueueGenericCreateStatic+0x52>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <xQueueGenericCreateStatic+0x56>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <xQueueGenericCreateStatic+0x58>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10a      	bne.n	8002df6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	623b      	str	r3, [r7, #32]
}
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <xQueueGenericCreateStatic+0x7e>
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <xQueueGenericCreateStatic+0x82>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <xQueueGenericCreateStatic+0x84>
 8002e06:	2300      	movs	r3, #0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	61fb      	str	r3, [r7, #28]
}
 8002e1e:	bf00      	nop
 8002e20:	e7fe      	b.n	8002e20 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e22:	2350      	movs	r3, #80	; 0x50
 8002e24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b50      	cmp	r3, #80	; 0x50
 8002e2a:	d00a      	beq.n	8002e42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	61bb      	str	r3, [r7, #24]
}
 8002e3e:	bf00      	nop
 8002e40:	e7fe      	b.n	8002e40 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f805 	bl	8002e74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3730      	adds	r7, #48	; 0x30
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d103      	bne.n	8002e90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e002      	b.n	8002e96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	69b8      	ldr	r0, [r7, #24]
 8002ea6:	f7ff ff05 	bl	8002cb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	78fa      	ldrb	r2, [r7, #3]
 8002eae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08e      	sub	sp, #56	; 0x38
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <xQueueGenericSend+0x32>
	__asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002eea:	bf00      	nop
 8002eec:	e7fe      	b.n	8002eec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d103      	bne.n	8002efc <xQueueGenericSend+0x40>
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <xQueueGenericSend+0x44>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <xQueueGenericSend+0x46>
 8002f00:	2300      	movs	r3, #0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <xQueueGenericSend+0x60>
	__asm volatile
 8002f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0a:	f383 8811 	msr	BASEPRI, r3
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	f3bf 8f4f 	dsb	sy
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f18:	bf00      	nop
 8002f1a:	e7fe      	b.n	8002f1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d103      	bne.n	8002f2a <xQueueGenericSend+0x6e>
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <xQueueGenericSend+0x72>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <xQueueGenericSend+0x74>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <xQueueGenericSend+0x8e>
	__asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	623b      	str	r3, [r7, #32]
}
 8002f46:	bf00      	nop
 8002f48:	e7fe      	b.n	8002f48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f4a:	f001 f9bd 	bl	80042c8 <xTaskGetSchedulerState>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d102      	bne.n	8002f5a <xQueueGenericSend+0x9e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <xQueueGenericSend+0xa2>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <xQueueGenericSend+0xa4>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <xQueueGenericSend+0xbe>
	__asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	61fb      	str	r3, [r7, #28]
}
 8002f76:	bf00      	nop
 8002f78:	e7fe      	b.n	8002f78 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f7a:	f001 ff03 	bl	8004d84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d302      	bcc.n	8002f90 <xQueueGenericSend+0xd4>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d129      	bne.n	8002fe4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f96:	f000 fa0b 	bl	80033b0 <prvCopyDataToQueue>
 8002f9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d010      	beq.n	8002fc6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	3324      	adds	r3, #36	; 0x24
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 ffcf 	bl	8003f4c <xTaskRemoveFromEventList>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d013      	beq.n	8002fdc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002fb4:	4b3f      	ldr	r3, [pc, #252]	; (80030b4 <xQueueGenericSend+0x1f8>)
 8002fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	e00a      	b.n	8002fdc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fcc:	4b39      	ldr	r3, [pc, #228]	; (80030b4 <xQueueGenericSend+0x1f8>)
 8002fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002fdc:	f001 ff02 	bl	8004de4 <vPortExitCritical>
				return pdPASS;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e063      	b.n	80030ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d103      	bne.n	8002ff2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fea:	f001 fefb 	bl	8004de4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e05c      	b.n	80030ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d106      	bne.n	8003006 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ff8:	f107 0314 	add.w	r3, r7, #20
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f001 f809 	bl	8004014 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003002:	2301      	movs	r3, #1
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003006:	f001 feed 	bl	8004de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800300a:	f000 fd7b 	bl	8003b04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800300e:	f001 feb9 	bl	8004d84 <vPortEnterCritical>
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003018:	b25b      	sxtb	r3, r3
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d103      	bne.n	8003028 <xQueueGenericSend+0x16c>
 8003020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800302e:	b25b      	sxtb	r3, r3
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d103      	bne.n	800303e <xQueueGenericSend+0x182>
 8003036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800303e:	f001 fed1 	bl	8004de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003042:	1d3a      	adds	r2, r7, #4
 8003044:	f107 0314 	add.w	r3, r7, #20
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fff8 	bl	8004040 <xTaskCheckForTimeOut>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d124      	bne.n	80030a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003056:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003058:	f000 faa2 	bl	80035a0 <prvIsQueueFull>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d018      	beq.n	8003094 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	3310      	adds	r3, #16
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f000 ff1e 	bl	8003eac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003072:	f000 fa2d 	bl	80034d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003076:	f000 fd53 	bl	8003b20 <xTaskResumeAll>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	f47f af7c 	bne.w	8002f7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <xQueueGenericSend+0x1f8>)
 8003084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	e772      	b.n	8002f7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003096:	f000 fa1b 	bl	80034d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800309a:	f000 fd41 	bl	8003b20 <xTaskResumeAll>
 800309e:	e76c      	b.n	8002f7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80030a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030a2:	f000 fa15 	bl	80034d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030a6:	f000 fd3b 	bl	8003b20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3738      	adds	r7, #56	; 0x38
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	e000ed04 	.word	0xe000ed04

080030b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b090      	sub	sp, #64	; 0x40
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030e2:	bf00      	nop
 80030e4:	e7fe      	b.n	80030e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d103      	bne.n	80030f4 <xQueueGenericSendFromISR+0x3c>
 80030ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <xQueueGenericSendFromISR+0x40>
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <xQueueGenericSendFromISR+0x42>
 80030f8:	2300      	movs	r3, #0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10a      	bne.n	8003114 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003110:	bf00      	nop
 8003112:	e7fe      	b.n	8003112 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d103      	bne.n	8003122 <xQueueGenericSendFromISR+0x6a>
 800311a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <xQueueGenericSendFromISR+0x6e>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <xQueueGenericSendFromISR+0x70>
 8003126:	2300      	movs	r3, #0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10a      	bne.n	8003142 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800312c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003130:	f383 8811 	msr	BASEPRI, r3
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	623b      	str	r3, [r7, #32]
}
 800313e:	bf00      	nop
 8003140:	e7fe      	b.n	8003140 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003142:	f001 ff01 	bl	8004f48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003146:	f3ef 8211 	mrs	r2, BASEPRI
 800314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	61fa      	str	r2, [r7, #28]
 800315c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800315e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003160:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316a:	429a      	cmp	r2, r3
 800316c:	d302      	bcc.n	8003174 <xQueueGenericSendFromISR+0xbc>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d12f      	bne.n	80031d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800317a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800318a:	f000 f911 	bl	80033b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800318e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003196:	d112      	bne.n	80031be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a2:	3324      	adds	r3, #36	; 0x24
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fed1 	bl	8003f4c <xTaskRemoveFromEventList>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00e      	beq.n	80031ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e007      	b.n	80031ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031c2:	3301      	adds	r3, #1
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	b25a      	sxtb	r2, r3
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031ce:	2301      	movs	r3, #1
 80031d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80031d2:	e001      	b.n	80031d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3740      	adds	r7, #64	; 0x40
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08c      	sub	sp, #48	; 0x30
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <xQueueReceive+0x30>
	__asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	623b      	str	r3, [r7, #32]
}
 800321c:	bf00      	nop
 800321e:	e7fe      	b.n	800321e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <xQueueReceive+0x3e>
 8003226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <xQueueReceive+0x42>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <xQueueReceive+0x44>
 8003232:	2300      	movs	r3, #0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10a      	bne.n	800324e <xQueueReceive+0x5e>
	__asm volatile
 8003238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	61fb      	str	r3, [r7, #28]
}
 800324a:	bf00      	nop
 800324c:	e7fe      	b.n	800324c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800324e:	f001 f83b 	bl	80042c8 <xTaskGetSchedulerState>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <xQueueReceive+0x6e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <xQueueReceive+0x72>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <xQueueReceive+0x74>
 8003262:	2300      	movs	r3, #0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10a      	bne.n	800327e <xQueueReceive+0x8e>
	__asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	61bb      	str	r3, [r7, #24]
}
 800327a:	bf00      	nop
 800327c:	e7fe      	b.n	800327c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800327e:	f001 fd81 	bl	8004d84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	2b00      	cmp	r3, #0
 800328c:	d01f      	beq.n	80032ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003292:	f000 f8f7 	bl	8003484 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	1e5a      	subs	r2, r3, #1
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00f      	beq.n	80032c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	3310      	adds	r3, #16
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fe4e 	bl	8003f4c <xTaskRemoveFromEventList>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032b6:	4b3d      	ldr	r3, [pc, #244]	; (80033ac <xQueueReceive+0x1bc>)
 80032b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032c6:	f001 fd8d 	bl	8004de4 <vPortExitCritical>
				return pdPASS;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e069      	b.n	80033a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d103      	bne.n	80032dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032d4:	f001 fd86 	bl	8004de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032d8:	2300      	movs	r3, #0
 80032da:	e062      	b.n	80033a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032e2:	f107 0310 	add.w	r3, r7, #16
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fe94 	bl	8004014 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032ec:	2301      	movs	r3, #1
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032f0:	f001 fd78 	bl	8004de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032f4:	f000 fc06 	bl	8003b04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032f8:	f001 fd44 	bl	8004d84 <vPortEnterCritical>
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003302:	b25b      	sxtb	r3, r3
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d103      	bne.n	8003312 <xQueueReceive+0x122>
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003318:	b25b      	sxtb	r3, r3
 800331a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331e:	d103      	bne.n	8003328 <xQueueReceive+0x138>
 8003320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003328:	f001 fd5c 	bl	8004de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800332c:	1d3a      	adds	r2, r7, #4
 800332e:	f107 0310 	add.w	r3, r7, #16
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fe83 	bl	8004040 <xTaskCheckForTimeOut>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d123      	bne.n	8003388 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003342:	f000 f917 	bl	8003574 <prvIsQueueEmpty>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d017      	beq.n	800337c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800334c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334e:	3324      	adds	r3, #36	; 0x24
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fda9 	bl	8003eac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800335a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800335c:	f000 f8b8 	bl	80034d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003360:	f000 fbde 	bl	8003b20 <xTaskResumeAll>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d189      	bne.n	800327e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800336a:	4b10      	ldr	r3, [pc, #64]	; (80033ac <xQueueReceive+0x1bc>)
 800336c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	e780      	b.n	800327e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800337c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800337e:	f000 f8a7 	bl	80034d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003382:	f000 fbcd 	bl	8003b20 <xTaskResumeAll>
 8003386:	e77a      	b.n	800327e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800338a:	f000 f8a1 	bl	80034d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800338e:	f000 fbc7 	bl	8003b20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003394:	f000 f8ee 	bl	8003574 <prvIsQueueEmpty>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	f43f af6f 	beq.w	800327e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3730      	adds	r7, #48	; 0x30
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	e000ed04 	.word	0xe000ed04

080033b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10d      	bne.n	80033ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d14d      	bne.n	8003472 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 ff92 	bl	8004304 <xTaskPriorityDisinherit>
 80033e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	e043      	b.n	8003472 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d119      	bne.n	8003424 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6858      	ldr	r0, [r3, #4]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	461a      	mov	r2, r3
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	f001 fff2 	bl	80053e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	441a      	add	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	429a      	cmp	r2, r3
 8003418:	d32b      	bcc.n	8003472 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	e026      	b.n	8003472 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	68d8      	ldr	r0, [r3, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	461a      	mov	r2, r3
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	f001 ffd8 	bl	80053e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	425b      	negs	r3, r3
 800343e:	441a      	add	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d207      	bcs.n	8003460 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	425b      	negs	r3, r3
 800345a:	441a      	add	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d105      	bne.n	8003472 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	3b01      	subs	r3, #1
 8003470:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800347a:	697b      	ldr	r3, [r7, #20]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d018      	beq.n	80034c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	441a      	add	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d303      	bcc.n	80034b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68d9      	ldr	r1, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	461a      	mov	r2, r3
 80034c2:	6838      	ldr	r0, [r7, #0]
 80034c4:	f001 ff8e 	bl	80053e4 <memcpy>
	}
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034d8:	f001 fc54 	bl	8004d84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034e4:	e011      	b.n	800350a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d012      	beq.n	8003514 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3324      	adds	r3, #36	; 0x24
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fd2a 	bl	8003f4c <xTaskRemoveFromEventList>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034fe:	f000 fe01 	bl	8004104 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	3b01      	subs	r3, #1
 8003506:	b2db      	uxtb	r3, r3
 8003508:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800350a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350e:	2b00      	cmp	r3, #0
 8003510:	dce9      	bgt.n	80034e6 <prvUnlockQueue+0x16>
 8003512:	e000      	b.n	8003516 <prvUnlockQueue+0x46>
					break;
 8003514:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	22ff      	movs	r2, #255	; 0xff
 800351a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800351e:	f001 fc61 	bl	8004de4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003522:	f001 fc2f 	bl	8004d84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800352c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800352e:	e011      	b.n	8003554 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d012      	beq.n	800355e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3310      	adds	r3, #16
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fd05 	bl	8003f4c <xTaskRemoveFromEventList>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003548:	f000 fddc 	bl	8004104 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800354c:	7bbb      	ldrb	r3, [r7, #14]
 800354e:	3b01      	subs	r3, #1
 8003550:	b2db      	uxtb	r3, r3
 8003552:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003554:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003558:	2b00      	cmp	r3, #0
 800355a:	dce9      	bgt.n	8003530 <prvUnlockQueue+0x60>
 800355c:	e000      	b.n	8003560 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800355e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	22ff      	movs	r2, #255	; 0xff
 8003564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003568:	f001 fc3c 	bl	8004de4 <vPortExitCritical>
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800357c:	f001 fc02 	bl	8004d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003588:	2301      	movs	r3, #1
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e001      	b.n	8003592 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003592:	f001 fc27 	bl	8004de4 <vPortExitCritical>

	return xReturn;
 8003596:	68fb      	ldr	r3, [r7, #12]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035a8:	f001 fbec 	bl	8004d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d102      	bne.n	80035be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	e001      	b.n	80035c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035c2:	f001 fc0f 	bl	8004de4 <vPortExitCritical>

	return xReturn;
 80035c6:	68fb      	ldr	r3, [r7, #12]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	e014      	b.n	800360a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80035e0:	4a0f      	ldr	r2, [pc, #60]	; (8003620 <vQueueAddToRegistry+0x50>)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10b      	bne.n	8003604 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80035ec:	490c      	ldr	r1, [pc, #48]	; (8003620 <vQueueAddToRegistry+0x50>)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <vQueueAddToRegistry+0x50>)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003602:	e006      	b.n	8003612 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	3301      	adds	r3, #1
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b07      	cmp	r3, #7
 800360e:	d9e7      	bls.n	80035e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003610:	bf00      	nop
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000798 	.word	0x20000798

08003624 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003634:	f001 fba6 	bl	8004d84 <vPortEnterCritical>
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800363e:	b25b      	sxtb	r3, r3
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d103      	bne.n	800364e <vQueueWaitForMessageRestricted+0x2a>
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003654:	b25b      	sxtb	r3, r3
 8003656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365a:	d103      	bne.n	8003664 <vQueueWaitForMessageRestricted+0x40>
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003664:	f001 fbbe 	bl	8004de4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	2b00      	cmp	r3, #0
 800366e:	d106      	bne.n	800367e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	3324      	adds	r3, #36	; 0x24
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fc3b 	bl	8003ef4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800367e:	6978      	ldr	r0, [r7, #20]
 8003680:	f7ff ff26 	bl	80034d0 <prvUnlockQueue>
	}
 8003684:	bf00      	nop
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08e      	sub	sp, #56	; 0x38
 8003690:	af04      	add	r7, sp, #16
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800369a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10a      	bne.n	80036b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	623b      	str	r3, [r7, #32]
}
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	61fb      	str	r3, [r7, #28]
}
 80036ce:	bf00      	nop
 80036d0:	e7fe      	b.n	80036d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036d2:	235c      	movs	r3, #92	; 0x5c
 80036d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b5c      	cmp	r3, #92	; 0x5c
 80036da:	d00a      	beq.n	80036f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	61bb      	str	r3, [r7, #24]
}
 80036ee:	bf00      	nop
 80036f0:	e7fe      	b.n	80036f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d01e      	beq.n	8003738 <xTaskCreateStatic+0xac>
 80036fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01b      	beq.n	8003738 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003708:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	2202      	movs	r2, #2
 800370e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003712:	2300      	movs	r3, #0
 8003714:	9303      	str	r3, [sp, #12]
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	9302      	str	r3, [sp, #8]
 800371a:	f107 0314 	add.w	r3, r7, #20
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f850 	bl	80037d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003732:	f000 f8dd 	bl	80038f0 <prvAddNewTaskToReadyList>
 8003736:	e001      	b.n	800373c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800373c:	697b      	ldr	r3, [r7, #20]
	}
 800373e:	4618      	mov	r0, r3
 8003740:	3728      	adds	r7, #40	; 0x28
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003746:	b580      	push	{r7, lr}
 8003748:	b08c      	sub	sp, #48	; 0x30
 800374a:	af04      	add	r7, sp, #16
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4618      	mov	r0, r3
 800375c:	f001 fc34 	bl	8004fc8 <pvPortMalloc>
 8003760:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00e      	beq.n	8003786 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003768:	205c      	movs	r0, #92	; 0x5c
 800376a:	f001 fc2d 	bl	8004fc8 <pvPortMalloc>
 800376e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	631a      	str	r2, [r3, #48]	; 0x30
 800377c:	e005      	b.n	800378a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800377e:	6978      	ldr	r0, [r7, #20]
 8003780:	f001 fcee 	bl	8005160 <vPortFree>
 8003784:	e001      	b.n	800378a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d017      	beq.n	80037c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003798:	88fa      	ldrh	r2, [r7, #6]
 800379a:	2300      	movs	r3, #0
 800379c:	9303      	str	r3, [sp, #12]
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	9302      	str	r3, [sp, #8]
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f80e 	bl	80037d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037b4:	69f8      	ldr	r0, [r7, #28]
 80037b6:	f000 f89b 	bl	80038f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037ba:	2301      	movs	r3, #1
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	e002      	b.n	80037c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295
 80037c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037c6:	69bb      	ldr	r3, [r7, #24]
	}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3720      	adds	r7, #32
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	461a      	mov	r2, r3
 80037e8:	21a5      	movs	r1, #165	; 0xa5
 80037ea:	f001 fe09 	bl	8005400 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037f8:	3b01      	subs	r3, #1
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f023 0307 	bic.w	r3, r3, #7
 8003806:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	617b      	str	r3, [r7, #20]
}
 8003824:	bf00      	nop
 8003826:	e7fe      	b.n	8003826 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01f      	beq.n	800386e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	e012      	b.n	800385a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	7819      	ldrb	r1, [r3, #0]
 800383c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	4413      	add	r3, r2
 8003842:	3334      	adds	r3, #52	; 0x34
 8003844:	460a      	mov	r2, r1
 8003846:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d006      	beq.n	8003862 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	3301      	adds	r3, #1
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	2b0f      	cmp	r3, #15
 800385e:	d9e9      	bls.n	8003834 <prvInitialiseNewTask+0x64>
 8003860:	e000      	b.n	8003864 <prvInitialiseNewTask+0x94>
			{
				break;
 8003862:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800386c:	e003      	b.n	8003876 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003878:	2b37      	cmp	r3, #55	; 0x37
 800387a:	d901      	bls.n	8003880 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800387c:	2337      	movs	r3, #55	; 0x37
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003884:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800388a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	2200      	movs	r2, #0
 8003890:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	3304      	adds	r3, #4
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff f978 	bl	8002b8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	3318      	adds	r3, #24
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff f973 	bl	8002b8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038be:	2200      	movs	r2, #0
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	68f9      	ldr	r1, [r7, #12]
 80038ce:	69b8      	ldr	r0, [r7, #24]
 80038d0:	f001 f928 	bl	8004b24 <pxPortInitialiseStack>
 80038d4:	4602      	mov	r2, r0
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038e6:	bf00      	nop
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038f8:	f001 fa44 	bl	8004d84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038fc:	4b2d      	ldr	r3, [pc, #180]	; (80039b4 <prvAddNewTaskToReadyList+0xc4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3301      	adds	r3, #1
 8003902:	4a2c      	ldr	r2, [pc, #176]	; (80039b4 <prvAddNewTaskToReadyList+0xc4>)
 8003904:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003906:	4b2c      	ldr	r3, [pc, #176]	; (80039b8 <prvAddNewTaskToReadyList+0xc8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800390e:	4a2a      	ldr	r2, [pc, #168]	; (80039b8 <prvAddNewTaskToReadyList+0xc8>)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003914:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <prvAddNewTaskToReadyList+0xc4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d110      	bne.n	800393e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800391c:	f000 fc16 	bl	800414c <prvInitialiseTaskLists>
 8003920:	e00d      	b.n	800393e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003922:	4b26      	ldr	r3, [pc, #152]	; (80039bc <prvAddNewTaskToReadyList+0xcc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800392a:	4b23      	ldr	r3, [pc, #140]	; (80039b8 <prvAddNewTaskToReadyList+0xc8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	429a      	cmp	r2, r3
 8003936:	d802      	bhi.n	800393e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003938:	4a1f      	ldr	r2, [pc, #124]	; (80039b8 <prvAddNewTaskToReadyList+0xc8>)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <prvAddNewTaskToReadyList+0xd0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3301      	adds	r3, #1
 8003944:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <prvAddNewTaskToReadyList+0xd0>)
 8003946:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003948:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <prvAddNewTaskToReadyList+0xd0>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003954:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <prvAddNewTaskToReadyList+0xd4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d903      	bls.n	8003964 <prvAddNewTaskToReadyList+0x74>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	4a18      	ldr	r2, [pc, #96]	; (80039c4 <prvAddNewTaskToReadyList+0xd4>)
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <prvAddNewTaskToReadyList+0xd8>)
 8003972:	441a      	add	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3304      	adds	r3, #4
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f7ff f913 	bl	8002ba6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003980:	f001 fa30 	bl	8004de4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003984:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <prvAddNewTaskToReadyList+0xcc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00e      	beq.n	80039aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <prvAddNewTaskToReadyList+0xc8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	429a      	cmp	r2, r3
 8003998:	d207      	bcs.n	80039aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800399a:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <prvAddNewTaskToReadyList+0xdc>)
 800399c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000cac 	.word	0x20000cac
 80039b8:	200007d8 	.word	0x200007d8
 80039bc:	20000cb8 	.word	0x20000cb8
 80039c0:	20000cc8 	.word	0x20000cc8
 80039c4:	20000cb4 	.word	0x20000cb4
 80039c8:	200007dc 	.word	0x200007dc
 80039cc:	e000ed04 	.word	0xe000ed04

080039d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d017      	beq.n	8003a12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039e2:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <vTaskDelay+0x60>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <vTaskDelay+0x30>
	__asm volatile
 80039ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ee:	f383 8811 	msr	BASEPRI, r3
 80039f2:	f3bf 8f6f 	isb	sy
 80039f6:	f3bf 8f4f 	dsb	sy
 80039fa:	60bb      	str	r3, [r7, #8]
}
 80039fc:	bf00      	nop
 80039fe:	e7fe      	b.n	80039fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a00:	f000 f880 	bl	8003b04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a04:	2100      	movs	r1, #0
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fcea 	bl	80043e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a0c:	f000 f888 	bl	8003b20 <xTaskResumeAll>
 8003a10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d107      	bne.n	8003a28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <vTaskDelay+0x64>)
 8003a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	20000cd4 	.word	0x20000cd4
 8003a34:	e000ed04 	.word	0xe000ed04

08003a38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	; 0x28
 8003a3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a46:	463a      	mov	r2, r7
 8003a48:	1d39      	adds	r1, r7, #4
 8003a4a:	f107 0308 	add.w	r3, r7, #8
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff f848 	bl	8002ae4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a54:	6839      	ldr	r1, [r7, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	9202      	str	r2, [sp, #8]
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	2300      	movs	r3, #0
 8003a64:	460a      	mov	r2, r1
 8003a66:	4921      	ldr	r1, [pc, #132]	; (8003aec <vTaskStartScheduler+0xb4>)
 8003a68:	4821      	ldr	r0, [pc, #132]	; (8003af0 <vTaskStartScheduler+0xb8>)
 8003a6a:	f7ff fe0f 	bl	800368c <xTaskCreateStatic>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4a20      	ldr	r2, [pc, #128]	; (8003af4 <vTaskStartScheduler+0xbc>)
 8003a72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a74:	4b1f      	ldr	r3, [pc, #124]	; (8003af4 <vTaskStartScheduler+0xbc>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	e001      	b.n	8003a86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d102      	bne.n	8003a92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a8c:	f000 fcfc 	bl	8004488 <xTimerCreateTimerTask>
 8003a90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d116      	bne.n	8003ac6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	613b      	str	r3, [r7, #16]
}
 8003aaa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003aac:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <vTaskStartScheduler+0xc0>)
 8003aae:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ab4:	4b11      	ldr	r3, [pc, #68]	; (8003afc <vTaskStartScheduler+0xc4>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003aba:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <vTaskStartScheduler+0xc8>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ac0:	f001 f8be 	bl	8004c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ac4:	e00e      	b.n	8003ae4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d10a      	bne.n	8003ae4 <vTaskStartScheduler+0xac>
	__asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	60fb      	str	r3, [r7, #12]
}
 8003ae0:	bf00      	nop
 8003ae2:	e7fe      	b.n	8003ae2 <vTaskStartScheduler+0xaa>
}
 8003ae4:	bf00      	nop
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	08005458 	.word	0x08005458
 8003af0:	0800411d 	.word	0x0800411d
 8003af4:	20000cd0 	.word	0x20000cd0
 8003af8:	20000ccc 	.word	0x20000ccc
 8003afc:	20000cb8 	.word	0x20000cb8
 8003b00:	20000cb0 	.word	0x20000cb0

08003b04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b08:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <vTaskSuspendAll+0x18>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	4a03      	ldr	r2, [pc, #12]	; (8003b1c <vTaskSuspendAll+0x18>)
 8003b10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b12:	bf00      	nop
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	20000cd4 	.word	0x20000cd4

08003b20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b2e:	4b42      	ldr	r3, [pc, #264]	; (8003c38 <xTaskResumeAll+0x118>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <xTaskResumeAll+0x2c>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	603b      	str	r3, [r7, #0]
}
 8003b48:	bf00      	nop
 8003b4a:	e7fe      	b.n	8003b4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b4c:	f001 f91a 	bl	8004d84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b50:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <xTaskResumeAll+0x118>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	4a38      	ldr	r2, [pc, #224]	; (8003c38 <xTaskResumeAll+0x118>)
 8003b58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b5a:	4b37      	ldr	r3, [pc, #220]	; (8003c38 <xTaskResumeAll+0x118>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d162      	bne.n	8003c28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b62:	4b36      	ldr	r3, [pc, #216]	; (8003c3c <xTaskResumeAll+0x11c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d05e      	beq.n	8003c28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b6a:	e02f      	b.n	8003bcc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b6c:	4b34      	ldr	r3, [pc, #208]	; (8003c40 <xTaskResumeAll+0x120>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3318      	adds	r3, #24
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff f871 	bl	8002c60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3304      	adds	r3, #4
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff f86c 	bl	8002c60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8c:	4b2d      	ldr	r3, [pc, #180]	; (8003c44 <xTaskResumeAll+0x124>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d903      	bls.n	8003b9c <xTaskResumeAll+0x7c>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	4a2a      	ldr	r2, [pc, #168]	; (8003c44 <xTaskResumeAll+0x124>)
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4a27      	ldr	r2, [pc, #156]	; (8003c48 <xTaskResumeAll+0x128>)
 8003baa:	441a      	add	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f7fe fff7 	bl	8002ba6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbc:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <xTaskResumeAll+0x12c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d302      	bcc.n	8003bcc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003bc6:	4b22      	ldr	r3, [pc, #136]	; (8003c50 <xTaskResumeAll+0x130>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bcc:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <xTaskResumeAll+0x120>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1cb      	bne.n	8003b6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bda:	f000 fb55 	bl	8004288 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bde:	4b1d      	ldr	r3, [pc, #116]	; (8003c54 <xTaskResumeAll+0x134>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d010      	beq.n	8003c0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bea:	f000 f847 	bl	8003c7c <xTaskIncrementTick>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003bf4:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <xTaskResumeAll+0x130>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f1      	bne.n	8003bea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003c06:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <xTaskResumeAll+0x134>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c0c:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <xTaskResumeAll+0x130>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d009      	beq.n	8003c28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c14:	2301      	movs	r3, #1
 8003c16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c18:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <xTaskResumeAll+0x138>)
 8003c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c28:	f001 f8dc 	bl	8004de4 <vPortExitCritical>

	return xAlreadyYielded;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000cd4 	.word	0x20000cd4
 8003c3c:	20000cac 	.word	0x20000cac
 8003c40:	20000c6c 	.word	0x20000c6c
 8003c44:	20000cb4 	.word	0x20000cb4
 8003c48:	200007dc 	.word	0x200007dc
 8003c4c:	200007d8 	.word	0x200007d8
 8003c50:	20000cc0 	.word	0x20000cc0
 8003c54:	20000cbc 	.word	0x20000cbc
 8003c58:	e000ed04 	.word	0xe000ed04

08003c5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <xTaskGetTickCount+0x1c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c68:	687b      	ldr	r3, [r7, #4]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000cb0 	.word	0x20000cb0

08003c7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c86:	4b4f      	ldr	r3, [pc, #316]	; (8003dc4 <xTaskIncrementTick+0x148>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f040 808f 	bne.w	8003dae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c90:	4b4d      	ldr	r3, [pc, #308]	; (8003dc8 <xTaskIncrementTick+0x14c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3301      	adds	r3, #1
 8003c96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c98:	4a4b      	ldr	r2, [pc, #300]	; (8003dc8 <xTaskIncrementTick+0x14c>)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d120      	bne.n	8003ce6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ca4:	4b49      	ldr	r3, [pc, #292]	; (8003dcc <xTaskIncrementTick+0x150>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	603b      	str	r3, [r7, #0]
}
 8003cc0:	bf00      	nop
 8003cc2:	e7fe      	b.n	8003cc2 <xTaskIncrementTick+0x46>
 8003cc4:	4b41      	ldr	r3, [pc, #260]	; (8003dcc <xTaskIncrementTick+0x150>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	4b41      	ldr	r3, [pc, #260]	; (8003dd0 <xTaskIncrementTick+0x154>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a3f      	ldr	r2, [pc, #252]	; (8003dcc <xTaskIncrementTick+0x150>)
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	4a3f      	ldr	r2, [pc, #252]	; (8003dd0 <xTaskIncrementTick+0x154>)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <xTaskIncrementTick+0x158>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	4a3d      	ldr	r2, [pc, #244]	; (8003dd4 <xTaskIncrementTick+0x158>)
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	f000 fad1 	bl	8004288 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ce6:	4b3c      	ldr	r3, [pc, #240]	; (8003dd8 <xTaskIncrementTick+0x15c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d349      	bcc.n	8003d84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cf0:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <xTaskIncrementTick+0x150>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d104      	bne.n	8003d04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cfa:	4b37      	ldr	r3, [pc, #220]	; (8003dd8 <xTaskIncrementTick+0x15c>)
 8003cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003d00:	601a      	str	r2, [r3, #0]
					break;
 8003d02:	e03f      	b.n	8003d84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d04:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <xTaskIncrementTick+0x150>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d203      	bcs.n	8003d24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d1c:	4a2e      	ldr	r2, [pc, #184]	; (8003dd8 <xTaskIncrementTick+0x15c>)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d22:	e02f      	b.n	8003d84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	3304      	adds	r3, #4
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe ff99 	bl	8002c60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	3318      	adds	r3, #24
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe ff90 	bl	8002c60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <xTaskIncrementTick+0x160>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d903      	bls.n	8003d54 <xTaskIncrementTick+0xd8>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	4a22      	ldr	r2, [pc, #136]	; (8003ddc <xTaskIncrementTick+0x160>)
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4a1f      	ldr	r2, [pc, #124]	; (8003de0 <xTaskIncrementTick+0x164>)
 8003d62:	441a      	add	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	3304      	adds	r3, #4
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	f7fe ff1b 	bl	8002ba6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <xTaskIncrementTick+0x168>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d3b8      	bcc.n	8003cf0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d82:	e7b5      	b.n	8003cf0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d84:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <xTaskIncrementTick+0x168>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8a:	4915      	ldr	r1, [pc, #84]	; (8003de0 <xTaskIncrementTick+0x164>)
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d901      	bls.n	8003da0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <xTaskIncrementTick+0x16c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003da8:	2301      	movs	r3, #1
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	e004      	b.n	8003db8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003dae:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <xTaskIncrementTick+0x170>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3301      	adds	r3, #1
 8003db4:	4a0d      	ldr	r2, [pc, #52]	; (8003dec <xTaskIncrementTick+0x170>)
 8003db6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003db8:	697b      	ldr	r3, [r7, #20]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000cd4 	.word	0x20000cd4
 8003dc8:	20000cb0 	.word	0x20000cb0
 8003dcc:	20000c64 	.word	0x20000c64
 8003dd0:	20000c68 	.word	0x20000c68
 8003dd4:	20000cc4 	.word	0x20000cc4
 8003dd8:	20000ccc 	.word	0x20000ccc
 8003ddc:	20000cb4 	.word	0x20000cb4
 8003de0:	200007dc 	.word	0x200007dc
 8003de4:	200007d8 	.word	0x200007d8
 8003de8:	20000cc0 	.word	0x20000cc0
 8003dec:	20000cbc 	.word	0x20000cbc

08003df0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003df6:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <vTaskSwitchContext+0xa8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dfe:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <vTaskSwitchContext+0xac>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e04:	e041      	b.n	8003e8a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003e06:	4b25      	ldr	r3, [pc, #148]	; (8003e9c <vTaskSwitchContext+0xac>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e0c:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <vTaskSwitchContext+0xb0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	e010      	b.n	8003e36 <vTaskSwitchContext+0x46>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <vTaskSwitchContext+0x40>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	607b      	str	r3, [r7, #4]
}
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <vTaskSwitchContext+0x3e>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	491b      	ldr	r1, [pc, #108]	; (8003ea4 <vTaskSwitchContext+0xb4>)
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0e4      	beq.n	8003e14 <vTaskSwitchContext+0x24>
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4a13      	ldr	r2, [pc, #76]	; (8003ea4 <vTaskSwitchContext+0xb4>)
 8003e56:	4413      	add	r3, r2
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	605a      	str	r2, [r3, #4]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d104      	bne.n	8003e7a <vTaskSwitchContext+0x8a>
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a09      	ldr	r2, [pc, #36]	; (8003ea8 <vTaskSwitchContext+0xb8>)
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4a06      	ldr	r2, [pc, #24]	; (8003ea0 <vTaskSwitchContext+0xb0>)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6013      	str	r3, [r2, #0]
}
 8003e8a:	bf00      	nop
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000cd4 	.word	0x20000cd4
 8003e9c:	20000cc0 	.word	0x20000cc0
 8003ea0:	20000cb4 	.word	0x20000cb4
 8003ea4:	200007dc 	.word	0x200007dc
 8003ea8:	200007d8 	.word	0x200007d8

08003eac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	60fb      	str	r3, [r7, #12]
}
 8003ece:	bf00      	nop
 8003ed0:	e7fe      	b.n	8003ed0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ed2:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <vTaskPlaceOnEventList+0x44>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3318      	adds	r3, #24
 8003ed8:	4619      	mov	r1, r3
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fe fe87 	bl	8002bee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	6838      	ldr	r0, [r7, #0]
 8003ee4:	f000 fa7c 	bl	80043e0 <prvAddCurrentTaskToDelayedList>
}
 8003ee8:	bf00      	nop
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	200007d8 	.word	0x200007d8

08003ef4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	617b      	str	r3, [r7, #20]
}
 8003f18:	bf00      	nop
 8003f1a:	e7fe      	b.n	8003f1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <vTaskPlaceOnEventListRestricted+0x54>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3318      	adds	r3, #24
 8003f22:	4619      	mov	r1, r3
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7fe fe3e 	bl	8002ba6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003f30:	f04f 33ff 	mov.w	r3, #4294967295
 8003f34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	68b8      	ldr	r0, [r7, #8]
 8003f3a:	f000 fa51 	bl	80043e0 <prvAddCurrentTaskToDelayedList>
	}
 8003f3e:	bf00      	nop
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	200007d8 	.word	0x200007d8

08003f4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10a      	bne.n	8003f78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	60fb      	str	r3, [r7, #12]
}
 8003f74:	bf00      	nop
 8003f76:	e7fe      	b.n	8003f76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	3318      	adds	r3, #24
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fe fe6f 	bl	8002c60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f82:	4b1e      	ldr	r3, [pc, #120]	; (8003ffc <xTaskRemoveFromEventList+0xb0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d11d      	bne.n	8003fc6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe fe66 	bl	8002c60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f98:	4b19      	ldr	r3, [pc, #100]	; (8004000 <xTaskRemoveFromEventList+0xb4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d903      	bls.n	8003fa8 <xTaskRemoveFromEventList+0x5c>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	4a16      	ldr	r2, [pc, #88]	; (8004000 <xTaskRemoveFromEventList+0xb4>)
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4a13      	ldr	r2, [pc, #76]	; (8004004 <xTaskRemoveFromEventList+0xb8>)
 8003fb6:	441a      	add	r2, r3
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f7fe fdf1 	bl	8002ba6 <vListInsertEnd>
 8003fc4:	e005      	b.n	8003fd2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	3318      	adds	r3, #24
 8003fca:	4619      	mov	r1, r3
 8003fcc:	480e      	ldr	r0, [pc, #56]	; (8004008 <xTaskRemoveFromEventList+0xbc>)
 8003fce:	f7fe fdea 	bl	8002ba6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	; (800400c <xTaskRemoveFromEventList+0xc0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d905      	bls.n	8003fec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <xTaskRemoveFromEventList+0xc4>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	e001      	b.n	8003ff0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ff0:	697b      	ldr	r3, [r7, #20]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000cd4 	.word	0x20000cd4
 8004000:	20000cb4 	.word	0x20000cb4
 8004004:	200007dc 	.word	0x200007dc
 8004008:	20000c6c 	.word	0x20000c6c
 800400c:	200007d8 	.word	0x200007d8
 8004010:	20000cc0 	.word	0x20000cc0

08004014 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <vTaskInternalSetTimeOutState+0x24>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <vTaskInternalSetTimeOutState+0x28>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	605a      	str	r2, [r3, #4]
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	20000cc4 	.word	0x20000cc4
 800403c:	20000cb0 	.word	0x20000cb0

08004040 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	613b      	str	r3, [r7, #16]
}
 8004062:	bf00      	nop
 8004064:	e7fe      	b.n	8004064 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	60fb      	str	r3, [r7, #12]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004082:	f000 fe7f 	bl	8004d84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004086:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <xTaskCheckForTimeOut+0xbc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d102      	bne.n	80040a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	e023      	b.n	80040ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4b15      	ldr	r3, [pc, #84]	; (8004100 <xTaskCheckForTimeOut+0xc0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d007      	beq.n	80040c2 <xTaskCheckForTimeOut+0x82>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d302      	bcc.n	80040c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040bc:	2301      	movs	r3, #1
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	e015      	b.n	80040ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d20b      	bcs.n	80040e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	1ad2      	subs	r2, r2, r3
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff9b 	bl	8004014 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	e004      	b.n	80040ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040ea:	2301      	movs	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040ee:	f000 fe79 	bl	8004de4 <vPortExitCritical>

	return xReturn;
 80040f2:	69fb      	ldr	r3, [r7, #28]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000cb0 	.word	0x20000cb0
 8004100:	20000cc4 	.word	0x20000cc4

08004104 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <vTaskMissedYield+0x14>)
 800410a:	2201      	movs	r2, #1
 800410c:	601a      	str	r2, [r3, #0]
}
 800410e:	bf00      	nop
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	20000cc0 	.word	0x20000cc0

0800411c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004124:	f000 f852 	bl	80041cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <prvIdleTask+0x28>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d9f9      	bls.n	8004124 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <prvIdleTask+0x2c>)
 8004132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004140:	e7f0      	b.n	8004124 <prvIdleTask+0x8>
 8004142:	bf00      	nop
 8004144:	200007dc 	.word	0x200007dc
 8004148:	e000ed04 	.word	0xe000ed04

0800414c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004152:	2300      	movs	r3, #0
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	e00c      	b.n	8004172 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4a12      	ldr	r2, [pc, #72]	; (80041ac <prvInitialiseTaskLists+0x60>)
 8004164:	4413      	add	r3, r2
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe fcf0 	bl	8002b4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3301      	adds	r3, #1
 8004170:	607b      	str	r3, [r7, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b37      	cmp	r3, #55	; 0x37
 8004176:	d9ef      	bls.n	8004158 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004178:	480d      	ldr	r0, [pc, #52]	; (80041b0 <prvInitialiseTaskLists+0x64>)
 800417a:	f7fe fce7 	bl	8002b4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800417e:	480d      	ldr	r0, [pc, #52]	; (80041b4 <prvInitialiseTaskLists+0x68>)
 8004180:	f7fe fce4 	bl	8002b4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004184:	480c      	ldr	r0, [pc, #48]	; (80041b8 <prvInitialiseTaskLists+0x6c>)
 8004186:	f7fe fce1 	bl	8002b4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800418a:	480c      	ldr	r0, [pc, #48]	; (80041bc <prvInitialiseTaskLists+0x70>)
 800418c:	f7fe fcde 	bl	8002b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004190:	480b      	ldr	r0, [pc, #44]	; (80041c0 <prvInitialiseTaskLists+0x74>)
 8004192:	f7fe fcdb 	bl	8002b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <prvInitialiseTaskLists+0x78>)
 8004198:	4a05      	ldr	r2, [pc, #20]	; (80041b0 <prvInitialiseTaskLists+0x64>)
 800419a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <prvInitialiseTaskLists+0x7c>)
 800419e:	4a05      	ldr	r2, [pc, #20]	; (80041b4 <prvInitialiseTaskLists+0x68>)
 80041a0:	601a      	str	r2, [r3, #0]
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	200007dc 	.word	0x200007dc
 80041b0:	20000c3c 	.word	0x20000c3c
 80041b4:	20000c50 	.word	0x20000c50
 80041b8:	20000c6c 	.word	0x20000c6c
 80041bc:	20000c80 	.word	0x20000c80
 80041c0:	20000c98 	.word	0x20000c98
 80041c4:	20000c64 	.word	0x20000c64
 80041c8:	20000c68 	.word	0x20000c68

080041cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041d2:	e019      	b.n	8004208 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041d4:	f000 fdd6 	bl	8004d84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d8:	4b10      	ldr	r3, [pc, #64]	; (800421c <prvCheckTasksWaitingTermination+0x50>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe fd3b 	bl	8002c60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041ea:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <prvCheckTasksWaitingTermination+0x54>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <prvCheckTasksWaitingTermination+0x54>)
 80041f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <prvCheckTasksWaitingTermination+0x58>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <prvCheckTasksWaitingTermination+0x58>)
 80041fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041fe:	f000 fdf1 	bl	8004de4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f810 	bl	8004228 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004208:	4b06      	ldr	r3, [pc, #24]	; (8004224 <prvCheckTasksWaitingTermination+0x58>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e1      	bne.n	80041d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004210:	bf00      	nop
 8004212:	bf00      	nop
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000c80 	.word	0x20000c80
 8004220:	20000cac 	.word	0x20000cac
 8004224:	20000c94 	.word	0x20000c94

08004228 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004236:	2b00      	cmp	r3, #0
 8004238:	d108      	bne.n	800424c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	4618      	mov	r0, r3
 8004240:	f000 ff8e 	bl	8005160 <vPortFree>
				vPortFree( pxTCB );
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 ff8b 	bl	8005160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800424a:	e018      	b.n	800427e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004252:	2b01      	cmp	r3, #1
 8004254:	d103      	bne.n	800425e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 ff82 	bl	8005160 <vPortFree>
	}
 800425c:	e00f      	b.n	800427e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004264:	2b02      	cmp	r3, #2
 8004266:	d00a      	beq.n	800427e <prvDeleteTCB+0x56>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	60fb      	str	r3, [r7, #12]
}
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <prvDeleteTCB+0x54>
	}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800428e:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <prvResetNextTaskUnblockTime+0x38>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d104      	bne.n	80042a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004298:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <prvResetNextTaskUnblockTime+0x3c>)
 800429a:	f04f 32ff 	mov.w	r2, #4294967295
 800429e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042a0:	e008      	b.n	80042b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a2:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <prvResetNextTaskUnblockTime+0x38>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4a04      	ldr	r2, [pc, #16]	; (80042c4 <prvResetNextTaskUnblockTime+0x3c>)
 80042b2:	6013      	str	r3, [r2, #0]
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	20000c64 	.word	0x20000c64
 80042c4:	20000ccc 	.word	0x20000ccc

080042c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <xTaskGetSchedulerState+0x34>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d102      	bne.n	80042dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042d6:	2301      	movs	r3, #1
 80042d8:	607b      	str	r3, [r7, #4]
 80042da:	e008      	b.n	80042ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042dc:	4b08      	ldr	r3, [pc, #32]	; (8004300 <xTaskGetSchedulerState+0x38>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042e4:	2302      	movs	r3, #2
 80042e6:	607b      	str	r3, [r7, #4]
 80042e8:	e001      	b.n	80042ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042ea:	2300      	movs	r3, #0
 80042ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042ee:	687b      	ldr	r3, [r7, #4]
	}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	20000cb8 	.word	0x20000cb8
 8004300:	20000cd4 	.word	0x20000cd4

08004304 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d056      	beq.n	80043c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800431a:	4b2e      	ldr	r3, [pc, #184]	; (80043d4 <xTaskPriorityDisinherit+0xd0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	429a      	cmp	r2, r3
 8004322:	d00a      	beq.n	800433a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	60fb      	str	r3, [r7, #12]
}
 8004336:	bf00      	nop
 8004338:	e7fe      	b.n	8004338 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10a      	bne.n	8004358 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	60bb      	str	r3, [r7, #8]
}
 8004354:	bf00      	nop
 8004356:	e7fe      	b.n	8004356 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435c:	1e5a      	subs	r2, r3, #1
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436a:	429a      	cmp	r2, r3
 800436c:	d02c      	beq.n	80043c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004372:	2b00      	cmp	r3, #0
 8004374:	d128      	bne.n	80043c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	3304      	adds	r3, #4
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe fc70 	bl	8002c60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <xTaskPriorityDisinherit+0xd4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d903      	bls.n	80043a8 <xTaskPriorityDisinherit+0xa4>
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	4a0c      	ldr	r2, [pc, #48]	; (80043d8 <xTaskPriorityDisinherit+0xd4>)
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4a09      	ldr	r2, [pc, #36]	; (80043dc <xTaskPriorityDisinherit+0xd8>)
 80043b6:	441a      	add	r2, r3
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	3304      	adds	r3, #4
 80043bc:	4619      	mov	r1, r3
 80043be:	4610      	mov	r0, r2
 80043c0:	f7fe fbf1 	bl	8002ba6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043c4:	2301      	movs	r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043c8:	697b      	ldr	r3, [r7, #20]
	}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	200007d8 	.word	0x200007d8
 80043d8:	20000cb4 	.word	0x20000cb4
 80043dc:	200007dc 	.word	0x200007dc

080043e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043ea:	4b21      	ldr	r3, [pc, #132]	; (8004470 <prvAddCurrentTaskToDelayedList+0x90>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043f0:	4b20      	ldr	r3, [pc, #128]	; (8004474 <prvAddCurrentTaskToDelayedList+0x94>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3304      	adds	r3, #4
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe fc32 	bl	8002c60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004402:	d10a      	bne.n	800441a <prvAddCurrentTaskToDelayedList+0x3a>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d007      	beq.n	800441a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800440a:	4b1a      	ldr	r3, [pc, #104]	; (8004474 <prvAddCurrentTaskToDelayedList+0x94>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3304      	adds	r3, #4
 8004410:	4619      	mov	r1, r3
 8004412:	4819      	ldr	r0, [pc, #100]	; (8004478 <prvAddCurrentTaskToDelayedList+0x98>)
 8004414:	f7fe fbc7 	bl	8002ba6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004418:	e026      	b.n	8004468 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4413      	add	r3, r2
 8004420:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004422:	4b14      	ldr	r3, [pc, #80]	; (8004474 <prvAddCurrentTaskToDelayedList+0x94>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	429a      	cmp	r2, r3
 8004430:	d209      	bcs.n	8004446 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004432:	4b12      	ldr	r3, [pc, #72]	; (800447c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <prvAddCurrentTaskToDelayedList+0x94>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3304      	adds	r3, #4
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f7fe fbd5 	bl	8002bee <vListInsert>
}
 8004444:	e010      	b.n	8004468 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004446:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <prvAddCurrentTaskToDelayedList+0x94>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3304      	adds	r3, #4
 8004450:	4619      	mov	r1, r3
 8004452:	4610      	mov	r0, r2
 8004454:	f7fe fbcb 	bl	8002bee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004458:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <prvAddCurrentTaskToDelayedList+0xa4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	429a      	cmp	r2, r3
 8004460:	d202      	bcs.n	8004468 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004462:	4a08      	ldr	r2, [pc, #32]	; (8004484 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	6013      	str	r3, [r2, #0]
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000cb0 	.word	0x20000cb0
 8004474:	200007d8 	.word	0x200007d8
 8004478:	20000c98 	.word	0x20000c98
 800447c:	20000c68 	.word	0x20000c68
 8004480:	20000c64 	.word	0x20000c64
 8004484:	20000ccc 	.word	0x20000ccc

08004488 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004492:	f000 fb07 	bl	8004aa4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004496:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <xTimerCreateTimerTask+0x80>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d021      	beq.n	80044e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80044a6:	1d3a      	adds	r2, r7, #4
 80044a8:	f107 0108 	add.w	r1, r7, #8
 80044ac:	f107 030c 	add.w	r3, r7, #12
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fe fb31 	bl	8002b18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	9202      	str	r2, [sp, #8]
 80044be:	9301      	str	r3, [sp, #4]
 80044c0:	2302      	movs	r3, #2
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	2300      	movs	r3, #0
 80044c6:	460a      	mov	r2, r1
 80044c8:	4910      	ldr	r1, [pc, #64]	; (800450c <xTimerCreateTimerTask+0x84>)
 80044ca:	4811      	ldr	r0, [pc, #68]	; (8004510 <xTimerCreateTimerTask+0x88>)
 80044cc:	f7ff f8de 	bl	800368c <xTaskCreateStatic>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4a10      	ldr	r2, [pc, #64]	; (8004514 <xTimerCreateTimerTask+0x8c>)
 80044d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044d6:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <xTimerCreateTimerTask+0x8c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044de:	2301      	movs	r3, #1
 80044e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	613b      	str	r3, [r7, #16]
}
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044fe:	697b      	ldr	r3, [r7, #20]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000d08 	.word	0x20000d08
 800450c:	08005460 	.word	0x08005460
 8004510:	0800464d 	.word	0x0800464d
 8004514:	20000d0c 	.word	0x20000d0c

08004518 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	; 0x28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004526:	2300      	movs	r3, #0
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	623b      	str	r3, [r7, #32]
}
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004546:	4b1a      	ldr	r3, [pc, #104]	; (80045b0 <xTimerGenericCommand+0x98>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d02a      	beq.n	80045a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b05      	cmp	r3, #5
 800455e:	dc18      	bgt.n	8004592 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004560:	f7ff feb2 	bl	80042c8 <xTaskGetSchedulerState>
 8004564:	4603      	mov	r3, r0
 8004566:	2b02      	cmp	r3, #2
 8004568:	d109      	bne.n	800457e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800456a:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <xTimerGenericCommand+0x98>)
 800456c:	6818      	ldr	r0, [r3, #0]
 800456e:	f107 0110 	add.w	r1, r7, #16
 8004572:	2300      	movs	r3, #0
 8004574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004576:	f7fe fca1 	bl	8002ebc <xQueueGenericSend>
 800457a:	6278      	str	r0, [r7, #36]	; 0x24
 800457c:	e012      	b.n	80045a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800457e:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <xTimerGenericCommand+0x98>)
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	f107 0110 	add.w	r1, r7, #16
 8004586:	2300      	movs	r3, #0
 8004588:	2200      	movs	r2, #0
 800458a:	f7fe fc97 	bl	8002ebc <xQueueGenericSend>
 800458e:	6278      	str	r0, [r7, #36]	; 0x24
 8004590:	e008      	b.n	80045a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004592:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <xTimerGenericCommand+0x98>)
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	f107 0110 	add.w	r1, r7, #16
 800459a:	2300      	movs	r3, #0
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	f7fe fd8b 	bl	80030b8 <xQueueGenericSendFromISR>
 80045a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3728      	adds	r7, #40	; 0x28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000d08 	.word	0x20000d08

080045b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045be:	4b22      	ldr	r3, [pc, #136]	; (8004648 <prvProcessExpiredTimer+0x94>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	3304      	adds	r3, #4
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fe fb47 	bl	8002c60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d022      	beq.n	8004626 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	18d1      	adds	r1, r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	6978      	ldr	r0, [r7, #20]
 80045ee:	f000 f8d1 	bl	8004794 <prvInsertTimerInActiveList>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01f      	beq.n	8004638 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045f8:	2300      	movs	r3, #0
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	2300      	movs	r3, #0
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	2100      	movs	r1, #0
 8004602:	6978      	ldr	r0, [r7, #20]
 8004604:	f7ff ff88 	bl	8004518 <xTimerGenericCommand>
 8004608:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d113      	bne.n	8004638 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	60fb      	str	r3, [r7, #12]
}
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	b2da      	uxtb	r2, r3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	6978      	ldr	r0, [r7, #20]
 800463e:	4798      	blx	r3
}
 8004640:	bf00      	nop
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000d00 	.word	0x20000d00

0800464c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004654:	f107 0308 	add.w	r3, r7, #8
 8004658:	4618      	mov	r0, r3
 800465a:	f000 f857 	bl	800470c <prvGetNextExpireTime>
 800465e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4619      	mov	r1, r3
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f803 	bl	8004670 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800466a:	f000 f8d5 	bl	8004818 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800466e:	e7f1      	b.n	8004654 <prvTimerTask+0x8>

08004670 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800467a:	f7ff fa43 	bl	8003b04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800467e:	f107 0308 	add.w	r3, r7, #8
 8004682:	4618      	mov	r0, r3
 8004684:	f000 f866 	bl	8004754 <prvSampleTimeNow>
 8004688:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d130      	bne.n	80046f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <prvProcessTimerOrBlockTask+0x3c>
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	429a      	cmp	r2, r3
 800469c:	d806      	bhi.n	80046ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800469e:	f7ff fa3f 	bl	8003b20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046a2:	68f9      	ldr	r1, [r7, #12]
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff ff85 	bl	80045b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80046aa:	e024      	b.n	80046f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046b2:	4b13      	ldr	r3, [pc, #76]	; (8004700 <prvProcessTimerOrBlockTask+0x90>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <prvProcessTimerOrBlockTask+0x50>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <prvProcessTimerOrBlockTask+0x52>
 80046c0:	2300      	movs	r3, #0
 80046c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046c4:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <prvProcessTimerOrBlockTask+0x94>)
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	4619      	mov	r1, r3
 80046d2:	f7fe ffa7 	bl	8003624 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046d6:	f7ff fa23 	bl	8003b20 <xTaskResumeAll>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046e0:	4b09      	ldr	r3, [pc, #36]	; (8004708 <prvProcessTimerOrBlockTask+0x98>)
 80046e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	f3bf 8f6f 	isb	sy
}
 80046f0:	e001      	b.n	80046f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046f2:	f7ff fa15 	bl	8003b20 <xTaskResumeAll>
}
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000d04 	.word	0x20000d04
 8004704:	20000d08 	.word	0x20000d08
 8004708:	e000ed04 	.word	0xe000ed04

0800470c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004714:	4b0e      	ldr	r3, [pc, #56]	; (8004750 <prvGetNextExpireTime+0x44>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <prvGetNextExpireTime+0x16>
 800471e:	2201      	movs	r2, #1
 8004720:	e000      	b.n	8004724 <prvGetNextExpireTime+0x18>
 8004722:	2200      	movs	r2, #0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d105      	bne.n	800473c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004730:	4b07      	ldr	r3, [pc, #28]	; (8004750 <prvGetNextExpireTime+0x44>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	e001      	b.n	8004740 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004740:	68fb      	ldr	r3, [r7, #12]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	20000d00 	.word	0x20000d00

08004754 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800475c:	f7ff fa7e 	bl	8003c5c <xTaskGetTickCount>
 8004760:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004762:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <prvSampleTimeNow+0x3c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	429a      	cmp	r2, r3
 800476a:	d205      	bcs.n	8004778 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800476c:	f000 f936 	bl	80049dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	e002      	b.n	800477e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800477e:	4a04      	ldr	r2, [pc, #16]	; (8004790 <prvSampleTimeNow+0x3c>)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004784:	68fb      	ldr	r3, [r7, #12]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20000d10 	.word	0x20000d10

08004794 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d812      	bhi.n	80047e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	1ad2      	subs	r2, r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d302      	bcc.n	80047ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047c8:	2301      	movs	r3, #1
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	e01b      	b.n	8004806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047ce:	4b10      	ldr	r3, [pc, #64]	; (8004810 <prvInsertTimerInActiveList+0x7c>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f7fe fa08 	bl	8002bee <vListInsert>
 80047de:	e012      	b.n	8004806 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d206      	bcs.n	80047f6 <prvInsertTimerInActiveList+0x62>
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d302      	bcc.n	80047f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047f0:	2301      	movs	r3, #1
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	e007      	b.n	8004806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047f6:	4b07      	ldr	r3, [pc, #28]	; (8004814 <prvInsertTimerInActiveList+0x80>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3304      	adds	r3, #4
 80047fe:	4619      	mov	r1, r3
 8004800:	4610      	mov	r0, r2
 8004802:	f7fe f9f4 	bl	8002bee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004806:	697b      	ldr	r3, [r7, #20]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	20000d04 	.word	0x20000d04
 8004814:	20000d00 	.word	0x20000d00

08004818 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08e      	sub	sp, #56	; 0x38
 800481c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800481e:	e0ca      	b.n	80049b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	da18      	bge.n	8004858 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004826:	1d3b      	adds	r3, r7, #4
 8004828:	3304      	adds	r3, #4
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800482c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	61fb      	str	r3, [r7, #28]
}
 8004844:	bf00      	nop
 8004846:	e7fe      	b.n	8004846 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800484e:	6850      	ldr	r0, [r2, #4]
 8004850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004852:	6892      	ldr	r2, [r2, #8]
 8004854:	4611      	mov	r1, r2
 8004856:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f2c0 80aa 	blt.w	80049b4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d004      	beq.n	8004876 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	3304      	adds	r3, #4
 8004870:	4618      	mov	r0, r3
 8004872:	f7fe f9f5 	bl	8002c60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004876:	463b      	mov	r3, r7
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff ff6b 	bl	8004754 <prvSampleTimeNow>
 800487e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b09      	cmp	r3, #9
 8004884:	f200 8097 	bhi.w	80049b6 <prvProcessReceivedCommands+0x19e>
 8004888:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <prvProcessReceivedCommands+0x78>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048b9 	.word	0x080048b9
 8004894:	080048b9 	.word	0x080048b9
 8004898:	080048b9 	.word	0x080048b9
 800489c:	0800492d 	.word	0x0800492d
 80048a0:	08004941 	.word	0x08004941
 80048a4:	0800498b 	.word	0x0800498b
 80048a8:	080048b9 	.word	0x080048b9
 80048ac:	080048b9 	.word	0x080048b9
 80048b0:	0800492d 	.word	0x0800492d
 80048b4:	08004941 	.word	0x08004941
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	18d1      	adds	r1, r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048d8:	f7ff ff5c 	bl	8004794 <prvInsertTimerInActiveList>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d069      	beq.n	80049b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d05e      	beq.n	80049b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	441a      	add	r2, r3
 8004900:	2300      	movs	r3, #0
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	2300      	movs	r3, #0
 8004906:	2100      	movs	r1, #0
 8004908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800490a:	f7ff fe05 	bl	8004518 <xTimerGenericCommand>
 800490e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d14f      	bne.n	80049b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	61bb      	str	r3, [r7, #24]
}
 8004928:	bf00      	nop
 800492a:	e7fe      	b.n	800492a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	b2da      	uxtb	r2, r3
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800493e:	e03a      	b.n	80049b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	b2da      	uxtb	r2, r3
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	617b      	str	r3, [r7, #20]
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	18d1      	adds	r1, r2, r3
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004984:	f7ff ff06 	bl	8004794 <prvInsertTimerInActiveList>
					break;
 8004988:	e015      	b.n	80049b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d103      	bne.n	80049a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800499a:	f000 fbe1 	bl	8005160 <vPortFree>
 800499e:	e00a      	b.n	80049b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049b2:	e000      	b.n	80049b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80049b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049b6:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <prvProcessReceivedCommands+0x1c0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	1d39      	adds	r1, r7, #4
 80049bc:	2200      	movs	r2, #0
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fe fc16 	bl	80031f0 <xQueueReceive>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f47f af2a 	bne.w	8004820 <prvProcessReceivedCommands+0x8>
	}
}
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	3730      	adds	r7, #48	; 0x30
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000d08 	.word	0x20000d08

080049dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049e2:	e048      	b.n	8004a76 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049e4:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <prvSwitchTimerLists+0xc0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ee:	4b2b      	ldr	r3, [pc, #172]	; (8004a9c <prvSwitchTimerLists+0xc0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3304      	adds	r3, #4
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fe f92f 	bl	8002c60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d02e      	beq.n	8004a76 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4413      	add	r3, r2
 8004a20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d90e      	bls.n	8004a48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a36:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <prvSwitchTimerLists+0xc0>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4610      	mov	r0, r2
 8004a42:	f7fe f8d4 	bl	8002bee <vListInsert>
 8004a46:	e016      	b.n	8004a76 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a48:	2300      	movs	r3, #0
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	2100      	movs	r1, #0
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f7ff fd60 	bl	8004518 <xTimerGenericCommand>
 8004a58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	603b      	str	r3, [r7, #0]
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a76:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <prvSwitchTimerLists+0xc0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1b1      	bne.n	80049e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a80:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <prvSwitchTimerLists+0xc0>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a86:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <prvSwitchTimerLists+0xc4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a04      	ldr	r2, [pc, #16]	; (8004a9c <prvSwitchTimerLists+0xc0>)
 8004a8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a8e:	4a04      	ldr	r2, [pc, #16]	; (8004aa0 <prvSwitchTimerLists+0xc4>)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	6013      	str	r3, [r2, #0]
}
 8004a94:	bf00      	nop
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20000d00 	.word	0x20000d00
 8004aa0:	20000d04 	.word	0x20000d04

08004aa4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004aaa:	f000 f96b 	bl	8004d84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004aae:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <prvCheckForValidListAndQueue+0x60>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d120      	bne.n	8004af8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ab6:	4814      	ldr	r0, [pc, #80]	; (8004b08 <prvCheckForValidListAndQueue+0x64>)
 8004ab8:	f7fe f848 	bl	8002b4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004abc:	4813      	ldr	r0, [pc, #76]	; (8004b0c <prvCheckForValidListAndQueue+0x68>)
 8004abe:	f7fe f845 	bl	8002b4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ac2:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <prvCheckForValidListAndQueue+0x6c>)
 8004ac4:	4a10      	ldr	r2, [pc, #64]	; (8004b08 <prvCheckForValidListAndQueue+0x64>)
 8004ac6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ac8:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <prvCheckForValidListAndQueue+0x70>)
 8004aca:	4a10      	ldr	r2, [pc, #64]	; (8004b0c <prvCheckForValidListAndQueue+0x68>)
 8004acc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ace:	2300      	movs	r3, #0
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <prvCheckForValidListAndQueue+0x74>)
 8004ad4:	4a11      	ldr	r2, [pc, #68]	; (8004b1c <prvCheckForValidListAndQueue+0x78>)
 8004ad6:	2110      	movs	r1, #16
 8004ad8:	200a      	movs	r0, #10
 8004ada:	f7fe f953 	bl	8002d84 <xQueueGenericCreateStatic>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4a08      	ldr	r2, [pc, #32]	; (8004b04 <prvCheckForValidListAndQueue+0x60>)
 8004ae2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ae4:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <prvCheckForValidListAndQueue+0x60>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <prvCheckForValidListAndQueue+0x60>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	490b      	ldr	r1, [pc, #44]	; (8004b20 <prvCheckForValidListAndQueue+0x7c>)
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe fd6c 	bl	80035d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004af8:	f000 f974 	bl	8004de4 <vPortExitCritical>
}
 8004afc:	bf00      	nop
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000d08 	.word	0x20000d08
 8004b08:	20000cd8 	.word	0x20000cd8
 8004b0c:	20000cec 	.word	0x20000cec
 8004b10:	20000d00 	.word	0x20000d00
 8004b14:	20000d04 	.word	0x20000d04
 8004b18:	20000db4 	.word	0x20000db4
 8004b1c:	20000d14 	.word	0x20000d14
 8004b20:	08005468 	.word	0x08005468

08004b24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3b04      	subs	r3, #4
 8004b34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3b04      	subs	r3, #4
 8004b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f023 0201 	bic.w	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3b04      	subs	r3, #4
 8004b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b54:	4a0c      	ldr	r2, [pc, #48]	; (8004b88 <pxPortInitialiseStack+0x64>)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3b14      	subs	r3, #20
 8004b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3b04      	subs	r3, #4
 8004b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f06f 0202 	mvn.w	r2, #2
 8004b72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3b20      	subs	r3, #32
 8004b78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	08004b8d 	.word	0x08004b8d

08004b8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b96:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <prvTaskExitError+0x54>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9e:	d00a      	beq.n	8004bb6 <prvTaskExitError+0x2a>
	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	60fb      	str	r3, [r7, #12]
}
 8004bb2:	bf00      	nop
 8004bb4:	e7fe      	b.n	8004bb4 <prvTaskExitError+0x28>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	60bb      	str	r3, [r7, #8]
}
 8004bc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bca:	bf00      	nop
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0fc      	beq.n	8004bcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bd2:	bf00      	nop
 8004bd4:	bf00      	nop
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	2000000c 	.word	0x2000000c
	...

08004bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bf0:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <pxCurrentTCBConst2>)
 8004bf2:	6819      	ldr	r1, [r3, #0]
 8004bf4:	6808      	ldr	r0, [r1, #0]
 8004bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfa:	f380 8809 	msr	PSP, r0
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	f380 8811 	msr	BASEPRI, r0
 8004c0a:	4770      	bx	lr
 8004c0c:	f3af 8000 	nop.w

08004c10 <pxCurrentTCBConst2>:
 8004c10:	200007d8 	.word	0x200007d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop

08004c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c18:	4808      	ldr	r0, [pc, #32]	; (8004c3c <prvPortStartFirstTask+0x24>)
 8004c1a:	6800      	ldr	r0, [r0, #0]
 8004c1c:	6800      	ldr	r0, [r0, #0]
 8004c1e:	f380 8808 	msr	MSP, r0
 8004c22:	f04f 0000 	mov.w	r0, #0
 8004c26:	f380 8814 	msr	CONTROL, r0
 8004c2a:	b662      	cpsie	i
 8004c2c:	b661      	cpsie	f
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	df00      	svc	0
 8004c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c3a:	bf00      	nop
 8004c3c:	e000ed08 	.word	0xe000ed08

08004c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c46:	4b46      	ldr	r3, [pc, #280]	; (8004d60 <xPortStartScheduler+0x120>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a46      	ldr	r2, [pc, #280]	; (8004d64 <xPortStartScheduler+0x124>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d10a      	bne.n	8004c66 <xPortStartScheduler+0x26>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	613b      	str	r3, [r7, #16]
}
 8004c62:	bf00      	nop
 8004c64:	e7fe      	b.n	8004c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c66:	4b3e      	ldr	r3, [pc, #248]	; (8004d60 <xPortStartScheduler+0x120>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a3f      	ldr	r2, [pc, #252]	; (8004d68 <xPortStartScheduler+0x128>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d10a      	bne.n	8004c86 <xPortStartScheduler+0x46>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	60fb      	str	r3, [r7, #12]
}
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c86:	4b39      	ldr	r3, [pc, #228]	; (8004d6c <xPortStartScheduler+0x12c>)
 8004c88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	22ff      	movs	r2, #255	; 0xff
 8004c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	4b31      	ldr	r3, [pc, #196]	; (8004d70 <xPortStartScheduler+0x130>)
 8004cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cae:	4b31      	ldr	r3, [pc, #196]	; (8004d74 <xPortStartScheduler+0x134>)
 8004cb0:	2207      	movs	r2, #7
 8004cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cb4:	e009      	b.n	8004cca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004cb6:	4b2f      	ldr	r3, [pc, #188]	; (8004d74 <xPortStartScheduler+0x134>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	4a2d      	ldr	r2, [pc, #180]	; (8004d74 <xPortStartScheduler+0x134>)
 8004cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd2:	2b80      	cmp	r3, #128	; 0x80
 8004cd4:	d0ef      	beq.n	8004cb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cd6:	4b27      	ldr	r3, [pc, #156]	; (8004d74 <xPortStartScheduler+0x134>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f1c3 0307 	rsb	r3, r3, #7
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d00a      	beq.n	8004cf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	60bb      	str	r3, [r7, #8]
}
 8004cf4:	bf00      	nop
 8004cf6:	e7fe      	b.n	8004cf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cf8:	4b1e      	ldr	r3, [pc, #120]	; (8004d74 <xPortStartScheduler+0x134>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	4a1d      	ldr	r2, [pc, #116]	; (8004d74 <xPortStartScheduler+0x134>)
 8004d00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d02:	4b1c      	ldr	r3, [pc, #112]	; (8004d74 <xPortStartScheduler+0x134>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d0a:	4a1a      	ldr	r2, [pc, #104]	; (8004d74 <xPortStartScheduler+0x134>)
 8004d0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d16:	4b18      	ldr	r3, [pc, #96]	; (8004d78 <xPortStartScheduler+0x138>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a17      	ldr	r2, [pc, #92]	; (8004d78 <xPortStartScheduler+0x138>)
 8004d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d22:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <xPortStartScheduler+0x138>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a14      	ldr	r2, [pc, #80]	; (8004d78 <xPortStartScheduler+0x138>)
 8004d28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d2e:	f000 f8dd 	bl	8004eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d32:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <xPortStartScheduler+0x13c>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d38:	f000 f8fc 	bl	8004f34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d3c:	4b10      	ldr	r3, [pc, #64]	; (8004d80 <xPortStartScheduler+0x140>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a0f      	ldr	r2, [pc, #60]	; (8004d80 <xPortStartScheduler+0x140>)
 8004d42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d48:	f7ff ff66 	bl	8004c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d4c:	f7ff f850 	bl	8003df0 <vTaskSwitchContext>
	prvTaskExitError();
 8004d50:	f7ff ff1c 	bl	8004b8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	e000ed00 	.word	0xe000ed00
 8004d64:	410fc271 	.word	0x410fc271
 8004d68:	410fc270 	.word	0x410fc270
 8004d6c:	e000e400 	.word	0xe000e400
 8004d70:	20000e04 	.word	0x20000e04
 8004d74:	20000e08 	.word	0x20000e08
 8004d78:	e000ed20 	.word	0xe000ed20
 8004d7c:	2000000c 	.word	0x2000000c
 8004d80:	e000ef34 	.word	0xe000ef34

08004d84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	607b      	str	r3, [r7, #4]
}
 8004d9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d9e:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <vPortEnterCritical+0x58>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3301      	adds	r3, #1
 8004da4:	4a0d      	ldr	r2, [pc, #52]	; (8004ddc <vPortEnterCritical+0x58>)
 8004da6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004da8:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <vPortEnterCritical+0x58>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d10f      	bne.n	8004dd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <vPortEnterCritical+0x5c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	603b      	str	r3, [r7, #0]
}
 8004dcc:	bf00      	nop
 8004dce:	e7fe      	b.n	8004dce <vPortEnterCritical+0x4a>
	}
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	2000000c 	.word	0x2000000c
 8004de0:	e000ed04 	.word	0xe000ed04

08004de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dea:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <vPortExitCritical+0x50>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <vPortExitCritical+0x24>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	607b      	str	r3, [r7, #4]
}
 8004e04:	bf00      	nop
 8004e06:	e7fe      	b.n	8004e06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <vPortExitCritical+0x50>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <vPortExitCritical+0x50>)
 8004e10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e12:	4b08      	ldr	r3, [pc, #32]	; (8004e34 <vPortExitCritical+0x50>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d105      	bne.n	8004e26 <vPortExitCritical+0x42>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	f383 8811 	msr	BASEPRI, r3
}
 8004e24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	2000000c 	.word	0x2000000c
	...

08004e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e40:	f3ef 8009 	mrs	r0, PSP
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <pxCurrentTCBConst>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	f01e 0f10 	tst.w	lr, #16
 8004e50:	bf08      	it	eq
 8004e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5a:	6010      	str	r0, [r2, #0]
 8004e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e64:	f380 8811 	msr	BASEPRI, r0
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f7fe ffbe 	bl	8003df0 <vTaskSwitchContext>
 8004e74:	f04f 0000 	mov.w	r0, #0
 8004e78:	f380 8811 	msr	BASEPRI, r0
 8004e7c:	bc09      	pop	{r0, r3}
 8004e7e:	6819      	ldr	r1, [r3, #0]
 8004e80:	6808      	ldr	r0, [r1, #0]
 8004e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e86:	f01e 0f10 	tst.w	lr, #16
 8004e8a:	bf08      	it	eq
 8004e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e90:	f380 8809 	msr	PSP, r0
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	f3af 8000 	nop.w

08004ea0 <pxCurrentTCBConst>:
 8004ea0:	200007d8 	.word	0x200007d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop

08004ea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	607b      	str	r3, [r7, #4]
}
 8004ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ec2:	f7fe fedb 	bl	8003c7c <xTaskIncrementTick>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ecc:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <xPortSysTickHandler+0x40>)
 8004ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	f383 8811 	msr	BASEPRI, r3
}
 8004ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ee0:	bf00      	nop
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <vPortSetupTimerInterrupt+0x34>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <vPortSetupTimerInterrupt+0x38>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004efc:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <vPortSetupTimerInterrupt+0x3c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <vPortSetupTimerInterrupt+0x40>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	099b      	lsrs	r3, r3, #6
 8004f08:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <vPortSetupTimerInterrupt+0x44>)
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f0e:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <vPortSetupTimerInterrupt+0x34>)
 8004f10:	2207      	movs	r2, #7
 8004f12:	601a      	str	r2, [r3, #0]
}
 8004f14:	bf00      	nop
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	e000e010 	.word	0xe000e010
 8004f24:	e000e018 	.word	0xe000e018
 8004f28:	20000000 	.word	0x20000000
 8004f2c:	10624dd3 	.word	0x10624dd3
 8004f30:	e000e014 	.word	0xe000e014

08004f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f44 <vPortEnableVFP+0x10>
 8004f38:	6801      	ldr	r1, [r0, #0]
 8004f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f3e:	6001      	str	r1, [r0, #0]
 8004f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f42:	bf00      	nop
 8004f44:	e000ed88 	.word	0xe000ed88

08004f48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f4e:	f3ef 8305 	mrs	r3, IPSR
 8004f52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b0f      	cmp	r3, #15
 8004f58:	d914      	bls.n	8004f84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f5a:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <vPortValidateInterruptPriority+0x70>)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f64:	4b15      	ldr	r3, [pc, #84]	; (8004fbc <vPortValidateInterruptPriority+0x74>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	7afa      	ldrb	r2, [r7, #11]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d20a      	bcs.n	8004f84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	607b      	str	r3, [r7, #4]
}
 8004f80:	bf00      	nop
 8004f82:	e7fe      	b.n	8004f82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f84:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <vPortValidateInterruptPriority+0x78>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f8c:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <vPortValidateInterruptPriority+0x7c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d90a      	bls.n	8004faa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	603b      	str	r3, [r7, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <vPortValidateInterruptPriority+0x60>
	}
 8004faa:	bf00      	nop
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	e000e3f0 	.word	0xe000e3f0
 8004fbc:	20000e04 	.word	0x20000e04
 8004fc0:	e000ed0c 	.word	0xe000ed0c
 8004fc4:	20000e08 	.word	0x20000e08

08004fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08a      	sub	sp, #40	; 0x28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fd4:	f7fe fd96 	bl	8003b04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fd8:	4b5b      	ldr	r3, [pc, #364]	; (8005148 <pvPortMalloc+0x180>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fe0:	f000 f920 	bl	8005224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fe4:	4b59      	ldr	r3, [pc, #356]	; (800514c <pvPortMalloc+0x184>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f040 8093 	bne.w	8005118 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01d      	beq.n	8005034 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	2b00      	cmp	r3, #0
 8005008:	d014      	beq.n	8005034 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f023 0307 	bic.w	r3, r3, #7
 8005010:	3308      	adds	r3, #8
 8005012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <pvPortMalloc+0x6c>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	617b      	str	r3, [r7, #20]
}
 8005030:	bf00      	nop
 8005032:	e7fe      	b.n	8005032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d06e      	beq.n	8005118 <pvPortMalloc+0x150>
 800503a:	4b45      	ldr	r3, [pc, #276]	; (8005150 <pvPortMalloc+0x188>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	429a      	cmp	r2, r3
 8005042:	d869      	bhi.n	8005118 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005044:	4b43      	ldr	r3, [pc, #268]	; (8005154 <pvPortMalloc+0x18c>)
 8005046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005048:	4b42      	ldr	r3, [pc, #264]	; (8005154 <pvPortMalloc+0x18c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800504e:	e004      	b.n	800505a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	429a      	cmp	r2, r3
 8005062:	d903      	bls.n	800506c <pvPortMalloc+0xa4>
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1f1      	bne.n	8005050 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800506c:	4b36      	ldr	r3, [pc, #216]	; (8005148 <pvPortMalloc+0x180>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005072:	429a      	cmp	r2, r3
 8005074:	d050      	beq.n	8005118 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2208      	movs	r2, #8
 800507c:	4413      	add	r3, r2
 800507e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	1ad2      	subs	r2, r2, r3
 8005090:	2308      	movs	r3, #8
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	429a      	cmp	r2, r3
 8005096:	d91f      	bls.n	80050d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4413      	add	r3, r2
 800509e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <pvPortMalloc+0xf8>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	613b      	str	r3, [r7, #16]
}
 80050bc:	bf00      	nop
 80050be:	e7fe      	b.n	80050be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	1ad2      	subs	r2, r2, r3
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050d2:	69b8      	ldr	r0, [r7, #24]
 80050d4:	f000 f908 	bl	80052e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050d8:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <pvPortMalloc+0x188>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	4a1b      	ldr	r2, [pc, #108]	; (8005150 <pvPortMalloc+0x188>)
 80050e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050e6:	4b1a      	ldr	r3, [pc, #104]	; (8005150 <pvPortMalloc+0x188>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b1b      	ldr	r3, [pc, #108]	; (8005158 <pvPortMalloc+0x190>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d203      	bcs.n	80050fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050f2:	4b17      	ldr	r3, [pc, #92]	; (8005150 <pvPortMalloc+0x188>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a18      	ldr	r2, [pc, #96]	; (8005158 <pvPortMalloc+0x190>)
 80050f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	4b13      	ldr	r3, [pc, #76]	; (800514c <pvPortMalloc+0x184>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	431a      	orrs	r2, r3
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800510e:	4b13      	ldr	r3, [pc, #76]	; (800515c <pvPortMalloc+0x194>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3301      	adds	r3, #1
 8005114:	4a11      	ldr	r2, [pc, #68]	; (800515c <pvPortMalloc+0x194>)
 8005116:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005118:	f7fe fd02 	bl	8003b20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <pvPortMalloc+0x174>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	60fb      	str	r3, [r7, #12]
}
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <pvPortMalloc+0x172>
	return pvReturn;
 800513c:	69fb      	ldr	r3, [r7, #28]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3728      	adds	r7, #40	; 0x28
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20004a14 	.word	0x20004a14
 800514c:	20004a28 	.word	0x20004a28
 8005150:	20004a18 	.word	0x20004a18
 8005154:	20004a0c 	.word	0x20004a0c
 8005158:	20004a1c 	.word	0x20004a1c
 800515c:	20004a20 	.word	0x20004a20

08005160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d04d      	beq.n	800520e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005172:	2308      	movs	r3, #8
 8005174:	425b      	negs	r3, r3
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4413      	add	r3, r2
 800517a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	4b24      	ldr	r3, [pc, #144]	; (8005218 <vPortFree+0xb8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4013      	ands	r3, r2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10a      	bne.n	80051a4 <vPortFree+0x44>
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	60fb      	str	r3, [r7, #12]
}
 80051a0:	bf00      	nop
 80051a2:	e7fe      	b.n	80051a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <vPortFree+0x62>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	60bb      	str	r3, [r7, #8]
}
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	4b14      	ldr	r3, [pc, #80]	; (8005218 <vPortFree+0xb8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4013      	ands	r3, r2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01e      	beq.n	800520e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d11a      	bne.n	800520e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	4b0e      	ldr	r3, [pc, #56]	; (8005218 <vPortFree+0xb8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	43db      	mvns	r3, r3
 80051e2:	401a      	ands	r2, r3
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051e8:	f7fe fc8c 	bl	8003b04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	4b0a      	ldr	r3, [pc, #40]	; (800521c <vPortFree+0xbc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4413      	add	r3, r2
 80051f6:	4a09      	ldr	r2, [pc, #36]	; (800521c <vPortFree+0xbc>)
 80051f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051fa:	6938      	ldr	r0, [r7, #16]
 80051fc:	f000 f874 	bl	80052e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005200:	4b07      	ldr	r3, [pc, #28]	; (8005220 <vPortFree+0xc0>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3301      	adds	r3, #1
 8005206:	4a06      	ldr	r2, [pc, #24]	; (8005220 <vPortFree+0xc0>)
 8005208:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800520a:	f7fe fc89 	bl	8003b20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800520e:	bf00      	nop
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20004a28 	.word	0x20004a28
 800521c:	20004a18 	.word	0x20004a18
 8005220:	20004a24 	.word	0x20004a24

08005224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800522a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800522e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005230:	4b27      	ldr	r3, [pc, #156]	; (80052d0 <prvHeapInit+0xac>)
 8005232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3307      	adds	r3, #7
 8005242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0307 	bic.w	r3, r3, #7
 800524a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	4a1f      	ldr	r2, [pc, #124]	; (80052d0 <prvHeapInit+0xac>)
 8005254:	4413      	add	r3, r2
 8005256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800525c:	4a1d      	ldr	r2, [pc, #116]	; (80052d4 <prvHeapInit+0xb0>)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005262:	4b1c      	ldr	r3, [pc, #112]	; (80052d4 <prvHeapInit+0xb0>)
 8005264:	2200      	movs	r2, #0
 8005266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	4413      	add	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005270:	2208      	movs	r2, #8
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0307 	bic.w	r3, r3, #7
 800527e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4a15      	ldr	r2, [pc, #84]	; (80052d8 <prvHeapInit+0xb4>)
 8005284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <prvHeapInit+0xb4>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2200      	movs	r2, #0
 800528c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800528e:	4b12      	ldr	r3, [pc, #72]	; (80052d8 <prvHeapInit+0xb4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	1ad2      	subs	r2, r2, r3
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052a4:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <prvHeapInit+0xb4>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	4a0a      	ldr	r2, [pc, #40]	; (80052dc <prvHeapInit+0xb8>)
 80052b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	4a09      	ldr	r2, [pc, #36]	; (80052e0 <prvHeapInit+0xbc>)
 80052ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052bc:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <prvHeapInit+0xc0>)
 80052be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052c2:	601a      	str	r2, [r3, #0]
}
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	20000e0c 	.word	0x20000e0c
 80052d4:	20004a0c 	.word	0x20004a0c
 80052d8:	20004a14 	.word	0x20004a14
 80052dc:	20004a1c 	.word	0x20004a1c
 80052e0:	20004a18 	.word	0x20004a18
 80052e4:	20004a28 	.word	0x20004a28

080052e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052f0:	4b28      	ldr	r3, [pc, #160]	; (8005394 <prvInsertBlockIntoFreeList+0xac>)
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	e002      	b.n	80052fc <prvInsertBlockIntoFreeList+0x14>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	429a      	cmp	r2, r3
 8005304:	d8f7      	bhi.n	80052f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	4413      	add	r3, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	d108      	bne.n	800532a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	441a      	add	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	441a      	add	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d118      	bne.n	8005370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4b15      	ldr	r3, [pc, #84]	; (8005398 <prvInsertBlockIntoFreeList+0xb0>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d00d      	beq.n	8005366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	441a      	add	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	e008      	b.n	8005378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005366:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <prvInsertBlockIntoFreeList+0xb0>)
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	e003      	b.n	8005378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	429a      	cmp	r2, r3
 800537e:	d002      	beq.n	8005386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005386:	bf00      	nop
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20004a0c 	.word	0x20004a0c
 8005398:	20004a14 	.word	0x20004a14

0800539c <__libc_init_array>:
 800539c:	b570      	push	{r4, r5, r6, lr}
 800539e:	4d0d      	ldr	r5, [pc, #52]	; (80053d4 <__libc_init_array+0x38>)
 80053a0:	4c0d      	ldr	r4, [pc, #52]	; (80053d8 <__libc_init_array+0x3c>)
 80053a2:	1b64      	subs	r4, r4, r5
 80053a4:	10a4      	asrs	r4, r4, #2
 80053a6:	2600      	movs	r6, #0
 80053a8:	42a6      	cmp	r6, r4
 80053aa:	d109      	bne.n	80053c0 <__libc_init_array+0x24>
 80053ac:	4d0b      	ldr	r5, [pc, #44]	; (80053dc <__libc_init_array+0x40>)
 80053ae:	4c0c      	ldr	r4, [pc, #48]	; (80053e0 <__libc_init_array+0x44>)
 80053b0:	f000 f82e 	bl	8005410 <_init>
 80053b4:	1b64      	subs	r4, r4, r5
 80053b6:	10a4      	asrs	r4, r4, #2
 80053b8:	2600      	movs	r6, #0
 80053ba:	42a6      	cmp	r6, r4
 80053bc:	d105      	bne.n	80053ca <__libc_init_array+0x2e>
 80053be:	bd70      	pop	{r4, r5, r6, pc}
 80053c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c4:	4798      	blx	r3
 80053c6:	3601      	adds	r6, #1
 80053c8:	e7ee      	b.n	80053a8 <__libc_init_array+0xc>
 80053ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ce:	4798      	blx	r3
 80053d0:	3601      	adds	r6, #1
 80053d2:	e7f2      	b.n	80053ba <__libc_init_array+0x1e>
 80053d4:	08005490 	.word	0x08005490
 80053d8:	08005490 	.word	0x08005490
 80053dc:	08005490 	.word	0x08005490
 80053e0:	08005494 	.word	0x08005494

080053e4 <memcpy>:
 80053e4:	440a      	add	r2, r1
 80053e6:	4291      	cmp	r1, r2
 80053e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80053ec:	d100      	bne.n	80053f0 <memcpy+0xc>
 80053ee:	4770      	bx	lr
 80053f0:	b510      	push	{r4, lr}
 80053f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053fa:	4291      	cmp	r1, r2
 80053fc:	d1f9      	bne.n	80053f2 <memcpy+0xe>
 80053fe:	bd10      	pop	{r4, pc}

08005400 <memset>:
 8005400:	4402      	add	r2, r0
 8005402:	4603      	mov	r3, r0
 8005404:	4293      	cmp	r3, r2
 8005406:	d100      	bne.n	800540a <memset+0xa>
 8005408:	4770      	bx	lr
 800540a:	f803 1b01 	strb.w	r1, [r3], #1
 800540e:	e7f9      	b.n	8005404 <memset+0x4>

08005410 <_init>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	bf00      	nop
 8005414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005416:	bc08      	pop	{r3}
 8005418:	469e      	mov	lr, r3
 800541a:	4770      	bx	lr

0800541c <_fini>:
 800541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541e:	bf00      	nop
 8005420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005422:	bc08      	pop	{r3}
 8005424:	469e      	mov	lr, r3
 8005426:	4770      	bx	lr
