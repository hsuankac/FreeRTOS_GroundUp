
27_InterractingWithDrivers-RxPackets.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800625c  0800625c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800625c  0800625c  0001625c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006264  08006264  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006264  08006264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800626c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a60  20000074  080062e0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ad4  080062e0  00024ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018906  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033da  00000000  00000000  000389aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0003bd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  0003d200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000431b  00000000  00000000  0003e540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fbb  00000000  00000000  0004285b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db50f  00000000  00000000  00059816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134d25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059e8  00000000  00000000  00134d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080061ac 	.word	0x080061ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080061ac 	.word	0x080061ac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	db0b      	blt.n	80005de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f003 021f 	and.w	r2, r3, #31
 80005cc:	4907      	ldr	r1, [pc, #28]	; (80005ec <__NVIC_EnableIRQ+0x38>)
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	095b      	lsrs	r3, r3, #5
 80005d4:	2001      	movs	r0, #1
 80005d6:	fa00 f202 	lsl.w	r2, r0, r2
 80005da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	e000e100 	.word	0xe000e100

080005f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	db0a      	blt.n	800061a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	b2da      	uxtb	r2, r3
 8000608:	490c      	ldr	r1, [pc, #48]	; (800063c <__NVIC_SetPriority+0x4c>)
 800060a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060e:	0112      	lsls	r2, r2, #4
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	440b      	add	r3, r1
 8000614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000618:	e00a      	b.n	8000630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4908      	ldr	r1, [pc, #32]	; (8000640 <__NVIC_SetPriority+0x50>)
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	f003 030f 	and.w	r3, r3, #15
 8000626:	3b04      	subs	r3, #4
 8000628:	0112      	lsls	r2, r2, #4
 800062a:	b2d2      	uxtb	r2, r2
 800062c:	440b      	add	r3, r1
 800062e:	761a      	strb	r2, [r3, #24]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000e100 	.word	0xe000e100
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <main>:

static SemaphoreHandle_t rxDone = NULL;


int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af02      	add	r7, sp, #8

  HAL_Init();
 800064a:	f000 fb97 	bl	8000d7c <HAL_Init>
  SystemClock_Config();
 800064e:	f000 f8f1 	bl	8000834 <SystemClock_Config>
  MX_GPIO_Init();
 8000652:	f000 f95d 	bl	8000910 <MX_GPIO_Init>
  USART2_UART_TX_Init();
 8000656:	f000 fb1f 	bl	8000c98 <USART2_UART_TX_Init>

  rxDone = xSemaphoreCreateBinary();
 800065a:	2203      	movs	r2, #3
 800065c:	2100      	movs	r1, #0
 800065e:	2001      	movs	r0, #1
 8000660:	f002 fbc0 	bl	8002de4 <xQueueGenericCreate>
 8000664:	4603      	mov	r3, r0
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <main+0x50>)
 8000668:	6013      	str	r3, [r2, #0]

  xTaskCreate(HandlerTask,
 800066a:	2300      	movs	r3, #0
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	2303      	movs	r3, #3
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2300      	movs	r3, #0
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	4908      	ldr	r1, [pc, #32]	; (8000698 <main+0x54>)
 8000678:	4808      	ldr	r0, [pc, #32]	; (800069c <main+0x58>)
 800067a:	f003 fa06 	bl	8003a8a <xTaskCreate>
			  STACK_SIZE,
			  NULL,
			  tskIDLE_PRIORITY + 3,
			  NULL);

  uart2_BytesReceived = xQueueCreate(10, sizeof(char));
 800067e:	2200      	movs	r2, #0
 8000680:	2101      	movs	r1, #1
 8000682:	200a      	movs	r0, #10
 8000684:	f002 fbae 	bl	8002de4 <xQueueGenericCreate>
 8000688:	4603      	mov	r3, r0
 800068a:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <main+0x5c>)
 800068c:	6013      	str	r3, [r2, #0]

  vTaskStartScheduler();
 800068e:	f003 fb41 	bl	8003d14 <vTaskStartScheduler>

  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x4e>
 8000694:	200000a4 	.word	0x200000a4
 8000698:	080061c4 	.word	0x080061c4
 800069c:	080007a9 	.word	0x080007a9
 80006a0:	20000090 	.word	0x20000090

080006a4 <start_rx_interrupt>:
  }

}

int32_t start_rx_interrupt(uint8_t* Buffer, uint_fast16_t Len)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
	if(!rxInProgress && (Buffer != NULL))
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <start_rx_interrupt+0x5c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11e      	bne.n	80006f4 <start_rx_interrupt+0x50>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d01b      	beq.n	80006f4 <start_rx_interrupt+0x50>
	{
		rxInProgress = 1;
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <start_rx_interrupt+0x5c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
		rxLen = Len;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <start_rx_interrupt+0x60>)
 80006c8:	801a      	strh	r2, [r3, #0]
		rxBuff = Buffer;
 80006ca:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <start_rx_interrupt+0x64>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6013      	str	r3, [r2, #0]
		rxItr = 0;
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <start_rx_interrupt+0x68>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	801a      	strh	r2, [r3, #0]
		USART2 -> CR1 |= 0x0020;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <start_rx_interrupt+0x6c>)
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <start_rx_interrupt+0x6c>)
 80006dc:	f043 0320 	orr.w	r3, r3, #32
 80006e0:	60d3      	str	r3, [r2, #12]
		NVIC_SetPriority(USART2_IRQn, 6);
 80006e2:	2106      	movs	r1, #6
 80006e4:	2026      	movs	r0, #38	; 0x26
 80006e6:	f7ff ff83 	bl	80005f0 <__NVIC_SetPriority>
		NVIC_EnableIRQ(USART2_IRQn);
 80006ea:	2026      	movs	r0, #38	; 0x26
 80006ec:	f7ff ff62 	bl	80005b4 <__NVIC_EnableIRQ>
		return 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	e001      	b.n	80006f8 <start_rx_interrupt+0x54>
	}
	return -1;
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000094 	.word	0x20000094
 8000704:	20000098 	.word	0x20000098
 8000708:	2000009c 	.word	0x2000009c
 800070c:	200000a0 	.word	0x200000a0
 8000710:	40004400 	.word	0x40004400

08000714 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
	if(USART2 -> SR & 0x0020)
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <USART2_IRQHandler+0x78>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f003 0320 	and.w	r3, r3, #32
 8000726:	2b00      	cmp	r3, #0
 8000728:	d021      	beq.n	800076e <USART2_IRQHandler+0x5a>
	{
		uint8_t tempVal = (uint8_t) USART2 -> DR;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <USART2_IRQHandler+0x78>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	71fb      	strb	r3, [r7, #7]

		if(rxInProgress)
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <USART2_IRQHandler+0x7c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d01a      	beq.n	800076e <USART2_IRQHandler+0x5a>
		{
			rxBuff[rxItr++] = tempVal;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <USART2_IRQHandler+0x80>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <USART2_IRQHandler+0x84>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	1c59      	adds	r1, r3, #1
 8000742:	b288      	uxth	r0, r1
 8000744:	4914      	ldr	r1, [pc, #80]	; (8000798 <USART2_IRQHandler+0x84>)
 8000746:	8008      	strh	r0, [r1, #0]
 8000748:	4413      	add	r3, r2
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	701a      	strb	r2, [r3, #0]
			if(rxItr == rxLen)
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <USART2_IRQHandler+0x84>)
 8000750:	881a      	ldrh	r2, [r3, #0]
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <USART2_IRQHandler+0x88>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	429a      	cmp	r2, r3
 8000758:	d109      	bne.n	800076e <USART2_IRQHandler+0x5a>
			{
				rxInProgress = 0;
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <USART2_IRQHandler+0x7c>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
				xSemaphoreGiveFromISR(rxDone, &xHigherPriorityTaskWoken);
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <USART2_IRQHandler+0x8c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	463a      	mov	r2, r7
 8000766:	4611      	mov	r1, r2
 8000768:	4618      	mov	r0, r3
 800076a:	f002 fd32 	bl	80031d2 <xQueueGiveFromISR>
			}
		}
	}

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d007      	beq.n	8000784 <USART2_IRQHandler+0x70>
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <USART2_IRQHandler+0x90>)
 8000776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	f3bf 8f4f 	dsb	sy
 8000780:	f3bf 8f6f 	isb	sy
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40004400 	.word	0x40004400
 8000790:	20000094 	.word	0x20000094
 8000794:	2000009c 	.word	0x2000009c
 8000798:	200000a0 	.word	0x200000a0
 800079c:	20000098 	.word	0x20000098
 80007a0:	200000a4 	.word	0x200000a4
 80007a4:	e000ed04 	.word	0xe000ed04

080007a8 <HandlerTask>:

uint8_t rxData[EXPECTED_PKT_LEN];
char rxCode[50] = {0};

void HandlerTask(void *pvParameters)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	USART2_UART_RX_Init();
 80007b0:	f000 fa96 	bl	8000ce0 <USART2_UART_RX_Init>

	for(int i = 0; i < EXPECTED_PKT_LEN; i++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	e007      	b.n	80007ca <HandlerTask+0x22>
	{
		rxData[i] = 0;
 80007ba:	4a17      	ldr	r2, [pc, #92]	; (8000818 <HandlerTask+0x70>)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	4413      	add	r3, r2
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < EXPECTED_PKT_LEN; i++)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	3301      	adds	r3, #1
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	ddf4      	ble.n	80007ba <HandlerTask+0x12>
	}

	const TickType_t timeout = pdMS_TO_TICKS(5000);
 80007d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80007d4:	60bb      	str	r3, [r7, #8]

	while(1)
	{
		start_rx_interrupt(rxData, EXPECTED_PKT_LEN);
 80007d6:	2105      	movs	r1, #5
 80007d8:	480f      	ldr	r0, [pc, #60]	; (8000818 <HandlerTask+0x70>)
 80007da:	f7ff ff63 	bl	80006a4 <start_rx_interrupt>

		if(xSemaphoreTake(rxDone, timeout) == pdPASS)
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HandlerTask+0x74>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fe61 	bl	80034ac <xQueueSemaphoreTake>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d10d      	bne.n	800080c <HandlerTask+0x64>
		{
			if(EXPECTED_PKT_LEN == rxItr)
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <HandlerTask+0x78>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	2b05      	cmp	r3, #5
 80007f6:	d104      	bne.n	8000802 <HandlerTask+0x5a>
			{
				sprintf(rxCode, "received");
 80007f8:	490a      	ldr	r1, [pc, #40]	; (8000824 <HandlerTask+0x7c>)
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <HandlerTask+0x80>)
 80007fc:	f005 f876 	bl	80058ec <siprintf>
 8000800:	e7e9      	b.n	80007d6 <HandlerTask+0x2e>
			}
			else
			{
				sprintf(rxCode, "Length mismatch");
 8000802:	490a      	ldr	r1, [pc, #40]	; (800082c <HandlerTask+0x84>)
 8000804:	4808      	ldr	r0, [pc, #32]	; (8000828 <HandlerTask+0x80>)
 8000806:	f005 f871 	bl	80058ec <siprintf>
 800080a:	e7e4      	b.n	80007d6 <HandlerTask+0x2e>
			}
		}
		else
		{
			sprintf(rxCode, "Timeout");
 800080c:	4908      	ldr	r1, [pc, #32]	; (8000830 <HandlerTask+0x88>)
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <HandlerTask+0x80>)
 8000810:	f005 f86c 	bl	80058ec <siprintf>
		start_rx_interrupt(rxData, EXPECTED_PKT_LEN);
 8000814:	e7df      	b.n	80007d6 <HandlerTask+0x2e>
 8000816:	bf00      	nop
 8000818:	200000a8 	.word	0x200000a8
 800081c:	200000a4 	.word	0x200000a4
 8000820:	200000a0 	.word	0x200000a0
 8000824:	080061d4 	.word	0x080061d4
 8000828:	200000b0 	.word	0x200000b0
 800082c:	080061e0 	.word	0x080061e0
 8000830:	080061f0 	.word	0x080061f0

08000834 <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b094      	sub	sp, #80	; 0x50
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2234      	movs	r2, #52	; 0x34
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f005 f84a 	bl	80058dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <SystemClock_Config+0xd4>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	4a29      	ldr	r2, [pc, #164]	; (8000908 <SystemClock_Config+0xd4>)
 8000862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000866:	6413      	str	r3, [r2, #64]	; 0x40
 8000868:	4b27      	ldr	r3, [pc, #156]	; (8000908 <SystemClock_Config+0xd4>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000874:	2300      	movs	r3, #0
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	4b24      	ldr	r3, [pc, #144]	; (800090c <SystemClock_Config+0xd8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000880:	4a22      	ldr	r2, [pc, #136]	; (800090c <SystemClock_Config+0xd8>)
 8000882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	4b20      	ldr	r3, [pc, #128]	; (800090c <SystemClock_Config+0xd8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000894:	2302      	movs	r3, #2
 8000896:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000898:	2301      	movs	r3, #1
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089c:	2310      	movs	r3, #16
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a0:	2302      	movs	r3, #2
 80008a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a4:	2300      	movs	r3, #0
 80008a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008a8:	2310      	movs	r3, #16
 80008aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008b2:	2304      	movs	r3, #4
 80008b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 f8a8 	bl	8001a18 <HAL_RCC_OscConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ce:	f000 f88f 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	230f      	movs	r3, #15
 80008d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	2302      	movs	r3, #2
 80008d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2102      	movs	r1, #2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fd16 	bl	8001320 <HAL_RCC_ClockConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008fa:	f000 f879 	bl	80009f0 <Error_Handler>
  }
}
 80008fe:	bf00      	nop
 8000900:	3750      	adds	r7, #80	; 0x50
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40007000 	.word	0x40007000

08000910 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <MX_GPIO_Init+0xb4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a25      	ldr	r2, [pc, #148]	; (80009c4 <MX_GPIO_Init+0xb4>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <MX_GPIO_Init+0xb4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_GPIO_Init+0xb4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a1e      	ldr	r2, [pc, #120]	; (80009c4 <MX_GPIO_Init+0xb4>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_GPIO_Init+0xb4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_GPIO_Init+0xb4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <MX_GPIO_Init+0xb4>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_GPIO_Init+0xb4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_GPIO_Init+0xb4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <MX_GPIO_Init+0xb4>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_GPIO_Init+0xb4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2120      	movs	r1, #32
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <MX_GPIO_Init+0xb8>)
 800099c:	f000 fca6 	bl	80012ec <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = LD2_Pin;
 80009a0:	2320      	movs	r3, #32
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_GPIO_Init+0xb8>)
 80009b8:	f000 fb04 	bl	8000fc4 <HAL_GPIO_Init>

}
 80009bc:	bf00      	nop
 80009be:	3728      	adds	r7, #40	; 0x28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000

080009cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d101      	bne.n	80009e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009de:	f000 f9ef 	bl	8000dc0 <HAL_IncTick>
  }

}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40010000 	.word	0x40010000

080009f0 <Error_Handler>:

void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  __disable_irq();
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_MspInit+0x54>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <HAL_MspInit+0x54>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x54>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_MspInit+0x54>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_MspInit+0x54>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_MspInit+0x54>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	f06f 0001 	mvn.w	r0, #1
 8000a42:	f000 fa95 	bl	8000f70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <HAL_UART_MspInit+0x84>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12b      	bne.n	8000ace <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <HAL_UART_MspInit+0x88>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a17      	ldr	r2, [pc, #92]	; (8000adc <HAL_UART_MspInit+0x88>)
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_UART_MspInit+0x88>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_UART_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <HAL_UART_MspInit+0x88>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_UART_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aae:	230c      	movs	r3, #12
 8000ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000abe:	2307      	movs	r3, #7
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <HAL_UART_MspInit+0x8c>)
 8000aca:	f000 fa7b 	bl	8000fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	; 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40004400 	.word	0x40004400
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08c      	sub	sp, #48	; 0x30
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <HAL_InitTick+0xd0>)
 8000afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afc:	4a2d      	ldr	r2, [pc, #180]	; (8000bb4 <HAL_InitTick+0xd0>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6453      	str	r3, [r2, #68]	; 0x44
 8000b04:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <HAL_InitTick+0xd0>)
 8000b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b10:	f107 020c 	add.w	r2, r7, #12
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 fd1a 	bl	8001554 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b20:	f000 fd04 	bl	800152c <HAL_RCC_GetPCLK2Freq>
 8000b24:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b28:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <HAL_InitTick+0xd4>)
 8000b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2e:	0c9b      	lsrs	r3, r3, #18
 8000b30:	3b01      	subs	r3, #1
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b34:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <HAL_InitTick+0xd8>)
 8000b36:	4a22      	ldr	r2, [pc, #136]	; (8000bc0 <HAL_InitTick+0xdc>)
 8000b38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b3a:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <HAL_InitTick+0xd8>)
 8000b3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b40:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b42:	4a1e      	ldr	r2, [pc, #120]	; (8000bbc <HAL_InitTick+0xd8>)
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <HAL_InitTick+0xd8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4e:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <HAL_InitTick+0xd8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <HAL_InitTick+0xd8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b5a:	4818      	ldr	r0, [pc, #96]	; (8000bbc <HAL_InitTick+0xd8>)
 8000b5c:	f001 f9fa 	bl	8001f54 <HAL_TIM_Base_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d11b      	bne.n	8000ba6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b6e:	4813      	ldr	r0, [pc, #76]	; (8000bbc <HAL_InitTick+0xd8>)
 8000b70:	f001 fa4a 	bl	8002008 <HAL_TIM_Base_Start_IT>
 8000b74:	4603      	mov	r3, r0
 8000b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d111      	bne.n	8000ba6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b82:	2019      	movs	r0, #25
 8000b84:	f000 fa10 	bl	8000fa8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b0f      	cmp	r3, #15
 8000b8c:	d808      	bhi.n	8000ba0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	2019      	movs	r0, #25
 8000b94:	f000 f9ec 	bl	8000f70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b98:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <HAL_InitTick+0xe0>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
 8000b9e:	e002      	b.n	8000ba6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3730      	adds	r7, #48	; 0x30
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	431bde83 	.word	0x431bde83
 8000bbc:	200000e4 	.word	0x200000e4
 8000bc0:	40010000 	.word	0x40010000
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bfa:	f001 fa75 	bl	80020e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000e4 	.word	0x200000e4

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f004 fe18 	bl	800586c <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20020000 	.word	0x20020000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	2000012c 	.word	0x2000012c
 8000c70:	20004ad8 	.word	0x20004ad8

08000c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <USART2_UART_TX_Init>:
int __io_putchar(int ch);

UART_HandleTypeDef huart2;

void USART2_UART_TX_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <USART2_UART_TX_Init+0x40>)
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <USART2_UART_TX_Init+0x44>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <USART2_UART_TX_Init+0x40>)
 8000ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <USART2_UART_TX_Init+0x40>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <USART2_UART_TX_Init+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <USART2_UART_TX_Init+0x40>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <USART2_UART_TX_Init+0x40>)
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <USART2_UART_TX_Init+0x40>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <USART2_UART_TX_Init+0x40>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cce:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <USART2_UART_TX_Init+0x40>)
 8000cd0:	f001 fbee 	bl	80024b0 <HAL_UART_Init>
  {
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000130 	.word	0x20000130
 8000cdc:	40004400 	.word	0x40004400

08000ce0 <USART2_UART_RX_Init>:

void USART2_UART_RX_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <USART2_UART_RX_Init+0x40>)
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <USART2_UART_RX_Init+0x44>)
 8000ce8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <USART2_UART_RX_Init+0x40>)
 8000cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <USART2_UART_RX_Init+0x40>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <USART2_UART_RX_Init+0x40>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <USART2_UART_RX_Init+0x40>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <USART2_UART_RX_Init+0x40>)
 8000d06:	2204      	movs	r2, #4
 8000d08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <USART2_UART_RX_Init+0x40>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <USART2_UART_RX_Init+0x40>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d16:	4802      	ldr	r0, [pc, #8]	; (8000d20 <USART2_UART_RX_Init+0x40>)
 8000d18:	f001 fbca 	bl	80024b0 <HAL_UART_Init>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000130 	.word	0x20000130
 8000d24:	40004400 	.word	0x40004400

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d44:	4c0b      	ldr	r4, [pc, #44]	; (8000d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d52:	f7ff ff8f 	bl	8000c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f004 fd8f 	bl	8005878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fc73 	bl	8000644 <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d6c:	0800626c 	.word	0x0800626c
  ldr r2, =_sbss
 8000d70:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d74:	20004ad4 	.word	0x20004ad4

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <HAL_Init+0x40>)
 8000d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_Init+0x40>)
 8000d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_Init+0x40>)
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f8d8 	bl	8000f5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	200f      	movs	r0, #15
 8000dac:	f7ff fe9a 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fe24 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023c00 	.word	0x40023c00

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000174 	.word	0x20000174

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000174 	.word	0x20000174

08000e00 <__NVIC_SetPriorityGrouping>:
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_EnableIRQ>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db0b      	blt.n	8000e8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 021f 	and.w	r2, r3, #31
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <__NVIC_EnableIRQ+0x38>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	2001      	movs	r0, #1
 8000e86:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_SetPriority>:
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db0a      	blt.n	8000eca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	490c      	ldr	r1, [pc, #48]	; (8000eec <__NVIC_SetPriority+0x4c>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	0112      	lsls	r2, r2, #4
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ec8:	e00a      	b.n	8000ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <__NVIC_SetPriority+0x50>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	3b04      	subs	r3, #4
 8000ed8:	0112      	lsls	r2, r2, #4
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	440b      	add	r3, r1
 8000ede:	761a      	strb	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f1c3 0307 	rsb	r3, r3, #7
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	bf28      	it	cs
 8000f12:	2304      	movcs	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	d902      	bls.n	8000f24 <NVIC_EncodePriority+0x30>
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3b03      	subs	r3, #3
 8000f22:	e000      	b.n	8000f26 <NVIC_EncodePriority+0x32>
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43d9      	mvns	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	4313      	orrs	r3, r2
         );
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ff4c 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f82:	f7ff ff61 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000f86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	68b9      	ldr	r1, [r7, #8]
 8000f8c:	6978      	ldr	r0, [r7, #20]
 8000f8e:	f7ff ffb1 	bl	8000ef4 <NVIC_EncodePriority>
 8000f92:	4602      	mov	r2, r0
 8000f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff80 	bl	8000ea0 <__NVIC_SetPriority>
}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff54 	bl	8000e64 <__NVIC_EnableIRQ>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
 8000fde:	e165      	b.n	80012ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	f040 8154 	bne.w	80012a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d005      	beq.n	8001016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001012:	2b02      	cmp	r3, #2
 8001014:	d130      	bne.n	8001078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	f003 0201 	and.w	r2, r3, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b03      	cmp	r3, #3
 8001082:	d017      	beq.n	80010b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d123      	bne.n	8001108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3208      	adds	r2, #8
 8001102:	69b9      	ldr	r1, [r7, #24]
 8001104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0203 	and.w	r2, r3, #3
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80ae 	beq.w	80012a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b5d      	ldr	r3, [pc, #372]	; (80012c4 <HAL_GPIO_Init+0x300>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a5c      	ldr	r2, [pc, #368]	; (80012c4 <HAL_GPIO_Init+0x300>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b5a      	ldr	r3, [pc, #360]	; (80012c4 <HAL_GPIO_Init+0x300>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001166:	4a58      	ldr	r2, [pc, #352]	; (80012c8 <HAL_GPIO_Init+0x304>)
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4f      	ldr	r2, [pc, #316]	; (80012cc <HAL_GPIO_Init+0x308>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d025      	beq.n	80011de <HAL_GPIO_Init+0x21a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4e      	ldr	r2, [pc, #312]	; (80012d0 <HAL_GPIO_Init+0x30c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d01f      	beq.n	80011da <HAL_GPIO_Init+0x216>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4d      	ldr	r2, [pc, #308]	; (80012d4 <HAL_GPIO_Init+0x310>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x212>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4c      	ldr	r2, [pc, #304]	; (80012d8 <HAL_GPIO_Init+0x314>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x20e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4b      	ldr	r2, [pc, #300]	; (80012dc <HAL_GPIO_Init+0x318>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x20a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4a      	ldr	r2, [pc, #296]	; (80012e0 <HAL_GPIO_Init+0x31c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x206>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a49      	ldr	r2, [pc, #292]	; (80012e4 <HAL_GPIO_Init+0x320>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x202>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00c      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e00a      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011ca:	2305      	movs	r3, #5
 80011cc:	e008      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011ce:	2304      	movs	r3, #4
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e004      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011de:	2300      	movs	r3, #0
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	f002 0203 	and.w	r2, r2, #3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4093      	lsls	r3, r2
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f0:	4935      	ldr	r1, [pc, #212]	; (80012c8 <HAL_GPIO_Init+0x304>)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fe:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <HAL_GPIO_Init+0x324>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001222:	4a31      	ldr	r2, [pc, #196]	; (80012e8 <HAL_GPIO_Init+0x324>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001228:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <HAL_GPIO_Init+0x324>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800124c:	4a26      	ldr	r2, [pc, #152]	; (80012e8 <HAL_GPIO_Init+0x324>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <HAL_GPIO_Init+0x324>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <HAL_GPIO_Init+0x324>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_GPIO_Init+0x324>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a0:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <HAL_GPIO_Init+0x324>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	f67f ae96 	bls.w	8000fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40013800 	.word	0x40013800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021400 	.word	0x40021400
 80012e4:	40021800 	.word	0x40021800
 80012e8:	40013c00 	.word	0x40013c00

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0cc      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001334:	4b68      	ldr	r3, [pc, #416]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d90c      	bls.n	800135c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001342:	4b65      	ldr	r3, [pc, #404]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800134a:	4b63      	ldr	r3, [pc, #396]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d001      	beq.n	800135c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0b8      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d020      	beq.n	80013aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001374:	4b59      	ldr	r3, [pc, #356]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	4a58      	ldr	r2, [pc, #352]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800137a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800137e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800138c:	4b53      	ldr	r3, [pc, #332]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4a52      	ldr	r2, [pc, #328]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001398:	4b50      	ldr	r3, [pc, #320]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	494d      	ldr	r1, [pc, #308]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d044      	beq.n	8001440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d107      	bne.n	80013ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013be:	4b47      	ldr	r3, [pc, #284]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d119      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e07f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d003      	beq.n	80013de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013de:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e06f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ee:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e067      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013fe:	4b37      	ldr	r3, [pc, #220]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f023 0203 	bic.w	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4934      	ldr	r1, [pc, #208]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800140c:	4313      	orrs	r3, r2
 800140e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001410:	f7ff fcea 	bl	8000de8 <HAL_GetTick>
 8001414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001416:	e00a      	b.n	800142e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001418:	f7ff fce6 	bl	8000de8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	; 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e04f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 020c 	and.w	r2, r3, #12
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	429a      	cmp	r2, r3
 800143e:	d1eb      	bne.n	8001418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 030f 	and.w	r3, r3, #15
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d20c      	bcs.n	8001468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e032      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	d008      	beq.n	8001486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	4916      	ldr	r1, [pc, #88]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	4313      	orrs	r3, r2
 8001484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d009      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	490e      	ldr	r1, [pc, #56]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014a6:	f000 f887 	bl	80015b8 <HAL_RCC_GetSysClockFreq>
 80014aa:	4602      	mov	r2, r0
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	490a      	ldr	r1, [pc, #40]	; (80014e0 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	5ccb      	ldrb	r3, [r1, r3]
 80014ba:	fa22 f303 	lsr.w	r3, r2, r3
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fb0c 	bl	8000ae4 <HAL_InitTick>

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023c00 	.word	0x40023c00
 80014dc:	40023800 	.word	0x40023800
 80014e0:	08006210 	.word	0x08006210
 80014e4:	20000000 	.word	0x20000000
 80014e8:	20000004 	.word	0x20000004

080014ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_RCC_GetHCLKFreq+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000000 	.word	0x20000000

08001504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001508:	f7ff fff0 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 800150c:	4602      	mov	r2, r0
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	0a9b      	lsrs	r3, r3, #10
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	4903      	ldr	r1, [pc, #12]	; (8001528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800151a:	5ccb      	ldrb	r3, [r1, r3]
 800151c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	08006220 	.word	0x08006220

0800152c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001530:	f7ff ffdc 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 8001534:	4602      	mov	r2, r0
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	0b5b      	lsrs	r3, r3, #13
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	4903      	ldr	r1, [pc, #12]	; (8001550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001542:	5ccb      	ldrb	r3, [r1, r3]
 8001544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001548:	4618      	mov	r0, r3
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	08006220 	.word	0x08006220

08001554 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	220f      	movs	r2, #15
 8001562:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 0203 	and.w	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_RCC_GetClockConfig+0x5c>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_RCC_GetClockConfig+0x5c>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	08db      	lsrs	r3, r3, #3
 800158e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <HAL_RCC_GetClockConfig+0x60>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 020f 	and.w	r2, r3, #15
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	601a      	str	r2, [r3, #0]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40023c00 	.word	0x40023c00

080015b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015bc:	b0ae      	sub	sp, #184	; 0xb8
 80015be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015de:	4bcb      	ldr	r3, [pc, #812]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	f200 8206 	bhi.w	80019f8 <HAL_RCC_GetSysClockFreq+0x440>
 80015ec:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f2:	bf00      	nop
 80015f4:	08001629 	.word	0x08001629
 80015f8:	080019f9 	.word	0x080019f9
 80015fc:	080019f9 	.word	0x080019f9
 8001600:	080019f9 	.word	0x080019f9
 8001604:	08001631 	.word	0x08001631
 8001608:	080019f9 	.word	0x080019f9
 800160c:	080019f9 	.word	0x080019f9
 8001610:	080019f9 	.word	0x080019f9
 8001614:	08001639 	.word	0x08001639
 8001618:	080019f9 	.word	0x080019f9
 800161c:	080019f9 	.word	0x080019f9
 8001620:	080019f9 	.word	0x080019f9
 8001624:	08001829 	.word	0x08001829
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001628:	4bb9      	ldr	r3, [pc, #740]	; (8001910 <HAL_RCC_GetSysClockFreq+0x358>)
 800162a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800162e:	e1e7      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001630:	4bb8      	ldr	r3, [pc, #736]	; (8001914 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001636:	e1e3      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001638:	4bb4      	ldr	r3, [pc, #720]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001644:	4bb1      	ldr	r3, [pc, #708]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d071      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001650:	4bae      	ldr	r3, [pc, #696]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	099b      	lsrs	r3, r3, #6
 8001656:	2200      	movs	r2, #0
 8001658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800165c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001660:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001668:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800166c:	2300      	movs	r3, #0
 800166e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001672:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001676:	4622      	mov	r2, r4
 8001678:	462b      	mov	r3, r5
 800167a:	f04f 0000 	mov.w	r0, #0
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	0159      	lsls	r1, r3, #5
 8001684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001688:	0150      	lsls	r0, r2, #5
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4621      	mov	r1, r4
 8001690:	1a51      	subs	r1, r2, r1
 8001692:	6439      	str	r1, [r7, #64]	; 0x40
 8001694:	4629      	mov	r1, r5
 8001696:	eb63 0301 	sbc.w	r3, r3, r1
 800169a:	647b      	str	r3, [r7, #68]	; 0x44
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80016a8:	4649      	mov	r1, r9
 80016aa:	018b      	lsls	r3, r1, #6
 80016ac:	4641      	mov	r1, r8
 80016ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016b2:	4641      	mov	r1, r8
 80016b4:	018a      	lsls	r2, r1, #6
 80016b6:	4641      	mov	r1, r8
 80016b8:	1a51      	subs	r1, r2, r1
 80016ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80016bc:	4649      	mov	r1, r9
 80016be:	eb63 0301 	sbc.w	r3, r3, r1
 80016c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80016d0:	4649      	mov	r1, r9
 80016d2:	00cb      	lsls	r3, r1, #3
 80016d4:	4641      	mov	r1, r8
 80016d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016da:	4641      	mov	r1, r8
 80016dc:	00ca      	lsls	r2, r1, #3
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	4603      	mov	r3, r0
 80016e4:	4622      	mov	r2, r4
 80016e6:	189b      	adds	r3, r3, r2
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
 80016ea:	462b      	mov	r3, r5
 80016ec:	460a      	mov	r2, r1
 80016ee:	eb42 0303 	adc.w	r3, r2, r3
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001700:	4629      	mov	r1, r5
 8001702:	024b      	lsls	r3, r1, #9
 8001704:	4621      	mov	r1, r4
 8001706:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800170a:	4621      	mov	r1, r4
 800170c:	024a      	lsls	r2, r1, #9
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001716:	2200      	movs	r2, #0
 8001718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800171c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001720:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001724:	f7fe fdc4 	bl	80002b0 <__aeabi_uldivmod>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4613      	mov	r3, r2
 800172e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001732:	e067      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001734:	4b75      	ldr	r3, [pc, #468]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	099b      	lsrs	r3, r3, #6
 800173a:	2200      	movs	r2, #0
 800173c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001740:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001744:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800174c:	67bb      	str	r3, [r7, #120]	; 0x78
 800174e:	2300      	movs	r3, #0
 8001750:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001752:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001756:	4622      	mov	r2, r4
 8001758:	462b      	mov	r3, r5
 800175a:	f04f 0000 	mov.w	r0, #0
 800175e:	f04f 0100 	mov.w	r1, #0
 8001762:	0159      	lsls	r1, r3, #5
 8001764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001768:	0150      	lsls	r0, r2, #5
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4621      	mov	r1, r4
 8001770:	1a51      	subs	r1, r2, r1
 8001772:	62b9      	str	r1, [r7, #40]	; 0x28
 8001774:	4629      	mov	r1, r5
 8001776:	eb63 0301 	sbc.w	r3, r3, r1
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001788:	4649      	mov	r1, r9
 800178a:	018b      	lsls	r3, r1, #6
 800178c:	4641      	mov	r1, r8
 800178e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001792:	4641      	mov	r1, r8
 8001794:	018a      	lsls	r2, r1, #6
 8001796:	4641      	mov	r1, r8
 8001798:	ebb2 0a01 	subs.w	sl, r2, r1
 800179c:	4649      	mov	r1, r9
 800179e:	eb63 0b01 	sbc.w	fp, r3, r1
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017b6:	4692      	mov	sl, r2
 80017b8:	469b      	mov	fp, r3
 80017ba:	4623      	mov	r3, r4
 80017bc:	eb1a 0303 	adds.w	r3, sl, r3
 80017c0:	623b      	str	r3, [r7, #32]
 80017c2:	462b      	mov	r3, r5
 80017c4:	eb4b 0303 	adc.w	r3, fp, r3
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017d6:	4629      	mov	r1, r5
 80017d8:	028b      	lsls	r3, r1, #10
 80017da:	4621      	mov	r1, r4
 80017dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017e0:	4621      	mov	r1, r4
 80017e2:	028a      	lsls	r2, r1, #10
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017ec:	2200      	movs	r2, #0
 80017ee:	673b      	str	r3, [r7, #112]	; 0x70
 80017f0:	677a      	str	r2, [r7, #116]	; 0x74
 80017f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80017f6:	f7fe fd5b 	bl	80002b0 <__aeabi_uldivmod>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4613      	mov	r3, r2
 8001800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001804:	4b41      	ldr	r3, [pc, #260]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	3301      	adds	r3, #1
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001816:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800181a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001826:	e0eb      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001828:	4b38      	ldr	r3, [pc, #224]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001830:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d06b      	beq.n	8001918 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001840:	4b32      	ldr	r3, [pc, #200]	; (800190c <HAL_RCC_GetSysClockFreq+0x354>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	099b      	lsrs	r3, r3, #6
 8001846:	2200      	movs	r2, #0
 8001848:	66bb      	str	r3, [r7, #104]	; 0x68
 800184a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800184c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800184e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001852:	663b      	str	r3, [r7, #96]	; 0x60
 8001854:	2300      	movs	r3, #0
 8001856:	667b      	str	r3, [r7, #100]	; 0x64
 8001858:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800185c:	4622      	mov	r2, r4
 800185e:	462b      	mov	r3, r5
 8001860:	f04f 0000 	mov.w	r0, #0
 8001864:	f04f 0100 	mov.w	r1, #0
 8001868:	0159      	lsls	r1, r3, #5
 800186a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800186e:	0150      	lsls	r0, r2, #5
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4621      	mov	r1, r4
 8001876:	1a51      	subs	r1, r2, r1
 8001878:	61b9      	str	r1, [r7, #24]
 800187a:	4629      	mov	r1, r5
 800187c:	eb63 0301 	sbc.w	r3, r3, r1
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800188e:	4659      	mov	r1, fp
 8001890:	018b      	lsls	r3, r1, #6
 8001892:	4651      	mov	r1, sl
 8001894:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001898:	4651      	mov	r1, sl
 800189a:	018a      	lsls	r2, r1, #6
 800189c:	4651      	mov	r1, sl
 800189e:	ebb2 0801 	subs.w	r8, r2, r1
 80018a2:	4659      	mov	r1, fp
 80018a4:	eb63 0901 	sbc.w	r9, r3, r1
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018bc:	4690      	mov	r8, r2
 80018be:	4699      	mov	r9, r3
 80018c0:	4623      	mov	r3, r4
 80018c2:	eb18 0303 	adds.w	r3, r8, r3
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	462b      	mov	r3, r5
 80018ca:	eb49 0303 	adc.w	r3, r9, r3
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018dc:	4629      	mov	r1, r5
 80018de:	024b      	lsls	r3, r1, #9
 80018e0:	4621      	mov	r1, r4
 80018e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018e6:	4621      	mov	r1, r4
 80018e8:	024a      	lsls	r2, r1, #9
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018f2:	2200      	movs	r2, #0
 80018f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80018f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80018f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018fc:	f7fe fcd8 	bl	80002b0 <__aeabi_uldivmod>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4613      	mov	r3, r2
 8001906:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800190a:	e065      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0x420>
 800190c:	40023800 	.word	0x40023800
 8001910:	00f42400 	.word	0x00f42400
 8001914:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001918:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x458>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	099b      	lsrs	r3, r3, #6
 800191e:	2200      	movs	r2, #0
 8001920:	4618      	mov	r0, r3
 8001922:	4611      	mov	r1, r2
 8001924:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001928:	653b      	str	r3, [r7, #80]	; 0x50
 800192a:	2300      	movs	r3, #0
 800192c:	657b      	str	r3, [r7, #84]	; 0x54
 800192e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001932:	4642      	mov	r2, r8
 8001934:	464b      	mov	r3, r9
 8001936:	f04f 0000 	mov.w	r0, #0
 800193a:	f04f 0100 	mov.w	r1, #0
 800193e:	0159      	lsls	r1, r3, #5
 8001940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001944:	0150      	lsls	r0, r2, #5
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4641      	mov	r1, r8
 800194c:	1a51      	subs	r1, r2, r1
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	4649      	mov	r1, r9
 8001952:	eb63 0301 	sbc.w	r3, r3, r1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001964:	4659      	mov	r1, fp
 8001966:	018b      	lsls	r3, r1, #6
 8001968:	4651      	mov	r1, sl
 800196a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800196e:	4651      	mov	r1, sl
 8001970:	018a      	lsls	r2, r1, #6
 8001972:	4651      	mov	r1, sl
 8001974:	1a54      	subs	r4, r2, r1
 8001976:	4659      	mov	r1, fp
 8001978:	eb63 0501 	sbc.w	r5, r3, r1
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	00eb      	lsls	r3, r5, #3
 8001986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800198a:	00e2      	lsls	r2, r4, #3
 800198c:	4614      	mov	r4, r2
 800198e:	461d      	mov	r5, r3
 8001990:	4643      	mov	r3, r8
 8001992:	18e3      	adds	r3, r4, r3
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	464b      	mov	r3, r9
 8001998:	eb45 0303 	adc.w	r3, r5, r3
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019aa:	4629      	mov	r1, r5
 80019ac:	028b      	lsls	r3, r1, #10
 80019ae:	4621      	mov	r1, r4
 80019b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019b4:	4621      	mov	r1, r4
 80019b6:	028a      	lsls	r2, r1, #10
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019c0:	2200      	movs	r2, #0
 80019c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80019c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80019ca:	f7fe fc71 	bl	80002b0 <__aeabi_uldivmod>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4613      	mov	r3, r2
 80019d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x458>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	0f1b      	lsrs	r3, r3, #28
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80019e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019f6:	e003      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x45c>)
 80019fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	37b8      	adds	r7, #184	; 0xb8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	00f42400 	.word	0x00f42400

08001a18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e28d      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 8083 	beq.w	8001b3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a38:	4b94      	ldr	r3, [pc, #592]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d019      	beq.n	8001a78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a44:	4b91      	ldr	r3, [pc, #580]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a50:	4b8e      	ldr	r3, [pc, #568]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a5c:	d00c      	beq.n	8001a78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a5e:	4b8b      	ldr	r3, [pc, #556]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a66:	2b0c      	cmp	r3, #12
 8001a68:	d112      	bne.n	8001a90 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6a:	4b88      	ldr	r3, [pc, #544]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a76:	d10b      	bne.n	8001a90 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	4b84      	ldr	r3, [pc, #528]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d05b      	beq.n	8001b3c <HAL_RCC_OscConfig+0x124>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d157      	bne.n	8001b3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e25a      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a98:	d106      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x90>
 8001a9a:	4b7c      	ldr	r3, [pc, #496]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a7b      	ldr	r2, [pc, #492]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e01d      	b.n	8001ae4 <HAL_RCC_OscConfig+0xcc>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab0:	d10c      	bne.n	8001acc <HAL_RCC_OscConfig+0xb4>
 8001ab2:	4b76      	ldr	r3, [pc, #472]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a75      	ldr	r2, [pc, #468]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	4b73      	ldr	r3, [pc, #460]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a72      	ldr	r2, [pc, #456]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	e00b      	b.n	8001ae4 <HAL_RCC_OscConfig+0xcc>
 8001acc:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a6e      	ldr	r2, [pc, #440]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	4b6c      	ldr	r3, [pc, #432]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a6b      	ldr	r2, [pc, #428]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d013      	beq.n	8001b14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff f97c 	bl	8000de8 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af4:	f7ff f978 	bl	8000de8 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e21f      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b06:	4b61      	ldr	r3, [pc, #388]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0xdc>
 8001b12:	e014      	b.n	8001b3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff f968 	bl	8000de8 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b1c:	f7ff f964 	bl	8000de8 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b64      	cmp	r3, #100	; 0x64
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e20b      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2e:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x104>
 8001b3a:	e000      	b.n	8001b3e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d06f      	beq.n	8001c2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b4a:	4b50      	ldr	r3, [pc, #320]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d017      	beq.n	8001b86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b56:	4b4d      	ldr	r3, [pc, #308]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d105      	bne.n	8001b6e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b62:	4b4a      	ldr	r3, [pc, #296]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00b      	beq.n	8001b86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b6e:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d11c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7a:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d116      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <HAL_RCC_OscConfig+0x186>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e1d3      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9e:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4937      	ldr	r1, [pc, #220]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb2:	e03a      	b.n	8001c2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d020      	beq.n	8001bfe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bbc:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <HAL_RCC_OscConfig+0x278>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc2:	f7ff f911 	bl	8000de8 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bca:	f7ff f90d 	bl	8000de8 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e1b4      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be8:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4925      	ldr	r1, [pc, #148]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]
 8001bfc:	e015      	b.n	8001c2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_RCC_OscConfig+0x278>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff f8f0 	bl	8000de8 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7ff f8ec 	bl	8000de8 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e193      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d036      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d016      	beq.n	8001c6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c44:	f7ff f8d0 	bl	8000de8 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7ff f8cc 	bl	8000de8 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e173      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x234>
 8001c6a:	e01b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_RCC_OscConfig+0x27c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c72:	f7ff f8b9 	bl	8000de8 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c78:	e00e      	b.n	8001c98 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c7a:	f7ff f8b5 	bl	8000de8 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d907      	bls.n	8001c98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e15c      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	42470000 	.word	0x42470000
 8001c94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c98:	4b8a      	ldr	r3, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1ea      	bne.n	8001c7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8097 	beq.w	8001de0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb6:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10f      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	4b7f      	ldr	r3, [pc, #508]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a7e      	ldr	r2, [pc, #504]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd2:	4b7c      	ldr	r3, [pc, #496]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce2:	4b79      	ldr	r3, [pc, #484]	; (8001ec8 <HAL_RCC_OscConfig+0x4b0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d118      	bne.n	8001d20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cee:	4b76      	ldr	r3, [pc, #472]	; (8001ec8 <HAL_RCC_OscConfig+0x4b0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a75      	ldr	r2, [pc, #468]	; (8001ec8 <HAL_RCC_OscConfig+0x4b0>)
 8001cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f875 	bl	8000de8 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d02:	f7ff f871 	bl	8000de8 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e118      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d14:	4b6c      	ldr	r3, [pc, #432]	; (8001ec8 <HAL_RCC_OscConfig+0x4b0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d106      	bne.n	8001d36 <HAL_RCC_OscConfig+0x31e>
 8001d28:	4b66      	ldr	r3, [pc, #408]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	4a65      	ldr	r2, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70
 8001d34:	e01c      	b.n	8001d70 <HAL_RCC_OscConfig+0x358>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b05      	cmp	r3, #5
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x340>
 8001d3e:	4b61      	ldr	r3, [pc, #388]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d42:	4a60      	ldr	r2, [pc, #384]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	6713      	str	r3, [r2, #112]	; 0x70
 8001d4a:	4b5e      	ldr	r3, [pc, #376]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	4a5d      	ldr	r2, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6713      	str	r3, [r2, #112]	; 0x70
 8001d56:	e00b      	b.n	8001d70 <HAL_RCC_OscConfig+0x358>
 8001d58:	4b5a      	ldr	r3, [pc, #360]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5c:	4a59      	ldr	r2, [pc, #356]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	6713      	str	r3, [r2, #112]	; 0x70
 8001d64:	4b57      	ldr	r3, [pc, #348]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d68:	4a56      	ldr	r2, [pc, #344]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d6a:	f023 0304 	bic.w	r3, r3, #4
 8001d6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d015      	beq.n	8001da4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d78:	f7ff f836 	bl	8000de8 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7e:	e00a      	b.n	8001d96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d80:	f7ff f832 	bl	8000de8 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e0d7      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d96:	4b4b      	ldr	r3, [pc, #300]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0ee      	beq.n	8001d80 <HAL_RCC_OscConfig+0x368>
 8001da2:	e014      	b.n	8001dce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da4:	f7ff f820 	bl	8000de8 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dac:	f7ff f81c 	bl	8000de8 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e0c1      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc2:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1ee      	bne.n	8001dac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d105      	bne.n	8001de0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd4:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	4a3a      	ldr	r2, [pc, #232]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80ad 	beq.w	8001f44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dea:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d060      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d145      	bne.n	8001e8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfe:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <HAL_RCC_OscConfig+0x4b4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7fe fff0 	bl	8000de8 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe ffec 	bl	8000de8 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e093      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1e:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	019b      	lsls	r3, r3, #6
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	085b      	lsrs	r3, r3, #1
 8001e42:	3b01      	subs	r3, #1
 8001e44:	041b      	lsls	r3, r3, #16
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	061b      	lsls	r3, r3, #24
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	071b      	lsls	r3, r3, #28
 8001e56:	491b      	ldr	r1, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_RCC_OscConfig+0x4b4>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e62:	f7fe ffc1 	bl	8000de8 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7fe ffbd 	bl	8000de8 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e064      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x452>
 8001e88:	e05c      	b.n	8001f44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_RCC_OscConfig+0x4b4>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7fe ffaa 	bl	8000de8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e98:	f7fe ffa6 	bl	8000de8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e04d      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_RCC_OscConfig+0x4ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x480>
 8001eb6:	e045      	b.n	8001f44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e040      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <HAL_RCC_OscConfig+0x538>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d030      	beq.n	8001f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d129      	bne.n	8001f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d122      	bne.n	8001f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f00:	4013      	ands	r3, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d119      	bne.n	8001f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d10f      	bne.n	8001f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e041      	b.n	8001fea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f839 	bl	8001ff2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3304      	adds	r3, #4
 8001f90:	4619      	mov	r1, r3
 8001f92:	4610      	mov	r0, r2
 8001f94:	f000 f9d8 	bl	8002348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b01      	cmp	r3, #1
 800201a:	d001      	beq.n	8002020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e04e      	b.n	80020be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a23      	ldr	r2, [pc, #140]	; (80020cc <HAL_TIM_Base_Start_IT+0xc4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d022      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x80>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204a:	d01d      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x80>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1f      	ldr	r2, [pc, #124]	; (80020d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d018      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x80>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d013      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x80>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1c      	ldr	r2, [pc, #112]	; (80020d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00e      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x80>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <HAL_TIM_Base_Start_IT+0xd4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d009      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x80>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a19      	ldr	r2, [pc, #100]	; (80020e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d004      	beq.n	8002088 <HAL_TIM_Base_Start_IT+0x80>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a18      	ldr	r2, [pc, #96]	; (80020e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d111      	bne.n	80020ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b06      	cmp	r3, #6
 8002098:	d010      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020aa:	e007      	b.n	80020bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40000c00 	.word	0x40000c00
 80020dc:	40010400 	.word	0x40010400
 80020e0:	40014000 	.word	0x40014000
 80020e4:	40001800 	.word	0x40001800

080020e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d122      	bne.n	8002144 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b02      	cmp	r3, #2
 800210a:	d11b      	bne.n	8002144 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0202 	mvn.w	r2, #2
 8002114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f8ee 	bl	800230c <HAL_TIM_IC_CaptureCallback>
 8002130:	e005      	b.n	800213e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f8e0 	bl	80022f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f8f1 	bl	8002320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b04      	cmp	r3, #4
 8002150:	d122      	bne.n	8002198 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b04      	cmp	r3, #4
 800215e:	d11b      	bne.n	8002198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0204 	mvn.w	r2, #4
 8002168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2202      	movs	r2, #2
 800216e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f8c4 	bl	800230c <HAL_TIM_IC_CaptureCallback>
 8002184:	e005      	b.n	8002192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f8b6 	bl	80022f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f8c7 	bl	8002320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d122      	bne.n	80021ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d11b      	bne.n	80021ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0208 	mvn.w	r2, #8
 80021bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2204      	movs	r2, #4
 80021c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f89a 	bl	800230c <HAL_TIM_IC_CaptureCallback>
 80021d8:	e005      	b.n	80021e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f88c 	bl	80022f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f89d 	bl	8002320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	2b10      	cmp	r3, #16
 80021f8:	d122      	bne.n	8002240 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b10      	cmp	r3, #16
 8002206:	d11b      	bne.n	8002240 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0210 	mvn.w	r2, #16
 8002210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2208      	movs	r2, #8
 8002216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f870 	bl	800230c <HAL_TIM_IC_CaptureCallback>
 800222c:	e005      	b.n	800223a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f862 	bl	80022f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f873 	bl	8002320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b01      	cmp	r3, #1
 800224c:	d10e      	bne.n	800226c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b01      	cmp	r3, #1
 800225a:	d107      	bne.n	800226c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0201 	mvn.w	r2, #1
 8002264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fbb0 	bl	80009cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002276:	2b80      	cmp	r3, #128	; 0x80
 8002278:	d10e      	bne.n	8002298 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002284:	2b80      	cmp	r3, #128	; 0x80
 8002286:	d107      	bne.n	8002298 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f902 	bl	800249c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a2:	2b40      	cmp	r3, #64	; 0x40
 80022a4:	d10e      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b0:	2b40      	cmp	r3, #64	; 0x40
 80022b2:	d107      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f838 	bl	8002334 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	d10e      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b20      	cmp	r3, #32
 80022de:	d107      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0220 	mvn.w	r2, #32
 80022e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f8cc 	bl	8002488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a40      	ldr	r2, [pc, #256]	; (800245c <TIM_Base_SetConfig+0x114>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d013      	beq.n	8002388 <TIM_Base_SetConfig+0x40>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002366:	d00f      	beq.n	8002388 <TIM_Base_SetConfig+0x40>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a3d      	ldr	r2, [pc, #244]	; (8002460 <TIM_Base_SetConfig+0x118>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d00b      	beq.n	8002388 <TIM_Base_SetConfig+0x40>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a3c      	ldr	r2, [pc, #240]	; (8002464 <TIM_Base_SetConfig+0x11c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d007      	beq.n	8002388 <TIM_Base_SetConfig+0x40>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a3b      	ldr	r2, [pc, #236]	; (8002468 <TIM_Base_SetConfig+0x120>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d003      	beq.n	8002388 <TIM_Base_SetConfig+0x40>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a3a      	ldr	r2, [pc, #232]	; (800246c <TIM_Base_SetConfig+0x124>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d108      	bne.n	800239a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a2f      	ldr	r2, [pc, #188]	; (800245c <TIM_Base_SetConfig+0x114>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d02b      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a8:	d027      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a2c      	ldr	r2, [pc, #176]	; (8002460 <TIM_Base_SetConfig+0x118>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d023      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a2b      	ldr	r2, [pc, #172]	; (8002464 <TIM_Base_SetConfig+0x11c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d01f      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a2a      	ldr	r2, [pc, #168]	; (8002468 <TIM_Base_SetConfig+0x120>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01b      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a29      	ldr	r2, [pc, #164]	; (800246c <TIM_Base_SetConfig+0x124>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d017      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a28      	ldr	r2, [pc, #160]	; (8002470 <TIM_Base_SetConfig+0x128>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a27      	ldr	r2, [pc, #156]	; (8002474 <TIM_Base_SetConfig+0x12c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00f      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a26      	ldr	r2, [pc, #152]	; (8002478 <TIM_Base_SetConfig+0x130>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00b      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a25      	ldr	r2, [pc, #148]	; (800247c <TIM_Base_SetConfig+0x134>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a24      	ldr	r2, [pc, #144]	; (8002480 <TIM_Base_SetConfig+0x138>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d003      	beq.n	80023fa <TIM_Base_SetConfig+0xb2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a23      	ldr	r2, [pc, #140]	; (8002484 <TIM_Base_SetConfig+0x13c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d108      	bne.n	800240c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	4313      	orrs	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <TIM_Base_SetConfig+0x114>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d003      	beq.n	8002440 <TIM_Base_SetConfig+0xf8>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a0c      	ldr	r2, [pc, #48]	; (800246c <TIM_Base_SetConfig+0x124>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d103      	bne.n	8002448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	615a      	str	r2, [r3, #20]
}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40010000 	.word	0x40010000
 8002460:	40000400 	.word	0x40000400
 8002464:	40000800 	.word	0x40000800
 8002468:	40000c00 	.word	0x40000c00
 800246c:	40010400 	.word	0x40010400
 8002470:	40014000 	.word	0x40014000
 8002474:	40014400 	.word	0x40014400
 8002478:	40014800 	.word	0x40014800
 800247c:	40001800 	.word	0x40001800
 8002480:	40001c00 	.word	0x40001c00
 8002484:	40002000 	.word	0x40002000

08002488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e03f      	b.n	8002542 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fe fabc 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2224      	movs	r2, #36	; 0x24
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f829 	bl	800254c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695a      	ldr	r2, [r3, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800254c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002550:	b0c0      	sub	sp, #256	; 0x100
 8002552:	af00      	add	r7, sp, #0
 8002554:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002568:	68d9      	ldr	r1, [r3, #12]
 800256a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	ea40 0301 	orr.w	r3, r0, r1
 8002574:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	431a      	orrs	r2, r3
 8002584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	431a      	orrs	r2, r3
 800258c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025a4:	f021 010c 	bic.w	r1, r1, #12
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025b2:	430b      	orrs	r3, r1
 80025b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c6:	6999      	ldr	r1, [r3, #24]
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	ea40 0301 	orr.w	r3, r0, r1
 80025d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b8f      	ldr	r3, [pc, #572]	; (8002818 <UART_SetConfig+0x2cc>)
 80025dc:	429a      	cmp	r2, r3
 80025de:	d005      	beq.n	80025ec <UART_SetConfig+0xa0>
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4b8d      	ldr	r3, [pc, #564]	; (800281c <UART_SetConfig+0x2d0>)
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d104      	bne.n	80025f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025ec:	f7fe ff9e 	bl	800152c <HAL_RCC_GetPCLK2Freq>
 80025f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025f4:	e003      	b.n	80025fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025f6:	f7fe ff85 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
 80025fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002608:	f040 810c 	bne.w	8002824 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800260c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002610:	2200      	movs	r2, #0
 8002612:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002616:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800261a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800261e:	4622      	mov	r2, r4
 8002620:	462b      	mov	r3, r5
 8002622:	1891      	adds	r1, r2, r2
 8002624:	65b9      	str	r1, [r7, #88]	; 0x58
 8002626:	415b      	adcs	r3, r3
 8002628:	65fb      	str	r3, [r7, #92]	; 0x5c
 800262a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800262e:	4621      	mov	r1, r4
 8002630:	eb12 0801 	adds.w	r8, r2, r1
 8002634:	4629      	mov	r1, r5
 8002636:	eb43 0901 	adc.w	r9, r3, r1
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800264a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800264e:	4690      	mov	r8, r2
 8002650:	4699      	mov	r9, r3
 8002652:	4623      	mov	r3, r4
 8002654:	eb18 0303 	adds.w	r3, r8, r3
 8002658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800265c:	462b      	mov	r3, r5
 800265e:	eb49 0303 	adc.w	r3, r9, r3
 8002662:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002672:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002676:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800267a:	460b      	mov	r3, r1
 800267c:	18db      	adds	r3, r3, r3
 800267e:	653b      	str	r3, [r7, #80]	; 0x50
 8002680:	4613      	mov	r3, r2
 8002682:	eb42 0303 	adc.w	r3, r2, r3
 8002686:	657b      	str	r3, [r7, #84]	; 0x54
 8002688:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800268c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002690:	f7fd fe0e 	bl	80002b0 <__aeabi_uldivmod>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4b61      	ldr	r3, [pc, #388]	; (8002820 <UART_SetConfig+0x2d4>)
 800269a:	fba3 2302 	umull	r2, r3, r3, r2
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	011c      	lsls	r4, r3, #4
 80026a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026a6:	2200      	movs	r2, #0
 80026a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026b4:	4642      	mov	r2, r8
 80026b6:	464b      	mov	r3, r9
 80026b8:	1891      	adds	r1, r2, r2
 80026ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80026bc:	415b      	adcs	r3, r3
 80026be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026c4:	4641      	mov	r1, r8
 80026c6:	eb12 0a01 	adds.w	sl, r2, r1
 80026ca:	4649      	mov	r1, r9
 80026cc:	eb43 0b01 	adc.w	fp, r3, r1
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026e4:	4692      	mov	sl, r2
 80026e6:	469b      	mov	fp, r3
 80026e8:	4643      	mov	r3, r8
 80026ea:	eb1a 0303 	adds.w	r3, sl, r3
 80026ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026f2:	464b      	mov	r3, r9
 80026f4:	eb4b 0303 	adc.w	r3, fp, r3
 80026f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002708:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800270c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002710:	460b      	mov	r3, r1
 8002712:	18db      	adds	r3, r3, r3
 8002714:	643b      	str	r3, [r7, #64]	; 0x40
 8002716:	4613      	mov	r3, r2
 8002718:	eb42 0303 	adc.w	r3, r2, r3
 800271c:	647b      	str	r3, [r7, #68]	; 0x44
 800271e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002722:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002726:	f7fd fdc3 	bl	80002b0 <__aeabi_uldivmod>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4611      	mov	r1, r2
 8002730:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <UART_SetConfig+0x2d4>)
 8002732:	fba3 2301 	umull	r2, r3, r3, r1
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	2264      	movs	r2, #100	; 0x64
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	1acb      	subs	r3, r1, r3
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002746:	4b36      	ldr	r3, [pc, #216]	; (8002820 <UART_SetConfig+0x2d4>)
 8002748:	fba3 2302 	umull	r2, r3, r3, r2
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002754:	441c      	add	r4, r3
 8002756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800275a:	2200      	movs	r2, #0
 800275c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002760:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002764:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002768:	4642      	mov	r2, r8
 800276a:	464b      	mov	r3, r9
 800276c:	1891      	adds	r1, r2, r2
 800276e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002770:	415b      	adcs	r3, r3
 8002772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002774:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002778:	4641      	mov	r1, r8
 800277a:	1851      	adds	r1, r2, r1
 800277c:	6339      	str	r1, [r7, #48]	; 0x30
 800277e:	4649      	mov	r1, r9
 8002780:	414b      	adcs	r3, r1
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002790:	4659      	mov	r1, fp
 8002792:	00cb      	lsls	r3, r1, #3
 8002794:	4651      	mov	r1, sl
 8002796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800279a:	4651      	mov	r1, sl
 800279c:	00ca      	lsls	r2, r1, #3
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	4603      	mov	r3, r0
 80027a4:	4642      	mov	r2, r8
 80027a6:	189b      	adds	r3, r3, r2
 80027a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027ac:	464b      	mov	r3, r9
 80027ae:	460a      	mov	r2, r1
 80027b0:	eb42 0303 	adc.w	r3, r2, r3
 80027b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027cc:	460b      	mov	r3, r1
 80027ce:	18db      	adds	r3, r3, r3
 80027d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d2:	4613      	mov	r3, r2
 80027d4:	eb42 0303 	adc.w	r3, r2, r3
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027e2:	f7fd fd65 	bl	80002b0 <__aeabi_uldivmod>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <UART_SetConfig+0x2d4>)
 80027ec:	fba3 1302 	umull	r1, r3, r3, r2
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	2164      	movs	r1, #100	; 0x64
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	3332      	adds	r3, #50	; 0x32
 80027fe:	4a08      	ldr	r2, [pc, #32]	; (8002820 <UART_SetConfig+0x2d4>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	f003 0207 	and.w	r2, r3, #7
 800280a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4422      	add	r2, r4
 8002812:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002814:	e105      	b.n	8002a22 <UART_SetConfig+0x4d6>
 8002816:	bf00      	nop
 8002818:	40011000 	.word	0x40011000
 800281c:	40011400 	.word	0x40011400
 8002820:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002828:	2200      	movs	r2, #0
 800282a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800282e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002832:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002836:	4642      	mov	r2, r8
 8002838:	464b      	mov	r3, r9
 800283a:	1891      	adds	r1, r2, r2
 800283c:	6239      	str	r1, [r7, #32]
 800283e:	415b      	adcs	r3, r3
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
 8002842:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002846:	4641      	mov	r1, r8
 8002848:	1854      	adds	r4, r2, r1
 800284a:	4649      	mov	r1, r9
 800284c:	eb43 0501 	adc.w	r5, r3, r1
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	00eb      	lsls	r3, r5, #3
 800285a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800285e:	00e2      	lsls	r2, r4, #3
 8002860:	4614      	mov	r4, r2
 8002862:	461d      	mov	r5, r3
 8002864:	4643      	mov	r3, r8
 8002866:	18e3      	adds	r3, r4, r3
 8002868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800286c:	464b      	mov	r3, r9
 800286e:	eb45 0303 	adc.w	r3, r5, r3
 8002872:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002882:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002892:	4629      	mov	r1, r5
 8002894:	008b      	lsls	r3, r1, #2
 8002896:	4621      	mov	r1, r4
 8002898:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800289c:	4621      	mov	r1, r4
 800289e:	008a      	lsls	r2, r1, #2
 80028a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028a4:	f7fd fd04 	bl	80002b0 <__aeabi_uldivmod>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4b60      	ldr	r3, [pc, #384]	; (8002a30 <UART_SetConfig+0x4e4>)
 80028ae:	fba3 2302 	umull	r2, r3, r3, r2
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	011c      	lsls	r4, r3, #4
 80028b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028ba:	2200      	movs	r2, #0
 80028bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028c8:	4642      	mov	r2, r8
 80028ca:	464b      	mov	r3, r9
 80028cc:	1891      	adds	r1, r2, r2
 80028ce:	61b9      	str	r1, [r7, #24]
 80028d0:	415b      	adcs	r3, r3
 80028d2:	61fb      	str	r3, [r7, #28]
 80028d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d8:	4641      	mov	r1, r8
 80028da:	1851      	adds	r1, r2, r1
 80028dc:	6139      	str	r1, [r7, #16]
 80028de:	4649      	mov	r1, r9
 80028e0:	414b      	adcs	r3, r1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028f0:	4659      	mov	r1, fp
 80028f2:	00cb      	lsls	r3, r1, #3
 80028f4:	4651      	mov	r1, sl
 80028f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028fa:	4651      	mov	r1, sl
 80028fc:	00ca      	lsls	r2, r1, #3
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	4603      	mov	r3, r0
 8002904:	4642      	mov	r2, r8
 8002906:	189b      	adds	r3, r3, r2
 8002908:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800290c:	464b      	mov	r3, r9
 800290e:	460a      	mov	r2, r1
 8002910:	eb42 0303 	adc.w	r3, r2, r3
 8002914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	67bb      	str	r3, [r7, #120]	; 0x78
 8002922:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002930:	4649      	mov	r1, r9
 8002932:	008b      	lsls	r3, r1, #2
 8002934:	4641      	mov	r1, r8
 8002936:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800293a:	4641      	mov	r1, r8
 800293c:	008a      	lsls	r2, r1, #2
 800293e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002942:	f7fd fcb5 	bl	80002b0 <__aeabi_uldivmod>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <UART_SetConfig+0x4e4>)
 800294c:	fba3 1302 	umull	r1, r3, r3, r2
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	2164      	movs	r1, #100	; 0x64
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	3332      	adds	r3, #50	; 0x32
 800295e:	4a34      	ldr	r2, [pc, #208]	; (8002a30 <UART_SetConfig+0x4e4>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800296a:	441c      	add	r4, r3
 800296c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002970:	2200      	movs	r2, #0
 8002972:	673b      	str	r3, [r7, #112]	; 0x70
 8002974:	677a      	str	r2, [r7, #116]	; 0x74
 8002976:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800297a:	4642      	mov	r2, r8
 800297c:	464b      	mov	r3, r9
 800297e:	1891      	adds	r1, r2, r2
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	415b      	adcs	r3, r3
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800298a:	4641      	mov	r1, r8
 800298c:	1851      	adds	r1, r2, r1
 800298e:	6039      	str	r1, [r7, #0]
 8002990:	4649      	mov	r1, r9
 8002992:	414b      	adcs	r3, r1
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029a2:	4659      	mov	r1, fp
 80029a4:	00cb      	lsls	r3, r1, #3
 80029a6:	4651      	mov	r1, sl
 80029a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ac:	4651      	mov	r1, sl
 80029ae:	00ca      	lsls	r2, r1, #3
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	4603      	mov	r3, r0
 80029b6:	4642      	mov	r2, r8
 80029b8:	189b      	adds	r3, r3, r2
 80029ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80029bc:	464b      	mov	r3, r9
 80029be:	460a      	mov	r2, r1
 80029c0:	eb42 0303 	adc.w	r3, r2, r3
 80029c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	663b      	str	r3, [r7, #96]	; 0x60
 80029d0:	667a      	str	r2, [r7, #100]	; 0x64
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029de:	4649      	mov	r1, r9
 80029e0:	008b      	lsls	r3, r1, #2
 80029e2:	4641      	mov	r1, r8
 80029e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029e8:	4641      	mov	r1, r8
 80029ea:	008a      	lsls	r2, r1, #2
 80029ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029f0:	f7fd fc5e 	bl	80002b0 <__aeabi_uldivmod>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <UART_SetConfig+0x4e4>)
 80029fa:	fba3 1302 	umull	r1, r3, r3, r2
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	2164      	movs	r1, #100	; 0x64
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	3332      	adds	r3, #50	; 0x32
 8002a0c:	4a08      	ldr	r2, [pc, #32]	; (8002a30 <UART_SetConfig+0x4e4>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	f003 020f 	and.w	r2, r3, #15
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4422      	add	r2, r4
 8002a20:	609a      	str	r2, [r3, #8]
}
 8002a22:	bf00      	nop
 8002a24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a2e:	bf00      	nop
 8002a30:	51eb851f 	.word	0x51eb851f

08002a34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <SysTick_Handler+0x1c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002a3c:	f001 fdb2 	bl	80045a4 <xTaskGetSchedulerState>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d001      	beq.n	8002a4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002a46:	f002 fc97 	bl	8005378 <xPortSysTickHandler>
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	e000e010 	.word	0xe000e010

08002a54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	4a06      	ldr	r2, [pc, #24]	; (8002a84 <vApplicationGetIdleTaskMemory+0x30>)
 8002a6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2280      	movs	r2, #128	; 0x80
 8002a70:	601a      	str	r2, [r3, #0]
}
 8002a72:	bf00      	nop
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000178 	.word	0x20000178
 8002a84:	200001d4 	.word	0x200001d4

08002a88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4a07      	ldr	r2, [pc, #28]	; (8002ab4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4a06      	ldr	r2, [pc, #24]	; (8002ab8 <vApplicationGetTimerTaskMemory+0x30>)
 8002a9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aa6:	601a      	str	r2, [r3, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	200003d4 	.word	0x200003d4
 8002ab8:	20000430 	.word	0x20000430

08002abc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f103 0208 	add.w	r2, r3, #8
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f103 0208 	add.w	r2, r3, #8
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f103 0208 	add.w	r2, r3, #8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b16:	b480      	push	{r7}
 8002b18:	b085      	sub	sp, #20
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	601a      	str	r2, [r3, #0]
}
 8002b52:	bf00      	nop
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d103      	bne.n	8002b7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	e00c      	b.n	8002b98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3308      	adds	r3, #8
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	e002      	b.n	8002b8c <vListInsert+0x2e>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d2f6      	bcs.n	8002b86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	601a      	str	r2, [r3, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6892      	ldr	r2, [r2, #8]
 8002be6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6852      	ldr	r2, [r2, #4]
 8002bf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d103      	bne.n	8002c04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	1e5a      	subs	r2, r3, #1
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10a      	bne.n	8002c4e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c4a:	bf00      	nop
 8002c4c:	e7fe      	b.n	8002c4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c4e:	f002 fb01 	bl	8005254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5a:	68f9      	ldr	r1, [r7, #12]
 8002c5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	441a      	add	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	68f9      	ldr	r1, [r7, #12]
 8002c82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	441a      	add	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	22ff      	movs	r2, #255	; 0xff
 8002c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	22ff      	movs	r2, #255	; 0xff
 8002c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d114      	bne.n	8002cce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01a      	beq.n	8002ce2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3310      	adds	r3, #16
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f001 fab9 	bl	8004228 <xTaskRemoveFromEventList>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d012      	beq.n	8002ce2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <xQueueGenericReset+0xcc>)
 8002cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	e009      	b.n	8002ce2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3310      	adds	r3, #16
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fef2 	bl	8002abc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	3324      	adds	r3, #36	; 0x24
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff feed 	bl	8002abc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ce2:	f002 fae7 	bl	80052b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ce6:	2301      	movs	r3, #1
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	e000ed04 	.word	0xe000ed04

08002cf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08e      	sub	sp, #56	; 0x38
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10a      	bne.n	8002d1e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d1a:	bf00      	nop
 8002d1c:	e7fe      	b.n	8002d1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d36:	bf00      	nop
 8002d38:	e7fe      	b.n	8002d38 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <xQueueGenericCreateStatic+0x52>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <xQueueGenericCreateStatic+0x56>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <xQueueGenericCreateStatic+0x58>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	623b      	str	r3, [r7, #32]
}
 8002d62:	bf00      	nop
 8002d64:	e7fe      	b.n	8002d64 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <xQueueGenericCreateStatic+0x7e>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <xQueueGenericCreateStatic+0x82>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <xQueueGenericCreateStatic+0x84>
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	61fb      	str	r3, [r7, #28]
}
 8002d8e:	bf00      	nop
 8002d90:	e7fe      	b.n	8002d90 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d92:	2350      	movs	r3, #80	; 0x50
 8002d94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2b50      	cmp	r3, #80	; 0x50
 8002d9a:	d00a      	beq.n	8002db2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	61bb      	str	r3, [r7, #24]
}
 8002dae:	bf00      	nop
 8002db0:	e7fe      	b.n	8002db0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002db2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002dc6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	68b9      	ldr	r1, [r7, #8]
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f83f 	bl	8002e58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3730      	adds	r7, #48	; 0x30
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	; 0x28
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	4613      	mov	r3, r2
 8002df0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	613b      	str	r3, [r7, #16]
}
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	fb02 f303 	mul.w	r3, r2, r3
 8002e16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	3350      	adds	r3, #80	; 0x50
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f002 fb3b 	bl	8005498 <pvPortMalloc>
 8002e22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d011      	beq.n	8002e4e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	3350      	adds	r3, #80	; 0x50
 8002e32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e3c:	79fa      	ldrb	r2, [r7, #7]
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f805 	bl	8002e58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e4e:	69bb      	ldr	r3, [r7, #24]
	}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3720      	adds	r7, #32
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d103      	bne.n	8002e74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	e002      	b.n	8002e7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e86:	2101      	movs	r1, #1
 8002e88:	69b8      	ldr	r0, [r7, #24]
 8002e8a:	f7ff fecb 	bl	8002c24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08e      	sub	sp, #56	; 0x38
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <xQueueGenericSend+0x32>
	__asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ece:	bf00      	nop
 8002ed0:	e7fe      	b.n	8002ed0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d103      	bne.n	8002ee0 <xQueueGenericSend+0x40>
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <xQueueGenericSend+0x44>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <xQueueGenericSend+0x46>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <xQueueGenericSend+0x60>
	__asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002efc:	bf00      	nop
 8002efe:	e7fe      	b.n	8002efe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d103      	bne.n	8002f0e <xQueueGenericSend+0x6e>
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <xQueueGenericSend+0x72>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <xQueueGenericSend+0x74>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10a      	bne.n	8002f2e <xQueueGenericSend+0x8e>
	__asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	623b      	str	r3, [r7, #32]
}
 8002f2a:	bf00      	nop
 8002f2c:	e7fe      	b.n	8002f2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f2e:	f001 fb39 	bl	80045a4 <xTaskGetSchedulerState>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <xQueueGenericSend+0x9e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <xQueueGenericSend+0xa2>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <xQueueGenericSend+0xa4>
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <xQueueGenericSend+0xbe>
	__asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	61fb      	str	r3, [r7, #28]
}
 8002f5a:	bf00      	nop
 8002f5c:	e7fe      	b.n	8002f5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f5e:	f002 f979 	bl	8005254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d302      	bcc.n	8002f74 <xQueueGenericSend+0xd4>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d129      	bne.n	8002fc8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f7a:	f000 fbbb 	bl	80036f4 <prvCopyDataToQueue>
 8002f7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d010      	beq.n	8002faa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	3324      	adds	r3, #36	; 0x24
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f001 f94b 	bl	8004228 <xTaskRemoveFromEventList>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d013      	beq.n	8002fc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f98:	4b3f      	ldr	r3, [pc, #252]	; (8003098 <xQueueGenericSend+0x1f8>)
 8002f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	e00a      	b.n	8002fc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fb0:	4b39      	ldr	r3, [pc, #228]	; (8003098 <xQueueGenericSend+0x1f8>)
 8002fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002fc0:	f002 f978 	bl	80052b4 <vPortExitCritical>
				return pdPASS;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e063      	b.n	8003090 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fce:	f002 f971 	bl	80052b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e05c      	b.n	8003090 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f001 f985 	bl	80042f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fea:	f002 f963 	bl	80052b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fee:	f000 fef7 	bl	8003de0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ff2:	f002 f92f 	bl	8005254 <vPortEnterCritical>
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ffc:	b25b      	sxtb	r3, r3
 8002ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003002:	d103      	bne.n	800300c <xQueueGenericSend+0x16c>
 8003004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003012:	b25b      	sxtb	r3, r3
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d103      	bne.n	8003022 <xQueueGenericSend+0x182>
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003022:	f002 f947 	bl	80052b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003026:	1d3a      	adds	r2, r7, #4
 8003028:	f107 0314 	add.w	r3, r7, #20
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f001 f974 	bl	800431c <xTaskCheckForTimeOut>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d124      	bne.n	8003084 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800303a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800303c:	f000 fc52 	bl	80038e4 <prvIsQueueFull>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d018      	beq.n	8003078 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	3310      	adds	r3, #16
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f001 f89a 	bl	8004188 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003056:	f000 fbdd 	bl	8003814 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800305a:	f000 fecf 	bl	8003dfc <xTaskResumeAll>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	f47f af7c 	bne.w	8002f5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003066:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <xQueueGenericSend+0x1f8>)
 8003068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	e772      	b.n	8002f5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800307a:	f000 fbcb 	bl	8003814 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800307e:	f000 febd 	bl	8003dfc <xTaskResumeAll>
 8003082:	e76c      	b.n	8002f5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003086:	f000 fbc5 	bl	8003814 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800308a:	f000 feb7 	bl	8003dfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800308e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003090:	4618      	mov	r0, r3
 8003092:	3738      	adds	r7, #56	; 0x38
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	e000ed04 	.word	0xe000ed04

0800309c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b090      	sub	sp, #64	; 0x40
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80030ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030c6:	bf00      	nop
 80030c8:	e7fe      	b.n	80030c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d103      	bne.n	80030d8 <xQueueGenericSendFromISR+0x3c>
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <xQueueGenericSendFromISR+0x40>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <xQueueGenericSendFromISR+0x42>
 80030dc:	2300      	movs	r3, #0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10a      	bne.n	80030f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030f4:	bf00      	nop
 80030f6:	e7fe      	b.n	80030f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d103      	bne.n	8003106 <xQueueGenericSendFromISR+0x6a>
 80030fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <xQueueGenericSendFromISR+0x6e>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <xQueueGenericSendFromISR+0x70>
 800310a:	2300      	movs	r3, #0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	623b      	str	r3, [r7, #32]
}
 8003122:	bf00      	nop
 8003124:	e7fe      	b.n	8003124 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003126:	f002 f977 	bl	8005418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800312a:	f3ef 8211 	mrs	r2, BASEPRI
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	61fa      	str	r2, [r7, #28]
 8003140:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003142:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003144:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800314a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <xQueueGenericSendFromISR+0xbc>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d12f      	bne.n	80031b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800315e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800316e:	f000 fac1 	bl	80036f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003172:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317a:	d112      	bne.n	80031a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	2b00      	cmp	r3, #0
 8003182:	d016      	beq.n	80031b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003186:	3324      	adds	r3, #36	; 0x24
 8003188:	4618      	mov	r0, r3
 800318a:	f001 f84d 	bl	8004228 <xTaskRemoveFromEventList>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00e      	beq.n	80031b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e007      	b.n	80031b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031a6:	3301      	adds	r3, #1
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	b25a      	sxtb	r2, r3
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031b2:	2301      	movs	r3, #1
 80031b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80031b6:	e001      	b.n	80031bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3740      	adds	r7, #64	; 0x40
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b08e      	sub	sp, #56	; 0x38
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10a      	bne.n	80031fc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	623b      	str	r3, [r7, #32]
}
 80031f8:	bf00      	nop
 80031fa:	e7fe      	b.n	80031fa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <xQueueGiveFromISR+0x48>
	__asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	61fb      	str	r3, [r7, #28]
}
 8003216:	bf00      	nop
 8003218:	e7fe      	b.n	8003218 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <xQueueGiveFromISR+0x58>
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <xQueueGiveFromISR+0x5c>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <xQueueGiveFromISR+0x5e>
 800322e:	2300      	movs	r3, #0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <xQueueGiveFromISR+0x78>
	__asm volatile
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	61bb      	str	r3, [r7, #24]
}
 8003246:	bf00      	nop
 8003248:	e7fe      	b.n	8003248 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800324a:	f002 f8e5 	bl	8005418 <vPortValidateInterruptPriority>
	__asm volatile
 800324e:	f3ef 8211 	mrs	r2, BASEPRI
 8003252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	617a      	str	r2, [r7, #20]
 8003264:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003266:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003276:	429a      	cmp	r2, r3
 8003278:	d22b      	bcs.n	80032d2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800328c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d112      	bne.n	80032bc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	2b00      	cmp	r3, #0
 800329c:	d016      	beq.n	80032cc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	3324      	adds	r3, #36	; 0x24
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 ffc0 	bl	8004228 <xTaskRemoveFromEventList>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00e      	beq.n	80032cc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00b      	beq.n	80032cc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e007      	b.n	80032cc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032c0:	3301      	adds	r3, #1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	b25a      	sxtb	r2, r3
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80032cc:	2301      	movs	r3, #1
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
 80032d0:	e001      	b.n	80032d6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	637b      	str	r3, [r7, #52]	; 0x34
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f383 8811 	msr	BASEPRI, r3
}
 80032e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3738      	adds	r7, #56	; 0x38
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08c      	sub	sp, #48	; 0x30
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <xQueueReceive+0x30>
	__asm volatile
 8003306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330a:	f383 8811 	msr	BASEPRI, r3
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	623b      	str	r3, [r7, #32]
}
 8003318:	bf00      	nop
 800331a:	e7fe      	b.n	800331a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <xQueueReceive+0x3e>
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <xQueueReceive+0x42>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <xQueueReceive+0x44>
 800332e:	2300      	movs	r3, #0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10a      	bne.n	800334a <xQueueReceive+0x5e>
	__asm volatile
 8003334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	61fb      	str	r3, [r7, #28]
}
 8003346:	bf00      	nop
 8003348:	e7fe      	b.n	8003348 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800334a:	f001 f92b 	bl	80045a4 <xTaskGetSchedulerState>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <xQueueReceive+0x6e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <xQueueReceive+0x72>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <xQueueReceive+0x74>
 800335e:	2300      	movs	r3, #0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10a      	bne.n	800337a <xQueueReceive+0x8e>
	__asm volatile
 8003364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	61bb      	str	r3, [r7, #24]
}
 8003376:	bf00      	nop
 8003378:	e7fe      	b.n	8003378 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800337a:	f001 ff6b 	bl	8005254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01f      	beq.n	80033ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800338a:	68b9      	ldr	r1, [r7, #8]
 800338c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800338e:	f000 fa1b 	bl	80037c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	1e5a      	subs	r2, r3, #1
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003398:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00f      	beq.n	80033c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	3310      	adds	r3, #16
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 ff3e 	bl	8004228 <xTaskRemoveFromEventList>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d007      	beq.n	80033c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033b2:	4b3d      	ldr	r3, [pc, #244]	; (80034a8 <xQueueReceive+0x1bc>)
 80033b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033c2:	f001 ff77 	bl	80052b4 <vPortExitCritical>
				return pdPASS;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e069      	b.n	800349e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d103      	bne.n	80033d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033d0:	f001 ff70 	bl	80052b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e062      	b.n	800349e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033de:	f107 0310 	add.w	r3, r7, #16
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 ff84 	bl	80042f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033e8:	2301      	movs	r3, #1
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033ec:	f001 ff62 	bl	80052b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033f0:	f000 fcf6 	bl	8003de0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033f4:	f001 ff2e 	bl	8005254 <vPortEnterCritical>
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033fe:	b25b      	sxtb	r3, r3
 8003400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003404:	d103      	bne.n	800340e <xQueueReceive+0x122>
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003414:	b25b      	sxtb	r3, r3
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	d103      	bne.n	8003424 <xQueueReceive+0x138>
 800341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003424:	f001 ff46 	bl	80052b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003428:	1d3a      	adds	r2, r7, #4
 800342a:	f107 0310 	add.w	r3, r7, #16
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f000 ff73 	bl	800431c <xTaskCheckForTimeOut>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d123      	bne.n	8003484 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800343c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800343e:	f000 fa3b 	bl	80038b8 <prvIsQueueEmpty>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d017      	beq.n	8003478 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	3324      	adds	r3, #36	; 0x24
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fe99 	bl	8004188 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003458:	f000 f9dc 	bl	8003814 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800345c:	f000 fcce 	bl	8003dfc <xTaskResumeAll>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d189      	bne.n	800337a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <xQueueReceive+0x1bc>)
 8003468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	f3bf 8f6f 	isb	sy
 8003476:	e780      	b.n	800337a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800347a:	f000 f9cb 	bl	8003814 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800347e:	f000 fcbd 	bl	8003dfc <xTaskResumeAll>
 8003482:	e77a      	b.n	800337a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003486:	f000 f9c5 	bl	8003814 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800348a:	f000 fcb7 	bl	8003dfc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800348e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003490:	f000 fa12 	bl	80038b8 <prvIsQueueEmpty>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	f43f af6f 	beq.w	800337a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800349c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3730      	adds	r7, #48	; 0x30
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	e000ed04 	.word	0xe000ed04

080034ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08e      	sub	sp, #56	; 0x38
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80034be:	2300      	movs	r3, #0
 80034c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <xQueueSemaphoreTake+0x32>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	623b      	str	r3, [r7, #32]
}
 80034da:	bf00      	nop
 80034dc:	e7fe      	b.n	80034dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80034de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	61fb      	str	r3, [r7, #28]
}
 80034f8:	bf00      	nop
 80034fa:	e7fe      	b.n	80034fa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034fc:	f001 f852 	bl	80045a4 <xTaskGetSchedulerState>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <xQueueSemaphoreTake+0x60>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <xQueueSemaphoreTake+0x64>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <xQueueSemaphoreTake+0x66>
 8003510:	2300      	movs	r3, #0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10a      	bne.n	800352c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	61bb      	str	r3, [r7, #24]
}
 8003528:	bf00      	nop
 800352a:	e7fe      	b.n	800352a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800352c:	f001 fe92 	bl	8005254 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	2b00      	cmp	r3, #0
 800353a:	d024      	beq.n	8003586 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	1e5a      	subs	r2, r3, #1
 8003540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003542:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d104      	bne.n	8003556 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800354c:	f001 f9a0 	bl	8004890 <pvTaskIncrementMutexHeldCount>
 8003550:	4602      	mov	r2, r0
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00f      	beq.n	800357e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	3310      	adds	r3, #16
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fe60 	bl	8004228 <xTaskRemoveFromEventList>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800356e:	4b54      	ldr	r3, [pc, #336]	; (80036c0 <xQueueSemaphoreTake+0x214>)
 8003570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800357e:	f001 fe99 	bl	80052b4 <vPortExitCritical>
				return pdPASS;
 8003582:	2301      	movs	r3, #1
 8003584:	e097      	b.n	80036b6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d111      	bne.n	80035b0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	617b      	str	r3, [r7, #20]
}
 80035a4:	bf00      	nop
 80035a6:	e7fe      	b.n	80035a6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80035a8:	f001 fe84 	bl	80052b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e082      	b.n	80036b6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035b6:	f107 030c 	add.w	r3, r7, #12
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fe98 	bl	80042f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035c0:	2301      	movs	r3, #1
 80035c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035c4:	f001 fe76 	bl	80052b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035c8:	f000 fc0a 	bl	8003de0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035cc:	f001 fe42 	bl	8005254 <vPortEnterCritical>
 80035d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035d6:	b25b      	sxtb	r3, r3
 80035d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035dc:	d103      	bne.n	80035e6 <xQueueSemaphoreTake+0x13a>
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ec:	b25b      	sxtb	r3, r3
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d103      	bne.n	80035fc <xQueueSemaphoreTake+0x150>
 80035f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035fc:	f001 fe5a 	bl	80052b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003600:	463a      	mov	r2, r7
 8003602:	f107 030c 	add.w	r3, r7, #12
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fe87 	bl	800431c <xTaskCheckForTimeOut>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d132      	bne.n	800367a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003616:	f000 f94f 	bl	80038b8 <prvIsQueueEmpty>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d026      	beq.n	800366e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003628:	f001 fe14 	bl	8005254 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4618      	mov	r0, r3
 8003632:	f000 ffd5 	bl	80045e0 <xTaskPriorityInherit>
 8003636:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003638:	f001 fe3c 	bl	80052b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	3324      	adds	r3, #36	; 0x24
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fd9f 	bl	8004188 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800364a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800364c:	f000 f8e2 	bl	8003814 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003650:	f000 fbd4 	bl	8003dfc <xTaskResumeAll>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	f47f af68 	bne.w	800352c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800365c:	4b18      	ldr	r3, [pc, #96]	; (80036c0 <xQueueSemaphoreTake+0x214>)
 800365e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	e75e      	b.n	800352c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800366e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003670:	f000 f8d0 	bl	8003814 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003674:	f000 fbc2 	bl	8003dfc <xTaskResumeAll>
 8003678:	e758      	b.n	800352c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800367a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800367c:	f000 f8ca 	bl	8003814 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003680:	f000 fbbc 	bl	8003dfc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003686:	f000 f917 	bl	80038b8 <prvIsQueueEmpty>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	f43f af4d 	beq.w	800352c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00d      	beq.n	80036b4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003698:	f001 fddc 	bl	8005254 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800369c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800369e:	f000 f811 	bl	80036c4 <prvGetDisinheritPriorityAfterTimeout>
 80036a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 f86e 	bl	800478c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80036b0:	f001 fe00 	bl	80052b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3738      	adds	r7, #56	; 0x38
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	e000ed04 	.word	0xe000ed04

080036c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d006      	beq.n	80036e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	e001      	b.n	80036e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80036e6:	68fb      	ldr	r3, [r7, #12]
	}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10d      	bne.n	800372e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d14d      	bne.n	80037b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 ffc6 	bl	80046b0 <xTaskPriorityDisinherit>
 8003724:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	e043      	b.n	80037b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d119      	bne.n	8003768 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6858      	ldr	r0, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	461a      	mov	r2, r3
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	f002 f8be 	bl	80058c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	441a      	add	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	429a      	cmp	r2, r3
 800375c:	d32b      	bcc.n	80037b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	e026      	b.n	80037b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68d8      	ldr	r0, [r3, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	461a      	mov	r2, r3
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	f002 f8a4 	bl	80058c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	425b      	negs	r3, r3
 8003782:	441a      	add	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d207      	bcs.n	80037a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	425b      	negs	r3, r3
 800379e:	441a      	add	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d105      	bne.n	80037b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037be:	697b      	ldr	r3, [r7, #20]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d018      	beq.n	800380c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	441a      	add	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d303      	bcc.n	80037fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68d9      	ldr	r1, [r3, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	461a      	mov	r2, r3
 8003806:	6838      	ldr	r0, [r7, #0]
 8003808:	f002 f85a 	bl	80058c0 <memcpy>
	}
}
 800380c:	bf00      	nop
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800381c:	f001 fd1a 	bl	8005254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003826:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003828:	e011      	b.n	800384e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	2b00      	cmp	r3, #0
 8003830:	d012      	beq.n	8003858 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3324      	adds	r3, #36	; 0x24
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fcf6 	bl	8004228 <xTaskRemoveFromEventList>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003842:	f000 fdcd 	bl	80043e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	3b01      	subs	r3, #1
 800384a:	b2db      	uxtb	r3, r3
 800384c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800384e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003852:	2b00      	cmp	r3, #0
 8003854:	dce9      	bgt.n	800382a <prvUnlockQueue+0x16>
 8003856:	e000      	b.n	800385a <prvUnlockQueue+0x46>
					break;
 8003858:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	22ff      	movs	r2, #255	; 0xff
 800385e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003862:	f001 fd27 	bl	80052b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003866:	f001 fcf5 	bl	8005254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003870:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003872:	e011      	b.n	8003898 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d012      	beq.n	80038a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3310      	adds	r3, #16
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fcd1 	bl	8004228 <xTaskRemoveFromEventList>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800388c:	f000 fda8 	bl	80043e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003890:	7bbb      	ldrb	r3, [r7, #14]
 8003892:	3b01      	subs	r3, #1
 8003894:	b2db      	uxtb	r3, r3
 8003896:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003898:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800389c:	2b00      	cmp	r3, #0
 800389e:	dce9      	bgt.n	8003874 <prvUnlockQueue+0x60>
 80038a0:	e000      	b.n	80038a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	22ff      	movs	r2, #255	; 0xff
 80038a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038ac:	f001 fd02 	bl	80052b4 <vPortExitCritical>
}
 80038b0:	bf00      	nop
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038c0:	f001 fcc8 	bl	8005254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038cc:	2301      	movs	r3, #1
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	e001      	b.n	80038d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038d6:	f001 fced 	bl	80052b4 <vPortExitCritical>

	return xReturn;
 80038da:	68fb      	ldr	r3, [r7, #12]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038ec:	f001 fcb2 	bl	8005254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d102      	bne.n	8003902 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038fc:	2301      	movs	r3, #1
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e001      	b.n	8003906 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003906:	f001 fcd5 	bl	80052b4 <vPortExitCritical>

	return xReturn;
 800390a:	68fb      	ldr	r3, [r7, #12]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	e014      	b.n	800394e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003924:	4a0f      	ldr	r2, [pc, #60]	; (8003964 <vQueueAddToRegistry+0x50>)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003930:	490c      	ldr	r1, [pc, #48]	; (8003964 <vQueueAddToRegistry+0x50>)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800393a:	4a0a      	ldr	r2, [pc, #40]	; (8003964 <vQueueAddToRegistry+0x50>)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003946:	e006      	b.n	8003956 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	3301      	adds	r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b07      	cmp	r3, #7
 8003952:	d9e7      	bls.n	8003924 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000830 	.word	0x20000830

08003968 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003978:	f001 fc6c 	bl	8005254 <vPortEnterCritical>
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003982:	b25b      	sxtb	r3, r3
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d103      	bne.n	8003992 <vQueueWaitForMessageRestricted+0x2a>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003998:	b25b      	sxtb	r3, r3
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399e:	d103      	bne.n	80039a8 <vQueueWaitForMessageRestricted+0x40>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039a8:	f001 fc84 	bl	80052b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	3324      	adds	r3, #36	; 0x24
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 fc07 	bl	80041d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039c2:	6978      	ldr	r0, [r7, #20]
 80039c4:	f7ff ff26 	bl	8003814 <prvUnlockQueue>
	}
 80039c8:	bf00      	nop
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08e      	sub	sp, #56	; 0x38
 80039d4:	af04      	add	r7, sp, #16
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	623b      	str	r3, [r7, #32]
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <xTaskCreateStatic+0x46>
	__asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	61fb      	str	r3, [r7, #28]
}
 8003a12:	bf00      	nop
 8003a14:	e7fe      	b.n	8003a14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a16:	235c      	movs	r3, #92	; 0x5c
 8003a18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b5c      	cmp	r3, #92	; 0x5c
 8003a1e:	d00a      	beq.n	8003a36 <xTaskCreateStatic+0x66>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	61bb      	str	r3, [r7, #24]
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01e      	beq.n	8003a7c <xTaskCreateStatic+0xac>
 8003a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01b      	beq.n	8003a7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a56:	2300      	movs	r3, #0
 8003a58:	9303      	str	r3, [sp, #12]
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	9302      	str	r3, [sp, #8]
 8003a5e:	f107 0314 	add.w	r3, r7, #20
 8003a62:	9301      	str	r3, [sp, #4]
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f850 	bl	8003b14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a76:	f000 f8dd 	bl	8003c34 <prvAddNewTaskToReadyList>
 8003a7a:	e001      	b.n	8003a80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a80:	697b      	ldr	r3, [r7, #20]
	}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3728      	adds	r7, #40	; 0x28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b08c      	sub	sp, #48	; 0x30
 8003a8e:	af04      	add	r7, sp, #16
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	603b      	str	r3, [r7, #0]
 8003a96:	4613      	mov	r3, r2
 8003a98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 fcfa 	bl	8005498 <pvPortMalloc>
 8003aa4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00e      	beq.n	8003aca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003aac:	205c      	movs	r0, #92	; 0x5c
 8003aae:	f001 fcf3 	bl	8005498 <pvPortMalloc>
 8003ab2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
 8003ac0:	e005      	b.n	8003ace <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ac2:	6978      	ldr	r0, [r7, #20]
 8003ac4:	f001 fdb4 	bl	8005630 <vPortFree>
 8003ac8:	e001      	b.n	8003ace <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d017      	beq.n	8003b04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003adc:	88fa      	ldrh	r2, [r7, #6]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	9303      	str	r3, [sp, #12]
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	9302      	str	r3, [sp, #8]
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae8:	9301      	str	r3, [sp, #4]
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f80e 	bl	8003b14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003af8:	69f8      	ldr	r0, [r7, #28]
 8003afa:	f000 f89b 	bl	8003c34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003afe:	2301      	movs	r3, #1
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	e002      	b.n	8003b0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b04:	f04f 33ff 	mov.w	r3, #4294967295
 8003b08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b0a:	69bb      	ldr	r3, [r7, #24]
	}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	21a5      	movs	r1, #165	; 0xa5
 8003b2e:	f001 fed5 	bl	80058dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	f023 0307 	bic.w	r3, r3, #7
 8003b4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	617b      	str	r3, [r7, #20]
}
 8003b68:	bf00      	nop
 8003b6a:	e7fe      	b.n	8003b6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01f      	beq.n	8003bb2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	e012      	b.n	8003b9e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	7819      	ldrb	r1, [r3, #0]
 8003b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	3334      	adds	r3, #52	; 0x34
 8003b88:	460a      	mov	r2, r1
 8003b8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4413      	add	r3, r2
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d006      	beq.n	8003ba6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	2b0f      	cmp	r3, #15
 8003ba2:	d9e9      	bls.n	8003b78 <prvInitialiseNewTask+0x64>
 8003ba4:	e000      	b.n	8003ba8 <prvInitialiseNewTask+0x94>
			{
				break;
 8003ba6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bb0:	e003      	b.n	8003bba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	2b37      	cmp	r3, #55	; 0x37
 8003bbe:	d901      	bls.n	8003bc4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bc0:	2337      	movs	r3, #55	; 0x37
 8003bc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	3304      	adds	r3, #4
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe ff8e 	bl	8002afc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	3318      	adds	r3, #24
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fe ff89 	bl	8002afc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c02:	2200      	movs	r2, #0
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	68f9      	ldr	r1, [r7, #12]
 8003c12:	69b8      	ldr	r0, [r7, #24]
 8003c14:	f001 f9f2 	bl	8004ffc <pxPortInitialiseStack>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c2a:	bf00      	nop
 8003c2c:	3720      	adds	r7, #32
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c3c:	f001 fb0a 	bl	8005254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c40:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <prvAddNewTaskToReadyList+0xc4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	4a2c      	ldr	r2, [pc, #176]	; (8003cf8 <prvAddNewTaskToReadyList+0xc4>)
 8003c48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c4a:	4b2c      	ldr	r3, [pc, #176]	; (8003cfc <prvAddNewTaskToReadyList+0xc8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c52:	4a2a      	ldr	r2, [pc, #168]	; (8003cfc <prvAddNewTaskToReadyList+0xc8>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c58:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <prvAddNewTaskToReadyList+0xc4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d110      	bne.n	8003c82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c60:	f000 fbe2 	bl	8004428 <prvInitialiseTaskLists>
 8003c64:	e00d      	b.n	8003c82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c66:	4b26      	ldr	r3, [pc, #152]	; (8003d00 <prvAddNewTaskToReadyList+0xcc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c6e:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <prvAddNewTaskToReadyList+0xc8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d802      	bhi.n	8003c82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c7c:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <prvAddNewTaskToReadyList+0xc8>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c82:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <prvAddNewTaskToReadyList+0xd0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3301      	adds	r3, #1
 8003c88:	4a1e      	ldr	r2, [pc, #120]	; (8003d04 <prvAddNewTaskToReadyList+0xd0>)
 8003c8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c8c:	4b1d      	ldr	r3, [pc, #116]	; (8003d04 <prvAddNewTaskToReadyList+0xd0>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c98:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <prvAddNewTaskToReadyList+0xd4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d903      	bls.n	8003ca8 <prvAddNewTaskToReadyList+0x74>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <prvAddNewTaskToReadyList+0xd4>)
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4a15      	ldr	r2, [pc, #84]	; (8003d0c <prvAddNewTaskToReadyList+0xd8>)
 8003cb6:	441a      	add	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f7fe ff29 	bl	8002b16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003cc4:	f001 faf6 	bl	80052b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <prvAddNewTaskToReadyList+0xcc>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00e      	beq.n	8003cee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <prvAddNewTaskToReadyList+0xc8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d207      	bcs.n	8003cee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003cde:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <prvAddNewTaskToReadyList+0xdc>)
 8003ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000d44 	.word	0x20000d44
 8003cfc:	20000870 	.word	0x20000870
 8003d00:	20000d50 	.word	0x20000d50
 8003d04:	20000d60 	.word	0x20000d60
 8003d08:	20000d4c 	.word	0x20000d4c
 8003d0c:	20000874 	.word	0x20000874
 8003d10:	e000ed04 	.word	0xe000ed04

08003d14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	; 0x28
 8003d18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d22:	463a      	mov	r2, r7
 8003d24:	1d39      	adds	r1, r7, #4
 8003d26:	f107 0308 	add.w	r3, r7, #8
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fe fe92 	bl	8002a54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d30:	6839      	ldr	r1, [r7, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	9202      	str	r2, [sp, #8]
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	460a      	mov	r2, r1
 8003d42:	4921      	ldr	r1, [pc, #132]	; (8003dc8 <vTaskStartScheduler+0xb4>)
 8003d44:	4821      	ldr	r0, [pc, #132]	; (8003dcc <vTaskStartScheduler+0xb8>)
 8003d46:	f7ff fe43 	bl	80039d0 <xTaskCreateStatic>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4a20      	ldr	r2, [pc, #128]	; (8003dd0 <vTaskStartScheduler+0xbc>)
 8003d4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d50:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <vTaskStartScheduler+0xbc>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	e001      	b.n	8003d62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d102      	bne.n	8003d6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d68:	f000 fdfa 	bl	8004960 <xTimerCreateTimerTask>
 8003d6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d116      	bne.n	8003da2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	613b      	str	r3, [r7, #16]
}
 8003d86:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d88:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <vTaskStartScheduler+0xc0>)
 8003d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d90:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <vTaskStartScheduler+0xc4>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d96:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <vTaskStartScheduler+0xc8>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d9c:	f001 f9b8 	bl	8005110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003da0:	e00e      	b.n	8003dc0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d10a      	bne.n	8003dc0 <vTaskStartScheduler+0xac>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	60fb      	str	r3, [r7, #12]
}
 8003dbc:	bf00      	nop
 8003dbe:	e7fe      	b.n	8003dbe <vTaskStartScheduler+0xaa>
}
 8003dc0:	bf00      	nop
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	080061f8 	.word	0x080061f8
 8003dcc:	080043f9 	.word	0x080043f9
 8003dd0:	20000d68 	.word	0x20000d68
 8003dd4:	20000d64 	.word	0x20000d64
 8003dd8:	20000d50 	.word	0x20000d50
 8003ddc:	20000d48 	.word	0x20000d48

08003de0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <vTaskSuspendAll+0x18>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	4a03      	ldr	r2, [pc, #12]	; (8003df8 <vTaskSuspendAll+0x18>)
 8003dec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003dee:	bf00      	nop
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	20000d6c 	.word	0x20000d6c

08003dfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e0a:	4b42      	ldr	r3, [pc, #264]	; (8003f14 <xTaskResumeAll+0x118>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <xTaskResumeAll+0x2c>
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	603b      	str	r3, [r7, #0]
}
 8003e24:	bf00      	nop
 8003e26:	e7fe      	b.n	8003e26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e28:	f001 fa14 	bl	8005254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e2c:	4b39      	ldr	r3, [pc, #228]	; (8003f14 <xTaskResumeAll+0x118>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	4a38      	ldr	r2, [pc, #224]	; (8003f14 <xTaskResumeAll+0x118>)
 8003e34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e36:	4b37      	ldr	r3, [pc, #220]	; (8003f14 <xTaskResumeAll+0x118>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d162      	bne.n	8003f04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e3e:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <xTaskResumeAll+0x11c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d05e      	beq.n	8003f04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e46:	e02f      	b.n	8003ea8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e48:	4b34      	ldr	r3, [pc, #208]	; (8003f1c <xTaskResumeAll+0x120>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3318      	adds	r3, #24
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe febb 	bl	8002bd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe feb6 	bl	8002bd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e68:	4b2d      	ldr	r3, [pc, #180]	; (8003f20 <xTaskResumeAll+0x124>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d903      	bls.n	8003e78 <xTaskResumeAll+0x7c>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	4a2a      	ldr	r2, [pc, #168]	; (8003f20 <xTaskResumeAll+0x124>)
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4a27      	ldr	r2, [pc, #156]	; (8003f24 <xTaskResumeAll+0x128>)
 8003e86:	441a      	add	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f7fe fe41 	bl	8002b16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	4b23      	ldr	r3, [pc, #140]	; (8003f28 <xTaskResumeAll+0x12c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d302      	bcc.n	8003ea8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ea2:	4b22      	ldr	r3, [pc, #136]	; (8003f2c <xTaskResumeAll+0x130>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ea8:	4b1c      	ldr	r3, [pc, #112]	; (8003f1c <xTaskResumeAll+0x120>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1cb      	bne.n	8003e48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003eb6:	f000 fb55 	bl	8004564 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003eba:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <xTaskResumeAll+0x134>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d010      	beq.n	8003ee8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ec6:	f000 f847 	bl	8003f58 <xTaskIncrementTick>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ed0:	4b16      	ldr	r3, [pc, #88]	; (8003f2c <xTaskResumeAll+0x130>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f1      	bne.n	8003ec6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003ee2:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <xTaskResumeAll+0x134>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ee8:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <xTaskResumeAll+0x130>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ef4:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <xTaskResumeAll+0x138>)
 8003ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f04:	f001 f9d6 	bl	80052b4 <vPortExitCritical>

	return xAlreadyYielded;
 8003f08:	68bb      	ldr	r3, [r7, #8]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000d6c 	.word	0x20000d6c
 8003f18:	20000d44 	.word	0x20000d44
 8003f1c:	20000d04 	.word	0x20000d04
 8003f20:	20000d4c 	.word	0x20000d4c
 8003f24:	20000874 	.word	0x20000874
 8003f28:	20000870 	.word	0x20000870
 8003f2c:	20000d58 	.word	0x20000d58
 8003f30:	20000d54 	.word	0x20000d54
 8003f34:	e000ed04 	.word	0xe000ed04

08003f38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f3e:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <xTaskGetTickCount+0x1c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f44:	687b      	ldr	r3, [r7, #4]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000d48 	.word	0x20000d48

08003f58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f62:	4b4f      	ldr	r3, [pc, #316]	; (80040a0 <xTaskIncrementTick+0x148>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f040 808f 	bne.w	800408a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f6c:	4b4d      	ldr	r3, [pc, #308]	; (80040a4 <xTaskIncrementTick+0x14c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3301      	adds	r3, #1
 8003f72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f74:	4a4b      	ldr	r2, [pc, #300]	; (80040a4 <xTaskIncrementTick+0x14c>)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d120      	bne.n	8003fc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f80:	4b49      	ldr	r3, [pc, #292]	; (80040a8 <xTaskIncrementTick+0x150>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	603b      	str	r3, [r7, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <xTaskIncrementTick+0x46>
 8003fa0:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <xTaskIncrementTick+0x150>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	4b41      	ldr	r3, [pc, #260]	; (80040ac <xTaskIncrementTick+0x154>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a3f      	ldr	r2, [pc, #252]	; (80040a8 <xTaskIncrementTick+0x150>)
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	4a3f      	ldr	r2, [pc, #252]	; (80040ac <xTaskIncrementTick+0x154>)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	4b3e      	ldr	r3, [pc, #248]	; (80040b0 <xTaskIncrementTick+0x158>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	4a3d      	ldr	r2, [pc, #244]	; (80040b0 <xTaskIncrementTick+0x158>)
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	f000 fad1 	bl	8004564 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fc2:	4b3c      	ldr	r3, [pc, #240]	; (80040b4 <xTaskIncrementTick+0x15c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d349      	bcc.n	8004060 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fcc:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <xTaskIncrementTick+0x150>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d104      	bne.n	8003fe0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fd6:	4b37      	ldr	r3, [pc, #220]	; (80040b4 <xTaskIncrementTick+0x15c>)
 8003fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fdc:	601a      	str	r2, [r3, #0]
					break;
 8003fde:	e03f      	b.n	8004060 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe0:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <xTaskIncrementTick+0x150>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d203      	bcs.n	8004000 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ff8:	4a2e      	ldr	r2, [pc, #184]	; (80040b4 <xTaskIncrementTick+0x15c>)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ffe:	e02f      	b.n	8004060 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	3304      	adds	r3, #4
 8004004:	4618      	mov	r0, r3
 8004006:	f7fe fde3 	bl	8002bd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	2b00      	cmp	r3, #0
 8004010:	d004      	beq.n	800401c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3318      	adds	r3, #24
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe fdda 	bl	8002bd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004020:	4b25      	ldr	r3, [pc, #148]	; (80040b8 <xTaskIncrementTick+0x160>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d903      	bls.n	8004030 <xTaskIncrementTick+0xd8>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	4a22      	ldr	r2, [pc, #136]	; (80040b8 <xTaskIncrementTick+0x160>)
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4a1f      	ldr	r2, [pc, #124]	; (80040bc <xTaskIncrementTick+0x164>)
 800403e:	441a      	add	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	3304      	adds	r3, #4
 8004044:	4619      	mov	r1, r3
 8004046:	4610      	mov	r0, r2
 8004048:	f7fe fd65 	bl	8002b16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004050:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <xTaskIncrementTick+0x168>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	429a      	cmp	r2, r3
 8004058:	d3b8      	bcc.n	8003fcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800405a:	2301      	movs	r3, #1
 800405c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800405e:	e7b5      	b.n	8003fcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004060:	4b17      	ldr	r3, [pc, #92]	; (80040c0 <xTaskIncrementTick+0x168>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004066:	4915      	ldr	r1, [pc, #84]	; (80040bc <xTaskIncrementTick+0x164>)
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d901      	bls.n	800407c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004078:	2301      	movs	r3, #1
 800407a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800407c:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <xTaskIncrementTick+0x16c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d007      	beq.n	8004094 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004084:	2301      	movs	r3, #1
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e004      	b.n	8004094 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800408a:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <xTaskIncrementTick+0x170>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3301      	adds	r3, #1
 8004090:	4a0d      	ldr	r2, [pc, #52]	; (80040c8 <xTaskIncrementTick+0x170>)
 8004092:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004094:	697b      	ldr	r3, [r7, #20]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000d6c 	.word	0x20000d6c
 80040a4:	20000d48 	.word	0x20000d48
 80040a8:	20000cfc 	.word	0x20000cfc
 80040ac:	20000d00 	.word	0x20000d00
 80040b0:	20000d5c 	.word	0x20000d5c
 80040b4:	20000d64 	.word	0x20000d64
 80040b8:	20000d4c 	.word	0x20000d4c
 80040bc:	20000874 	.word	0x20000874
 80040c0:	20000870 	.word	0x20000870
 80040c4:	20000d58 	.word	0x20000d58
 80040c8:	20000d54 	.word	0x20000d54

080040cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040d2:	4b28      	ldr	r3, [pc, #160]	; (8004174 <vTaskSwitchContext+0xa8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040da:	4b27      	ldr	r3, [pc, #156]	; (8004178 <vTaskSwitchContext+0xac>)
 80040dc:	2201      	movs	r2, #1
 80040de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040e0:	e041      	b.n	8004166 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80040e2:	4b25      	ldr	r3, [pc, #148]	; (8004178 <vTaskSwitchContext+0xac>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040e8:	4b24      	ldr	r3, [pc, #144]	; (800417c <vTaskSwitchContext+0xb0>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	e010      	b.n	8004112 <vTaskSwitchContext+0x46>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <vTaskSwitchContext+0x40>
	__asm volatile
 80040f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	607b      	str	r3, [r7, #4]
}
 8004108:	bf00      	nop
 800410a:	e7fe      	b.n	800410a <vTaskSwitchContext+0x3e>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3b01      	subs	r3, #1
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	491b      	ldr	r1, [pc, #108]	; (8004180 <vTaskSwitchContext+0xb4>)
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0e4      	beq.n	80040f0 <vTaskSwitchContext+0x24>
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4a13      	ldr	r2, [pc, #76]	; (8004180 <vTaskSwitchContext+0xb4>)
 8004132:	4413      	add	r3, r2
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	605a      	str	r2, [r3, #4]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	3308      	adds	r3, #8
 8004148:	429a      	cmp	r2, r3
 800414a:	d104      	bne.n	8004156 <vTaskSwitchContext+0x8a>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4a09      	ldr	r2, [pc, #36]	; (8004184 <vTaskSwitchContext+0xb8>)
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	4a06      	ldr	r2, [pc, #24]	; (800417c <vTaskSwitchContext+0xb0>)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6013      	str	r3, [r2, #0]
}
 8004166:	bf00      	nop
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	20000d6c 	.word	0x20000d6c
 8004178:	20000d58 	.word	0x20000d58
 800417c:	20000d4c 	.word	0x20000d4c
 8004180:	20000874 	.word	0x20000874
 8004184:	20000870 	.word	0x20000870

08004188 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10a      	bne.n	80041ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	60fb      	str	r3, [r7, #12]
}
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041ae:	4b07      	ldr	r3, [pc, #28]	; (80041cc <vTaskPlaceOnEventList+0x44>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3318      	adds	r3, #24
 80041b4:	4619      	mov	r1, r3
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fe fcd1 	bl	8002b5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041bc:	2101      	movs	r1, #1
 80041be:	6838      	ldr	r0, [r7, #0]
 80041c0:	f000 fb7a 	bl	80048b8 <prvAddCurrentTaskToDelayedList>
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20000870 	.word	0x20000870

080041d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	617b      	str	r3, [r7, #20]
}
 80041f4:	bf00      	nop
 80041f6:	e7fe      	b.n	80041f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041f8:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <vTaskPlaceOnEventListRestricted+0x54>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3318      	adds	r3, #24
 80041fe:	4619      	mov	r1, r3
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7fe fc88 	bl	8002b16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800420c:	f04f 33ff 	mov.w	r3, #4294967295
 8004210:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	68b8      	ldr	r0, [r7, #8]
 8004216:	f000 fb4f 	bl	80048b8 <prvAddCurrentTaskToDelayedList>
	}
 800421a:	bf00      	nop
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000870 	.word	0x20000870

08004228 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	60fb      	str	r3, [r7, #12]
}
 8004250:	bf00      	nop
 8004252:	e7fe      	b.n	8004252 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	3318      	adds	r3, #24
 8004258:	4618      	mov	r0, r3
 800425a:	f7fe fcb9 	bl	8002bd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800425e:	4b1e      	ldr	r3, [pc, #120]	; (80042d8 <xTaskRemoveFromEventList+0xb0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d11d      	bne.n	80042a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	3304      	adds	r3, #4
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe fcb0 	bl	8002bd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004274:	4b19      	ldr	r3, [pc, #100]	; (80042dc <xTaskRemoveFromEventList+0xb4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d903      	bls.n	8004284 <xTaskRemoveFromEventList+0x5c>
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	4a16      	ldr	r2, [pc, #88]	; (80042dc <xTaskRemoveFromEventList+0xb4>)
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4a13      	ldr	r2, [pc, #76]	; (80042e0 <xTaskRemoveFromEventList+0xb8>)
 8004292:	441a      	add	r2, r3
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	3304      	adds	r3, #4
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f7fe fc3b 	bl	8002b16 <vListInsertEnd>
 80042a0:	e005      	b.n	80042ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	3318      	adds	r3, #24
 80042a6:	4619      	mov	r1, r3
 80042a8:	480e      	ldr	r0, [pc, #56]	; (80042e4 <xTaskRemoveFromEventList+0xbc>)
 80042aa:	f7fe fc34 	bl	8002b16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <xTaskRemoveFromEventList+0xc0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d905      	bls.n	80042c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042bc:	2301      	movs	r3, #1
 80042be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <xTaskRemoveFromEventList+0xc4>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	e001      	b.n	80042cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042cc:	697b      	ldr	r3, [r7, #20]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000d6c 	.word	0x20000d6c
 80042dc:	20000d4c 	.word	0x20000d4c
 80042e0:	20000874 	.word	0x20000874
 80042e4:	20000d04 	.word	0x20000d04
 80042e8:	20000870 	.word	0x20000870
 80042ec:	20000d58 	.word	0x20000d58

080042f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <vTaskInternalSetTimeOutState+0x24>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <vTaskInternalSetTimeOutState+0x28>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	605a      	str	r2, [r3, #4]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	20000d5c 	.word	0x20000d5c
 8004318:	20000d48 	.word	0x20000d48

0800431c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	613b      	str	r3, [r7, #16]
}
 800433e:	bf00      	nop
 8004340:	e7fe      	b.n	8004340 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	60fb      	str	r3, [r7, #12]
}
 800435a:	bf00      	nop
 800435c:	e7fe      	b.n	800435c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800435e:	f000 ff79 	bl	8005254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004362:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <xTaskCheckForTimeOut+0xbc>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437a:	d102      	bne.n	8004382 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	e023      	b.n	80043ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	4b15      	ldr	r3, [pc, #84]	; (80043dc <xTaskCheckForTimeOut+0xc0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d007      	beq.n	800439e <xTaskCheckForTimeOut+0x82>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	429a      	cmp	r2, r3
 8004396:	d302      	bcc.n	800439e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004398:	2301      	movs	r3, #1
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	e015      	b.n	80043ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d20b      	bcs.n	80043c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	1ad2      	subs	r2, r2, r3
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff ff9b 	bl	80042f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	e004      	b.n	80043ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043c6:	2301      	movs	r3, #1
 80043c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043ca:	f000 ff73 	bl	80052b4 <vPortExitCritical>

	return xReturn;
 80043ce:	69fb      	ldr	r3, [r7, #28]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20000d48 	.word	0x20000d48
 80043dc:	20000d5c 	.word	0x20000d5c

080043e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <vTaskMissedYield+0x14>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
}
 80043ea:	bf00      	nop
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	20000d58 	.word	0x20000d58

080043f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004400:	f000 f852 	bl	80044a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <prvIdleTask+0x28>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d9f9      	bls.n	8004400 <prvIdleTask+0x8>
			{
				taskYIELD();
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <prvIdleTask+0x2c>)
 800440e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800441c:	e7f0      	b.n	8004400 <prvIdleTask+0x8>
 800441e:	bf00      	nop
 8004420:	20000874 	.word	0x20000874
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800442e:	2300      	movs	r3, #0
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	e00c      	b.n	800444e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4a12      	ldr	r2, [pc, #72]	; (8004488 <prvInitialiseTaskLists+0x60>)
 8004440:	4413      	add	r3, r2
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe fb3a 	bl	8002abc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3301      	adds	r3, #1
 800444c:	607b      	str	r3, [r7, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b37      	cmp	r3, #55	; 0x37
 8004452:	d9ef      	bls.n	8004434 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004454:	480d      	ldr	r0, [pc, #52]	; (800448c <prvInitialiseTaskLists+0x64>)
 8004456:	f7fe fb31 	bl	8002abc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800445a:	480d      	ldr	r0, [pc, #52]	; (8004490 <prvInitialiseTaskLists+0x68>)
 800445c:	f7fe fb2e 	bl	8002abc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004460:	480c      	ldr	r0, [pc, #48]	; (8004494 <prvInitialiseTaskLists+0x6c>)
 8004462:	f7fe fb2b 	bl	8002abc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004466:	480c      	ldr	r0, [pc, #48]	; (8004498 <prvInitialiseTaskLists+0x70>)
 8004468:	f7fe fb28 	bl	8002abc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800446c:	480b      	ldr	r0, [pc, #44]	; (800449c <prvInitialiseTaskLists+0x74>)
 800446e:	f7fe fb25 	bl	8002abc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004472:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <prvInitialiseTaskLists+0x78>)
 8004474:	4a05      	ldr	r2, [pc, #20]	; (800448c <prvInitialiseTaskLists+0x64>)
 8004476:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <prvInitialiseTaskLists+0x7c>)
 800447a:	4a05      	ldr	r2, [pc, #20]	; (8004490 <prvInitialiseTaskLists+0x68>)
 800447c:	601a      	str	r2, [r3, #0]
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000874 	.word	0x20000874
 800448c:	20000cd4 	.word	0x20000cd4
 8004490:	20000ce8 	.word	0x20000ce8
 8004494:	20000d04 	.word	0x20000d04
 8004498:	20000d18 	.word	0x20000d18
 800449c:	20000d30 	.word	0x20000d30
 80044a0:	20000cfc 	.word	0x20000cfc
 80044a4:	20000d00 	.word	0x20000d00

080044a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044ae:	e019      	b.n	80044e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044b0:	f000 fed0 	bl	8005254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044b4:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <prvCheckTasksWaitingTermination+0x50>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3304      	adds	r3, #4
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fe fb85 	bl	8002bd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044c6:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <prvCheckTasksWaitingTermination+0x54>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	4a0b      	ldr	r2, [pc, #44]	; (80044fc <prvCheckTasksWaitingTermination+0x54>)
 80044ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <prvCheckTasksWaitingTermination+0x58>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <prvCheckTasksWaitingTermination+0x58>)
 80044d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044da:	f000 feeb 	bl	80052b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f810 	bl	8004504 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044e4:	4b06      	ldr	r3, [pc, #24]	; (8004500 <prvCheckTasksWaitingTermination+0x58>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e1      	bne.n	80044b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000d18 	.word	0x20000d18
 80044fc:	20000d44 	.word	0x20000d44
 8004500:	20000d2c 	.word	0x20000d2c

08004504 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004512:	2b00      	cmp	r3, #0
 8004514:	d108      	bne.n	8004528 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	4618      	mov	r0, r3
 800451c:	f001 f888 	bl	8005630 <vPortFree>
				vPortFree( pxTCB );
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f001 f885 	bl	8005630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004526:	e018      	b.n	800455a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800452e:	2b01      	cmp	r3, #1
 8004530:	d103      	bne.n	800453a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f001 f87c 	bl	8005630 <vPortFree>
	}
 8004538:	e00f      	b.n	800455a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004540:	2b02      	cmp	r3, #2
 8004542:	d00a      	beq.n	800455a <prvDeleteTCB+0x56>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	60fb      	str	r3, [r7, #12]
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <prvDeleteTCB+0x54>
	}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800456a:	4b0c      	ldr	r3, [pc, #48]	; (800459c <prvResetNextTaskUnblockTime+0x38>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <prvResetNextTaskUnblockTime+0x3c>)
 8004576:	f04f 32ff 	mov.w	r2, #4294967295
 800457a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800457c:	e008      	b.n	8004590 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800457e:	4b07      	ldr	r3, [pc, #28]	; (800459c <prvResetNextTaskUnblockTime+0x38>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	4a04      	ldr	r2, [pc, #16]	; (80045a0 <prvResetNextTaskUnblockTime+0x3c>)
 800458e:	6013      	str	r3, [r2, #0]
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	20000cfc 	.word	0x20000cfc
 80045a0:	20000d64 	.word	0x20000d64

080045a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <xTaskGetSchedulerState+0x34>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d102      	bne.n	80045b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045b2:	2301      	movs	r3, #1
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	e008      	b.n	80045ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b8:	4b08      	ldr	r3, [pc, #32]	; (80045dc <xTaskGetSchedulerState+0x38>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045c0:	2302      	movs	r3, #2
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	e001      	b.n	80045ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045c6:	2300      	movs	r3, #0
 80045c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045ca:	687b      	ldr	r3, [r7, #4]
	}
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	20000d50 	.word	0x20000d50
 80045dc:	20000d6c 	.word	0x20000d6c

080045e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d051      	beq.n	800469a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fa:	4b2a      	ldr	r3, [pc, #168]	; (80046a4 <xTaskPriorityInherit+0xc4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	429a      	cmp	r2, r3
 8004602:	d241      	bcs.n	8004688 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	db06      	blt.n	800461a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800460c:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <xTaskPriorityInherit+0xc4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	6959      	ldr	r1, [r3, #20]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <xTaskPriorityInherit+0xc8>)
 800462c:	4413      	add	r3, r2
 800462e:	4299      	cmp	r1, r3
 8004630:	d122      	bne.n	8004678 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	3304      	adds	r3, #4
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe faca 	bl	8002bd0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800463c:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <xTaskPriorityInherit+0xc4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464a:	4b18      	ldr	r3, [pc, #96]	; (80046ac <xTaskPriorityInherit+0xcc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d903      	bls.n	800465a <xTaskPriorityInherit+0x7a>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	4a15      	ldr	r2, [pc, #84]	; (80046ac <xTaskPriorityInherit+0xcc>)
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4a10      	ldr	r2, [pc, #64]	; (80046a8 <xTaskPriorityInherit+0xc8>)
 8004668:	441a      	add	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	3304      	adds	r3, #4
 800466e:	4619      	mov	r1, r3
 8004670:	4610      	mov	r0, r2
 8004672:	f7fe fa50 	bl	8002b16 <vListInsertEnd>
 8004676:	e004      	b.n	8004682 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004678:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <xTaskPriorityInherit+0xc4>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004682:	2301      	movs	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	e008      	b.n	800469a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <xTaskPriorityInherit+0xc4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	429a      	cmp	r2, r3
 8004694:	d201      	bcs.n	800469a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004696:	2301      	movs	r3, #1
 8004698:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800469a:	68fb      	ldr	r3, [r7, #12]
	}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20000870 	.word	0x20000870
 80046a8:	20000874 	.word	0x20000874
 80046ac:	20000d4c 	.word	0x20000d4c

080046b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d056      	beq.n	8004774 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046c6:	4b2e      	ldr	r3, [pc, #184]	; (8004780 <xTaskPriorityDisinherit+0xd0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d00a      	beq.n	80046e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	60fb      	str	r3, [r7, #12]
}
 80046e2:	bf00      	nop
 80046e4:	e7fe      	b.n	80046e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	60bb      	str	r3, [r7, #8]
}
 8004700:	bf00      	nop
 8004702:	e7fe      	b.n	8004702 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004708:	1e5a      	subs	r2, r3, #1
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004716:	429a      	cmp	r2, r3
 8004718:	d02c      	beq.n	8004774 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471e:	2b00      	cmp	r3, #0
 8004720:	d128      	bne.n	8004774 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	3304      	adds	r3, #4
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fa52 	bl	8002bd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004744:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <xTaskPriorityDisinherit+0xd4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d903      	bls.n	8004754 <xTaskPriorityDisinherit+0xa4>
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	4a0c      	ldr	r2, [pc, #48]	; (8004784 <xTaskPriorityDisinherit+0xd4>)
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4a09      	ldr	r2, [pc, #36]	; (8004788 <xTaskPriorityDisinherit+0xd8>)
 8004762:	441a      	add	r2, r3
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f7fe f9d3 	bl	8002b16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004770:	2301      	movs	r3, #1
 8004772:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004774:	697b      	ldr	r3, [r7, #20]
	}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000870 	.word	0x20000870
 8004784:	20000d4c 	.word	0x20000d4c
 8004788:	20000874 	.word	0x20000874

0800478c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800479a:	2301      	movs	r3, #1
 800479c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d06a      	beq.n	800487a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	60fb      	str	r3, [r7, #12]
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d902      	bls.n	80047d2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	e002      	b.n	80047d8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d04b      	beq.n	800487a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d146      	bne.n	800487a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80047ec:	4b25      	ldr	r3, [pc, #148]	; (8004884 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d10a      	bne.n	800480c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	60bb      	str	r3, [r7, #8]
}
 8004808:	bf00      	nop
 800480a:	e7fe      	b.n	800480a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	db04      	blt.n	800482a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	6959      	ldr	r1, [r3, #20]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4a13      	ldr	r2, [pc, #76]	; (8004888 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800483a:	4413      	add	r3, r2
 800483c:	4299      	cmp	r1, r3
 800483e:	d11c      	bne.n	800487a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	3304      	adds	r3, #4
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe f9c3 	bl	8002bd0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484e:	4b0f      	ldr	r3, [pc, #60]	; (800488c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d903      	bls.n	800485e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	4a0c      	ldr	r2, [pc, #48]	; (800488c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4a07      	ldr	r2, [pc, #28]	; (8004888 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800486c:	441a      	add	r2, r3
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	3304      	adds	r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f7fe f94e 	bl	8002b16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800487a:	bf00      	nop
 800487c:	3720      	adds	r7, #32
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000870 	.word	0x20000870
 8004888:	20000874 	.word	0x20000874
 800488c:	20000d4c 	.word	0x20000d4c

08004890 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004894:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048a2:	3201      	adds	r2, #1
 80048a4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80048a6:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80048a8:	681b      	ldr	r3, [r3, #0]
	}
 80048aa:	4618      	mov	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	20000870 	.word	0x20000870

080048b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048c2:	4b21      	ldr	r3, [pc, #132]	; (8004948 <prvAddCurrentTaskToDelayedList+0x90>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048c8:	4b20      	ldr	r3, [pc, #128]	; (800494c <prvAddCurrentTaskToDelayedList+0x94>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe f97e 	bl	8002bd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048da:	d10a      	bne.n	80048f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048e2:	4b1a      	ldr	r3, [pc, #104]	; (800494c <prvAddCurrentTaskToDelayedList+0x94>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3304      	adds	r3, #4
 80048e8:	4619      	mov	r1, r3
 80048ea:	4819      	ldr	r0, [pc, #100]	; (8004950 <prvAddCurrentTaskToDelayedList+0x98>)
 80048ec:	f7fe f913 	bl	8002b16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048f0:	e026      	b.n	8004940 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4413      	add	r3, r2
 80048f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048fa:	4b14      	ldr	r3, [pc, #80]	; (800494c <prvAddCurrentTaskToDelayedList+0x94>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	429a      	cmp	r2, r3
 8004908:	d209      	bcs.n	800491e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <prvAddCurrentTaskToDelayedList+0x9c>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <prvAddCurrentTaskToDelayedList+0x94>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3304      	adds	r3, #4
 8004914:	4619      	mov	r1, r3
 8004916:	4610      	mov	r0, r2
 8004918:	f7fe f921 	bl	8002b5e <vListInsert>
}
 800491c:	e010      	b.n	8004940 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800491e:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b0a      	ldr	r3, [pc, #40]	; (800494c <prvAddCurrentTaskToDelayedList+0x94>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3304      	adds	r3, #4
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f7fe f917 	bl	8002b5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	429a      	cmp	r2, r3
 8004938:	d202      	bcs.n	8004940 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800493a:	4a08      	ldr	r2, [pc, #32]	; (800495c <prvAddCurrentTaskToDelayedList+0xa4>)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	6013      	str	r3, [r2, #0]
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20000d48 	.word	0x20000d48
 800494c:	20000870 	.word	0x20000870
 8004950:	20000d30 	.word	0x20000d30
 8004954:	20000d00 	.word	0x20000d00
 8004958:	20000cfc 	.word	0x20000cfc
 800495c:	20000d64 	.word	0x20000d64

08004960 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	; 0x28
 8004964:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800496a:	f000 fb07 	bl	8004f7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800496e:	4b1c      	ldr	r3, [pc, #112]	; (80049e0 <xTimerCreateTimerTask+0x80>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d021      	beq.n	80049ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800497e:	1d3a      	adds	r2, r7, #4
 8004980:	f107 0108 	add.w	r1, r7, #8
 8004984:	f107 030c 	add.w	r3, r7, #12
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe f87d 	bl	8002a88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	9202      	str	r2, [sp, #8]
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	2302      	movs	r3, #2
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	2300      	movs	r3, #0
 800499e:	460a      	mov	r2, r1
 80049a0:	4910      	ldr	r1, [pc, #64]	; (80049e4 <xTimerCreateTimerTask+0x84>)
 80049a2:	4811      	ldr	r0, [pc, #68]	; (80049e8 <xTimerCreateTimerTask+0x88>)
 80049a4:	f7ff f814 	bl	80039d0 <xTaskCreateStatic>
 80049a8:	4603      	mov	r3, r0
 80049aa:	4a10      	ldr	r2, [pc, #64]	; (80049ec <xTimerCreateTimerTask+0x8c>)
 80049ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80049ae:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <xTimerCreateTimerTask+0x8c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80049b6:	2301      	movs	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	613b      	str	r3, [r7, #16]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80049d6:	697b      	ldr	r3, [r7, #20]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000da0 	.word	0x20000da0
 80049e4:	08006200 	.word	0x08006200
 80049e8:	08004b25 	.word	0x08004b25
 80049ec:	20000da4 	.word	0x20000da4

080049f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	; 0x28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	623b      	str	r3, [r7, #32]
}
 8004a1a:	bf00      	nop
 8004a1c:	e7fe      	b.n	8004a1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a1e:	4b1a      	ldr	r3, [pc, #104]	; (8004a88 <xTimerGenericCommand+0x98>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d02a      	beq.n	8004a7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b05      	cmp	r3, #5
 8004a36:	dc18      	bgt.n	8004a6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a38:	f7ff fdb4 	bl	80045a4 <xTaskGetSchedulerState>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d109      	bne.n	8004a56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a42:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <xTimerGenericCommand+0x98>)
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	f107 0110 	add.w	r1, r7, #16
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a4e:	f7fe fa27 	bl	8002ea0 <xQueueGenericSend>
 8004a52:	6278      	str	r0, [r7, #36]	; 0x24
 8004a54:	e012      	b.n	8004a7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a56:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <xTimerGenericCommand+0x98>)
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	f107 0110 	add.w	r1, r7, #16
 8004a5e:	2300      	movs	r3, #0
 8004a60:	2200      	movs	r2, #0
 8004a62:	f7fe fa1d 	bl	8002ea0 <xQueueGenericSend>
 8004a66:	6278      	str	r0, [r7, #36]	; 0x24
 8004a68:	e008      	b.n	8004a7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a6a:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <xTimerGenericCommand+0x98>)
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	f107 0110 	add.w	r1, r7, #16
 8004a72:	2300      	movs	r3, #0
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	f7fe fb11 	bl	800309c <xQueueGenericSendFromISR>
 8004a7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3728      	adds	r7, #40	; 0x28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000da0 	.word	0x20000da0

08004a8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a96:	4b22      	ldr	r3, [pc, #136]	; (8004b20 <prvProcessExpiredTimer+0x94>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fe f893 	bl	8002bd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d022      	beq.n	8004afe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	699a      	ldr	r2, [r3, #24]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	18d1      	adds	r1, r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	6978      	ldr	r0, [r7, #20]
 8004ac6:	f000 f8d1 	bl	8004c6c <prvInsertTimerInActiveList>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01f      	beq.n	8004b10 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	2100      	movs	r1, #0
 8004ada:	6978      	ldr	r0, [r7, #20]
 8004adc:	f7ff ff88 	bl	80049f0 <xTimerGenericCommand>
 8004ae0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d113      	bne.n	8004b10 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	60fb      	str	r3, [r7, #12]
}
 8004afa:	bf00      	nop
 8004afc:	e7fe      	b.n	8004afc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	6978      	ldr	r0, [r7, #20]
 8004b16:	4798      	blx	r3
}
 8004b18:	bf00      	nop
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20000d98 	.word	0x20000d98

08004b24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b2c:	f107 0308 	add.w	r3, r7, #8
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 f857 	bl	8004be4 <prvGetNextExpireTime>
 8004b36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f803 	bl	8004b48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b42:	f000 f8d5 	bl	8004cf0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b46:	e7f1      	b.n	8004b2c <prvTimerTask+0x8>

08004b48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b52:	f7ff f945 	bl	8003de0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b56:	f107 0308 	add.w	r3, r7, #8
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 f866 	bl	8004c2c <prvSampleTimeNow>
 8004b60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d130      	bne.n	8004bca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <prvProcessTimerOrBlockTask+0x3c>
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d806      	bhi.n	8004b84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b76:	f7ff f941 	bl	8003dfc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b7a:	68f9      	ldr	r1, [r7, #12]
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff ff85 	bl	8004a8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b82:	e024      	b.n	8004bce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d008      	beq.n	8004b9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b8a:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <prvProcessTimerOrBlockTask+0x90>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <prvProcessTimerOrBlockTask+0x50>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <prvProcessTimerOrBlockTask+0x52>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b9c:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <prvProcessTimerOrBlockTask+0x94>)
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f7fe fedd 	bl	8003968 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004bae:	f7ff f925 	bl	8003dfc <xTaskResumeAll>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004bb8:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <prvProcessTimerOrBlockTask+0x98>)
 8004bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	f3bf 8f6f 	isb	sy
}
 8004bc8:	e001      	b.n	8004bce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004bca:	f7ff f917 	bl	8003dfc <xTaskResumeAll>
}
 8004bce:	bf00      	nop
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000d9c 	.word	0x20000d9c
 8004bdc:	20000da0 	.word	0x20000da0
 8004be0:	e000ed04 	.word	0xe000ed04

08004be4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004bec:	4b0e      	ldr	r3, [pc, #56]	; (8004c28 <prvGetNextExpireTime+0x44>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <prvGetNextExpireTime+0x16>
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	e000      	b.n	8004bfc <prvGetNextExpireTime+0x18>
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d105      	bne.n	8004c14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <prvGetNextExpireTime+0x44>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e001      	b.n	8004c18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c18:	68fb      	ldr	r3, [r7, #12]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	20000d98 	.word	0x20000d98

08004c2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c34:	f7ff f980 	bl	8003f38 <xTaskGetTickCount>
 8004c38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <prvSampleTimeNow+0x3c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d205      	bcs.n	8004c50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c44:	f000 f936 	bl	8004eb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e002      	b.n	8004c56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c56:	4a04      	ldr	r2, [pc, #16]	; (8004c68 <prvSampleTimeNow+0x3c>)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000da8 	.word	0x20000da8

08004c6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d812      	bhi.n	8004cb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	1ad2      	subs	r2, r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d302      	bcc.n	8004ca6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	e01b      	b.n	8004cde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ca6:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <prvInsertTimerInActiveList+0x7c>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3304      	adds	r3, #4
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	f7fd ff54 	bl	8002b5e <vListInsert>
 8004cb6:	e012      	b.n	8004cde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d206      	bcs.n	8004cce <prvInsertTimerInActiveList+0x62>
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d302      	bcc.n	8004cce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	e007      	b.n	8004cde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cce:	4b07      	ldr	r3, [pc, #28]	; (8004cec <prvInsertTimerInActiveList+0x80>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f7fd ff40 	bl	8002b5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004cde:	697b      	ldr	r3, [r7, #20]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000d9c 	.word	0x20000d9c
 8004cec:	20000d98 	.word	0x20000d98

08004cf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08e      	sub	sp, #56	; 0x38
 8004cf4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cf6:	e0ca      	b.n	8004e8e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	da18      	bge.n	8004d30 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004cfe:	1d3b      	adds	r3, r7, #4
 8004d00:	3304      	adds	r3, #4
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	61fb      	str	r3, [r7, #28]
}
 8004d1c:	bf00      	nop
 8004d1e:	e7fe      	b.n	8004d1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d26:	6850      	ldr	r0, [r2, #4]
 8004d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d2a:	6892      	ldr	r2, [r2, #8]
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f2c0 80aa 	blt.w	8004e8c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d004      	beq.n	8004d4e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	3304      	adds	r3, #4
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fd ff41 	bl	8002bd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d4e:	463b      	mov	r3, r7
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff ff6b 	bl	8004c2c <prvSampleTimeNow>
 8004d56:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b09      	cmp	r3, #9
 8004d5c:	f200 8097 	bhi.w	8004e8e <prvProcessReceivedCommands+0x19e>
 8004d60:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <prvProcessReceivedCommands+0x78>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004d91 	.word	0x08004d91
 8004d6c:	08004d91 	.word	0x08004d91
 8004d70:	08004d91 	.word	0x08004d91
 8004d74:	08004e05 	.word	0x08004e05
 8004d78:	08004e19 	.word	0x08004e19
 8004d7c:	08004e63 	.word	0x08004e63
 8004d80:	08004d91 	.word	0x08004d91
 8004d84:	08004d91 	.word	0x08004d91
 8004d88:	08004e05 	.word	0x08004e05
 8004d8c:	08004e19 	.word	0x08004e19
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	18d1      	adds	r1, r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004db0:	f7ff ff5c 	bl	8004c6c <prvInsertTimerInActiveList>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d069      	beq.n	8004e8e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d05e      	beq.n	8004e8e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	441a      	add	r2, r3
 8004dd8:	2300      	movs	r3, #0
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	2100      	movs	r1, #0
 8004de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de2:	f7ff fe05 	bl	80049f0 <xTimerGenericCommand>
 8004de6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d14f      	bne.n	8004e8e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	61bb      	str	r3, [r7, #24]
}
 8004e00:	bf00      	nop
 8004e02:	e7fe      	b.n	8004e02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004e16:	e03a      	b.n	8004e8e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10a      	bne.n	8004e4e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	617b      	str	r3, [r7, #20]
}
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	18d1      	adds	r1, r2, r3
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e5c:	f7ff ff06 	bl	8004c6c <prvInsertTimerInActiveList>
					break;
 8004e60:	e015      	b.n	8004e8e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d103      	bne.n	8004e78 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e72:	f000 fbdd 	bl	8005630 <vPortFree>
 8004e76:	e00a      	b.n	8004e8e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e7e:	f023 0301 	bic.w	r3, r3, #1
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e8a:	e000      	b.n	8004e8e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004e8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e8e:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <prvProcessReceivedCommands+0x1c0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	1d39      	adds	r1, r7, #4
 8004e94:	2200      	movs	r2, #0
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe fa28 	bl	80032ec <xQueueReceive>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f47f af2a 	bne.w	8004cf8 <prvProcessReceivedCommands+0x8>
	}
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop
 8004ea8:	3730      	adds	r7, #48	; 0x30
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000da0 	.word	0x20000da0

08004eb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004eba:	e048      	b.n	8004f4e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ebc:	4b2d      	ldr	r3, [pc, #180]	; (8004f74 <prvSwitchTimerLists+0xc0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ec6:	4b2b      	ldr	r3, [pc, #172]	; (8004f74 <prvSwitchTimerLists+0xc0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fd fe7b 	bl	8002bd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d02e      	beq.n	8004f4e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d90e      	bls.n	8004f20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f0e:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <prvSwitchTimerLists+0xc0>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4619      	mov	r1, r3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f7fd fe20 	bl	8002b5e <vListInsert>
 8004f1e:	e016      	b.n	8004f4e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f20:	2300      	movs	r3, #0
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	2300      	movs	r3, #0
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	2100      	movs	r1, #0
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f7ff fd60 	bl	80049f0 <xTimerGenericCommand>
 8004f30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	603b      	str	r3, [r7, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	e7fe      	b.n	8004f4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f4e:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <prvSwitchTimerLists+0xc0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1b1      	bne.n	8004ebc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f58:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <prvSwitchTimerLists+0xc0>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <prvSwitchTimerLists+0xc4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a04      	ldr	r2, [pc, #16]	; (8004f74 <prvSwitchTimerLists+0xc0>)
 8004f64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f66:	4a04      	ldr	r2, [pc, #16]	; (8004f78 <prvSwitchTimerLists+0xc4>)
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	6013      	str	r3, [r2, #0]
}
 8004f6c:	bf00      	nop
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	20000d98 	.word	0x20000d98
 8004f78:	20000d9c 	.word	0x20000d9c

08004f7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f82:	f000 f967 	bl	8005254 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f86:	4b15      	ldr	r3, [pc, #84]	; (8004fdc <prvCheckForValidListAndQueue+0x60>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d120      	bne.n	8004fd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f8e:	4814      	ldr	r0, [pc, #80]	; (8004fe0 <prvCheckForValidListAndQueue+0x64>)
 8004f90:	f7fd fd94 	bl	8002abc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f94:	4813      	ldr	r0, [pc, #76]	; (8004fe4 <prvCheckForValidListAndQueue+0x68>)
 8004f96:	f7fd fd91 	bl	8002abc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f9a:	4b13      	ldr	r3, [pc, #76]	; (8004fe8 <prvCheckForValidListAndQueue+0x6c>)
 8004f9c:	4a10      	ldr	r2, [pc, #64]	; (8004fe0 <prvCheckForValidListAndQueue+0x64>)
 8004f9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fa0:	4b12      	ldr	r3, [pc, #72]	; (8004fec <prvCheckForValidListAndQueue+0x70>)
 8004fa2:	4a10      	ldr	r2, [pc, #64]	; (8004fe4 <prvCheckForValidListAndQueue+0x68>)
 8004fa4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <prvCheckForValidListAndQueue+0x74>)
 8004fac:	4a11      	ldr	r2, [pc, #68]	; (8004ff4 <prvCheckForValidListAndQueue+0x78>)
 8004fae:	2110      	movs	r1, #16
 8004fb0:	200a      	movs	r0, #10
 8004fb2:	f7fd fe9f 	bl	8002cf4 <xQueueGenericCreateStatic>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4a08      	ldr	r2, [pc, #32]	; (8004fdc <prvCheckForValidListAndQueue+0x60>)
 8004fba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004fbc:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <prvCheckForValidListAndQueue+0x60>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <prvCheckForValidListAndQueue+0x60>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	490b      	ldr	r1, [pc, #44]	; (8004ff8 <prvCheckForValidListAndQueue+0x7c>)
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fe fca2 	bl	8003914 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fd0:	f000 f970 	bl	80052b4 <vPortExitCritical>
}
 8004fd4:	bf00      	nop
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000da0 	.word	0x20000da0
 8004fe0:	20000d70 	.word	0x20000d70
 8004fe4:	20000d84 	.word	0x20000d84
 8004fe8:	20000d98 	.word	0x20000d98
 8004fec:	20000d9c 	.word	0x20000d9c
 8004ff0:	20000e4c 	.word	0x20000e4c
 8004ff4:	20000dac 	.word	0x20000dac
 8004ff8:	08006208 	.word	0x08006208

08004ffc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	3b04      	subs	r3, #4
 800500c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3b04      	subs	r3, #4
 800501a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f023 0201 	bic.w	r2, r3, #1
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3b04      	subs	r3, #4
 800502a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800502c:	4a0c      	ldr	r2, [pc, #48]	; (8005060 <pxPortInitialiseStack+0x64>)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3b14      	subs	r3, #20
 8005036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3b04      	subs	r3, #4
 8005042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f06f 0202 	mvn.w	r2, #2
 800504a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3b20      	subs	r3, #32
 8005050:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005052:	68fb      	ldr	r3, [r7, #12]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	08005065 	.word	0x08005065

08005064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800506e:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <prvTaskExitError+0x54>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d00a      	beq.n	800508e <prvTaskExitError+0x2a>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	60fb      	str	r3, [r7, #12]
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <prvTaskExitError+0x28>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	60bb      	str	r3, [r7, #8]
}
 80050a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050a2:	bf00      	nop
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0fc      	beq.n	80050a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050aa:	bf00      	nop
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	2000000c 	.word	0x2000000c
 80050bc:	00000000 	.word	0x00000000

080050c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050c0:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <pxCurrentTCBConst2>)
 80050c2:	6819      	ldr	r1, [r3, #0]
 80050c4:	6808      	ldr	r0, [r1, #0]
 80050c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ca:	f380 8809 	msr	PSP, r0
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f04f 0000 	mov.w	r0, #0
 80050d6:	f380 8811 	msr	BASEPRI, r0
 80050da:	4770      	bx	lr
 80050dc:	f3af 8000 	nop.w

080050e0 <pxCurrentTCBConst2>:
 80050e0:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop

080050e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050e8:	4808      	ldr	r0, [pc, #32]	; (800510c <prvPortStartFirstTask+0x24>)
 80050ea:	6800      	ldr	r0, [r0, #0]
 80050ec:	6800      	ldr	r0, [r0, #0]
 80050ee:	f380 8808 	msr	MSP, r0
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f380 8814 	msr	CONTROL, r0
 80050fa:	b662      	cpsie	i
 80050fc:	b661      	cpsie	f
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	df00      	svc	0
 8005108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800510a:	bf00      	nop
 800510c:	e000ed08 	.word	0xe000ed08

08005110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005116:	4b46      	ldr	r3, [pc, #280]	; (8005230 <xPortStartScheduler+0x120>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a46      	ldr	r2, [pc, #280]	; (8005234 <xPortStartScheduler+0x124>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d10a      	bne.n	8005136 <xPortStartScheduler+0x26>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	613b      	str	r3, [r7, #16]
}
 8005132:	bf00      	nop
 8005134:	e7fe      	b.n	8005134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005136:	4b3e      	ldr	r3, [pc, #248]	; (8005230 <xPortStartScheduler+0x120>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a3f      	ldr	r2, [pc, #252]	; (8005238 <xPortStartScheduler+0x128>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10a      	bne.n	8005156 <xPortStartScheduler+0x46>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	60fb      	str	r3, [r7, #12]
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005156:	4b39      	ldr	r3, [pc, #228]	; (800523c <xPortStartScheduler+0x12c>)
 8005158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	b2db      	uxtb	r3, r3
 8005160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	22ff      	movs	r2, #255	; 0xff
 8005166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005178:	b2da      	uxtb	r2, r3
 800517a:	4b31      	ldr	r3, [pc, #196]	; (8005240 <xPortStartScheduler+0x130>)
 800517c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800517e:	4b31      	ldr	r3, [pc, #196]	; (8005244 <xPortStartScheduler+0x134>)
 8005180:	2207      	movs	r2, #7
 8005182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005184:	e009      	b.n	800519a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005186:	4b2f      	ldr	r3, [pc, #188]	; (8005244 <xPortStartScheduler+0x134>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3b01      	subs	r3, #1
 800518c:	4a2d      	ldr	r2, [pc, #180]	; (8005244 <xPortStartScheduler+0x134>)
 800518e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	b2db      	uxtb	r3, r3
 8005198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800519a:	78fb      	ldrb	r3, [r7, #3]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b80      	cmp	r3, #128	; 0x80
 80051a4:	d0ef      	beq.n	8005186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051a6:	4b27      	ldr	r3, [pc, #156]	; (8005244 <xPortStartScheduler+0x134>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f1c3 0307 	rsb	r3, r3, #7
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d00a      	beq.n	80051c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	60bb      	str	r3, [r7, #8]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051c8:	4b1e      	ldr	r3, [pc, #120]	; (8005244 <xPortStartScheduler+0x134>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <xPortStartScheduler+0x134>)
 80051d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051d2:	4b1c      	ldr	r3, [pc, #112]	; (8005244 <xPortStartScheduler+0x134>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051da:	4a1a      	ldr	r2, [pc, #104]	; (8005244 <xPortStartScheduler+0x134>)
 80051dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051e6:	4b18      	ldr	r3, [pc, #96]	; (8005248 <xPortStartScheduler+0x138>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a17      	ldr	r2, [pc, #92]	; (8005248 <xPortStartScheduler+0x138>)
 80051ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051f2:	4b15      	ldr	r3, [pc, #84]	; (8005248 <xPortStartScheduler+0x138>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a14      	ldr	r2, [pc, #80]	; (8005248 <xPortStartScheduler+0x138>)
 80051f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051fe:	f000 f8dd 	bl	80053bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005202:	4b12      	ldr	r3, [pc, #72]	; (800524c <xPortStartScheduler+0x13c>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005208:	f000 f8fc 	bl	8005404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800520c:	4b10      	ldr	r3, [pc, #64]	; (8005250 <xPortStartScheduler+0x140>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a0f      	ldr	r2, [pc, #60]	; (8005250 <xPortStartScheduler+0x140>)
 8005212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005218:	f7ff ff66 	bl	80050e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800521c:	f7fe ff56 	bl	80040cc <vTaskSwitchContext>
	prvTaskExitError();
 8005220:	f7ff ff20 	bl	8005064 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	e000ed00 	.word	0xe000ed00
 8005234:	410fc271 	.word	0x410fc271
 8005238:	410fc270 	.word	0x410fc270
 800523c:	e000e400 	.word	0xe000e400
 8005240:	20000e9c 	.word	0x20000e9c
 8005244:	20000ea0 	.word	0x20000ea0
 8005248:	e000ed20 	.word	0xe000ed20
 800524c:	2000000c 	.word	0x2000000c
 8005250:	e000ef34 	.word	0xe000ef34

08005254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	607b      	str	r3, [r7, #4]
}
 800526c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800526e:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <vPortEnterCritical+0x58>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	4a0d      	ldr	r2, [pc, #52]	; (80052ac <vPortEnterCritical+0x58>)
 8005276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005278:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <vPortEnterCritical+0x58>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d10f      	bne.n	80052a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <vPortEnterCritical+0x5c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	603b      	str	r3, [r7, #0]
}
 800529c:	bf00      	nop
 800529e:	e7fe      	b.n	800529e <vPortEnterCritical+0x4a>
	}
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	2000000c 	.word	0x2000000c
 80052b0:	e000ed04 	.word	0xe000ed04

080052b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052ba:	4b12      	ldr	r3, [pc, #72]	; (8005304 <vPortExitCritical+0x50>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10a      	bne.n	80052d8 <vPortExitCritical+0x24>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	607b      	str	r3, [r7, #4]
}
 80052d4:	bf00      	nop
 80052d6:	e7fe      	b.n	80052d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052d8:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <vPortExitCritical+0x50>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3b01      	subs	r3, #1
 80052de:	4a09      	ldr	r2, [pc, #36]	; (8005304 <vPortExitCritical+0x50>)
 80052e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052e2:	4b08      	ldr	r3, [pc, #32]	; (8005304 <vPortExitCritical+0x50>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d105      	bne.n	80052f6 <vPortExitCritical+0x42>
 80052ea:	2300      	movs	r3, #0
 80052ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	f383 8811 	msr	BASEPRI, r3
}
 80052f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	2000000c 	.word	0x2000000c
	...

08005310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005310:	f3ef 8009 	mrs	r0, PSP
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	4b15      	ldr	r3, [pc, #84]	; (8005370 <pxCurrentTCBConst>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	f01e 0f10 	tst.w	lr, #16
 8005320:	bf08      	it	eq
 8005322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532a:	6010      	str	r0, [r2, #0]
 800532c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005334:	f380 8811 	msr	BASEPRI, r0
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f7fe fec4 	bl	80040cc <vTaskSwitchContext>
 8005344:	f04f 0000 	mov.w	r0, #0
 8005348:	f380 8811 	msr	BASEPRI, r0
 800534c:	bc09      	pop	{r0, r3}
 800534e:	6819      	ldr	r1, [r3, #0]
 8005350:	6808      	ldr	r0, [r1, #0]
 8005352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005356:	f01e 0f10 	tst.w	lr, #16
 800535a:	bf08      	it	eq
 800535c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005360:	f380 8809 	msr	PSP, r0
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	f3af 8000 	nop.w

08005370 <pxCurrentTCBConst>:
 8005370:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop

08005378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	607b      	str	r3, [r7, #4]
}
 8005390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005392:	f7fe fde1 	bl	8003f58 <xTaskIncrementTick>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <xPortSysTickHandler+0x40>)
 800539e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	2300      	movs	r3, #0
 80053a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f383 8811 	msr	BASEPRI, r3
}
 80053ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053c0:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <vPortSetupTimerInterrupt+0x34>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053c6:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <vPortSetupTimerInterrupt+0x38>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053cc:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <vPortSetupTimerInterrupt+0x3c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a0a      	ldr	r2, [pc, #40]	; (80053fc <vPortSetupTimerInterrupt+0x40>)
 80053d2:	fba2 2303 	umull	r2, r3, r2, r3
 80053d6:	099b      	lsrs	r3, r3, #6
 80053d8:	4a09      	ldr	r2, [pc, #36]	; (8005400 <vPortSetupTimerInterrupt+0x44>)
 80053da:	3b01      	subs	r3, #1
 80053dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053de:	4b04      	ldr	r3, [pc, #16]	; (80053f0 <vPortSetupTimerInterrupt+0x34>)
 80053e0:	2207      	movs	r2, #7
 80053e2:	601a      	str	r2, [r3, #0]
}
 80053e4:	bf00      	nop
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	e000e010 	.word	0xe000e010
 80053f4:	e000e018 	.word	0xe000e018
 80053f8:	20000000 	.word	0x20000000
 80053fc:	10624dd3 	.word	0x10624dd3
 8005400:	e000e014 	.word	0xe000e014

08005404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005414 <vPortEnableVFP+0x10>
 8005408:	6801      	ldr	r1, [r0, #0]
 800540a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800540e:	6001      	str	r1, [r0, #0]
 8005410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005412:	bf00      	nop
 8005414:	e000ed88 	.word	0xe000ed88

08005418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800541e:	f3ef 8305 	mrs	r3, IPSR
 8005422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b0f      	cmp	r3, #15
 8005428:	d914      	bls.n	8005454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800542a:	4a17      	ldr	r2, [pc, #92]	; (8005488 <vPortValidateInterruptPriority+0x70>)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005434:	4b15      	ldr	r3, [pc, #84]	; (800548c <vPortValidateInterruptPriority+0x74>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	7afa      	ldrb	r2, [r7, #11]
 800543a:	429a      	cmp	r2, r3
 800543c:	d20a      	bcs.n	8005454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	607b      	str	r3, [r7, #4]
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005454:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <vPortValidateInterruptPriority+0x78>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800545c:	4b0d      	ldr	r3, [pc, #52]	; (8005494 <vPortValidateInterruptPriority+0x7c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d90a      	bls.n	800547a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	603b      	str	r3, [r7, #0]
}
 8005476:	bf00      	nop
 8005478:	e7fe      	b.n	8005478 <vPortValidateInterruptPriority+0x60>
	}
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	e000e3f0 	.word	0xe000e3f0
 800548c:	20000e9c 	.word	0x20000e9c
 8005490:	e000ed0c 	.word	0xe000ed0c
 8005494:	20000ea0 	.word	0x20000ea0

08005498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	; 0x28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054a4:	f7fe fc9c 	bl	8003de0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054a8:	4b5b      	ldr	r3, [pc, #364]	; (8005618 <pvPortMalloc+0x180>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054b0:	f000 f920 	bl	80056f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054b4:	4b59      	ldr	r3, [pc, #356]	; (800561c <pvPortMalloc+0x184>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f040 8093 	bne.w	80055e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01d      	beq.n	8005504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80054c8:	2208      	movs	r2, #8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d014      	beq.n	8005504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f023 0307 	bic.w	r3, r3, #7
 80054e0:	3308      	adds	r3, #8
 80054e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <pvPortMalloc+0x6c>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	617b      	str	r3, [r7, #20]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d06e      	beq.n	80055e8 <pvPortMalloc+0x150>
 800550a:	4b45      	ldr	r3, [pc, #276]	; (8005620 <pvPortMalloc+0x188>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	429a      	cmp	r2, r3
 8005512:	d869      	bhi.n	80055e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005514:	4b43      	ldr	r3, [pc, #268]	; (8005624 <pvPortMalloc+0x18c>)
 8005516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005518:	4b42      	ldr	r3, [pc, #264]	; (8005624 <pvPortMalloc+0x18c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800551e:	e004      	b.n	800552a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	429a      	cmp	r2, r3
 8005532:	d903      	bls.n	800553c <pvPortMalloc+0xa4>
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f1      	bne.n	8005520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800553c:	4b36      	ldr	r3, [pc, #216]	; (8005618 <pvPortMalloc+0x180>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005542:	429a      	cmp	r2, r3
 8005544:	d050      	beq.n	80055e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2208      	movs	r2, #8
 800554c:	4413      	add	r3, r2
 800554e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	1ad2      	subs	r2, r2, r3
 8005560:	2308      	movs	r3, #8
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	429a      	cmp	r2, r3
 8005566:	d91f      	bls.n	80055a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <pvPortMalloc+0xf8>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	613b      	str	r3, [r7, #16]
}
 800558c:	bf00      	nop
 800558e:	e7fe      	b.n	800558e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	1ad2      	subs	r2, r2, r3
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055a2:	69b8      	ldr	r0, [r7, #24]
 80055a4:	f000 f908 	bl	80057b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055a8:	4b1d      	ldr	r3, [pc, #116]	; (8005620 <pvPortMalloc+0x188>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	4a1b      	ldr	r2, [pc, #108]	; (8005620 <pvPortMalloc+0x188>)
 80055b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055b6:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <pvPortMalloc+0x188>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b1b      	ldr	r3, [pc, #108]	; (8005628 <pvPortMalloc+0x190>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d203      	bcs.n	80055ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055c2:	4b17      	ldr	r3, [pc, #92]	; (8005620 <pvPortMalloc+0x188>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a18      	ldr	r2, [pc, #96]	; (8005628 <pvPortMalloc+0x190>)
 80055c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	4b13      	ldr	r3, [pc, #76]	; (800561c <pvPortMalloc+0x184>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <pvPortMalloc+0x194>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3301      	adds	r3, #1
 80055e4:	4a11      	ldr	r2, [pc, #68]	; (800562c <pvPortMalloc+0x194>)
 80055e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055e8:	f7fe fc08 	bl	8003dfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <pvPortMalloc+0x174>
	__asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	60fb      	str	r3, [r7, #12]
}
 8005608:	bf00      	nop
 800560a:	e7fe      	b.n	800560a <pvPortMalloc+0x172>
	return pvReturn;
 800560c:	69fb      	ldr	r3, [r7, #28]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3728      	adds	r7, #40	; 0x28
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20004aac 	.word	0x20004aac
 800561c:	20004ac0 	.word	0x20004ac0
 8005620:	20004ab0 	.word	0x20004ab0
 8005624:	20004aa4 	.word	0x20004aa4
 8005628:	20004ab4 	.word	0x20004ab4
 800562c:	20004ab8 	.word	0x20004ab8

08005630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d04d      	beq.n	80056de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005642:	2308      	movs	r3, #8
 8005644:	425b      	negs	r3, r3
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4413      	add	r3, r2
 800564a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	4b24      	ldr	r3, [pc, #144]	; (80056e8 <vPortFree+0xb8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4013      	ands	r3, r2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10a      	bne.n	8005674 <vPortFree+0x44>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	60fb      	str	r3, [r7, #12]
}
 8005670:	bf00      	nop
 8005672:	e7fe      	b.n	8005672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <vPortFree+0x62>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	60bb      	str	r3, [r7, #8]
}
 800568e:	bf00      	nop
 8005690:	e7fe      	b.n	8005690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <vPortFree+0xb8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4013      	ands	r3, r2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01e      	beq.n	80056de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d11a      	bne.n	80056de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <vPortFree+0xb8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	43db      	mvns	r3, r3
 80056b2:	401a      	ands	r2, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056b8:	f7fe fb92 	bl	8003de0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <vPortFree+0xbc>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4413      	add	r3, r2
 80056c6:	4a09      	ldr	r2, [pc, #36]	; (80056ec <vPortFree+0xbc>)
 80056c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056ca:	6938      	ldr	r0, [r7, #16]
 80056cc:	f000 f874 	bl	80057b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80056d0:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <vPortFree+0xc0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	4a06      	ldr	r2, [pc, #24]	; (80056f0 <vPortFree+0xc0>)
 80056d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80056da:	f7fe fb8f 	bl	8003dfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056de:	bf00      	nop
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20004ac0 	.word	0x20004ac0
 80056ec:	20004ab0 	.word	0x20004ab0
 80056f0:	20004abc 	.word	0x20004abc

080056f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80056fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005700:	4b27      	ldr	r3, [pc, #156]	; (80057a0 <prvHeapInit+0xac>)
 8005702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00c      	beq.n	8005728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3307      	adds	r3, #7
 8005712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0307 	bic.w	r3, r3, #7
 800571a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <prvHeapInit+0xac>)
 8005724:	4413      	add	r3, r2
 8005726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800572c:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <prvHeapInit+0xb0>)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005732:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <prvHeapInit+0xb0>)
 8005734:	2200      	movs	r2, #0
 8005736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	4413      	add	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005740:	2208      	movs	r2, #8
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0307 	bic.w	r3, r3, #7
 800574e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <prvHeapInit+0xb4>)
 8005754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005756:	4b14      	ldr	r3, [pc, #80]	; (80057a8 <prvHeapInit+0xb4>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800575e:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <prvHeapInit+0xb4>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	1ad2      	subs	r2, r2, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005774:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <prvHeapInit+0xb4>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <prvHeapInit+0xb8>)
 8005782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <prvHeapInit+0xbc>)
 800578a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <prvHeapInit+0xc0>)
 800578e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005792:	601a      	str	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	20000ea4 	.word	0x20000ea4
 80057a4:	20004aa4 	.word	0x20004aa4
 80057a8:	20004aac 	.word	0x20004aac
 80057ac:	20004ab4 	.word	0x20004ab4
 80057b0:	20004ab0 	.word	0x20004ab0
 80057b4:	20004ac0 	.word	0x20004ac0

080057b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057c0:	4b28      	ldr	r3, [pc, #160]	; (8005864 <prvInsertBlockIntoFreeList+0xac>)
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e002      	b.n	80057cc <prvInsertBlockIntoFreeList+0x14>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d8f7      	bhi.n	80057c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	4413      	add	r3, r2
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d108      	bne.n	80057fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	441a      	add	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	441a      	add	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d118      	bne.n	8005840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4b15      	ldr	r3, [pc, #84]	; (8005868 <prvInsertBlockIntoFreeList+0xb0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d00d      	beq.n	8005836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	441a      	add	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	e008      	b.n	8005848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005836:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <prvInsertBlockIntoFreeList+0xb0>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	e003      	b.n	8005848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	429a      	cmp	r2, r3
 800584e:	d002      	beq.n	8005856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005856:	bf00      	nop
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20004aa4 	.word	0x20004aa4
 8005868:	20004aac 	.word	0x20004aac

0800586c <__errno>:
 800586c:	4b01      	ldr	r3, [pc, #4]	; (8005874 <__errno+0x8>)
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000010 	.word	0x20000010

08005878 <__libc_init_array>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	4d0d      	ldr	r5, [pc, #52]	; (80058b0 <__libc_init_array+0x38>)
 800587c:	4c0d      	ldr	r4, [pc, #52]	; (80058b4 <__libc_init_array+0x3c>)
 800587e:	1b64      	subs	r4, r4, r5
 8005880:	10a4      	asrs	r4, r4, #2
 8005882:	2600      	movs	r6, #0
 8005884:	42a6      	cmp	r6, r4
 8005886:	d109      	bne.n	800589c <__libc_init_array+0x24>
 8005888:	4d0b      	ldr	r5, [pc, #44]	; (80058b8 <__libc_init_array+0x40>)
 800588a:	4c0c      	ldr	r4, [pc, #48]	; (80058bc <__libc_init_array+0x44>)
 800588c:	f000 fc8e 	bl	80061ac <_init>
 8005890:	1b64      	subs	r4, r4, r5
 8005892:	10a4      	asrs	r4, r4, #2
 8005894:	2600      	movs	r6, #0
 8005896:	42a6      	cmp	r6, r4
 8005898:	d105      	bne.n	80058a6 <__libc_init_array+0x2e>
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a0:	4798      	blx	r3
 80058a2:	3601      	adds	r6, #1
 80058a4:	e7ee      	b.n	8005884 <__libc_init_array+0xc>
 80058a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058aa:	4798      	blx	r3
 80058ac:	3601      	adds	r6, #1
 80058ae:	e7f2      	b.n	8005896 <__libc_init_array+0x1e>
 80058b0:	08006264 	.word	0x08006264
 80058b4:	08006264 	.word	0x08006264
 80058b8:	08006264 	.word	0x08006264
 80058bc:	08006268 	.word	0x08006268

080058c0 <memcpy>:
 80058c0:	440a      	add	r2, r1
 80058c2:	4291      	cmp	r1, r2
 80058c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80058c8:	d100      	bne.n	80058cc <memcpy+0xc>
 80058ca:	4770      	bx	lr
 80058cc:	b510      	push	{r4, lr}
 80058ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058d6:	4291      	cmp	r1, r2
 80058d8:	d1f9      	bne.n	80058ce <memcpy+0xe>
 80058da:	bd10      	pop	{r4, pc}

080058dc <memset>:
 80058dc:	4402      	add	r2, r0
 80058de:	4603      	mov	r3, r0
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d100      	bne.n	80058e6 <memset+0xa>
 80058e4:	4770      	bx	lr
 80058e6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ea:	e7f9      	b.n	80058e0 <memset+0x4>

080058ec <siprintf>:
 80058ec:	b40e      	push	{r1, r2, r3}
 80058ee:	b500      	push	{lr}
 80058f0:	b09c      	sub	sp, #112	; 0x70
 80058f2:	ab1d      	add	r3, sp, #116	; 0x74
 80058f4:	9002      	str	r0, [sp, #8]
 80058f6:	9006      	str	r0, [sp, #24]
 80058f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058fc:	4809      	ldr	r0, [pc, #36]	; (8005924 <siprintf+0x38>)
 80058fe:	9107      	str	r1, [sp, #28]
 8005900:	9104      	str	r1, [sp, #16]
 8005902:	4909      	ldr	r1, [pc, #36]	; (8005928 <siprintf+0x3c>)
 8005904:	f853 2b04 	ldr.w	r2, [r3], #4
 8005908:	9105      	str	r1, [sp, #20]
 800590a:	6800      	ldr	r0, [r0, #0]
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	a902      	add	r1, sp, #8
 8005910:	f000 f868 	bl	80059e4 <_svfiprintf_r>
 8005914:	9b02      	ldr	r3, [sp, #8]
 8005916:	2200      	movs	r2, #0
 8005918:	701a      	strb	r2, [r3, #0]
 800591a:	b01c      	add	sp, #112	; 0x70
 800591c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005920:	b003      	add	sp, #12
 8005922:	4770      	bx	lr
 8005924:	20000010 	.word	0x20000010
 8005928:	ffff0208 	.word	0xffff0208

0800592c <__ssputs_r>:
 800592c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005930:	688e      	ldr	r6, [r1, #8]
 8005932:	429e      	cmp	r6, r3
 8005934:	4682      	mov	sl, r0
 8005936:	460c      	mov	r4, r1
 8005938:	4690      	mov	r8, r2
 800593a:	461f      	mov	r7, r3
 800593c:	d838      	bhi.n	80059b0 <__ssputs_r+0x84>
 800593e:	898a      	ldrh	r2, [r1, #12]
 8005940:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005944:	d032      	beq.n	80059ac <__ssputs_r+0x80>
 8005946:	6825      	ldr	r5, [r4, #0]
 8005948:	6909      	ldr	r1, [r1, #16]
 800594a:	eba5 0901 	sub.w	r9, r5, r1
 800594e:	6965      	ldr	r5, [r4, #20]
 8005950:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005958:	3301      	adds	r3, #1
 800595a:	444b      	add	r3, r9
 800595c:	106d      	asrs	r5, r5, #1
 800595e:	429d      	cmp	r5, r3
 8005960:	bf38      	it	cc
 8005962:	461d      	movcc	r5, r3
 8005964:	0553      	lsls	r3, r2, #21
 8005966:	d531      	bpl.n	80059cc <__ssputs_r+0xa0>
 8005968:	4629      	mov	r1, r5
 800596a:	f000 fb55 	bl	8006018 <_malloc_r>
 800596e:	4606      	mov	r6, r0
 8005970:	b950      	cbnz	r0, 8005988 <__ssputs_r+0x5c>
 8005972:	230c      	movs	r3, #12
 8005974:	f8ca 3000 	str.w	r3, [sl]
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800597e:	81a3      	strh	r3, [r4, #12]
 8005980:	f04f 30ff 	mov.w	r0, #4294967295
 8005984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005988:	6921      	ldr	r1, [r4, #16]
 800598a:	464a      	mov	r2, r9
 800598c:	f7ff ff98 	bl	80058c0 <memcpy>
 8005990:	89a3      	ldrh	r3, [r4, #12]
 8005992:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599a:	81a3      	strh	r3, [r4, #12]
 800599c:	6126      	str	r6, [r4, #16]
 800599e:	6165      	str	r5, [r4, #20]
 80059a0:	444e      	add	r6, r9
 80059a2:	eba5 0509 	sub.w	r5, r5, r9
 80059a6:	6026      	str	r6, [r4, #0]
 80059a8:	60a5      	str	r5, [r4, #8]
 80059aa:	463e      	mov	r6, r7
 80059ac:	42be      	cmp	r6, r7
 80059ae:	d900      	bls.n	80059b2 <__ssputs_r+0x86>
 80059b0:	463e      	mov	r6, r7
 80059b2:	6820      	ldr	r0, [r4, #0]
 80059b4:	4632      	mov	r2, r6
 80059b6:	4641      	mov	r1, r8
 80059b8:	f000 faa8 	bl	8005f0c <memmove>
 80059bc:	68a3      	ldr	r3, [r4, #8]
 80059be:	1b9b      	subs	r3, r3, r6
 80059c0:	60a3      	str	r3, [r4, #8]
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	4433      	add	r3, r6
 80059c6:	6023      	str	r3, [r4, #0]
 80059c8:	2000      	movs	r0, #0
 80059ca:	e7db      	b.n	8005984 <__ssputs_r+0x58>
 80059cc:	462a      	mov	r2, r5
 80059ce:	f000 fb97 	bl	8006100 <_realloc_r>
 80059d2:	4606      	mov	r6, r0
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d1e1      	bne.n	800599c <__ssputs_r+0x70>
 80059d8:	6921      	ldr	r1, [r4, #16]
 80059da:	4650      	mov	r0, sl
 80059dc:	f000 fab0 	bl	8005f40 <_free_r>
 80059e0:	e7c7      	b.n	8005972 <__ssputs_r+0x46>
	...

080059e4 <_svfiprintf_r>:
 80059e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e8:	4698      	mov	r8, r3
 80059ea:	898b      	ldrh	r3, [r1, #12]
 80059ec:	061b      	lsls	r3, r3, #24
 80059ee:	b09d      	sub	sp, #116	; 0x74
 80059f0:	4607      	mov	r7, r0
 80059f2:	460d      	mov	r5, r1
 80059f4:	4614      	mov	r4, r2
 80059f6:	d50e      	bpl.n	8005a16 <_svfiprintf_r+0x32>
 80059f8:	690b      	ldr	r3, [r1, #16]
 80059fa:	b963      	cbnz	r3, 8005a16 <_svfiprintf_r+0x32>
 80059fc:	2140      	movs	r1, #64	; 0x40
 80059fe:	f000 fb0b 	bl	8006018 <_malloc_r>
 8005a02:	6028      	str	r0, [r5, #0]
 8005a04:	6128      	str	r0, [r5, #16]
 8005a06:	b920      	cbnz	r0, 8005a12 <_svfiprintf_r+0x2e>
 8005a08:	230c      	movs	r3, #12
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a10:	e0d1      	b.n	8005bb6 <_svfiprintf_r+0x1d2>
 8005a12:	2340      	movs	r3, #64	; 0x40
 8005a14:	616b      	str	r3, [r5, #20]
 8005a16:	2300      	movs	r3, #0
 8005a18:	9309      	str	r3, [sp, #36]	; 0x24
 8005a1a:	2320      	movs	r3, #32
 8005a1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a20:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a24:	2330      	movs	r3, #48	; 0x30
 8005a26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005bd0 <_svfiprintf_r+0x1ec>
 8005a2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a2e:	f04f 0901 	mov.w	r9, #1
 8005a32:	4623      	mov	r3, r4
 8005a34:	469a      	mov	sl, r3
 8005a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a3a:	b10a      	cbz	r2, 8005a40 <_svfiprintf_r+0x5c>
 8005a3c:	2a25      	cmp	r2, #37	; 0x25
 8005a3e:	d1f9      	bne.n	8005a34 <_svfiprintf_r+0x50>
 8005a40:	ebba 0b04 	subs.w	fp, sl, r4
 8005a44:	d00b      	beq.n	8005a5e <_svfiprintf_r+0x7a>
 8005a46:	465b      	mov	r3, fp
 8005a48:	4622      	mov	r2, r4
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	f7ff ff6d 	bl	800592c <__ssputs_r>
 8005a52:	3001      	adds	r0, #1
 8005a54:	f000 80aa 	beq.w	8005bac <_svfiprintf_r+0x1c8>
 8005a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a5a:	445a      	add	r2, fp
 8005a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 80a2 	beq.w	8005bac <_svfiprintf_r+0x1c8>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a72:	f10a 0a01 	add.w	sl, sl, #1
 8005a76:	9304      	str	r3, [sp, #16]
 8005a78:	9307      	str	r3, [sp, #28]
 8005a7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a7e:	931a      	str	r3, [sp, #104]	; 0x68
 8005a80:	4654      	mov	r4, sl
 8005a82:	2205      	movs	r2, #5
 8005a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a88:	4851      	ldr	r0, [pc, #324]	; (8005bd0 <_svfiprintf_r+0x1ec>)
 8005a8a:	f7fa fbc1 	bl	8000210 <memchr>
 8005a8e:	9a04      	ldr	r2, [sp, #16]
 8005a90:	b9d8      	cbnz	r0, 8005aca <_svfiprintf_r+0xe6>
 8005a92:	06d0      	lsls	r0, r2, #27
 8005a94:	bf44      	itt	mi
 8005a96:	2320      	movmi	r3, #32
 8005a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a9c:	0711      	lsls	r1, r2, #28
 8005a9e:	bf44      	itt	mi
 8005aa0:	232b      	movmi	r3, #43	; 0x2b
 8005aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8005aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8005aac:	d015      	beq.n	8005ada <_svfiprintf_r+0xf6>
 8005aae:	9a07      	ldr	r2, [sp, #28]
 8005ab0:	4654      	mov	r4, sl
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	f04f 0c0a 	mov.w	ip, #10
 8005ab8:	4621      	mov	r1, r4
 8005aba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005abe:	3b30      	subs	r3, #48	; 0x30
 8005ac0:	2b09      	cmp	r3, #9
 8005ac2:	d94e      	bls.n	8005b62 <_svfiprintf_r+0x17e>
 8005ac4:	b1b0      	cbz	r0, 8005af4 <_svfiprintf_r+0x110>
 8005ac6:	9207      	str	r2, [sp, #28]
 8005ac8:	e014      	b.n	8005af4 <_svfiprintf_r+0x110>
 8005aca:	eba0 0308 	sub.w	r3, r0, r8
 8005ace:	fa09 f303 	lsl.w	r3, r9, r3
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	9304      	str	r3, [sp, #16]
 8005ad6:	46a2      	mov	sl, r4
 8005ad8:	e7d2      	b.n	8005a80 <_svfiprintf_r+0x9c>
 8005ada:	9b03      	ldr	r3, [sp, #12]
 8005adc:	1d19      	adds	r1, r3, #4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	9103      	str	r1, [sp, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	bfbb      	ittet	lt
 8005ae6:	425b      	neglt	r3, r3
 8005ae8:	f042 0202 	orrlt.w	r2, r2, #2
 8005aec:	9307      	strge	r3, [sp, #28]
 8005aee:	9307      	strlt	r3, [sp, #28]
 8005af0:	bfb8      	it	lt
 8005af2:	9204      	strlt	r2, [sp, #16]
 8005af4:	7823      	ldrb	r3, [r4, #0]
 8005af6:	2b2e      	cmp	r3, #46	; 0x2e
 8005af8:	d10c      	bne.n	8005b14 <_svfiprintf_r+0x130>
 8005afa:	7863      	ldrb	r3, [r4, #1]
 8005afc:	2b2a      	cmp	r3, #42	; 0x2a
 8005afe:	d135      	bne.n	8005b6c <_svfiprintf_r+0x188>
 8005b00:	9b03      	ldr	r3, [sp, #12]
 8005b02:	1d1a      	adds	r2, r3, #4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	9203      	str	r2, [sp, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bfb8      	it	lt
 8005b0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b10:	3402      	adds	r4, #2
 8005b12:	9305      	str	r3, [sp, #20]
 8005b14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005be0 <_svfiprintf_r+0x1fc>
 8005b18:	7821      	ldrb	r1, [r4, #0]
 8005b1a:	2203      	movs	r2, #3
 8005b1c:	4650      	mov	r0, sl
 8005b1e:	f7fa fb77 	bl	8000210 <memchr>
 8005b22:	b140      	cbz	r0, 8005b36 <_svfiprintf_r+0x152>
 8005b24:	2340      	movs	r3, #64	; 0x40
 8005b26:	eba0 000a 	sub.w	r0, r0, sl
 8005b2a:	fa03 f000 	lsl.w	r0, r3, r0
 8005b2e:	9b04      	ldr	r3, [sp, #16]
 8005b30:	4303      	orrs	r3, r0
 8005b32:	3401      	adds	r4, #1
 8005b34:	9304      	str	r3, [sp, #16]
 8005b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b3a:	4826      	ldr	r0, [pc, #152]	; (8005bd4 <_svfiprintf_r+0x1f0>)
 8005b3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b40:	2206      	movs	r2, #6
 8005b42:	f7fa fb65 	bl	8000210 <memchr>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d038      	beq.n	8005bbc <_svfiprintf_r+0x1d8>
 8005b4a:	4b23      	ldr	r3, [pc, #140]	; (8005bd8 <_svfiprintf_r+0x1f4>)
 8005b4c:	bb1b      	cbnz	r3, 8005b96 <_svfiprintf_r+0x1b2>
 8005b4e:	9b03      	ldr	r3, [sp, #12]
 8005b50:	3307      	adds	r3, #7
 8005b52:	f023 0307 	bic.w	r3, r3, #7
 8005b56:	3308      	adds	r3, #8
 8005b58:	9303      	str	r3, [sp, #12]
 8005b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b5c:	4433      	add	r3, r6
 8005b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b60:	e767      	b.n	8005a32 <_svfiprintf_r+0x4e>
 8005b62:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b66:	460c      	mov	r4, r1
 8005b68:	2001      	movs	r0, #1
 8005b6a:	e7a5      	b.n	8005ab8 <_svfiprintf_r+0xd4>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	3401      	adds	r4, #1
 8005b70:	9305      	str	r3, [sp, #20]
 8005b72:	4619      	mov	r1, r3
 8005b74:	f04f 0c0a 	mov.w	ip, #10
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b7e:	3a30      	subs	r2, #48	; 0x30
 8005b80:	2a09      	cmp	r2, #9
 8005b82:	d903      	bls.n	8005b8c <_svfiprintf_r+0x1a8>
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0c5      	beq.n	8005b14 <_svfiprintf_r+0x130>
 8005b88:	9105      	str	r1, [sp, #20]
 8005b8a:	e7c3      	b.n	8005b14 <_svfiprintf_r+0x130>
 8005b8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b90:	4604      	mov	r4, r0
 8005b92:	2301      	movs	r3, #1
 8005b94:	e7f0      	b.n	8005b78 <_svfiprintf_r+0x194>
 8005b96:	ab03      	add	r3, sp, #12
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	462a      	mov	r2, r5
 8005b9c:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <_svfiprintf_r+0x1f8>)
 8005b9e:	a904      	add	r1, sp, #16
 8005ba0:	4638      	mov	r0, r7
 8005ba2:	f3af 8000 	nop.w
 8005ba6:	1c42      	adds	r2, r0, #1
 8005ba8:	4606      	mov	r6, r0
 8005baa:	d1d6      	bne.n	8005b5a <_svfiprintf_r+0x176>
 8005bac:	89ab      	ldrh	r3, [r5, #12]
 8005bae:	065b      	lsls	r3, r3, #25
 8005bb0:	f53f af2c 	bmi.w	8005a0c <_svfiprintf_r+0x28>
 8005bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bb6:	b01d      	add	sp, #116	; 0x74
 8005bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bbc:	ab03      	add	r3, sp, #12
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	462a      	mov	r2, r5
 8005bc2:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <_svfiprintf_r+0x1f8>)
 8005bc4:	a904      	add	r1, sp, #16
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	f000 f87a 	bl	8005cc0 <_printf_i>
 8005bcc:	e7eb      	b.n	8005ba6 <_svfiprintf_r+0x1c2>
 8005bce:	bf00      	nop
 8005bd0:	08006228 	.word	0x08006228
 8005bd4:	08006232 	.word	0x08006232
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	0800592d 	.word	0x0800592d
 8005be0:	0800622e 	.word	0x0800622e

08005be4 <_printf_common>:
 8005be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be8:	4616      	mov	r6, r2
 8005bea:	4699      	mov	r9, r3
 8005bec:	688a      	ldr	r2, [r1, #8]
 8005bee:	690b      	ldr	r3, [r1, #16]
 8005bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	bfb8      	it	lt
 8005bf8:	4613      	movlt	r3, r2
 8005bfa:	6033      	str	r3, [r6, #0]
 8005bfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c00:	4607      	mov	r7, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	b10a      	cbz	r2, 8005c0a <_printf_common+0x26>
 8005c06:	3301      	adds	r3, #1
 8005c08:	6033      	str	r3, [r6, #0]
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	0699      	lsls	r1, r3, #26
 8005c0e:	bf42      	ittt	mi
 8005c10:	6833      	ldrmi	r3, [r6, #0]
 8005c12:	3302      	addmi	r3, #2
 8005c14:	6033      	strmi	r3, [r6, #0]
 8005c16:	6825      	ldr	r5, [r4, #0]
 8005c18:	f015 0506 	ands.w	r5, r5, #6
 8005c1c:	d106      	bne.n	8005c2c <_printf_common+0x48>
 8005c1e:	f104 0a19 	add.w	sl, r4, #25
 8005c22:	68e3      	ldr	r3, [r4, #12]
 8005c24:	6832      	ldr	r2, [r6, #0]
 8005c26:	1a9b      	subs	r3, r3, r2
 8005c28:	42ab      	cmp	r3, r5
 8005c2a:	dc26      	bgt.n	8005c7a <_printf_common+0x96>
 8005c2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c30:	1e13      	subs	r3, r2, #0
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	bf18      	it	ne
 8005c36:	2301      	movne	r3, #1
 8005c38:	0692      	lsls	r2, r2, #26
 8005c3a:	d42b      	bmi.n	8005c94 <_printf_common+0xb0>
 8005c3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c40:	4649      	mov	r1, r9
 8005c42:	4638      	mov	r0, r7
 8005c44:	47c0      	blx	r8
 8005c46:	3001      	adds	r0, #1
 8005c48:	d01e      	beq.n	8005c88 <_printf_common+0xa4>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	68e5      	ldr	r5, [r4, #12]
 8005c4e:	6832      	ldr	r2, [r6, #0]
 8005c50:	f003 0306 	and.w	r3, r3, #6
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	bf08      	it	eq
 8005c58:	1aad      	subeq	r5, r5, r2
 8005c5a:	68a3      	ldr	r3, [r4, #8]
 8005c5c:	6922      	ldr	r2, [r4, #16]
 8005c5e:	bf0c      	ite	eq
 8005c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c64:	2500      	movne	r5, #0
 8005c66:	4293      	cmp	r3, r2
 8005c68:	bfc4      	itt	gt
 8005c6a:	1a9b      	subgt	r3, r3, r2
 8005c6c:	18ed      	addgt	r5, r5, r3
 8005c6e:	2600      	movs	r6, #0
 8005c70:	341a      	adds	r4, #26
 8005c72:	42b5      	cmp	r5, r6
 8005c74:	d11a      	bne.n	8005cac <_printf_common+0xc8>
 8005c76:	2000      	movs	r0, #0
 8005c78:	e008      	b.n	8005c8c <_printf_common+0xa8>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4652      	mov	r2, sl
 8005c7e:	4649      	mov	r1, r9
 8005c80:	4638      	mov	r0, r7
 8005c82:	47c0      	blx	r8
 8005c84:	3001      	adds	r0, #1
 8005c86:	d103      	bne.n	8005c90 <_printf_common+0xac>
 8005c88:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c90:	3501      	adds	r5, #1
 8005c92:	e7c6      	b.n	8005c22 <_printf_common+0x3e>
 8005c94:	18e1      	adds	r1, r4, r3
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	2030      	movs	r0, #48	; 0x30
 8005c9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c9e:	4422      	add	r2, r4
 8005ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ca8:	3302      	adds	r3, #2
 8005caa:	e7c7      	b.n	8005c3c <_printf_common+0x58>
 8005cac:	2301      	movs	r3, #1
 8005cae:	4622      	mov	r2, r4
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	47c0      	blx	r8
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	d0e6      	beq.n	8005c88 <_printf_common+0xa4>
 8005cba:	3601      	adds	r6, #1
 8005cbc:	e7d9      	b.n	8005c72 <_printf_common+0x8e>
	...

08005cc0 <_printf_i>:
 8005cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	7e0f      	ldrb	r7, [r1, #24]
 8005cc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cc8:	2f78      	cmp	r7, #120	; 0x78
 8005cca:	4691      	mov	r9, r2
 8005ccc:	4680      	mov	r8, r0
 8005cce:	460c      	mov	r4, r1
 8005cd0:	469a      	mov	sl, r3
 8005cd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cd6:	d807      	bhi.n	8005ce8 <_printf_i+0x28>
 8005cd8:	2f62      	cmp	r7, #98	; 0x62
 8005cda:	d80a      	bhi.n	8005cf2 <_printf_i+0x32>
 8005cdc:	2f00      	cmp	r7, #0
 8005cde:	f000 80d8 	beq.w	8005e92 <_printf_i+0x1d2>
 8005ce2:	2f58      	cmp	r7, #88	; 0x58
 8005ce4:	f000 80a3 	beq.w	8005e2e <_printf_i+0x16e>
 8005ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cf0:	e03a      	b.n	8005d68 <_printf_i+0xa8>
 8005cf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cf6:	2b15      	cmp	r3, #21
 8005cf8:	d8f6      	bhi.n	8005ce8 <_printf_i+0x28>
 8005cfa:	a101      	add	r1, pc, #4	; (adr r1, 8005d00 <_printf_i+0x40>)
 8005cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d00:	08005d59 	.word	0x08005d59
 8005d04:	08005d6d 	.word	0x08005d6d
 8005d08:	08005ce9 	.word	0x08005ce9
 8005d0c:	08005ce9 	.word	0x08005ce9
 8005d10:	08005ce9 	.word	0x08005ce9
 8005d14:	08005ce9 	.word	0x08005ce9
 8005d18:	08005d6d 	.word	0x08005d6d
 8005d1c:	08005ce9 	.word	0x08005ce9
 8005d20:	08005ce9 	.word	0x08005ce9
 8005d24:	08005ce9 	.word	0x08005ce9
 8005d28:	08005ce9 	.word	0x08005ce9
 8005d2c:	08005e79 	.word	0x08005e79
 8005d30:	08005d9d 	.word	0x08005d9d
 8005d34:	08005e5b 	.word	0x08005e5b
 8005d38:	08005ce9 	.word	0x08005ce9
 8005d3c:	08005ce9 	.word	0x08005ce9
 8005d40:	08005e9b 	.word	0x08005e9b
 8005d44:	08005ce9 	.word	0x08005ce9
 8005d48:	08005d9d 	.word	0x08005d9d
 8005d4c:	08005ce9 	.word	0x08005ce9
 8005d50:	08005ce9 	.word	0x08005ce9
 8005d54:	08005e63 	.word	0x08005e63
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	1d1a      	adds	r2, r3, #4
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	602a      	str	r2, [r5, #0]
 8005d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e0a3      	b.n	8005eb4 <_printf_i+0x1f4>
 8005d6c:	6820      	ldr	r0, [r4, #0]
 8005d6e:	6829      	ldr	r1, [r5, #0]
 8005d70:	0606      	lsls	r6, r0, #24
 8005d72:	f101 0304 	add.w	r3, r1, #4
 8005d76:	d50a      	bpl.n	8005d8e <_printf_i+0xce>
 8005d78:	680e      	ldr	r6, [r1, #0]
 8005d7a:	602b      	str	r3, [r5, #0]
 8005d7c:	2e00      	cmp	r6, #0
 8005d7e:	da03      	bge.n	8005d88 <_printf_i+0xc8>
 8005d80:	232d      	movs	r3, #45	; 0x2d
 8005d82:	4276      	negs	r6, r6
 8005d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d88:	485e      	ldr	r0, [pc, #376]	; (8005f04 <_printf_i+0x244>)
 8005d8a:	230a      	movs	r3, #10
 8005d8c:	e019      	b.n	8005dc2 <_printf_i+0x102>
 8005d8e:	680e      	ldr	r6, [r1, #0]
 8005d90:	602b      	str	r3, [r5, #0]
 8005d92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d96:	bf18      	it	ne
 8005d98:	b236      	sxthne	r6, r6
 8005d9a:	e7ef      	b.n	8005d7c <_printf_i+0xbc>
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	6820      	ldr	r0, [r4, #0]
 8005da0:	1d19      	adds	r1, r3, #4
 8005da2:	6029      	str	r1, [r5, #0]
 8005da4:	0601      	lsls	r1, r0, #24
 8005da6:	d501      	bpl.n	8005dac <_printf_i+0xec>
 8005da8:	681e      	ldr	r6, [r3, #0]
 8005daa:	e002      	b.n	8005db2 <_printf_i+0xf2>
 8005dac:	0646      	lsls	r6, r0, #25
 8005dae:	d5fb      	bpl.n	8005da8 <_printf_i+0xe8>
 8005db0:	881e      	ldrh	r6, [r3, #0]
 8005db2:	4854      	ldr	r0, [pc, #336]	; (8005f04 <_printf_i+0x244>)
 8005db4:	2f6f      	cmp	r7, #111	; 0x6f
 8005db6:	bf0c      	ite	eq
 8005db8:	2308      	moveq	r3, #8
 8005dba:	230a      	movne	r3, #10
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dc2:	6865      	ldr	r5, [r4, #4]
 8005dc4:	60a5      	str	r5, [r4, #8]
 8005dc6:	2d00      	cmp	r5, #0
 8005dc8:	bfa2      	ittt	ge
 8005dca:	6821      	ldrge	r1, [r4, #0]
 8005dcc:	f021 0104 	bicge.w	r1, r1, #4
 8005dd0:	6021      	strge	r1, [r4, #0]
 8005dd2:	b90e      	cbnz	r6, 8005dd8 <_printf_i+0x118>
 8005dd4:	2d00      	cmp	r5, #0
 8005dd6:	d04d      	beq.n	8005e74 <_printf_i+0x1b4>
 8005dd8:	4615      	mov	r5, r2
 8005dda:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dde:	fb03 6711 	mls	r7, r3, r1, r6
 8005de2:	5dc7      	ldrb	r7, [r0, r7]
 8005de4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005de8:	4637      	mov	r7, r6
 8005dea:	42bb      	cmp	r3, r7
 8005dec:	460e      	mov	r6, r1
 8005dee:	d9f4      	bls.n	8005dda <_printf_i+0x11a>
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d10b      	bne.n	8005e0c <_printf_i+0x14c>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	07de      	lsls	r6, r3, #31
 8005df8:	d508      	bpl.n	8005e0c <_printf_i+0x14c>
 8005dfa:	6923      	ldr	r3, [r4, #16]
 8005dfc:	6861      	ldr	r1, [r4, #4]
 8005dfe:	4299      	cmp	r1, r3
 8005e00:	bfde      	ittt	le
 8005e02:	2330      	movle	r3, #48	; 0x30
 8005e04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e0c:	1b52      	subs	r2, r2, r5
 8005e0e:	6122      	str	r2, [r4, #16]
 8005e10:	f8cd a000 	str.w	sl, [sp]
 8005e14:	464b      	mov	r3, r9
 8005e16:	aa03      	add	r2, sp, #12
 8005e18:	4621      	mov	r1, r4
 8005e1a:	4640      	mov	r0, r8
 8005e1c:	f7ff fee2 	bl	8005be4 <_printf_common>
 8005e20:	3001      	adds	r0, #1
 8005e22:	d14c      	bne.n	8005ebe <_printf_i+0x1fe>
 8005e24:	f04f 30ff 	mov.w	r0, #4294967295
 8005e28:	b004      	add	sp, #16
 8005e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e2e:	4835      	ldr	r0, [pc, #212]	; (8005f04 <_printf_i+0x244>)
 8005e30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e34:	6829      	ldr	r1, [r5, #0]
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e3c:	6029      	str	r1, [r5, #0]
 8005e3e:	061d      	lsls	r5, r3, #24
 8005e40:	d514      	bpl.n	8005e6c <_printf_i+0x1ac>
 8005e42:	07df      	lsls	r7, r3, #31
 8005e44:	bf44      	itt	mi
 8005e46:	f043 0320 	orrmi.w	r3, r3, #32
 8005e4a:	6023      	strmi	r3, [r4, #0]
 8005e4c:	b91e      	cbnz	r6, 8005e56 <_printf_i+0x196>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	f023 0320 	bic.w	r3, r3, #32
 8005e54:	6023      	str	r3, [r4, #0]
 8005e56:	2310      	movs	r3, #16
 8005e58:	e7b0      	b.n	8005dbc <_printf_i+0xfc>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	f043 0320 	orr.w	r3, r3, #32
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	2378      	movs	r3, #120	; 0x78
 8005e64:	4828      	ldr	r0, [pc, #160]	; (8005f08 <_printf_i+0x248>)
 8005e66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e6a:	e7e3      	b.n	8005e34 <_printf_i+0x174>
 8005e6c:	0659      	lsls	r1, r3, #25
 8005e6e:	bf48      	it	mi
 8005e70:	b2b6      	uxthmi	r6, r6
 8005e72:	e7e6      	b.n	8005e42 <_printf_i+0x182>
 8005e74:	4615      	mov	r5, r2
 8005e76:	e7bb      	b.n	8005df0 <_printf_i+0x130>
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	6826      	ldr	r6, [r4, #0]
 8005e7c:	6961      	ldr	r1, [r4, #20]
 8005e7e:	1d18      	adds	r0, r3, #4
 8005e80:	6028      	str	r0, [r5, #0]
 8005e82:	0635      	lsls	r5, r6, #24
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	d501      	bpl.n	8005e8c <_printf_i+0x1cc>
 8005e88:	6019      	str	r1, [r3, #0]
 8005e8a:	e002      	b.n	8005e92 <_printf_i+0x1d2>
 8005e8c:	0670      	lsls	r0, r6, #25
 8005e8e:	d5fb      	bpl.n	8005e88 <_printf_i+0x1c8>
 8005e90:	8019      	strh	r1, [r3, #0]
 8005e92:	2300      	movs	r3, #0
 8005e94:	6123      	str	r3, [r4, #16]
 8005e96:	4615      	mov	r5, r2
 8005e98:	e7ba      	b.n	8005e10 <_printf_i+0x150>
 8005e9a:	682b      	ldr	r3, [r5, #0]
 8005e9c:	1d1a      	adds	r2, r3, #4
 8005e9e:	602a      	str	r2, [r5, #0]
 8005ea0:	681d      	ldr	r5, [r3, #0]
 8005ea2:	6862      	ldr	r2, [r4, #4]
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f7fa f9b2 	bl	8000210 <memchr>
 8005eac:	b108      	cbz	r0, 8005eb2 <_printf_i+0x1f2>
 8005eae:	1b40      	subs	r0, r0, r5
 8005eb0:	6060      	str	r0, [r4, #4]
 8005eb2:	6863      	ldr	r3, [r4, #4]
 8005eb4:	6123      	str	r3, [r4, #16]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ebc:	e7a8      	b.n	8005e10 <_printf_i+0x150>
 8005ebe:	6923      	ldr	r3, [r4, #16]
 8005ec0:	462a      	mov	r2, r5
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	4640      	mov	r0, r8
 8005ec6:	47d0      	blx	sl
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d0ab      	beq.n	8005e24 <_printf_i+0x164>
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	079b      	lsls	r3, r3, #30
 8005ed0:	d413      	bmi.n	8005efa <_printf_i+0x23a>
 8005ed2:	68e0      	ldr	r0, [r4, #12]
 8005ed4:	9b03      	ldr	r3, [sp, #12]
 8005ed6:	4298      	cmp	r0, r3
 8005ed8:	bfb8      	it	lt
 8005eda:	4618      	movlt	r0, r3
 8005edc:	e7a4      	b.n	8005e28 <_printf_i+0x168>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	47d0      	blx	sl
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d09b      	beq.n	8005e24 <_printf_i+0x164>
 8005eec:	3501      	adds	r5, #1
 8005eee:	68e3      	ldr	r3, [r4, #12]
 8005ef0:	9903      	ldr	r1, [sp, #12]
 8005ef2:	1a5b      	subs	r3, r3, r1
 8005ef4:	42ab      	cmp	r3, r5
 8005ef6:	dcf2      	bgt.n	8005ede <_printf_i+0x21e>
 8005ef8:	e7eb      	b.n	8005ed2 <_printf_i+0x212>
 8005efa:	2500      	movs	r5, #0
 8005efc:	f104 0619 	add.w	r6, r4, #25
 8005f00:	e7f5      	b.n	8005eee <_printf_i+0x22e>
 8005f02:	bf00      	nop
 8005f04:	08006239 	.word	0x08006239
 8005f08:	0800624a 	.word	0x0800624a

08005f0c <memmove>:
 8005f0c:	4288      	cmp	r0, r1
 8005f0e:	b510      	push	{r4, lr}
 8005f10:	eb01 0402 	add.w	r4, r1, r2
 8005f14:	d902      	bls.n	8005f1c <memmove+0x10>
 8005f16:	4284      	cmp	r4, r0
 8005f18:	4623      	mov	r3, r4
 8005f1a:	d807      	bhi.n	8005f2c <memmove+0x20>
 8005f1c:	1e43      	subs	r3, r0, #1
 8005f1e:	42a1      	cmp	r1, r4
 8005f20:	d008      	beq.n	8005f34 <memmove+0x28>
 8005f22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f2a:	e7f8      	b.n	8005f1e <memmove+0x12>
 8005f2c:	4402      	add	r2, r0
 8005f2e:	4601      	mov	r1, r0
 8005f30:	428a      	cmp	r2, r1
 8005f32:	d100      	bne.n	8005f36 <memmove+0x2a>
 8005f34:	bd10      	pop	{r4, pc}
 8005f36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f3e:	e7f7      	b.n	8005f30 <memmove+0x24>

08005f40 <_free_r>:
 8005f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f42:	2900      	cmp	r1, #0
 8005f44:	d044      	beq.n	8005fd0 <_free_r+0x90>
 8005f46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f4a:	9001      	str	r0, [sp, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f52:	bfb8      	it	lt
 8005f54:	18e4      	addlt	r4, r4, r3
 8005f56:	f000 f913 	bl	8006180 <__malloc_lock>
 8005f5a:	4a1e      	ldr	r2, [pc, #120]	; (8005fd4 <_free_r+0x94>)
 8005f5c:	9801      	ldr	r0, [sp, #4]
 8005f5e:	6813      	ldr	r3, [r2, #0]
 8005f60:	b933      	cbnz	r3, 8005f70 <_free_r+0x30>
 8005f62:	6063      	str	r3, [r4, #4]
 8005f64:	6014      	str	r4, [r2, #0]
 8005f66:	b003      	add	sp, #12
 8005f68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f6c:	f000 b90e 	b.w	800618c <__malloc_unlock>
 8005f70:	42a3      	cmp	r3, r4
 8005f72:	d908      	bls.n	8005f86 <_free_r+0x46>
 8005f74:	6825      	ldr	r5, [r4, #0]
 8005f76:	1961      	adds	r1, r4, r5
 8005f78:	428b      	cmp	r3, r1
 8005f7a:	bf01      	itttt	eq
 8005f7c:	6819      	ldreq	r1, [r3, #0]
 8005f7e:	685b      	ldreq	r3, [r3, #4]
 8005f80:	1949      	addeq	r1, r1, r5
 8005f82:	6021      	streq	r1, [r4, #0]
 8005f84:	e7ed      	b.n	8005f62 <_free_r+0x22>
 8005f86:	461a      	mov	r2, r3
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	b10b      	cbz	r3, 8005f90 <_free_r+0x50>
 8005f8c:	42a3      	cmp	r3, r4
 8005f8e:	d9fa      	bls.n	8005f86 <_free_r+0x46>
 8005f90:	6811      	ldr	r1, [r2, #0]
 8005f92:	1855      	adds	r5, r2, r1
 8005f94:	42a5      	cmp	r5, r4
 8005f96:	d10b      	bne.n	8005fb0 <_free_r+0x70>
 8005f98:	6824      	ldr	r4, [r4, #0]
 8005f9a:	4421      	add	r1, r4
 8005f9c:	1854      	adds	r4, r2, r1
 8005f9e:	42a3      	cmp	r3, r4
 8005fa0:	6011      	str	r1, [r2, #0]
 8005fa2:	d1e0      	bne.n	8005f66 <_free_r+0x26>
 8005fa4:	681c      	ldr	r4, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	6053      	str	r3, [r2, #4]
 8005faa:	4421      	add	r1, r4
 8005fac:	6011      	str	r1, [r2, #0]
 8005fae:	e7da      	b.n	8005f66 <_free_r+0x26>
 8005fb0:	d902      	bls.n	8005fb8 <_free_r+0x78>
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	6003      	str	r3, [r0, #0]
 8005fb6:	e7d6      	b.n	8005f66 <_free_r+0x26>
 8005fb8:	6825      	ldr	r5, [r4, #0]
 8005fba:	1961      	adds	r1, r4, r5
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	bf04      	itt	eq
 8005fc0:	6819      	ldreq	r1, [r3, #0]
 8005fc2:	685b      	ldreq	r3, [r3, #4]
 8005fc4:	6063      	str	r3, [r4, #4]
 8005fc6:	bf04      	itt	eq
 8005fc8:	1949      	addeq	r1, r1, r5
 8005fca:	6021      	streq	r1, [r4, #0]
 8005fcc:	6054      	str	r4, [r2, #4]
 8005fce:	e7ca      	b.n	8005f66 <_free_r+0x26>
 8005fd0:	b003      	add	sp, #12
 8005fd2:	bd30      	pop	{r4, r5, pc}
 8005fd4:	20004ac4 	.word	0x20004ac4

08005fd8 <sbrk_aligned>:
 8005fd8:	b570      	push	{r4, r5, r6, lr}
 8005fda:	4e0e      	ldr	r6, [pc, #56]	; (8006014 <sbrk_aligned+0x3c>)
 8005fdc:	460c      	mov	r4, r1
 8005fde:	6831      	ldr	r1, [r6, #0]
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	b911      	cbnz	r1, 8005fea <sbrk_aligned+0x12>
 8005fe4:	f000 f8bc 	bl	8006160 <_sbrk_r>
 8005fe8:	6030      	str	r0, [r6, #0]
 8005fea:	4621      	mov	r1, r4
 8005fec:	4628      	mov	r0, r5
 8005fee:	f000 f8b7 	bl	8006160 <_sbrk_r>
 8005ff2:	1c43      	adds	r3, r0, #1
 8005ff4:	d00a      	beq.n	800600c <sbrk_aligned+0x34>
 8005ff6:	1cc4      	adds	r4, r0, #3
 8005ff8:	f024 0403 	bic.w	r4, r4, #3
 8005ffc:	42a0      	cmp	r0, r4
 8005ffe:	d007      	beq.n	8006010 <sbrk_aligned+0x38>
 8006000:	1a21      	subs	r1, r4, r0
 8006002:	4628      	mov	r0, r5
 8006004:	f000 f8ac 	bl	8006160 <_sbrk_r>
 8006008:	3001      	adds	r0, #1
 800600a:	d101      	bne.n	8006010 <sbrk_aligned+0x38>
 800600c:	f04f 34ff 	mov.w	r4, #4294967295
 8006010:	4620      	mov	r0, r4
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	20004ac8 	.word	0x20004ac8

08006018 <_malloc_r>:
 8006018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800601c:	1ccd      	adds	r5, r1, #3
 800601e:	f025 0503 	bic.w	r5, r5, #3
 8006022:	3508      	adds	r5, #8
 8006024:	2d0c      	cmp	r5, #12
 8006026:	bf38      	it	cc
 8006028:	250c      	movcc	r5, #12
 800602a:	2d00      	cmp	r5, #0
 800602c:	4607      	mov	r7, r0
 800602e:	db01      	blt.n	8006034 <_malloc_r+0x1c>
 8006030:	42a9      	cmp	r1, r5
 8006032:	d905      	bls.n	8006040 <_malloc_r+0x28>
 8006034:	230c      	movs	r3, #12
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	2600      	movs	r6, #0
 800603a:	4630      	mov	r0, r6
 800603c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006040:	4e2e      	ldr	r6, [pc, #184]	; (80060fc <_malloc_r+0xe4>)
 8006042:	f000 f89d 	bl	8006180 <__malloc_lock>
 8006046:	6833      	ldr	r3, [r6, #0]
 8006048:	461c      	mov	r4, r3
 800604a:	bb34      	cbnz	r4, 800609a <_malloc_r+0x82>
 800604c:	4629      	mov	r1, r5
 800604e:	4638      	mov	r0, r7
 8006050:	f7ff ffc2 	bl	8005fd8 <sbrk_aligned>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	4604      	mov	r4, r0
 8006058:	d14d      	bne.n	80060f6 <_malloc_r+0xde>
 800605a:	6834      	ldr	r4, [r6, #0]
 800605c:	4626      	mov	r6, r4
 800605e:	2e00      	cmp	r6, #0
 8006060:	d140      	bne.n	80060e4 <_malloc_r+0xcc>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	4631      	mov	r1, r6
 8006066:	4638      	mov	r0, r7
 8006068:	eb04 0803 	add.w	r8, r4, r3
 800606c:	f000 f878 	bl	8006160 <_sbrk_r>
 8006070:	4580      	cmp	r8, r0
 8006072:	d13a      	bne.n	80060ea <_malloc_r+0xd2>
 8006074:	6821      	ldr	r1, [r4, #0]
 8006076:	3503      	adds	r5, #3
 8006078:	1a6d      	subs	r5, r5, r1
 800607a:	f025 0503 	bic.w	r5, r5, #3
 800607e:	3508      	adds	r5, #8
 8006080:	2d0c      	cmp	r5, #12
 8006082:	bf38      	it	cc
 8006084:	250c      	movcc	r5, #12
 8006086:	4629      	mov	r1, r5
 8006088:	4638      	mov	r0, r7
 800608a:	f7ff ffa5 	bl	8005fd8 <sbrk_aligned>
 800608e:	3001      	adds	r0, #1
 8006090:	d02b      	beq.n	80060ea <_malloc_r+0xd2>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	442b      	add	r3, r5
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	e00e      	b.n	80060b8 <_malloc_r+0xa0>
 800609a:	6822      	ldr	r2, [r4, #0]
 800609c:	1b52      	subs	r2, r2, r5
 800609e:	d41e      	bmi.n	80060de <_malloc_r+0xc6>
 80060a0:	2a0b      	cmp	r2, #11
 80060a2:	d916      	bls.n	80060d2 <_malloc_r+0xba>
 80060a4:	1961      	adds	r1, r4, r5
 80060a6:	42a3      	cmp	r3, r4
 80060a8:	6025      	str	r5, [r4, #0]
 80060aa:	bf18      	it	ne
 80060ac:	6059      	strne	r1, [r3, #4]
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	bf08      	it	eq
 80060b2:	6031      	streq	r1, [r6, #0]
 80060b4:	5162      	str	r2, [r4, r5]
 80060b6:	604b      	str	r3, [r1, #4]
 80060b8:	4638      	mov	r0, r7
 80060ba:	f104 060b 	add.w	r6, r4, #11
 80060be:	f000 f865 	bl	800618c <__malloc_unlock>
 80060c2:	f026 0607 	bic.w	r6, r6, #7
 80060c6:	1d23      	adds	r3, r4, #4
 80060c8:	1af2      	subs	r2, r6, r3
 80060ca:	d0b6      	beq.n	800603a <_malloc_r+0x22>
 80060cc:	1b9b      	subs	r3, r3, r6
 80060ce:	50a3      	str	r3, [r4, r2]
 80060d0:	e7b3      	b.n	800603a <_malloc_r+0x22>
 80060d2:	6862      	ldr	r2, [r4, #4]
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	bf0c      	ite	eq
 80060d8:	6032      	streq	r2, [r6, #0]
 80060da:	605a      	strne	r2, [r3, #4]
 80060dc:	e7ec      	b.n	80060b8 <_malloc_r+0xa0>
 80060de:	4623      	mov	r3, r4
 80060e0:	6864      	ldr	r4, [r4, #4]
 80060e2:	e7b2      	b.n	800604a <_malloc_r+0x32>
 80060e4:	4634      	mov	r4, r6
 80060e6:	6876      	ldr	r6, [r6, #4]
 80060e8:	e7b9      	b.n	800605e <_malloc_r+0x46>
 80060ea:	230c      	movs	r3, #12
 80060ec:	603b      	str	r3, [r7, #0]
 80060ee:	4638      	mov	r0, r7
 80060f0:	f000 f84c 	bl	800618c <__malloc_unlock>
 80060f4:	e7a1      	b.n	800603a <_malloc_r+0x22>
 80060f6:	6025      	str	r5, [r4, #0]
 80060f8:	e7de      	b.n	80060b8 <_malloc_r+0xa0>
 80060fa:	bf00      	nop
 80060fc:	20004ac4 	.word	0x20004ac4

08006100 <_realloc_r>:
 8006100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006104:	4680      	mov	r8, r0
 8006106:	4614      	mov	r4, r2
 8006108:	460e      	mov	r6, r1
 800610a:	b921      	cbnz	r1, 8006116 <_realloc_r+0x16>
 800610c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006110:	4611      	mov	r1, r2
 8006112:	f7ff bf81 	b.w	8006018 <_malloc_r>
 8006116:	b92a      	cbnz	r2, 8006124 <_realloc_r+0x24>
 8006118:	f7ff ff12 	bl	8005f40 <_free_r>
 800611c:	4625      	mov	r5, r4
 800611e:	4628      	mov	r0, r5
 8006120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006124:	f000 f838 	bl	8006198 <_malloc_usable_size_r>
 8006128:	4284      	cmp	r4, r0
 800612a:	4607      	mov	r7, r0
 800612c:	d802      	bhi.n	8006134 <_realloc_r+0x34>
 800612e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006132:	d812      	bhi.n	800615a <_realloc_r+0x5a>
 8006134:	4621      	mov	r1, r4
 8006136:	4640      	mov	r0, r8
 8006138:	f7ff ff6e 	bl	8006018 <_malloc_r>
 800613c:	4605      	mov	r5, r0
 800613e:	2800      	cmp	r0, #0
 8006140:	d0ed      	beq.n	800611e <_realloc_r+0x1e>
 8006142:	42bc      	cmp	r4, r7
 8006144:	4622      	mov	r2, r4
 8006146:	4631      	mov	r1, r6
 8006148:	bf28      	it	cs
 800614a:	463a      	movcs	r2, r7
 800614c:	f7ff fbb8 	bl	80058c0 <memcpy>
 8006150:	4631      	mov	r1, r6
 8006152:	4640      	mov	r0, r8
 8006154:	f7ff fef4 	bl	8005f40 <_free_r>
 8006158:	e7e1      	b.n	800611e <_realloc_r+0x1e>
 800615a:	4635      	mov	r5, r6
 800615c:	e7df      	b.n	800611e <_realloc_r+0x1e>
	...

08006160 <_sbrk_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4d06      	ldr	r5, [pc, #24]	; (800617c <_sbrk_r+0x1c>)
 8006164:	2300      	movs	r3, #0
 8006166:	4604      	mov	r4, r0
 8006168:	4608      	mov	r0, r1
 800616a:	602b      	str	r3, [r5, #0]
 800616c:	f7fa fd4c 	bl	8000c08 <_sbrk>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_sbrk_r+0x1a>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	b103      	cbz	r3, 800617a <_sbrk_r+0x1a>
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	20004acc 	.word	0x20004acc

08006180 <__malloc_lock>:
 8006180:	4801      	ldr	r0, [pc, #4]	; (8006188 <__malloc_lock+0x8>)
 8006182:	f000 b811 	b.w	80061a8 <__retarget_lock_acquire_recursive>
 8006186:	bf00      	nop
 8006188:	20004ad0 	.word	0x20004ad0

0800618c <__malloc_unlock>:
 800618c:	4801      	ldr	r0, [pc, #4]	; (8006194 <__malloc_unlock+0x8>)
 800618e:	f000 b80c 	b.w	80061aa <__retarget_lock_release_recursive>
 8006192:	bf00      	nop
 8006194:	20004ad0 	.word	0x20004ad0

08006198 <_malloc_usable_size_r>:
 8006198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800619c:	1f18      	subs	r0, r3, #4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bfbc      	itt	lt
 80061a2:	580b      	ldrlt	r3, [r1, r0]
 80061a4:	18c0      	addlt	r0, r0, r3
 80061a6:	4770      	bx	lr

080061a8 <__retarget_lock_acquire_recursive>:
 80061a8:	4770      	bx	lr

080061aa <__retarget_lock_release_recursive>:
 80061aa:	4770      	bx	lr

080061ac <_init>:
 80061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ae:	bf00      	nop
 80061b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b2:	bc08      	pop	{r3}
 80061b4:	469e      	mov	lr, r3
 80061b6:	4770      	bx	lr

080061b8 <_fini>:
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ba:	bf00      	nop
 80061bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061be:	bc08      	pop	{r3}
 80061c0:	469e      	mov	lr, r3
 80061c2:	4770      	bx	lr
