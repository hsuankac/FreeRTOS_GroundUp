
14_working_with_queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005db4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005f54  08005f54  00015f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800608c  0800608c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800608c  0800608c  0001608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006094  08006094  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006094  08006094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800609c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ad8  20000074  08006110  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b4c  08006110  00024b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b45  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c7  00000000  00000000  00038be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  0003beb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  0003d318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044d1  00000000  00000000  0003e658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174c6  00000000  00000000  00042b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099bd4  00000000  00000000  00059fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3bc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e10  00000000  00000000  000f3c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f3c 	.word	0x08005f3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005f3c 	.word	0x08005f3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <uart2_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

int uart2_write(int ch)
	{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & USART_SR_TXE)){}
 800058c:	bf00      	nop
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <uart2_write+0x2c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f9      	beq.n	800058e <uart2_write+0xa>

	 /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <uart2_write+0x2c>)
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	6053      	str	r3, [r2, #4]
	return ch;
 80005a2:	687b      	ldr	r3, [r7, #4]
	}
 80005a4:	4618      	mov	r0, r3
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40004400 	.word	0x40004400

080005b4 <__io_putchar>:

int __io_putchar(int ch)
	{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff ffe1 	bl	8000584 <uart2_write>
	return ch;
 80005c2:	687b      	ldr	r3, [r7, #4]
	}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <main>:

xQueueHandle yearQueue;


int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af02      	add	r7, sp, #8

  HAL_Init();
 80005d2:	f000 faf7 	bl	8000bc4 <HAL_Init>


  SystemClock_Config();
 80005d6:	f000 f86f 	bl	80006b8 <SystemClock_Config>
  MX_GPIO_Init();
 80005da:	f000 f8f5 	bl	80007c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005de:	f000 f8c9 	bl	8000774 <MX_USART2_UART_Init>
  /*
   * printf won't work sometimes if you didn't enable newlib for RTOS
   * */

  yearQueue=xQueueCreate(5,sizeof(int32_t));
 80005e2:	2200      	movs	r2, #0
 80005e4:	2104      	movs	r1, #4
 80005e6:	2005      	movs	r0, #5
 80005e8:	f002 f938 	bl	800285c <xQueueGenericCreate>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <main+0x54>)
 80005f0:	6013      	str	r3, [r2, #0]
  xTaskCreate(SenderTask,"sender task",100,NULL,1,&sender_handle);
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <main+0x58>)
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2301      	movs	r3, #1
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2264      	movs	r2, #100	; 0x64
 80005fe:	490a      	ldr	r1, [pc, #40]	; (8000628 <main+0x5c>)
 8000600:	480a      	ldr	r0, [pc, #40]	; (800062c <main+0x60>)
 8000602:	f002 fdce 	bl	80031a2 <xTaskCreate>
  xTaskCreate(ReceiverTask,"receiver task",100,NULL,2,&receiver_handle);
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <main+0x64>)
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2302      	movs	r3, #2
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	2264      	movs	r2, #100	; 0x64
 8000612:	4908      	ldr	r1, [pc, #32]	; (8000634 <main+0x68>)
 8000614:	4808      	ldr	r0, [pc, #32]	; (8000638 <main+0x6c>)
 8000616:	f002 fdc4 	bl	80031a2 <xTaskCreate>

  vTaskStartScheduler();
 800061a:	f002 ff1d 	bl	8003458 <vTaskStartScheduler>


  while (1)
 800061e:	e7fe      	b.n	800061e <main+0x52>
 8000620:	200000dc 	.word	0x200000dc
 8000624:	200000d4 	.word	0x200000d4
 8000628:	08005f54 	.word	0x08005f54
 800062c:	0800063d 	.word	0x0800063d
 8000630:	200000d8 	.word	0x200000d8
 8000634:	08005f60 	.word	0x08005f60
 8000638:	08000675 	.word	0x08000675

0800063c <SenderTask>:
}



void SenderTask (void *pvParameters)
	{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	int32_t value_to_send= 2050;
 8000644:	f640 0302 	movw	r3, #2050	; 0x802
 8000648:	613b      	str	r3, [r7, #16]
	BaseType_t qStatus;
	while(1)
		{
		qStatus=xQueueSend(yearQueue,&value_to_send,0);
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <SenderTask+0x30>)
 800064c:	6818      	ldr	r0, [r3, #0]
 800064e:	f107 0110 	add.w	r1, r7, #16
 8000652:	2300      	movs	r3, #0
 8000654:	2200      	movs	r2, #0
 8000656:	f002 f95f 	bl	8002918 <xQueueGenericSend>
 800065a:	6178      	str	r0, [r7, #20]
		if(qStatus !=pdPASS)
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d0f3      	beq.n	800064a <SenderTask+0xe>
			{
			printf("Error: Data couldn't be sent\r\n");
 8000662:	4803      	ldr	r0, [pc, #12]	; (8000670 <SenderTask+0x34>)
 8000664:	f004 fe0e 	bl	8005284 <puts>
		qStatus=xQueueSend(yearQueue,&value_to_send,0);
 8000668:	e7ef      	b.n	800064a <SenderTask+0xe>
 800066a:	bf00      	nop
 800066c:	200000dc 	.word	0x200000dc
 8000670:	08005f70 	.word	0x08005f70

08000674 <ReceiverTask>:
		}
	for (volatile int i=0;i<100000;i++);

	}
void ReceiverTask (void *pvParameters)
	{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

	int32_t value_received;
	const TickType_t wait_time =pdMS_TO_TICKS(100);
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	617b      	str	r3, [r7, #20]
	BaseType_t qStatus;
	while(1)
		{
		qStatus=xQueueReceive(yearQueue, &value_received, wait_time);
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <ReceiverTask+0x38>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f107 010c 	add.w	r1, r7, #12
 8000688:	697a      	ldr	r2, [r7, #20]
 800068a:	4618      	mov	r0, r3
 800068c:	f002 fade 	bl	8002c4c <xQueueReceive>
 8000690:	6138      	str	r0, [r7, #16]
		if(qStatus==pdPASS)
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d105      	bne.n	80006a4 <ReceiverTask+0x30>
			{
			printf("The value received is %ld \r\n",value_received);
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	4619      	mov	r1, r3
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <ReceiverTask+0x3c>)
 800069e:	f004 fd6b 	bl	8005178 <iprintf>
 80006a2:	e7ed      	b.n	8000680 <ReceiverTask+0xc>
			}
		else {printf("couldn't receive\r\n");}
 80006a4:	4803      	ldr	r0, [pc, #12]	; (80006b4 <ReceiverTask+0x40>)
 80006a6:	f004 fded 	bl	8005284 <puts>
		qStatus=xQueueReceive(yearQueue, &value_received, wait_time);
 80006aa:	e7e9      	b.n	8000680 <ReceiverTask+0xc>
 80006ac:	200000dc 	.word	0x200000dc
 80006b0:	08005f90 	.word	0x08005f90
 80006b4:	08005fb0 	.word	0x08005fb0

080006b8 <SystemClock_Config>:
	}



void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 fcb9 	bl	800503e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <SystemClock_Config+0xb4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a21      	ldr	r2, [pc, #132]	; (800076c <SystemClock_Config+0xb4>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <SystemClock_Config+0xb4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <SystemClock_Config+0xb8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <SystemClock_Config+0xb8>)
 8000702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <SystemClock_Config+0xb8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fcf3 	bl	8001114 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000734:	f000 f874 	bl	8000820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f000 ff56 	bl	8001604 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800075e:	f000 f85f 	bl	8000820 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <MX_USART2_UART_Init+0x50>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007ac:	f001 fbbc 	bl	8001f28 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b6:	f000 f833 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000090 	.word	0x20000090
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_GPIO_Init+0x30>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <MX_GPIO_Init+0x30>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_GPIO_Init+0x30>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d101      	bne.n	8000812 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800080e:	f000 f9fb 	bl	8000c08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40014800 	.word	0x40014800

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	e7fe      	b.n	8000828 <Error_Handler+0x8>
	...

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_MspInit+0x54>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	4a11      	ldr	r2, [pc, #68]	; (8000880 <HAL_MspInit+0x54>)
 800083c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000840:	6453      	str	r3, [r2, #68]	; 0x44
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x54>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <HAL_MspInit+0x54>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <HAL_MspInit+0x54>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_MspInit+0x54>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	210f      	movs	r1, #15
 800086e:	f06f 0001 	mvn.w	r0, #1
 8000872:	f000 faa1 	bl	8000db8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a19      	ldr	r2, [pc, #100]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d12b      	bne.n	80008fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_UART_MspInit+0x88>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a17      	ldr	r2, [pc, #92]	; (800090c <HAL_UART_MspInit+0x88>)
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_UART_MspInit+0x88>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <HAL_UART_MspInit+0x88>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a10      	ldr	r2, [pc, #64]	; (800090c <HAL_UART_MspInit+0x88>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_UART_MspInit+0x88>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008de:	230c      	movs	r3, #12
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ee:	2307      	movs	r3, #7
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <HAL_UART_MspInit+0x8c>)
 80008fa:	f000 fa87 	bl	8000e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40004400 	.word	0x40004400
 800090c:	40023800 	.word	0x40023800
 8000910:	40020000 	.word	0x40020000

08000914 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	; 0x30
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000924:	2200      	movs	r2, #0
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	201a      	movs	r0, #26
 800092a:	f000 fa45 	bl	8000db8 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800092e:	201a      	movs	r0, #26
 8000930:	f000 fa5e 	bl	8000df0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <HAL_InitTick+0xa0>)
 800093a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093c:	4a1d      	ldr	r2, [pc, #116]	; (80009b4 <HAL_InitTick+0xa0>)
 800093e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000942:	6453      	str	r3, [r2, #68]	; 0x44
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <HAL_InitTick+0xa0>)
 8000946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000950:	f107 0210 	add.w	r2, r7, #16
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4611      	mov	r1, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f001 f832 	bl	80019c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000960:	f001 f81c 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 8000964:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000968:	4a13      	ldr	r2, [pc, #76]	; (80009b8 <HAL_InitTick+0xa4>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	0c9b      	lsrs	r3, r3, #18
 8000970:	3b01      	subs	r3, #1
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <HAL_InitTick+0xa8>)
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <HAL_InitTick+0xac>)
 8000978:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_InitTick+0xa8>)
 800097c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000980:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_InitTick+0xa8>)
 8000984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000986:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_InitTick+0xa8>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <HAL_InitTick+0xa8>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000994:	4809      	ldr	r0, [pc, #36]	; (80009bc <HAL_InitTick+0xa8>)
 8000996:	f001 f847 	bl	8001a28 <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d104      	bne.n	80009aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 80009a0:	4806      	ldr	r0, [pc, #24]	; (80009bc <HAL_InitTick+0xa8>)
 80009a2:	f001 f89b 	bl	8001adc <HAL_TIM_Base_Start_IT>
 80009a6:	4603      	mov	r3, r0
 80009a8:	e000      	b.n	80009ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3730      	adds	r7, #48	; 0x30
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	431bde83 	.word	0x431bde83
 80009bc:	200000e0 	.word	0x200000e0
 80009c0:	40014800 	.word	0x40014800

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80009f6:	f001 f8d3 	bl	8001ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000e0 	.word	0x200000e0

08000a04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	e00a      	b.n	8000a2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a16:	f3af 8000 	nop.w
 8000a1a:	4601      	mov	r1, r0
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	1c5a      	adds	r2, r3, #1
 8000a20:	60ba      	str	r2, [r7, #8]
 8000a22:	b2ca      	uxtb	r2, r1
 8000a24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf0      	blt.n	8000a16 <_read+0x12>
	}

return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	60f8      	str	r0, [r7, #12]
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	e009      	b.n	8000a64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	60ba      	str	r2, [r7, #8]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fdab 	bl	80005b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf1      	blt.n	8000a50 <_write+0x12>
	}
	return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_close>:

int _close(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <_isatty>:

int _isatty(int file)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
	return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <_sbrk+0x5c>)
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <_sbrk+0x60>)
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <_sbrk+0x64>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <_sbrk+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d207      	bcs.n	8000b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b10:	f004 f964 	bl	8004ddc <__errno>
 8000b14:	4603      	mov	r3, r0
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <_sbrk+0x64>)
 8000b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20020000 	.word	0x20020000
 8000b40:	00000400 	.word	0x00000400
 8000b44:	20000128 	.word	0x20000128
 8000b48:	20004b50 	.word	0x20004b50

08000b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <SystemInit+0x20>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <SystemInit+0x20>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b76:	490e      	ldr	r1, [pc, #56]	; (8000bb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b78:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b8c:	4c0b      	ldr	r4, [pc, #44]	; (8000bbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b9a:	f7ff ffd7 	bl	8000b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f004 fa19 	bl	8004fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba2:	f7ff fd13 	bl	80005cc <main>
  bx  lr    
 8000ba6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bb4:	0800609c 	.word	0x0800609c
  ldr r2, =_sbss
 8000bb8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bbc:	20004b4c 	.word	0x20004b4c

08000bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <HAL_Init+0x40>)
 8000bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_Init+0x40>)
 8000bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x40>)
 8000be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f8d8 	bl	8000da2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f7ff fe8e 	bl	8000914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fe18 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023c00 	.word	0x40023c00

08000c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x20>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x24>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_IncTick+0x24>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	2000012c 	.word	0x2000012c

08000c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <HAL_GetTick+0x14>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	2000012c 	.word	0x2000012c

08000c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c64:	4013      	ands	r3, r2
 8000c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7a:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	60d3      	str	r3, [r2, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	f003 0307 	and.w	r3, r3, #7
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	db0b      	blt.n	8000cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 021f 	and.w	r2, r3, #31
 8000cc4:	4907      	ldr	r1, [pc, #28]	; (8000ce4 <__NVIC_EnableIRQ+0x38>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	095b      	lsrs	r3, r3, #5
 8000ccc:	2001      	movs	r0, #1
 8000cce:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000e100 	.word	0xe000e100

08000ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db0a      	blt.n	8000d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	490c      	ldr	r1, [pc, #48]	; (8000d34 <__NVIC_SetPriority+0x4c>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d10:	e00a      	b.n	8000d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4908      	ldr	r1, [pc, #32]	; (8000d38 <__NVIC_SetPriority+0x50>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	0112      	lsls	r2, r2, #4
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	440b      	add	r3, r1
 8000d26:	761a      	strb	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f1c3 0307 	rsb	r3, r3, #7
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	bf28      	it	cs
 8000d5a:	2304      	movcs	r3, #4
 8000d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3304      	adds	r3, #4
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d902      	bls.n	8000d6c <NVIC_EncodePriority+0x30>
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3b03      	subs	r3, #3
 8000d6a:	e000      	b.n	8000d6e <NVIC_EncodePriority+0x32>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43d9      	mvns	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	4313      	orrs	r3, r2
         );
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	; 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ff4c 	bl	8000c48 <__NVIC_SetPriorityGrouping>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dca:	f7ff ff61 	bl	8000c90 <__NVIC_GetPriorityGrouping>
 8000dce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	68b9      	ldr	r1, [r7, #8]
 8000dd4:	6978      	ldr	r0, [r7, #20]
 8000dd6:	f7ff ffb1 	bl	8000d3c <NVIC_EncodePriority>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff80 	bl	8000ce8 <__NVIC_SetPriority>
}
 8000de8:	bf00      	nop
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff54 	bl	8000cac <__NVIC_EnableIRQ>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
 8000e26:	e159      	b.n	80010dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	f040 8148 	bne.w	80010d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d005      	beq.n	8000e5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d130      	bne.n	8000ec0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e94:	2201      	movs	r2, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	091b      	lsrs	r3, r3, #4
 8000eaa:	f003 0201 	and.w	r2, r3, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d017      	beq.n	8000efc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d123      	bne.n	8000f50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	08da      	lsrs	r2, r3, #3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3208      	adds	r2, #8
 8000f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	220f      	movs	r2, #15
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	691a      	ldr	r2, [r3, #16]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	08da      	lsrs	r2, r3, #3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3208      	adds	r2, #8
 8000f4a:	69b9      	ldr	r1, [r7, #24]
 8000f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0203 	and.w	r2, r3, #3
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 80a2 	beq.w	80010d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b57      	ldr	r3, [pc, #348]	; (80010f4 <HAL_GPIO_Init+0x2e8>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a56      	ldr	r2, [pc, #344]	; (80010f4 <HAL_GPIO_Init+0x2e8>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b54      	ldr	r3, [pc, #336]	; (80010f4 <HAL_GPIO_Init+0x2e8>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fae:	4a52      	ldr	r2, [pc, #328]	; (80010f8 <HAL_GPIO_Init+0x2ec>)
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a49      	ldr	r2, [pc, #292]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d019      	beq.n	800100e <HAL_GPIO_Init+0x202>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a48      	ldr	r2, [pc, #288]	; (8001100 <HAL_GPIO_Init+0x2f4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d013      	beq.n	800100a <HAL_GPIO_Init+0x1fe>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a47      	ldr	r2, [pc, #284]	; (8001104 <HAL_GPIO_Init+0x2f8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d00d      	beq.n	8001006 <HAL_GPIO_Init+0x1fa>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a46      	ldr	r2, [pc, #280]	; (8001108 <HAL_GPIO_Init+0x2fc>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d007      	beq.n	8001002 <HAL_GPIO_Init+0x1f6>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a45      	ldr	r2, [pc, #276]	; (800110c <HAL_GPIO_Init+0x300>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d101      	bne.n	8000ffe <HAL_GPIO_Init+0x1f2>
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	e008      	b.n	8001010 <HAL_GPIO_Init+0x204>
 8000ffe:	2307      	movs	r3, #7
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x204>
 8001002:	2303      	movs	r3, #3
 8001004:	e004      	b.n	8001010 <HAL_GPIO_Init+0x204>
 8001006:	2302      	movs	r3, #2
 8001008:	e002      	b.n	8001010 <HAL_GPIO_Init+0x204>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x204>
 800100e:	2300      	movs	r3, #0
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	f002 0203 	and.w	r2, r2, #3
 8001016:	0092      	lsls	r2, r2, #2
 8001018:	4093      	lsls	r3, r2
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001020:	4935      	ldr	r1, [pc, #212]	; (80010f8 <HAL_GPIO_Init+0x2ec>)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102e:	4b38      	ldr	r3, [pc, #224]	; (8001110 <HAL_GPIO_Init+0x304>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001052:	4a2f      	ldr	r2, [pc, #188]	; (8001110 <HAL_GPIO_Init+0x304>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001058:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <HAL_GPIO_Init+0x304>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800107c:	4a24      	ldr	r2, [pc, #144]	; (8001110 <HAL_GPIO_Init+0x304>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <HAL_GPIO_Init+0x304>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a6:	4a1a      	ldr	r2, [pc, #104]	; (8001110 <HAL_GPIO_Init+0x304>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <HAL_GPIO_Init+0x304>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d0:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <HAL_GPIO_Init+0x304>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3301      	adds	r3, #1
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	f67f aea2 	bls.w	8000e28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40013800 	.word	0x40013800
 80010fc:	40020000 	.word	0x40020000
 8001100:	40020400 	.word	0x40020400
 8001104:	40020800 	.word	0x40020800
 8001108:	40020c00 	.word	0x40020c00
 800110c:	40021000 	.word	0x40021000
 8001110:	40013c00 	.word	0x40013c00

08001114 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e267      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d075      	beq.n	800121e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001132:	4b88      	ldr	r3, [pc, #544]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	2b04      	cmp	r3, #4
 800113c:	d00c      	beq.n	8001158 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113e:	4b85      	ldr	r3, [pc, #532]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001146:	2b08      	cmp	r3, #8
 8001148:	d112      	bne.n	8001170 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114a:	4b82      	ldr	r3, [pc, #520]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001156:	d10b      	bne.n	8001170 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	4b7e      	ldr	r3, [pc, #504]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d05b      	beq.n	800121c <HAL_RCC_OscConfig+0x108>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d157      	bne.n	800121c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e242      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001178:	d106      	bne.n	8001188 <HAL_RCC_OscConfig+0x74>
 800117a:	4b76      	ldr	r3, [pc, #472]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a75      	ldr	r2, [pc, #468]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e01d      	b.n	80011c4 <HAL_RCC_OscConfig+0xb0>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001190:	d10c      	bne.n	80011ac <HAL_RCC_OscConfig+0x98>
 8001192:	4b70      	ldr	r3, [pc, #448]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a6f      	ldr	r2, [pc, #444]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	4b6d      	ldr	r3, [pc, #436]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a6c      	ldr	r2, [pc, #432]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e00b      	b.n	80011c4 <HAL_RCC_OscConfig+0xb0>
 80011ac:	4b69      	ldr	r3, [pc, #420]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a68      	ldr	r2, [pc, #416]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b66      	ldr	r3, [pc, #408]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a65      	ldr	r2, [pc, #404]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d013      	beq.n	80011f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fd30 	bl	8000c30 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fd2c 	bl	8000c30 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b64      	cmp	r3, #100	; 0x64
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e207      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e6:	4b5b      	ldr	r3, [pc, #364]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0xc0>
 80011f2:	e014      	b.n	800121e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fd1c 	bl	8000c30 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011fc:	f7ff fd18 	bl	8000c30 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b64      	cmp	r3, #100	; 0x64
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e1f3      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120e:	4b51      	ldr	r3, [pc, #324]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0xe8>
 800121a:	e000      	b.n	800121e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d063      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800122a:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00b      	beq.n	800124e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001236:	4b47      	ldr	r3, [pc, #284]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800123e:	2b08      	cmp	r3, #8
 8001240:	d11c      	bne.n	800127c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001242:	4b44      	ldr	r3, [pc, #272]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d116      	bne.n	800127c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124e:	4b41      	ldr	r3, [pc, #260]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d005      	beq.n	8001266 <HAL_RCC_OscConfig+0x152>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d001      	beq.n	8001266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e1c7      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001266:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4937      	ldr	r1, [pc, #220]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127a:	e03a      	b.n	80012f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d020      	beq.n	80012c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001284:	4b34      	ldr	r3, [pc, #208]	; (8001358 <HAL_RCC_OscConfig+0x244>)
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128a:	f7ff fcd1 	bl	8000c30 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001292:	f7ff fccd 	bl	8000c30 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e1a8      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	4925      	ldr	r1, [pc, #148]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
 80012c4:	e015      	b.n	80012f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c6:	4b24      	ldr	r3, [pc, #144]	; (8001358 <HAL_RCC_OscConfig+0x244>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff fcb0 	bl	8000c30 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d4:	f7ff fcac 	bl	8000c30 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e187      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d036      	beq.n	800136c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d016      	beq.n	8001334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_RCC_OscConfig+0x248>)
 8001308:	2201      	movs	r2, #1
 800130a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130c:	f7ff fc90 	bl	8000c30 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001314:	f7ff fc8c 	bl	8000c30 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e167      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_RCC_OscConfig+0x240>)
 8001328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0x200>
 8001332:	e01b      	b.n	800136c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_RCC_OscConfig+0x248>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133a:	f7ff fc79 	bl	8000c30 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001340:	e00e      	b.n	8001360 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001342:	f7ff fc75 	bl	8000c30 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d907      	bls.n	8001360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e150      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
 8001354:	40023800 	.word	0x40023800
 8001358:	42470000 	.word	0x42470000
 800135c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001360:	4b88      	ldr	r3, [pc, #544]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1ea      	bne.n	8001342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 8097 	beq.w	80014a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800137e:	4b81      	ldr	r3, [pc, #516]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10f      	bne.n	80013aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b7d      	ldr	r3, [pc, #500]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a7c      	ldr	r2, [pc, #496]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b7a      	ldr	r3, [pc, #488]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013a6:	2301      	movs	r3, #1
 80013a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013aa:	4b77      	ldr	r3, [pc, #476]	; (8001588 <HAL_RCC_OscConfig+0x474>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d118      	bne.n	80013e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b6:	4b74      	ldr	r3, [pc, #464]	; (8001588 <HAL_RCC_OscConfig+0x474>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a73      	ldr	r2, [pc, #460]	; (8001588 <HAL_RCC_OscConfig+0x474>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fc35 	bl	8000c30 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ca:	f7ff fc31 	bl	8000c30 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e10c      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013dc:	4b6a      	ldr	r3, [pc, #424]	; (8001588 <HAL_RCC_OscConfig+0x474>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d106      	bne.n	80013fe <HAL_RCC_OscConfig+0x2ea>
 80013f0:	4b64      	ldr	r3, [pc, #400]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 80013f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f4:	4a63      	ldr	r2, [pc, #396]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6713      	str	r3, [r2, #112]	; 0x70
 80013fc:	e01c      	b.n	8001438 <HAL_RCC_OscConfig+0x324>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b05      	cmp	r3, #5
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0x30c>
 8001406:	4b5f      	ldr	r3, [pc, #380]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140a:	4a5e      	ldr	r2, [pc, #376]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6713      	str	r3, [r2, #112]	; 0x70
 8001412:	4b5c      	ldr	r3, [pc, #368]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001416:	4a5b      	ldr	r2, [pc, #364]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6713      	str	r3, [r2, #112]	; 0x70
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0x324>
 8001420:	4b58      	ldr	r3, [pc, #352]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001424:	4a57      	ldr	r2, [pc, #348]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001426:	f023 0301 	bic.w	r3, r3, #1
 800142a:	6713      	str	r3, [r2, #112]	; 0x70
 800142c:	4b55      	ldr	r3, [pc, #340]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001430:	4a54      	ldr	r2, [pc, #336]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001432:	f023 0304 	bic.w	r3, r3, #4
 8001436:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d015      	beq.n	800146c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7ff fbf6 	bl	8000c30 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001446:	e00a      	b.n	800145e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f7ff fbf2 	bl	8000c30 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	; 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e0cb      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145e:	4b49      	ldr	r3, [pc, #292]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0ee      	beq.n	8001448 <HAL_RCC_OscConfig+0x334>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146c:	f7ff fbe0 	bl	8000c30 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001472:	e00a      	b.n	800148a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001474:	f7ff fbdc 	bl	8000c30 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e0b5      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148a:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1ee      	bne.n	8001474 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001496:	7dfb      	ldrb	r3, [r7, #23]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d105      	bne.n	80014a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149c:	4b39      	ldr	r3, [pc, #228]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	4a38      	ldr	r2, [pc, #224]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 80014a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 80a1 	beq.w	80015f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d05c      	beq.n	8001578 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d141      	bne.n	800154a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c6:	4b31      	ldr	r3, [pc, #196]	; (800158c <HAL_RCC_OscConfig+0x478>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fbb0 	bl	8000c30 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d4:	f7ff fbac 	bl	8000c30 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e087      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69da      	ldr	r2, [r3, #28]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	019b      	lsls	r3, r3, #6
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001508:	085b      	lsrs	r3, r3, #1
 800150a:	3b01      	subs	r3, #1
 800150c:	041b      	lsls	r3, r3, #16
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001514:	061b      	lsls	r3, r3, #24
 8001516:	491b      	ldr	r1, [pc, #108]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_RCC_OscConfig+0x478>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff fb85 	bl	8000c30 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152a:	f7ff fb81 	bl	8000c30 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e05c      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x416>
 8001548:	e054      	b.n	80015f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_RCC_OscConfig+0x478>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fb6e 	bl	8000c30 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001558:	f7ff fb6a 	bl	8000c30 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e045      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_RCC_OscConfig+0x470>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x444>
 8001576:	e03d      	b.n	80015f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d107      	bne.n	8001590 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e038      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
 8001584:	40023800 	.word	0x40023800
 8001588:	40007000 	.word	0x40007000
 800158c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_RCC_OscConfig+0x4ec>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d028      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d121      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d11a      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015c0:	4013      	ands	r3, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d111      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	085b      	lsrs	r3, r3, #1
 80015d8:	3b01      	subs	r3, #1
 80015da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015dc:	429a      	cmp	r2, r3
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800

08001604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0cc      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001618:	4b68      	ldr	r3, [pc, #416]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d90c      	bls.n	8001640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001626:	4b65      	ldr	r3, [pc, #404]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	4b63      	ldr	r3, [pc, #396]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0b8      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d020      	beq.n	800168e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001658:	4b59      	ldr	r3, [pc, #356]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a58      	ldr	r2, [pc, #352]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001662:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001670:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	4a52      	ldr	r2, [pc, #328]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800167a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800167c:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	494d      	ldr	r1, [pc, #308]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d044      	beq.n	8001724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	4b47      	ldr	r3, [pc, #284]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d119      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e07f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d003      	beq.n	80016c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c2:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e06f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e067      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e2:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f023 0203 	bic.w	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4934      	ldr	r1, [pc, #208]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f4:	f7ff fa9c 	bl	8000c30 <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fc:	f7ff fa98 	bl	8000c30 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e04f      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001712:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 020c 	and.w	r2, r3, #12
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	429a      	cmp	r2, r3
 8001722:	d1eb      	bne.n	80016fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001724:	4b25      	ldr	r3, [pc, #148]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d20c      	bcs.n	800174c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e032      	b.n	80017b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4916      	ldr	r1, [pc, #88]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	490e      	ldr	r1, [pc, #56]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800178a:	f000 f821 	bl	80017d0 <HAL_RCC_GetSysClockFreq>
 800178e:	4602      	mov	r2, r0
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	490a      	ldr	r1, [pc, #40]	; (80017c4 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	5ccb      	ldrb	r3, [r1, r3]
 800179e:	fa22 f303 	lsr.w	r3, r2, r3
 80017a2:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_RCC_ClockConfig+0x1c8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff f8b2 	bl	8000914 <HAL_InitTick>

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00
 80017c0:	40023800 	.word	0x40023800
 80017c4:	08005fdc 	.word	0x08005fdc
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000004 	.word	0x20000004

080017d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d4:	b090      	sub	sp, #64	; 0x40
 80017d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
 80017dc:	2300      	movs	r3, #0
 80017de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d00d      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0x40>
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	f200 80a1 	bhi.w	800193c <HAL_RCC_GetSysClockFreq+0x16c>
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0x34>
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d003      	beq.n	800180a <HAL_RCC_GetSysClockFreq+0x3a>
 8001802:	e09b      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_GetSysClockFreq+0x184>)
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001808:	e09b      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800180a:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_RCC_GetSysClockFreq+0x188>)
 800180c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800180e:	e098      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001810:	4b4f      	ldr	r3, [pc, #316]	; (8001950 <HAL_RCC_GetSysClockFreq+0x180>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800181a:	4b4d      	ldr	r3, [pc, #308]	; (8001950 <HAL_RCC_GetSysClockFreq+0x180>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d028      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001826:	4b4a      	ldr	r3, [pc, #296]	; (8001950 <HAL_RCC_GetSysClockFreq+0x180>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	099b      	lsrs	r3, r3, #6
 800182c:	2200      	movs	r2, #0
 800182e:	623b      	str	r3, [r7, #32]
 8001830:	627a      	str	r2, [r7, #36]	; 0x24
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001838:	2100      	movs	r1, #0
 800183a:	4b47      	ldr	r3, [pc, #284]	; (8001958 <HAL_RCC_GetSysClockFreq+0x188>)
 800183c:	fb03 f201 	mul.w	r2, r3, r1
 8001840:	2300      	movs	r3, #0
 8001842:	fb00 f303 	mul.w	r3, r0, r3
 8001846:	4413      	add	r3, r2
 8001848:	4a43      	ldr	r2, [pc, #268]	; (8001958 <HAL_RCC_GetSysClockFreq+0x188>)
 800184a:	fba0 1202 	umull	r1, r2, r0, r2
 800184e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001850:	460a      	mov	r2, r1
 8001852:	62ba      	str	r2, [r7, #40]	; 0x28
 8001854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001856:	4413      	add	r3, r2
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800185a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185c:	2200      	movs	r2, #0
 800185e:	61bb      	str	r3, [r7, #24]
 8001860:	61fa      	str	r2, [r7, #28]
 8001862:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001866:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800186a:	f7fe fd09 	bl	8000280 <__aeabi_uldivmod>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4613      	mov	r3, r2
 8001874:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001876:	e053      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001878:	4b35      	ldr	r3, [pc, #212]	; (8001950 <HAL_RCC_GetSysClockFreq+0x180>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	099b      	lsrs	r3, r3, #6
 800187e:	2200      	movs	r2, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	617a      	str	r2, [r7, #20]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800188a:	f04f 0b00 	mov.w	fp, #0
 800188e:	4652      	mov	r2, sl
 8001890:	465b      	mov	r3, fp
 8001892:	f04f 0000 	mov.w	r0, #0
 8001896:	f04f 0100 	mov.w	r1, #0
 800189a:	0159      	lsls	r1, r3, #5
 800189c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a0:	0150      	lsls	r0, r2, #5
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	ebb2 080a 	subs.w	r8, r2, sl
 80018aa:	eb63 090b 	sbc.w	r9, r3, fp
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018c2:	ebb2 0408 	subs.w	r4, r2, r8
 80018c6:	eb63 0509 	sbc.w	r5, r3, r9
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	00eb      	lsls	r3, r5, #3
 80018d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018d8:	00e2      	lsls	r2, r4, #3
 80018da:	4614      	mov	r4, r2
 80018dc:	461d      	mov	r5, r3
 80018de:	eb14 030a 	adds.w	r3, r4, sl
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	eb45 030b 	adc.w	r3, r5, fp
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018f6:	4629      	mov	r1, r5
 80018f8:	028b      	lsls	r3, r1, #10
 80018fa:	4621      	mov	r1, r4
 80018fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001900:	4621      	mov	r1, r4
 8001902:	028a      	lsls	r2, r1, #10
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190a:	2200      	movs	r2, #0
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	60fa      	str	r2, [r7, #12]
 8001910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001914:	f7fe fcb4 	bl	8000280 <__aeabi_uldivmod>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4613      	mov	r3, r2
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_RCC_GetSysClockFreq+0x180>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	0c1b      	lsrs	r3, r3, #16
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	3301      	adds	r3, #1
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001930:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001934:	fbb2 f3f3 	udiv	r3, r2, r3
 8001938:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800193a:	e002      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_RCC_GetSysClockFreq+0x184>)
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001944:	4618      	mov	r0, r3
 8001946:	3740      	adds	r7, #64	; 0x40
 8001948:	46bd      	mov	sp, r7
 800194a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800
 8001954:	00f42400 	.word	0x00f42400
 8001958:	017d7840 	.word	0x017d7840

0800195c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_RCC_GetHCLKFreq+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000000 	.word	0x20000000

08001974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001978:	f7ff fff0 	bl	800195c <HAL_RCC_GetHCLKFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	0a9b      	lsrs	r3, r3, #10
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4903      	ldr	r1, [pc, #12]	; (8001998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	08005fec 	.word	0x08005fec

0800199c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019a0:	f7ff ffdc 	bl	800195c <HAL_RCC_GetHCLKFreq>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	0b5b      	lsrs	r3, r3, #13
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	4903      	ldr	r1, [pc, #12]	; (80019c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019b2:	5ccb      	ldrb	r3, [r1, r3]
 80019b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40023800 	.word	0x40023800
 80019c0:	08005fec 	.word	0x08005fec

080019c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	220f      	movs	r2, #15
 80019d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_RCC_GetClockConfig+0x5c>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0203 	and.w	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_RCC_GetClockConfig+0x5c>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_RCC_GetClockConfig+0x5c>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_GetClockConfig+0x5c>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	08db      	lsrs	r3, r3, #3
 80019fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_RCC_GetClockConfig+0x60>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0207 	and.w	r2, r3, #7
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	601a      	str	r2, [r3, #0]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40023c00 	.word	0x40023c00

08001a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e041      	b.n	8001abe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f839 	bl	8001ac6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3304      	adds	r3, #4
 8001a64:	4619      	mov	r1, r3
 8001a66:	4610      	mov	r0, r2
 8001a68:	f000 f9ca 	bl	8001e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d001      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e044      	b.n	8001b7e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <HAL_TIM_Base_Start_IT+0xb0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d018      	beq.n	8001b48 <HAL_TIM_Base_Start_IT+0x6c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b1e:	d013      	beq.n	8001b48 <HAL_TIM_Base_Start_IT+0x6c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1a      	ldr	r2, [pc, #104]	; (8001b90 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00e      	beq.n	8001b48 <HAL_TIM_Base_Start_IT+0x6c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a19      	ldr	r2, [pc, #100]	; (8001b94 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d009      	beq.n	8001b48 <HAL_TIM_Base_Start_IT+0x6c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d004      	beq.n	8001b48 <HAL_TIM_Base_Start_IT+0x6c>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a16      	ldr	r2, [pc, #88]	; (8001b9c <HAL_TIM_Base_Start_IT+0xc0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d111      	bne.n	8001b6c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d010      	beq.n	8001b7c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 0201 	orr.w	r2, r2, #1
 8001b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6a:	e007      	b.n	8001b7c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40010000 	.word	0x40010000
 8001b90:	40000400 	.word	0x40000400
 8001b94:	40000800 	.word	0x40000800
 8001b98:	40000c00 	.word	0x40000c00
 8001b9c:	40014000 	.word	0x40014000

08001ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d122      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d11b      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0202 	mvn.w	r2, #2
 8001bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f8ee 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 8001be8:	e005      	b.n	8001bf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f8e0 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f8f1 	bl	8001dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d122      	bne.n	8001c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d11b      	bne.n	8001c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f06f 0204 	mvn.w	r2, #4
 8001c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2202      	movs	r2, #2
 8001c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8c4 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 8001c3c:	e005      	b.n	8001c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f8b6 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f8c7 	bl	8001dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d122      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d11b      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f06f 0208 	mvn.w	r2, #8
 8001c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2204      	movs	r2, #4
 8001c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f89a 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 8001c90:	e005      	b.n	8001c9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f88c 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f89d 	bl	8001dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b10      	cmp	r3, #16
 8001cb0:	d122      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b10      	cmp	r3, #16
 8001cbe:	d11b      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 0210 	mvn.w	r2, #16
 8001cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2208      	movs	r2, #8
 8001cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f870 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 8001ce4:	e005      	b.n	8001cf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f862 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f873 	bl	8001dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d10e      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d107      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0201 	mvn.w	r2, #1
 8001d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7fe fd6c 	bl	80007fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2e:	2b80      	cmp	r3, #128	; 0x80
 8001d30:	d10e      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3c:	2b80      	cmp	r3, #128	; 0x80
 8001d3e:	d107      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f8e2 	bl	8001f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5a:	2b40      	cmp	r3, #64	; 0x40
 8001d5c:	d10e      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d68:	2b40      	cmp	r3, #64	; 0x40
 8001d6a:	d107      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f838 	bl	8001dec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	d10e      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b20      	cmp	r3, #32
 8001d96:	d107      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0220 	mvn.w	r2, #32
 8001da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8ac 	bl	8001f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a34      	ldr	r2, [pc, #208]	; (8001ee4 <TIM_Base_SetConfig+0xe4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00f      	beq.n	8001e38 <TIM_Base_SetConfig+0x38>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e1e:	d00b      	beq.n	8001e38 <TIM_Base_SetConfig+0x38>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a31      	ldr	r2, [pc, #196]	; (8001ee8 <TIM_Base_SetConfig+0xe8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d007      	beq.n	8001e38 <TIM_Base_SetConfig+0x38>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a30      	ldr	r2, [pc, #192]	; (8001eec <TIM_Base_SetConfig+0xec>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d003      	beq.n	8001e38 <TIM_Base_SetConfig+0x38>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a2f      	ldr	r2, [pc, #188]	; (8001ef0 <TIM_Base_SetConfig+0xf0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d108      	bne.n	8001e4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a25      	ldr	r2, [pc, #148]	; (8001ee4 <TIM_Base_SetConfig+0xe4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d01b      	beq.n	8001e8a <TIM_Base_SetConfig+0x8a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e58:	d017      	beq.n	8001e8a <TIM_Base_SetConfig+0x8a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a22      	ldr	r2, [pc, #136]	; (8001ee8 <TIM_Base_SetConfig+0xe8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <TIM_Base_SetConfig+0x8a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a21      	ldr	r2, [pc, #132]	; (8001eec <TIM_Base_SetConfig+0xec>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00f      	beq.n	8001e8a <TIM_Base_SetConfig+0x8a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a20      	ldr	r2, [pc, #128]	; (8001ef0 <TIM_Base_SetConfig+0xf0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00b      	beq.n	8001e8a <TIM_Base_SetConfig+0x8a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a1f      	ldr	r2, [pc, #124]	; (8001ef4 <TIM_Base_SetConfig+0xf4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d007      	beq.n	8001e8a <TIM_Base_SetConfig+0x8a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <TIM_Base_SetConfig+0xf8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d003      	beq.n	8001e8a <TIM_Base_SetConfig+0x8a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <TIM_Base_SetConfig+0xfc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d108      	bne.n	8001e9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <TIM_Base_SetConfig+0xe4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d103      	bne.n	8001ed0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	615a      	str	r2, [r3, #20]
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800
 8001ef0:	40000c00 	.word	0x40000c00
 8001ef4:	40014000 	.word	0x40014000
 8001ef8:	40014400 	.word	0x40014400
 8001efc:	40014800 	.word	0x40014800

08001f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e03f      	b.n	8001fba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d106      	bne.n	8001f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe fc98 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2224      	movs	r2, #36	; 0x24
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f829 	bl	8001fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc8:	b0c0      	sub	sp, #256	; 0x100
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe0:	68d9      	ldr	r1, [r3, #12]
 8001fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	ea40 0301 	orr.w	r3, r0, r1
 8001fec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	431a      	orrs	r2, r3
 8002004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800201c:	f021 010c 	bic.w	r1, r1, #12
 8002020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800202a:	430b      	orrs	r3, r1
 800202c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800202e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800203a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800203e:	6999      	ldr	r1, [r3, #24]
 8002040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	ea40 0301 	orr.w	r3, r0, r1
 800204a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800204c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b8f      	ldr	r3, [pc, #572]	; (8002290 <UART_SetConfig+0x2cc>)
 8002054:	429a      	cmp	r2, r3
 8002056:	d005      	beq.n	8002064 <UART_SetConfig+0xa0>
 8002058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4b8d      	ldr	r3, [pc, #564]	; (8002294 <UART_SetConfig+0x2d0>)
 8002060:	429a      	cmp	r2, r3
 8002062:	d104      	bne.n	800206e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002064:	f7ff fc9a 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 8002068:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800206c:	e003      	b.n	8002076 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800206e:	f7ff fc81 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 8002072:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002080:	f040 810c 	bne.w	800229c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002088:	2200      	movs	r2, #0
 800208a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800208e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002092:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002096:	4622      	mov	r2, r4
 8002098:	462b      	mov	r3, r5
 800209a:	1891      	adds	r1, r2, r2
 800209c:	65b9      	str	r1, [r7, #88]	; 0x58
 800209e:	415b      	adcs	r3, r3
 80020a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020a6:	4621      	mov	r1, r4
 80020a8:	eb12 0801 	adds.w	r8, r2, r1
 80020ac:	4629      	mov	r1, r5
 80020ae:	eb43 0901 	adc.w	r9, r3, r1
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020c6:	4690      	mov	r8, r2
 80020c8:	4699      	mov	r9, r3
 80020ca:	4623      	mov	r3, r4
 80020cc:	eb18 0303 	adds.w	r3, r8, r3
 80020d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80020d4:	462b      	mov	r3, r5
 80020d6:	eb49 0303 	adc.w	r3, r9, r3
 80020da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80020de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80020ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80020ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80020f2:	460b      	mov	r3, r1
 80020f4:	18db      	adds	r3, r3, r3
 80020f6:	653b      	str	r3, [r7, #80]	; 0x50
 80020f8:	4613      	mov	r3, r2
 80020fa:	eb42 0303 	adc.w	r3, r2, r3
 80020fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002100:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002104:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002108:	f7fe f8ba 	bl	8000280 <__aeabi_uldivmod>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4b61      	ldr	r3, [pc, #388]	; (8002298 <UART_SetConfig+0x2d4>)
 8002112:	fba3 2302 	umull	r2, r3, r3, r2
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	011c      	lsls	r4, r3, #4
 800211a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800211e:	2200      	movs	r2, #0
 8002120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002124:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002128:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800212c:	4642      	mov	r2, r8
 800212e:	464b      	mov	r3, r9
 8002130:	1891      	adds	r1, r2, r2
 8002132:	64b9      	str	r1, [r7, #72]	; 0x48
 8002134:	415b      	adcs	r3, r3
 8002136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002138:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800213c:	4641      	mov	r1, r8
 800213e:	eb12 0a01 	adds.w	sl, r2, r1
 8002142:	4649      	mov	r1, r9
 8002144:	eb43 0b01 	adc.w	fp, r3, r1
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002154:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800215c:	4692      	mov	sl, r2
 800215e:	469b      	mov	fp, r3
 8002160:	4643      	mov	r3, r8
 8002162:	eb1a 0303 	adds.w	r3, sl, r3
 8002166:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800216a:	464b      	mov	r3, r9
 800216c:	eb4b 0303 	adc.w	r3, fp, r3
 8002170:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002180:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002184:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002188:	460b      	mov	r3, r1
 800218a:	18db      	adds	r3, r3, r3
 800218c:	643b      	str	r3, [r7, #64]	; 0x40
 800218e:	4613      	mov	r3, r2
 8002190:	eb42 0303 	adc.w	r3, r2, r3
 8002194:	647b      	str	r3, [r7, #68]	; 0x44
 8002196:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800219a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800219e:	f7fe f86f 	bl	8000280 <__aeabi_uldivmod>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4611      	mov	r1, r2
 80021a8:	4b3b      	ldr	r3, [pc, #236]	; (8002298 <UART_SetConfig+0x2d4>)
 80021aa:	fba3 2301 	umull	r2, r3, r3, r1
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	2264      	movs	r2, #100	; 0x64
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	1acb      	subs	r3, r1, r3
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80021be:	4b36      	ldr	r3, [pc, #216]	; (8002298 <UART_SetConfig+0x2d4>)
 80021c0:	fba3 2302 	umull	r2, r3, r3, r2
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021cc:	441c      	add	r4, r3
 80021ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021d2:	2200      	movs	r2, #0
 80021d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80021dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80021e0:	4642      	mov	r2, r8
 80021e2:	464b      	mov	r3, r9
 80021e4:	1891      	adds	r1, r2, r2
 80021e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80021e8:	415b      	adcs	r3, r3
 80021ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021f0:	4641      	mov	r1, r8
 80021f2:	1851      	adds	r1, r2, r1
 80021f4:	6339      	str	r1, [r7, #48]	; 0x30
 80021f6:	4649      	mov	r1, r9
 80021f8:	414b      	adcs	r3, r1
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002208:	4659      	mov	r1, fp
 800220a:	00cb      	lsls	r3, r1, #3
 800220c:	4651      	mov	r1, sl
 800220e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002212:	4651      	mov	r1, sl
 8002214:	00ca      	lsls	r2, r1, #3
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	4603      	mov	r3, r0
 800221c:	4642      	mov	r2, r8
 800221e:	189b      	adds	r3, r3, r2
 8002220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002224:	464b      	mov	r3, r9
 8002226:	460a      	mov	r2, r1
 8002228:	eb42 0303 	adc.w	r3, r2, r3
 800222c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800223c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002240:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002244:	460b      	mov	r3, r1
 8002246:	18db      	adds	r3, r3, r3
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
 800224a:	4613      	mov	r3, r2
 800224c:	eb42 0303 	adc.w	r3, r2, r3
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002252:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002256:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800225a:	f7fe f811 	bl	8000280 <__aeabi_uldivmod>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <UART_SetConfig+0x2d4>)
 8002264:	fba3 1302 	umull	r1, r3, r3, r2
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	2164      	movs	r1, #100	; 0x64
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	3332      	adds	r3, #50	; 0x32
 8002276:	4a08      	ldr	r2, [pc, #32]	; (8002298 <UART_SetConfig+0x2d4>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	f003 0207 	and.w	r2, r3, #7
 8002282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4422      	add	r2, r4
 800228a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800228c:	e105      	b.n	800249a <UART_SetConfig+0x4d6>
 800228e:	bf00      	nop
 8002290:	40011000 	.word	0x40011000
 8002294:	40011400 	.word	0x40011400
 8002298:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800229c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022a0:	2200      	movs	r2, #0
 80022a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80022a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80022aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80022ae:	4642      	mov	r2, r8
 80022b0:	464b      	mov	r3, r9
 80022b2:	1891      	adds	r1, r2, r2
 80022b4:	6239      	str	r1, [r7, #32]
 80022b6:	415b      	adcs	r3, r3
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022be:	4641      	mov	r1, r8
 80022c0:	1854      	adds	r4, r2, r1
 80022c2:	4649      	mov	r1, r9
 80022c4:	eb43 0501 	adc.w	r5, r3, r1
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	00eb      	lsls	r3, r5, #3
 80022d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022d6:	00e2      	lsls	r2, r4, #3
 80022d8:	4614      	mov	r4, r2
 80022da:	461d      	mov	r5, r3
 80022dc:	4643      	mov	r3, r8
 80022de:	18e3      	adds	r3, r4, r3
 80022e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022e4:	464b      	mov	r3, r9
 80022e6:	eb45 0303 	adc.w	r3, r5, r3
 80022ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80022ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800230a:	4629      	mov	r1, r5
 800230c:	008b      	lsls	r3, r1, #2
 800230e:	4621      	mov	r1, r4
 8002310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002314:	4621      	mov	r1, r4
 8002316:	008a      	lsls	r2, r1, #2
 8002318:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800231c:	f7fd ffb0 	bl	8000280 <__aeabi_uldivmod>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4b60      	ldr	r3, [pc, #384]	; (80024a8 <UART_SetConfig+0x4e4>)
 8002326:	fba3 2302 	umull	r2, r3, r3, r2
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	011c      	lsls	r4, r3, #4
 800232e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002332:	2200      	movs	r2, #0
 8002334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002338:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800233c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002340:	4642      	mov	r2, r8
 8002342:	464b      	mov	r3, r9
 8002344:	1891      	adds	r1, r2, r2
 8002346:	61b9      	str	r1, [r7, #24]
 8002348:	415b      	adcs	r3, r3
 800234a:	61fb      	str	r3, [r7, #28]
 800234c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002350:	4641      	mov	r1, r8
 8002352:	1851      	adds	r1, r2, r1
 8002354:	6139      	str	r1, [r7, #16]
 8002356:	4649      	mov	r1, r9
 8002358:	414b      	adcs	r3, r1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002368:	4659      	mov	r1, fp
 800236a:	00cb      	lsls	r3, r1, #3
 800236c:	4651      	mov	r1, sl
 800236e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002372:	4651      	mov	r1, sl
 8002374:	00ca      	lsls	r2, r1, #3
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	4603      	mov	r3, r0
 800237c:	4642      	mov	r2, r8
 800237e:	189b      	adds	r3, r3, r2
 8002380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002384:	464b      	mov	r3, r9
 8002386:	460a      	mov	r2, r1
 8002388:	eb42 0303 	adc.w	r3, r2, r3
 800238c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	67bb      	str	r3, [r7, #120]	; 0x78
 800239a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80023a8:	4649      	mov	r1, r9
 80023aa:	008b      	lsls	r3, r1, #2
 80023ac:	4641      	mov	r1, r8
 80023ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023b2:	4641      	mov	r1, r8
 80023b4:	008a      	lsls	r2, r1, #2
 80023b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80023ba:	f7fd ff61 	bl	8000280 <__aeabi_uldivmod>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <UART_SetConfig+0x4e4>)
 80023c4:	fba3 1302 	umull	r1, r3, r3, r2
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	2164      	movs	r1, #100	; 0x64
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	3332      	adds	r3, #50	; 0x32
 80023d6:	4a34      	ldr	r2, [pc, #208]	; (80024a8 <UART_SetConfig+0x4e4>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e2:	441c      	add	r4, r3
 80023e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023e8:	2200      	movs	r2, #0
 80023ea:	673b      	str	r3, [r7, #112]	; 0x70
 80023ec:	677a      	str	r2, [r7, #116]	; 0x74
 80023ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80023f2:	4642      	mov	r2, r8
 80023f4:	464b      	mov	r3, r9
 80023f6:	1891      	adds	r1, r2, r2
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	415b      	adcs	r3, r3
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002402:	4641      	mov	r1, r8
 8002404:	1851      	adds	r1, r2, r1
 8002406:	6039      	str	r1, [r7, #0]
 8002408:	4649      	mov	r1, r9
 800240a:	414b      	adcs	r3, r1
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800241a:	4659      	mov	r1, fp
 800241c:	00cb      	lsls	r3, r1, #3
 800241e:	4651      	mov	r1, sl
 8002420:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002424:	4651      	mov	r1, sl
 8002426:	00ca      	lsls	r2, r1, #3
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	4603      	mov	r3, r0
 800242e:	4642      	mov	r2, r8
 8002430:	189b      	adds	r3, r3, r2
 8002432:	66bb      	str	r3, [r7, #104]	; 0x68
 8002434:	464b      	mov	r3, r9
 8002436:	460a      	mov	r2, r1
 8002438:	eb42 0303 	adc.w	r3, r2, r3
 800243c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800243e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	663b      	str	r3, [r7, #96]	; 0x60
 8002448:	667a      	str	r2, [r7, #100]	; 0x64
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002456:	4649      	mov	r1, r9
 8002458:	008b      	lsls	r3, r1, #2
 800245a:	4641      	mov	r1, r8
 800245c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002460:	4641      	mov	r1, r8
 8002462:	008a      	lsls	r2, r1, #2
 8002464:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002468:	f7fd ff0a 	bl	8000280 <__aeabi_uldivmod>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <UART_SetConfig+0x4e4>)
 8002472:	fba3 1302 	umull	r1, r3, r3, r2
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2164      	movs	r1, #100	; 0x64
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	3332      	adds	r3, #50	; 0x32
 8002484:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <UART_SetConfig+0x4e4>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	f003 020f 	and.w	r2, r3, #15
 8002490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4422      	add	r2, r4
 8002498:	609a      	str	r2, [r3, #8]
}
 800249a:	bf00      	nop
 800249c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80024a0:	46bd      	mov	sp, r7
 80024a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024a6:	bf00      	nop
 80024a8:	51eb851f 	.word	0x51eb851f

080024ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <SysTick_Handler+0x1c>)
 80024b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80024b4:	f001 fc2c 	bl	8003d10 <xTaskGetSchedulerState>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d001      	beq.n	80024c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80024be:	f002 fa13 	bl	80048e8 <xPortSysTickHandler>
  }
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000e010 	.word	0xe000e010

080024cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80024dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4a06      	ldr	r2, [pc, #24]	; (80024fc <vApplicationGetIdleTaskMemory+0x30>)
 80024e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	601a      	str	r2, [r3, #0]
}
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000130 	.word	0x20000130
 80024fc:	200001ec 	.word	0x200001ec

08002500 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a07      	ldr	r2, [pc, #28]	; (800252c <vApplicationGetTimerTaskMemory+0x2c>)
 8002510:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	4a06      	ldr	r2, [pc, #24]	; (8002530 <vApplicationGetTimerTaskMemory+0x30>)
 8002516:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800251e:	601a      	str	r2, [r3, #0]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	200003ec 	.word	0x200003ec
 8002530:	200004a8 	.word	0x200004a8

08002534 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f103 0208 	add.w	r2, r3, #8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800254c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f103 0208 	add.w	r2, r3, #8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f103 0208 	add.w	r2, r3, #8
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800258e:	b480      	push	{r7}
 8002590:	b085      	sub	sp, #20
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	601a      	str	r2, [r3, #0]
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ec:	d103      	bne.n	80025f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	e00c      	b.n	8002610 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3308      	adds	r3, #8
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	e002      	b.n	8002604 <vListInsert+0x2e>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	429a      	cmp	r2, r3
 800260e:	d2f6      	bcs.n	80025fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	601a      	str	r2, [r3, #0]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6892      	ldr	r2, [r2, #8]
 800265e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6852      	ldr	r2, [r2, #4]
 8002668:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	429a      	cmp	r2, r3
 8002672:	d103      	bne.n	800267c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	1e5a      	subs	r2, r3, #1
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b4:	f383 8811 	msr	BASEPRI, r3
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026c2:	bf00      	nop
 80026c4:	e7fe      	b.n	80026c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80026c6:	f002 f87d 	bl	80047c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d2:	68f9      	ldr	r1, [r7, #12]
 80026d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	441a      	add	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	3b01      	subs	r3, #1
 80026f8:	68f9      	ldr	r1, [r7, #12]
 80026fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	441a      	add	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	22ff      	movs	r2, #255	; 0xff
 800270a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	22ff      	movs	r2, #255	; 0xff
 8002712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d114      	bne.n	8002746 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01a      	beq.n	800275a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3310      	adds	r3, #16
 8002728:	4618      	mov	r0, r3
 800272a:	f001 f92f 	bl	800398c <xTaskRemoveFromEventList>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d012      	beq.n	800275a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <xQueueGenericReset+0xcc>)
 8002736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	f3bf 8f6f 	isb	sy
 8002744:	e009      	b.n	800275a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3310      	adds	r3, #16
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fef2 	bl	8002534 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3324      	adds	r3, #36	; 0x24
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff feed 	bl	8002534 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800275a:	f002 f863 	bl	8004824 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800275e:	2301      	movs	r3, #1
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	e000ed04 	.word	0xe000ed04

0800276c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08e      	sub	sp, #56	; 0x38
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10a      	bne.n	8002796 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002784:	f383 8811 	msr	BASEPRI, r3
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002792:	bf00      	nop
 8002794:	e7fe      	b.n	8002794 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027ae:	bf00      	nop
 80027b0:	e7fe      	b.n	80027b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <xQueueGenericCreateStatic+0x52>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <xQueueGenericCreateStatic+0x56>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <xQueueGenericCreateStatic+0x58>
 80027c2:	2300      	movs	r3, #0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80027c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027cc:	f383 8811 	msr	BASEPRI, r3
 80027d0:	f3bf 8f6f 	isb	sy
 80027d4:	f3bf 8f4f 	dsb	sy
 80027d8:	623b      	str	r3, [r7, #32]
}
 80027da:	bf00      	nop
 80027dc:	e7fe      	b.n	80027dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <xQueueGenericCreateStatic+0x7e>
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <xQueueGenericCreateStatic+0x82>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <xQueueGenericCreateStatic+0x84>
 80027ee:	2300      	movs	r3, #0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10a      	bne.n	800280a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80027f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	61fb      	str	r3, [r7, #28]
}
 8002806:	bf00      	nop
 8002808:	e7fe      	b.n	8002808 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800280a:	2350      	movs	r3, #80	; 0x50
 800280c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b50      	cmp	r3, #80	; 0x50
 8002812:	d00a      	beq.n	800282a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	61bb      	str	r3, [r7, #24]
}
 8002826:	bf00      	nop
 8002828:	e7fe      	b.n	8002828 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800282a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00d      	beq.n	8002852 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800283e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	4613      	mov	r3, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	68b9      	ldr	r1, [r7, #8]
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f83f 	bl	80028d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002854:	4618      	mov	r0, r3
 8002856:	3730      	adds	r7, #48	; 0x30
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af02      	add	r7, sp, #8
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	4613      	mov	r3, r2
 8002868:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	613b      	str	r3, [r7, #16]
}
 8002882:	bf00      	nop
 8002884:	e7fe      	b.n	8002884 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	3350      	adds	r3, #80	; 0x50
 8002894:	4618      	mov	r0, r3
 8002896:	f002 f8b7 	bl	8004a08 <pvPortMalloc>
 800289a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d011      	beq.n	80028c6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	3350      	adds	r3, #80	; 0x50
 80028aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028b4:	79fa      	ldrb	r2, [r7, #7]
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	4613      	mov	r3, r2
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f805 	bl	80028d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028c6:	69bb      	ldr	r3, [r7, #24]
	}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3720      	adds	r7, #32
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d103      	bne.n	80028ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e002      	b.n	80028f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028fe:	2101      	movs	r1, #1
 8002900:	69b8      	ldr	r0, [r7, #24]
 8002902:	f7ff fecb 	bl	800269c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08e      	sub	sp, #56	; 0x38
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002926:	2300      	movs	r3, #0
 8002928:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <xQueueGenericSend+0x32>
	__asm volatile
 8002934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002938:	f383 8811 	msr	BASEPRI, r3
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002946:	bf00      	nop
 8002948:	e7fe      	b.n	8002948 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d103      	bne.n	8002958 <xQueueGenericSend+0x40>
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <xQueueGenericSend+0x44>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <xQueueGenericSend+0x46>
 800295c:	2300      	movs	r3, #0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <xQueueGenericSend+0x60>
	__asm volatile
 8002962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002974:	bf00      	nop
 8002976:	e7fe      	b.n	8002976 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d103      	bne.n	8002986 <xQueueGenericSend+0x6e>
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <xQueueGenericSend+0x72>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <xQueueGenericSend+0x74>
 800298a:	2300      	movs	r3, #0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	623b      	str	r3, [r7, #32]
}
 80029a2:	bf00      	nop
 80029a4:	e7fe      	b.n	80029a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029a6:	f001 f9b3 	bl	8003d10 <xTaskGetSchedulerState>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <xQueueGenericSend+0x9e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <xQueueGenericSend+0xa2>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <xQueueGenericSend+0xa4>
 80029ba:	2300      	movs	r3, #0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80029c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	61fb      	str	r3, [r7, #28]
}
 80029d2:	bf00      	nop
 80029d4:	e7fe      	b.n	80029d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029d6:	f001 fef5 	bl	80047c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d302      	bcc.n	80029ec <xQueueGenericSend+0xd4>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d129      	bne.n	8002a40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029f2:	f000 fa0b 	bl	8002e0c <prvCopyDataToQueue>
 80029f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d010      	beq.n	8002a22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a02:	3324      	adds	r3, #36	; 0x24
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 ffc1 	bl	800398c <xTaskRemoveFromEventList>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a10:	4b3f      	ldr	r3, [pc, #252]	; (8002b10 <xQueueGenericSend+0x1f8>)
 8002a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	e00a      	b.n	8002a38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a28:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <xQueueGenericSend+0x1f8>)
 8002a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a38:	f001 fef4 	bl	8004824 <vPortExitCritical>
				return pdPASS;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e063      	b.n	8002b08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d103      	bne.n	8002a4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a46:	f001 feed 	bl	8004824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e05c      	b.n	8002b08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d106      	bne.n	8002a62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fffb 	bl	8003a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a62:	f001 fedf 	bl	8004824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a66:	f000 fd67 	bl	8003538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a6a:	f001 feab 	bl	80047c4 <vPortEnterCritical>
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a74:	b25b      	sxtb	r3, r3
 8002a76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a7a:	d103      	bne.n	8002a84 <xQueueGenericSend+0x16c>
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a8a:	b25b      	sxtb	r3, r3
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a90:	d103      	bne.n	8002a9a <xQueueGenericSend+0x182>
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a9a:	f001 fec3 	bl	8004824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a9e:	1d3a      	adds	r2, r7, #4
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 ffea 	bl	8003a80 <xTaskCheckForTimeOut>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d124      	bne.n	8002afc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ab4:	f000 faa2 	bl	8002ffc <prvIsQueueFull>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d018      	beq.n	8002af0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	3310      	adds	r3, #16
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 ff10 	bl	80038ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ace:	f000 fa2d 	bl	8002f2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ad2:	f000 fd3f 	bl	8003554 <xTaskResumeAll>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f47f af7c 	bne.w	80029d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002ade:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <xQueueGenericSend+0x1f8>)
 8002ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	f3bf 8f4f 	dsb	sy
 8002aea:	f3bf 8f6f 	isb	sy
 8002aee:	e772      	b.n	80029d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002af2:	f000 fa1b 	bl	8002f2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002af6:	f000 fd2d 	bl	8003554 <xTaskResumeAll>
 8002afa:	e76c      	b.n	80029d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002afe:	f000 fa15 	bl	8002f2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b02:	f000 fd27 	bl	8003554 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3738      	adds	r7, #56	; 0x38
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	e000ed04 	.word	0xe000ed04

08002b14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b090      	sub	sp, #64	; 0x40
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b3e:	bf00      	nop
 8002b40:	e7fe      	b.n	8002b40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d103      	bne.n	8002b50 <xQueueGenericSendFromISR+0x3c>
 8002b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <xQueueGenericSendFromISR+0x40>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <xQueueGenericSendFromISR+0x42>
 8002b54:	2300      	movs	r3, #0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10a      	bne.n	8002b70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b6c:	bf00      	nop
 8002b6e:	e7fe      	b.n	8002b6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d103      	bne.n	8002b7e <xQueueGenericSendFromISR+0x6a>
 8002b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <xQueueGenericSendFromISR+0x6e>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <xQueueGenericSendFromISR+0x70>
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	623b      	str	r3, [r7, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	e7fe      	b.n	8002b9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b9e:	f001 fef3 	bl	8004988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ba2:	f3ef 8211 	mrs	r2, BASEPRI
 8002ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	61fa      	str	r2, [r7, #28]
 8002bb8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002bba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d302      	bcc.n	8002bd0 <xQueueGenericSendFromISR+0xbc>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d12f      	bne.n	8002c30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002be6:	f000 f911 	bl	8002e0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002bea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bf2:	d112      	bne.n	8002c1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d016      	beq.n	8002c2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfe:	3324      	adds	r3, #36	; 0x24
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fec3 	bl	800398c <xTaskRemoveFromEventList>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00e      	beq.n	8002c2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	e007      	b.n	8002c2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c1e:	3301      	adds	r3, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	b25a      	sxtb	r2, r3
 8002c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002c2e:	e001      	b.n	8002c34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3740      	adds	r7, #64	; 0x40
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08c      	sub	sp, #48	; 0x30
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10a      	bne.n	8002c7c <xQueueReceive+0x30>
	__asm volatile
 8002c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6a:	f383 8811 	msr	BASEPRI, r3
 8002c6e:	f3bf 8f6f 	isb	sy
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	623b      	str	r3, [r7, #32]
}
 8002c78:	bf00      	nop
 8002c7a:	e7fe      	b.n	8002c7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d103      	bne.n	8002c8a <xQueueReceive+0x3e>
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <xQueueReceive+0x42>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <xQueueReceive+0x44>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10a      	bne.n	8002caa <xQueueReceive+0x5e>
	__asm volatile
 8002c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	61fb      	str	r3, [r7, #28]
}
 8002ca6:	bf00      	nop
 8002ca8:	e7fe      	b.n	8002ca8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002caa:	f001 f831 	bl	8003d10 <xTaskGetSchedulerState>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d102      	bne.n	8002cba <xQueueReceive+0x6e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <xQueueReceive+0x72>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <xQueueReceive+0x74>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <xQueueReceive+0x8e>
	__asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	61bb      	str	r3, [r7, #24]
}
 8002cd6:	bf00      	nop
 8002cd8:	e7fe      	b.n	8002cd8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cda:	f001 fd73 	bl	80047c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d01f      	beq.n	8002d2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cee:	f000 f8f7 	bl	8002ee0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	1e5a      	subs	r2, r3, #1
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00f      	beq.n	8002d22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d04:	3310      	adds	r3, #16
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fe40 	bl	800398c <xTaskRemoveFromEventList>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d007      	beq.n	8002d22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d12:	4b3d      	ldr	r3, [pc, #244]	; (8002e08 <xQueueReceive+0x1bc>)
 8002d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d22:	f001 fd7f 	bl	8004824 <vPortExitCritical>
				return pdPASS;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e069      	b.n	8002dfe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d103      	bne.n	8002d38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d30:	f001 fd78 	bl	8004824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e062      	b.n	8002dfe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d3e:	f107 0310 	add.w	r3, r7, #16
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fe86 	bl	8003a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d4c:	f001 fd6a 	bl	8004824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d50:	f000 fbf2 	bl	8003538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d54:	f001 fd36 	bl	80047c4 <vPortEnterCritical>
 8002d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d5e:	b25b      	sxtb	r3, r3
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d64:	d103      	bne.n	8002d6e <xQueueReceive+0x122>
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d74:	b25b      	sxtb	r3, r3
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d7a:	d103      	bne.n	8002d84 <xQueueReceive+0x138>
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d84:	f001 fd4e 	bl	8004824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d88:	1d3a      	adds	r2, r7, #4
 8002d8a:	f107 0310 	add.w	r3, r7, #16
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fe75 	bl	8003a80 <xTaskCheckForTimeOut>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d123      	bne.n	8002de4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d9e:	f000 f917 	bl	8002fd0 <prvIsQueueEmpty>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d017      	beq.n	8002dd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002daa:	3324      	adds	r3, #36	; 0x24
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fd9b 	bl	80038ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002db8:	f000 f8b8 	bl	8002f2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002dbc:	f000 fbca 	bl	8003554 <xTaskResumeAll>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d189      	bne.n	8002cda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <xQueueReceive+0x1bc>)
 8002dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	e780      	b.n	8002cda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dda:	f000 f8a7 	bl	8002f2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dde:	f000 fbb9 	bl	8003554 <xTaskResumeAll>
 8002de2:	e77a      	b.n	8002cda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002de6:	f000 f8a1 	bl	8002f2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dea:	f000 fbb3 	bl	8003554 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df0:	f000 f8ee 	bl	8002fd0 <prvIsQueueEmpty>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f43f af6f 	beq.w	8002cda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002dfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3730      	adds	r7, #48	; 0x30
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	e000ed04 	.word	0xe000ed04

08002e0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10d      	bne.n	8002e46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d14d      	bne.n	8002ece <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 ff88 	bl	8003d4c <xTaskPriorityDisinherit>
 8002e3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	e043      	b.n	8002ece <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d119      	bne.n	8002e80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6858      	ldr	r0, [r3, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	461a      	mov	r2, r3
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	f002 f8e3 	bl	8005022 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	441a      	add	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d32b      	bcc.n	8002ece <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	e026      	b.n	8002ece <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	68d8      	ldr	r0, [r3, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	f002 f8c9 	bl	8005022 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	425b      	negs	r3, r3
 8002e9a:	441a      	add	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d207      	bcs.n	8002ebc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	425b      	negs	r3, r3
 8002eb6:	441a      	add	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d105      	bne.n	8002ece <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ed6:	697b      	ldr	r3, [r7, #20]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d018      	beq.n	8002f24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	441a      	add	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d303      	bcc.n	8002f14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68d9      	ldr	r1, [r3, #12]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	6838      	ldr	r0, [r7, #0]
 8002f20:	f002 f87f 	bl	8005022 <memcpy>
	}
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f34:	f001 fc46 	bl	80047c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f40:	e011      	b.n	8002f66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d012      	beq.n	8002f70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3324      	adds	r3, #36	; 0x24
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fd1c 	bl	800398c <xTaskRemoveFromEventList>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f5a:	f000 fdf3 	bl	8003b44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	dce9      	bgt.n	8002f42 <prvUnlockQueue+0x16>
 8002f6e:	e000      	b.n	8002f72 <prvUnlockQueue+0x46>
					break;
 8002f70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	22ff      	movs	r2, #255	; 0xff
 8002f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f7a:	f001 fc53 	bl	8004824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f7e:	f001 fc21 	bl	80047c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f8a:	e011      	b.n	8002fb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d012      	beq.n	8002fba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3310      	adds	r3, #16
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fcf7 	bl	800398c <xTaskRemoveFromEventList>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002fa4:	f000 fdce 	bl	8003b44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002fa8:	7bbb      	ldrb	r3, [r7, #14]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	dce9      	bgt.n	8002f8c <prvUnlockQueue+0x60>
 8002fb8:	e000      	b.n	8002fbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002fba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	22ff      	movs	r2, #255	; 0xff
 8002fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002fc4:	f001 fc2e 	bl	8004824 <vPortExitCritical>
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fd8:	f001 fbf4 	bl	80047c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d102      	bne.n	8002fea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	e001      	b.n	8002fee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fee:	f001 fc19 	bl	8004824 <vPortExitCritical>

	return xReturn;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003004:	f001 fbde 	bl	80047c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003010:	429a      	cmp	r2, r3
 8003012:	d102      	bne.n	800301a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003014:	2301      	movs	r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	e001      	b.n	800301e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800301e:	f001 fc01 	bl	8004824 <vPortExitCritical>

	return xReturn;
 8003022:	68fb      	ldr	r3, [r7, #12]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	e014      	b.n	8003066 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800303c:	4a0f      	ldr	r2, [pc, #60]	; (800307c <vQueueAddToRegistry+0x50>)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10b      	bne.n	8003060 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003048:	490c      	ldr	r1, [pc, #48]	; (800307c <vQueueAddToRegistry+0x50>)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003052:	4a0a      	ldr	r2, [pc, #40]	; (800307c <vQueueAddToRegistry+0x50>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800305e:	e006      	b.n	800306e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3301      	adds	r3, #1
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b07      	cmp	r3, #7
 800306a:	d9e7      	bls.n	800303c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	200008a8 	.word	0x200008a8

08003080 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003090:	f001 fb98 	bl	80047c4 <vPortEnterCritical>
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800309a:	b25b      	sxtb	r3, r3
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030a0:	d103      	bne.n	80030aa <vQueueWaitForMessageRestricted+0x2a>
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030b0:	b25b      	sxtb	r3, r3
 80030b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b6:	d103      	bne.n	80030c0 <vQueueWaitForMessageRestricted+0x40>
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030c0:	f001 fbb0 	bl	8004824 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d106      	bne.n	80030da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	3324      	adds	r3, #36	; 0x24
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fc2d 	bl	8003934 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80030da:	6978      	ldr	r0, [r7, #20]
 80030dc:	f7ff ff26 	bl	8002f2c <prvUnlockQueue>
	}
 80030e0:	bf00      	nop
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08e      	sub	sp, #56	; 0x38
 80030ec:	af04      	add	r7, sp, #16
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <xTaskCreateStatic+0x2a>
	__asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	623b      	str	r3, [r7, #32]
}
 800310e:	bf00      	nop
 8003110:	e7fe      	b.n	8003110 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10a      	bne.n	800312e <xTaskCreateStatic+0x46>
	__asm volatile
 8003118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	61fb      	str	r3, [r7, #28]
}
 800312a:	bf00      	nop
 800312c:	e7fe      	b.n	800312c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800312e:	23bc      	movs	r3, #188	; 0xbc
 8003130:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2bbc      	cmp	r3, #188	; 0xbc
 8003136:	d00a      	beq.n	800314e <xTaskCreateStatic+0x66>
	__asm volatile
 8003138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	61bb      	str	r3, [r7, #24]
}
 800314a:	bf00      	nop
 800314c:	e7fe      	b.n	800314c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800314e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003152:	2b00      	cmp	r3, #0
 8003154:	d01e      	beq.n	8003194 <xTaskCreateStatic+0xac>
 8003156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01b      	beq.n	8003194 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003164:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	2202      	movs	r2, #2
 800316a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800316e:	2300      	movs	r3, #0
 8003170:	9303      	str	r3, [sp, #12]
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	9302      	str	r3, [sp, #8]
 8003176:	f107 0314 	add.w	r3, r7, #20
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f850 	bl	800322c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800318c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800318e:	f000 f8f3 	bl	8003378 <prvAddNewTaskToReadyList>
 8003192:	e001      	b.n	8003198 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003198:	697b      	ldr	r3, [r7, #20]
	}
 800319a:	4618      	mov	r0, r3
 800319c:	3728      	adds	r7, #40	; 0x28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b08c      	sub	sp, #48	; 0x30
 80031a6:	af04      	add	r7, sp, #16
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	4613      	mov	r3, r2
 80031b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 fc26 	bl	8004a08 <pvPortMalloc>
 80031bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00e      	beq.n	80031e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80031c4:	20bc      	movs	r0, #188	; 0xbc
 80031c6:	f001 fc1f 	bl	8004a08 <pvPortMalloc>
 80031ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
 80031d8:	e005      	b.n	80031e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031da:	6978      	ldr	r0, [r7, #20]
 80031dc:	f001 fce0 	bl	8004ba0 <vPortFree>
 80031e0:	e001      	b.n	80031e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d017      	beq.n	800321c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031f4:	88fa      	ldrh	r2, [r7, #6]
 80031f6:	2300      	movs	r3, #0
 80031f8:	9303      	str	r3, [sp, #12]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	9302      	str	r3, [sp, #8]
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	9301      	str	r3, [sp, #4]
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f80e 	bl	800322c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003210:	69f8      	ldr	r0, [r7, #28]
 8003212:	f000 f8b1 	bl	8003378 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003216:	2301      	movs	r3, #1
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	e002      	b.n	8003222 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800321c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003220:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003222:	69bb      	ldr	r3, [r7, #24]
	}
 8003224:	4618      	mov	r0, r3
 8003226:	3720      	adds	r7, #32
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	461a      	mov	r2, r3
 8003244:	21a5      	movs	r1, #165	; 0xa5
 8003246:	f001 fefa 	bl	800503e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003254:	3b01      	subs	r3, #1
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	f023 0307 	bic.w	r3, r3, #7
 8003262:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <prvInitialiseNewTask+0x58>
	__asm volatile
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	617b      	str	r3, [r7, #20]
}
 8003280:	bf00      	nop
 8003282:	e7fe      	b.n	8003282 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01f      	beq.n	80032ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	e012      	b.n	80032b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	4413      	add	r3, r2
 8003296:	7819      	ldrb	r1, [r3, #0]
 8003298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	4413      	add	r3, r2
 800329e:	3334      	adds	r3, #52	; 0x34
 80032a0:	460a      	mov	r2, r1
 80032a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	4413      	add	r3, r2
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d006      	beq.n	80032be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	3301      	adds	r3, #1
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	2b0f      	cmp	r3, #15
 80032ba:	d9e9      	bls.n	8003290 <prvInitialiseNewTask+0x64>
 80032bc:	e000      	b.n	80032c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80032be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032c8:	e003      	b.n	80032d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	2b37      	cmp	r3, #55	; 0x37
 80032d6:	d901      	bls.n	80032dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032d8:	2337      	movs	r3, #55	; 0x37
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	2200      	movs	r2, #0
 80032ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	3304      	adds	r3, #4
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff f93e 	bl	8002574 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	3318      	adds	r3, #24
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff f939 	bl	8002574 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003306:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003316:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	2200      	movs	r2, #0
 800331c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	2200      	movs	r2, #0
 8003324:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332a:	3354      	adds	r3, #84	; 0x54
 800332c:	2260      	movs	r2, #96	; 0x60
 800332e:	2100      	movs	r1, #0
 8003330:	4618      	mov	r0, r3
 8003332:	f001 fe84 	bl	800503e <memset>
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	4a0c      	ldr	r2, [pc, #48]	; (800336c <prvInitialiseNewTask+0x140>)
 800333a:	659a      	str	r2, [r3, #88]	; 0x58
 800333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333e:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <prvInitialiseNewTask+0x144>)
 8003340:	65da      	str	r2, [r3, #92]	; 0x5c
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	4a0b      	ldr	r2, [pc, #44]	; (8003374 <prvInitialiseNewTask+0x148>)
 8003346:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	68f9      	ldr	r1, [r7, #12]
 800334c:	69b8      	ldr	r0, [r7, #24]
 800334e:	f001 f90d 	bl	800456c <pxPortInitialiseStack>
 8003352:	4602      	mov	r2, r0
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003362:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003364:	bf00      	nop
 8003366:	3720      	adds	r7, #32
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	08006014 	.word	0x08006014
 8003370:	08006034 	.word	0x08006034
 8003374:	08005ff4 	.word	0x08005ff4

08003378 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003380:	f001 fa20 	bl	80047c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003384:	4b2d      	ldr	r3, [pc, #180]	; (800343c <prvAddNewTaskToReadyList+0xc4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3301      	adds	r3, #1
 800338a:	4a2c      	ldr	r2, [pc, #176]	; (800343c <prvAddNewTaskToReadyList+0xc4>)
 800338c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800338e:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <prvAddNewTaskToReadyList+0xc8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003396:	4a2a      	ldr	r2, [pc, #168]	; (8003440 <prvAddNewTaskToReadyList+0xc8>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800339c:	4b27      	ldr	r3, [pc, #156]	; (800343c <prvAddNewTaskToReadyList+0xc4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d110      	bne.n	80033c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033a4:	f000 fbf2 	bl	8003b8c <prvInitialiseTaskLists>
 80033a8:	e00d      	b.n	80033c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033aa:	4b26      	ldr	r3, [pc, #152]	; (8003444 <prvAddNewTaskToReadyList+0xcc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033b2:	4b23      	ldr	r3, [pc, #140]	; (8003440 <prvAddNewTaskToReadyList+0xc8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	429a      	cmp	r2, r3
 80033be:	d802      	bhi.n	80033c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033c0:	4a1f      	ldr	r2, [pc, #124]	; (8003440 <prvAddNewTaskToReadyList+0xc8>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033c6:	4b20      	ldr	r3, [pc, #128]	; (8003448 <prvAddNewTaskToReadyList+0xd0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3301      	adds	r3, #1
 80033cc:	4a1e      	ldr	r2, [pc, #120]	; (8003448 <prvAddNewTaskToReadyList+0xd0>)
 80033ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <prvAddNewTaskToReadyList+0xd0>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	4b1b      	ldr	r3, [pc, #108]	; (800344c <prvAddNewTaskToReadyList+0xd4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d903      	bls.n	80033ec <prvAddNewTaskToReadyList+0x74>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	4a18      	ldr	r2, [pc, #96]	; (800344c <prvAddNewTaskToReadyList+0xd4>)
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4a15      	ldr	r2, [pc, #84]	; (8003450 <prvAddNewTaskToReadyList+0xd8>)
 80033fa:	441a      	add	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f7ff f8c3 	bl	800258e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003408:	f001 fa0c 	bl	8004824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <prvAddNewTaskToReadyList+0xcc>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00e      	beq.n	8003432 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003414:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <prvAddNewTaskToReadyList+0xc8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	429a      	cmp	r2, r3
 8003420:	d207      	bcs.n	8003432 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <prvAddNewTaskToReadyList+0xdc>)
 8003424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000dbc 	.word	0x20000dbc
 8003440:	200008e8 	.word	0x200008e8
 8003444:	20000dc8 	.word	0x20000dc8
 8003448:	20000dd8 	.word	0x20000dd8
 800344c:	20000dc4 	.word	0x20000dc4
 8003450:	200008ec 	.word	0x200008ec
 8003454:	e000ed04 	.word	0xe000ed04

08003458 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003462:	2300      	movs	r3, #0
 8003464:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003466:	463a      	mov	r2, r7
 8003468:	1d39      	adds	r1, r7, #4
 800346a:	f107 0308 	add.w	r3, r7, #8
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff f82c 	bl	80024cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003474:	6839      	ldr	r1, [r7, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	9202      	str	r2, [sp, #8]
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	2300      	movs	r3, #0
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	2300      	movs	r3, #0
 8003484:	460a      	mov	r2, r1
 8003486:	4924      	ldr	r1, [pc, #144]	; (8003518 <vTaskStartScheduler+0xc0>)
 8003488:	4824      	ldr	r0, [pc, #144]	; (800351c <vTaskStartScheduler+0xc4>)
 800348a:	f7ff fe2d 	bl	80030e8 <xTaskCreateStatic>
 800348e:	4603      	mov	r3, r0
 8003490:	4a23      	ldr	r2, [pc, #140]	; (8003520 <vTaskStartScheduler+0xc8>)
 8003492:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003494:	4b22      	ldr	r3, [pc, #136]	; (8003520 <vTaskStartScheduler+0xc8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800349c:	2301      	movs	r3, #1
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e001      	b.n	80034a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d102      	bne.n	80034b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80034ac:	f000 fd10 	bl	8003ed0 <xTimerCreateTimerTask>
 80034b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d11b      	bne.n	80034f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	613b      	str	r3, [r7, #16]
}
 80034ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80034cc:	4b15      	ldr	r3, [pc, #84]	; (8003524 <vTaskStartScheduler+0xcc>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3354      	adds	r3, #84	; 0x54
 80034d2:	4a15      	ldr	r2, [pc, #84]	; (8003528 <vTaskStartScheduler+0xd0>)
 80034d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034d6:	4b15      	ldr	r3, [pc, #84]	; (800352c <vTaskStartScheduler+0xd4>)
 80034d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034de:	4b14      	ldr	r3, [pc, #80]	; (8003530 <vTaskStartScheduler+0xd8>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034e4:	4b13      	ldr	r3, [pc, #76]	; (8003534 <vTaskStartScheduler+0xdc>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034ea:	f001 f8c9 	bl	8004680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034ee:	e00e      	b.n	800350e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034f6:	d10a      	bne.n	800350e <vTaskStartScheduler+0xb6>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	60fb      	str	r3, [r7, #12]
}
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <vTaskStartScheduler+0xb4>
}
 800350e:	bf00      	nop
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	08005fc4 	.word	0x08005fc4
 800351c:	08003b5d 	.word	0x08003b5d
 8003520:	20000de0 	.word	0x20000de0
 8003524:	200008e8 	.word	0x200008e8
 8003528:	20000010 	.word	0x20000010
 800352c:	20000ddc 	.word	0x20000ddc
 8003530:	20000dc8 	.word	0x20000dc8
 8003534:	20000dc0 	.word	0x20000dc0

08003538 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <vTaskSuspendAll+0x18>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	4a03      	ldr	r2, [pc, #12]	; (8003550 <vTaskSuspendAll+0x18>)
 8003544:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003546:	bf00      	nop
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	20000de4 	.word	0x20000de4

08003554 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003562:	4b42      	ldr	r3, [pc, #264]	; (800366c <xTaskResumeAll+0x118>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10a      	bne.n	8003580 <xTaskResumeAll+0x2c>
	__asm volatile
 800356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	603b      	str	r3, [r7, #0]
}
 800357c:	bf00      	nop
 800357e:	e7fe      	b.n	800357e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003580:	f001 f920 	bl	80047c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003584:	4b39      	ldr	r3, [pc, #228]	; (800366c <xTaskResumeAll+0x118>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3b01      	subs	r3, #1
 800358a:	4a38      	ldr	r2, [pc, #224]	; (800366c <xTaskResumeAll+0x118>)
 800358c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800358e:	4b37      	ldr	r3, [pc, #220]	; (800366c <xTaskResumeAll+0x118>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d162      	bne.n	800365c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003596:	4b36      	ldr	r3, [pc, #216]	; (8003670 <xTaskResumeAll+0x11c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d05e      	beq.n	800365c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800359e:	e02f      	b.n	8003600 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035a0:	4b34      	ldr	r3, [pc, #208]	; (8003674 <xTaskResumeAll+0x120>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	3318      	adds	r3, #24
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff f84b 	bl	8002648 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3304      	adds	r3, #4
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff f846 	bl	8002648 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c0:	4b2d      	ldr	r3, [pc, #180]	; (8003678 <xTaskResumeAll+0x124>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d903      	bls.n	80035d0 <xTaskResumeAll+0x7c>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	4a2a      	ldr	r2, [pc, #168]	; (8003678 <xTaskResumeAll+0x124>)
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4a27      	ldr	r2, [pc, #156]	; (800367c <xTaskResumeAll+0x128>)
 80035de:	441a      	add	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f7fe ffd1 	bl	800258e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f0:	4b23      	ldr	r3, [pc, #140]	; (8003680 <xTaskResumeAll+0x12c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d302      	bcc.n	8003600 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80035fa:	4b22      	ldr	r3, [pc, #136]	; (8003684 <xTaskResumeAll+0x130>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003600:	4b1c      	ldr	r3, [pc, #112]	; (8003674 <xTaskResumeAll+0x120>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1cb      	bne.n	80035a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800360e:	f000 fb5f 	bl	8003cd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003612:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <xTaskResumeAll+0x134>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d010      	beq.n	8003640 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800361e:	f000 f847 	bl	80036b0 <xTaskIncrementTick>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003628:	4b16      	ldr	r3, [pc, #88]	; (8003684 <xTaskResumeAll+0x130>)
 800362a:	2201      	movs	r2, #1
 800362c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3b01      	subs	r3, #1
 8003632:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f1      	bne.n	800361e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800363a:	4b13      	ldr	r3, [pc, #76]	; (8003688 <xTaskResumeAll+0x134>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003640:	4b10      	ldr	r3, [pc, #64]	; (8003684 <xTaskResumeAll+0x130>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d009      	beq.n	800365c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003648:	2301      	movs	r3, #1
 800364a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800364c:	4b0f      	ldr	r3, [pc, #60]	; (800368c <xTaskResumeAll+0x138>)
 800364e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800365c:	f001 f8e2 	bl	8004824 <vPortExitCritical>

	return xAlreadyYielded;
 8003660:	68bb      	ldr	r3, [r7, #8]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000de4 	.word	0x20000de4
 8003670:	20000dbc 	.word	0x20000dbc
 8003674:	20000d7c 	.word	0x20000d7c
 8003678:	20000dc4 	.word	0x20000dc4
 800367c:	200008ec 	.word	0x200008ec
 8003680:	200008e8 	.word	0x200008e8
 8003684:	20000dd0 	.word	0x20000dd0
 8003688:	20000dcc 	.word	0x20000dcc
 800368c:	e000ed04 	.word	0xe000ed04

08003690 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003696:	4b05      	ldr	r3, [pc, #20]	; (80036ac <xTaskGetTickCount+0x1c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800369c:	687b      	ldr	r3, [r7, #4]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000dc0 	.word	0x20000dc0

080036b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ba:	4b4f      	ldr	r3, [pc, #316]	; (80037f8 <xTaskIncrementTick+0x148>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f040 808f 	bne.w	80037e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036c4:	4b4d      	ldr	r3, [pc, #308]	; (80037fc <xTaskIncrementTick+0x14c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3301      	adds	r3, #1
 80036ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036cc:	4a4b      	ldr	r2, [pc, #300]	; (80037fc <xTaskIncrementTick+0x14c>)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d120      	bne.n	800371a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80036d8:	4b49      	ldr	r3, [pc, #292]	; (8003800 <xTaskIncrementTick+0x150>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	603b      	str	r3, [r7, #0]
}
 80036f4:	bf00      	nop
 80036f6:	e7fe      	b.n	80036f6 <xTaskIncrementTick+0x46>
 80036f8:	4b41      	ldr	r3, [pc, #260]	; (8003800 <xTaskIncrementTick+0x150>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	4b41      	ldr	r3, [pc, #260]	; (8003804 <xTaskIncrementTick+0x154>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a3f      	ldr	r2, [pc, #252]	; (8003800 <xTaskIncrementTick+0x150>)
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4a3f      	ldr	r2, [pc, #252]	; (8003804 <xTaskIncrementTick+0x154>)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	4b3e      	ldr	r3, [pc, #248]	; (8003808 <xTaskIncrementTick+0x158>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	4a3d      	ldr	r2, [pc, #244]	; (8003808 <xTaskIncrementTick+0x158>)
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	f000 fadb 	bl	8003cd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800371a:	4b3c      	ldr	r3, [pc, #240]	; (800380c <xTaskIncrementTick+0x15c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	429a      	cmp	r2, r3
 8003722:	d349      	bcc.n	80037b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003724:	4b36      	ldr	r3, [pc, #216]	; (8003800 <xTaskIncrementTick+0x150>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d104      	bne.n	8003738 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800372e:	4b37      	ldr	r3, [pc, #220]	; (800380c <xTaskIncrementTick+0x15c>)
 8003730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003734:	601a      	str	r2, [r3, #0]
					break;
 8003736:	e03f      	b.n	80037b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003738:	4b31      	ldr	r3, [pc, #196]	; (8003800 <xTaskIncrementTick+0x150>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	429a      	cmp	r2, r3
 800374e:	d203      	bcs.n	8003758 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003750:	4a2e      	ldr	r2, [pc, #184]	; (800380c <xTaskIncrementTick+0x15c>)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003756:	e02f      	b.n	80037b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	3304      	adds	r3, #4
 800375c:	4618      	mov	r0, r3
 800375e:	f7fe ff73 	bl	8002648 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	2b00      	cmp	r3, #0
 8003768:	d004      	beq.n	8003774 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	3318      	adds	r3, #24
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe ff6a 	bl	8002648 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003778:	4b25      	ldr	r3, [pc, #148]	; (8003810 <xTaskIncrementTick+0x160>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d903      	bls.n	8003788 <xTaskIncrementTick+0xd8>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	4a22      	ldr	r2, [pc, #136]	; (8003810 <xTaskIncrementTick+0x160>)
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4a1f      	ldr	r2, [pc, #124]	; (8003814 <xTaskIncrementTick+0x164>)
 8003796:	441a      	add	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	3304      	adds	r3, #4
 800379c:	4619      	mov	r1, r3
 800379e:	4610      	mov	r0, r2
 80037a0:	f7fe fef5 	bl	800258e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <xTaskIncrementTick+0x168>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d3b8      	bcc.n	8003724 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80037b2:	2301      	movs	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037b6:	e7b5      	b.n	8003724 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037b8:	4b17      	ldr	r3, [pc, #92]	; (8003818 <xTaskIncrementTick+0x168>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037be:	4915      	ldr	r1, [pc, #84]	; (8003814 <xTaskIncrementTick+0x164>)
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d901      	bls.n	80037d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80037d0:	2301      	movs	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <xTaskIncrementTick+0x16c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80037dc:	2301      	movs	r3, #1
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	e004      	b.n	80037ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80037e2:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <xTaskIncrementTick+0x170>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3301      	adds	r3, #1
 80037e8:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <xTaskIncrementTick+0x170>)
 80037ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80037ec:	697b      	ldr	r3, [r7, #20]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000de4 	.word	0x20000de4
 80037fc:	20000dc0 	.word	0x20000dc0
 8003800:	20000d74 	.word	0x20000d74
 8003804:	20000d78 	.word	0x20000d78
 8003808:	20000dd4 	.word	0x20000dd4
 800380c:	20000ddc 	.word	0x20000ddc
 8003810:	20000dc4 	.word	0x20000dc4
 8003814:	200008ec 	.word	0x200008ec
 8003818:	200008e8 	.word	0x200008e8
 800381c:	20000dd0 	.word	0x20000dd0
 8003820:	20000dcc 	.word	0x20000dcc

08003824 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800382a:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <vTaskSwitchContext+0xb0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003832:	4b29      	ldr	r3, [pc, #164]	; (80038d8 <vTaskSwitchContext+0xb4>)
 8003834:	2201      	movs	r2, #1
 8003836:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003838:	e046      	b.n	80038c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800383a:	4b27      	ldr	r3, [pc, #156]	; (80038d8 <vTaskSwitchContext+0xb4>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003840:	4b26      	ldr	r3, [pc, #152]	; (80038dc <vTaskSwitchContext+0xb8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	e010      	b.n	800386a <vTaskSwitchContext+0x46>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <vTaskSwitchContext+0x40>
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	607b      	str	r3, [r7, #4]
}
 8003860:	bf00      	nop
 8003862:	e7fe      	b.n	8003862 <vTaskSwitchContext+0x3e>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3b01      	subs	r3, #1
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	491d      	ldr	r1, [pc, #116]	; (80038e0 <vTaskSwitchContext+0xbc>)
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0e4      	beq.n	8003848 <vTaskSwitchContext+0x24>
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4a15      	ldr	r2, [pc, #84]	; (80038e0 <vTaskSwitchContext+0xbc>)
 800388a:	4413      	add	r3, r2
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	3308      	adds	r3, #8
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d104      	bne.n	80038ae <vTaskSwitchContext+0x8a>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4a0b      	ldr	r2, [pc, #44]	; (80038e4 <vTaskSwitchContext+0xc0>)
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	4a08      	ldr	r2, [pc, #32]	; (80038dc <vTaskSwitchContext+0xb8>)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <vTaskSwitchContext+0xc0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3354      	adds	r3, #84	; 0x54
 80038c4:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <vTaskSwitchContext+0xc4>)
 80038c6:	6013      	str	r3, [r2, #0]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	20000de4 	.word	0x20000de4
 80038d8:	20000dd0 	.word	0x20000dd0
 80038dc:	20000dc4 	.word	0x20000dc4
 80038e0:	200008ec 	.word	0x200008ec
 80038e4:	200008e8 	.word	0x200008e8
 80038e8:	20000010 	.word	0x20000010

080038ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	60fb      	str	r3, [r7, #12]
}
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <vTaskPlaceOnEventList+0x44>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3318      	adds	r3, #24
 8003918:	4619      	mov	r1, r3
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fe fe5b 	bl	80025d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003920:	2101      	movs	r1, #1
 8003922:	6838      	ldr	r0, [r7, #0]
 8003924:	f000 fa80 	bl	8003e28 <prvAddCurrentTaskToDelayedList>
}
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	200008e8 	.word	0x200008e8

08003934 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10a      	bne.n	800395c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	617b      	str	r3, [r7, #20]
}
 8003958:	bf00      	nop
 800395a:	e7fe      	b.n	800395a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <vTaskPlaceOnEventListRestricted+0x54>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3318      	adds	r3, #24
 8003962:	4619      	mov	r1, r3
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7fe fe12 	bl	800258e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003974:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	68b8      	ldr	r0, [r7, #8]
 800397a:	f000 fa55 	bl	8003e28 <prvAddCurrentTaskToDelayedList>
	}
 800397e:	bf00      	nop
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	200008e8 	.word	0x200008e8

0800398c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	60fb      	str	r3, [r7, #12]
}
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	3318      	adds	r3, #24
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fe fe43 	bl	8002648 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039c2:	4b1e      	ldr	r3, [pc, #120]	; (8003a3c <xTaskRemoveFromEventList+0xb0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d11d      	bne.n	8003a06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	3304      	adds	r3, #4
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fe fe3a 	bl	8002648 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d8:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <xTaskRemoveFromEventList+0xb4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d903      	bls.n	80039e8 <xTaskRemoveFromEventList+0x5c>
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <xTaskRemoveFromEventList+0xb4>)
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4a13      	ldr	r2, [pc, #76]	; (8003a44 <xTaskRemoveFromEventList+0xb8>)
 80039f6:	441a      	add	r2, r3
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	3304      	adds	r3, #4
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f7fe fdc5 	bl	800258e <vListInsertEnd>
 8003a04:	e005      	b.n	8003a12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	3318      	adds	r3, #24
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	480e      	ldr	r0, [pc, #56]	; (8003a48 <xTaskRemoveFromEventList+0xbc>)
 8003a0e:	f7fe fdbe 	bl	800258e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a16:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <xTaskRemoveFromEventList+0xc0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d905      	bls.n	8003a2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a20:	2301      	movs	r3, #1
 8003a22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <xTaskRemoveFromEventList+0xc4>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	e001      	b.n	8003a30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a30:	697b      	ldr	r3, [r7, #20]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000de4 	.word	0x20000de4
 8003a40:	20000dc4 	.word	0x20000dc4
 8003a44:	200008ec 	.word	0x200008ec
 8003a48:	20000d7c 	.word	0x20000d7c
 8003a4c:	200008e8 	.word	0x200008e8
 8003a50:	20000dd0 	.word	0x20000dd0

08003a54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a5c:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <vTaskInternalSetTimeOutState+0x24>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <vTaskInternalSetTimeOutState+0x28>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	605a      	str	r2, [r3, #4]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	20000dd4 	.word	0x20000dd4
 8003a7c:	20000dc0 	.word	0x20000dc0

08003a80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	613b      	str	r3, [r7, #16]
}
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	60fb      	str	r3, [r7, #12]
}
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003ac2:	f000 fe7f 	bl	80047c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <xTaskCheckForTimeOut+0xbc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ade:	d102      	bne.n	8003ae6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
 8003ae4:	e023      	b.n	8003b2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <xTaskCheckForTimeOut+0xc0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d007      	beq.n	8003b02 <xTaskCheckForTimeOut+0x82>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d302      	bcc.n	8003b02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003afc:	2301      	movs	r3, #1
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	e015      	b.n	8003b2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d20b      	bcs.n	8003b24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	1ad2      	subs	r2, r2, r3
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff9b 	bl	8003a54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61fb      	str	r3, [r7, #28]
 8003b22:	e004      	b.n	8003b2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b2e:	f000 fe79 	bl	8004824 <vPortExitCritical>

	return xReturn;
 8003b32:	69fb      	ldr	r3, [r7, #28]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000dc0 	.word	0x20000dc0
 8003b40:	20000dd4 	.word	0x20000dd4

08003b44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b48:	4b03      	ldr	r3, [pc, #12]	; (8003b58 <vTaskMissedYield+0x14>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	20000dd0 	.word	0x20000dd0

08003b5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b64:	f000 f852 	bl	8003c0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b68:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <prvIdleTask+0x28>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d9f9      	bls.n	8003b64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <prvIdleTask+0x2c>)
 8003b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b80:	e7f0      	b.n	8003b64 <prvIdleTask+0x8>
 8003b82:	bf00      	nop
 8003b84:	200008ec 	.word	0x200008ec
 8003b88:	e000ed04 	.word	0xe000ed04

08003b8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b92:	2300      	movs	r3, #0
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	e00c      	b.n	8003bb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4a12      	ldr	r2, [pc, #72]	; (8003bec <prvInitialiseTaskLists+0x60>)
 8003ba4:	4413      	add	r3, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe fcc4 	bl	8002534 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b37      	cmp	r3, #55	; 0x37
 8003bb6:	d9ef      	bls.n	8003b98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bb8:	480d      	ldr	r0, [pc, #52]	; (8003bf0 <prvInitialiseTaskLists+0x64>)
 8003bba:	f7fe fcbb 	bl	8002534 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bbe:	480d      	ldr	r0, [pc, #52]	; (8003bf4 <prvInitialiseTaskLists+0x68>)
 8003bc0:	f7fe fcb8 	bl	8002534 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bc4:	480c      	ldr	r0, [pc, #48]	; (8003bf8 <prvInitialiseTaskLists+0x6c>)
 8003bc6:	f7fe fcb5 	bl	8002534 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bca:	480c      	ldr	r0, [pc, #48]	; (8003bfc <prvInitialiseTaskLists+0x70>)
 8003bcc:	f7fe fcb2 	bl	8002534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bd0:	480b      	ldr	r0, [pc, #44]	; (8003c00 <prvInitialiseTaskLists+0x74>)
 8003bd2:	f7fe fcaf 	bl	8002534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <prvInitialiseTaskLists+0x78>)
 8003bd8:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <prvInitialiseTaskLists+0x64>)
 8003bda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <prvInitialiseTaskLists+0x7c>)
 8003bde:	4a05      	ldr	r2, [pc, #20]	; (8003bf4 <prvInitialiseTaskLists+0x68>)
 8003be0:	601a      	str	r2, [r3, #0]
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	200008ec 	.word	0x200008ec
 8003bf0:	20000d4c 	.word	0x20000d4c
 8003bf4:	20000d60 	.word	0x20000d60
 8003bf8:	20000d7c 	.word	0x20000d7c
 8003bfc:	20000d90 	.word	0x20000d90
 8003c00:	20000da8 	.word	0x20000da8
 8003c04:	20000d74 	.word	0x20000d74
 8003c08:	20000d78 	.word	0x20000d78

08003c0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c12:	e019      	b.n	8003c48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c14:	f000 fdd6 	bl	80047c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c18:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <prvCheckTasksWaitingTermination+0x50>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fe fd0f 	bl	8002648 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <prvCheckTasksWaitingTermination+0x54>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	4a0b      	ldr	r2, [pc, #44]	; (8003c60 <prvCheckTasksWaitingTermination+0x54>)
 8003c32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <prvCheckTasksWaitingTermination+0x58>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <prvCheckTasksWaitingTermination+0x58>)
 8003c3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c3e:	f000 fdf1 	bl	8004824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f810 	bl	8003c68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <prvCheckTasksWaitingTermination+0x58>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e1      	bne.n	8003c14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000d90 	.word	0x20000d90
 8003c60:	20000dbc 	.word	0x20000dbc
 8003c64:	20000da4 	.word	0x20000da4

08003c68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3354      	adds	r3, #84	; 0x54
 8003c74:	4618      	mov	r0, r3
 8003c76:	f001 fb1b 	bl	80052b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d108      	bne.n	8003c96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 ff89 	bl	8004ba0 <vPortFree>
				vPortFree( pxTCB );
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 ff86 	bl	8004ba0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c94:	e018      	b.n	8003cc8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d103      	bne.n	8003ca8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 ff7d 	bl	8004ba0 <vPortFree>
	}
 8003ca6:	e00f      	b.n	8003cc8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d00a      	beq.n	8003cc8 <prvDeleteTCB+0x60>
	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	60fb      	str	r3, [r7, #12]
}
 8003cc4:	bf00      	nop
 8003cc6:	e7fe      	b.n	8003cc6 <prvDeleteTCB+0x5e>
	}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <prvResetNextTaskUnblockTime+0x38>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d104      	bne.n	8003cea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <prvResetNextTaskUnblockTime+0x3c>)
 8003ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ce6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ce8:	e008      	b.n	8003cfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cea:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <prvResetNextTaskUnblockTime+0x38>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <prvResetNextTaskUnblockTime+0x3c>)
 8003cfa:	6013      	str	r3, [r2, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	20000d74 	.word	0x20000d74
 8003d0c:	20000ddc 	.word	0x20000ddc

08003d10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <xTaskGetSchedulerState+0x34>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d102      	bne.n	8003d24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	e008      	b.n	8003d36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d24:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <xTaskGetSchedulerState+0x38>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	e001      	b.n	8003d36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d32:	2300      	movs	r3, #0
 8003d34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d36:	687b      	ldr	r3, [r7, #4]
	}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	20000dc8 	.word	0x20000dc8
 8003d48:	20000de4 	.word	0x20000de4

08003d4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d056      	beq.n	8003e10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d62:	4b2e      	ldr	r3, [pc, #184]	; (8003e1c <xTaskPriorityDisinherit+0xd0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d00a      	beq.n	8003d82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	60fb      	str	r3, [r7, #12]
}
 8003d7e:	bf00      	nop
 8003d80:	e7fe      	b.n	8003d80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10a      	bne.n	8003da0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	60bb      	str	r3, [r7, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	e7fe      	b.n	8003d9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da4:	1e5a      	subs	r2, r3, #1
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d02c      	beq.n	8003e10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d128      	bne.n	8003e10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe fc40 	bl	8002648 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de0:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <xTaskPriorityDisinherit+0xd4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d903      	bls.n	8003df0 <xTaskPriorityDisinherit+0xa4>
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	4a0c      	ldr	r2, [pc, #48]	; (8003e20 <xTaskPriorityDisinherit+0xd4>)
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <xTaskPriorityDisinherit+0xd8>)
 8003dfe:	441a      	add	r2, r3
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	3304      	adds	r3, #4
 8003e04:	4619      	mov	r1, r3
 8003e06:	4610      	mov	r0, r2
 8003e08:	f7fe fbc1 	bl	800258e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e10:	697b      	ldr	r3, [r7, #20]
	}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200008e8 	.word	0x200008e8
 8003e20:	20000dc4 	.word	0x20000dc4
 8003e24:	200008ec 	.word	0x200008ec

08003e28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e32:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e38:	4b20      	ldr	r3, [pc, #128]	; (8003ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fc02 	bl	8002648 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e4a:	d10a      	bne.n	8003e62 <prvAddCurrentTaskToDelayedList+0x3a>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d007      	beq.n	8003e62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e52:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3304      	adds	r3, #4
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4819      	ldr	r0, [pc, #100]	; (8003ec0 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e5c:	f7fe fb97 	bl	800258e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e60:	e026      	b.n	8003eb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4413      	add	r3, r2
 8003e68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e6a:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d209      	bcs.n	8003e8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e7a:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4619      	mov	r1, r3
 8003e86:	4610      	mov	r0, r2
 8003e88:	f7fe fba5 	bl	80025d6 <vListInsert>
}
 8003e8c:	e010      	b.n	8003eb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ec8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3304      	adds	r3, #4
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f7fe fb9b 	bl	80025d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ea0:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d202      	bcs.n	8003eb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003eaa:	4a08      	ldr	r2, [pc, #32]	; (8003ecc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	6013      	str	r3, [r2, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20000dc0 	.word	0x20000dc0
 8003ebc:	200008e8 	.word	0x200008e8
 8003ec0:	20000da8 	.word	0x20000da8
 8003ec4:	20000d78 	.word	0x20000d78
 8003ec8:	20000d74 	.word	0x20000d74
 8003ecc:	20000ddc 	.word	0x20000ddc

08003ed0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	; 0x28
 8003ed4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003eda:	f000 fb07 	bl	80044ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ede:	4b1c      	ldr	r3, [pc, #112]	; (8003f50 <xTimerCreateTimerTask+0x80>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d021      	beq.n	8003f2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003eee:	1d3a      	adds	r2, r7, #4
 8003ef0:	f107 0108 	add.w	r1, r7, #8
 8003ef4:	f107 030c 	add.w	r3, r7, #12
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe fb01 	bl	8002500 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	9202      	str	r2, [sp, #8]
 8003f06:	9301      	str	r3, [sp, #4]
 8003f08:	2302      	movs	r3, #2
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	460a      	mov	r2, r1
 8003f10:	4910      	ldr	r1, [pc, #64]	; (8003f54 <xTimerCreateTimerTask+0x84>)
 8003f12:	4811      	ldr	r0, [pc, #68]	; (8003f58 <xTimerCreateTimerTask+0x88>)
 8003f14:	f7ff f8e8 	bl	80030e8 <xTaskCreateStatic>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <xTimerCreateTimerTask+0x8c>)
 8003f1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <xTimerCreateTimerTask+0x8c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f26:	2301      	movs	r3, #1
 8003f28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	613b      	str	r3, [r7, #16]
}
 8003f42:	bf00      	nop
 8003f44:	e7fe      	b.n	8003f44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f46:	697b      	ldr	r3, [r7, #20]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20000e18 	.word	0x20000e18
 8003f54:	08005fcc 	.word	0x08005fcc
 8003f58:	08004095 	.word	0x08004095
 8003f5c:	20000e1c 	.word	0x20000e1c

08003f60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	; 0x28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	623b      	str	r3, [r7, #32]
}
 8003f8a:	bf00      	nop
 8003f8c:	e7fe      	b.n	8003f8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <xTimerGenericCommand+0x98>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d02a      	beq.n	8003fec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b05      	cmp	r3, #5
 8003fa6:	dc18      	bgt.n	8003fda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003fa8:	f7ff feb2 	bl	8003d10 <xTaskGetSchedulerState>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d109      	bne.n	8003fc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003fb2:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <xTimerGenericCommand+0x98>)
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	f107 0110 	add.w	r1, r7, #16
 8003fba:	2300      	movs	r3, #0
 8003fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fbe:	f7fe fcab 	bl	8002918 <xQueueGenericSend>
 8003fc2:	6278      	str	r0, [r7, #36]	; 0x24
 8003fc4:	e012      	b.n	8003fec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fc6:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <xTimerGenericCommand+0x98>)
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	f107 0110 	add.w	r1, r7, #16
 8003fce:	2300      	movs	r3, #0
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f7fe fca1 	bl	8002918 <xQueueGenericSend>
 8003fd6:	6278      	str	r0, [r7, #36]	; 0x24
 8003fd8:	e008      	b.n	8003fec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fda:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <xTimerGenericCommand+0x98>)
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	f107 0110 	add.w	r1, r7, #16
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	f7fe fd95 	bl	8002b14 <xQueueGenericSendFromISR>
 8003fea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3728      	adds	r7, #40	; 0x28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000e18 	.word	0x20000e18

08003ffc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af02      	add	r7, sp, #8
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <prvProcessExpiredTimer+0x94>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	3304      	adds	r3, #4
 8004014:	4618      	mov	r0, r3
 8004016:	f7fe fb17 	bl	8002648 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d022      	beq.n	800406e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	699a      	ldr	r2, [r3, #24]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	18d1      	adds	r1, r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	6978      	ldr	r0, [r7, #20]
 8004036:	f000 f8d1 	bl	80041dc <prvInsertTimerInActiveList>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01f      	beq.n	8004080 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004040:	2300      	movs	r3, #0
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	2100      	movs	r1, #0
 800404a:	6978      	ldr	r0, [r7, #20]
 800404c:	f7ff ff88 	bl	8003f60 <xTimerGenericCommand>
 8004050:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d113      	bne.n	8004080 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	60fb      	str	r3, [r7, #12]
}
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	b2da      	uxtb	r2, r3
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	6978      	ldr	r0, [r7, #20]
 8004086:	4798      	blx	r3
}
 8004088:	bf00      	nop
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20000e10 	.word	0x20000e10

08004094 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800409c:	f107 0308 	add.w	r3, r7, #8
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 f857 	bl	8004154 <prvGetNextExpireTime>
 80040a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4619      	mov	r1, r3
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f803 	bl	80040b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80040b2:	f000 f8d5 	bl	8004260 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040b6:	e7f1      	b.n	800409c <prvTimerTask+0x8>

080040b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040c2:	f7ff fa39 	bl	8003538 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040c6:	f107 0308 	add.w	r3, r7, #8
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f866 	bl	800419c <prvSampleTimeNow>
 80040d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d130      	bne.n	800413a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <prvProcessTimerOrBlockTask+0x3c>
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d806      	bhi.n	80040f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80040e6:	f7ff fa35 	bl	8003554 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040ea:	68f9      	ldr	r1, [r7, #12]
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff ff85 	bl	8003ffc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80040f2:	e024      	b.n	800413e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040fa:	4b13      	ldr	r3, [pc, #76]	; (8004148 <prvProcessTimerOrBlockTask+0x90>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <prvProcessTimerOrBlockTask+0x50>
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <prvProcessTimerOrBlockTask+0x52>
 8004108:	2300      	movs	r3, #0
 800410a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800410c:	4b0f      	ldr	r3, [pc, #60]	; (800414c <prvProcessTimerOrBlockTask+0x94>)
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	4619      	mov	r1, r3
 800411a:	f7fe ffb1 	bl	8003080 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800411e:	f7ff fa19 	bl	8003554 <xTaskResumeAll>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10a      	bne.n	800413e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004128:	4b09      	ldr	r3, [pc, #36]	; (8004150 <prvProcessTimerOrBlockTask+0x98>)
 800412a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	f3bf 8f6f 	isb	sy
}
 8004138:	e001      	b.n	800413e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800413a:	f7ff fa0b 	bl	8003554 <xTaskResumeAll>
}
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000e14 	.word	0x20000e14
 800414c:	20000e18 	.word	0x20000e18
 8004150:	e000ed04 	.word	0xe000ed04

08004154 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800415c:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <prvGetNextExpireTime+0x44>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <prvGetNextExpireTime+0x16>
 8004166:	2201      	movs	r2, #1
 8004168:	e000      	b.n	800416c <prvGetNextExpireTime+0x18>
 800416a:	2200      	movs	r2, #0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d105      	bne.n	8004184 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004178:	4b07      	ldr	r3, [pc, #28]	; (8004198 <prvGetNextExpireTime+0x44>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	e001      	b.n	8004188 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004188:	68fb      	ldr	r3, [r7, #12]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000e10 	.word	0x20000e10

0800419c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80041a4:	f7ff fa74 	bl	8003690 <xTaskGetTickCount>
 80041a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80041aa:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <prvSampleTimeNow+0x3c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d205      	bcs.n	80041c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80041b4:	f000 f936 	bl	8004424 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e002      	b.n	80041c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80041c6:	4a04      	ldr	r2, [pc, #16]	; (80041d8 <prvSampleTimeNow+0x3c>)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80041cc:	68fb      	ldr	r3, [r7, #12]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000e20 	.word	0x20000e20

080041dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d812      	bhi.n	8004228 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	1ad2      	subs	r2, r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	429a      	cmp	r2, r3
 800420e:	d302      	bcc.n	8004216 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004210:	2301      	movs	r3, #1
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	e01b      	b.n	800424e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004216:	4b10      	ldr	r3, [pc, #64]	; (8004258 <prvInsertTimerInActiveList+0x7c>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3304      	adds	r3, #4
 800421e:	4619      	mov	r1, r3
 8004220:	4610      	mov	r0, r2
 8004222:	f7fe f9d8 	bl	80025d6 <vListInsert>
 8004226:	e012      	b.n	800424e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d206      	bcs.n	800423e <prvInsertTimerInActiveList+0x62>
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d302      	bcc.n	800423e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004238:	2301      	movs	r3, #1
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	e007      	b.n	800424e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800423e:	4b07      	ldr	r3, [pc, #28]	; (800425c <prvInsertTimerInActiveList+0x80>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3304      	adds	r3, #4
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f7fe f9c4 	bl	80025d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800424e:	697b      	ldr	r3, [r7, #20]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20000e14 	.word	0x20000e14
 800425c:	20000e10 	.word	0x20000e10

08004260 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08e      	sub	sp, #56	; 0x38
 8004264:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004266:	e0ca      	b.n	80043fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	da18      	bge.n	80042a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	3304      	adds	r3, #4
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	61fb      	str	r3, [r7, #28]
}
 800428c:	bf00      	nop
 800428e:	e7fe      	b.n	800428e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004296:	6850      	ldr	r0, [r2, #4]
 8004298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800429a:	6892      	ldr	r2, [r2, #8]
 800429c:	4611      	mov	r1, r2
 800429e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f2c0 80aa 	blt.w	80043fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d004      	beq.n	80042be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	3304      	adds	r3, #4
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe f9c5 	bl	8002648 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042be:	463b      	mov	r3, r7
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff6b 	bl	800419c <prvSampleTimeNow>
 80042c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b09      	cmp	r3, #9
 80042cc:	f200 8097 	bhi.w	80043fe <prvProcessReceivedCommands+0x19e>
 80042d0:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <prvProcessReceivedCommands+0x78>)
 80042d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d6:	bf00      	nop
 80042d8:	08004301 	.word	0x08004301
 80042dc:	08004301 	.word	0x08004301
 80042e0:	08004301 	.word	0x08004301
 80042e4:	08004375 	.word	0x08004375
 80042e8:	08004389 	.word	0x08004389
 80042ec:	080043d3 	.word	0x080043d3
 80042f0:	08004301 	.word	0x08004301
 80042f4:	08004301 	.word	0x08004301
 80042f8:	08004375 	.word	0x08004375
 80042fc:	08004389 	.word	0x08004389
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004306:	f043 0301 	orr.w	r3, r3, #1
 800430a:	b2da      	uxtb	r2, r3
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	18d1      	adds	r1, r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004320:	f7ff ff5c 	bl	80041dc <prvInsertTimerInActiveList>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d069      	beq.n	80043fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004330:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d05e      	beq.n	80043fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	441a      	add	r2, r3
 8004348:	2300      	movs	r3, #0
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	2300      	movs	r3, #0
 800434e:	2100      	movs	r1, #0
 8004350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004352:	f7ff fe05 	bl	8003f60 <xTimerGenericCommand>
 8004356:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d14f      	bne.n	80043fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	61bb      	str	r3, [r7, #24]
}
 8004370:	bf00      	nop
 8004372:	e7fe      	b.n	8004372 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004376:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800437a:	f023 0301 	bic.w	r3, r3, #1
 800437e:	b2da      	uxtb	r2, r3
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004386:	e03a      	b.n	80043fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	b2da      	uxtb	r2, r3
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	617b      	str	r3, [r7, #20]
}
 80043ba:	bf00      	nop
 80043bc:	e7fe      	b.n	80043bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	18d1      	adds	r1, r2, r3
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043cc:	f7ff ff06 	bl	80041dc <prvInsertTimerInActiveList>
					break;
 80043d0:	e015      	b.n	80043fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d103      	bne.n	80043e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80043e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043e2:	f000 fbdd 	bl	8004ba0 <vPortFree>
 80043e6:	e00a      	b.n	80043fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ee:	f023 0301 	bic.w	r3, r3, #1
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80043fa:	e000      	b.n	80043fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80043fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043fe:	4b08      	ldr	r3, [pc, #32]	; (8004420 <prvProcessReceivedCommands+0x1c0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	1d39      	adds	r1, r7, #4
 8004404:	2200      	movs	r2, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fc20 	bl	8002c4c <xQueueReceive>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	f47f af2a 	bne.w	8004268 <prvProcessReceivedCommands+0x8>
	}
}
 8004414:	bf00      	nop
 8004416:	bf00      	nop
 8004418:	3730      	adds	r7, #48	; 0x30
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20000e18 	.word	0x20000e18

08004424 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800442a:	e048      	b.n	80044be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800442c:	4b2d      	ldr	r3, [pc, #180]	; (80044e4 <prvSwitchTimerLists+0xc0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004436:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <prvSwitchTimerLists+0xc0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3304      	adds	r3, #4
 8004444:	4618      	mov	r0, r3
 8004446:	f7fe f8ff 	bl	8002648 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d02e      	beq.n	80044be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4413      	add	r3, r2
 8004468:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	429a      	cmp	r2, r3
 8004470:	d90e      	bls.n	8004490 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800447e:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <prvSwitchTimerLists+0xc0>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3304      	adds	r3, #4
 8004486:	4619      	mov	r1, r3
 8004488:	4610      	mov	r0, r2
 800448a:	f7fe f8a4 	bl	80025d6 <vListInsert>
 800448e:	e016      	b.n	80044be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004490:	2300      	movs	r3, #0
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	2300      	movs	r3, #0
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	2100      	movs	r1, #0
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff fd60 	bl	8003f60 <xTimerGenericCommand>
 80044a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10a      	bne.n	80044be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80044a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	603b      	str	r3, [r7, #0]
}
 80044ba:	bf00      	nop
 80044bc:	e7fe      	b.n	80044bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044be:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <prvSwitchTimerLists+0xc0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1b1      	bne.n	800442c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044c8:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <prvSwitchTimerLists+0xc0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <prvSwitchTimerLists+0xc4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <prvSwitchTimerLists+0xc0>)
 80044d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80044d6:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <prvSwitchTimerLists+0xc4>)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	6013      	str	r3, [r2, #0]
}
 80044dc:	bf00      	nop
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20000e10 	.word	0x20000e10
 80044e8:	20000e14 	.word	0x20000e14

080044ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80044f2:	f000 f967 	bl	80047c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80044f6:	4b15      	ldr	r3, [pc, #84]	; (800454c <prvCheckForValidListAndQueue+0x60>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d120      	bne.n	8004540 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80044fe:	4814      	ldr	r0, [pc, #80]	; (8004550 <prvCheckForValidListAndQueue+0x64>)
 8004500:	f7fe f818 	bl	8002534 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004504:	4813      	ldr	r0, [pc, #76]	; (8004554 <prvCheckForValidListAndQueue+0x68>)
 8004506:	f7fe f815 	bl	8002534 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800450a:	4b13      	ldr	r3, [pc, #76]	; (8004558 <prvCheckForValidListAndQueue+0x6c>)
 800450c:	4a10      	ldr	r2, [pc, #64]	; (8004550 <prvCheckForValidListAndQueue+0x64>)
 800450e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004510:	4b12      	ldr	r3, [pc, #72]	; (800455c <prvCheckForValidListAndQueue+0x70>)
 8004512:	4a10      	ldr	r2, [pc, #64]	; (8004554 <prvCheckForValidListAndQueue+0x68>)
 8004514:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004516:	2300      	movs	r3, #0
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	4b11      	ldr	r3, [pc, #68]	; (8004560 <prvCheckForValidListAndQueue+0x74>)
 800451c:	4a11      	ldr	r2, [pc, #68]	; (8004564 <prvCheckForValidListAndQueue+0x78>)
 800451e:	2110      	movs	r1, #16
 8004520:	200a      	movs	r0, #10
 8004522:	f7fe f923 	bl	800276c <xQueueGenericCreateStatic>
 8004526:	4603      	mov	r3, r0
 8004528:	4a08      	ldr	r2, [pc, #32]	; (800454c <prvCheckForValidListAndQueue+0x60>)
 800452a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800452c:	4b07      	ldr	r3, [pc, #28]	; (800454c <prvCheckForValidListAndQueue+0x60>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <prvCheckForValidListAndQueue+0x60>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	490b      	ldr	r1, [pc, #44]	; (8004568 <prvCheckForValidListAndQueue+0x7c>)
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe fd76 	bl	800302c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004540:	f000 f970 	bl	8004824 <vPortExitCritical>
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000e18 	.word	0x20000e18
 8004550:	20000de8 	.word	0x20000de8
 8004554:	20000dfc 	.word	0x20000dfc
 8004558:	20000e10 	.word	0x20000e10
 800455c:	20000e14 	.word	0x20000e14
 8004560:	20000ec4 	.word	0x20000ec4
 8004564:	20000e24 	.word	0x20000e24
 8004568:	08005fd4 	.word	0x08005fd4

0800456c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3b04      	subs	r3, #4
 800457c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3b04      	subs	r3, #4
 800458a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f023 0201 	bic.w	r2, r3, #1
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3b04      	subs	r3, #4
 800459a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800459c:	4a0c      	ldr	r2, [pc, #48]	; (80045d0 <pxPortInitialiseStack+0x64>)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3b14      	subs	r3, #20
 80045a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3b04      	subs	r3, #4
 80045b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f06f 0202 	mvn.w	r2, #2
 80045ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3b20      	subs	r3, #32
 80045c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045c2:	68fb      	ldr	r3, [r7, #12]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	080045d5 	.word	0x080045d5

080045d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <prvTaskExitError+0x54>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e6:	d00a      	beq.n	80045fe <prvTaskExitError+0x2a>
	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	60fb      	str	r3, [r7, #12]
}
 80045fa:	bf00      	nop
 80045fc:	e7fe      	b.n	80045fc <prvTaskExitError+0x28>
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	60bb      	str	r3, [r7, #8]
}
 8004610:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004612:	bf00      	nop
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0fc      	beq.n	8004614 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800461a:	bf00      	nop
 800461c:	bf00      	nop
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	2000000c 	.word	0x2000000c
 800462c:	00000000 	.word	0x00000000

08004630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004630:	4b07      	ldr	r3, [pc, #28]	; (8004650 <pxCurrentTCBConst2>)
 8004632:	6819      	ldr	r1, [r3, #0]
 8004634:	6808      	ldr	r0, [r1, #0]
 8004636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463a:	f380 8809 	msr	PSP, r0
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f04f 0000 	mov.w	r0, #0
 8004646:	f380 8811 	msr	BASEPRI, r0
 800464a:	4770      	bx	lr
 800464c:	f3af 8000 	nop.w

08004650 <pxCurrentTCBConst2>:
 8004650:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop

08004658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004658:	4808      	ldr	r0, [pc, #32]	; (800467c <prvPortStartFirstTask+0x24>)
 800465a:	6800      	ldr	r0, [r0, #0]
 800465c:	6800      	ldr	r0, [r0, #0]
 800465e:	f380 8808 	msr	MSP, r0
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f380 8814 	msr	CONTROL, r0
 800466a:	b662      	cpsie	i
 800466c:	b661      	cpsie	f
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	df00      	svc	0
 8004678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800467a:	bf00      	nop
 800467c:	e000ed08 	.word	0xe000ed08

08004680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004686:	4b46      	ldr	r3, [pc, #280]	; (80047a0 <xPortStartScheduler+0x120>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a46      	ldr	r2, [pc, #280]	; (80047a4 <xPortStartScheduler+0x124>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d10a      	bne.n	80046a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	613b      	str	r3, [r7, #16]
}
 80046a2:	bf00      	nop
 80046a4:	e7fe      	b.n	80046a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046a6:	4b3e      	ldr	r3, [pc, #248]	; (80047a0 <xPortStartScheduler+0x120>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a3f      	ldr	r2, [pc, #252]	; (80047a8 <xPortStartScheduler+0x128>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d10a      	bne.n	80046c6 <xPortStartScheduler+0x46>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	60fb      	str	r3, [r7, #12]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046c6:	4b39      	ldr	r3, [pc, #228]	; (80047ac <xPortStartScheduler+0x12c>)
 80046c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	22ff      	movs	r2, #255	; 0xff
 80046d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <xPortStartScheduler+0x130>)
 80046ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046ee:	4b31      	ldr	r3, [pc, #196]	; (80047b4 <xPortStartScheduler+0x134>)
 80046f0:	2207      	movs	r2, #7
 80046f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046f4:	e009      	b.n	800470a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80046f6:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <xPortStartScheduler+0x134>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	4a2d      	ldr	r2, [pc, #180]	; (80047b4 <xPortStartScheduler+0x134>)
 80046fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	b2db      	uxtb	r3, r3
 8004708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800470a:	78fb      	ldrb	r3, [r7, #3]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b80      	cmp	r3, #128	; 0x80
 8004714:	d0ef      	beq.n	80046f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004716:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <xPortStartScheduler+0x134>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1c3 0307 	rsb	r3, r3, #7
 800471e:	2b04      	cmp	r3, #4
 8004720:	d00a      	beq.n	8004738 <xPortStartScheduler+0xb8>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	60bb      	str	r3, [r7, #8]
}
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004738:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <xPortStartScheduler+0x134>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <xPortStartScheduler+0x134>)
 8004740:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004742:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <xPortStartScheduler+0x134>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800474a:	4a1a      	ldr	r2, [pc, #104]	; (80047b4 <xPortStartScheduler+0x134>)
 800474c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	b2da      	uxtb	r2, r3
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004756:	4b18      	ldr	r3, [pc, #96]	; (80047b8 <xPortStartScheduler+0x138>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a17      	ldr	r2, [pc, #92]	; (80047b8 <xPortStartScheduler+0x138>)
 800475c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004760:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004762:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <xPortStartScheduler+0x138>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <xPortStartScheduler+0x138>)
 8004768:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800476c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800476e:	f000 f8dd 	bl	800492c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004772:	4b12      	ldr	r3, [pc, #72]	; (80047bc <xPortStartScheduler+0x13c>)
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004778:	f000 f8fc 	bl	8004974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800477c:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <xPortStartScheduler+0x140>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a0f      	ldr	r2, [pc, #60]	; (80047c0 <xPortStartScheduler+0x140>)
 8004782:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004786:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004788:	f7ff ff66 	bl	8004658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800478c:	f7ff f84a 	bl	8003824 <vTaskSwitchContext>
	prvTaskExitError();
 8004790:	f7ff ff20 	bl	80045d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	e000ed00 	.word	0xe000ed00
 80047a4:	410fc271 	.word	0x410fc271
 80047a8:	410fc270 	.word	0x410fc270
 80047ac:	e000e400 	.word	0xe000e400
 80047b0:	20000f14 	.word	0x20000f14
 80047b4:	20000f18 	.word	0x20000f18
 80047b8:	e000ed20 	.word	0xe000ed20
 80047bc:	2000000c 	.word	0x2000000c
 80047c0:	e000ef34 	.word	0xe000ef34

080047c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	607b      	str	r3, [r7, #4]
}
 80047dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047de:	4b0f      	ldr	r3, [pc, #60]	; (800481c <vPortEnterCritical+0x58>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3301      	adds	r3, #1
 80047e4:	4a0d      	ldr	r2, [pc, #52]	; (800481c <vPortEnterCritical+0x58>)
 80047e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <vPortEnterCritical+0x58>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d10f      	bne.n	8004810 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047f0:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <vPortEnterCritical+0x5c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <vPortEnterCritical+0x4c>
	__asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	603b      	str	r3, [r7, #0]
}
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <vPortEnterCritical+0x4a>
	}
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	2000000c 	.word	0x2000000c
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <vPortExitCritical+0x50>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <vPortExitCritical+0x24>
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	607b      	str	r3, [r7, #4]
}
 8004844:	bf00      	nop
 8004846:	e7fe      	b.n	8004846 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <vPortExitCritical+0x50>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3b01      	subs	r3, #1
 800484e:	4a09      	ldr	r2, [pc, #36]	; (8004874 <vPortExitCritical+0x50>)
 8004850:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004852:	4b08      	ldr	r3, [pc, #32]	; (8004874 <vPortExitCritical+0x50>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d105      	bne.n	8004866 <vPortExitCritical+0x42>
 800485a:	2300      	movs	r3, #0
 800485c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	f383 8811 	msr	BASEPRI, r3
}
 8004864:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	2000000c 	.word	0x2000000c
	...

08004880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004880:	f3ef 8009 	mrs	r0, PSP
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <pxCurrentTCBConst>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	f01e 0f10 	tst.w	lr, #16
 8004890:	bf08      	it	eq
 8004892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489a:	6010      	str	r0, [r2, #0]
 800489c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048a4:	f380 8811 	msr	BASEPRI, r0
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f7fe ffb8 	bl	8003824 <vTaskSwitchContext>
 80048b4:	f04f 0000 	mov.w	r0, #0
 80048b8:	f380 8811 	msr	BASEPRI, r0
 80048bc:	bc09      	pop	{r0, r3}
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	6808      	ldr	r0, [r1, #0]
 80048c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c6:	f01e 0f10 	tst.w	lr, #16
 80048ca:	bf08      	it	eq
 80048cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048d0:	f380 8809 	msr	PSP, r0
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	f3af 8000 	nop.w

080048e0 <pxCurrentTCBConst>:
 80048e0:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop

080048e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	607b      	str	r3, [r7, #4]
}
 8004900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004902:	f7fe fed5 	bl	80036b0 <xTaskIncrementTick>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <xPortSysTickHandler+0x40>)
 800490e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	2300      	movs	r3, #0
 8004916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	f383 8811 	msr	BASEPRI, r3
}
 800491e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <vPortSetupTimerInterrupt+0x34>)
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004936:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <vPortSetupTimerInterrupt+0x38>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <vPortSetupTimerInterrupt+0x3c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a0a      	ldr	r2, [pc, #40]	; (800496c <vPortSetupTimerInterrupt+0x40>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	4a09      	ldr	r2, [pc, #36]	; (8004970 <vPortSetupTimerInterrupt+0x44>)
 800494a:	3b01      	subs	r3, #1
 800494c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800494e:	4b04      	ldr	r3, [pc, #16]	; (8004960 <vPortSetupTimerInterrupt+0x34>)
 8004950:	2207      	movs	r2, #7
 8004952:	601a      	str	r2, [r3, #0]
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	e000e010 	.word	0xe000e010
 8004964:	e000e018 	.word	0xe000e018
 8004968:	20000000 	.word	0x20000000
 800496c:	10624dd3 	.word	0x10624dd3
 8004970:	e000e014 	.word	0xe000e014

08004974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004984 <vPortEnableVFP+0x10>
 8004978:	6801      	ldr	r1, [r0, #0]
 800497a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800497e:	6001      	str	r1, [r0, #0]
 8004980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004982:	bf00      	nop
 8004984:	e000ed88 	.word	0xe000ed88

08004988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800498e:	f3ef 8305 	mrs	r3, IPSR
 8004992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b0f      	cmp	r3, #15
 8004998:	d914      	bls.n	80049c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800499a:	4a17      	ldr	r2, [pc, #92]	; (80049f8 <vPortValidateInterruptPriority+0x70>)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049a4:	4b15      	ldr	r3, [pc, #84]	; (80049fc <vPortValidateInterruptPriority+0x74>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	7afa      	ldrb	r2, [r7, #11]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d20a      	bcs.n	80049c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	607b      	str	r3, [r7, #4]
}
 80049c0:	bf00      	nop
 80049c2:	e7fe      	b.n	80049c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <vPortValidateInterruptPriority+0x78>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049cc:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <vPortValidateInterruptPriority+0x7c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d90a      	bls.n	80049ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	603b      	str	r3, [r7, #0]
}
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <vPortValidateInterruptPriority+0x60>
	}
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	e000e3f0 	.word	0xe000e3f0
 80049fc:	20000f14 	.word	0x20000f14
 8004a00:	e000ed0c 	.word	0xe000ed0c
 8004a04:	20000f18 	.word	0x20000f18

08004a08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	; 0x28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a14:	f7fe fd90 	bl	8003538 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a18:	4b5b      	ldr	r3, [pc, #364]	; (8004b88 <pvPortMalloc+0x180>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a20:	f000 f920 	bl	8004c64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a24:	4b59      	ldr	r3, [pc, #356]	; (8004b8c <pvPortMalloc+0x184>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f040 8093 	bne.w	8004b58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01d      	beq.n	8004a74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a38:	2208      	movs	r2, #8
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d014      	beq.n	8004a74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f023 0307 	bic.w	r3, r3, #7
 8004a50:	3308      	adds	r3, #8
 8004a52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <pvPortMalloc+0x6c>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	617b      	str	r3, [r7, #20]
}
 8004a70:	bf00      	nop
 8004a72:	e7fe      	b.n	8004a72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d06e      	beq.n	8004b58 <pvPortMalloc+0x150>
 8004a7a:	4b45      	ldr	r3, [pc, #276]	; (8004b90 <pvPortMalloc+0x188>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d869      	bhi.n	8004b58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a84:	4b43      	ldr	r3, [pc, #268]	; (8004b94 <pvPortMalloc+0x18c>)
 8004a86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a88:	4b42      	ldr	r3, [pc, #264]	; (8004b94 <pvPortMalloc+0x18c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a8e:	e004      	b.n	8004a9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d903      	bls.n	8004aac <pvPortMalloc+0xa4>
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f1      	bne.n	8004a90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004aac:	4b36      	ldr	r3, [pc, #216]	; (8004b88 <pvPortMalloc+0x180>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d050      	beq.n	8004b58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2208      	movs	r2, #8
 8004abc:	4413      	add	r3, r2
 8004abe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	1ad2      	subs	r2, r2, r3
 8004ad0:	2308      	movs	r3, #8
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d91f      	bls.n	8004b18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4413      	add	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <pvPortMalloc+0xf8>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	613b      	str	r3, [r7, #16]
}
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	1ad2      	subs	r2, r2, r3
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b12:	69b8      	ldr	r0, [r7, #24]
 8004b14:	f000 f908 	bl	8004d28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b18:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <pvPortMalloc+0x188>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	4a1b      	ldr	r2, [pc, #108]	; (8004b90 <pvPortMalloc+0x188>)
 8004b24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b26:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <pvPortMalloc+0x188>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4b1b      	ldr	r3, [pc, #108]	; (8004b98 <pvPortMalloc+0x190>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d203      	bcs.n	8004b3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b32:	4b17      	ldr	r3, [pc, #92]	; (8004b90 <pvPortMalloc+0x188>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <pvPortMalloc+0x190>)
 8004b38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <pvPortMalloc+0x184>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b4e:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <pvPortMalloc+0x194>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3301      	adds	r3, #1
 8004b54:	4a11      	ldr	r2, [pc, #68]	; (8004b9c <pvPortMalloc+0x194>)
 8004b56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b58:	f7fe fcfc 	bl	8003554 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <pvPortMalloc+0x174>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	60fb      	str	r3, [r7, #12]
}
 8004b78:	bf00      	nop
 8004b7a:	e7fe      	b.n	8004b7a <pvPortMalloc+0x172>
	return pvReturn;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3728      	adds	r7, #40	; 0x28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20004b24 	.word	0x20004b24
 8004b8c:	20004b38 	.word	0x20004b38
 8004b90:	20004b28 	.word	0x20004b28
 8004b94:	20004b1c 	.word	0x20004b1c
 8004b98:	20004b2c 	.word	0x20004b2c
 8004b9c:	20004b30 	.word	0x20004b30

08004ba0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d04d      	beq.n	8004c4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	425b      	negs	r3, r3
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4413      	add	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	4b24      	ldr	r3, [pc, #144]	; (8004c58 <vPortFree+0xb8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <vPortFree+0x44>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	60fb      	str	r3, [r7, #12]
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <vPortFree+0x62>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	60bb      	str	r3, [r7, #8]
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <vPortFree+0xb8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01e      	beq.n	8004c4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d11a      	bne.n	8004c4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <vPortFree+0xb8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	43db      	mvns	r3, r3
 8004c22:	401a      	ands	r2, r3
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c28:	f7fe fc86 	bl	8003538 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <vPortFree+0xbc>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4413      	add	r3, r2
 8004c36:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <vPortFree+0xbc>)
 8004c38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c3a:	6938      	ldr	r0, [r7, #16]
 8004c3c:	f000 f874 	bl	8004d28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <vPortFree+0xc0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3301      	adds	r3, #1
 8004c46:	4a06      	ldr	r2, [pc, #24]	; (8004c60 <vPortFree+0xc0>)
 8004c48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c4a:	f7fe fc83 	bl	8003554 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c4e:	bf00      	nop
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20004b38 	.word	0x20004b38
 8004c5c:	20004b28 	.word	0x20004b28
 8004c60:	20004b34 	.word	0x20004b34

08004c64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c70:	4b27      	ldr	r3, [pc, #156]	; (8004d10 <prvHeapInit+0xac>)
 8004c72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00c      	beq.n	8004c98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3307      	adds	r3, #7
 8004c82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0307 	bic.w	r3, r3, #7
 8004c8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	4a1f      	ldr	r2, [pc, #124]	; (8004d10 <prvHeapInit+0xac>)
 8004c94:	4413      	add	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c9c:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <prvHeapInit+0xb0>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ca2:	4b1c      	ldr	r3, [pc, #112]	; (8004d14 <prvHeapInit+0xb0>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	4413      	add	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0307 	bic.w	r3, r3, #7
 8004cbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4a15      	ldr	r2, [pc, #84]	; (8004d18 <prvHeapInit+0xb4>)
 8004cc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cc6:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <prvHeapInit+0xb4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cce:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <prvHeapInit+0xb4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	1ad2      	subs	r2, r2, r3
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <prvHeapInit+0xb4>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <prvHeapInit+0xb8>)
 8004cf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <prvHeapInit+0xbc>)
 8004cfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cfc:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <prvHeapInit+0xc0>)
 8004cfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d02:	601a      	str	r2, [r3, #0]
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	20000f1c 	.word	0x20000f1c
 8004d14:	20004b1c 	.word	0x20004b1c
 8004d18:	20004b24 	.word	0x20004b24
 8004d1c:	20004b2c 	.word	0x20004b2c
 8004d20:	20004b28 	.word	0x20004b28
 8004d24:	20004b38 	.word	0x20004b38

08004d28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d30:	4b28      	ldr	r3, [pc, #160]	; (8004dd4 <prvInsertBlockIntoFreeList+0xac>)
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	e002      	b.n	8004d3c <prvInsertBlockIntoFreeList+0x14>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d8f7      	bhi.n	8004d36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	4413      	add	r3, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d108      	bne.n	8004d6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	441a      	add	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	441a      	add	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d118      	bne.n	8004db0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d00d      	beq.n	8004da6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	441a      	add	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	e008      	b.n	8004db8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004da6:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	e003      	b.n	8004db8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d002      	beq.n	8004dc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20004b1c 	.word	0x20004b1c
 8004dd8:	20004b24 	.word	0x20004b24

08004ddc <__errno>:
 8004ddc:	4b01      	ldr	r3, [pc, #4]	; (8004de4 <__errno+0x8>)
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20000010 	.word	0x20000010

08004de8 <std>:
 8004de8:	2300      	movs	r3, #0
 8004dea:	b510      	push	{r4, lr}
 8004dec:	4604      	mov	r4, r0
 8004dee:	e9c0 3300 	strd	r3, r3, [r0]
 8004df2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004df6:	6083      	str	r3, [r0, #8]
 8004df8:	8181      	strh	r1, [r0, #12]
 8004dfa:	6643      	str	r3, [r0, #100]	; 0x64
 8004dfc:	81c2      	strh	r2, [r0, #14]
 8004dfe:	6183      	str	r3, [r0, #24]
 8004e00:	4619      	mov	r1, r3
 8004e02:	2208      	movs	r2, #8
 8004e04:	305c      	adds	r0, #92	; 0x5c
 8004e06:	f000 f91a 	bl	800503e <memset>
 8004e0a:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <std+0x38>)
 8004e0c:	6263      	str	r3, [r4, #36]	; 0x24
 8004e0e:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <std+0x3c>)
 8004e10:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <std+0x40>)
 8004e14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e16:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <std+0x44>)
 8004e18:	6224      	str	r4, [r4, #32]
 8004e1a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e1c:	bd10      	pop	{r4, pc}
 8004e1e:	bf00      	nop
 8004e20:	08005389 	.word	0x08005389
 8004e24:	080053ab 	.word	0x080053ab
 8004e28:	080053e3 	.word	0x080053e3
 8004e2c:	08005407 	.word	0x08005407

08004e30 <_cleanup_r>:
 8004e30:	4901      	ldr	r1, [pc, #4]	; (8004e38 <_cleanup_r+0x8>)
 8004e32:	f000 b8af 	b.w	8004f94 <_fwalk_reent>
 8004e36:	bf00      	nop
 8004e38:	080056e1 	.word	0x080056e1

08004e3c <__sfmoreglue>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	2268      	movs	r2, #104	; 0x68
 8004e40:	1e4d      	subs	r5, r1, #1
 8004e42:	4355      	muls	r5, r2
 8004e44:	460e      	mov	r6, r1
 8004e46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e4a:	f000 f921 	bl	8005090 <_malloc_r>
 8004e4e:	4604      	mov	r4, r0
 8004e50:	b140      	cbz	r0, 8004e64 <__sfmoreglue+0x28>
 8004e52:	2100      	movs	r1, #0
 8004e54:	e9c0 1600 	strd	r1, r6, [r0]
 8004e58:	300c      	adds	r0, #12
 8004e5a:	60a0      	str	r0, [r4, #8]
 8004e5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e60:	f000 f8ed 	bl	800503e <memset>
 8004e64:	4620      	mov	r0, r4
 8004e66:	bd70      	pop	{r4, r5, r6, pc}

08004e68 <__sfp_lock_acquire>:
 8004e68:	4801      	ldr	r0, [pc, #4]	; (8004e70 <__sfp_lock_acquire+0x8>)
 8004e6a:	f000 b8d8 	b.w	800501e <__retarget_lock_acquire_recursive>
 8004e6e:	bf00      	nop
 8004e70:	20004b3d 	.word	0x20004b3d

08004e74 <__sfp_lock_release>:
 8004e74:	4801      	ldr	r0, [pc, #4]	; (8004e7c <__sfp_lock_release+0x8>)
 8004e76:	f000 b8d3 	b.w	8005020 <__retarget_lock_release_recursive>
 8004e7a:	bf00      	nop
 8004e7c:	20004b3d 	.word	0x20004b3d

08004e80 <__sinit_lock_acquire>:
 8004e80:	4801      	ldr	r0, [pc, #4]	; (8004e88 <__sinit_lock_acquire+0x8>)
 8004e82:	f000 b8cc 	b.w	800501e <__retarget_lock_acquire_recursive>
 8004e86:	bf00      	nop
 8004e88:	20004b3e 	.word	0x20004b3e

08004e8c <__sinit_lock_release>:
 8004e8c:	4801      	ldr	r0, [pc, #4]	; (8004e94 <__sinit_lock_release+0x8>)
 8004e8e:	f000 b8c7 	b.w	8005020 <__retarget_lock_release_recursive>
 8004e92:	bf00      	nop
 8004e94:	20004b3e 	.word	0x20004b3e

08004e98 <__sinit>:
 8004e98:	b510      	push	{r4, lr}
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	f7ff fff0 	bl	8004e80 <__sinit_lock_acquire>
 8004ea0:	69a3      	ldr	r3, [r4, #24]
 8004ea2:	b11b      	cbz	r3, 8004eac <__sinit+0x14>
 8004ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea8:	f7ff bff0 	b.w	8004e8c <__sinit_lock_release>
 8004eac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004eb0:	6523      	str	r3, [r4, #80]	; 0x50
 8004eb2:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <__sinit+0x68>)
 8004eb4:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <__sinit+0x6c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004eba:	42a3      	cmp	r3, r4
 8004ebc:	bf04      	itt	eq
 8004ebe:	2301      	moveq	r3, #1
 8004ec0:	61a3      	streq	r3, [r4, #24]
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f000 f820 	bl	8004f08 <__sfp>
 8004ec8:	6060      	str	r0, [r4, #4]
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f000 f81c 	bl	8004f08 <__sfp>
 8004ed0:	60a0      	str	r0, [r4, #8]
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f000 f818 	bl	8004f08 <__sfp>
 8004ed8:	2200      	movs	r2, #0
 8004eda:	60e0      	str	r0, [r4, #12]
 8004edc:	2104      	movs	r1, #4
 8004ede:	6860      	ldr	r0, [r4, #4]
 8004ee0:	f7ff ff82 	bl	8004de8 <std>
 8004ee4:	68a0      	ldr	r0, [r4, #8]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	2109      	movs	r1, #9
 8004eea:	f7ff ff7d 	bl	8004de8 <std>
 8004eee:	68e0      	ldr	r0, [r4, #12]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	2112      	movs	r1, #18
 8004ef4:	f7ff ff78 	bl	8004de8 <std>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	61a3      	str	r3, [r4, #24]
 8004efc:	e7d2      	b.n	8004ea4 <__sinit+0xc>
 8004efe:	bf00      	nop
 8004f00:	08006054 	.word	0x08006054
 8004f04:	08004e31 	.word	0x08004e31

08004f08 <__sfp>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	4607      	mov	r7, r0
 8004f0c:	f7ff ffac 	bl	8004e68 <__sfp_lock_acquire>
 8004f10:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <__sfp+0x84>)
 8004f12:	681e      	ldr	r6, [r3, #0]
 8004f14:	69b3      	ldr	r3, [r6, #24]
 8004f16:	b913      	cbnz	r3, 8004f1e <__sfp+0x16>
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f7ff ffbd 	bl	8004e98 <__sinit>
 8004f1e:	3648      	adds	r6, #72	; 0x48
 8004f20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	d503      	bpl.n	8004f30 <__sfp+0x28>
 8004f28:	6833      	ldr	r3, [r6, #0]
 8004f2a:	b30b      	cbz	r3, 8004f70 <__sfp+0x68>
 8004f2c:	6836      	ldr	r6, [r6, #0]
 8004f2e:	e7f7      	b.n	8004f20 <__sfp+0x18>
 8004f30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f34:	b9d5      	cbnz	r5, 8004f6c <__sfp+0x64>
 8004f36:	4b16      	ldr	r3, [pc, #88]	; (8004f90 <__sfp+0x88>)
 8004f38:	60e3      	str	r3, [r4, #12]
 8004f3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f3e:	6665      	str	r5, [r4, #100]	; 0x64
 8004f40:	f000 f86c 	bl	800501c <__retarget_lock_init_recursive>
 8004f44:	f7ff ff96 	bl	8004e74 <__sfp_lock_release>
 8004f48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f50:	6025      	str	r5, [r4, #0]
 8004f52:	61a5      	str	r5, [r4, #24]
 8004f54:	2208      	movs	r2, #8
 8004f56:	4629      	mov	r1, r5
 8004f58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f5c:	f000 f86f 	bl	800503e <memset>
 8004f60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f68:	4620      	mov	r0, r4
 8004f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f6c:	3468      	adds	r4, #104	; 0x68
 8004f6e:	e7d9      	b.n	8004f24 <__sfp+0x1c>
 8004f70:	2104      	movs	r1, #4
 8004f72:	4638      	mov	r0, r7
 8004f74:	f7ff ff62 	bl	8004e3c <__sfmoreglue>
 8004f78:	4604      	mov	r4, r0
 8004f7a:	6030      	str	r0, [r6, #0]
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	d1d5      	bne.n	8004f2c <__sfp+0x24>
 8004f80:	f7ff ff78 	bl	8004e74 <__sfp_lock_release>
 8004f84:	230c      	movs	r3, #12
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	e7ee      	b.n	8004f68 <__sfp+0x60>
 8004f8a:	bf00      	nop
 8004f8c:	08006054 	.word	0x08006054
 8004f90:	ffff0001 	.word	0xffff0001

08004f94 <_fwalk_reent>:
 8004f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f98:	4606      	mov	r6, r0
 8004f9a:	4688      	mov	r8, r1
 8004f9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fa0:	2700      	movs	r7, #0
 8004fa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fa6:	f1b9 0901 	subs.w	r9, r9, #1
 8004faa:	d505      	bpl.n	8004fb8 <_fwalk_reent+0x24>
 8004fac:	6824      	ldr	r4, [r4, #0]
 8004fae:	2c00      	cmp	r4, #0
 8004fb0:	d1f7      	bne.n	8004fa2 <_fwalk_reent+0xe>
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fb8:	89ab      	ldrh	r3, [r5, #12]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d907      	bls.n	8004fce <_fwalk_reent+0x3a>
 8004fbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	d003      	beq.n	8004fce <_fwalk_reent+0x3a>
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4630      	mov	r0, r6
 8004fca:	47c0      	blx	r8
 8004fcc:	4307      	orrs	r7, r0
 8004fce:	3568      	adds	r5, #104	; 0x68
 8004fd0:	e7e9      	b.n	8004fa6 <_fwalk_reent+0x12>
	...

08004fd4 <__libc_init_array>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	4d0d      	ldr	r5, [pc, #52]	; (800500c <__libc_init_array+0x38>)
 8004fd8:	4c0d      	ldr	r4, [pc, #52]	; (8005010 <__libc_init_array+0x3c>)
 8004fda:	1b64      	subs	r4, r4, r5
 8004fdc:	10a4      	asrs	r4, r4, #2
 8004fde:	2600      	movs	r6, #0
 8004fe0:	42a6      	cmp	r6, r4
 8004fe2:	d109      	bne.n	8004ff8 <__libc_init_array+0x24>
 8004fe4:	4d0b      	ldr	r5, [pc, #44]	; (8005014 <__libc_init_array+0x40>)
 8004fe6:	4c0c      	ldr	r4, [pc, #48]	; (8005018 <__libc_init_array+0x44>)
 8004fe8:	f000 ffa8 	bl	8005f3c <_init>
 8004fec:	1b64      	subs	r4, r4, r5
 8004fee:	10a4      	asrs	r4, r4, #2
 8004ff0:	2600      	movs	r6, #0
 8004ff2:	42a6      	cmp	r6, r4
 8004ff4:	d105      	bne.n	8005002 <__libc_init_array+0x2e>
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}
 8004ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ffc:	4798      	blx	r3
 8004ffe:	3601      	adds	r6, #1
 8005000:	e7ee      	b.n	8004fe0 <__libc_init_array+0xc>
 8005002:	f855 3b04 	ldr.w	r3, [r5], #4
 8005006:	4798      	blx	r3
 8005008:	3601      	adds	r6, #1
 800500a:	e7f2      	b.n	8004ff2 <__libc_init_array+0x1e>
 800500c:	08006094 	.word	0x08006094
 8005010:	08006094 	.word	0x08006094
 8005014:	08006094 	.word	0x08006094
 8005018:	08006098 	.word	0x08006098

0800501c <__retarget_lock_init_recursive>:
 800501c:	4770      	bx	lr

0800501e <__retarget_lock_acquire_recursive>:
 800501e:	4770      	bx	lr

08005020 <__retarget_lock_release_recursive>:
 8005020:	4770      	bx	lr

08005022 <memcpy>:
 8005022:	440a      	add	r2, r1
 8005024:	4291      	cmp	r1, r2
 8005026:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800502a:	d100      	bne.n	800502e <memcpy+0xc>
 800502c:	4770      	bx	lr
 800502e:	b510      	push	{r4, lr}
 8005030:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005034:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005038:	4291      	cmp	r1, r2
 800503a:	d1f9      	bne.n	8005030 <memcpy+0xe>
 800503c:	bd10      	pop	{r4, pc}

0800503e <memset>:
 800503e:	4402      	add	r2, r0
 8005040:	4603      	mov	r3, r0
 8005042:	4293      	cmp	r3, r2
 8005044:	d100      	bne.n	8005048 <memset+0xa>
 8005046:	4770      	bx	lr
 8005048:	f803 1b01 	strb.w	r1, [r3], #1
 800504c:	e7f9      	b.n	8005042 <memset+0x4>
	...

08005050 <sbrk_aligned>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	4e0e      	ldr	r6, [pc, #56]	; (800508c <sbrk_aligned+0x3c>)
 8005054:	460c      	mov	r4, r1
 8005056:	6831      	ldr	r1, [r6, #0]
 8005058:	4605      	mov	r5, r0
 800505a:	b911      	cbnz	r1, 8005062 <sbrk_aligned+0x12>
 800505c:	f000 f984 	bl	8005368 <_sbrk_r>
 8005060:	6030      	str	r0, [r6, #0]
 8005062:	4621      	mov	r1, r4
 8005064:	4628      	mov	r0, r5
 8005066:	f000 f97f 	bl	8005368 <_sbrk_r>
 800506a:	1c43      	adds	r3, r0, #1
 800506c:	d00a      	beq.n	8005084 <sbrk_aligned+0x34>
 800506e:	1cc4      	adds	r4, r0, #3
 8005070:	f024 0403 	bic.w	r4, r4, #3
 8005074:	42a0      	cmp	r0, r4
 8005076:	d007      	beq.n	8005088 <sbrk_aligned+0x38>
 8005078:	1a21      	subs	r1, r4, r0
 800507a:	4628      	mov	r0, r5
 800507c:	f000 f974 	bl	8005368 <_sbrk_r>
 8005080:	3001      	adds	r0, #1
 8005082:	d101      	bne.n	8005088 <sbrk_aligned+0x38>
 8005084:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005088:	4620      	mov	r0, r4
 800508a:	bd70      	pop	{r4, r5, r6, pc}
 800508c:	20004b44 	.word	0x20004b44

08005090 <_malloc_r>:
 8005090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005094:	1ccd      	adds	r5, r1, #3
 8005096:	f025 0503 	bic.w	r5, r5, #3
 800509a:	3508      	adds	r5, #8
 800509c:	2d0c      	cmp	r5, #12
 800509e:	bf38      	it	cc
 80050a0:	250c      	movcc	r5, #12
 80050a2:	2d00      	cmp	r5, #0
 80050a4:	4607      	mov	r7, r0
 80050a6:	db01      	blt.n	80050ac <_malloc_r+0x1c>
 80050a8:	42a9      	cmp	r1, r5
 80050aa:	d905      	bls.n	80050b8 <_malloc_r+0x28>
 80050ac:	230c      	movs	r3, #12
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	2600      	movs	r6, #0
 80050b2:	4630      	mov	r0, r6
 80050b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050b8:	4e2e      	ldr	r6, [pc, #184]	; (8005174 <_malloc_r+0xe4>)
 80050ba:	f000 fbc5 	bl	8005848 <__malloc_lock>
 80050be:	6833      	ldr	r3, [r6, #0]
 80050c0:	461c      	mov	r4, r3
 80050c2:	bb34      	cbnz	r4, 8005112 <_malloc_r+0x82>
 80050c4:	4629      	mov	r1, r5
 80050c6:	4638      	mov	r0, r7
 80050c8:	f7ff ffc2 	bl	8005050 <sbrk_aligned>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	4604      	mov	r4, r0
 80050d0:	d14d      	bne.n	800516e <_malloc_r+0xde>
 80050d2:	6834      	ldr	r4, [r6, #0]
 80050d4:	4626      	mov	r6, r4
 80050d6:	2e00      	cmp	r6, #0
 80050d8:	d140      	bne.n	800515c <_malloc_r+0xcc>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	4631      	mov	r1, r6
 80050de:	4638      	mov	r0, r7
 80050e0:	eb04 0803 	add.w	r8, r4, r3
 80050e4:	f000 f940 	bl	8005368 <_sbrk_r>
 80050e8:	4580      	cmp	r8, r0
 80050ea:	d13a      	bne.n	8005162 <_malloc_r+0xd2>
 80050ec:	6821      	ldr	r1, [r4, #0]
 80050ee:	3503      	adds	r5, #3
 80050f0:	1a6d      	subs	r5, r5, r1
 80050f2:	f025 0503 	bic.w	r5, r5, #3
 80050f6:	3508      	adds	r5, #8
 80050f8:	2d0c      	cmp	r5, #12
 80050fa:	bf38      	it	cc
 80050fc:	250c      	movcc	r5, #12
 80050fe:	4629      	mov	r1, r5
 8005100:	4638      	mov	r0, r7
 8005102:	f7ff ffa5 	bl	8005050 <sbrk_aligned>
 8005106:	3001      	adds	r0, #1
 8005108:	d02b      	beq.n	8005162 <_malloc_r+0xd2>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	442b      	add	r3, r5
 800510e:	6023      	str	r3, [r4, #0]
 8005110:	e00e      	b.n	8005130 <_malloc_r+0xa0>
 8005112:	6822      	ldr	r2, [r4, #0]
 8005114:	1b52      	subs	r2, r2, r5
 8005116:	d41e      	bmi.n	8005156 <_malloc_r+0xc6>
 8005118:	2a0b      	cmp	r2, #11
 800511a:	d916      	bls.n	800514a <_malloc_r+0xba>
 800511c:	1961      	adds	r1, r4, r5
 800511e:	42a3      	cmp	r3, r4
 8005120:	6025      	str	r5, [r4, #0]
 8005122:	bf18      	it	ne
 8005124:	6059      	strne	r1, [r3, #4]
 8005126:	6863      	ldr	r3, [r4, #4]
 8005128:	bf08      	it	eq
 800512a:	6031      	streq	r1, [r6, #0]
 800512c:	5162      	str	r2, [r4, r5]
 800512e:	604b      	str	r3, [r1, #4]
 8005130:	4638      	mov	r0, r7
 8005132:	f104 060b 	add.w	r6, r4, #11
 8005136:	f000 fb8d 	bl	8005854 <__malloc_unlock>
 800513a:	f026 0607 	bic.w	r6, r6, #7
 800513e:	1d23      	adds	r3, r4, #4
 8005140:	1af2      	subs	r2, r6, r3
 8005142:	d0b6      	beq.n	80050b2 <_malloc_r+0x22>
 8005144:	1b9b      	subs	r3, r3, r6
 8005146:	50a3      	str	r3, [r4, r2]
 8005148:	e7b3      	b.n	80050b2 <_malloc_r+0x22>
 800514a:	6862      	ldr	r2, [r4, #4]
 800514c:	42a3      	cmp	r3, r4
 800514e:	bf0c      	ite	eq
 8005150:	6032      	streq	r2, [r6, #0]
 8005152:	605a      	strne	r2, [r3, #4]
 8005154:	e7ec      	b.n	8005130 <_malloc_r+0xa0>
 8005156:	4623      	mov	r3, r4
 8005158:	6864      	ldr	r4, [r4, #4]
 800515a:	e7b2      	b.n	80050c2 <_malloc_r+0x32>
 800515c:	4634      	mov	r4, r6
 800515e:	6876      	ldr	r6, [r6, #4]
 8005160:	e7b9      	b.n	80050d6 <_malloc_r+0x46>
 8005162:	230c      	movs	r3, #12
 8005164:	603b      	str	r3, [r7, #0]
 8005166:	4638      	mov	r0, r7
 8005168:	f000 fb74 	bl	8005854 <__malloc_unlock>
 800516c:	e7a1      	b.n	80050b2 <_malloc_r+0x22>
 800516e:	6025      	str	r5, [r4, #0]
 8005170:	e7de      	b.n	8005130 <_malloc_r+0xa0>
 8005172:	bf00      	nop
 8005174:	20004b40 	.word	0x20004b40

08005178 <iprintf>:
 8005178:	b40f      	push	{r0, r1, r2, r3}
 800517a:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <iprintf+0x2c>)
 800517c:	b513      	push	{r0, r1, r4, lr}
 800517e:	681c      	ldr	r4, [r3, #0]
 8005180:	b124      	cbz	r4, 800518c <iprintf+0x14>
 8005182:	69a3      	ldr	r3, [r4, #24]
 8005184:	b913      	cbnz	r3, 800518c <iprintf+0x14>
 8005186:	4620      	mov	r0, r4
 8005188:	f7ff fe86 	bl	8004e98 <__sinit>
 800518c:	ab05      	add	r3, sp, #20
 800518e:	9a04      	ldr	r2, [sp, #16]
 8005190:	68a1      	ldr	r1, [r4, #8]
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	4620      	mov	r0, r4
 8005196:	f000 fbd9 	bl	800594c <_vfiprintf_r>
 800519a:	b002      	add	sp, #8
 800519c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a0:	b004      	add	sp, #16
 80051a2:	4770      	bx	lr
 80051a4:	20000010 	.word	0x20000010

080051a8 <_puts_r>:
 80051a8:	b570      	push	{r4, r5, r6, lr}
 80051aa:	460e      	mov	r6, r1
 80051ac:	4605      	mov	r5, r0
 80051ae:	b118      	cbz	r0, 80051b8 <_puts_r+0x10>
 80051b0:	6983      	ldr	r3, [r0, #24]
 80051b2:	b90b      	cbnz	r3, 80051b8 <_puts_r+0x10>
 80051b4:	f7ff fe70 	bl	8004e98 <__sinit>
 80051b8:	69ab      	ldr	r3, [r5, #24]
 80051ba:	68ac      	ldr	r4, [r5, #8]
 80051bc:	b913      	cbnz	r3, 80051c4 <_puts_r+0x1c>
 80051be:	4628      	mov	r0, r5
 80051c0:	f7ff fe6a 	bl	8004e98 <__sinit>
 80051c4:	4b2c      	ldr	r3, [pc, #176]	; (8005278 <_puts_r+0xd0>)
 80051c6:	429c      	cmp	r4, r3
 80051c8:	d120      	bne.n	800520c <_puts_r+0x64>
 80051ca:	686c      	ldr	r4, [r5, #4]
 80051cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051ce:	07db      	lsls	r3, r3, #31
 80051d0:	d405      	bmi.n	80051de <_puts_r+0x36>
 80051d2:	89a3      	ldrh	r3, [r4, #12]
 80051d4:	0598      	lsls	r0, r3, #22
 80051d6:	d402      	bmi.n	80051de <_puts_r+0x36>
 80051d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051da:	f7ff ff20 	bl	800501e <__retarget_lock_acquire_recursive>
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	0719      	lsls	r1, r3, #28
 80051e2:	d51d      	bpl.n	8005220 <_puts_r+0x78>
 80051e4:	6923      	ldr	r3, [r4, #16]
 80051e6:	b1db      	cbz	r3, 8005220 <_puts_r+0x78>
 80051e8:	3e01      	subs	r6, #1
 80051ea:	68a3      	ldr	r3, [r4, #8]
 80051ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051f0:	3b01      	subs	r3, #1
 80051f2:	60a3      	str	r3, [r4, #8]
 80051f4:	bb39      	cbnz	r1, 8005246 <_puts_r+0x9e>
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	da38      	bge.n	800526c <_puts_r+0xc4>
 80051fa:	4622      	mov	r2, r4
 80051fc:	210a      	movs	r1, #10
 80051fe:	4628      	mov	r0, r5
 8005200:	f000 f906 	bl	8005410 <__swbuf_r>
 8005204:	3001      	adds	r0, #1
 8005206:	d011      	beq.n	800522c <_puts_r+0x84>
 8005208:	250a      	movs	r5, #10
 800520a:	e011      	b.n	8005230 <_puts_r+0x88>
 800520c:	4b1b      	ldr	r3, [pc, #108]	; (800527c <_puts_r+0xd4>)
 800520e:	429c      	cmp	r4, r3
 8005210:	d101      	bne.n	8005216 <_puts_r+0x6e>
 8005212:	68ac      	ldr	r4, [r5, #8]
 8005214:	e7da      	b.n	80051cc <_puts_r+0x24>
 8005216:	4b1a      	ldr	r3, [pc, #104]	; (8005280 <_puts_r+0xd8>)
 8005218:	429c      	cmp	r4, r3
 800521a:	bf08      	it	eq
 800521c:	68ec      	ldreq	r4, [r5, #12]
 800521e:	e7d5      	b.n	80051cc <_puts_r+0x24>
 8005220:	4621      	mov	r1, r4
 8005222:	4628      	mov	r0, r5
 8005224:	f000 f958 	bl	80054d8 <__swsetup_r>
 8005228:	2800      	cmp	r0, #0
 800522a:	d0dd      	beq.n	80051e8 <_puts_r+0x40>
 800522c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005230:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005232:	07da      	lsls	r2, r3, #31
 8005234:	d405      	bmi.n	8005242 <_puts_r+0x9a>
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	059b      	lsls	r3, r3, #22
 800523a:	d402      	bmi.n	8005242 <_puts_r+0x9a>
 800523c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800523e:	f7ff feef 	bl	8005020 <__retarget_lock_release_recursive>
 8005242:	4628      	mov	r0, r5
 8005244:	bd70      	pop	{r4, r5, r6, pc}
 8005246:	2b00      	cmp	r3, #0
 8005248:	da04      	bge.n	8005254 <_puts_r+0xac>
 800524a:	69a2      	ldr	r2, [r4, #24]
 800524c:	429a      	cmp	r2, r3
 800524e:	dc06      	bgt.n	800525e <_puts_r+0xb6>
 8005250:	290a      	cmp	r1, #10
 8005252:	d004      	beq.n	800525e <_puts_r+0xb6>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	6022      	str	r2, [r4, #0]
 800525a:	7019      	strb	r1, [r3, #0]
 800525c:	e7c5      	b.n	80051ea <_puts_r+0x42>
 800525e:	4622      	mov	r2, r4
 8005260:	4628      	mov	r0, r5
 8005262:	f000 f8d5 	bl	8005410 <__swbuf_r>
 8005266:	3001      	adds	r0, #1
 8005268:	d1bf      	bne.n	80051ea <_puts_r+0x42>
 800526a:	e7df      	b.n	800522c <_puts_r+0x84>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	250a      	movs	r5, #10
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	6022      	str	r2, [r4, #0]
 8005274:	701d      	strb	r5, [r3, #0]
 8005276:	e7db      	b.n	8005230 <_puts_r+0x88>
 8005278:	08006014 	.word	0x08006014
 800527c:	08006034 	.word	0x08006034
 8005280:	08005ff4 	.word	0x08005ff4

08005284 <puts>:
 8005284:	4b02      	ldr	r3, [pc, #8]	; (8005290 <puts+0xc>)
 8005286:	4601      	mov	r1, r0
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	f7ff bf8d 	b.w	80051a8 <_puts_r>
 800528e:	bf00      	nop
 8005290:	20000010 	.word	0x20000010

08005294 <cleanup_glue>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	460c      	mov	r4, r1
 8005298:	6809      	ldr	r1, [r1, #0]
 800529a:	4605      	mov	r5, r0
 800529c:	b109      	cbz	r1, 80052a2 <cleanup_glue+0xe>
 800529e:	f7ff fff9 	bl	8005294 <cleanup_glue>
 80052a2:	4621      	mov	r1, r4
 80052a4:	4628      	mov	r0, r5
 80052a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052aa:	f000 bad9 	b.w	8005860 <_free_r>
	...

080052b0 <_reclaim_reent>:
 80052b0:	4b2c      	ldr	r3, [pc, #176]	; (8005364 <_reclaim_reent+0xb4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4283      	cmp	r3, r0
 80052b6:	b570      	push	{r4, r5, r6, lr}
 80052b8:	4604      	mov	r4, r0
 80052ba:	d051      	beq.n	8005360 <_reclaim_reent+0xb0>
 80052bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80052be:	b143      	cbz	r3, 80052d2 <_reclaim_reent+0x22>
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d14a      	bne.n	800535c <_reclaim_reent+0xac>
 80052c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052c8:	6819      	ldr	r1, [r3, #0]
 80052ca:	b111      	cbz	r1, 80052d2 <_reclaim_reent+0x22>
 80052cc:	4620      	mov	r0, r4
 80052ce:	f000 fac7 	bl	8005860 <_free_r>
 80052d2:	6961      	ldr	r1, [r4, #20]
 80052d4:	b111      	cbz	r1, 80052dc <_reclaim_reent+0x2c>
 80052d6:	4620      	mov	r0, r4
 80052d8:	f000 fac2 	bl	8005860 <_free_r>
 80052dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80052de:	b111      	cbz	r1, 80052e6 <_reclaim_reent+0x36>
 80052e0:	4620      	mov	r0, r4
 80052e2:	f000 fabd 	bl	8005860 <_free_r>
 80052e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80052e8:	b111      	cbz	r1, 80052f0 <_reclaim_reent+0x40>
 80052ea:	4620      	mov	r0, r4
 80052ec:	f000 fab8 	bl	8005860 <_free_r>
 80052f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80052f2:	b111      	cbz	r1, 80052fa <_reclaim_reent+0x4a>
 80052f4:	4620      	mov	r0, r4
 80052f6:	f000 fab3 	bl	8005860 <_free_r>
 80052fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80052fc:	b111      	cbz	r1, 8005304 <_reclaim_reent+0x54>
 80052fe:	4620      	mov	r0, r4
 8005300:	f000 faae 	bl	8005860 <_free_r>
 8005304:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005306:	b111      	cbz	r1, 800530e <_reclaim_reent+0x5e>
 8005308:	4620      	mov	r0, r4
 800530a:	f000 faa9 	bl	8005860 <_free_r>
 800530e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005310:	b111      	cbz	r1, 8005318 <_reclaim_reent+0x68>
 8005312:	4620      	mov	r0, r4
 8005314:	f000 faa4 	bl	8005860 <_free_r>
 8005318:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800531a:	b111      	cbz	r1, 8005322 <_reclaim_reent+0x72>
 800531c:	4620      	mov	r0, r4
 800531e:	f000 fa9f 	bl	8005860 <_free_r>
 8005322:	69a3      	ldr	r3, [r4, #24]
 8005324:	b1e3      	cbz	r3, 8005360 <_reclaim_reent+0xb0>
 8005326:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005328:	4620      	mov	r0, r4
 800532a:	4798      	blx	r3
 800532c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800532e:	b1b9      	cbz	r1, 8005360 <_reclaim_reent+0xb0>
 8005330:	4620      	mov	r0, r4
 8005332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005336:	f7ff bfad 	b.w	8005294 <cleanup_glue>
 800533a:	5949      	ldr	r1, [r1, r5]
 800533c:	b941      	cbnz	r1, 8005350 <_reclaim_reent+0xa0>
 800533e:	3504      	adds	r5, #4
 8005340:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005342:	2d80      	cmp	r5, #128	; 0x80
 8005344:	68d9      	ldr	r1, [r3, #12]
 8005346:	d1f8      	bne.n	800533a <_reclaim_reent+0x8a>
 8005348:	4620      	mov	r0, r4
 800534a:	f000 fa89 	bl	8005860 <_free_r>
 800534e:	e7ba      	b.n	80052c6 <_reclaim_reent+0x16>
 8005350:	680e      	ldr	r6, [r1, #0]
 8005352:	4620      	mov	r0, r4
 8005354:	f000 fa84 	bl	8005860 <_free_r>
 8005358:	4631      	mov	r1, r6
 800535a:	e7ef      	b.n	800533c <_reclaim_reent+0x8c>
 800535c:	2500      	movs	r5, #0
 800535e:	e7ef      	b.n	8005340 <_reclaim_reent+0x90>
 8005360:	bd70      	pop	{r4, r5, r6, pc}
 8005362:	bf00      	nop
 8005364:	20000010 	.word	0x20000010

08005368 <_sbrk_r>:
 8005368:	b538      	push	{r3, r4, r5, lr}
 800536a:	4d06      	ldr	r5, [pc, #24]	; (8005384 <_sbrk_r+0x1c>)
 800536c:	2300      	movs	r3, #0
 800536e:	4604      	mov	r4, r0
 8005370:	4608      	mov	r0, r1
 8005372:	602b      	str	r3, [r5, #0]
 8005374:	f7fb fbb4 	bl	8000ae0 <_sbrk>
 8005378:	1c43      	adds	r3, r0, #1
 800537a:	d102      	bne.n	8005382 <_sbrk_r+0x1a>
 800537c:	682b      	ldr	r3, [r5, #0]
 800537e:	b103      	cbz	r3, 8005382 <_sbrk_r+0x1a>
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	20004b48 	.word	0x20004b48

08005388 <__sread>:
 8005388:	b510      	push	{r4, lr}
 800538a:	460c      	mov	r4, r1
 800538c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005390:	f000 fda0 	bl	8005ed4 <_read_r>
 8005394:	2800      	cmp	r0, #0
 8005396:	bfab      	itete	ge
 8005398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800539a:	89a3      	ldrhlt	r3, [r4, #12]
 800539c:	181b      	addge	r3, r3, r0
 800539e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053a2:	bfac      	ite	ge
 80053a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80053a6:	81a3      	strhlt	r3, [r4, #12]
 80053a8:	bd10      	pop	{r4, pc}

080053aa <__swrite>:
 80053aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ae:	461f      	mov	r7, r3
 80053b0:	898b      	ldrh	r3, [r1, #12]
 80053b2:	05db      	lsls	r3, r3, #23
 80053b4:	4605      	mov	r5, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	4616      	mov	r6, r2
 80053ba:	d505      	bpl.n	80053c8 <__swrite+0x1e>
 80053bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c0:	2302      	movs	r3, #2
 80053c2:	2200      	movs	r2, #0
 80053c4:	f000 f9c8 	bl	8005758 <_lseek_r>
 80053c8:	89a3      	ldrh	r3, [r4, #12]
 80053ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053d2:	81a3      	strh	r3, [r4, #12]
 80053d4:	4632      	mov	r2, r6
 80053d6:	463b      	mov	r3, r7
 80053d8:	4628      	mov	r0, r5
 80053da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053de:	f000 b869 	b.w	80054b4 <_write_r>

080053e2 <__sseek>:
 80053e2:	b510      	push	{r4, lr}
 80053e4:	460c      	mov	r4, r1
 80053e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ea:	f000 f9b5 	bl	8005758 <_lseek_r>
 80053ee:	1c43      	adds	r3, r0, #1
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	bf15      	itete	ne
 80053f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80053f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053fe:	81a3      	strheq	r3, [r4, #12]
 8005400:	bf18      	it	ne
 8005402:	81a3      	strhne	r3, [r4, #12]
 8005404:	bd10      	pop	{r4, pc}

08005406 <__sclose>:
 8005406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800540a:	f000 b8d3 	b.w	80055b4 <_close_r>
	...

08005410 <__swbuf_r>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	460e      	mov	r6, r1
 8005414:	4614      	mov	r4, r2
 8005416:	4605      	mov	r5, r0
 8005418:	b118      	cbz	r0, 8005422 <__swbuf_r+0x12>
 800541a:	6983      	ldr	r3, [r0, #24]
 800541c:	b90b      	cbnz	r3, 8005422 <__swbuf_r+0x12>
 800541e:	f7ff fd3b 	bl	8004e98 <__sinit>
 8005422:	4b21      	ldr	r3, [pc, #132]	; (80054a8 <__swbuf_r+0x98>)
 8005424:	429c      	cmp	r4, r3
 8005426:	d12b      	bne.n	8005480 <__swbuf_r+0x70>
 8005428:	686c      	ldr	r4, [r5, #4]
 800542a:	69a3      	ldr	r3, [r4, #24]
 800542c:	60a3      	str	r3, [r4, #8]
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	071a      	lsls	r2, r3, #28
 8005432:	d52f      	bpl.n	8005494 <__swbuf_r+0x84>
 8005434:	6923      	ldr	r3, [r4, #16]
 8005436:	b36b      	cbz	r3, 8005494 <__swbuf_r+0x84>
 8005438:	6923      	ldr	r3, [r4, #16]
 800543a:	6820      	ldr	r0, [r4, #0]
 800543c:	1ac0      	subs	r0, r0, r3
 800543e:	6963      	ldr	r3, [r4, #20]
 8005440:	b2f6      	uxtb	r6, r6
 8005442:	4283      	cmp	r3, r0
 8005444:	4637      	mov	r7, r6
 8005446:	dc04      	bgt.n	8005452 <__swbuf_r+0x42>
 8005448:	4621      	mov	r1, r4
 800544a:	4628      	mov	r0, r5
 800544c:	f000 f948 	bl	80056e0 <_fflush_r>
 8005450:	bb30      	cbnz	r0, 80054a0 <__swbuf_r+0x90>
 8005452:	68a3      	ldr	r3, [r4, #8]
 8005454:	3b01      	subs	r3, #1
 8005456:	60a3      	str	r3, [r4, #8]
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	6022      	str	r2, [r4, #0]
 800545e:	701e      	strb	r6, [r3, #0]
 8005460:	6963      	ldr	r3, [r4, #20]
 8005462:	3001      	adds	r0, #1
 8005464:	4283      	cmp	r3, r0
 8005466:	d004      	beq.n	8005472 <__swbuf_r+0x62>
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	07db      	lsls	r3, r3, #31
 800546c:	d506      	bpl.n	800547c <__swbuf_r+0x6c>
 800546e:	2e0a      	cmp	r6, #10
 8005470:	d104      	bne.n	800547c <__swbuf_r+0x6c>
 8005472:	4621      	mov	r1, r4
 8005474:	4628      	mov	r0, r5
 8005476:	f000 f933 	bl	80056e0 <_fflush_r>
 800547a:	b988      	cbnz	r0, 80054a0 <__swbuf_r+0x90>
 800547c:	4638      	mov	r0, r7
 800547e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005480:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <__swbuf_r+0x9c>)
 8005482:	429c      	cmp	r4, r3
 8005484:	d101      	bne.n	800548a <__swbuf_r+0x7a>
 8005486:	68ac      	ldr	r4, [r5, #8]
 8005488:	e7cf      	b.n	800542a <__swbuf_r+0x1a>
 800548a:	4b09      	ldr	r3, [pc, #36]	; (80054b0 <__swbuf_r+0xa0>)
 800548c:	429c      	cmp	r4, r3
 800548e:	bf08      	it	eq
 8005490:	68ec      	ldreq	r4, [r5, #12]
 8005492:	e7ca      	b.n	800542a <__swbuf_r+0x1a>
 8005494:	4621      	mov	r1, r4
 8005496:	4628      	mov	r0, r5
 8005498:	f000 f81e 	bl	80054d8 <__swsetup_r>
 800549c:	2800      	cmp	r0, #0
 800549e:	d0cb      	beq.n	8005438 <__swbuf_r+0x28>
 80054a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80054a4:	e7ea      	b.n	800547c <__swbuf_r+0x6c>
 80054a6:	bf00      	nop
 80054a8:	08006014 	.word	0x08006014
 80054ac:	08006034 	.word	0x08006034
 80054b0:	08005ff4 	.word	0x08005ff4

080054b4 <_write_r>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	4d07      	ldr	r5, [pc, #28]	; (80054d4 <_write_r+0x20>)
 80054b8:	4604      	mov	r4, r0
 80054ba:	4608      	mov	r0, r1
 80054bc:	4611      	mov	r1, r2
 80054be:	2200      	movs	r2, #0
 80054c0:	602a      	str	r2, [r5, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f7fb fabb 	bl	8000a3e <_write>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	d102      	bne.n	80054d2 <_write_r+0x1e>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	b103      	cbz	r3, 80054d2 <_write_r+0x1e>
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
 80054d4:	20004b48 	.word	0x20004b48

080054d8 <__swsetup_r>:
 80054d8:	4b32      	ldr	r3, [pc, #200]	; (80055a4 <__swsetup_r+0xcc>)
 80054da:	b570      	push	{r4, r5, r6, lr}
 80054dc:	681d      	ldr	r5, [r3, #0]
 80054de:	4606      	mov	r6, r0
 80054e0:	460c      	mov	r4, r1
 80054e2:	b125      	cbz	r5, 80054ee <__swsetup_r+0x16>
 80054e4:	69ab      	ldr	r3, [r5, #24]
 80054e6:	b913      	cbnz	r3, 80054ee <__swsetup_r+0x16>
 80054e8:	4628      	mov	r0, r5
 80054ea:	f7ff fcd5 	bl	8004e98 <__sinit>
 80054ee:	4b2e      	ldr	r3, [pc, #184]	; (80055a8 <__swsetup_r+0xd0>)
 80054f0:	429c      	cmp	r4, r3
 80054f2:	d10f      	bne.n	8005514 <__swsetup_r+0x3c>
 80054f4:	686c      	ldr	r4, [r5, #4]
 80054f6:	89a3      	ldrh	r3, [r4, #12]
 80054f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054fc:	0719      	lsls	r1, r3, #28
 80054fe:	d42c      	bmi.n	800555a <__swsetup_r+0x82>
 8005500:	06dd      	lsls	r5, r3, #27
 8005502:	d411      	bmi.n	8005528 <__swsetup_r+0x50>
 8005504:	2309      	movs	r3, #9
 8005506:	6033      	str	r3, [r6, #0]
 8005508:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800550c:	81a3      	strh	r3, [r4, #12]
 800550e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005512:	e03e      	b.n	8005592 <__swsetup_r+0xba>
 8005514:	4b25      	ldr	r3, [pc, #148]	; (80055ac <__swsetup_r+0xd4>)
 8005516:	429c      	cmp	r4, r3
 8005518:	d101      	bne.n	800551e <__swsetup_r+0x46>
 800551a:	68ac      	ldr	r4, [r5, #8]
 800551c:	e7eb      	b.n	80054f6 <__swsetup_r+0x1e>
 800551e:	4b24      	ldr	r3, [pc, #144]	; (80055b0 <__swsetup_r+0xd8>)
 8005520:	429c      	cmp	r4, r3
 8005522:	bf08      	it	eq
 8005524:	68ec      	ldreq	r4, [r5, #12]
 8005526:	e7e6      	b.n	80054f6 <__swsetup_r+0x1e>
 8005528:	0758      	lsls	r0, r3, #29
 800552a:	d512      	bpl.n	8005552 <__swsetup_r+0x7a>
 800552c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800552e:	b141      	cbz	r1, 8005542 <__swsetup_r+0x6a>
 8005530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005534:	4299      	cmp	r1, r3
 8005536:	d002      	beq.n	800553e <__swsetup_r+0x66>
 8005538:	4630      	mov	r0, r6
 800553a:	f000 f991 	bl	8005860 <_free_r>
 800553e:	2300      	movs	r3, #0
 8005540:	6363      	str	r3, [r4, #52]	; 0x34
 8005542:	89a3      	ldrh	r3, [r4, #12]
 8005544:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005548:	81a3      	strh	r3, [r4, #12]
 800554a:	2300      	movs	r3, #0
 800554c:	6063      	str	r3, [r4, #4]
 800554e:	6923      	ldr	r3, [r4, #16]
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	89a3      	ldrh	r3, [r4, #12]
 8005554:	f043 0308 	orr.w	r3, r3, #8
 8005558:	81a3      	strh	r3, [r4, #12]
 800555a:	6923      	ldr	r3, [r4, #16]
 800555c:	b94b      	cbnz	r3, 8005572 <__swsetup_r+0x9a>
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005568:	d003      	beq.n	8005572 <__swsetup_r+0x9a>
 800556a:	4621      	mov	r1, r4
 800556c:	4630      	mov	r0, r6
 800556e:	f000 f92b 	bl	80057c8 <__smakebuf_r>
 8005572:	89a0      	ldrh	r0, [r4, #12]
 8005574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005578:	f010 0301 	ands.w	r3, r0, #1
 800557c:	d00a      	beq.n	8005594 <__swsetup_r+0xbc>
 800557e:	2300      	movs	r3, #0
 8005580:	60a3      	str	r3, [r4, #8]
 8005582:	6963      	ldr	r3, [r4, #20]
 8005584:	425b      	negs	r3, r3
 8005586:	61a3      	str	r3, [r4, #24]
 8005588:	6923      	ldr	r3, [r4, #16]
 800558a:	b943      	cbnz	r3, 800559e <__swsetup_r+0xc6>
 800558c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005590:	d1ba      	bne.n	8005508 <__swsetup_r+0x30>
 8005592:	bd70      	pop	{r4, r5, r6, pc}
 8005594:	0781      	lsls	r1, r0, #30
 8005596:	bf58      	it	pl
 8005598:	6963      	ldrpl	r3, [r4, #20]
 800559a:	60a3      	str	r3, [r4, #8]
 800559c:	e7f4      	b.n	8005588 <__swsetup_r+0xb0>
 800559e:	2000      	movs	r0, #0
 80055a0:	e7f7      	b.n	8005592 <__swsetup_r+0xba>
 80055a2:	bf00      	nop
 80055a4:	20000010 	.word	0x20000010
 80055a8:	08006014 	.word	0x08006014
 80055ac:	08006034 	.word	0x08006034
 80055b0:	08005ff4 	.word	0x08005ff4

080055b4 <_close_r>:
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	4d06      	ldr	r5, [pc, #24]	; (80055d0 <_close_r+0x1c>)
 80055b8:	2300      	movs	r3, #0
 80055ba:	4604      	mov	r4, r0
 80055bc:	4608      	mov	r0, r1
 80055be:	602b      	str	r3, [r5, #0]
 80055c0:	f7fb fa59 	bl	8000a76 <_close>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d102      	bne.n	80055ce <_close_r+0x1a>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	b103      	cbz	r3, 80055ce <_close_r+0x1a>
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	20004b48 	.word	0x20004b48

080055d4 <__sflush_r>:
 80055d4:	898a      	ldrh	r2, [r1, #12]
 80055d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055da:	4605      	mov	r5, r0
 80055dc:	0710      	lsls	r0, r2, #28
 80055de:	460c      	mov	r4, r1
 80055e0:	d458      	bmi.n	8005694 <__sflush_r+0xc0>
 80055e2:	684b      	ldr	r3, [r1, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	dc05      	bgt.n	80055f4 <__sflush_r+0x20>
 80055e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	dc02      	bgt.n	80055f4 <__sflush_r+0x20>
 80055ee:	2000      	movs	r0, #0
 80055f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055f6:	2e00      	cmp	r6, #0
 80055f8:	d0f9      	beq.n	80055ee <__sflush_r+0x1a>
 80055fa:	2300      	movs	r3, #0
 80055fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005600:	682f      	ldr	r7, [r5, #0]
 8005602:	602b      	str	r3, [r5, #0]
 8005604:	d032      	beq.n	800566c <__sflush_r+0x98>
 8005606:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	075a      	lsls	r2, r3, #29
 800560c:	d505      	bpl.n	800561a <__sflush_r+0x46>
 800560e:	6863      	ldr	r3, [r4, #4]
 8005610:	1ac0      	subs	r0, r0, r3
 8005612:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005614:	b10b      	cbz	r3, 800561a <__sflush_r+0x46>
 8005616:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005618:	1ac0      	subs	r0, r0, r3
 800561a:	2300      	movs	r3, #0
 800561c:	4602      	mov	r2, r0
 800561e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005620:	6a21      	ldr	r1, [r4, #32]
 8005622:	4628      	mov	r0, r5
 8005624:	47b0      	blx	r6
 8005626:	1c43      	adds	r3, r0, #1
 8005628:	89a3      	ldrh	r3, [r4, #12]
 800562a:	d106      	bne.n	800563a <__sflush_r+0x66>
 800562c:	6829      	ldr	r1, [r5, #0]
 800562e:	291d      	cmp	r1, #29
 8005630:	d82c      	bhi.n	800568c <__sflush_r+0xb8>
 8005632:	4a2a      	ldr	r2, [pc, #168]	; (80056dc <__sflush_r+0x108>)
 8005634:	40ca      	lsrs	r2, r1
 8005636:	07d6      	lsls	r6, r2, #31
 8005638:	d528      	bpl.n	800568c <__sflush_r+0xb8>
 800563a:	2200      	movs	r2, #0
 800563c:	6062      	str	r2, [r4, #4]
 800563e:	04d9      	lsls	r1, r3, #19
 8005640:	6922      	ldr	r2, [r4, #16]
 8005642:	6022      	str	r2, [r4, #0]
 8005644:	d504      	bpl.n	8005650 <__sflush_r+0x7c>
 8005646:	1c42      	adds	r2, r0, #1
 8005648:	d101      	bne.n	800564e <__sflush_r+0x7a>
 800564a:	682b      	ldr	r3, [r5, #0]
 800564c:	b903      	cbnz	r3, 8005650 <__sflush_r+0x7c>
 800564e:	6560      	str	r0, [r4, #84]	; 0x54
 8005650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005652:	602f      	str	r7, [r5, #0]
 8005654:	2900      	cmp	r1, #0
 8005656:	d0ca      	beq.n	80055ee <__sflush_r+0x1a>
 8005658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800565c:	4299      	cmp	r1, r3
 800565e:	d002      	beq.n	8005666 <__sflush_r+0x92>
 8005660:	4628      	mov	r0, r5
 8005662:	f000 f8fd 	bl	8005860 <_free_r>
 8005666:	2000      	movs	r0, #0
 8005668:	6360      	str	r0, [r4, #52]	; 0x34
 800566a:	e7c1      	b.n	80055f0 <__sflush_r+0x1c>
 800566c:	6a21      	ldr	r1, [r4, #32]
 800566e:	2301      	movs	r3, #1
 8005670:	4628      	mov	r0, r5
 8005672:	47b0      	blx	r6
 8005674:	1c41      	adds	r1, r0, #1
 8005676:	d1c7      	bne.n	8005608 <__sflush_r+0x34>
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0c4      	beq.n	8005608 <__sflush_r+0x34>
 800567e:	2b1d      	cmp	r3, #29
 8005680:	d001      	beq.n	8005686 <__sflush_r+0xb2>
 8005682:	2b16      	cmp	r3, #22
 8005684:	d101      	bne.n	800568a <__sflush_r+0xb6>
 8005686:	602f      	str	r7, [r5, #0]
 8005688:	e7b1      	b.n	80055ee <__sflush_r+0x1a>
 800568a:	89a3      	ldrh	r3, [r4, #12]
 800568c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005690:	81a3      	strh	r3, [r4, #12]
 8005692:	e7ad      	b.n	80055f0 <__sflush_r+0x1c>
 8005694:	690f      	ldr	r7, [r1, #16]
 8005696:	2f00      	cmp	r7, #0
 8005698:	d0a9      	beq.n	80055ee <__sflush_r+0x1a>
 800569a:	0793      	lsls	r3, r2, #30
 800569c:	680e      	ldr	r6, [r1, #0]
 800569e:	bf08      	it	eq
 80056a0:	694b      	ldreq	r3, [r1, #20]
 80056a2:	600f      	str	r7, [r1, #0]
 80056a4:	bf18      	it	ne
 80056a6:	2300      	movne	r3, #0
 80056a8:	eba6 0807 	sub.w	r8, r6, r7
 80056ac:	608b      	str	r3, [r1, #8]
 80056ae:	f1b8 0f00 	cmp.w	r8, #0
 80056b2:	dd9c      	ble.n	80055ee <__sflush_r+0x1a>
 80056b4:	6a21      	ldr	r1, [r4, #32]
 80056b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056b8:	4643      	mov	r3, r8
 80056ba:	463a      	mov	r2, r7
 80056bc:	4628      	mov	r0, r5
 80056be:	47b0      	blx	r6
 80056c0:	2800      	cmp	r0, #0
 80056c2:	dc06      	bgt.n	80056d2 <__sflush_r+0xfe>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ca:	81a3      	strh	r3, [r4, #12]
 80056cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056d0:	e78e      	b.n	80055f0 <__sflush_r+0x1c>
 80056d2:	4407      	add	r7, r0
 80056d4:	eba8 0800 	sub.w	r8, r8, r0
 80056d8:	e7e9      	b.n	80056ae <__sflush_r+0xda>
 80056da:	bf00      	nop
 80056dc:	20400001 	.word	0x20400001

080056e0 <_fflush_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	690b      	ldr	r3, [r1, #16]
 80056e4:	4605      	mov	r5, r0
 80056e6:	460c      	mov	r4, r1
 80056e8:	b913      	cbnz	r3, 80056f0 <_fflush_r+0x10>
 80056ea:	2500      	movs	r5, #0
 80056ec:	4628      	mov	r0, r5
 80056ee:	bd38      	pop	{r3, r4, r5, pc}
 80056f0:	b118      	cbz	r0, 80056fa <_fflush_r+0x1a>
 80056f2:	6983      	ldr	r3, [r0, #24]
 80056f4:	b90b      	cbnz	r3, 80056fa <_fflush_r+0x1a>
 80056f6:	f7ff fbcf 	bl	8004e98 <__sinit>
 80056fa:	4b14      	ldr	r3, [pc, #80]	; (800574c <_fflush_r+0x6c>)
 80056fc:	429c      	cmp	r4, r3
 80056fe:	d11b      	bne.n	8005738 <_fflush_r+0x58>
 8005700:	686c      	ldr	r4, [r5, #4]
 8005702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0ef      	beq.n	80056ea <_fflush_r+0xa>
 800570a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800570c:	07d0      	lsls	r0, r2, #31
 800570e:	d404      	bmi.n	800571a <_fflush_r+0x3a>
 8005710:	0599      	lsls	r1, r3, #22
 8005712:	d402      	bmi.n	800571a <_fflush_r+0x3a>
 8005714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005716:	f7ff fc82 	bl	800501e <__retarget_lock_acquire_recursive>
 800571a:	4628      	mov	r0, r5
 800571c:	4621      	mov	r1, r4
 800571e:	f7ff ff59 	bl	80055d4 <__sflush_r>
 8005722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005724:	07da      	lsls	r2, r3, #31
 8005726:	4605      	mov	r5, r0
 8005728:	d4e0      	bmi.n	80056ec <_fflush_r+0xc>
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	059b      	lsls	r3, r3, #22
 800572e:	d4dd      	bmi.n	80056ec <_fflush_r+0xc>
 8005730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005732:	f7ff fc75 	bl	8005020 <__retarget_lock_release_recursive>
 8005736:	e7d9      	b.n	80056ec <_fflush_r+0xc>
 8005738:	4b05      	ldr	r3, [pc, #20]	; (8005750 <_fflush_r+0x70>)
 800573a:	429c      	cmp	r4, r3
 800573c:	d101      	bne.n	8005742 <_fflush_r+0x62>
 800573e:	68ac      	ldr	r4, [r5, #8]
 8005740:	e7df      	b.n	8005702 <_fflush_r+0x22>
 8005742:	4b04      	ldr	r3, [pc, #16]	; (8005754 <_fflush_r+0x74>)
 8005744:	429c      	cmp	r4, r3
 8005746:	bf08      	it	eq
 8005748:	68ec      	ldreq	r4, [r5, #12]
 800574a:	e7da      	b.n	8005702 <_fflush_r+0x22>
 800574c:	08006014 	.word	0x08006014
 8005750:	08006034 	.word	0x08006034
 8005754:	08005ff4 	.word	0x08005ff4

08005758 <_lseek_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	4d07      	ldr	r5, [pc, #28]	; (8005778 <_lseek_r+0x20>)
 800575c:	4604      	mov	r4, r0
 800575e:	4608      	mov	r0, r1
 8005760:	4611      	mov	r1, r2
 8005762:	2200      	movs	r2, #0
 8005764:	602a      	str	r2, [r5, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	f7fb f9ac 	bl	8000ac4 <_lseek>
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	d102      	bne.n	8005776 <_lseek_r+0x1e>
 8005770:	682b      	ldr	r3, [r5, #0]
 8005772:	b103      	cbz	r3, 8005776 <_lseek_r+0x1e>
 8005774:	6023      	str	r3, [r4, #0]
 8005776:	bd38      	pop	{r3, r4, r5, pc}
 8005778:	20004b48 	.word	0x20004b48

0800577c <__swhatbuf_r>:
 800577c:	b570      	push	{r4, r5, r6, lr}
 800577e:	460e      	mov	r6, r1
 8005780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005784:	2900      	cmp	r1, #0
 8005786:	b096      	sub	sp, #88	; 0x58
 8005788:	4614      	mov	r4, r2
 800578a:	461d      	mov	r5, r3
 800578c:	da08      	bge.n	80057a0 <__swhatbuf_r+0x24>
 800578e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	602a      	str	r2, [r5, #0]
 8005796:	061a      	lsls	r2, r3, #24
 8005798:	d410      	bmi.n	80057bc <__swhatbuf_r+0x40>
 800579a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800579e:	e00e      	b.n	80057be <__swhatbuf_r+0x42>
 80057a0:	466a      	mov	r2, sp
 80057a2:	f000 fba9 	bl	8005ef8 <_fstat_r>
 80057a6:	2800      	cmp	r0, #0
 80057a8:	dbf1      	blt.n	800578e <__swhatbuf_r+0x12>
 80057aa:	9a01      	ldr	r2, [sp, #4]
 80057ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80057b4:	425a      	negs	r2, r3
 80057b6:	415a      	adcs	r2, r3
 80057b8:	602a      	str	r2, [r5, #0]
 80057ba:	e7ee      	b.n	800579a <__swhatbuf_r+0x1e>
 80057bc:	2340      	movs	r3, #64	; 0x40
 80057be:	2000      	movs	r0, #0
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	b016      	add	sp, #88	; 0x58
 80057c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080057c8 <__smakebuf_r>:
 80057c8:	898b      	ldrh	r3, [r1, #12]
 80057ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057cc:	079d      	lsls	r5, r3, #30
 80057ce:	4606      	mov	r6, r0
 80057d0:	460c      	mov	r4, r1
 80057d2:	d507      	bpl.n	80057e4 <__smakebuf_r+0x1c>
 80057d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	6123      	str	r3, [r4, #16]
 80057dc:	2301      	movs	r3, #1
 80057de:	6163      	str	r3, [r4, #20]
 80057e0:	b002      	add	sp, #8
 80057e2:	bd70      	pop	{r4, r5, r6, pc}
 80057e4:	ab01      	add	r3, sp, #4
 80057e6:	466a      	mov	r2, sp
 80057e8:	f7ff ffc8 	bl	800577c <__swhatbuf_r>
 80057ec:	9900      	ldr	r1, [sp, #0]
 80057ee:	4605      	mov	r5, r0
 80057f0:	4630      	mov	r0, r6
 80057f2:	f7ff fc4d 	bl	8005090 <_malloc_r>
 80057f6:	b948      	cbnz	r0, 800580c <__smakebuf_r+0x44>
 80057f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057fc:	059a      	lsls	r2, r3, #22
 80057fe:	d4ef      	bmi.n	80057e0 <__smakebuf_r+0x18>
 8005800:	f023 0303 	bic.w	r3, r3, #3
 8005804:	f043 0302 	orr.w	r3, r3, #2
 8005808:	81a3      	strh	r3, [r4, #12]
 800580a:	e7e3      	b.n	80057d4 <__smakebuf_r+0xc>
 800580c:	4b0d      	ldr	r3, [pc, #52]	; (8005844 <__smakebuf_r+0x7c>)
 800580e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	6020      	str	r0, [r4, #0]
 8005814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005818:	81a3      	strh	r3, [r4, #12]
 800581a:	9b00      	ldr	r3, [sp, #0]
 800581c:	6163      	str	r3, [r4, #20]
 800581e:	9b01      	ldr	r3, [sp, #4]
 8005820:	6120      	str	r0, [r4, #16]
 8005822:	b15b      	cbz	r3, 800583c <__smakebuf_r+0x74>
 8005824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005828:	4630      	mov	r0, r6
 800582a:	f000 fb77 	bl	8005f1c <_isatty_r>
 800582e:	b128      	cbz	r0, 800583c <__smakebuf_r+0x74>
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	f023 0303 	bic.w	r3, r3, #3
 8005836:	f043 0301 	orr.w	r3, r3, #1
 800583a:	81a3      	strh	r3, [r4, #12]
 800583c:	89a0      	ldrh	r0, [r4, #12]
 800583e:	4305      	orrs	r5, r0
 8005840:	81a5      	strh	r5, [r4, #12]
 8005842:	e7cd      	b.n	80057e0 <__smakebuf_r+0x18>
 8005844:	08004e31 	.word	0x08004e31

08005848 <__malloc_lock>:
 8005848:	4801      	ldr	r0, [pc, #4]	; (8005850 <__malloc_lock+0x8>)
 800584a:	f7ff bbe8 	b.w	800501e <__retarget_lock_acquire_recursive>
 800584e:	bf00      	nop
 8005850:	20004b3c 	.word	0x20004b3c

08005854 <__malloc_unlock>:
 8005854:	4801      	ldr	r0, [pc, #4]	; (800585c <__malloc_unlock+0x8>)
 8005856:	f7ff bbe3 	b.w	8005020 <__retarget_lock_release_recursive>
 800585a:	bf00      	nop
 800585c:	20004b3c 	.word	0x20004b3c

08005860 <_free_r>:
 8005860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005862:	2900      	cmp	r1, #0
 8005864:	d044      	beq.n	80058f0 <_free_r+0x90>
 8005866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800586a:	9001      	str	r0, [sp, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f1a1 0404 	sub.w	r4, r1, #4
 8005872:	bfb8      	it	lt
 8005874:	18e4      	addlt	r4, r4, r3
 8005876:	f7ff ffe7 	bl	8005848 <__malloc_lock>
 800587a:	4a1e      	ldr	r2, [pc, #120]	; (80058f4 <_free_r+0x94>)
 800587c:	9801      	ldr	r0, [sp, #4]
 800587e:	6813      	ldr	r3, [r2, #0]
 8005880:	b933      	cbnz	r3, 8005890 <_free_r+0x30>
 8005882:	6063      	str	r3, [r4, #4]
 8005884:	6014      	str	r4, [r2, #0]
 8005886:	b003      	add	sp, #12
 8005888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800588c:	f7ff bfe2 	b.w	8005854 <__malloc_unlock>
 8005890:	42a3      	cmp	r3, r4
 8005892:	d908      	bls.n	80058a6 <_free_r+0x46>
 8005894:	6825      	ldr	r5, [r4, #0]
 8005896:	1961      	adds	r1, r4, r5
 8005898:	428b      	cmp	r3, r1
 800589a:	bf01      	itttt	eq
 800589c:	6819      	ldreq	r1, [r3, #0]
 800589e:	685b      	ldreq	r3, [r3, #4]
 80058a0:	1949      	addeq	r1, r1, r5
 80058a2:	6021      	streq	r1, [r4, #0]
 80058a4:	e7ed      	b.n	8005882 <_free_r+0x22>
 80058a6:	461a      	mov	r2, r3
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	b10b      	cbz	r3, 80058b0 <_free_r+0x50>
 80058ac:	42a3      	cmp	r3, r4
 80058ae:	d9fa      	bls.n	80058a6 <_free_r+0x46>
 80058b0:	6811      	ldr	r1, [r2, #0]
 80058b2:	1855      	adds	r5, r2, r1
 80058b4:	42a5      	cmp	r5, r4
 80058b6:	d10b      	bne.n	80058d0 <_free_r+0x70>
 80058b8:	6824      	ldr	r4, [r4, #0]
 80058ba:	4421      	add	r1, r4
 80058bc:	1854      	adds	r4, r2, r1
 80058be:	42a3      	cmp	r3, r4
 80058c0:	6011      	str	r1, [r2, #0]
 80058c2:	d1e0      	bne.n	8005886 <_free_r+0x26>
 80058c4:	681c      	ldr	r4, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	6053      	str	r3, [r2, #4]
 80058ca:	4421      	add	r1, r4
 80058cc:	6011      	str	r1, [r2, #0]
 80058ce:	e7da      	b.n	8005886 <_free_r+0x26>
 80058d0:	d902      	bls.n	80058d8 <_free_r+0x78>
 80058d2:	230c      	movs	r3, #12
 80058d4:	6003      	str	r3, [r0, #0]
 80058d6:	e7d6      	b.n	8005886 <_free_r+0x26>
 80058d8:	6825      	ldr	r5, [r4, #0]
 80058da:	1961      	adds	r1, r4, r5
 80058dc:	428b      	cmp	r3, r1
 80058de:	bf04      	itt	eq
 80058e0:	6819      	ldreq	r1, [r3, #0]
 80058e2:	685b      	ldreq	r3, [r3, #4]
 80058e4:	6063      	str	r3, [r4, #4]
 80058e6:	bf04      	itt	eq
 80058e8:	1949      	addeq	r1, r1, r5
 80058ea:	6021      	streq	r1, [r4, #0]
 80058ec:	6054      	str	r4, [r2, #4]
 80058ee:	e7ca      	b.n	8005886 <_free_r+0x26>
 80058f0:	b003      	add	sp, #12
 80058f2:	bd30      	pop	{r4, r5, pc}
 80058f4:	20004b40 	.word	0x20004b40

080058f8 <__sfputc_r>:
 80058f8:	6893      	ldr	r3, [r2, #8]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	b410      	push	{r4}
 8005900:	6093      	str	r3, [r2, #8]
 8005902:	da08      	bge.n	8005916 <__sfputc_r+0x1e>
 8005904:	6994      	ldr	r4, [r2, #24]
 8005906:	42a3      	cmp	r3, r4
 8005908:	db01      	blt.n	800590e <__sfputc_r+0x16>
 800590a:	290a      	cmp	r1, #10
 800590c:	d103      	bne.n	8005916 <__sfputc_r+0x1e>
 800590e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005912:	f7ff bd7d 	b.w	8005410 <__swbuf_r>
 8005916:	6813      	ldr	r3, [r2, #0]
 8005918:	1c58      	adds	r0, r3, #1
 800591a:	6010      	str	r0, [r2, #0]
 800591c:	7019      	strb	r1, [r3, #0]
 800591e:	4608      	mov	r0, r1
 8005920:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005924:	4770      	bx	lr

08005926 <__sfputs_r>:
 8005926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005928:	4606      	mov	r6, r0
 800592a:	460f      	mov	r7, r1
 800592c:	4614      	mov	r4, r2
 800592e:	18d5      	adds	r5, r2, r3
 8005930:	42ac      	cmp	r4, r5
 8005932:	d101      	bne.n	8005938 <__sfputs_r+0x12>
 8005934:	2000      	movs	r0, #0
 8005936:	e007      	b.n	8005948 <__sfputs_r+0x22>
 8005938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800593c:	463a      	mov	r2, r7
 800593e:	4630      	mov	r0, r6
 8005940:	f7ff ffda 	bl	80058f8 <__sfputc_r>
 8005944:	1c43      	adds	r3, r0, #1
 8005946:	d1f3      	bne.n	8005930 <__sfputs_r+0xa>
 8005948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800594c <_vfiprintf_r>:
 800594c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005950:	460d      	mov	r5, r1
 8005952:	b09d      	sub	sp, #116	; 0x74
 8005954:	4614      	mov	r4, r2
 8005956:	4698      	mov	r8, r3
 8005958:	4606      	mov	r6, r0
 800595a:	b118      	cbz	r0, 8005964 <_vfiprintf_r+0x18>
 800595c:	6983      	ldr	r3, [r0, #24]
 800595e:	b90b      	cbnz	r3, 8005964 <_vfiprintf_r+0x18>
 8005960:	f7ff fa9a 	bl	8004e98 <__sinit>
 8005964:	4b89      	ldr	r3, [pc, #548]	; (8005b8c <_vfiprintf_r+0x240>)
 8005966:	429d      	cmp	r5, r3
 8005968:	d11b      	bne.n	80059a2 <_vfiprintf_r+0x56>
 800596a:	6875      	ldr	r5, [r6, #4]
 800596c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800596e:	07d9      	lsls	r1, r3, #31
 8005970:	d405      	bmi.n	800597e <_vfiprintf_r+0x32>
 8005972:	89ab      	ldrh	r3, [r5, #12]
 8005974:	059a      	lsls	r2, r3, #22
 8005976:	d402      	bmi.n	800597e <_vfiprintf_r+0x32>
 8005978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800597a:	f7ff fb50 	bl	800501e <__retarget_lock_acquire_recursive>
 800597e:	89ab      	ldrh	r3, [r5, #12]
 8005980:	071b      	lsls	r3, r3, #28
 8005982:	d501      	bpl.n	8005988 <_vfiprintf_r+0x3c>
 8005984:	692b      	ldr	r3, [r5, #16]
 8005986:	b9eb      	cbnz	r3, 80059c4 <_vfiprintf_r+0x78>
 8005988:	4629      	mov	r1, r5
 800598a:	4630      	mov	r0, r6
 800598c:	f7ff fda4 	bl	80054d8 <__swsetup_r>
 8005990:	b1c0      	cbz	r0, 80059c4 <_vfiprintf_r+0x78>
 8005992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005994:	07dc      	lsls	r4, r3, #31
 8005996:	d50e      	bpl.n	80059b6 <_vfiprintf_r+0x6a>
 8005998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800599c:	b01d      	add	sp, #116	; 0x74
 800599e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a2:	4b7b      	ldr	r3, [pc, #492]	; (8005b90 <_vfiprintf_r+0x244>)
 80059a4:	429d      	cmp	r5, r3
 80059a6:	d101      	bne.n	80059ac <_vfiprintf_r+0x60>
 80059a8:	68b5      	ldr	r5, [r6, #8]
 80059aa:	e7df      	b.n	800596c <_vfiprintf_r+0x20>
 80059ac:	4b79      	ldr	r3, [pc, #484]	; (8005b94 <_vfiprintf_r+0x248>)
 80059ae:	429d      	cmp	r5, r3
 80059b0:	bf08      	it	eq
 80059b2:	68f5      	ldreq	r5, [r6, #12]
 80059b4:	e7da      	b.n	800596c <_vfiprintf_r+0x20>
 80059b6:	89ab      	ldrh	r3, [r5, #12]
 80059b8:	0598      	lsls	r0, r3, #22
 80059ba:	d4ed      	bmi.n	8005998 <_vfiprintf_r+0x4c>
 80059bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059be:	f7ff fb2f 	bl	8005020 <__retarget_lock_release_recursive>
 80059c2:	e7e9      	b.n	8005998 <_vfiprintf_r+0x4c>
 80059c4:	2300      	movs	r3, #0
 80059c6:	9309      	str	r3, [sp, #36]	; 0x24
 80059c8:	2320      	movs	r3, #32
 80059ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80059d2:	2330      	movs	r3, #48	; 0x30
 80059d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b98 <_vfiprintf_r+0x24c>
 80059d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059dc:	f04f 0901 	mov.w	r9, #1
 80059e0:	4623      	mov	r3, r4
 80059e2:	469a      	mov	sl, r3
 80059e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059e8:	b10a      	cbz	r2, 80059ee <_vfiprintf_r+0xa2>
 80059ea:	2a25      	cmp	r2, #37	; 0x25
 80059ec:	d1f9      	bne.n	80059e2 <_vfiprintf_r+0x96>
 80059ee:	ebba 0b04 	subs.w	fp, sl, r4
 80059f2:	d00b      	beq.n	8005a0c <_vfiprintf_r+0xc0>
 80059f4:	465b      	mov	r3, fp
 80059f6:	4622      	mov	r2, r4
 80059f8:	4629      	mov	r1, r5
 80059fa:	4630      	mov	r0, r6
 80059fc:	f7ff ff93 	bl	8005926 <__sfputs_r>
 8005a00:	3001      	adds	r0, #1
 8005a02:	f000 80aa 	beq.w	8005b5a <_vfiprintf_r+0x20e>
 8005a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a08:	445a      	add	r2, fp
 8005a0a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 80a2 	beq.w	8005b5a <_vfiprintf_r+0x20e>
 8005a16:	2300      	movs	r3, #0
 8005a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a20:	f10a 0a01 	add.w	sl, sl, #1
 8005a24:	9304      	str	r3, [sp, #16]
 8005a26:	9307      	str	r3, [sp, #28]
 8005a28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a2c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a2e:	4654      	mov	r4, sl
 8005a30:	2205      	movs	r2, #5
 8005a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a36:	4858      	ldr	r0, [pc, #352]	; (8005b98 <_vfiprintf_r+0x24c>)
 8005a38:	f7fa fbd2 	bl	80001e0 <memchr>
 8005a3c:	9a04      	ldr	r2, [sp, #16]
 8005a3e:	b9d8      	cbnz	r0, 8005a78 <_vfiprintf_r+0x12c>
 8005a40:	06d1      	lsls	r1, r2, #27
 8005a42:	bf44      	itt	mi
 8005a44:	2320      	movmi	r3, #32
 8005a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a4a:	0713      	lsls	r3, r2, #28
 8005a4c:	bf44      	itt	mi
 8005a4e:	232b      	movmi	r3, #43	; 0x2b
 8005a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a54:	f89a 3000 	ldrb.w	r3, [sl]
 8005a58:	2b2a      	cmp	r3, #42	; 0x2a
 8005a5a:	d015      	beq.n	8005a88 <_vfiprintf_r+0x13c>
 8005a5c:	9a07      	ldr	r2, [sp, #28]
 8005a5e:	4654      	mov	r4, sl
 8005a60:	2000      	movs	r0, #0
 8005a62:	f04f 0c0a 	mov.w	ip, #10
 8005a66:	4621      	mov	r1, r4
 8005a68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a6c:	3b30      	subs	r3, #48	; 0x30
 8005a6e:	2b09      	cmp	r3, #9
 8005a70:	d94e      	bls.n	8005b10 <_vfiprintf_r+0x1c4>
 8005a72:	b1b0      	cbz	r0, 8005aa2 <_vfiprintf_r+0x156>
 8005a74:	9207      	str	r2, [sp, #28]
 8005a76:	e014      	b.n	8005aa2 <_vfiprintf_r+0x156>
 8005a78:	eba0 0308 	sub.w	r3, r0, r8
 8005a7c:	fa09 f303 	lsl.w	r3, r9, r3
 8005a80:	4313      	orrs	r3, r2
 8005a82:	9304      	str	r3, [sp, #16]
 8005a84:	46a2      	mov	sl, r4
 8005a86:	e7d2      	b.n	8005a2e <_vfiprintf_r+0xe2>
 8005a88:	9b03      	ldr	r3, [sp, #12]
 8005a8a:	1d19      	adds	r1, r3, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	9103      	str	r1, [sp, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bfbb      	ittet	lt
 8005a94:	425b      	neglt	r3, r3
 8005a96:	f042 0202 	orrlt.w	r2, r2, #2
 8005a9a:	9307      	strge	r3, [sp, #28]
 8005a9c:	9307      	strlt	r3, [sp, #28]
 8005a9e:	bfb8      	it	lt
 8005aa0:	9204      	strlt	r2, [sp, #16]
 8005aa2:	7823      	ldrb	r3, [r4, #0]
 8005aa4:	2b2e      	cmp	r3, #46	; 0x2e
 8005aa6:	d10c      	bne.n	8005ac2 <_vfiprintf_r+0x176>
 8005aa8:	7863      	ldrb	r3, [r4, #1]
 8005aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8005aac:	d135      	bne.n	8005b1a <_vfiprintf_r+0x1ce>
 8005aae:	9b03      	ldr	r3, [sp, #12]
 8005ab0:	1d1a      	adds	r2, r3, #4
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	9203      	str	r2, [sp, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	bfb8      	it	lt
 8005aba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005abe:	3402      	adds	r4, #2
 8005ac0:	9305      	str	r3, [sp, #20]
 8005ac2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005ba8 <_vfiprintf_r+0x25c>
 8005ac6:	7821      	ldrb	r1, [r4, #0]
 8005ac8:	2203      	movs	r2, #3
 8005aca:	4650      	mov	r0, sl
 8005acc:	f7fa fb88 	bl	80001e0 <memchr>
 8005ad0:	b140      	cbz	r0, 8005ae4 <_vfiprintf_r+0x198>
 8005ad2:	2340      	movs	r3, #64	; 0x40
 8005ad4:	eba0 000a 	sub.w	r0, r0, sl
 8005ad8:	fa03 f000 	lsl.w	r0, r3, r0
 8005adc:	9b04      	ldr	r3, [sp, #16]
 8005ade:	4303      	orrs	r3, r0
 8005ae0:	3401      	adds	r4, #1
 8005ae2:	9304      	str	r3, [sp, #16]
 8005ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ae8:	482c      	ldr	r0, [pc, #176]	; (8005b9c <_vfiprintf_r+0x250>)
 8005aea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005aee:	2206      	movs	r2, #6
 8005af0:	f7fa fb76 	bl	80001e0 <memchr>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d03f      	beq.n	8005b78 <_vfiprintf_r+0x22c>
 8005af8:	4b29      	ldr	r3, [pc, #164]	; (8005ba0 <_vfiprintf_r+0x254>)
 8005afa:	bb1b      	cbnz	r3, 8005b44 <_vfiprintf_r+0x1f8>
 8005afc:	9b03      	ldr	r3, [sp, #12]
 8005afe:	3307      	adds	r3, #7
 8005b00:	f023 0307 	bic.w	r3, r3, #7
 8005b04:	3308      	adds	r3, #8
 8005b06:	9303      	str	r3, [sp, #12]
 8005b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b0a:	443b      	add	r3, r7
 8005b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b0e:	e767      	b.n	80059e0 <_vfiprintf_r+0x94>
 8005b10:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b14:	460c      	mov	r4, r1
 8005b16:	2001      	movs	r0, #1
 8005b18:	e7a5      	b.n	8005a66 <_vfiprintf_r+0x11a>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	3401      	adds	r4, #1
 8005b1e:	9305      	str	r3, [sp, #20]
 8005b20:	4619      	mov	r1, r3
 8005b22:	f04f 0c0a 	mov.w	ip, #10
 8005b26:	4620      	mov	r0, r4
 8005b28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b2c:	3a30      	subs	r2, #48	; 0x30
 8005b2e:	2a09      	cmp	r2, #9
 8005b30:	d903      	bls.n	8005b3a <_vfiprintf_r+0x1ee>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0c5      	beq.n	8005ac2 <_vfiprintf_r+0x176>
 8005b36:	9105      	str	r1, [sp, #20]
 8005b38:	e7c3      	b.n	8005ac2 <_vfiprintf_r+0x176>
 8005b3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b3e:	4604      	mov	r4, r0
 8005b40:	2301      	movs	r3, #1
 8005b42:	e7f0      	b.n	8005b26 <_vfiprintf_r+0x1da>
 8005b44:	ab03      	add	r3, sp, #12
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	462a      	mov	r2, r5
 8005b4a:	4b16      	ldr	r3, [pc, #88]	; (8005ba4 <_vfiprintf_r+0x258>)
 8005b4c:	a904      	add	r1, sp, #16
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f3af 8000 	nop.w
 8005b54:	4607      	mov	r7, r0
 8005b56:	1c78      	adds	r0, r7, #1
 8005b58:	d1d6      	bne.n	8005b08 <_vfiprintf_r+0x1bc>
 8005b5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b5c:	07d9      	lsls	r1, r3, #31
 8005b5e:	d405      	bmi.n	8005b6c <_vfiprintf_r+0x220>
 8005b60:	89ab      	ldrh	r3, [r5, #12]
 8005b62:	059a      	lsls	r2, r3, #22
 8005b64:	d402      	bmi.n	8005b6c <_vfiprintf_r+0x220>
 8005b66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b68:	f7ff fa5a 	bl	8005020 <__retarget_lock_release_recursive>
 8005b6c:	89ab      	ldrh	r3, [r5, #12]
 8005b6e:	065b      	lsls	r3, r3, #25
 8005b70:	f53f af12 	bmi.w	8005998 <_vfiprintf_r+0x4c>
 8005b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b76:	e711      	b.n	800599c <_vfiprintf_r+0x50>
 8005b78:	ab03      	add	r3, sp, #12
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	462a      	mov	r2, r5
 8005b7e:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <_vfiprintf_r+0x258>)
 8005b80:	a904      	add	r1, sp, #16
 8005b82:	4630      	mov	r0, r6
 8005b84:	f000 f880 	bl	8005c88 <_printf_i>
 8005b88:	e7e4      	b.n	8005b54 <_vfiprintf_r+0x208>
 8005b8a:	bf00      	nop
 8005b8c:	08006014 	.word	0x08006014
 8005b90:	08006034 	.word	0x08006034
 8005b94:	08005ff4 	.word	0x08005ff4
 8005b98:	08006058 	.word	0x08006058
 8005b9c:	08006062 	.word	0x08006062
 8005ba0:	00000000 	.word	0x00000000
 8005ba4:	08005927 	.word	0x08005927
 8005ba8:	0800605e 	.word	0x0800605e

08005bac <_printf_common>:
 8005bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb0:	4616      	mov	r6, r2
 8005bb2:	4699      	mov	r9, r3
 8005bb4:	688a      	ldr	r2, [r1, #8]
 8005bb6:	690b      	ldr	r3, [r1, #16]
 8005bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	bfb8      	it	lt
 8005bc0:	4613      	movlt	r3, r2
 8005bc2:	6033      	str	r3, [r6, #0]
 8005bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bc8:	4607      	mov	r7, r0
 8005bca:	460c      	mov	r4, r1
 8005bcc:	b10a      	cbz	r2, 8005bd2 <_printf_common+0x26>
 8005bce:	3301      	adds	r3, #1
 8005bd0:	6033      	str	r3, [r6, #0]
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	0699      	lsls	r1, r3, #26
 8005bd6:	bf42      	ittt	mi
 8005bd8:	6833      	ldrmi	r3, [r6, #0]
 8005bda:	3302      	addmi	r3, #2
 8005bdc:	6033      	strmi	r3, [r6, #0]
 8005bde:	6825      	ldr	r5, [r4, #0]
 8005be0:	f015 0506 	ands.w	r5, r5, #6
 8005be4:	d106      	bne.n	8005bf4 <_printf_common+0x48>
 8005be6:	f104 0a19 	add.w	sl, r4, #25
 8005bea:	68e3      	ldr	r3, [r4, #12]
 8005bec:	6832      	ldr	r2, [r6, #0]
 8005bee:	1a9b      	subs	r3, r3, r2
 8005bf0:	42ab      	cmp	r3, r5
 8005bf2:	dc26      	bgt.n	8005c42 <_printf_common+0x96>
 8005bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bf8:	1e13      	subs	r3, r2, #0
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	bf18      	it	ne
 8005bfe:	2301      	movne	r3, #1
 8005c00:	0692      	lsls	r2, r2, #26
 8005c02:	d42b      	bmi.n	8005c5c <_printf_common+0xb0>
 8005c04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c08:	4649      	mov	r1, r9
 8005c0a:	4638      	mov	r0, r7
 8005c0c:	47c0      	blx	r8
 8005c0e:	3001      	adds	r0, #1
 8005c10:	d01e      	beq.n	8005c50 <_printf_common+0xa4>
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	68e5      	ldr	r5, [r4, #12]
 8005c16:	6832      	ldr	r2, [r6, #0]
 8005c18:	f003 0306 	and.w	r3, r3, #6
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	bf08      	it	eq
 8005c20:	1aad      	subeq	r5, r5, r2
 8005c22:	68a3      	ldr	r3, [r4, #8]
 8005c24:	6922      	ldr	r2, [r4, #16]
 8005c26:	bf0c      	ite	eq
 8005c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c2c:	2500      	movne	r5, #0
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	bfc4      	itt	gt
 8005c32:	1a9b      	subgt	r3, r3, r2
 8005c34:	18ed      	addgt	r5, r5, r3
 8005c36:	2600      	movs	r6, #0
 8005c38:	341a      	adds	r4, #26
 8005c3a:	42b5      	cmp	r5, r6
 8005c3c:	d11a      	bne.n	8005c74 <_printf_common+0xc8>
 8005c3e:	2000      	movs	r0, #0
 8005c40:	e008      	b.n	8005c54 <_printf_common+0xa8>
 8005c42:	2301      	movs	r3, #1
 8005c44:	4652      	mov	r2, sl
 8005c46:	4649      	mov	r1, r9
 8005c48:	4638      	mov	r0, r7
 8005c4a:	47c0      	blx	r8
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d103      	bne.n	8005c58 <_printf_common+0xac>
 8005c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c58:	3501      	adds	r5, #1
 8005c5a:	e7c6      	b.n	8005bea <_printf_common+0x3e>
 8005c5c:	18e1      	adds	r1, r4, r3
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	2030      	movs	r0, #48	; 0x30
 8005c62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c66:	4422      	add	r2, r4
 8005c68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c70:	3302      	adds	r3, #2
 8005c72:	e7c7      	b.n	8005c04 <_printf_common+0x58>
 8005c74:	2301      	movs	r3, #1
 8005c76:	4622      	mov	r2, r4
 8005c78:	4649      	mov	r1, r9
 8005c7a:	4638      	mov	r0, r7
 8005c7c:	47c0      	blx	r8
 8005c7e:	3001      	adds	r0, #1
 8005c80:	d0e6      	beq.n	8005c50 <_printf_common+0xa4>
 8005c82:	3601      	adds	r6, #1
 8005c84:	e7d9      	b.n	8005c3a <_printf_common+0x8e>
	...

08005c88 <_printf_i>:
 8005c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c8c:	7e0f      	ldrb	r7, [r1, #24]
 8005c8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c90:	2f78      	cmp	r7, #120	; 0x78
 8005c92:	4691      	mov	r9, r2
 8005c94:	4680      	mov	r8, r0
 8005c96:	460c      	mov	r4, r1
 8005c98:	469a      	mov	sl, r3
 8005c9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c9e:	d807      	bhi.n	8005cb0 <_printf_i+0x28>
 8005ca0:	2f62      	cmp	r7, #98	; 0x62
 8005ca2:	d80a      	bhi.n	8005cba <_printf_i+0x32>
 8005ca4:	2f00      	cmp	r7, #0
 8005ca6:	f000 80d8 	beq.w	8005e5a <_printf_i+0x1d2>
 8005caa:	2f58      	cmp	r7, #88	; 0x58
 8005cac:	f000 80a3 	beq.w	8005df6 <_printf_i+0x16e>
 8005cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cb8:	e03a      	b.n	8005d30 <_printf_i+0xa8>
 8005cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cbe:	2b15      	cmp	r3, #21
 8005cc0:	d8f6      	bhi.n	8005cb0 <_printf_i+0x28>
 8005cc2:	a101      	add	r1, pc, #4	; (adr r1, 8005cc8 <_printf_i+0x40>)
 8005cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cc8:	08005d21 	.word	0x08005d21
 8005ccc:	08005d35 	.word	0x08005d35
 8005cd0:	08005cb1 	.word	0x08005cb1
 8005cd4:	08005cb1 	.word	0x08005cb1
 8005cd8:	08005cb1 	.word	0x08005cb1
 8005cdc:	08005cb1 	.word	0x08005cb1
 8005ce0:	08005d35 	.word	0x08005d35
 8005ce4:	08005cb1 	.word	0x08005cb1
 8005ce8:	08005cb1 	.word	0x08005cb1
 8005cec:	08005cb1 	.word	0x08005cb1
 8005cf0:	08005cb1 	.word	0x08005cb1
 8005cf4:	08005e41 	.word	0x08005e41
 8005cf8:	08005d65 	.word	0x08005d65
 8005cfc:	08005e23 	.word	0x08005e23
 8005d00:	08005cb1 	.word	0x08005cb1
 8005d04:	08005cb1 	.word	0x08005cb1
 8005d08:	08005e63 	.word	0x08005e63
 8005d0c:	08005cb1 	.word	0x08005cb1
 8005d10:	08005d65 	.word	0x08005d65
 8005d14:	08005cb1 	.word	0x08005cb1
 8005d18:	08005cb1 	.word	0x08005cb1
 8005d1c:	08005e2b 	.word	0x08005e2b
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	1d1a      	adds	r2, r3, #4
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	602a      	str	r2, [r5, #0]
 8005d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d30:	2301      	movs	r3, #1
 8005d32:	e0a3      	b.n	8005e7c <_printf_i+0x1f4>
 8005d34:	6820      	ldr	r0, [r4, #0]
 8005d36:	6829      	ldr	r1, [r5, #0]
 8005d38:	0606      	lsls	r6, r0, #24
 8005d3a:	f101 0304 	add.w	r3, r1, #4
 8005d3e:	d50a      	bpl.n	8005d56 <_printf_i+0xce>
 8005d40:	680e      	ldr	r6, [r1, #0]
 8005d42:	602b      	str	r3, [r5, #0]
 8005d44:	2e00      	cmp	r6, #0
 8005d46:	da03      	bge.n	8005d50 <_printf_i+0xc8>
 8005d48:	232d      	movs	r3, #45	; 0x2d
 8005d4a:	4276      	negs	r6, r6
 8005d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d50:	485e      	ldr	r0, [pc, #376]	; (8005ecc <_printf_i+0x244>)
 8005d52:	230a      	movs	r3, #10
 8005d54:	e019      	b.n	8005d8a <_printf_i+0x102>
 8005d56:	680e      	ldr	r6, [r1, #0]
 8005d58:	602b      	str	r3, [r5, #0]
 8005d5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d5e:	bf18      	it	ne
 8005d60:	b236      	sxthne	r6, r6
 8005d62:	e7ef      	b.n	8005d44 <_printf_i+0xbc>
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	6820      	ldr	r0, [r4, #0]
 8005d68:	1d19      	adds	r1, r3, #4
 8005d6a:	6029      	str	r1, [r5, #0]
 8005d6c:	0601      	lsls	r1, r0, #24
 8005d6e:	d501      	bpl.n	8005d74 <_printf_i+0xec>
 8005d70:	681e      	ldr	r6, [r3, #0]
 8005d72:	e002      	b.n	8005d7a <_printf_i+0xf2>
 8005d74:	0646      	lsls	r6, r0, #25
 8005d76:	d5fb      	bpl.n	8005d70 <_printf_i+0xe8>
 8005d78:	881e      	ldrh	r6, [r3, #0]
 8005d7a:	4854      	ldr	r0, [pc, #336]	; (8005ecc <_printf_i+0x244>)
 8005d7c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d7e:	bf0c      	ite	eq
 8005d80:	2308      	moveq	r3, #8
 8005d82:	230a      	movne	r3, #10
 8005d84:	2100      	movs	r1, #0
 8005d86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d8a:	6865      	ldr	r5, [r4, #4]
 8005d8c:	60a5      	str	r5, [r4, #8]
 8005d8e:	2d00      	cmp	r5, #0
 8005d90:	bfa2      	ittt	ge
 8005d92:	6821      	ldrge	r1, [r4, #0]
 8005d94:	f021 0104 	bicge.w	r1, r1, #4
 8005d98:	6021      	strge	r1, [r4, #0]
 8005d9a:	b90e      	cbnz	r6, 8005da0 <_printf_i+0x118>
 8005d9c:	2d00      	cmp	r5, #0
 8005d9e:	d04d      	beq.n	8005e3c <_printf_i+0x1b4>
 8005da0:	4615      	mov	r5, r2
 8005da2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005da6:	fb03 6711 	mls	r7, r3, r1, r6
 8005daa:	5dc7      	ldrb	r7, [r0, r7]
 8005dac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005db0:	4637      	mov	r7, r6
 8005db2:	42bb      	cmp	r3, r7
 8005db4:	460e      	mov	r6, r1
 8005db6:	d9f4      	bls.n	8005da2 <_printf_i+0x11a>
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d10b      	bne.n	8005dd4 <_printf_i+0x14c>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	07de      	lsls	r6, r3, #31
 8005dc0:	d508      	bpl.n	8005dd4 <_printf_i+0x14c>
 8005dc2:	6923      	ldr	r3, [r4, #16]
 8005dc4:	6861      	ldr	r1, [r4, #4]
 8005dc6:	4299      	cmp	r1, r3
 8005dc8:	bfde      	ittt	le
 8005dca:	2330      	movle	r3, #48	; 0x30
 8005dcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dd0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005dd4:	1b52      	subs	r2, r2, r5
 8005dd6:	6122      	str	r2, [r4, #16]
 8005dd8:	f8cd a000 	str.w	sl, [sp]
 8005ddc:	464b      	mov	r3, r9
 8005dde:	aa03      	add	r2, sp, #12
 8005de0:	4621      	mov	r1, r4
 8005de2:	4640      	mov	r0, r8
 8005de4:	f7ff fee2 	bl	8005bac <_printf_common>
 8005de8:	3001      	adds	r0, #1
 8005dea:	d14c      	bne.n	8005e86 <_printf_i+0x1fe>
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005df0:	b004      	add	sp, #16
 8005df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df6:	4835      	ldr	r0, [pc, #212]	; (8005ecc <_printf_i+0x244>)
 8005df8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005dfc:	6829      	ldr	r1, [r5, #0]
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e04:	6029      	str	r1, [r5, #0]
 8005e06:	061d      	lsls	r5, r3, #24
 8005e08:	d514      	bpl.n	8005e34 <_printf_i+0x1ac>
 8005e0a:	07df      	lsls	r7, r3, #31
 8005e0c:	bf44      	itt	mi
 8005e0e:	f043 0320 	orrmi.w	r3, r3, #32
 8005e12:	6023      	strmi	r3, [r4, #0]
 8005e14:	b91e      	cbnz	r6, 8005e1e <_printf_i+0x196>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	f023 0320 	bic.w	r3, r3, #32
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	2310      	movs	r3, #16
 8005e20:	e7b0      	b.n	8005d84 <_printf_i+0xfc>
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	f043 0320 	orr.w	r3, r3, #32
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	2378      	movs	r3, #120	; 0x78
 8005e2c:	4828      	ldr	r0, [pc, #160]	; (8005ed0 <_printf_i+0x248>)
 8005e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e32:	e7e3      	b.n	8005dfc <_printf_i+0x174>
 8005e34:	0659      	lsls	r1, r3, #25
 8005e36:	bf48      	it	mi
 8005e38:	b2b6      	uxthmi	r6, r6
 8005e3a:	e7e6      	b.n	8005e0a <_printf_i+0x182>
 8005e3c:	4615      	mov	r5, r2
 8005e3e:	e7bb      	b.n	8005db8 <_printf_i+0x130>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	6826      	ldr	r6, [r4, #0]
 8005e44:	6961      	ldr	r1, [r4, #20]
 8005e46:	1d18      	adds	r0, r3, #4
 8005e48:	6028      	str	r0, [r5, #0]
 8005e4a:	0635      	lsls	r5, r6, #24
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	d501      	bpl.n	8005e54 <_printf_i+0x1cc>
 8005e50:	6019      	str	r1, [r3, #0]
 8005e52:	e002      	b.n	8005e5a <_printf_i+0x1d2>
 8005e54:	0670      	lsls	r0, r6, #25
 8005e56:	d5fb      	bpl.n	8005e50 <_printf_i+0x1c8>
 8005e58:	8019      	strh	r1, [r3, #0]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	6123      	str	r3, [r4, #16]
 8005e5e:	4615      	mov	r5, r2
 8005e60:	e7ba      	b.n	8005dd8 <_printf_i+0x150>
 8005e62:	682b      	ldr	r3, [r5, #0]
 8005e64:	1d1a      	adds	r2, r3, #4
 8005e66:	602a      	str	r2, [r5, #0]
 8005e68:	681d      	ldr	r5, [r3, #0]
 8005e6a:	6862      	ldr	r2, [r4, #4]
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f7fa f9b6 	bl	80001e0 <memchr>
 8005e74:	b108      	cbz	r0, 8005e7a <_printf_i+0x1f2>
 8005e76:	1b40      	subs	r0, r0, r5
 8005e78:	6060      	str	r0, [r4, #4]
 8005e7a:	6863      	ldr	r3, [r4, #4]
 8005e7c:	6123      	str	r3, [r4, #16]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e84:	e7a8      	b.n	8005dd8 <_printf_i+0x150>
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	462a      	mov	r2, r5
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	47d0      	blx	sl
 8005e90:	3001      	adds	r0, #1
 8005e92:	d0ab      	beq.n	8005dec <_printf_i+0x164>
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	079b      	lsls	r3, r3, #30
 8005e98:	d413      	bmi.n	8005ec2 <_printf_i+0x23a>
 8005e9a:	68e0      	ldr	r0, [r4, #12]
 8005e9c:	9b03      	ldr	r3, [sp, #12]
 8005e9e:	4298      	cmp	r0, r3
 8005ea0:	bfb8      	it	lt
 8005ea2:	4618      	movlt	r0, r3
 8005ea4:	e7a4      	b.n	8005df0 <_printf_i+0x168>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	4632      	mov	r2, r6
 8005eaa:	4649      	mov	r1, r9
 8005eac:	4640      	mov	r0, r8
 8005eae:	47d0      	blx	sl
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d09b      	beq.n	8005dec <_printf_i+0x164>
 8005eb4:	3501      	adds	r5, #1
 8005eb6:	68e3      	ldr	r3, [r4, #12]
 8005eb8:	9903      	ldr	r1, [sp, #12]
 8005eba:	1a5b      	subs	r3, r3, r1
 8005ebc:	42ab      	cmp	r3, r5
 8005ebe:	dcf2      	bgt.n	8005ea6 <_printf_i+0x21e>
 8005ec0:	e7eb      	b.n	8005e9a <_printf_i+0x212>
 8005ec2:	2500      	movs	r5, #0
 8005ec4:	f104 0619 	add.w	r6, r4, #25
 8005ec8:	e7f5      	b.n	8005eb6 <_printf_i+0x22e>
 8005eca:	bf00      	nop
 8005ecc:	08006069 	.word	0x08006069
 8005ed0:	0800607a 	.word	0x0800607a

08005ed4 <_read_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4d07      	ldr	r5, [pc, #28]	; (8005ef4 <_read_r+0x20>)
 8005ed8:	4604      	mov	r4, r0
 8005eda:	4608      	mov	r0, r1
 8005edc:	4611      	mov	r1, r2
 8005ede:	2200      	movs	r2, #0
 8005ee0:	602a      	str	r2, [r5, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f7fa fd8e 	bl	8000a04 <_read>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	d102      	bne.n	8005ef2 <_read_r+0x1e>
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	b103      	cbz	r3, 8005ef2 <_read_r+0x1e>
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	bd38      	pop	{r3, r4, r5, pc}
 8005ef4:	20004b48 	.word	0x20004b48

08005ef8 <_fstat_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4d07      	ldr	r5, [pc, #28]	; (8005f18 <_fstat_r+0x20>)
 8005efc:	2300      	movs	r3, #0
 8005efe:	4604      	mov	r4, r0
 8005f00:	4608      	mov	r0, r1
 8005f02:	4611      	mov	r1, r2
 8005f04:	602b      	str	r3, [r5, #0]
 8005f06:	f7fa fdc2 	bl	8000a8e <_fstat>
 8005f0a:	1c43      	adds	r3, r0, #1
 8005f0c:	d102      	bne.n	8005f14 <_fstat_r+0x1c>
 8005f0e:	682b      	ldr	r3, [r5, #0]
 8005f10:	b103      	cbz	r3, 8005f14 <_fstat_r+0x1c>
 8005f12:	6023      	str	r3, [r4, #0]
 8005f14:	bd38      	pop	{r3, r4, r5, pc}
 8005f16:	bf00      	nop
 8005f18:	20004b48 	.word	0x20004b48

08005f1c <_isatty_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d06      	ldr	r5, [pc, #24]	; (8005f38 <_isatty_r+0x1c>)
 8005f20:	2300      	movs	r3, #0
 8005f22:	4604      	mov	r4, r0
 8005f24:	4608      	mov	r0, r1
 8005f26:	602b      	str	r3, [r5, #0]
 8005f28:	f7fa fdc1 	bl	8000aae <_isatty>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_isatty_r+0x1a>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_isatty_r+0x1a>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	20004b48 	.word	0x20004b48

08005f3c <_init>:
 8005f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3e:	bf00      	nop
 8005f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f42:	bc08      	pop	{r3}
 8005f44:	469e      	mov	lr, r3
 8005f46:	4770      	bx	lr

08005f48 <_fini>:
 8005f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4a:	bf00      	nop
 8005f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4e:	bc08      	pop	{r3}
 8005f50:	469e      	mov	lr, r3
 8005f52:	4770      	bx	lr
