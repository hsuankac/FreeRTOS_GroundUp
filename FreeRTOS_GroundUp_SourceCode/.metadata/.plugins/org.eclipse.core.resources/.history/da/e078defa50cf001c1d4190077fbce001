
27_uartRX_interrupt_receiving_data_packets.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005ca4  08005ca4  00015ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d34  08005d34  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005d34  08005d34  00015d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d3c  08005d3c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a60  20000074  08005db8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ad4  08005db8  00024ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179f0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000324c  00000000  00000000  00037a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0003ace0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  0003c0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000041f1  00000000  00000000  0003d3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017dc4  00000000  00000000  000415a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009875b  00000000  00000000  0005936d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1ac8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057fc  00000000  00000000  000f1b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c8c 	.word	0x08005c8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005c8c 	.word	0x08005c8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000592:	2b00      	cmp	r3, #0
 8000594:	db0b      	blt.n	80005ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	f003 021f 	and.w	r2, r3, #31
 800059c:	4907      	ldr	r1, [pc, #28]	; (80005bc <__NVIC_EnableIRQ+0x38>)
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	095b      	lsrs	r3, r3, #5
 80005a4:	2001      	movs	r0, #1
 80005a6:	fa00 f202 	lsl.w	r2, r0, r2
 80005aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000e100 	.word	0xe000e100

080005c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db0a      	blt.n	80005ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	490c      	ldr	r1, [pc, #48]	; (800060c <__NVIC_SetPriority+0x4c>)
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	0112      	lsls	r2, r2, #4
 80005e0:	b2d2      	uxtb	r2, r2
 80005e2:	440b      	add	r3, r1
 80005e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005e8:	e00a      	b.n	8000600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4908      	ldr	r1, [pc, #32]	; (8000610 <__NVIC_SetPriority+0x50>)
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	f003 030f 	and.w	r3, r3, #15
 80005f6:	3b04      	subs	r3, #4
 80005f8:	0112      	lsls	r2, r2, #4
 80005fa:	b2d2      	uxtb	r2, r2
 80005fc:	440b      	add	r3, r1
 80005fe:	761a      	strb	r2, [r3, #24]
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000e100 	.word	0xe000e100
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <main>:




int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af02      	add	r7, sp, #8

  HAL_Init();
 800061a:	f000 fb03 	bl	8000c24 <HAL_Init>


  SystemClock_Config();
 800061e:	f000 f8e9 	bl	80007f4 <SystemClock_Config>
  MX_GPIO_Init();
 8000622:	f000 f945 	bl	80008b0 <MX_GPIO_Init>
  rxDone=xSemaphoreCreateBinary();
 8000626:	2203      	movs	r2, #3
 8000628:	2100      	movs	r1, #0
 800062a:	2001      	movs	r0, #1
 800062c:	f002 f946 	bl	80028bc <xQueueGenericCreate>
 8000630:	4603      	mov	r3, r0
 8000632:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <main+0x50>)
 8000634:	6013      	str	r3, [r2, #0]
  xTaskCreate(HandlerTask, "UART print task", STACK_SIZE, NULL, tskIDLE_PRIORITY+3, NULL);
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	b29a      	uxth	r2, r3
 800063a:	2300      	movs	r3, #0
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2303      	movs	r3, #3
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	4908      	ldr	r1, [pc, #32]	; (8000668 <main+0x54>)
 8000646:	4809      	ldr	r0, [pc, #36]	; (800066c <main+0x58>)
 8000648:	f002 ff8b 	bl	8003562 <xTaskCreate>
  uart2_BytesReceived=xQueueCreate(10,sizeof(char));
 800064c:	2200      	movs	r2, #0
 800064e:	2101      	movs	r1, #1
 8000650:	200a      	movs	r0, #10
 8000652:	f002 f933 	bl	80028bc <xQueueGenericCreate>
 8000656:	4603      	mov	r3, r0
 8000658:	4a05      	ldr	r2, [pc, #20]	; (8000670 <main+0x5c>)
 800065a:	6013      	str	r3, [r2, #0]
  vTaskStartScheduler();
 800065c:	f003 f8c6 	bl	80037ec <vTaskStartScheduler>
  while (1)
 8000660:	e7fe      	b.n	8000660 <main+0x4c>
 8000662:	bf00      	nop
 8000664:	200000e8 	.word	0x200000e8
 8000668:	08005ca4 	.word	0x08005ca4
 800066c:	08000675 	.word	0x08000675
 8000670:	200000e4 	.word	0x200000e4

08000674 <HandlerTask>:

uint8_t rxData[EXPECTED_LENGTH];
char rxCode[50]={0};

void HandlerTask(void *pvParameters)
	{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

	for (int i=0;i<sizeof(rxData);i++)
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	e007      	b.n	8000692 <HandlerTask+0x1e>
		{
		rxData[i]=0;
 8000682:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <HandlerTask+0x64>)
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<sizeof(rxData);i++)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3301      	adds	r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	2b04      	cmp	r3, #4
 8000696:	d9f4      	bls.n	8000682 <HandlerTask+0xe>
		}

	const TickType_t timeout = pdMS_TO_TICKS(5000);
 8000698:	f241 3388 	movw	r3, #5000	; 0x1388
 800069c:	60bb      	str	r3, [r7, #8]

	USART2_UART_RX_Init();
 800069e:	f000 fa6d 	bl	8000b7c <USART2_UART_RX_Init>


	while(1)
		{
		start_rx_interrupt(rxData,EXPECTED_LENGTH);
 80006a2:	2105      	movs	r1, #5
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <HandlerTask+0x64>)
 80006a6:	f000 f823 	bl	80006f0 <start_rx_interrupt>
		if(xSemaphoreTake(rxDone,timeout)==pdPASS)
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HandlerTask+0x68>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	68b9      	ldr	r1, [r7, #8]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fc67 	bl	8002f84 <xQueueSemaphoreTake>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d1f2      	bne.n	80006a2 <HandlerTask+0x2e>
			{
				if(EXPECTED_LENGTH==rxItr)
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <HandlerTask+0x6c>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d104      	bne.n	80006ce <HandlerTask+0x5a>
					{
					sprintf(rxCode,"received");
 80006c4:	4907      	ldr	r1, [pc, #28]	; (80006e4 <HandlerTask+0x70>)
 80006c6:	4808      	ldr	r0, [pc, #32]	; (80006e8 <HandlerTask+0x74>)
 80006c8:	f004 fe80 	bl	80053cc <siprintf>
 80006cc:	e7e9      	b.n	80006a2 <HandlerTask+0x2e>
					}
				else
					{
					sprintf(rxCode,"Length mismatch");
 80006ce:	4907      	ldr	r1, [pc, #28]	; (80006ec <HandlerTask+0x78>)
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <HandlerTask+0x74>)
 80006d2:	f004 fe7b 	bl	80053cc <siprintf>
		start_rx_interrupt(rxData,EXPECTED_LENGTH);
 80006d6:	e7e4      	b.n	80006a2 <HandlerTask+0x2e>
 80006d8:	200000ec 	.word	0x200000ec
 80006dc:	200000e8 	.word	0x200000e8
 80006e0:	200000e0 	.word	0x200000e0
 80006e4:	08005cb4 	.word	0x08005cb4
 80006e8:	200000f4 	.word	0x200000f4
 80006ec:	08005cc0 	.word	0x08005cc0

080006f0 <start_rx_interrupt>:




uint32_t start_rx_interrupt(uint8_t * Buffer, uint_fast16_t len)
	{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]

	if(!rxInProgress&& (NULL!=Buffer)){
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <start_rx_interrupt+0x5c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d11e      	bne.n	8000740 <start_rx_interrupt+0x50>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d01b      	beq.n	8000740 <start_rx_interrupt+0x50>
	rxInProgress=1;
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <start_rx_interrupt+0x5c>)
 800070a:	2201      	movs	r2, #1
 800070c:	601a      	str	r2, [r3, #0]
	rxLen=len;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	b29a      	uxth	r2, r3
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <start_rx_interrupt+0x60>)
 8000714:	801a      	strh	r2, [r3, #0]
	rxBuff=Buffer;
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <start_rx_interrupt+0x64>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6013      	str	r3, [r2, #0]
	rxItr=0;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <start_rx_interrupt+0x68>)
 800071e:	2200      	movs	r2, #0
 8000720:	801a      	strh	r2, [r3, #0]
	USART2->CR1|=USART_CR1_RXNEIE;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <start_rx_interrupt+0x6c>)
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	4a0d      	ldr	r2, [pc, #52]	; (800075c <start_rx_interrupt+0x6c>)
 8000728:	f043 0320 	orr.w	r3, r3, #32
 800072c:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(USART2_IRQn,6);
 800072e:	2106      	movs	r1, #6
 8000730:	2026      	movs	r0, #38	; 0x26
 8000732:	f7ff ff45 	bl	80005c0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8000736:	2026      	movs	r0, #38	; 0x26
 8000738:	f7ff ff24 	bl	8000584 <__NVIC_EnableIRQ>
	return 0;
 800073c:	2300      	movs	r3, #0
 800073e:	e001      	b.n	8000744 <start_rx_interrupt+0x54>
	}
return -1;
 8000740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200000d4 	.word	0x200000d4
 8000750:	200000d8 	.word	0x200000d8
 8000754:	200000dc 	.word	0x200000dc
 8000758:	200000e0 	.word	0x200000e0
 800075c:	40004400 	.word	0x40004400

08000760 <USART2_IRQHandler>:




void USART2_IRQHandler(void)
	{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken=pdFALSE;
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
	if(USART2->SR & USART_SR_RXNE)
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <USART2_IRQHandler+0x78>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f003 0320 	and.w	r3, r3, #32
 8000772:	2b00      	cmp	r3, #0
 8000774:	d021      	beq.n	80007ba <USART2_IRQHandler+0x5a>
		{
		uint8_t tempVal=(uint8_t)USART2->DR;
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <USART2_IRQHandler+0x78>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	71fb      	strb	r3, [r7, #7]
		if(rxInProgress)
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <USART2_IRQHandler+0x7c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d01a      	beq.n	80007ba <USART2_IRQHandler+0x5a>
			{
				rxBuff[rxItr++]=tempVal;
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <USART2_IRQHandler+0x80>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <USART2_IRQHandler+0x84>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	1c59      	adds	r1, r3, #1
 800078e:	b288      	uxth	r0, r1
 8000790:	4914      	ldr	r1, [pc, #80]	; (80007e4 <USART2_IRQHandler+0x84>)
 8000792:	8008      	strh	r0, [r1, #0]
 8000794:	4413      	add	r3, r2
 8000796:	79fa      	ldrb	r2, [r7, #7]
 8000798:	701a      	strb	r2, [r3, #0]
				if(rxLen==rxItr)
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <USART2_IRQHandler+0x88>)
 800079c:	881a      	ldrh	r2, [r3, #0]
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <USART2_IRQHandler+0x84>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d109      	bne.n	80007ba <USART2_IRQHandler+0x5a>
					{
					rxInProgress=0;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <USART2_IRQHandler+0x7c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
					xSemaphoreGiveFromISR(rxDone,&xHigherPriorityTaskWoken);
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <USART2_IRQHandler+0x8c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	463a      	mov	r2, r7
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fa78 	bl	8002caa <xQueueGiveFromISR>
					}
			}
		}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d007      	beq.n	80007d0 <USART2_IRQHandler+0x70>
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <USART2_IRQHandler+0x90>)
 80007c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	f3bf 8f4f 	dsb	sy
 80007cc:	f3bf 8f6f 	isb	sy
	}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40004400 	.word	0x40004400
 80007dc:	200000d4 	.word	0x200000d4
 80007e0:	200000dc 	.word	0x200000dc
 80007e4:	200000e0 	.word	0x200000e0
 80007e8:	200000d8 	.word	0x200000d8
 80007ec:	200000e8 	.word	0x200000e8
 80007f0:	e000ed04 	.word	0xe000ed04

080007f4 <SystemClock_Config>:




void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	; 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	2230      	movs	r2, #48	; 0x30
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f004 fdda 	bl	80053bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <SystemClock_Config+0xb4>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a21      	ldr	r2, [pc, #132]	; (80008a8 <SystemClock_Config+0xb4>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <SystemClock_Config+0xb4>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <SystemClock_Config+0xb8>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a1b      	ldr	r2, [pc, #108]	; (80008ac <SystemClock_Config+0xb8>)
 800083e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <SystemClock_Config+0xb8>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000850:	2302      	movs	r3, #2
 8000852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	2310      	movs	r3, #16
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800085c:	2300      	movs	r3, #0
 800085e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 0320 	add.w	r3, r7, #32
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fc85 	bl	8001174 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000870:	f000 f84a 	bl	8000908 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	230f      	movs	r3, #15
 8000876:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fee8 	bl	8001664 <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800089a:	f000 f835 	bl	8000908 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3750      	adds	r7, #80	; 0x50
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_GPIO_Init+0x30>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <MX_GPIO_Init+0x30>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_GPIO_Init+0x30>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d101      	bne.n	80008fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008f6:	f000 f9b7 	bl	8000c68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40014800 	.word	0x40014800

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_MspInit+0x54>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a11      	ldr	r2, [pc, #68]	; (8000968 <HAL_MspInit+0x54>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <HAL_MspInit+0x54>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_MspInit+0x54>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_MspInit+0x54>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_MspInit+0x54>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	210f      	movs	r1, #15
 8000956:	f06f 0001 	mvn.w	r0, #1
 800095a:	f000 fa5d 	bl	8000e18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a19      	ldr	r2, [pc, #100]	; (80009f0 <HAL_UART_MspInit+0x84>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d12b      	bne.n	80009e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <HAL_UART_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0x88>)
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009c6:	230c      	movs	r3, #12
 80009c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d6:	2307      	movs	r3, #7
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <HAL_UART_MspInit+0x8c>)
 80009e2:	f000 fa43 	bl	8000e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40004400 	.word	0x40004400
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000

080009fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	; 0x30
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	201a      	movs	r0, #26
 8000a12:	f000 fa01 	bl	8000e18 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000a16:	201a      	movs	r0, #26
 8000a18:	f000 fa1a 	bl	8000e50 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <HAL_InitTick+0xa0>)
 8000a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a24:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <HAL_InitTick+0xa0>)
 8000a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a2a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <HAL_InitTick+0xa0>)
 8000a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a38:	f107 0210 	add.w	r2, r7, #16
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 ffee 	bl	8001a24 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a48:	f000 ffd8 	bl	80019fc <HAL_RCC_GetPCLK2Freq>
 8000a4c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a50:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <HAL_InitTick+0xa4>)
 8000a52:	fba2 2303 	umull	r2, r3, r2, r3
 8000a56:	0c9b      	lsrs	r3, r3, #18
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_InitTick+0xa8>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <HAL_InitTick+0xac>)
 8000a60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_InitTick+0xa8>)
 8000a64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a68:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_InitTick+0xa8>)
 8000a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_InitTick+0xa8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_InitTick+0xa8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000a7c:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <HAL_InitTick+0xa8>)
 8000a7e:	f001 f803 	bl	8001a88 <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d104      	bne.n	8000a92 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000a88:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <HAL_InitTick+0xa8>)
 8000a8a:	f001 f857 	bl	8001b3c <HAL_TIM_Base_Start_IT>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	e000      	b.n	8000a94 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3730      	adds	r7, #48	; 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	431bde83 	.word	0x431bde83
 8000aa4:	20000128 	.word	0x20000128
 8000aa8:	40014800 	.word	0x40014800

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000ade:	f001 f88f 	bl	8001c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000128 	.word	0x20000128

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <_sbrk+0x5c>)
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <_sbrk+0x60>)
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <_sbrk+0x64>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d207      	bcs.n	8000b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b1c:	f004 fc16 	bl	800534c <__errno>
 8000b20:	4603      	mov	r3, r0
 8000b22:	220c      	movs	r2, #12
 8000b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b2a:	e009      	b.n	8000b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <_sbrk+0x64>)
 8000b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20020000 	.word	0x20020000
 8000b4c:	00000400 	.word	0x00000400
 8000b50:	20000170 	.word	0x20000170
 8000b54:	20004ad8 	.word	0x20004ad8

08000b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <SystemInit+0x20>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b62:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <SystemInit+0x20>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <USART2_UART_RX_Init>:

}


void USART2_UART_RX_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <USART2_UART_RX_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <USART2_UART_RX_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <USART2_UART_RX_Init+0x4c>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <USART2_UART_RX_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <USART2_UART_RX_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <USART2_UART_RX_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <USART2_UART_RX_Init+0x4c>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <USART2_UART_RX_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <USART2_UART_RX_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <USART2_UART_RX_Init+0x4c>)
 8000bb4:	f001 f9e8 	bl	8001f88 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <USART2_UART_RX_Init+0x46>
  {
    Error_Handler();
 8000bbe:	f7ff fea3 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000090 	.word	0x20000090
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd6:	490e      	ldr	r1, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bec:	4c0b      	ldr	r4, [pc, #44]	; (8000c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bfa:	f7ff ffad 	bl	8000b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f004 fbab 	bl	8005358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c02:	f7ff fd07 	bl	8000614 <main>
  bx  lr    
 8000c06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c14:	08005d44 	.word	0x08005d44
  ldr r2, =_sbss
 8000c18:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c1c:	20004ad4 	.word	0x20004ad4

08000c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <HAL_Init+0x40>)
 8000c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_Init+0x40>)
 8000c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_Init+0x40>)
 8000c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f8d8 	bl	8000e02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	200f      	movs	r0, #15
 8000c54:	f7ff fed2 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fe5c 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023c00 	.word	0x40023c00

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000174 	.word	0x20000174

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000174 	.word	0x20000174

08000ca8 <__NVIC_SetPriorityGrouping>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4907      	ldr	r1, [pc, #28]	; (8000d44 <__NVIC_EnableIRQ+0x38>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ff4c 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2a:	f7ff ff61 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	68b9      	ldr	r1, [r7, #8]
 8000e34:	6978      	ldr	r0, [r7, #20]
 8000e36:	f7ff ffb1 	bl	8000d9c <NVIC_EncodePriority>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff80 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e48:	bf00      	nop
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff54 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	e159      	b.n	800113c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e88:	2201      	movs	r2, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	f040 8148 	bne.w	8001136 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d005      	beq.n	8000ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d130      	bne.n	8000f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	f003 0201 	and.w	r2, r3, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d017      	beq.n	8000f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d123      	bne.n	8000fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	08da      	lsrs	r2, r3, #3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3208      	adds	r2, #8
 8000f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	220f      	movs	r2, #15
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	69b9      	ldr	r1, [r7, #24]
 8000fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0203 	and.w	r2, r3, #3
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 80a2 	beq.w	8001136 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b57      	ldr	r3, [pc, #348]	; (8001154 <HAL_GPIO_Init+0x2e8>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a56      	ldr	r2, [pc, #344]	; (8001154 <HAL_GPIO_Init+0x2e8>)
 8000ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b54      	ldr	r3, [pc, #336]	; (8001154 <HAL_GPIO_Init+0x2e8>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800100e:	4a52      	ldr	r2, [pc, #328]	; (8001158 <HAL_GPIO_Init+0x2ec>)
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3302      	adds	r3, #2
 8001016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	220f      	movs	r2, #15
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a49      	ldr	r2, [pc, #292]	; (800115c <HAL_GPIO_Init+0x2f0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d019      	beq.n	800106e <HAL_GPIO_Init+0x202>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a48      	ldr	r2, [pc, #288]	; (8001160 <HAL_GPIO_Init+0x2f4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0x1fe>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a47      	ldr	r2, [pc, #284]	; (8001164 <HAL_GPIO_Init+0x2f8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d00d      	beq.n	8001066 <HAL_GPIO_Init+0x1fa>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a46      	ldr	r2, [pc, #280]	; (8001168 <HAL_GPIO_Init+0x2fc>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d007      	beq.n	8001062 <HAL_GPIO_Init+0x1f6>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a45      	ldr	r2, [pc, #276]	; (800116c <HAL_GPIO_Init+0x300>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_GPIO_Init+0x1f2>
 800105a:	2304      	movs	r3, #4
 800105c:	e008      	b.n	8001070 <HAL_GPIO_Init+0x204>
 800105e:	2307      	movs	r3, #7
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x204>
 8001062:	2303      	movs	r3, #3
 8001064:	e004      	b.n	8001070 <HAL_GPIO_Init+0x204>
 8001066:	2302      	movs	r3, #2
 8001068:	e002      	b.n	8001070 <HAL_GPIO_Init+0x204>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <HAL_GPIO_Init+0x204>
 800106e:	2300      	movs	r3, #0
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	f002 0203 	and.w	r2, r2, #3
 8001076:	0092      	lsls	r2, r2, #2
 8001078:	4093      	lsls	r3, r2
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001080:	4935      	ldr	r1, [pc, #212]	; (8001158 <HAL_GPIO_Init+0x2ec>)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800108e:	4b38      	ldr	r3, [pc, #224]	; (8001170 <HAL_GPIO_Init+0x304>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b2:	4a2f      	ldr	r2, [pc, #188]	; (8001170 <HAL_GPIO_Init+0x304>)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010b8:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_GPIO_Init+0x304>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010dc:	4a24      	ldr	r2, [pc, #144]	; (8001170 <HAL_GPIO_Init+0x304>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <HAL_GPIO_Init+0x304>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001106:	4a1a      	ldr	r2, [pc, #104]	; (8001170 <HAL_GPIO_Init+0x304>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_GPIO_Init+0x304>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001130:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <HAL_GPIO_Init+0x304>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3301      	adds	r3, #1
 800113a:	61fb      	str	r3, [r7, #28]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	2b0f      	cmp	r3, #15
 8001140:	f67f aea2 	bls.w	8000e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3724      	adds	r7, #36	; 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800
 8001158:	40013800 	.word	0x40013800
 800115c:	40020000 	.word	0x40020000
 8001160:	40020400 	.word	0x40020400
 8001164:	40020800 	.word	0x40020800
 8001168:	40020c00 	.word	0x40020c00
 800116c:	40021000 	.word	0x40021000
 8001170:	40013c00 	.word	0x40013c00

08001174 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e267      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d075      	beq.n	800127e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001192:	4b88      	ldr	r3, [pc, #544]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b04      	cmp	r3, #4
 800119c:	d00c      	beq.n	80011b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119e:	4b85      	ldr	r3, [pc, #532]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d112      	bne.n	80011d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011aa:	4b82      	ldr	r3, [pc, #520]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011b6:	d10b      	bne.n	80011d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b8:	4b7e      	ldr	r3, [pc, #504]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d05b      	beq.n	800127c <HAL_RCC_OscConfig+0x108>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d157      	bne.n	800127c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e242      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d8:	d106      	bne.n	80011e8 <HAL_RCC_OscConfig+0x74>
 80011da:	4b76      	ldr	r3, [pc, #472]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a75      	ldr	r2, [pc, #468]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e01d      	b.n	8001224 <HAL_RCC_OscConfig+0xb0>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f0:	d10c      	bne.n	800120c <HAL_RCC_OscConfig+0x98>
 80011f2:	4b70      	ldr	r3, [pc, #448]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a6f      	ldr	r2, [pc, #444]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	4b6d      	ldr	r3, [pc, #436]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a6c      	ldr	r2, [pc, #432]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e00b      	b.n	8001224 <HAL_RCC_OscConfig+0xb0>
 800120c:	4b69      	ldr	r3, [pc, #420]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a68      	ldr	r2, [pc, #416]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	4b66      	ldr	r3, [pc, #408]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a65      	ldr	r2, [pc, #404]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 800121e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d013      	beq.n	8001254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fd30 	bl	8000c90 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff fd2c 	bl	8000c90 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e207      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	4b5b      	ldr	r3, [pc, #364]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0xc0>
 8001252:	e014      	b.n	800127e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fd1c 	bl	8000c90 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff fd18 	bl	8000c90 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	; 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e1f3      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126e:	4b51      	ldr	r3, [pc, #324]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0xe8>
 800127a:	e000      	b.n	800127e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d063      	beq.n	8001352 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800128a:	4b4a      	ldr	r3, [pc, #296]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00b      	beq.n	80012ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001296:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d11c      	bne.n	80012dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a2:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d116      	bne.n	80012dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ae:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d005      	beq.n	80012c6 <HAL_RCC_OscConfig+0x152>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d001      	beq.n	80012c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e1c7      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c6:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4937      	ldr	r1, [pc, #220]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	e03a      	b.n	8001352 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d020      	beq.n	8001326 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e4:	4b34      	ldr	r3, [pc, #208]	; (80013b8 <HAL_RCC_OscConfig+0x244>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ea:	f7ff fcd1 	bl	8000c90 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f2:	f7ff fccd 	bl	8000c90 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e1a8      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001310:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	4925      	ldr	r1, [pc, #148]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001320:	4313      	orrs	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
 8001324:	e015      	b.n	8001352 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <HAL_RCC_OscConfig+0x244>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132c:	f7ff fcb0 	bl	8000c90 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001334:	f7ff fcac 	bl	8000c90 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e187      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d036      	beq.n	80013cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d016      	beq.n	8001394 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_RCC_OscConfig+0x248>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136c:	f7ff fc90 	bl	8000c90 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001374:	f7ff fc8c 	bl	8000c90 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e167      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_RCC_OscConfig+0x240>)
 8001388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0x200>
 8001392:	e01b      	b.n	80013cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_RCC_OscConfig+0x248>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139a:	f7ff fc79 	bl	8000c90 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a0:	e00e      	b.n	80013c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a2:	f7ff fc75 	bl	8000c90 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d907      	bls.n	80013c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e150      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
 80013b4:	40023800 	.word	0x40023800
 80013b8:	42470000 	.word	0x42470000
 80013bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c0:	4b88      	ldr	r3, [pc, #544]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80013c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1ea      	bne.n	80013a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 8097 	beq.w	8001508 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013de:	4b81      	ldr	r3, [pc, #516]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10f      	bne.n	800140a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b7d      	ldr	r3, [pc, #500]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a7c      	ldr	r2, [pc, #496]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b7a      	ldr	r3, [pc, #488]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001406:	2301      	movs	r3, #1
 8001408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140a:	4b77      	ldr	r3, [pc, #476]	; (80015e8 <HAL_RCC_OscConfig+0x474>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001412:	2b00      	cmp	r3, #0
 8001414:	d118      	bne.n	8001448 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001416:	4b74      	ldr	r3, [pc, #464]	; (80015e8 <HAL_RCC_OscConfig+0x474>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a73      	ldr	r2, [pc, #460]	; (80015e8 <HAL_RCC_OscConfig+0x474>)
 800141c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001422:	f7ff fc35 	bl	8000c90 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142a:	f7ff fc31 	bl	8000c90 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e10c      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143c:	4b6a      	ldr	r3, [pc, #424]	; (80015e8 <HAL_RCC_OscConfig+0x474>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x2ea>
 8001450:	4b64      	ldr	r3, [pc, #400]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001454:	4a63      	ldr	r2, [pc, #396]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6713      	str	r3, [r2, #112]	; 0x70
 800145c:	e01c      	b.n	8001498 <HAL_RCC_OscConfig+0x324>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b05      	cmp	r3, #5
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0x30c>
 8001466:	4b5f      	ldr	r3, [pc, #380]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146a:	4a5e      	ldr	r2, [pc, #376]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	6713      	str	r3, [r2, #112]	; 0x70
 8001472:	4b5c      	ldr	r3, [pc, #368]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	4a5b      	ldr	r2, [pc, #364]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6713      	str	r3, [r2, #112]	; 0x70
 800147e:	e00b      	b.n	8001498 <HAL_RCC_OscConfig+0x324>
 8001480:	4b58      	ldr	r3, [pc, #352]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001484:	4a57      	ldr	r2, [pc, #348]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001486:	f023 0301 	bic.w	r3, r3, #1
 800148a:	6713      	str	r3, [r2, #112]	; 0x70
 800148c:	4b55      	ldr	r3, [pc, #340]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001490:	4a54      	ldr	r2, [pc, #336]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001492:	f023 0304 	bic.w	r3, r3, #4
 8001496:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d015      	beq.n	80014cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a0:	f7ff fbf6 	bl	8000c90 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a6:	e00a      	b.n	80014be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f7ff fbf2 	bl	8000c90 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e0cb      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014be:	4b49      	ldr	r3, [pc, #292]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0ee      	beq.n	80014a8 <HAL_RCC_OscConfig+0x334>
 80014ca:	e014      	b.n	80014f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014cc:	f7ff fbe0 	bl	8000c90 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d2:	e00a      	b.n	80014ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d4:	f7ff fbdc 	bl	8000c90 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e0b5      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ea:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1ee      	bne.n	80014d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d105      	bne.n	8001508 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fc:	4b39      	ldr	r3, [pc, #228]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	4a38      	ldr	r2, [pc, #224]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001506:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80a1 	beq.w	8001654 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b08      	cmp	r3, #8
 800151c:	d05c      	beq.n	80015d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d141      	bne.n	80015aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <HAL_RCC_OscConfig+0x478>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fbb0 	bl	8000c90 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff fbac 	bl	8000c90 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e087      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001546:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69da      	ldr	r2, [r3, #28]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	019b      	lsls	r3, r3, #6
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	085b      	lsrs	r3, r3, #1
 800156a:	3b01      	subs	r3, #1
 800156c:	041b      	lsls	r3, r3, #16
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	491b      	ldr	r1, [pc, #108]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <HAL_RCC_OscConfig+0x478>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fb85 	bl	8000c90 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff fb81 	bl	8000c90 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e05c      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x416>
 80015a8:	e054      	b.n	8001654 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_RCC_OscConfig+0x478>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fb6e 	bl	8000c90 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b8:	f7ff fb6a 	bl	8000c90 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e045      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_RCC_OscConfig+0x470>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x444>
 80015d6:	e03d      	b.n	8001654 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e038      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40007000 	.word	0x40007000
 80015ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_RCC_OscConfig+0x4ec>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d028      	beq.n	8001650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001608:	429a      	cmp	r2, r3
 800160a:	d121      	bne.n	8001650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	429a      	cmp	r2, r3
 8001618:	d11a      	bne.n	8001650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001620:	4013      	ands	r3, r2
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001628:	4293      	cmp	r3, r2
 800162a:	d111      	bne.n	8001650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	085b      	lsrs	r3, r3, #1
 8001638:	3b01      	subs	r3, #1
 800163a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800163c:	429a      	cmp	r2, r3
 800163e:	d107      	bne.n	8001650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800

08001664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0cc      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001678:	4b68      	ldr	r3, [pc, #416]	; (800181c <HAL_RCC_ClockConfig+0x1b8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d90c      	bls.n	80016a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b65      	ldr	r3, [pc, #404]	; (800181c <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b63      	ldr	r3, [pc, #396]	; (800181c <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0b8      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d020      	beq.n	80016ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b8:	4b59      	ldr	r3, [pc, #356]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	4a58      	ldr	r2, [pc, #352]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d0:	4b53      	ldr	r3, [pc, #332]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4a52      	ldr	r2, [pc, #328]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016dc:	4b50      	ldr	r3, [pc, #320]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	494d      	ldr	r1, [pc, #308]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d044      	beq.n	8001784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d107      	bne.n	8001712 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	4b47      	ldr	r3, [pc, #284]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d119      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e07f      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d003      	beq.n	8001722 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800171e:	2b03      	cmp	r3, #3
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e06f      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e067      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001742:	4b37      	ldr	r3, [pc, #220]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f023 0203 	bic.w	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4934      	ldr	r1, [pc, #208]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	4313      	orrs	r3, r2
 8001752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001754:	f7ff fa9c 	bl	8000c90 <HAL_GetTick>
 8001758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	e00a      	b.n	8001772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175c:	f7ff fa98 	bl	8000c90 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e04f      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 020c 	and.w	r2, r3, #12
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	429a      	cmp	r2, r3
 8001782:	d1eb      	bne.n	800175c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001784:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_RCC_ClockConfig+0x1b8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d20c      	bcs.n	80017ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b22      	ldr	r3, [pc, #136]	; (800181c <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e032      	b.n	8001812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	4916      	ldr	r1, [pc, #88]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d009      	beq.n	80017ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	490e      	ldr	r1, [pc, #56]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ea:	f000 f821 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	490a      	ldr	r1, [pc, #40]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 80017fc:	5ccb      	ldrb	r3, [r1, r3]
 80017fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff f8f6 	bl	80009fc <HAL_InitTick>

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023c00 	.word	0x40023c00
 8001820:	40023800 	.word	0x40023800
 8001824:	08005ce8 	.word	0x08005ce8
 8001828:	20000000 	.word	0x20000000
 800182c:	20000004 	.word	0x20000004

08001830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001834:	b090      	sub	sp, #64	; 0x40
 8001836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
 800183c:	2300      	movs	r3, #0
 800183e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001840:	2300      	movs	r3, #0
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001848:	4b59      	ldr	r3, [pc, #356]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b08      	cmp	r3, #8
 8001852:	d00d      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x40>
 8001854:	2b08      	cmp	r3, #8
 8001856:	f200 80a1 	bhi.w	800199c <HAL_RCC_GetSysClockFreq+0x16c>
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x34>
 800185e:	2b04      	cmp	r3, #4
 8001860:	d003      	beq.n	800186a <HAL_RCC_GetSysClockFreq+0x3a>
 8001862:	e09b      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001864:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001866:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001868:	e09b      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800186a:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800186c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800186e:	e098      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001870:	4b4f      	ldr	r3, [pc, #316]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800187a:	4b4d      	ldr	r3, [pc, #308]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d028      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001886:	4b4a      	ldr	r3, [pc, #296]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	099b      	lsrs	r3, r3, #6
 800188c:	2200      	movs	r2, #0
 800188e:	623b      	str	r3, [r7, #32]
 8001890:	627a      	str	r2, [r7, #36]	; 0x24
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001898:	2100      	movs	r1, #0
 800189a:	4b47      	ldr	r3, [pc, #284]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800189c:	fb03 f201 	mul.w	r2, r3, r1
 80018a0:	2300      	movs	r3, #0
 80018a2:	fb00 f303 	mul.w	r3, r0, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	4a43      	ldr	r2, [pc, #268]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018aa:	fba0 1202 	umull	r1, r2, r0, r2
 80018ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018b0:	460a      	mov	r2, r1
 80018b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80018b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b6:	4413      	add	r3, r2
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018bc:	2200      	movs	r2, #0
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	61fa      	str	r2, [r7, #28]
 80018c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018ca:	f7fe fcd9 	bl	8000280 <__aeabi_uldivmod>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4613      	mov	r3, r2
 80018d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018d6:	e053      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d8:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	099b      	lsrs	r3, r3, #6
 80018de:	2200      	movs	r2, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	617a      	str	r2, [r7, #20]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018ea:	f04f 0b00 	mov.w	fp, #0
 80018ee:	4652      	mov	r2, sl
 80018f0:	465b      	mov	r3, fp
 80018f2:	f04f 0000 	mov.w	r0, #0
 80018f6:	f04f 0100 	mov.w	r1, #0
 80018fa:	0159      	lsls	r1, r3, #5
 80018fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001900:	0150      	lsls	r0, r2, #5
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	ebb2 080a 	subs.w	r8, r2, sl
 800190a:	eb63 090b 	sbc.w	r9, r3, fp
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800191a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800191e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001922:	ebb2 0408 	subs.w	r4, r2, r8
 8001926:	eb63 0509 	sbc.w	r5, r3, r9
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	00eb      	lsls	r3, r5, #3
 8001934:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001938:	00e2      	lsls	r2, r4, #3
 800193a:	4614      	mov	r4, r2
 800193c:	461d      	mov	r5, r3
 800193e:	eb14 030a 	adds.w	r3, r4, sl
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	eb45 030b 	adc.w	r3, r5, fp
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001956:	4629      	mov	r1, r5
 8001958:	028b      	lsls	r3, r1, #10
 800195a:	4621      	mov	r1, r4
 800195c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001960:	4621      	mov	r1, r4
 8001962:	028a      	lsls	r2, r1, #10
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196a:	2200      	movs	r2, #0
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	60fa      	str	r2, [r7, #12]
 8001970:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001974:	f7fe fc84 	bl	8000280 <__aeabi_uldivmod>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4613      	mov	r3, r2
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	0c1b      	lsrs	r3, r3, #16
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	3301      	adds	r3, #1
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001994:	fbb2 f3f3 	udiv	r3, r2, r3
 8001998:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800199a:	e002      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3740      	adds	r7, #64	; 0x40
 80019a8:	46bd      	mov	sp, r7
 80019aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	00f42400 	.word	0x00f42400
 80019b8:	017d7840 	.word	0x017d7840

080019bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000000 	.word	0x20000000

080019d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019d8:	f7ff fff0 	bl	80019bc <HAL_RCC_GetHCLKFreq>
 80019dc:	4602      	mov	r2, r0
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	0a9b      	lsrs	r3, r3, #10
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	4903      	ldr	r1, [pc, #12]	; (80019f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ea:	5ccb      	ldrb	r3, [r1, r3]
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	08005cf8 	.word	0x08005cf8

080019fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a00:	f7ff ffdc 	bl	80019bc <HAL_RCC_GetHCLKFreq>
 8001a04:	4602      	mov	r2, r0
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	0b5b      	lsrs	r3, r3, #13
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	4903      	ldr	r1, [pc, #12]	; (8001a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a12:	5ccb      	ldrb	r3, [r1, r3]
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	08005cf8 	.word	0x08005cf8

08001a24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	220f      	movs	r2, #15
 8001a32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_RCC_GetClockConfig+0x5c>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0203 	and.w	r2, r3, #3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_RCC_GetClockConfig+0x5c>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <HAL_RCC_GetClockConfig+0x5c>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_RCC_GetClockConfig+0x5c>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	08db      	lsrs	r3, r3, #3
 8001a5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_RCC_GetClockConfig+0x60>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0207 	and.w	r2, r3, #7
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	601a      	str	r2, [r3, #0]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40023c00 	.word	0x40023c00

08001a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e041      	b.n	8001b1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f839 	bl	8001b26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	f000 f9ca 	bl	8001e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d001      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e044      	b.n	8001bde <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a1e      	ldr	r2, [pc, #120]	; (8001bec <HAL_TIM_Base_Start_IT+0xb0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d018      	beq.n	8001ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7e:	d013      	beq.n	8001ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a1a      	ldr	r2, [pc, #104]	; (8001bf0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00e      	beq.n	8001ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d009      	beq.n	8001ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a17      	ldr	r2, [pc, #92]	; (8001bf8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d004      	beq.n	8001ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a16      	ldr	r2, [pc, #88]	; (8001bfc <HAL_TIM_Base_Start_IT+0xc0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d111      	bne.n	8001bcc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d010      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 0201 	orr.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bca:	e007      	b.n	8001bdc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40010000 	.word	0x40010000
 8001bf0:	40000400 	.word	0x40000400
 8001bf4:	40000800 	.word	0x40000800
 8001bf8:	40000c00 	.word	0x40000c00
 8001bfc:	40014000 	.word	0x40014000

08001c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d122      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d11b      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0202 	mvn.w	r2, #2
 8001c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8ee 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8e0 	bl	8001e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f8f1 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d122      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d11b      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0204 	mvn.w	r2, #4
 8001c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2202      	movs	r2, #2
 8001c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f8c4 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f8b6 	bl	8001e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f8c7 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d122      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d11b      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0208 	mvn.w	r2, #8
 8001cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2204      	movs	r2, #4
 8001cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f89a 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f88c 	bl	8001e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f89d 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	2b10      	cmp	r3, #16
 8001d10:	d122      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b10      	cmp	r3, #16
 8001d1e:	d11b      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0210 	mvn.w	r2, #16
 8001d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f870 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001d44:	e005      	b.n	8001d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f862 	bl	8001e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f873 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d10e      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0201 	mvn.w	r2, #1
 8001d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fdb0 	bl	80008e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b80      	cmp	r3, #128	; 0x80
 8001d90:	d10e      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9c:	2b80      	cmp	r3, #128	; 0x80
 8001d9e:	d107      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8e2 	bl	8001f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dba:	2b40      	cmp	r3, #64	; 0x40
 8001dbc:	d10e      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc8:	2b40      	cmp	r3, #64	; 0x40
 8001dca:	d107      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f838 	bl	8001e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d10e      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0320 	and.w	r3, r3, #32
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d107      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0220 	mvn.w	r2, #32
 8001e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8ac 	bl	8001f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a34      	ldr	r2, [pc, #208]	; (8001f44 <TIM_Base_SetConfig+0xe4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d00f      	beq.n	8001e98 <TIM_Base_SetConfig+0x38>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7e:	d00b      	beq.n	8001e98 <TIM_Base_SetConfig+0x38>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a31      	ldr	r2, [pc, #196]	; (8001f48 <TIM_Base_SetConfig+0xe8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d007      	beq.n	8001e98 <TIM_Base_SetConfig+0x38>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a30      	ldr	r2, [pc, #192]	; (8001f4c <TIM_Base_SetConfig+0xec>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d003      	beq.n	8001e98 <TIM_Base_SetConfig+0x38>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a2f      	ldr	r2, [pc, #188]	; (8001f50 <TIM_Base_SetConfig+0xf0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d108      	bne.n	8001eaa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a25      	ldr	r2, [pc, #148]	; (8001f44 <TIM_Base_SetConfig+0xe4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d01b      	beq.n	8001eea <TIM_Base_SetConfig+0x8a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb8:	d017      	beq.n	8001eea <TIM_Base_SetConfig+0x8a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a22      	ldr	r2, [pc, #136]	; (8001f48 <TIM_Base_SetConfig+0xe8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <TIM_Base_SetConfig+0x8a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a21      	ldr	r2, [pc, #132]	; (8001f4c <TIM_Base_SetConfig+0xec>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00f      	beq.n	8001eea <TIM_Base_SetConfig+0x8a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a20      	ldr	r2, [pc, #128]	; (8001f50 <TIM_Base_SetConfig+0xf0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00b      	beq.n	8001eea <TIM_Base_SetConfig+0x8a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <TIM_Base_SetConfig+0xf4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d007      	beq.n	8001eea <TIM_Base_SetConfig+0x8a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a1e      	ldr	r2, [pc, #120]	; (8001f58 <TIM_Base_SetConfig+0xf8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d003      	beq.n	8001eea <TIM_Base_SetConfig+0x8a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <TIM_Base_SetConfig+0xfc>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d108      	bne.n	8001efc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <TIM_Base_SetConfig+0xe4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d103      	bne.n	8001f30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	615a      	str	r2, [r3, #20]
}
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40010000 	.word	0x40010000
 8001f48:	40000400 	.word	0x40000400
 8001f4c:	40000800 	.word	0x40000800
 8001f50:	40000c00 	.word	0x40000c00
 8001f54:	40014000 	.word	0x40014000
 8001f58:	40014400 	.word	0x40014400
 8001f5c:	40014800 	.word	0x40014800

08001f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e03f      	b.n	800201a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d106      	bne.n	8001fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7fe fcdc 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2224      	movs	r2, #36	; 0x24
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f829 	bl	8002024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002028:	b0c0      	sub	sp, #256	; 0x100
 800202a:	af00      	add	r7, sp, #0
 800202c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800203c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002040:	68d9      	ldr	r1, [r3, #12]
 8002042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	ea40 0301 	orr.w	r3, r0, r1
 800204c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800204e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	431a      	orrs	r2, r3
 800205c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	431a      	orrs	r2, r3
 8002064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800207c:	f021 010c 	bic.w	r1, r1, #12
 8002080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800208a:	430b      	orrs	r3, r1
 800208c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800208e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800209a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800209e:	6999      	ldr	r1, [r3, #24]
 80020a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	ea40 0301 	orr.w	r3, r0, r1
 80020aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4b8f      	ldr	r3, [pc, #572]	; (80022f0 <UART_SetConfig+0x2cc>)
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d005      	beq.n	80020c4 <UART_SetConfig+0xa0>
 80020b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b8d      	ldr	r3, [pc, #564]	; (80022f4 <UART_SetConfig+0x2d0>)
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d104      	bne.n	80020ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020c4:	f7ff fc9a 	bl	80019fc <HAL_RCC_GetPCLK2Freq>
 80020c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80020cc:	e003      	b.n	80020d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020ce:	f7ff fc81 	bl	80019d4 <HAL_RCC_GetPCLK1Freq>
 80020d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e0:	f040 810c 	bne.w	80022fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020e8:	2200      	movs	r2, #0
 80020ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80020ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020f6:	4622      	mov	r2, r4
 80020f8:	462b      	mov	r3, r5
 80020fa:	1891      	adds	r1, r2, r2
 80020fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80020fe:	415b      	adcs	r3, r3
 8002100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002102:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002106:	4621      	mov	r1, r4
 8002108:	eb12 0801 	adds.w	r8, r2, r1
 800210c:	4629      	mov	r1, r5
 800210e:	eb43 0901 	adc.w	r9, r3, r1
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800211e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002126:	4690      	mov	r8, r2
 8002128:	4699      	mov	r9, r3
 800212a:	4623      	mov	r3, r4
 800212c:	eb18 0303 	adds.w	r3, r8, r3
 8002130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002134:	462b      	mov	r3, r5
 8002136:	eb49 0303 	adc.w	r3, r9, r3
 800213a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800213e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800214a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800214e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002152:	460b      	mov	r3, r1
 8002154:	18db      	adds	r3, r3, r3
 8002156:	653b      	str	r3, [r7, #80]	; 0x50
 8002158:	4613      	mov	r3, r2
 800215a:	eb42 0303 	adc.w	r3, r2, r3
 800215e:	657b      	str	r3, [r7, #84]	; 0x54
 8002160:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002164:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002168:	f7fe f88a 	bl	8000280 <__aeabi_uldivmod>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4b61      	ldr	r3, [pc, #388]	; (80022f8 <UART_SetConfig+0x2d4>)
 8002172:	fba3 2302 	umull	r2, r3, r3, r2
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	011c      	lsls	r4, r3, #4
 800217a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800217e:	2200      	movs	r2, #0
 8002180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002184:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002188:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800218c:	4642      	mov	r2, r8
 800218e:	464b      	mov	r3, r9
 8002190:	1891      	adds	r1, r2, r2
 8002192:	64b9      	str	r1, [r7, #72]	; 0x48
 8002194:	415b      	adcs	r3, r3
 8002196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002198:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800219c:	4641      	mov	r1, r8
 800219e:	eb12 0a01 	adds.w	sl, r2, r1
 80021a2:	4649      	mov	r1, r9
 80021a4:	eb43 0b01 	adc.w	fp, r3, r1
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021bc:	4692      	mov	sl, r2
 80021be:	469b      	mov	fp, r3
 80021c0:	4643      	mov	r3, r8
 80021c2:	eb1a 0303 	adds.w	r3, sl, r3
 80021c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021ca:	464b      	mov	r3, r9
 80021cc:	eb4b 0303 	adc.w	r3, fp, r3
 80021d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80021d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80021e8:	460b      	mov	r3, r1
 80021ea:	18db      	adds	r3, r3, r3
 80021ec:	643b      	str	r3, [r7, #64]	; 0x40
 80021ee:	4613      	mov	r3, r2
 80021f0:	eb42 0303 	adc.w	r3, r2, r3
 80021f4:	647b      	str	r3, [r7, #68]	; 0x44
 80021f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80021fe:	f7fe f83f 	bl	8000280 <__aeabi_uldivmod>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4611      	mov	r1, r2
 8002208:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <UART_SetConfig+0x2d4>)
 800220a:	fba3 2301 	umull	r2, r3, r3, r1
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2264      	movs	r2, #100	; 0x64
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	1acb      	subs	r3, r1, r3
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <UART_SetConfig+0x2d4>)
 8002220:	fba3 2302 	umull	r2, r3, r3, r2
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800222c:	441c      	add	r4, r3
 800222e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002232:	2200      	movs	r2, #0
 8002234:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002238:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800223c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002240:	4642      	mov	r2, r8
 8002242:	464b      	mov	r3, r9
 8002244:	1891      	adds	r1, r2, r2
 8002246:	63b9      	str	r1, [r7, #56]	; 0x38
 8002248:	415b      	adcs	r3, r3
 800224a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800224c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002250:	4641      	mov	r1, r8
 8002252:	1851      	adds	r1, r2, r1
 8002254:	6339      	str	r1, [r7, #48]	; 0x30
 8002256:	4649      	mov	r1, r9
 8002258:	414b      	adcs	r3, r1
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002268:	4659      	mov	r1, fp
 800226a:	00cb      	lsls	r3, r1, #3
 800226c:	4651      	mov	r1, sl
 800226e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002272:	4651      	mov	r1, sl
 8002274:	00ca      	lsls	r2, r1, #3
 8002276:	4610      	mov	r0, r2
 8002278:	4619      	mov	r1, r3
 800227a:	4603      	mov	r3, r0
 800227c:	4642      	mov	r2, r8
 800227e:	189b      	adds	r3, r3, r2
 8002280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002284:	464b      	mov	r3, r9
 8002286:	460a      	mov	r2, r1
 8002288:	eb42 0303 	adc.w	r3, r2, r3
 800228c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800229c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022a4:	460b      	mov	r3, r1
 80022a6:	18db      	adds	r3, r3, r3
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022aa:	4613      	mov	r3, r2
 80022ac:	eb42 0303 	adc.w	r3, r2, r3
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80022ba:	f7fd ffe1 	bl	8000280 <__aeabi_uldivmod>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <UART_SetConfig+0x2d4>)
 80022c4:	fba3 1302 	umull	r1, r3, r3, r2
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	2164      	movs	r1, #100	; 0x64
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	3332      	adds	r3, #50	; 0x32
 80022d6:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <UART_SetConfig+0x2d4>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	095b      	lsrs	r3, r3, #5
 80022de:	f003 0207 	and.w	r2, r3, #7
 80022e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4422      	add	r2, r4
 80022ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022ec:	e105      	b.n	80024fa <UART_SetConfig+0x4d6>
 80022ee:	bf00      	nop
 80022f0:	40011000 	.word	0x40011000
 80022f4:	40011400 	.word	0x40011400
 80022f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002300:	2200      	movs	r2, #0
 8002302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002306:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800230a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800230e:	4642      	mov	r2, r8
 8002310:	464b      	mov	r3, r9
 8002312:	1891      	adds	r1, r2, r2
 8002314:	6239      	str	r1, [r7, #32]
 8002316:	415b      	adcs	r3, r3
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
 800231a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800231e:	4641      	mov	r1, r8
 8002320:	1854      	adds	r4, r2, r1
 8002322:	4649      	mov	r1, r9
 8002324:	eb43 0501 	adc.w	r5, r3, r1
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	00eb      	lsls	r3, r5, #3
 8002332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002336:	00e2      	lsls	r2, r4, #3
 8002338:	4614      	mov	r4, r2
 800233a:	461d      	mov	r5, r3
 800233c:	4643      	mov	r3, r8
 800233e:	18e3      	adds	r3, r4, r3
 8002340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002344:	464b      	mov	r3, r9
 8002346:	eb45 0303 	adc.w	r3, r5, r3
 800234a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800234e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800235a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800236a:	4629      	mov	r1, r5
 800236c:	008b      	lsls	r3, r1, #2
 800236e:	4621      	mov	r1, r4
 8002370:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002374:	4621      	mov	r1, r4
 8002376:	008a      	lsls	r2, r1, #2
 8002378:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800237c:	f7fd ff80 	bl	8000280 <__aeabi_uldivmod>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4b60      	ldr	r3, [pc, #384]	; (8002508 <UART_SetConfig+0x4e4>)
 8002386:	fba3 2302 	umull	r2, r3, r3, r2
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	011c      	lsls	r4, r3, #4
 800238e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002392:	2200      	movs	r2, #0
 8002394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002398:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800239c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023a0:	4642      	mov	r2, r8
 80023a2:	464b      	mov	r3, r9
 80023a4:	1891      	adds	r1, r2, r2
 80023a6:	61b9      	str	r1, [r7, #24]
 80023a8:	415b      	adcs	r3, r3
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b0:	4641      	mov	r1, r8
 80023b2:	1851      	adds	r1, r2, r1
 80023b4:	6139      	str	r1, [r7, #16]
 80023b6:	4649      	mov	r1, r9
 80023b8:	414b      	adcs	r3, r1
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023c8:	4659      	mov	r1, fp
 80023ca:	00cb      	lsls	r3, r1, #3
 80023cc:	4651      	mov	r1, sl
 80023ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023d2:	4651      	mov	r1, sl
 80023d4:	00ca      	lsls	r2, r1, #3
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	4642      	mov	r2, r8
 80023de:	189b      	adds	r3, r3, r2
 80023e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023e4:	464b      	mov	r3, r9
 80023e6:	460a      	mov	r2, r1
 80023e8:	eb42 0303 	adc.w	r3, r2, r3
 80023ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80023fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002408:	4649      	mov	r1, r9
 800240a:	008b      	lsls	r3, r1, #2
 800240c:	4641      	mov	r1, r8
 800240e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002412:	4641      	mov	r1, r8
 8002414:	008a      	lsls	r2, r1, #2
 8002416:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800241a:	f7fd ff31 	bl	8000280 <__aeabi_uldivmod>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4b39      	ldr	r3, [pc, #228]	; (8002508 <UART_SetConfig+0x4e4>)
 8002424:	fba3 1302 	umull	r1, r3, r3, r2
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	2164      	movs	r1, #100	; 0x64
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	3332      	adds	r3, #50	; 0x32
 8002436:	4a34      	ldr	r2, [pc, #208]	; (8002508 <UART_SetConfig+0x4e4>)
 8002438:	fba2 2303 	umull	r2, r3, r2, r3
 800243c:	095b      	lsrs	r3, r3, #5
 800243e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002442:	441c      	add	r4, r3
 8002444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002448:	2200      	movs	r2, #0
 800244a:	673b      	str	r3, [r7, #112]	; 0x70
 800244c:	677a      	str	r2, [r7, #116]	; 0x74
 800244e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002452:	4642      	mov	r2, r8
 8002454:	464b      	mov	r3, r9
 8002456:	1891      	adds	r1, r2, r2
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	415b      	adcs	r3, r3
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002462:	4641      	mov	r1, r8
 8002464:	1851      	adds	r1, r2, r1
 8002466:	6039      	str	r1, [r7, #0]
 8002468:	4649      	mov	r1, r9
 800246a:	414b      	adcs	r3, r1
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800247a:	4659      	mov	r1, fp
 800247c:	00cb      	lsls	r3, r1, #3
 800247e:	4651      	mov	r1, sl
 8002480:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002484:	4651      	mov	r1, sl
 8002486:	00ca      	lsls	r2, r1, #3
 8002488:	4610      	mov	r0, r2
 800248a:	4619      	mov	r1, r3
 800248c:	4603      	mov	r3, r0
 800248e:	4642      	mov	r2, r8
 8002490:	189b      	adds	r3, r3, r2
 8002492:	66bb      	str	r3, [r7, #104]	; 0x68
 8002494:	464b      	mov	r3, r9
 8002496:	460a      	mov	r2, r1
 8002498:	eb42 0303 	adc.w	r3, r2, r3
 800249c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800249e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	663b      	str	r3, [r7, #96]	; 0x60
 80024a8:	667a      	str	r2, [r7, #100]	; 0x64
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80024b6:	4649      	mov	r1, r9
 80024b8:	008b      	lsls	r3, r1, #2
 80024ba:	4641      	mov	r1, r8
 80024bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024c0:	4641      	mov	r1, r8
 80024c2:	008a      	lsls	r2, r1, #2
 80024c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024c8:	f7fd feda 	bl	8000280 <__aeabi_uldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <UART_SetConfig+0x4e4>)
 80024d2:	fba3 1302 	umull	r1, r3, r3, r2
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	2164      	movs	r1, #100	; 0x64
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	3332      	adds	r3, #50	; 0x32
 80024e4:	4a08      	ldr	r2, [pc, #32]	; (8002508 <UART_SetConfig+0x4e4>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	f003 020f 	and.w	r2, r3, #15
 80024f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4422      	add	r2, r4
 80024f8:	609a      	str	r2, [r3, #8]
}
 80024fa:	bf00      	nop
 80024fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002500:	46bd      	mov	sp, r7
 8002502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002506:	bf00      	nop
 8002508:	51eb851f 	.word	0x51eb851f

0800250c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <SysTick_Handler+0x1c>)
 8002512:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002514:	f001 fdb2 	bl	800407c <xTaskGetSchedulerState>
 8002518:	4603      	mov	r3, r0
 800251a:	2b01      	cmp	r3, #1
 800251c:	d001      	beq.n	8002522 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800251e:	f002 fc9b 	bl	8004e58 <xPortSysTickHandler>
  }
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	e000e010 	.word	0xe000e010

0800252c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4a07      	ldr	r2, [pc, #28]	; (8002558 <vApplicationGetIdleTaskMemory+0x2c>)
 800253c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	4a06      	ldr	r2, [pc, #24]	; (800255c <vApplicationGetIdleTaskMemory+0x30>)
 8002542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	601a      	str	r2, [r3, #0]
}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000178 	.word	0x20000178
 800255c:	200001d4 	.word	0x200001d4

08002560 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a07      	ldr	r2, [pc, #28]	; (800258c <vApplicationGetTimerTaskMemory+0x2c>)
 8002570:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4a06      	ldr	r2, [pc, #24]	; (8002590 <vApplicationGetTimerTaskMemory+0x30>)
 8002576:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257e:	601a      	str	r2, [r3, #0]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	200003d4 	.word	0x200003d4
 8002590:	20000430 	.word	0x20000430

08002594 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f103 0208 	add.w	r2, r3, #8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f103 0208 	add.w	r2, r3, #8
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f103 0208 	add.w	r2, r3, #8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025ee:	b480      	push	{r7}
 80025f0:	b085      	sub	sp, #20
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	601a      	str	r2, [r3, #0]
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002636:	b480      	push	{r7}
 8002638:	b085      	sub	sp, #20
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800264c:	d103      	bne.n	8002656 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e00c      	b.n	8002670 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3308      	adds	r3, #8
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	e002      	b.n	8002664 <vListInsert+0x2e>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	429a      	cmp	r2, r3
 800266e:	d2f6      	bcs.n	800265e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	601a      	str	r2, [r3, #0]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6892      	ldr	r2, [r2, #8]
 80026be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6852      	ldr	r2, [r2, #4]
 80026c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d103      	bne.n	80026dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	1e5a      	subs	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10a      	bne.n	8002726 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002722:	bf00      	nop
 8002724:	e7fe      	b.n	8002724 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002726:	f002 fb05 	bl	8004d34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002732:	68f9      	ldr	r1, [r7, #12]
 8002734:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	441a      	add	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002756:	3b01      	subs	r3, #1
 8002758:	68f9      	ldr	r1, [r7, #12]
 800275a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	441a      	add	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	22ff      	movs	r2, #255	; 0xff
 800276a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	22ff      	movs	r2, #255	; 0xff
 8002772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d114      	bne.n	80027a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01a      	beq.n	80027ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3310      	adds	r3, #16
 8002788:	4618      	mov	r0, r3
 800278a:	f001 fab9 	bl	8003d00 <xTaskRemoveFromEventList>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d012      	beq.n	80027ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <xQueueGenericReset+0xcc>)
 8002796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	e009      	b.n	80027ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3310      	adds	r3, #16
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fef2 	bl	8002594 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3324      	adds	r3, #36	; 0x24
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff feed 	bl	8002594 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027ba:	f002 faeb 	bl	8004d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027be:	2301      	movs	r3, #1
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	e000ed04 	.word	0xe000ed04

080027cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08e      	sub	sp, #56	; 0x38
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10a      	bne.n	80027f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80027e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e4:	f383 8811 	msr	BASEPRI, r3
 80027e8:	f3bf 8f6f 	isb	sy
 80027ec:	f3bf 8f4f 	dsb	sy
 80027f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027f2:	bf00      	nop
 80027f4:	e7fe      	b.n	80027f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10a      	bne.n	8002812 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80027fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002800:	f383 8811 	msr	BASEPRI, r3
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800280e:	bf00      	nop
 8002810:	e7fe      	b.n	8002810 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <xQueueGenericCreateStatic+0x52>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <xQueueGenericCreateStatic+0x56>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <xQueueGenericCreateStatic+0x58>
 8002822:	2300      	movs	r3, #0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10a      	bne.n	800283e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282c:	f383 8811 	msr	BASEPRI, r3
 8002830:	f3bf 8f6f 	isb	sy
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	623b      	str	r3, [r7, #32]
}
 800283a:	bf00      	nop
 800283c:	e7fe      	b.n	800283c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d102      	bne.n	800284a <xQueueGenericCreateStatic+0x7e>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <xQueueGenericCreateStatic+0x82>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <xQueueGenericCreateStatic+0x84>
 800284e:	2300      	movs	r3, #0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10a      	bne.n	800286a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	61fb      	str	r3, [r7, #28]
}
 8002866:	bf00      	nop
 8002868:	e7fe      	b.n	8002868 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800286a:	2350      	movs	r3, #80	; 0x50
 800286c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b50      	cmp	r3, #80	; 0x50
 8002872:	d00a      	beq.n	800288a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	61bb      	str	r3, [r7, #24]
}
 8002886:	bf00      	nop
 8002888:	e7fe      	b.n	8002888 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800288a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00d      	beq.n	80028b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800289e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80028a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	4613      	mov	r3, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f83f 	bl	8002930 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3730      	adds	r7, #48	; 0x30
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	; 0x28
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	4613      	mov	r3, r2
 80028c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10a      	bne.n	80028e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80028d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d4:	f383 8811 	msr	BASEPRI, r3
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	613b      	str	r3, [r7, #16]
}
 80028e2:	bf00      	nop
 80028e4:	e7fe      	b.n	80028e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	3350      	adds	r3, #80	; 0x50
 80028f4:	4618      	mov	r0, r3
 80028f6:	f002 fb3f 	bl	8004f78 <pvPortMalloc>
 80028fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d011      	beq.n	8002926 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	3350      	adds	r3, #80	; 0x50
 800290a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002914:	79fa      	ldrb	r2, [r7, #7]
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	4613      	mov	r3, r2
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f805 	bl	8002930 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002926:	69bb      	ldr	r3, [r7, #24]
	}
 8002928:	4618      	mov	r0, r3
 800292a:	3720      	adds	r7, #32
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d103      	bne.n	800294c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e002      	b.n	8002952 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800295e:	2101      	movs	r1, #1
 8002960:	69b8      	ldr	r0, [r7, #24]
 8002962:	f7ff fecb 	bl	80026fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08e      	sub	sp, #56	; 0x38
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002986:	2300      	movs	r3, #0
 8002988:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10a      	bne.n	80029aa <xQueueGenericSend+0x32>
	__asm volatile
 8002994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029a6:	bf00      	nop
 80029a8:	e7fe      	b.n	80029a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d103      	bne.n	80029b8 <xQueueGenericSend+0x40>
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <xQueueGenericSend+0x44>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <xQueueGenericSend+0x46>
 80029bc:	2300      	movs	r3, #0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <xQueueGenericSend+0x60>
	__asm volatile
 80029c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c6:	f383 8811 	msr	BASEPRI, r3
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029d4:	bf00      	nop
 80029d6:	e7fe      	b.n	80029d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d103      	bne.n	80029e6 <xQueueGenericSend+0x6e>
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <xQueueGenericSend+0x72>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <xQueueGenericSend+0x74>
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <xQueueGenericSend+0x8e>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	623b      	str	r3, [r7, #32]
}
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a06:	f001 fb39 	bl	800407c <xTaskGetSchedulerState>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <xQueueGenericSend+0x9e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <xQueueGenericSend+0xa2>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <xQueueGenericSend+0xa4>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <xQueueGenericSend+0xbe>
	__asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	61fb      	str	r3, [r7, #28]
}
 8002a32:	bf00      	nop
 8002a34:	e7fe      	b.n	8002a34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a36:	f002 f97d 	bl	8004d34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d302      	bcc.n	8002a4c <xQueueGenericSend+0xd4>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d129      	bne.n	8002aa0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a52:	f000 fbbb 	bl	80031cc <prvCopyDataToQueue>
 8002a56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d010      	beq.n	8002a82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	3324      	adds	r3, #36	; 0x24
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 f94b 	bl	8003d00 <xTaskRemoveFromEventList>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a70:	4b3f      	ldr	r3, [pc, #252]	; (8002b70 <xQueueGenericSend+0x1f8>)
 8002a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	e00a      	b.n	8002a98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a88:	4b39      	ldr	r3, [pc, #228]	; (8002b70 <xQueueGenericSend+0x1f8>)
 8002a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a98:	f002 f97c 	bl	8004d94 <vPortExitCritical>
				return pdPASS;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e063      	b.n	8002b68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002aa6:	f002 f975 	bl	8004d94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e05c      	b.n	8002b68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d106      	bne.n	8002ac2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f001 f985 	bl	8003dc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ac2:	f002 f967 	bl	8004d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ac6:	f000 fef7 	bl	80038b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002aca:	f002 f933 	bl	8004d34 <vPortEnterCritical>
 8002ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ad4:	b25b      	sxtb	r3, r3
 8002ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ada:	d103      	bne.n	8002ae4 <xQueueGenericSend+0x16c>
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af0:	d103      	bne.n	8002afa <xQueueGenericSend+0x182>
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002afa:	f002 f94b 	bl	8004d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002afe:	1d3a      	adds	r2, r7, #4
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 f974 	bl	8003df4 <xTaskCheckForTimeOut>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d124      	bne.n	8002b5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b14:	f000 fc52 	bl	80033bc <prvIsQueueFull>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d018      	beq.n	8002b50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	3310      	adds	r3, #16
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f001 f89a 	bl	8003c60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b2e:	f000 fbdd 	bl	80032ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b32:	f000 fecf 	bl	80038d4 <xTaskResumeAll>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f47f af7c 	bne.w	8002a36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <xQueueGenericSend+0x1f8>)
 8002b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	e772      	b.n	8002a36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b52:	f000 fbcb 	bl	80032ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b56:	f000 febd 	bl	80038d4 <xTaskResumeAll>
 8002b5a:	e76c      	b.n	8002a36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b5e:	f000 fbc5 	bl	80032ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b62:	f000 feb7 	bl	80038d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3738      	adds	r7, #56	; 0x38
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	e000ed04 	.word	0xe000ed04

08002b74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b090      	sub	sp, #64	; 0x40
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b9e:	bf00      	nop
 8002ba0:	e7fe      	b.n	8002ba0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d103      	bne.n	8002bb0 <xQueueGenericSendFromISR+0x3c>
 8002ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <xQueueGenericSendFromISR+0x40>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <xQueueGenericSendFromISR+0x42>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bcc:	bf00      	nop
 8002bce:	e7fe      	b.n	8002bce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d103      	bne.n	8002bde <xQueueGenericSendFromISR+0x6a>
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <xQueueGenericSendFromISR+0x6e>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <xQueueGenericSendFromISR+0x70>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	623b      	str	r3, [r7, #32]
}
 8002bfa:	bf00      	nop
 8002bfc:	e7fe      	b.n	8002bfc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bfe:	f002 f97b 	bl	8004ef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c02:	f3ef 8211 	mrs	r2, BASEPRI
 8002c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	61fa      	str	r2, [r7, #28]
 8002c18:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c1c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d302      	bcc.n	8002c30 <xQueueGenericSendFromISR+0xbc>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d12f      	bne.n	8002c90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c46:	f000 fac1 	bl	80031cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c52:	d112      	bne.n	8002c7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d016      	beq.n	8002c8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5e:	3324      	adds	r3, #36	; 0x24
 8002c60:	4618      	mov	r0, r3
 8002c62:	f001 f84d 	bl	8003d00 <xTaskRemoveFromEventList>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00e      	beq.n	8002c8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	e007      	b.n	8002c8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c7e:	3301      	adds	r3, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	b25a      	sxtb	r2, r3
 8002c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002c8e:	e001      	b.n	8002c94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c96:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3740      	adds	r7, #64	; 0x40
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b08e      	sub	sp, #56	; 0x38
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	f3bf 8f6f 	isb	sy
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	623b      	str	r3, [r7, #32]
}
 8002cd0:	bf00      	nop
 8002cd2:	e7fe      	b.n	8002cd2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	61fb      	str	r3, [r7, #28]
}
 8002cee:	bf00      	nop
 8002cf0:	e7fe      	b.n	8002cf0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d103      	bne.n	8002d02 <xQueueGiveFromISR+0x58>
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <xQueueGiveFromISR+0x5c>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <xQueueGiveFromISR+0x5e>
 8002d06:	2300      	movs	r3, #0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	61bb      	str	r3, [r7, #24]
}
 8002d1e:	bf00      	nop
 8002d20:	e7fe      	b.n	8002d20 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d22:	f002 f8e9 	bl	8004ef8 <vPortValidateInterruptPriority>
	__asm volatile
 8002d26:	f3ef 8211 	mrs	r2, BASEPRI
 8002d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	617a      	str	r2, [r7, #20]
 8002d3c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002d3e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d22b      	bcs.n	8002daa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d6c:	d112      	bne.n	8002d94 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d016      	beq.n	8002da4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	3324      	adds	r3, #36	; 0x24
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 ffc0 	bl	8003d00 <xTaskRemoveFromEventList>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00e      	beq.n	8002da4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00b      	beq.n	8002da4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	e007      	b.n	8002da4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d98:	3301      	adds	r3, #1
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	b25a      	sxtb	r2, r3
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002da4:	2301      	movs	r3, #1
 8002da6:	637b      	str	r3, [r7, #52]	; 0x34
 8002da8:	e001      	b.n	8002dae <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	637b      	str	r3, [r7, #52]	; 0x34
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f383 8811 	msr	BASEPRI, r3
}
 8002db8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3738      	adds	r7, #56	; 0x38
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08c      	sub	sp, #48	; 0x30
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10a      	bne.n	8002df4 <xQueueReceive+0x30>
	__asm volatile
 8002dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	623b      	str	r3, [r7, #32]
}
 8002df0:	bf00      	nop
 8002df2:	e7fe      	b.n	8002df2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d103      	bne.n	8002e02 <xQueueReceive+0x3e>
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <xQueueReceive+0x42>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <xQueueReceive+0x44>
 8002e06:	2300      	movs	r3, #0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <xQueueReceive+0x5e>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	61fb      	str	r3, [r7, #28]
}
 8002e1e:	bf00      	nop
 8002e20:	e7fe      	b.n	8002e20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e22:	f001 f92b 	bl	800407c <xTaskGetSchedulerState>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <xQueueReceive+0x6e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <xQueueReceive+0x72>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <xQueueReceive+0x74>
 8002e36:	2300      	movs	r3, #0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <xQueueReceive+0x8e>
	__asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	61bb      	str	r3, [r7, #24]
}
 8002e4e:	bf00      	nop
 8002e50:	e7fe      	b.n	8002e50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e52:	f001 ff6f 	bl	8004d34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01f      	beq.n	8002ea2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e66:	f000 fa1b 	bl	80032a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	1e5a      	subs	r2, r3, #1
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00f      	beq.n	8002e9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	3310      	adds	r3, #16
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 ff3e 	bl	8003d00 <xTaskRemoveFromEventList>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <xQueueReceive+0x1bc>)
 8002e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e9a:	f001 ff7b 	bl	8004d94 <vPortExitCritical>
				return pdPASS;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e069      	b.n	8002f76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d103      	bne.n	8002eb0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ea8:	f001 ff74 	bl	8004d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e062      	b.n	8002f76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002eb6:	f107 0310 	add.w	r3, r7, #16
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 ff84 	bl	8003dc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ec4:	f001 ff66 	bl	8004d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ec8:	f000 fcf6 	bl	80038b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ecc:	f001 ff32 	bl	8004d34 <vPortEnterCritical>
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ed6:	b25b      	sxtb	r3, r3
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002edc:	d103      	bne.n	8002ee6 <xQueueReceive+0x122>
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eec:	b25b      	sxtb	r3, r3
 8002eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef2:	d103      	bne.n	8002efc <xQueueReceive+0x138>
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002efc:	f001 ff4a 	bl	8004d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f00:	1d3a      	adds	r2, r7, #4
 8002f02:	f107 0310 	add.w	r3, r7, #16
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 ff73 	bl	8003df4 <xTaskCheckForTimeOut>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d123      	bne.n	8002f5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f16:	f000 fa3b 	bl	8003390 <prvIsQueueEmpty>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d017      	beq.n	8002f50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	3324      	adds	r3, #36	; 0x24
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fe99 	bl	8003c60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f30:	f000 f9dc 	bl	80032ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f34:	f000 fcce 	bl	80038d4 <xTaskResumeAll>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d189      	bne.n	8002e52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f3e:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <xQueueReceive+0x1bc>)
 8002f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	e780      	b.n	8002e52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f52:	f000 f9cb 	bl	80032ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f56:	f000 fcbd 	bl	80038d4 <xTaskResumeAll>
 8002f5a:	e77a      	b.n	8002e52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f5e:	f000 f9c5 	bl	80032ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f62:	f000 fcb7 	bl	80038d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f68:	f000 fa12 	bl	8003390 <prvIsQueueEmpty>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f43f af6f 	beq.w	8002e52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3730      	adds	r7, #48	; 0x30
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	e000ed04 	.word	0xe000ed04

08002f84 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08e      	sub	sp, #56	; 0x38
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002f96:	2300      	movs	r3, #0
 8002f98:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10a      	bne.n	8002fb6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	623b      	str	r3, [r7, #32]
}
 8002fb2:	bf00      	nop
 8002fb4:	e7fe      	b.n	8002fb4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	61fb      	str	r3, [r7, #28]
}
 8002fd0:	bf00      	nop
 8002fd2:	e7fe      	b.n	8002fd2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fd4:	f001 f852 	bl	800407c <xTaskGetSchedulerState>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <xQueueSemaphoreTake+0x60>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <xQueueSemaphoreTake+0x64>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <xQueueSemaphoreTake+0x66>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	61bb      	str	r3, [r7, #24]
}
 8003000:	bf00      	nop
 8003002:	e7fe      	b.n	8003002 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003004:	f001 fe96 	bl	8004d34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	2b00      	cmp	r3, #0
 8003012:	d024      	beq.n	800305e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	1e5a      	subs	r2, r3, #1
 8003018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d104      	bne.n	800302e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003024:	f001 f9a0 	bl	8004368 <pvTaskIncrementMutexHeldCount>
 8003028:	4602      	mov	r2, r0
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00f      	beq.n	8003056 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	3310      	adds	r3, #16
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fe60 	bl	8003d00 <xTaskRemoveFromEventList>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003046:	4b54      	ldr	r3, [pc, #336]	; (8003198 <xQueueSemaphoreTake+0x214>)
 8003048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003056:	f001 fe9d 	bl	8004d94 <vPortExitCritical>
				return pdPASS;
 800305a:	2301      	movs	r3, #1
 800305c:	e097      	b.n	800318e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d111      	bne.n	8003088 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	617b      	str	r3, [r7, #20]
}
 800307c:	bf00      	nop
 800307e:	e7fe      	b.n	800307e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003080:	f001 fe88 	bl	8004d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003084:	2300      	movs	r3, #0
 8003086:	e082      	b.n	800318e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800308e:	f107 030c 	add.w	r3, r7, #12
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fe98 	bl	8003dc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003098:	2301      	movs	r3, #1
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800309c:	f001 fe7a 	bl	8004d94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030a0:	f000 fc0a 	bl	80038b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030a4:	f001 fe46 	bl	8004d34 <vPortEnterCritical>
 80030a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030ae:	b25b      	sxtb	r3, r3
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b4:	d103      	bne.n	80030be <xQueueSemaphoreTake+0x13a>
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030c4:	b25b      	sxtb	r3, r3
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ca:	d103      	bne.n	80030d4 <xQueueSemaphoreTake+0x150>
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030d4:	f001 fe5e 	bl	8004d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030d8:	463a      	mov	r2, r7
 80030da:	f107 030c 	add.w	r3, r7, #12
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fe87 	bl	8003df4 <xTaskCheckForTimeOut>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d132      	bne.n	8003152 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030ee:	f000 f94f 	bl	8003390 <prvIsQueueEmpty>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d026      	beq.n	8003146 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d109      	bne.n	8003114 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003100:	f001 fe18 	bl	8004d34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 ffd5 	bl	80040b8 <xTaskPriorityInherit>
 800310e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003110:	f001 fe40 	bl	8004d94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003116:	3324      	adds	r3, #36	; 0x24
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fd9f 	bl	8003c60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003122:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003124:	f000 f8e2 	bl	80032ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003128:	f000 fbd4 	bl	80038d4 <xTaskResumeAll>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	f47f af68 	bne.w	8003004 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003134:	4b18      	ldr	r3, [pc, #96]	; (8003198 <xQueueSemaphoreTake+0x214>)
 8003136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	e75e      	b.n	8003004 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003148:	f000 f8d0 	bl	80032ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800314c:	f000 fbc2 	bl	80038d4 <xTaskResumeAll>
 8003150:	e758      	b.n	8003004 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003152:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003154:	f000 f8ca 	bl	80032ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003158:	f000 fbbc 	bl	80038d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800315c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800315e:	f000 f917 	bl	8003390 <prvIsQueueEmpty>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	f43f af4d 	beq.w	8003004 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00d      	beq.n	800318c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003170:	f001 fde0 	bl	8004d34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003174:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003176:	f000 f811 	bl	800319c <prvGetDisinheritPriorityAfterTimeout>
 800317a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003182:	4618      	mov	r0, r3
 8003184:	f001 f86e 	bl	8004264 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003188:	f001 fe04 	bl	8004d94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800318c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800318e:	4618      	mov	r0, r3
 8003190:	3738      	adds	r7, #56	; 0x38
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	e000ed04 	.word	0xe000ed04

0800319c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d006      	beq.n	80031ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	e001      	b.n	80031be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80031be:	68fb      	ldr	r3, [r7, #12]
	}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10d      	bne.n	8003206 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d14d      	bne.n	800328e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 ffc6 	bl	8004188 <xTaskPriorityDisinherit>
 80031fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	e043      	b.n	800328e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d119      	bne.n	8003240 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6858      	ldr	r0, [r3, #4]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	461a      	mov	r2, r3
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	f002 f8c2 	bl	80053a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	441a      	add	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	429a      	cmp	r2, r3
 8003234:	d32b      	bcc.n	800328e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	e026      	b.n	800328e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	68d8      	ldr	r0, [r3, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	461a      	mov	r2, r3
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	f002 f8a8 	bl	80053a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	425b      	negs	r3, r3
 800325a:	441a      	add	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d207      	bcs.n	800327c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	425b      	negs	r3, r3
 8003276:	441a      	add	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d105      	bne.n	800328e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	3b01      	subs	r3, #1
 800328c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003296:	697b      	ldr	r3, [r7, #20]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d018      	beq.n	80032e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	441a      	add	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d303      	bcc.n	80032d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68d9      	ldr	r1, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	461a      	mov	r2, r3
 80032de:	6838      	ldr	r0, [r7, #0]
 80032e0:	f002 f85e 	bl	80053a0 <memcpy>
	}
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032f4:	f001 fd1e 	bl	8004d34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003300:	e011      	b.n	8003326 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	2b00      	cmp	r3, #0
 8003308:	d012      	beq.n	8003330 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3324      	adds	r3, #36	; 0x24
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fcf6 	bl	8003d00 <xTaskRemoveFromEventList>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800331a:	f000 fdcd 	bl	8003eb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	3b01      	subs	r3, #1
 8003322:	b2db      	uxtb	r3, r3
 8003324:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800332a:	2b00      	cmp	r3, #0
 800332c:	dce9      	bgt.n	8003302 <prvUnlockQueue+0x16>
 800332e:	e000      	b.n	8003332 <prvUnlockQueue+0x46>
					break;
 8003330:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	22ff      	movs	r2, #255	; 0xff
 8003336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800333a:	f001 fd2b 	bl	8004d94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800333e:	f001 fcf9 	bl	8004d34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003348:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800334a:	e011      	b.n	8003370 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d012      	beq.n	800337a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3310      	adds	r3, #16
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fcd1 	bl	8003d00 <xTaskRemoveFromEventList>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003364:	f000 fda8 	bl	8003eb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003368:	7bbb      	ldrb	r3, [r7, #14]
 800336a:	3b01      	subs	r3, #1
 800336c:	b2db      	uxtb	r3, r3
 800336e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003374:	2b00      	cmp	r3, #0
 8003376:	dce9      	bgt.n	800334c <prvUnlockQueue+0x60>
 8003378:	e000      	b.n	800337c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800337a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	22ff      	movs	r2, #255	; 0xff
 8003380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003384:	f001 fd06 	bl	8004d94 <vPortExitCritical>
}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003398:	f001 fccc 	bl	8004d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033a4:	2301      	movs	r3, #1
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	e001      	b.n	80033ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ae:	f001 fcf1 	bl	8004d94 <vPortExitCritical>

	return xReturn;
 80033b2:	68fb      	ldr	r3, [r7, #12]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033c4:	f001 fcb6 	bl	8004d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d102      	bne.n	80033da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e001      	b.n	80033de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033de:	f001 fcd9 	bl	8004d94 <vPortExitCritical>

	return xReturn;
 80033e2:	68fb      	ldr	r3, [r7, #12]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	e014      	b.n	8003426 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033fc:	4a0f      	ldr	r2, [pc, #60]	; (800343c <vQueueAddToRegistry+0x50>)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003408:	490c      	ldr	r1, [pc, #48]	; (800343c <vQueueAddToRegistry+0x50>)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003412:	4a0a      	ldr	r2, [pc, #40]	; (800343c <vQueueAddToRegistry+0x50>)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800341e:	e006      	b.n	800342e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3301      	adds	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b07      	cmp	r3, #7
 800342a:	d9e7      	bls.n	80033fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800342c:	bf00      	nop
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000830 	.word	0x20000830

08003440 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003450:	f001 fc70 	bl	8004d34 <vPortEnterCritical>
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800345a:	b25b      	sxtb	r3, r3
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003460:	d103      	bne.n	800346a <vQueueWaitForMessageRestricted+0x2a>
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003470:	b25b      	sxtb	r3, r3
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003476:	d103      	bne.n	8003480 <vQueueWaitForMessageRestricted+0x40>
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003480:	f001 fc88 	bl	8004d94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	3324      	adds	r3, #36	; 0x24
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fc07 	bl	8003ca8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800349a:	6978      	ldr	r0, [r7, #20]
 800349c:	f7ff ff26 	bl	80032ec <prvUnlockQueue>
	}
 80034a0:	bf00      	nop
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08e      	sub	sp, #56	; 0x38
 80034ac:	af04      	add	r7, sp, #16
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	623b      	str	r3, [r7, #32]
}
 80034ce:	bf00      	nop
 80034d0:	e7fe      	b.n	80034d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <xTaskCreateStatic+0x46>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	61fb      	str	r3, [r7, #28]
}
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034ee:	235c      	movs	r3, #92	; 0x5c
 80034f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b5c      	cmp	r3, #92	; 0x5c
 80034f6:	d00a      	beq.n	800350e <xTaskCreateStatic+0x66>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	61bb      	str	r3, [r7, #24]
}
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800350e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003512:	2b00      	cmp	r3, #0
 8003514:	d01e      	beq.n	8003554 <xTaskCreateStatic+0xac>
 8003516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01b      	beq.n	8003554 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003524:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	2202      	movs	r2, #2
 800352a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800352e:	2300      	movs	r3, #0
 8003530:	9303      	str	r3, [sp, #12]
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	9302      	str	r3, [sp, #8]
 8003536:	f107 0314 	add.w	r3, r7, #20
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f850 	bl	80035ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800354c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800354e:	f000 f8dd 	bl	800370c <prvAddNewTaskToReadyList>
 8003552:	e001      	b.n	8003558 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003558:	697b      	ldr	r3, [r7, #20]
	}
 800355a:	4618      	mov	r0, r3
 800355c:	3728      	adds	r7, #40	; 0x28
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003562:	b580      	push	{r7, lr}
 8003564:	b08c      	sub	sp, #48	; 0x30
 8003566:	af04      	add	r7, sp, #16
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4618      	mov	r0, r3
 8003578:	f001 fcfe 	bl	8004f78 <pvPortMalloc>
 800357c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00e      	beq.n	80035a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003584:	205c      	movs	r0, #92	; 0x5c
 8003586:	f001 fcf7 	bl	8004f78 <pvPortMalloc>
 800358a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
 8003598:	e005      	b.n	80035a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800359a:	6978      	ldr	r0, [r7, #20]
 800359c:	f001 fdb8 	bl	8005110 <vPortFree>
 80035a0:	e001      	b.n	80035a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d017      	beq.n	80035dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035b4:	88fa      	ldrh	r2, [r7, #6]
 80035b6:	2300      	movs	r3, #0
 80035b8:	9303      	str	r3, [sp, #12]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	9302      	str	r3, [sp, #8]
 80035be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f80e 	bl	80035ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035d0:	69f8      	ldr	r0, [r7, #28]
 80035d2:	f000 f89b 	bl	800370c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035d6:	2301      	movs	r3, #1
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	e002      	b.n	80035e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035e2:	69bb      	ldr	r3, [r7, #24]
	}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	461a      	mov	r2, r3
 8003604:	21a5      	movs	r1, #165	; 0xa5
 8003606:	f001 fed9 	bl	80053bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003614:	3b01      	subs	r3, #1
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f023 0307 	bic.w	r3, r3, #7
 8003622:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <prvInitialiseNewTask+0x58>
	__asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	617b      	str	r3, [r7, #20]
}
 8003640:	bf00      	nop
 8003642:	e7fe      	b.n	8003642 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d01f      	beq.n	800368a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	e012      	b.n	8003676 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	7819      	ldrb	r1, [r3, #0]
 8003658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	4413      	add	r3, r2
 800365e:	3334      	adds	r3, #52	; 0x34
 8003660:	460a      	mov	r2, r1
 8003662:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	3301      	adds	r3, #1
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	2b0f      	cmp	r3, #15
 800367a:	d9e9      	bls.n	8003650 <prvInitialiseNewTask+0x64>
 800367c:	e000      	b.n	8003680 <prvInitialiseNewTask+0x94>
			{
				break;
 800367e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003688:	e003      	b.n	8003692 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	2b37      	cmp	r3, #55	; 0x37
 8003696:	d901      	bls.n	800369c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003698:	2337      	movs	r3, #55	; 0x37
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	2200      	movs	r2, #0
 80036ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	3304      	adds	r3, #4
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe ff8e 	bl	80025d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	3318      	adds	r3, #24
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fe ff89 	bl	80025d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036da:	2200      	movs	r2, #0
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	68f9      	ldr	r1, [r7, #12]
 80036ea:	69b8      	ldr	r0, [r7, #24]
 80036ec:	f001 f9f2 	bl	8004ad4 <pxPortInitialiseStack>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003700:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003702:	bf00      	nop
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003714:	f001 fb0e 	bl	8004d34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003718:	4b2d      	ldr	r3, [pc, #180]	; (80037d0 <prvAddNewTaskToReadyList+0xc4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3301      	adds	r3, #1
 800371e:	4a2c      	ldr	r2, [pc, #176]	; (80037d0 <prvAddNewTaskToReadyList+0xc4>)
 8003720:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003722:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <prvAddNewTaskToReadyList+0xc8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800372a:	4a2a      	ldr	r2, [pc, #168]	; (80037d4 <prvAddNewTaskToReadyList+0xc8>)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003730:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <prvAddNewTaskToReadyList+0xc4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d110      	bne.n	800375a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003738:	f000 fbe2 	bl	8003f00 <prvInitialiseTaskLists>
 800373c:	e00d      	b.n	800375a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800373e:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <prvAddNewTaskToReadyList+0xcc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003746:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <prvAddNewTaskToReadyList+0xc8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	429a      	cmp	r2, r3
 8003752:	d802      	bhi.n	800375a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003754:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <prvAddNewTaskToReadyList+0xc8>)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800375a:	4b20      	ldr	r3, [pc, #128]	; (80037dc <prvAddNewTaskToReadyList+0xd0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3301      	adds	r3, #1
 8003760:	4a1e      	ldr	r2, [pc, #120]	; (80037dc <prvAddNewTaskToReadyList+0xd0>)
 8003762:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003764:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <prvAddNewTaskToReadyList+0xd0>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <prvAddNewTaskToReadyList+0xd4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d903      	bls.n	8003780 <prvAddNewTaskToReadyList+0x74>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <prvAddNewTaskToReadyList+0xd4>)
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <prvAddNewTaskToReadyList+0xd8>)
 800378e:	441a      	add	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3304      	adds	r3, #4
 8003794:	4619      	mov	r1, r3
 8003796:	4610      	mov	r0, r2
 8003798:	f7fe ff29 	bl	80025ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800379c:	f001 fafa 	bl	8004d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037a0:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <prvAddNewTaskToReadyList+0xcc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00e      	beq.n	80037c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <prvAddNewTaskToReadyList+0xc8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d207      	bcs.n	80037c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037b6:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <prvAddNewTaskToReadyList+0xdc>)
 80037b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000d44 	.word	0x20000d44
 80037d4:	20000870 	.word	0x20000870
 80037d8:	20000d50 	.word	0x20000d50
 80037dc:	20000d60 	.word	0x20000d60
 80037e0:	20000d4c 	.word	0x20000d4c
 80037e4:	20000874 	.word	0x20000874
 80037e8:	e000ed04 	.word	0xe000ed04

080037ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037fa:	463a      	mov	r2, r7
 80037fc:	1d39      	adds	r1, r7, #4
 80037fe:	f107 0308 	add.w	r3, r7, #8
 8003802:	4618      	mov	r0, r3
 8003804:	f7fe fe92 	bl	800252c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003808:	6839      	ldr	r1, [r7, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	9202      	str	r2, [sp, #8]
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	2300      	movs	r3, #0
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2300      	movs	r3, #0
 8003818:	460a      	mov	r2, r1
 800381a:	4921      	ldr	r1, [pc, #132]	; (80038a0 <vTaskStartScheduler+0xb4>)
 800381c:	4821      	ldr	r0, [pc, #132]	; (80038a4 <vTaskStartScheduler+0xb8>)
 800381e:	f7ff fe43 	bl	80034a8 <xTaskCreateStatic>
 8003822:	4603      	mov	r3, r0
 8003824:	4a20      	ldr	r2, [pc, #128]	; (80038a8 <vTaskStartScheduler+0xbc>)
 8003826:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003828:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <vTaskStartScheduler+0xbc>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003830:	2301      	movs	r3, #1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	e001      	b.n	800383a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d102      	bne.n	8003846 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003840:	f000 fdfa 	bl	8004438 <xTimerCreateTimerTask>
 8003844:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d116      	bne.n	800387a <vTaskStartScheduler+0x8e>
	__asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	613b      	str	r3, [r7, #16]
}
 800385e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003860:	4b12      	ldr	r3, [pc, #72]	; (80038ac <vTaskStartScheduler+0xc0>)
 8003862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003866:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <vTaskStartScheduler+0xc4>)
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800386e:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <vTaskStartScheduler+0xc8>)
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003874:	f001 f9bc 	bl	8004bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003878:	e00e      	b.n	8003898 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003880:	d10a      	bne.n	8003898 <vTaskStartScheduler+0xac>
	__asm volatile
 8003882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	60fb      	str	r3, [r7, #12]
}
 8003894:	bf00      	nop
 8003896:	e7fe      	b.n	8003896 <vTaskStartScheduler+0xaa>
}
 8003898:	bf00      	nop
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	08005cd0 	.word	0x08005cd0
 80038a4:	08003ed1 	.word	0x08003ed1
 80038a8:	20000d68 	.word	0x20000d68
 80038ac:	20000d64 	.word	0x20000d64
 80038b0:	20000d50 	.word	0x20000d50
 80038b4:	20000d48 	.word	0x20000d48

080038b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038bc:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <vTaskSuspendAll+0x18>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3301      	adds	r3, #1
 80038c2:	4a03      	ldr	r2, [pc, #12]	; (80038d0 <vTaskSuspendAll+0x18>)
 80038c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80038c6:	bf00      	nop
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	20000d6c 	.word	0x20000d6c

080038d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038e2:	4b42      	ldr	r3, [pc, #264]	; (80039ec <xTaskResumeAll+0x118>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10a      	bne.n	8003900 <xTaskResumeAll+0x2c>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	603b      	str	r3, [r7, #0]
}
 80038fc:	bf00      	nop
 80038fe:	e7fe      	b.n	80038fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003900:	f001 fa18 	bl	8004d34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003904:	4b39      	ldr	r3, [pc, #228]	; (80039ec <xTaskResumeAll+0x118>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3b01      	subs	r3, #1
 800390a:	4a38      	ldr	r2, [pc, #224]	; (80039ec <xTaskResumeAll+0x118>)
 800390c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800390e:	4b37      	ldr	r3, [pc, #220]	; (80039ec <xTaskResumeAll+0x118>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d162      	bne.n	80039dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003916:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <xTaskResumeAll+0x11c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d05e      	beq.n	80039dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800391e:	e02f      	b.n	8003980 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003920:	4b34      	ldr	r3, [pc, #208]	; (80039f4 <xTaskResumeAll+0x120>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3318      	adds	r3, #24
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe febb 	bl	80026a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3304      	adds	r3, #4
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe feb6 	bl	80026a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003940:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <xTaskResumeAll+0x124>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d903      	bls.n	8003950 <xTaskResumeAll+0x7c>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <xTaskResumeAll+0x124>)
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4a27      	ldr	r2, [pc, #156]	; (80039fc <xTaskResumeAll+0x128>)
 800395e:	441a      	add	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3304      	adds	r3, #4
 8003964:	4619      	mov	r1, r3
 8003966:	4610      	mov	r0, r2
 8003968:	f7fe fe41 	bl	80025ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003970:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <xTaskResumeAll+0x12c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	429a      	cmp	r2, r3
 8003978:	d302      	bcc.n	8003980 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800397a:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <xTaskResumeAll+0x130>)
 800397c:	2201      	movs	r2, #1
 800397e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003980:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <xTaskResumeAll+0x120>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1cb      	bne.n	8003920 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800398e:	f000 fb55 	bl	800403c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <xTaskResumeAll+0x134>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d010      	beq.n	80039c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800399e:	f000 f847 	bl	8003a30 <xTaskIncrementTick>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <xTaskResumeAll+0x130>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3b01      	subs	r3, #1
 80039b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f1      	bne.n	800399e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80039ba:	4b13      	ldr	r3, [pc, #76]	; (8003a08 <xTaskResumeAll+0x134>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039c0:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <xTaskResumeAll+0x130>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d009      	beq.n	80039dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039c8:	2301      	movs	r3, #1
 80039ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <xTaskResumeAll+0x138>)
 80039ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039dc:	f001 f9da 	bl	8004d94 <vPortExitCritical>

	return xAlreadyYielded;
 80039e0:	68bb      	ldr	r3, [r7, #8]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20000d6c 	.word	0x20000d6c
 80039f0:	20000d44 	.word	0x20000d44
 80039f4:	20000d04 	.word	0x20000d04
 80039f8:	20000d4c 	.word	0x20000d4c
 80039fc:	20000874 	.word	0x20000874
 8003a00:	20000870 	.word	0x20000870
 8003a04:	20000d58 	.word	0x20000d58
 8003a08:	20000d54 	.word	0x20000d54
 8003a0c:	e000ed04 	.word	0xe000ed04

08003a10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <xTaskGetTickCount+0x1c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a1c:	687b      	ldr	r3, [r7, #4]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000d48 	.word	0x20000d48

08003a30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a3a:	4b4f      	ldr	r3, [pc, #316]	; (8003b78 <xTaskIncrementTick+0x148>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f040 808f 	bne.w	8003b62 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a44:	4b4d      	ldr	r3, [pc, #308]	; (8003b7c <xTaskIncrementTick+0x14c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a4c:	4a4b      	ldr	r2, [pc, #300]	; (8003b7c <xTaskIncrementTick+0x14c>)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d120      	bne.n	8003a9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a58:	4b49      	ldr	r3, [pc, #292]	; (8003b80 <xTaskIncrementTick+0x150>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <xTaskIncrementTick+0x48>
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	603b      	str	r3, [r7, #0]
}
 8003a74:	bf00      	nop
 8003a76:	e7fe      	b.n	8003a76 <xTaskIncrementTick+0x46>
 8003a78:	4b41      	ldr	r3, [pc, #260]	; (8003b80 <xTaskIncrementTick+0x150>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	4b41      	ldr	r3, [pc, #260]	; (8003b84 <xTaskIncrementTick+0x154>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a3f      	ldr	r2, [pc, #252]	; (8003b80 <xTaskIncrementTick+0x150>)
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	4a3f      	ldr	r2, [pc, #252]	; (8003b84 <xTaskIncrementTick+0x154>)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	4b3e      	ldr	r3, [pc, #248]	; (8003b88 <xTaskIncrementTick+0x158>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3301      	adds	r3, #1
 8003a92:	4a3d      	ldr	r2, [pc, #244]	; (8003b88 <xTaskIncrementTick+0x158>)
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	f000 fad1 	bl	800403c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a9a:	4b3c      	ldr	r3, [pc, #240]	; (8003b8c <xTaskIncrementTick+0x15c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d349      	bcc.n	8003b38 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aa4:	4b36      	ldr	r3, [pc, #216]	; (8003b80 <xTaskIncrementTick+0x150>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d104      	bne.n	8003ab8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aae:	4b37      	ldr	r3, [pc, #220]	; (8003b8c <xTaskIncrementTick+0x15c>)
 8003ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ab4:	601a      	str	r2, [r3, #0]
					break;
 8003ab6:	e03f      	b.n	8003b38 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ab8:	4b31      	ldr	r3, [pc, #196]	; (8003b80 <xTaskIncrementTick+0x150>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d203      	bcs.n	8003ad8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ad0:	4a2e      	ldr	r2, [pc, #184]	; (8003b8c <xTaskIncrementTick+0x15c>)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ad6:	e02f      	b.n	8003b38 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	3304      	adds	r3, #4
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe fde3 	bl	80026a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d004      	beq.n	8003af4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3318      	adds	r3, #24
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe fdda 	bl	80026a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	4b25      	ldr	r3, [pc, #148]	; (8003b90 <xTaskIncrementTick+0x160>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d903      	bls.n	8003b08 <xTaskIncrementTick+0xd8>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <xTaskIncrementTick+0x160>)
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <xTaskIncrementTick+0x164>)
 8003b16:	441a      	add	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	f7fe fd65 	bl	80025ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b28:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <xTaskIncrementTick+0x168>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d3b8      	bcc.n	8003aa4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b32:	2301      	movs	r3, #1
 8003b34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b36:	e7b5      	b.n	8003aa4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b38:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <xTaskIncrementTick+0x168>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3e:	4915      	ldr	r1, [pc, #84]	; (8003b94 <xTaskIncrementTick+0x164>)
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d901      	bls.n	8003b54 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003b50:	2301      	movs	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b54:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <xTaskIncrementTick+0x16c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d007      	beq.n	8003b6c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	e004      	b.n	8003b6c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b62:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <xTaskIncrementTick+0x170>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3301      	adds	r3, #1
 8003b68:	4a0d      	ldr	r2, [pc, #52]	; (8003ba0 <xTaskIncrementTick+0x170>)
 8003b6a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b6c:	697b      	ldr	r3, [r7, #20]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000d6c 	.word	0x20000d6c
 8003b7c:	20000d48 	.word	0x20000d48
 8003b80:	20000cfc 	.word	0x20000cfc
 8003b84:	20000d00 	.word	0x20000d00
 8003b88:	20000d5c 	.word	0x20000d5c
 8003b8c:	20000d64 	.word	0x20000d64
 8003b90:	20000d4c 	.word	0x20000d4c
 8003b94:	20000874 	.word	0x20000874
 8003b98:	20000870 	.word	0x20000870
 8003b9c:	20000d58 	.word	0x20000d58
 8003ba0:	20000d54 	.word	0x20000d54

08003ba4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003baa:	4b28      	ldr	r3, [pc, #160]	; (8003c4c <vTaskSwitchContext+0xa8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bb2:	4b27      	ldr	r3, [pc, #156]	; (8003c50 <vTaskSwitchContext+0xac>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bb8:	e041      	b.n	8003c3e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003bba:	4b25      	ldr	r3, [pc, #148]	; (8003c50 <vTaskSwitchContext+0xac>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bc0:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <vTaskSwitchContext+0xb0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	e010      	b.n	8003bea <vTaskSwitchContext+0x46>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10a      	bne.n	8003be4 <vTaskSwitchContext+0x40>
	__asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	607b      	str	r3, [r7, #4]
}
 8003be0:	bf00      	nop
 8003be2:	e7fe      	b.n	8003be2 <vTaskSwitchContext+0x3e>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	491b      	ldr	r1, [pc, #108]	; (8003c58 <vTaskSwitchContext+0xb4>)
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0e4      	beq.n	8003bc8 <vTaskSwitchContext+0x24>
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <vTaskSwitchContext+0xb4>)
 8003c0a:	4413      	add	r3, r2
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	605a      	str	r2, [r3, #4]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	3308      	adds	r3, #8
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d104      	bne.n	8003c2e <vTaskSwitchContext+0x8a>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4a09      	ldr	r2, [pc, #36]	; (8003c5c <vTaskSwitchContext+0xb8>)
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4a06      	ldr	r2, [pc, #24]	; (8003c54 <vTaskSwitchContext+0xb0>)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6013      	str	r3, [r2, #0]
}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000d6c 	.word	0x20000d6c
 8003c50:	20000d58 	.word	0x20000d58
 8003c54:	20000d4c 	.word	0x20000d4c
 8003c58:	20000874 	.word	0x20000874
 8003c5c:	20000870 	.word	0x20000870

08003c60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	60fb      	str	r3, [r7, #12]
}
 8003c82:	bf00      	nop
 8003c84:	e7fe      	b.n	8003c84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c86:	4b07      	ldr	r3, [pc, #28]	; (8003ca4 <vTaskPlaceOnEventList+0x44>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3318      	adds	r3, #24
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fe fcd1 	bl	8002636 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c94:	2101      	movs	r1, #1
 8003c96:	6838      	ldr	r0, [r7, #0]
 8003c98:	f000 fb7a 	bl	8004390 <prvAddCurrentTaskToDelayedList>
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000870 	.word	0x20000870

08003ca8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	617b      	str	r3, [r7, #20]
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <vTaskPlaceOnEventListRestricted+0x54>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3318      	adds	r3, #24
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f7fe fc88 	bl	80025ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ce8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	68b8      	ldr	r0, [r7, #8]
 8003cee:	f000 fb4f 	bl	8004390 <prvAddCurrentTaskToDelayedList>
	}
 8003cf2:	bf00      	nop
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000870 	.word	0x20000870

08003d00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	60fb      	str	r3, [r7, #12]
}
 8003d28:	bf00      	nop
 8003d2a:	e7fe      	b.n	8003d2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	3318      	adds	r3, #24
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fe fcb9 	bl	80026a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d36:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <xTaskRemoveFromEventList+0xb0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d11d      	bne.n	8003d7a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	3304      	adds	r3, #4
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fcb0 	bl	80026a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <xTaskRemoveFromEventList+0xb4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d903      	bls.n	8003d5c <xTaskRemoveFromEventList+0x5c>
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	4a16      	ldr	r2, [pc, #88]	; (8003db4 <xTaskRemoveFromEventList+0xb4>)
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4a13      	ldr	r2, [pc, #76]	; (8003db8 <xTaskRemoveFromEventList+0xb8>)
 8003d6a:	441a      	add	r2, r3
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f7fe fc3b 	bl	80025ee <vListInsertEnd>
 8003d78:	e005      	b.n	8003d86 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	3318      	adds	r3, #24
 8003d7e:	4619      	mov	r1, r3
 8003d80:	480e      	ldr	r0, [pc, #56]	; (8003dbc <xTaskRemoveFromEventList+0xbc>)
 8003d82:	f7fe fc34 	bl	80025ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <xTaskRemoveFromEventList+0xc0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d905      	bls.n	8003da0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d94:	2301      	movs	r3, #1
 8003d96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <xTaskRemoveFromEventList+0xc4>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	e001      	b.n	8003da4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003da4:	697b      	ldr	r3, [r7, #20]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000d6c 	.word	0x20000d6c
 8003db4:	20000d4c 	.word	0x20000d4c
 8003db8:	20000874 	.word	0x20000874
 8003dbc:	20000d04 	.word	0x20000d04
 8003dc0:	20000870 	.word	0x20000870
 8003dc4:	20000d58 	.word	0x20000d58

08003dc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003dd0:	4b06      	ldr	r3, [pc, #24]	; (8003dec <vTaskInternalSetTimeOutState+0x24>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <vTaskInternalSetTimeOutState+0x28>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	605a      	str	r2, [r3, #4]
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	20000d5c 	.word	0x20000d5c
 8003df0:	20000d48 	.word	0x20000d48

08003df4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10a      	bne.n	8003e1a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	613b      	str	r3, [r7, #16]
}
 8003e16:	bf00      	nop
 8003e18:	e7fe      	b.n	8003e18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	60fb      	str	r3, [r7, #12]
}
 8003e32:	bf00      	nop
 8003e34:	e7fe      	b.n	8003e34 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003e36:	f000 ff7d 	bl	8004d34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e3a:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <xTaskCheckForTimeOut+0xbc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e52:	d102      	bne.n	8003e5a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	e023      	b.n	8003ea2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <xTaskCheckForTimeOut+0xc0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d007      	beq.n	8003e76 <xTaskCheckForTimeOut+0x82>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d302      	bcc.n	8003e76 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e70:	2301      	movs	r3, #1
 8003e72:	61fb      	str	r3, [r7, #28]
 8003e74:	e015      	b.n	8003ea2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d20b      	bcs.n	8003e98 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	1ad2      	subs	r2, r2, r3
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff ff9b 	bl	8003dc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
 8003e96:	e004      	b.n	8003ea2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003ea2:	f000 ff77 	bl	8004d94 <vPortExitCritical>

	return xReturn;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3720      	adds	r7, #32
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000d48 	.word	0x20000d48
 8003eb4:	20000d5c 	.word	0x20000d5c

08003eb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ebc:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <vTaskMissedYield+0x14>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
}
 8003ec2:	bf00      	nop
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	20000d58 	.word	0x20000d58

08003ed0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ed8:	f000 f852 	bl	8003f80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003edc:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <prvIdleTask+0x28>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d9f9      	bls.n	8003ed8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <prvIdleTask+0x2c>)
 8003ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ef4:	e7f0      	b.n	8003ed8 <prvIdleTask+0x8>
 8003ef6:	bf00      	nop
 8003ef8:	20000874 	.word	0x20000874
 8003efc:	e000ed04 	.word	0xe000ed04

08003f00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f06:	2300      	movs	r3, #0
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	e00c      	b.n	8003f26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4a12      	ldr	r2, [pc, #72]	; (8003f60 <prvInitialiseTaskLists+0x60>)
 8003f18:	4413      	add	r3, r2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fe fb3a 	bl	8002594 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3301      	adds	r3, #1
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b37      	cmp	r3, #55	; 0x37
 8003f2a:	d9ef      	bls.n	8003f0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f2c:	480d      	ldr	r0, [pc, #52]	; (8003f64 <prvInitialiseTaskLists+0x64>)
 8003f2e:	f7fe fb31 	bl	8002594 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f32:	480d      	ldr	r0, [pc, #52]	; (8003f68 <prvInitialiseTaskLists+0x68>)
 8003f34:	f7fe fb2e 	bl	8002594 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f38:	480c      	ldr	r0, [pc, #48]	; (8003f6c <prvInitialiseTaskLists+0x6c>)
 8003f3a:	f7fe fb2b 	bl	8002594 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f3e:	480c      	ldr	r0, [pc, #48]	; (8003f70 <prvInitialiseTaskLists+0x70>)
 8003f40:	f7fe fb28 	bl	8002594 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f44:	480b      	ldr	r0, [pc, #44]	; (8003f74 <prvInitialiseTaskLists+0x74>)
 8003f46:	f7fe fb25 	bl	8002594 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <prvInitialiseTaskLists+0x78>)
 8003f4c:	4a05      	ldr	r2, [pc, #20]	; (8003f64 <prvInitialiseTaskLists+0x64>)
 8003f4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f50:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <prvInitialiseTaskLists+0x7c>)
 8003f52:	4a05      	ldr	r2, [pc, #20]	; (8003f68 <prvInitialiseTaskLists+0x68>)
 8003f54:	601a      	str	r2, [r3, #0]
}
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000874 	.word	0x20000874
 8003f64:	20000cd4 	.word	0x20000cd4
 8003f68:	20000ce8 	.word	0x20000ce8
 8003f6c:	20000d04 	.word	0x20000d04
 8003f70:	20000d18 	.word	0x20000d18
 8003f74:	20000d30 	.word	0x20000d30
 8003f78:	20000cfc 	.word	0x20000cfc
 8003f7c:	20000d00 	.word	0x20000d00

08003f80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f86:	e019      	b.n	8003fbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f88:	f000 fed4 	bl	8004d34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f8c:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <prvCheckTasksWaitingTermination+0x50>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fe fb85 	bl	80026a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	; (8003fd4 <prvCheckTasksWaitingTermination+0x54>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	4a0b      	ldr	r2, [pc, #44]	; (8003fd4 <prvCheckTasksWaitingTermination+0x54>)
 8003fa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <prvCheckTasksWaitingTermination+0x58>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <prvCheckTasksWaitingTermination+0x58>)
 8003fb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003fb2:	f000 feef 	bl	8004d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f810 	bl	8003fdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fbc:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <prvCheckTasksWaitingTermination+0x58>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e1      	bne.n	8003f88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000d18 	.word	0x20000d18
 8003fd4:	20000d44 	.word	0x20000d44
 8003fd8:	20000d2c 	.word	0x20000d2c

08003fdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d108      	bne.n	8004000 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f001 f88c 	bl	8005110 <vPortFree>
				vPortFree( pxTCB );
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f001 f889 	bl	8005110 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ffe:	e018      	b.n	8004032 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004006:	2b01      	cmp	r3, #1
 8004008:	d103      	bne.n	8004012 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f001 f880 	bl	8005110 <vPortFree>
	}
 8004010:	e00f      	b.n	8004032 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004018:	2b02      	cmp	r3, #2
 800401a:	d00a      	beq.n	8004032 <prvDeleteTCB+0x56>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	60fb      	str	r3, [r7, #12]
}
 800402e:	bf00      	nop
 8004030:	e7fe      	b.n	8004030 <prvDeleteTCB+0x54>
	}
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004042:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <prvResetNextTaskUnblockTime+0x38>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800404c:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <prvResetNextTaskUnblockTime+0x3c>)
 800404e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004052:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004054:	e008      	b.n	8004068 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <prvResetNextTaskUnblockTime+0x38>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	4a04      	ldr	r2, [pc, #16]	; (8004078 <prvResetNextTaskUnblockTime+0x3c>)
 8004066:	6013      	str	r3, [r2, #0]
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	20000cfc 	.word	0x20000cfc
 8004078:	20000d64 	.word	0x20000d64

0800407c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004082:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <xTaskGetSchedulerState+0x34>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d102      	bne.n	8004090 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800408a:	2301      	movs	r3, #1
 800408c:	607b      	str	r3, [r7, #4]
 800408e:	e008      	b.n	80040a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004090:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <xTaskGetSchedulerState+0x38>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d102      	bne.n	800409e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004098:	2302      	movs	r3, #2
 800409a:	607b      	str	r3, [r7, #4]
 800409c:	e001      	b.n	80040a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800409e:	2300      	movs	r3, #0
 80040a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040a2:	687b      	ldr	r3, [r7, #4]
	}
 80040a4:	4618      	mov	r0, r3
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	20000d50 	.word	0x20000d50
 80040b4:	20000d6c 	.word	0x20000d6c

080040b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d051      	beq.n	8004172 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d2:	4b2a      	ldr	r3, [pc, #168]	; (800417c <xTaskPriorityInherit+0xc4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	429a      	cmp	r2, r3
 80040da:	d241      	bcs.n	8004160 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	db06      	blt.n	80040f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040e4:	4b25      	ldr	r3, [pc, #148]	; (800417c <xTaskPriorityInherit+0xc4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	6959      	ldr	r1, [r3, #20]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4a1f      	ldr	r2, [pc, #124]	; (8004180 <xTaskPriorityInherit+0xc8>)
 8004104:	4413      	add	r3, r2
 8004106:	4299      	cmp	r1, r3
 8004108:	d122      	bne.n	8004150 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	3304      	adds	r3, #4
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe faca 	bl	80026a8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004114:	4b19      	ldr	r3, [pc, #100]	; (800417c <xTaskPriorityInherit+0xc4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004122:	4b18      	ldr	r3, [pc, #96]	; (8004184 <xTaskPriorityInherit+0xcc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d903      	bls.n	8004132 <xTaskPriorityInherit+0x7a>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	4a15      	ldr	r2, [pc, #84]	; (8004184 <xTaskPriorityInherit+0xcc>)
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4a10      	ldr	r2, [pc, #64]	; (8004180 <xTaskPriorityInherit+0xc8>)
 8004140:	441a      	add	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	3304      	adds	r3, #4
 8004146:	4619      	mov	r1, r3
 8004148:	4610      	mov	r0, r2
 800414a:	f7fe fa50 	bl	80025ee <vListInsertEnd>
 800414e:	e004      	b.n	800415a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004150:	4b0a      	ldr	r3, [pc, #40]	; (800417c <xTaskPriorityInherit+0xc4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800415a:	2301      	movs	r3, #1
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e008      	b.n	8004172 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <xTaskPriorityInherit+0xc4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	429a      	cmp	r2, r3
 800416c:	d201      	bcs.n	8004172 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800416e:	2301      	movs	r3, #1
 8004170:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004172:	68fb      	ldr	r3, [r7, #12]
	}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20000870 	.word	0x20000870
 8004180:	20000874 	.word	0x20000874
 8004184:	20000d4c 	.word	0x20000d4c

08004188 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d056      	beq.n	800424c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800419e:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <xTaskPriorityDisinherit+0xd0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d00a      	beq.n	80041be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	60fb      	str	r3, [r7, #12]
}
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	60bb      	str	r3, [r7, #8]
}
 80041d8:	bf00      	nop
 80041da:	e7fe      	b.n	80041da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e0:	1e5a      	subs	r2, r3, #1
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d02c      	beq.n	800424c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d128      	bne.n	800424c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe fa52 	bl	80026a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421c:	4b0f      	ldr	r3, [pc, #60]	; (800425c <xTaskPriorityDisinherit+0xd4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d903      	bls.n	800422c <xTaskPriorityDisinherit+0xa4>
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	4a0c      	ldr	r2, [pc, #48]	; (800425c <xTaskPriorityDisinherit+0xd4>)
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4a09      	ldr	r2, [pc, #36]	; (8004260 <xTaskPriorityDisinherit+0xd8>)
 800423a:	441a      	add	r2, r3
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	3304      	adds	r3, #4
 8004240:	4619      	mov	r1, r3
 8004242:	4610      	mov	r0, r2
 8004244:	f7fe f9d3 	bl	80025ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004248:	2301      	movs	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800424c:	697b      	ldr	r3, [r7, #20]
	}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000870 	.word	0x20000870
 800425c:	20000d4c 	.word	0x20000d4c
 8004260:	20000874 	.word	0x20000874

08004264 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004272:	2301      	movs	r3, #1
 8004274:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d06a      	beq.n	8004352 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	60fb      	str	r3, [r7, #12]
}
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d902      	bls.n	80042aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	e002      	b.n	80042b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d04b      	beq.n	8004352 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d146      	bne.n	8004352 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80042c4:	4b25      	ldr	r3, [pc, #148]	; (800435c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d10a      	bne.n	80042e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	60bb      	str	r3, [r7, #8]
}
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	db04      	blt.n	8004302 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	6959      	ldr	r1, [r3, #20]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4a13      	ldr	r2, [pc, #76]	; (8004360 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004312:	4413      	add	r3, r2
 8004314:	4299      	cmp	r1, r3
 8004316:	d11c      	bne.n	8004352 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	3304      	adds	r3, #4
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe f9c3 	bl	80026a8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004326:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d903      	bls.n	8004336 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	4a0c      	ldr	r2, [pc, #48]	; (8004364 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4a07      	ldr	r2, [pc, #28]	; (8004360 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004344:	441a      	add	r2, r3
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	3304      	adds	r3, #4
 800434a:	4619      	mov	r1, r3
 800434c:	4610      	mov	r0, r2
 800434e:	f7fe f94e 	bl	80025ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004352:	bf00      	nop
 8004354:	3720      	adds	r7, #32
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000870 	.word	0x20000870
 8004360:	20000874 	.word	0x20000874
 8004364:	20000d4c 	.word	0x20000d4c

08004368 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800436c:	4b07      	ldr	r3, [pc, #28]	; (800438c <pvTaskIncrementMutexHeldCount+0x24>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d004      	beq.n	800437e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004374:	4b05      	ldr	r3, [pc, #20]	; (800438c <pvTaskIncrementMutexHeldCount+0x24>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800437a:	3201      	adds	r2, #1
 800437c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800437e:	4b03      	ldr	r3, [pc, #12]	; (800438c <pvTaskIncrementMutexHeldCount+0x24>)
 8004380:	681b      	ldr	r3, [r3, #0]
	}
 8004382:	4618      	mov	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	20000870 	.word	0x20000870

08004390 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800439a:	4b21      	ldr	r3, [pc, #132]	; (8004420 <prvAddCurrentTaskToDelayedList+0x90>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043a0:	4b20      	ldr	r3, [pc, #128]	; (8004424 <prvAddCurrentTaskToDelayedList+0x94>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fe f97e 	bl	80026a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043b2:	d10a      	bne.n	80043ca <prvAddCurrentTaskToDelayedList+0x3a>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ba:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <prvAddCurrentTaskToDelayedList+0x94>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3304      	adds	r3, #4
 80043c0:	4619      	mov	r1, r3
 80043c2:	4819      	ldr	r0, [pc, #100]	; (8004428 <prvAddCurrentTaskToDelayedList+0x98>)
 80043c4:	f7fe f913 	bl	80025ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043c8:	e026      	b.n	8004418 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4413      	add	r3, r2
 80043d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043d2:	4b14      	ldr	r3, [pc, #80]	; (8004424 <prvAddCurrentTaskToDelayedList+0x94>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d209      	bcs.n	80043f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043e2:	4b12      	ldr	r3, [pc, #72]	; (800442c <prvAddCurrentTaskToDelayedList+0x9c>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <prvAddCurrentTaskToDelayedList+0x94>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3304      	adds	r3, #4
 80043ec:	4619      	mov	r1, r3
 80043ee:	4610      	mov	r0, r2
 80043f0:	f7fe f921 	bl	8002636 <vListInsert>
}
 80043f4:	e010      	b.n	8004418 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043f6:	4b0e      	ldr	r3, [pc, #56]	; (8004430 <prvAddCurrentTaskToDelayedList+0xa0>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <prvAddCurrentTaskToDelayedList+0x94>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3304      	adds	r3, #4
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f7fe f917 	bl	8002636 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <prvAddCurrentTaskToDelayedList+0xa4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	429a      	cmp	r2, r3
 8004410:	d202      	bcs.n	8004418 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004412:	4a08      	ldr	r2, [pc, #32]	; (8004434 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000d48 	.word	0x20000d48
 8004424:	20000870 	.word	0x20000870
 8004428:	20000d30 	.word	0x20000d30
 800442c:	20000d00 	.word	0x20000d00
 8004430:	20000cfc 	.word	0x20000cfc
 8004434:	20000d64 	.word	0x20000d64

08004438 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004442:	f000 fb07 	bl	8004a54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004446:	4b1c      	ldr	r3, [pc, #112]	; (80044b8 <xTimerCreateTimerTask+0x80>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d021      	beq.n	8004492 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004452:	2300      	movs	r3, #0
 8004454:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004456:	1d3a      	adds	r2, r7, #4
 8004458:	f107 0108 	add.w	r1, r7, #8
 800445c:	f107 030c 	add.w	r3, r7, #12
 8004460:	4618      	mov	r0, r3
 8004462:	f7fe f87d 	bl	8002560 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	9202      	str	r2, [sp, #8]
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	2302      	movs	r3, #2
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	2300      	movs	r3, #0
 8004476:	460a      	mov	r2, r1
 8004478:	4910      	ldr	r1, [pc, #64]	; (80044bc <xTimerCreateTimerTask+0x84>)
 800447a:	4811      	ldr	r0, [pc, #68]	; (80044c0 <xTimerCreateTimerTask+0x88>)
 800447c:	f7ff f814 	bl	80034a8 <xTaskCreateStatic>
 8004480:	4603      	mov	r3, r0
 8004482:	4a10      	ldr	r2, [pc, #64]	; (80044c4 <xTimerCreateTimerTask+0x8c>)
 8004484:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004486:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <xTimerCreateTimerTask+0x8c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800448e:	2301      	movs	r3, #1
 8004490:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	613b      	str	r3, [r7, #16]
}
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044ae:	697b      	ldr	r3, [r7, #20]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20000da0 	.word	0x20000da0
 80044bc:	08005cd8 	.word	0x08005cd8
 80044c0:	080045fd 	.word	0x080045fd
 80044c4:	20000da4 	.word	0x20000da4

080044c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	623b      	str	r3, [r7, #32]
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044f6:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <xTimerGenericCommand+0x98>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d02a      	beq.n	8004554 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b05      	cmp	r3, #5
 800450e:	dc18      	bgt.n	8004542 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004510:	f7ff fdb4 	bl	800407c <xTaskGetSchedulerState>
 8004514:	4603      	mov	r3, r0
 8004516:	2b02      	cmp	r3, #2
 8004518:	d109      	bne.n	800452e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800451a:	4b11      	ldr	r3, [pc, #68]	; (8004560 <xTimerGenericCommand+0x98>)
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	f107 0110 	add.w	r1, r7, #16
 8004522:	2300      	movs	r3, #0
 8004524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004526:	f7fe fa27 	bl	8002978 <xQueueGenericSend>
 800452a:	6278      	str	r0, [r7, #36]	; 0x24
 800452c:	e012      	b.n	8004554 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800452e:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <xTimerGenericCommand+0x98>)
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	f107 0110 	add.w	r1, r7, #16
 8004536:	2300      	movs	r3, #0
 8004538:	2200      	movs	r2, #0
 800453a:	f7fe fa1d 	bl	8002978 <xQueueGenericSend>
 800453e:	6278      	str	r0, [r7, #36]	; 0x24
 8004540:	e008      	b.n	8004554 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004542:	4b07      	ldr	r3, [pc, #28]	; (8004560 <xTimerGenericCommand+0x98>)
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	f107 0110 	add.w	r1, r7, #16
 800454a:	2300      	movs	r3, #0
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	f7fe fb11 	bl	8002b74 <xQueueGenericSendFromISR>
 8004552:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004556:	4618      	mov	r0, r3
 8004558:	3728      	adds	r7, #40	; 0x28
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	20000da0 	.word	0x20000da0

08004564 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af02      	add	r7, sp, #8
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800456e:	4b22      	ldr	r3, [pc, #136]	; (80045f8 <prvProcessExpiredTimer+0x94>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	3304      	adds	r3, #4
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe f893 	bl	80026a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d022      	beq.n	80045d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	699a      	ldr	r2, [r3, #24]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	18d1      	adds	r1, r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	6978      	ldr	r0, [r7, #20]
 800459e:	f000 f8d1 	bl	8004744 <prvInsertTimerInActiveList>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01f      	beq.n	80045e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045a8:	2300      	movs	r3, #0
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	2300      	movs	r3, #0
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	2100      	movs	r1, #0
 80045b2:	6978      	ldr	r0, [r7, #20]
 80045b4:	f7ff ff88 	bl	80044c8 <xTimerGenericCommand>
 80045b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d113      	bne.n	80045e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	60fb      	str	r3, [r7, #12]
}
 80045d2:	bf00      	nop
 80045d4:	e7fe      	b.n	80045d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	6978      	ldr	r0, [r7, #20]
 80045ee:	4798      	blx	r3
}
 80045f0:	bf00      	nop
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	20000d98 	.word	0x20000d98

080045fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004604:	f107 0308 	add.w	r3, r7, #8
 8004608:	4618      	mov	r0, r3
 800460a:	f000 f857 	bl	80046bc <prvGetNextExpireTime>
 800460e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4619      	mov	r1, r3
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f803 	bl	8004620 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800461a:	f000 f8d5 	bl	80047c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800461e:	e7f1      	b.n	8004604 <prvTimerTask+0x8>

08004620 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800462a:	f7ff f945 	bl	80038b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800462e:	f107 0308 	add.w	r3, r7, #8
 8004632:	4618      	mov	r0, r3
 8004634:	f000 f866 	bl	8004704 <prvSampleTimeNow>
 8004638:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d130      	bne.n	80046a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10a      	bne.n	800465c <prvProcessTimerOrBlockTask+0x3c>
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	429a      	cmp	r2, r3
 800464c:	d806      	bhi.n	800465c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800464e:	f7ff f941 	bl	80038d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004652:	68f9      	ldr	r1, [r7, #12]
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff ff85 	bl	8004564 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800465a:	e024      	b.n	80046a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d008      	beq.n	8004674 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004662:	4b13      	ldr	r3, [pc, #76]	; (80046b0 <prvProcessTimerOrBlockTask+0x90>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <prvProcessTimerOrBlockTask+0x50>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <prvProcessTimerOrBlockTask+0x52>
 8004670:	2300      	movs	r3, #0
 8004672:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004674:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <prvProcessTimerOrBlockTask+0x94>)
 8004676:	6818      	ldr	r0, [r3, #0]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	4619      	mov	r1, r3
 8004682:	f7fe fedd 	bl	8003440 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004686:	f7ff f925 	bl	80038d4 <xTaskResumeAll>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10a      	bne.n	80046a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004690:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <prvProcessTimerOrBlockTask+0x98>)
 8004692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	f3bf 8f6f 	isb	sy
}
 80046a0:	e001      	b.n	80046a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046a2:	f7ff f917 	bl	80038d4 <xTaskResumeAll>
}
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000d9c 	.word	0x20000d9c
 80046b4:	20000da0 	.word	0x20000da0
 80046b8:	e000ed04 	.word	0xe000ed04

080046bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046c4:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <prvGetNextExpireTime+0x44>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <prvGetNextExpireTime+0x16>
 80046ce:	2201      	movs	r2, #1
 80046d0:	e000      	b.n	80046d4 <prvGetNextExpireTime+0x18>
 80046d2:	2200      	movs	r2, #0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <prvGetNextExpireTime+0x44>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	e001      	b.n	80046f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046f0:	68fb      	ldr	r3, [r7, #12]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20000d98 	.word	0x20000d98

08004704 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800470c:	f7ff f980 	bl	8003a10 <xTaskGetTickCount>
 8004710:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004712:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <prvSampleTimeNow+0x3c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	429a      	cmp	r2, r3
 800471a:	d205      	bcs.n	8004728 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800471c:	f000 f936 	bl	800498c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e002      	b.n	800472e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800472e:	4a04      	ldr	r2, [pc, #16]	; (8004740 <prvSampleTimeNow+0x3c>)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004734:	68fb      	ldr	r3, [r7, #12]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000da8 	.word	0x20000da8

08004744 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	429a      	cmp	r2, r3
 8004768:	d812      	bhi.n	8004790 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	429a      	cmp	r2, r3
 8004776:	d302      	bcc.n	800477e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004778:	2301      	movs	r3, #1
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e01b      	b.n	80047b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <prvInsertTimerInActiveList+0x7c>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3304      	adds	r3, #4
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f7fd ff54 	bl	8002636 <vListInsert>
 800478e:	e012      	b.n	80047b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d206      	bcs.n	80047a6 <prvInsertTimerInActiveList+0x62>
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d302      	bcc.n	80047a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047a0:	2301      	movs	r3, #1
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e007      	b.n	80047b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047a6:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <prvInsertTimerInActiveList+0x80>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4619      	mov	r1, r3
 80047b0:	4610      	mov	r0, r2
 80047b2:	f7fd ff40 	bl	8002636 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047b6:	697b      	ldr	r3, [r7, #20]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20000d9c 	.word	0x20000d9c
 80047c4:	20000d98 	.word	0x20000d98

080047c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08e      	sub	sp, #56	; 0x38
 80047cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047ce:	e0ca      	b.n	8004966 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	da18      	bge.n	8004808 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047d6:	1d3b      	adds	r3, r7, #4
 80047d8:	3304      	adds	r3, #4
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	61fb      	str	r3, [r7, #28]
}
 80047f4:	bf00      	nop
 80047f6:	e7fe      	b.n	80047f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047fe:	6850      	ldr	r0, [r2, #4]
 8004800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004802:	6892      	ldr	r2, [r2, #8]
 8004804:	4611      	mov	r1, r2
 8004806:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f2c0 80aa 	blt.w	8004964 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481e:	3304      	adds	r3, #4
 8004820:	4618      	mov	r0, r3
 8004822:	f7fd ff41 	bl	80026a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004826:	463b      	mov	r3, r7
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff ff6b 	bl	8004704 <prvSampleTimeNow>
 800482e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b09      	cmp	r3, #9
 8004834:	f200 8097 	bhi.w	8004966 <prvProcessReceivedCommands+0x19e>
 8004838:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <prvProcessReceivedCommands+0x78>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004869 	.word	0x08004869
 8004844:	08004869 	.word	0x08004869
 8004848:	08004869 	.word	0x08004869
 800484c:	080048dd 	.word	0x080048dd
 8004850:	080048f1 	.word	0x080048f1
 8004854:	0800493b 	.word	0x0800493b
 8004858:	08004869 	.word	0x08004869
 800485c:	08004869 	.word	0x08004869
 8004860:	080048dd 	.word	0x080048dd
 8004864:	080048f1 	.word	0x080048f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	b2da      	uxtb	r2, r3
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	18d1      	adds	r1, r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004888:	f7ff ff5c 	bl	8004744 <prvInsertTimerInActiveList>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d069      	beq.n	8004966 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004898:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d05e      	beq.n	8004966 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	441a      	add	r2, r3
 80048b0:	2300      	movs	r3, #0
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	2300      	movs	r3, #0
 80048b6:	2100      	movs	r1, #0
 80048b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ba:	f7ff fe05 	bl	80044c8 <xTimerGenericCommand>
 80048be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d14f      	bne.n	8004966 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	61bb      	str	r3, [r7, #24]
}
 80048d8:	bf00      	nop
 80048da:	e7fe      	b.n	80048da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e2:	f023 0301 	bic.w	r3, r3, #1
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80048ee:	e03a      	b.n	8004966 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10a      	bne.n	8004926 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	617b      	str	r3, [r7, #20]
}
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	18d1      	adds	r1, r2, r3
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004934:	f7ff ff06 	bl	8004744 <prvInsertTimerInActiveList>
					break;
 8004938:	e015      	b.n	8004966 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d103      	bne.n	8004950 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800494a:	f000 fbe1 	bl	8005110 <vPortFree>
 800494e:	e00a      	b.n	8004966 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	b2da      	uxtb	r2, r3
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004962:	e000      	b.n	8004966 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004964:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004966:	4b08      	ldr	r3, [pc, #32]	; (8004988 <prvProcessReceivedCommands+0x1c0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	1d39      	adds	r1, r7, #4
 800496c:	2200      	movs	r2, #0
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe fa28 	bl	8002dc4 <xQueueReceive>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	f47f af2a 	bne.w	80047d0 <prvProcessReceivedCommands+0x8>
	}
}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	3730      	adds	r7, #48	; 0x30
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000da0 	.word	0x20000da0

0800498c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004992:	e048      	b.n	8004a26 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004994:	4b2d      	ldr	r3, [pc, #180]	; (8004a4c <prvSwitchTimerLists+0xc0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800499e:	4b2b      	ldr	r3, [pc, #172]	; (8004a4c <prvSwitchTimerLists+0xc0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fd fe7b 	bl	80026a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d02e      	beq.n	8004a26 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4413      	add	r3, r2
 80049d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d90e      	bls.n	80049f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049e6:	4b19      	ldr	r3, [pc, #100]	; (8004a4c <prvSwitchTimerLists+0xc0>)
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f7fd fe20 	bl	8002636 <vListInsert>
 80049f6:	e016      	b.n	8004a26 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049f8:	2300      	movs	r3, #0
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	2300      	movs	r3, #0
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	2100      	movs	r1, #0
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f7ff fd60 	bl	80044c8 <xTimerGenericCommand>
 8004a08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	603b      	str	r3, [r7, #0]
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a26:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <prvSwitchTimerLists+0xc0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1b1      	bne.n	8004994 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a30:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <prvSwitchTimerLists+0xc0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <prvSwitchTimerLists+0xc4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a04      	ldr	r2, [pc, #16]	; (8004a4c <prvSwitchTimerLists+0xc0>)
 8004a3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a3e:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <prvSwitchTimerLists+0xc4>)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	6013      	str	r3, [r2, #0]
}
 8004a44:	bf00      	nop
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	20000d98 	.word	0x20000d98
 8004a50:	20000d9c 	.word	0x20000d9c

08004a54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a5a:	f000 f96b 	bl	8004d34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a5e:	4b15      	ldr	r3, [pc, #84]	; (8004ab4 <prvCheckForValidListAndQueue+0x60>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d120      	bne.n	8004aa8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a66:	4814      	ldr	r0, [pc, #80]	; (8004ab8 <prvCheckForValidListAndQueue+0x64>)
 8004a68:	f7fd fd94 	bl	8002594 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a6c:	4813      	ldr	r0, [pc, #76]	; (8004abc <prvCheckForValidListAndQueue+0x68>)
 8004a6e:	f7fd fd91 	bl	8002594 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a72:	4b13      	ldr	r3, [pc, #76]	; (8004ac0 <prvCheckForValidListAndQueue+0x6c>)
 8004a74:	4a10      	ldr	r2, [pc, #64]	; (8004ab8 <prvCheckForValidListAndQueue+0x64>)
 8004a76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a78:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <prvCheckForValidListAndQueue+0x70>)
 8004a7a:	4a10      	ldr	r2, [pc, #64]	; (8004abc <prvCheckForValidListAndQueue+0x68>)
 8004a7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a7e:	2300      	movs	r3, #0
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	4b11      	ldr	r3, [pc, #68]	; (8004ac8 <prvCheckForValidListAndQueue+0x74>)
 8004a84:	4a11      	ldr	r2, [pc, #68]	; (8004acc <prvCheckForValidListAndQueue+0x78>)
 8004a86:	2110      	movs	r1, #16
 8004a88:	200a      	movs	r0, #10
 8004a8a:	f7fd fe9f 	bl	80027cc <xQueueGenericCreateStatic>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4a08      	ldr	r2, [pc, #32]	; (8004ab4 <prvCheckForValidListAndQueue+0x60>)
 8004a92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a94:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <prvCheckForValidListAndQueue+0x60>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a9c:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <prvCheckForValidListAndQueue+0x60>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	490b      	ldr	r1, [pc, #44]	; (8004ad0 <prvCheckForValidListAndQueue+0x7c>)
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fe fca2 	bl	80033ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004aa8:	f000 f974 	bl	8004d94 <vPortExitCritical>
}
 8004aac:	bf00      	nop
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000da0 	.word	0x20000da0
 8004ab8:	20000d70 	.word	0x20000d70
 8004abc:	20000d84 	.word	0x20000d84
 8004ac0:	20000d98 	.word	0x20000d98
 8004ac4:	20000d9c 	.word	0x20000d9c
 8004ac8:	20000e4c 	.word	0x20000e4c
 8004acc:	20000dac 	.word	0x20000dac
 8004ad0:	08005ce0 	.word	0x08005ce0

08004ad4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3b04      	subs	r3, #4
 8004ae4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	3b04      	subs	r3, #4
 8004af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f023 0201 	bic.w	r2, r3, #1
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3b04      	subs	r3, #4
 8004b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b04:	4a0c      	ldr	r2, [pc, #48]	; (8004b38 <pxPortInitialiseStack+0x64>)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3b14      	subs	r3, #20
 8004b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3b04      	subs	r3, #4
 8004b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f06f 0202 	mvn.w	r2, #2
 8004b22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3b20      	subs	r3, #32
 8004b28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	08004b3d 	.word	0x08004b3d

08004b3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b46:	4b12      	ldr	r3, [pc, #72]	; (8004b90 <prvTaskExitError+0x54>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b4e:	d00a      	beq.n	8004b66 <prvTaskExitError+0x2a>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	60fb      	str	r3, [r7, #12]
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <prvTaskExitError+0x28>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	60bb      	str	r3, [r7, #8]
}
 8004b78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b7a:	bf00      	nop
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0fc      	beq.n	8004b7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	2000000c 	.word	0x2000000c
	...

08004ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ba0:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <pxCurrentTCBConst2>)
 8004ba2:	6819      	ldr	r1, [r3, #0]
 8004ba4:	6808      	ldr	r0, [r1, #0]
 8004ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004baa:	f380 8809 	msr	PSP, r0
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f380 8811 	msr	BASEPRI, r0
 8004bba:	4770      	bx	lr
 8004bbc:	f3af 8000 	nop.w

08004bc0 <pxCurrentTCBConst2>:
 8004bc0:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop

08004bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004bc8:	4808      	ldr	r0, [pc, #32]	; (8004bec <prvPortStartFirstTask+0x24>)
 8004bca:	6800      	ldr	r0, [r0, #0]
 8004bcc:	6800      	ldr	r0, [r0, #0]
 8004bce:	f380 8808 	msr	MSP, r0
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f380 8814 	msr	CONTROL, r0
 8004bda:	b662      	cpsie	i
 8004bdc:	b661      	cpsie	f
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	df00      	svc	0
 8004be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bea:	bf00      	nop
 8004bec:	e000ed08 	.word	0xe000ed08

08004bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bf6:	4b46      	ldr	r3, [pc, #280]	; (8004d10 <xPortStartScheduler+0x120>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a46      	ldr	r2, [pc, #280]	; (8004d14 <xPortStartScheduler+0x124>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d10a      	bne.n	8004c16 <xPortStartScheduler+0x26>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	613b      	str	r3, [r7, #16]
}
 8004c12:	bf00      	nop
 8004c14:	e7fe      	b.n	8004c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c16:	4b3e      	ldr	r3, [pc, #248]	; (8004d10 <xPortStartScheduler+0x120>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a3f      	ldr	r2, [pc, #252]	; (8004d18 <xPortStartScheduler+0x128>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d10a      	bne.n	8004c36 <xPortStartScheduler+0x46>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	60fb      	str	r3, [r7, #12]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c36:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <xPortStartScheduler+0x12c>)
 8004c38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	22ff      	movs	r2, #255	; 0xff
 8004c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <xPortStartScheduler+0x130>)
 8004c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c5e:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c60:	2207      	movs	r2, #7
 8004c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c64:	e009      	b.n	8004c7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004c66:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	4a2d      	ldr	r2, [pc, #180]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c82:	2b80      	cmp	r3, #128	; 0x80
 8004c84:	d0ef      	beq.n	8004c66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c86:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <xPortStartScheduler+0x134>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f1c3 0307 	rsb	r3, r3, #7
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d00a      	beq.n	8004ca8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	60bb      	str	r3, [r7, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	e7fe      	b.n	8004ca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ca8:	4b1e      	ldr	r3, [pc, #120]	; (8004d24 <xPortStartScheduler+0x134>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <xPortStartScheduler+0x134>)
 8004cb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cb2:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <xPortStartScheduler+0x134>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cba:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <xPortStartScheduler+0x134>)
 8004cbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cc6:	4b18      	ldr	r3, [pc, #96]	; (8004d28 <xPortStartScheduler+0x138>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a17      	ldr	r2, [pc, #92]	; (8004d28 <xPortStartScheduler+0x138>)
 8004ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <xPortStartScheduler+0x138>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a14      	ldr	r2, [pc, #80]	; (8004d28 <xPortStartScheduler+0x138>)
 8004cd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004cdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cde:	f000 f8dd 	bl	8004e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <xPortStartScheduler+0x13c>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ce8:	f000 f8fc 	bl	8004ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cec:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <xPortStartScheduler+0x140>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a0f      	ldr	r2, [pc, #60]	; (8004d30 <xPortStartScheduler+0x140>)
 8004cf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004cf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cf8:	f7ff ff66 	bl	8004bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cfc:	f7fe ff52 	bl	8003ba4 <vTaskSwitchContext>
	prvTaskExitError();
 8004d00:	f7ff ff1c 	bl	8004b3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	e000ed00 	.word	0xe000ed00
 8004d14:	410fc271 	.word	0x410fc271
 8004d18:	410fc270 	.word	0x410fc270
 8004d1c:	e000e400 	.word	0xe000e400
 8004d20:	20000e9c 	.word	0x20000e9c
 8004d24:	20000ea0 	.word	0x20000ea0
 8004d28:	e000ed20 	.word	0xe000ed20
 8004d2c:	2000000c 	.word	0x2000000c
 8004d30:	e000ef34 	.word	0xe000ef34

08004d34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	607b      	str	r3, [r7, #4]
}
 8004d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d4e:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <vPortEnterCritical+0x58>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3301      	adds	r3, #1
 8004d54:	4a0d      	ldr	r2, [pc, #52]	; (8004d8c <vPortEnterCritical+0x58>)
 8004d56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <vPortEnterCritical+0x58>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d10f      	bne.n	8004d80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <vPortEnterCritical+0x5c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	603b      	str	r3, [r7, #0]
}
 8004d7c:	bf00      	nop
 8004d7e:	e7fe      	b.n	8004d7e <vPortEnterCritical+0x4a>
	}
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	2000000c 	.word	0x2000000c
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <vPortExitCritical+0x50>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <vPortExitCritical+0x24>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	607b      	str	r3, [r7, #4]
}
 8004db4:	bf00      	nop
 8004db6:	e7fe      	b.n	8004db6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <vPortExitCritical+0x50>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	4a09      	ldr	r2, [pc, #36]	; (8004de4 <vPortExitCritical+0x50>)
 8004dc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <vPortExitCritical+0x50>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d105      	bne.n	8004dd6 <vPortExitCritical+0x42>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	f383 8811 	msr	BASEPRI, r3
}
 8004dd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	2000000c 	.word	0x2000000c
	...

08004df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004df0:	f3ef 8009 	mrs	r0, PSP
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <pxCurrentTCBConst>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	f01e 0f10 	tst.w	lr, #16
 8004e00:	bf08      	it	eq
 8004e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	6010      	str	r0, [r2, #0]
 8004e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e14:	f380 8811 	msr	BASEPRI, r0
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f7fe fec0 	bl	8003ba4 <vTaskSwitchContext>
 8004e24:	f04f 0000 	mov.w	r0, #0
 8004e28:	f380 8811 	msr	BASEPRI, r0
 8004e2c:	bc09      	pop	{r0, r3}
 8004e2e:	6819      	ldr	r1, [r3, #0]
 8004e30:	6808      	ldr	r0, [r1, #0]
 8004e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e36:	f01e 0f10 	tst.w	lr, #16
 8004e3a:	bf08      	it	eq
 8004e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e40:	f380 8809 	msr	PSP, r0
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	f3af 8000 	nop.w

08004e50 <pxCurrentTCBConst>:
 8004e50:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop

08004e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	607b      	str	r3, [r7, #4]
}
 8004e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e72:	f7fe fddd 	bl	8003a30 <xTaskIncrementTick>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e7c:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <xPortSysTickHandler+0x40>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f383 8811 	msr	BASEPRI, r3
}
 8004e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <vPortSetupTimerInterrupt+0x34>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <vPortSetupTimerInterrupt+0x38>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <vPortSetupTimerInterrupt+0x3c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <vPortSetupTimerInterrupt+0x40>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	099b      	lsrs	r3, r3, #6
 8004eb8:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <vPortSetupTimerInterrupt+0x44>)
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ebe:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <vPortSetupTimerInterrupt+0x34>)
 8004ec0:	2207      	movs	r2, #7
 8004ec2:	601a      	str	r2, [r3, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	e000e010 	.word	0xe000e010
 8004ed4:	e000e018 	.word	0xe000e018
 8004ed8:	20000000 	.word	0x20000000
 8004edc:	10624dd3 	.word	0x10624dd3
 8004ee0:	e000e014 	.word	0xe000e014

08004ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ef4 <vPortEnableVFP+0x10>
 8004ee8:	6801      	ldr	r1, [r0, #0]
 8004eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004eee:	6001      	str	r1, [r0, #0]
 8004ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ef2:	bf00      	nop
 8004ef4:	e000ed88 	.word	0xe000ed88

08004ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004efe:	f3ef 8305 	mrs	r3, IPSR
 8004f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b0f      	cmp	r3, #15
 8004f08:	d914      	bls.n	8004f34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f0a:	4a17      	ldr	r2, [pc, #92]	; (8004f68 <vPortValidateInterruptPriority+0x70>)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f14:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <vPortValidateInterruptPriority+0x74>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	7afa      	ldrb	r2, [r7, #11]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d20a      	bcs.n	8004f34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	607b      	str	r3, [r7, #4]
}
 8004f30:	bf00      	nop
 8004f32:	e7fe      	b.n	8004f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f34:	4b0e      	ldr	r3, [pc, #56]	; (8004f70 <vPortValidateInterruptPriority+0x78>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f3c:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <vPortValidateInterruptPriority+0x7c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d90a      	bls.n	8004f5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	603b      	str	r3, [r7, #0]
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <vPortValidateInterruptPriority+0x60>
	}
 8004f5a:	bf00      	nop
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	e000e3f0 	.word	0xe000e3f0
 8004f6c:	20000e9c 	.word	0x20000e9c
 8004f70:	e000ed0c 	.word	0xe000ed0c
 8004f74:	20000ea0 	.word	0x20000ea0

08004f78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f84:	f7fe fc98 	bl	80038b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f88:	4b5b      	ldr	r3, [pc, #364]	; (80050f8 <pvPortMalloc+0x180>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f90:	f000 f920 	bl	80051d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f94:	4b59      	ldr	r3, [pc, #356]	; (80050fc <pvPortMalloc+0x184>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f040 8093 	bne.w	80050c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01d      	beq.n	8004fe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004fa8:	2208      	movs	r2, #8
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4413      	add	r3, r2
 8004fae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d014      	beq.n	8004fe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f023 0307 	bic.w	r3, r3, #7
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <pvPortMalloc+0x6c>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	617b      	str	r3, [r7, #20]
}
 8004fe0:	bf00      	nop
 8004fe2:	e7fe      	b.n	8004fe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d06e      	beq.n	80050c8 <pvPortMalloc+0x150>
 8004fea:	4b45      	ldr	r3, [pc, #276]	; (8005100 <pvPortMalloc+0x188>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d869      	bhi.n	80050c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ff4:	4b43      	ldr	r3, [pc, #268]	; (8005104 <pvPortMalloc+0x18c>)
 8004ff6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ff8:	4b42      	ldr	r3, [pc, #264]	; (8005104 <pvPortMalloc+0x18c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ffe:	e004      	b.n	800500a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d903      	bls.n	800501c <pvPortMalloc+0xa4>
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f1      	bne.n	8005000 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800501c:	4b36      	ldr	r3, [pc, #216]	; (80050f8 <pvPortMalloc+0x180>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005022:	429a      	cmp	r2, r3
 8005024:	d050      	beq.n	80050c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2208      	movs	r2, #8
 800502c:	4413      	add	r3, r2
 800502e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	1ad2      	subs	r2, r2, r3
 8005040:	2308      	movs	r3, #8
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	429a      	cmp	r2, r3
 8005046:	d91f      	bls.n	8005088 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4413      	add	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <pvPortMalloc+0xf8>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	613b      	str	r3, [r7, #16]
}
 800506c:	bf00      	nop
 800506e:	e7fe      	b.n	800506e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	1ad2      	subs	r2, r2, r3
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005082:	69b8      	ldr	r0, [r7, #24]
 8005084:	f000 f908 	bl	8005298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005088:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <pvPortMalloc+0x188>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	4a1b      	ldr	r2, [pc, #108]	; (8005100 <pvPortMalloc+0x188>)
 8005094:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005096:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <pvPortMalloc+0x188>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <pvPortMalloc+0x190>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d203      	bcs.n	80050aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050a2:	4b17      	ldr	r3, [pc, #92]	; (8005100 <pvPortMalloc+0x188>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a18      	ldr	r2, [pc, #96]	; (8005108 <pvPortMalloc+0x190>)
 80050a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	4b13      	ldr	r3, [pc, #76]	; (80050fc <pvPortMalloc+0x184>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050be:	4b13      	ldr	r3, [pc, #76]	; (800510c <pvPortMalloc+0x194>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3301      	adds	r3, #1
 80050c4:	4a11      	ldr	r2, [pc, #68]	; (800510c <pvPortMalloc+0x194>)
 80050c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050c8:	f7fe fc04 	bl	80038d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <pvPortMalloc+0x174>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	60fb      	str	r3, [r7, #12]
}
 80050e8:	bf00      	nop
 80050ea:	e7fe      	b.n	80050ea <pvPortMalloc+0x172>
	return pvReturn;
 80050ec:	69fb      	ldr	r3, [r7, #28]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3728      	adds	r7, #40	; 0x28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20004aac 	.word	0x20004aac
 80050fc:	20004ac0 	.word	0x20004ac0
 8005100:	20004ab0 	.word	0x20004ab0
 8005104:	20004aa4 	.word	0x20004aa4
 8005108:	20004ab4 	.word	0x20004ab4
 800510c:	20004ab8 	.word	0x20004ab8

08005110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d04d      	beq.n	80051be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005122:	2308      	movs	r3, #8
 8005124:	425b      	negs	r3, r3
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4413      	add	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	4b24      	ldr	r3, [pc, #144]	; (80051c8 <vPortFree+0xb8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4013      	ands	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <vPortFree+0x44>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	60fb      	str	r3, [r7, #12]
}
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <vPortFree+0x62>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	60bb      	str	r3, [r7, #8]
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <vPortFree+0xb8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4013      	ands	r3, r2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01e      	beq.n	80051be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d11a      	bne.n	80051be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4b0e      	ldr	r3, [pc, #56]	; (80051c8 <vPortFree+0xb8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	43db      	mvns	r3, r3
 8005192:	401a      	ands	r2, r3
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005198:	f7fe fb8e 	bl	80038b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <vPortFree+0xbc>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4413      	add	r3, r2
 80051a6:	4a09      	ldr	r2, [pc, #36]	; (80051cc <vPortFree+0xbc>)
 80051a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051aa:	6938      	ldr	r0, [r7, #16]
 80051ac:	f000 f874 	bl	8005298 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80051b0:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <vPortFree+0xc0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3301      	adds	r3, #1
 80051b6:	4a06      	ldr	r2, [pc, #24]	; (80051d0 <vPortFree+0xc0>)
 80051b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051ba:	f7fe fb8b 	bl	80038d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051be:	bf00      	nop
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20004ac0 	.word	0x20004ac0
 80051cc:	20004ab0 	.word	0x20004ab0
 80051d0:	20004abc 	.word	0x20004abc

080051d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80051de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051e0:	4b27      	ldr	r3, [pc, #156]	; (8005280 <prvHeapInit+0xac>)
 80051e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00c      	beq.n	8005208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3307      	adds	r3, #7
 80051f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0307 	bic.w	r3, r3, #7
 80051fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <prvHeapInit+0xac>)
 8005204:	4413      	add	r3, r2
 8005206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800520c:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <prvHeapInit+0xb0>)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005212:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <prvHeapInit+0xb0>)
 8005214:	2200      	movs	r2, #0
 8005216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	4413      	add	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005220:	2208      	movs	r2, #8
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0307 	bic.w	r3, r3, #7
 800522e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4a15      	ldr	r2, [pc, #84]	; (8005288 <prvHeapInit+0xb4>)
 8005234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005236:	4b14      	ldr	r3, [pc, #80]	; (8005288 <prvHeapInit+0xb4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2200      	movs	r2, #0
 800523c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <prvHeapInit+0xb4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005254:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <prvHeapInit+0xb4>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	4a0a      	ldr	r2, [pc, #40]	; (800528c <prvHeapInit+0xb8>)
 8005262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4a09      	ldr	r2, [pc, #36]	; (8005290 <prvHeapInit+0xbc>)
 800526a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800526c:	4b09      	ldr	r3, [pc, #36]	; (8005294 <prvHeapInit+0xc0>)
 800526e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	20000ea4 	.word	0x20000ea4
 8005284:	20004aa4 	.word	0x20004aa4
 8005288:	20004aac 	.word	0x20004aac
 800528c:	20004ab4 	.word	0x20004ab4
 8005290:	20004ab0 	.word	0x20004ab0
 8005294:	20004ac0 	.word	0x20004ac0

08005298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052a0:	4b28      	ldr	r3, [pc, #160]	; (8005344 <prvInsertBlockIntoFreeList+0xac>)
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e002      	b.n	80052ac <prvInsertBlockIntoFreeList+0x14>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d8f7      	bhi.n	80052a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	4413      	add	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d108      	bne.n	80052da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	441a      	add	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	441a      	add	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d118      	bne.n	8005320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4b15      	ldr	r3, [pc, #84]	; (8005348 <prvInsertBlockIntoFreeList+0xb0>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d00d      	beq.n	8005316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	441a      	add	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	e008      	b.n	8005328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005316:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <prvInsertBlockIntoFreeList+0xb0>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	e003      	b.n	8005328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	429a      	cmp	r2, r3
 800532e:	d002      	beq.n	8005336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005336:	bf00      	nop
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20004aa4 	.word	0x20004aa4
 8005348:	20004aac 	.word	0x20004aac

0800534c <__errno>:
 800534c:	4b01      	ldr	r3, [pc, #4]	; (8005354 <__errno+0x8>)
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	20000010 	.word	0x20000010

08005358 <__libc_init_array>:
 8005358:	b570      	push	{r4, r5, r6, lr}
 800535a:	4d0d      	ldr	r5, [pc, #52]	; (8005390 <__libc_init_array+0x38>)
 800535c:	4c0d      	ldr	r4, [pc, #52]	; (8005394 <__libc_init_array+0x3c>)
 800535e:	1b64      	subs	r4, r4, r5
 8005360:	10a4      	asrs	r4, r4, #2
 8005362:	2600      	movs	r6, #0
 8005364:	42a6      	cmp	r6, r4
 8005366:	d109      	bne.n	800537c <__libc_init_array+0x24>
 8005368:	4d0b      	ldr	r5, [pc, #44]	; (8005398 <__libc_init_array+0x40>)
 800536a:	4c0c      	ldr	r4, [pc, #48]	; (800539c <__libc_init_array+0x44>)
 800536c:	f000 fc8e 	bl	8005c8c <_init>
 8005370:	1b64      	subs	r4, r4, r5
 8005372:	10a4      	asrs	r4, r4, #2
 8005374:	2600      	movs	r6, #0
 8005376:	42a6      	cmp	r6, r4
 8005378:	d105      	bne.n	8005386 <__libc_init_array+0x2e>
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005380:	4798      	blx	r3
 8005382:	3601      	adds	r6, #1
 8005384:	e7ee      	b.n	8005364 <__libc_init_array+0xc>
 8005386:	f855 3b04 	ldr.w	r3, [r5], #4
 800538a:	4798      	blx	r3
 800538c:	3601      	adds	r6, #1
 800538e:	e7f2      	b.n	8005376 <__libc_init_array+0x1e>
 8005390:	08005d3c 	.word	0x08005d3c
 8005394:	08005d3c 	.word	0x08005d3c
 8005398:	08005d3c 	.word	0x08005d3c
 800539c:	08005d40 	.word	0x08005d40

080053a0 <memcpy>:
 80053a0:	440a      	add	r2, r1
 80053a2:	4291      	cmp	r1, r2
 80053a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80053a8:	d100      	bne.n	80053ac <memcpy+0xc>
 80053aa:	4770      	bx	lr
 80053ac:	b510      	push	{r4, lr}
 80053ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053b6:	4291      	cmp	r1, r2
 80053b8:	d1f9      	bne.n	80053ae <memcpy+0xe>
 80053ba:	bd10      	pop	{r4, pc}

080053bc <memset>:
 80053bc:	4402      	add	r2, r0
 80053be:	4603      	mov	r3, r0
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d100      	bne.n	80053c6 <memset+0xa>
 80053c4:	4770      	bx	lr
 80053c6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ca:	e7f9      	b.n	80053c0 <memset+0x4>

080053cc <siprintf>:
 80053cc:	b40e      	push	{r1, r2, r3}
 80053ce:	b500      	push	{lr}
 80053d0:	b09c      	sub	sp, #112	; 0x70
 80053d2:	ab1d      	add	r3, sp, #116	; 0x74
 80053d4:	9002      	str	r0, [sp, #8]
 80053d6:	9006      	str	r0, [sp, #24]
 80053d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053dc:	4809      	ldr	r0, [pc, #36]	; (8005404 <siprintf+0x38>)
 80053de:	9107      	str	r1, [sp, #28]
 80053e0:	9104      	str	r1, [sp, #16]
 80053e2:	4909      	ldr	r1, [pc, #36]	; (8005408 <siprintf+0x3c>)
 80053e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e8:	9105      	str	r1, [sp, #20]
 80053ea:	6800      	ldr	r0, [r0, #0]
 80053ec:	9301      	str	r3, [sp, #4]
 80053ee:	a902      	add	r1, sp, #8
 80053f0:	f000 f868 	bl	80054c4 <_svfiprintf_r>
 80053f4:	9b02      	ldr	r3, [sp, #8]
 80053f6:	2200      	movs	r2, #0
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	b01c      	add	sp, #112	; 0x70
 80053fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005400:	b003      	add	sp, #12
 8005402:	4770      	bx	lr
 8005404:	20000010 	.word	0x20000010
 8005408:	ffff0208 	.word	0xffff0208

0800540c <__ssputs_r>:
 800540c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005410:	688e      	ldr	r6, [r1, #8]
 8005412:	429e      	cmp	r6, r3
 8005414:	4682      	mov	sl, r0
 8005416:	460c      	mov	r4, r1
 8005418:	4690      	mov	r8, r2
 800541a:	461f      	mov	r7, r3
 800541c:	d838      	bhi.n	8005490 <__ssputs_r+0x84>
 800541e:	898a      	ldrh	r2, [r1, #12]
 8005420:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005424:	d032      	beq.n	800548c <__ssputs_r+0x80>
 8005426:	6825      	ldr	r5, [r4, #0]
 8005428:	6909      	ldr	r1, [r1, #16]
 800542a:	eba5 0901 	sub.w	r9, r5, r1
 800542e:	6965      	ldr	r5, [r4, #20]
 8005430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005434:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005438:	3301      	adds	r3, #1
 800543a:	444b      	add	r3, r9
 800543c:	106d      	asrs	r5, r5, #1
 800543e:	429d      	cmp	r5, r3
 8005440:	bf38      	it	cc
 8005442:	461d      	movcc	r5, r3
 8005444:	0553      	lsls	r3, r2, #21
 8005446:	d531      	bpl.n	80054ac <__ssputs_r+0xa0>
 8005448:	4629      	mov	r1, r5
 800544a:	f000 fb55 	bl	8005af8 <_malloc_r>
 800544e:	4606      	mov	r6, r0
 8005450:	b950      	cbnz	r0, 8005468 <__ssputs_r+0x5c>
 8005452:	230c      	movs	r3, #12
 8005454:	f8ca 3000 	str.w	r3, [sl]
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800545e:	81a3      	strh	r3, [r4, #12]
 8005460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005468:	6921      	ldr	r1, [r4, #16]
 800546a:	464a      	mov	r2, r9
 800546c:	f7ff ff98 	bl	80053a0 <memcpy>
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547a:	81a3      	strh	r3, [r4, #12]
 800547c:	6126      	str	r6, [r4, #16]
 800547e:	6165      	str	r5, [r4, #20]
 8005480:	444e      	add	r6, r9
 8005482:	eba5 0509 	sub.w	r5, r5, r9
 8005486:	6026      	str	r6, [r4, #0]
 8005488:	60a5      	str	r5, [r4, #8]
 800548a:	463e      	mov	r6, r7
 800548c:	42be      	cmp	r6, r7
 800548e:	d900      	bls.n	8005492 <__ssputs_r+0x86>
 8005490:	463e      	mov	r6, r7
 8005492:	6820      	ldr	r0, [r4, #0]
 8005494:	4632      	mov	r2, r6
 8005496:	4641      	mov	r1, r8
 8005498:	f000 faa8 	bl	80059ec <memmove>
 800549c:	68a3      	ldr	r3, [r4, #8]
 800549e:	1b9b      	subs	r3, r3, r6
 80054a0:	60a3      	str	r3, [r4, #8]
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	4433      	add	r3, r6
 80054a6:	6023      	str	r3, [r4, #0]
 80054a8:	2000      	movs	r0, #0
 80054aa:	e7db      	b.n	8005464 <__ssputs_r+0x58>
 80054ac:	462a      	mov	r2, r5
 80054ae:	f000 fb97 	bl	8005be0 <_realloc_r>
 80054b2:	4606      	mov	r6, r0
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d1e1      	bne.n	800547c <__ssputs_r+0x70>
 80054b8:	6921      	ldr	r1, [r4, #16]
 80054ba:	4650      	mov	r0, sl
 80054bc:	f000 fab0 	bl	8005a20 <_free_r>
 80054c0:	e7c7      	b.n	8005452 <__ssputs_r+0x46>
	...

080054c4 <_svfiprintf_r>:
 80054c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c8:	4698      	mov	r8, r3
 80054ca:	898b      	ldrh	r3, [r1, #12]
 80054cc:	061b      	lsls	r3, r3, #24
 80054ce:	b09d      	sub	sp, #116	; 0x74
 80054d0:	4607      	mov	r7, r0
 80054d2:	460d      	mov	r5, r1
 80054d4:	4614      	mov	r4, r2
 80054d6:	d50e      	bpl.n	80054f6 <_svfiprintf_r+0x32>
 80054d8:	690b      	ldr	r3, [r1, #16]
 80054da:	b963      	cbnz	r3, 80054f6 <_svfiprintf_r+0x32>
 80054dc:	2140      	movs	r1, #64	; 0x40
 80054de:	f000 fb0b 	bl	8005af8 <_malloc_r>
 80054e2:	6028      	str	r0, [r5, #0]
 80054e4:	6128      	str	r0, [r5, #16]
 80054e6:	b920      	cbnz	r0, 80054f2 <_svfiprintf_r+0x2e>
 80054e8:	230c      	movs	r3, #12
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054f0:	e0d1      	b.n	8005696 <_svfiprintf_r+0x1d2>
 80054f2:	2340      	movs	r3, #64	; 0x40
 80054f4:	616b      	str	r3, [r5, #20]
 80054f6:	2300      	movs	r3, #0
 80054f8:	9309      	str	r3, [sp, #36]	; 0x24
 80054fa:	2320      	movs	r3, #32
 80054fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005500:	f8cd 800c 	str.w	r8, [sp, #12]
 8005504:	2330      	movs	r3, #48	; 0x30
 8005506:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80056b0 <_svfiprintf_r+0x1ec>
 800550a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800550e:	f04f 0901 	mov.w	r9, #1
 8005512:	4623      	mov	r3, r4
 8005514:	469a      	mov	sl, r3
 8005516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800551a:	b10a      	cbz	r2, 8005520 <_svfiprintf_r+0x5c>
 800551c:	2a25      	cmp	r2, #37	; 0x25
 800551e:	d1f9      	bne.n	8005514 <_svfiprintf_r+0x50>
 8005520:	ebba 0b04 	subs.w	fp, sl, r4
 8005524:	d00b      	beq.n	800553e <_svfiprintf_r+0x7a>
 8005526:	465b      	mov	r3, fp
 8005528:	4622      	mov	r2, r4
 800552a:	4629      	mov	r1, r5
 800552c:	4638      	mov	r0, r7
 800552e:	f7ff ff6d 	bl	800540c <__ssputs_r>
 8005532:	3001      	adds	r0, #1
 8005534:	f000 80aa 	beq.w	800568c <_svfiprintf_r+0x1c8>
 8005538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800553a:	445a      	add	r2, fp
 800553c:	9209      	str	r2, [sp, #36]	; 0x24
 800553e:	f89a 3000 	ldrb.w	r3, [sl]
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 80a2 	beq.w	800568c <_svfiprintf_r+0x1c8>
 8005548:	2300      	movs	r3, #0
 800554a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800554e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005552:	f10a 0a01 	add.w	sl, sl, #1
 8005556:	9304      	str	r3, [sp, #16]
 8005558:	9307      	str	r3, [sp, #28]
 800555a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800555e:	931a      	str	r3, [sp, #104]	; 0x68
 8005560:	4654      	mov	r4, sl
 8005562:	2205      	movs	r2, #5
 8005564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005568:	4851      	ldr	r0, [pc, #324]	; (80056b0 <_svfiprintf_r+0x1ec>)
 800556a:	f7fa fe39 	bl	80001e0 <memchr>
 800556e:	9a04      	ldr	r2, [sp, #16]
 8005570:	b9d8      	cbnz	r0, 80055aa <_svfiprintf_r+0xe6>
 8005572:	06d0      	lsls	r0, r2, #27
 8005574:	bf44      	itt	mi
 8005576:	2320      	movmi	r3, #32
 8005578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800557c:	0711      	lsls	r1, r2, #28
 800557e:	bf44      	itt	mi
 8005580:	232b      	movmi	r3, #43	; 0x2b
 8005582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005586:	f89a 3000 	ldrb.w	r3, [sl]
 800558a:	2b2a      	cmp	r3, #42	; 0x2a
 800558c:	d015      	beq.n	80055ba <_svfiprintf_r+0xf6>
 800558e:	9a07      	ldr	r2, [sp, #28]
 8005590:	4654      	mov	r4, sl
 8005592:	2000      	movs	r0, #0
 8005594:	f04f 0c0a 	mov.w	ip, #10
 8005598:	4621      	mov	r1, r4
 800559a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800559e:	3b30      	subs	r3, #48	; 0x30
 80055a0:	2b09      	cmp	r3, #9
 80055a2:	d94e      	bls.n	8005642 <_svfiprintf_r+0x17e>
 80055a4:	b1b0      	cbz	r0, 80055d4 <_svfiprintf_r+0x110>
 80055a6:	9207      	str	r2, [sp, #28]
 80055a8:	e014      	b.n	80055d4 <_svfiprintf_r+0x110>
 80055aa:	eba0 0308 	sub.w	r3, r0, r8
 80055ae:	fa09 f303 	lsl.w	r3, r9, r3
 80055b2:	4313      	orrs	r3, r2
 80055b4:	9304      	str	r3, [sp, #16]
 80055b6:	46a2      	mov	sl, r4
 80055b8:	e7d2      	b.n	8005560 <_svfiprintf_r+0x9c>
 80055ba:	9b03      	ldr	r3, [sp, #12]
 80055bc:	1d19      	adds	r1, r3, #4
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	9103      	str	r1, [sp, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bfbb      	ittet	lt
 80055c6:	425b      	neglt	r3, r3
 80055c8:	f042 0202 	orrlt.w	r2, r2, #2
 80055cc:	9307      	strge	r3, [sp, #28]
 80055ce:	9307      	strlt	r3, [sp, #28]
 80055d0:	bfb8      	it	lt
 80055d2:	9204      	strlt	r2, [sp, #16]
 80055d4:	7823      	ldrb	r3, [r4, #0]
 80055d6:	2b2e      	cmp	r3, #46	; 0x2e
 80055d8:	d10c      	bne.n	80055f4 <_svfiprintf_r+0x130>
 80055da:	7863      	ldrb	r3, [r4, #1]
 80055dc:	2b2a      	cmp	r3, #42	; 0x2a
 80055de:	d135      	bne.n	800564c <_svfiprintf_r+0x188>
 80055e0:	9b03      	ldr	r3, [sp, #12]
 80055e2:	1d1a      	adds	r2, r3, #4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	9203      	str	r2, [sp, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	bfb8      	it	lt
 80055ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80055f0:	3402      	adds	r4, #2
 80055f2:	9305      	str	r3, [sp, #20]
 80055f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80056c0 <_svfiprintf_r+0x1fc>
 80055f8:	7821      	ldrb	r1, [r4, #0]
 80055fa:	2203      	movs	r2, #3
 80055fc:	4650      	mov	r0, sl
 80055fe:	f7fa fdef 	bl	80001e0 <memchr>
 8005602:	b140      	cbz	r0, 8005616 <_svfiprintf_r+0x152>
 8005604:	2340      	movs	r3, #64	; 0x40
 8005606:	eba0 000a 	sub.w	r0, r0, sl
 800560a:	fa03 f000 	lsl.w	r0, r3, r0
 800560e:	9b04      	ldr	r3, [sp, #16]
 8005610:	4303      	orrs	r3, r0
 8005612:	3401      	adds	r4, #1
 8005614:	9304      	str	r3, [sp, #16]
 8005616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800561a:	4826      	ldr	r0, [pc, #152]	; (80056b4 <_svfiprintf_r+0x1f0>)
 800561c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005620:	2206      	movs	r2, #6
 8005622:	f7fa fddd 	bl	80001e0 <memchr>
 8005626:	2800      	cmp	r0, #0
 8005628:	d038      	beq.n	800569c <_svfiprintf_r+0x1d8>
 800562a:	4b23      	ldr	r3, [pc, #140]	; (80056b8 <_svfiprintf_r+0x1f4>)
 800562c:	bb1b      	cbnz	r3, 8005676 <_svfiprintf_r+0x1b2>
 800562e:	9b03      	ldr	r3, [sp, #12]
 8005630:	3307      	adds	r3, #7
 8005632:	f023 0307 	bic.w	r3, r3, #7
 8005636:	3308      	adds	r3, #8
 8005638:	9303      	str	r3, [sp, #12]
 800563a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563c:	4433      	add	r3, r6
 800563e:	9309      	str	r3, [sp, #36]	; 0x24
 8005640:	e767      	b.n	8005512 <_svfiprintf_r+0x4e>
 8005642:	fb0c 3202 	mla	r2, ip, r2, r3
 8005646:	460c      	mov	r4, r1
 8005648:	2001      	movs	r0, #1
 800564a:	e7a5      	b.n	8005598 <_svfiprintf_r+0xd4>
 800564c:	2300      	movs	r3, #0
 800564e:	3401      	adds	r4, #1
 8005650:	9305      	str	r3, [sp, #20]
 8005652:	4619      	mov	r1, r3
 8005654:	f04f 0c0a 	mov.w	ip, #10
 8005658:	4620      	mov	r0, r4
 800565a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800565e:	3a30      	subs	r2, #48	; 0x30
 8005660:	2a09      	cmp	r2, #9
 8005662:	d903      	bls.n	800566c <_svfiprintf_r+0x1a8>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0c5      	beq.n	80055f4 <_svfiprintf_r+0x130>
 8005668:	9105      	str	r1, [sp, #20]
 800566a:	e7c3      	b.n	80055f4 <_svfiprintf_r+0x130>
 800566c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005670:	4604      	mov	r4, r0
 8005672:	2301      	movs	r3, #1
 8005674:	e7f0      	b.n	8005658 <_svfiprintf_r+0x194>
 8005676:	ab03      	add	r3, sp, #12
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	462a      	mov	r2, r5
 800567c:	4b0f      	ldr	r3, [pc, #60]	; (80056bc <_svfiprintf_r+0x1f8>)
 800567e:	a904      	add	r1, sp, #16
 8005680:	4638      	mov	r0, r7
 8005682:	f3af 8000 	nop.w
 8005686:	1c42      	adds	r2, r0, #1
 8005688:	4606      	mov	r6, r0
 800568a:	d1d6      	bne.n	800563a <_svfiprintf_r+0x176>
 800568c:	89ab      	ldrh	r3, [r5, #12]
 800568e:	065b      	lsls	r3, r3, #25
 8005690:	f53f af2c 	bmi.w	80054ec <_svfiprintf_r+0x28>
 8005694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005696:	b01d      	add	sp, #116	; 0x74
 8005698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569c:	ab03      	add	r3, sp, #12
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	462a      	mov	r2, r5
 80056a2:	4b06      	ldr	r3, [pc, #24]	; (80056bc <_svfiprintf_r+0x1f8>)
 80056a4:	a904      	add	r1, sp, #16
 80056a6:	4638      	mov	r0, r7
 80056a8:	f000 f87a 	bl	80057a0 <_printf_i>
 80056ac:	e7eb      	b.n	8005686 <_svfiprintf_r+0x1c2>
 80056ae:	bf00      	nop
 80056b0:	08005d00 	.word	0x08005d00
 80056b4:	08005d0a 	.word	0x08005d0a
 80056b8:	00000000 	.word	0x00000000
 80056bc:	0800540d 	.word	0x0800540d
 80056c0:	08005d06 	.word	0x08005d06

080056c4 <_printf_common>:
 80056c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c8:	4616      	mov	r6, r2
 80056ca:	4699      	mov	r9, r3
 80056cc:	688a      	ldr	r2, [r1, #8]
 80056ce:	690b      	ldr	r3, [r1, #16]
 80056d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056d4:	4293      	cmp	r3, r2
 80056d6:	bfb8      	it	lt
 80056d8:	4613      	movlt	r3, r2
 80056da:	6033      	str	r3, [r6, #0]
 80056dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056e0:	4607      	mov	r7, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	b10a      	cbz	r2, 80056ea <_printf_common+0x26>
 80056e6:	3301      	adds	r3, #1
 80056e8:	6033      	str	r3, [r6, #0]
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	0699      	lsls	r1, r3, #26
 80056ee:	bf42      	ittt	mi
 80056f0:	6833      	ldrmi	r3, [r6, #0]
 80056f2:	3302      	addmi	r3, #2
 80056f4:	6033      	strmi	r3, [r6, #0]
 80056f6:	6825      	ldr	r5, [r4, #0]
 80056f8:	f015 0506 	ands.w	r5, r5, #6
 80056fc:	d106      	bne.n	800570c <_printf_common+0x48>
 80056fe:	f104 0a19 	add.w	sl, r4, #25
 8005702:	68e3      	ldr	r3, [r4, #12]
 8005704:	6832      	ldr	r2, [r6, #0]
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	42ab      	cmp	r3, r5
 800570a:	dc26      	bgt.n	800575a <_printf_common+0x96>
 800570c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005710:	1e13      	subs	r3, r2, #0
 8005712:	6822      	ldr	r2, [r4, #0]
 8005714:	bf18      	it	ne
 8005716:	2301      	movne	r3, #1
 8005718:	0692      	lsls	r2, r2, #26
 800571a:	d42b      	bmi.n	8005774 <_printf_common+0xb0>
 800571c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005720:	4649      	mov	r1, r9
 8005722:	4638      	mov	r0, r7
 8005724:	47c0      	blx	r8
 8005726:	3001      	adds	r0, #1
 8005728:	d01e      	beq.n	8005768 <_printf_common+0xa4>
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	68e5      	ldr	r5, [r4, #12]
 800572e:	6832      	ldr	r2, [r6, #0]
 8005730:	f003 0306 	and.w	r3, r3, #6
 8005734:	2b04      	cmp	r3, #4
 8005736:	bf08      	it	eq
 8005738:	1aad      	subeq	r5, r5, r2
 800573a:	68a3      	ldr	r3, [r4, #8]
 800573c:	6922      	ldr	r2, [r4, #16]
 800573e:	bf0c      	ite	eq
 8005740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005744:	2500      	movne	r5, #0
 8005746:	4293      	cmp	r3, r2
 8005748:	bfc4      	itt	gt
 800574a:	1a9b      	subgt	r3, r3, r2
 800574c:	18ed      	addgt	r5, r5, r3
 800574e:	2600      	movs	r6, #0
 8005750:	341a      	adds	r4, #26
 8005752:	42b5      	cmp	r5, r6
 8005754:	d11a      	bne.n	800578c <_printf_common+0xc8>
 8005756:	2000      	movs	r0, #0
 8005758:	e008      	b.n	800576c <_printf_common+0xa8>
 800575a:	2301      	movs	r3, #1
 800575c:	4652      	mov	r2, sl
 800575e:	4649      	mov	r1, r9
 8005760:	4638      	mov	r0, r7
 8005762:	47c0      	blx	r8
 8005764:	3001      	adds	r0, #1
 8005766:	d103      	bne.n	8005770 <_printf_common+0xac>
 8005768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800576c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005770:	3501      	adds	r5, #1
 8005772:	e7c6      	b.n	8005702 <_printf_common+0x3e>
 8005774:	18e1      	adds	r1, r4, r3
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	2030      	movs	r0, #48	; 0x30
 800577a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800577e:	4422      	add	r2, r4
 8005780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005788:	3302      	adds	r3, #2
 800578a:	e7c7      	b.n	800571c <_printf_common+0x58>
 800578c:	2301      	movs	r3, #1
 800578e:	4622      	mov	r2, r4
 8005790:	4649      	mov	r1, r9
 8005792:	4638      	mov	r0, r7
 8005794:	47c0      	blx	r8
 8005796:	3001      	adds	r0, #1
 8005798:	d0e6      	beq.n	8005768 <_printf_common+0xa4>
 800579a:	3601      	adds	r6, #1
 800579c:	e7d9      	b.n	8005752 <_printf_common+0x8e>
	...

080057a0 <_printf_i>:
 80057a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a4:	7e0f      	ldrb	r7, [r1, #24]
 80057a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057a8:	2f78      	cmp	r7, #120	; 0x78
 80057aa:	4691      	mov	r9, r2
 80057ac:	4680      	mov	r8, r0
 80057ae:	460c      	mov	r4, r1
 80057b0:	469a      	mov	sl, r3
 80057b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057b6:	d807      	bhi.n	80057c8 <_printf_i+0x28>
 80057b8:	2f62      	cmp	r7, #98	; 0x62
 80057ba:	d80a      	bhi.n	80057d2 <_printf_i+0x32>
 80057bc:	2f00      	cmp	r7, #0
 80057be:	f000 80d8 	beq.w	8005972 <_printf_i+0x1d2>
 80057c2:	2f58      	cmp	r7, #88	; 0x58
 80057c4:	f000 80a3 	beq.w	800590e <_printf_i+0x16e>
 80057c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057d0:	e03a      	b.n	8005848 <_printf_i+0xa8>
 80057d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057d6:	2b15      	cmp	r3, #21
 80057d8:	d8f6      	bhi.n	80057c8 <_printf_i+0x28>
 80057da:	a101      	add	r1, pc, #4	; (adr r1, 80057e0 <_printf_i+0x40>)
 80057dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057e0:	08005839 	.word	0x08005839
 80057e4:	0800584d 	.word	0x0800584d
 80057e8:	080057c9 	.word	0x080057c9
 80057ec:	080057c9 	.word	0x080057c9
 80057f0:	080057c9 	.word	0x080057c9
 80057f4:	080057c9 	.word	0x080057c9
 80057f8:	0800584d 	.word	0x0800584d
 80057fc:	080057c9 	.word	0x080057c9
 8005800:	080057c9 	.word	0x080057c9
 8005804:	080057c9 	.word	0x080057c9
 8005808:	080057c9 	.word	0x080057c9
 800580c:	08005959 	.word	0x08005959
 8005810:	0800587d 	.word	0x0800587d
 8005814:	0800593b 	.word	0x0800593b
 8005818:	080057c9 	.word	0x080057c9
 800581c:	080057c9 	.word	0x080057c9
 8005820:	0800597b 	.word	0x0800597b
 8005824:	080057c9 	.word	0x080057c9
 8005828:	0800587d 	.word	0x0800587d
 800582c:	080057c9 	.word	0x080057c9
 8005830:	080057c9 	.word	0x080057c9
 8005834:	08005943 	.word	0x08005943
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	1d1a      	adds	r2, r3, #4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	602a      	str	r2, [r5, #0]
 8005840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005848:	2301      	movs	r3, #1
 800584a:	e0a3      	b.n	8005994 <_printf_i+0x1f4>
 800584c:	6820      	ldr	r0, [r4, #0]
 800584e:	6829      	ldr	r1, [r5, #0]
 8005850:	0606      	lsls	r6, r0, #24
 8005852:	f101 0304 	add.w	r3, r1, #4
 8005856:	d50a      	bpl.n	800586e <_printf_i+0xce>
 8005858:	680e      	ldr	r6, [r1, #0]
 800585a:	602b      	str	r3, [r5, #0]
 800585c:	2e00      	cmp	r6, #0
 800585e:	da03      	bge.n	8005868 <_printf_i+0xc8>
 8005860:	232d      	movs	r3, #45	; 0x2d
 8005862:	4276      	negs	r6, r6
 8005864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005868:	485e      	ldr	r0, [pc, #376]	; (80059e4 <_printf_i+0x244>)
 800586a:	230a      	movs	r3, #10
 800586c:	e019      	b.n	80058a2 <_printf_i+0x102>
 800586e:	680e      	ldr	r6, [r1, #0]
 8005870:	602b      	str	r3, [r5, #0]
 8005872:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005876:	bf18      	it	ne
 8005878:	b236      	sxthne	r6, r6
 800587a:	e7ef      	b.n	800585c <_printf_i+0xbc>
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	6820      	ldr	r0, [r4, #0]
 8005880:	1d19      	adds	r1, r3, #4
 8005882:	6029      	str	r1, [r5, #0]
 8005884:	0601      	lsls	r1, r0, #24
 8005886:	d501      	bpl.n	800588c <_printf_i+0xec>
 8005888:	681e      	ldr	r6, [r3, #0]
 800588a:	e002      	b.n	8005892 <_printf_i+0xf2>
 800588c:	0646      	lsls	r6, r0, #25
 800588e:	d5fb      	bpl.n	8005888 <_printf_i+0xe8>
 8005890:	881e      	ldrh	r6, [r3, #0]
 8005892:	4854      	ldr	r0, [pc, #336]	; (80059e4 <_printf_i+0x244>)
 8005894:	2f6f      	cmp	r7, #111	; 0x6f
 8005896:	bf0c      	ite	eq
 8005898:	2308      	moveq	r3, #8
 800589a:	230a      	movne	r3, #10
 800589c:	2100      	movs	r1, #0
 800589e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058a2:	6865      	ldr	r5, [r4, #4]
 80058a4:	60a5      	str	r5, [r4, #8]
 80058a6:	2d00      	cmp	r5, #0
 80058a8:	bfa2      	ittt	ge
 80058aa:	6821      	ldrge	r1, [r4, #0]
 80058ac:	f021 0104 	bicge.w	r1, r1, #4
 80058b0:	6021      	strge	r1, [r4, #0]
 80058b2:	b90e      	cbnz	r6, 80058b8 <_printf_i+0x118>
 80058b4:	2d00      	cmp	r5, #0
 80058b6:	d04d      	beq.n	8005954 <_printf_i+0x1b4>
 80058b8:	4615      	mov	r5, r2
 80058ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80058be:	fb03 6711 	mls	r7, r3, r1, r6
 80058c2:	5dc7      	ldrb	r7, [r0, r7]
 80058c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058c8:	4637      	mov	r7, r6
 80058ca:	42bb      	cmp	r3, r7
 80058cc:	460e      	mov	r6, r1
 80058ce:	d9f4      	bls.n	80058ba <_printf_i+0x11a>
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d10b      	bne.n	80058ec <_printf_i+0x14c>
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	07de      	lsls	r6, r3, #31
 80058d8:	d508      	bpl.n	80058ec <_printf_i+0x14c>
 80058da:	6923      	ldr	r3, [r4, #16]
 80058dc:	6861      	ldr	r1, [r4, #4]
 80058de:	4299      	cmp	r1, r3
 80058e0:	bfde      	ittt	le
 80058e2:	2330      	movle	r3, #48	; 0x30
 80058e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80058ec:	1b52      	subs	r2, r2, r5
 80058ee:	6122      	str	r2, [r4, #16]
 80058f0:	f8cd a000 	str.w	sl, [sp]
 80058f4:	464b      	mov	r3, r9
 80058f6:	aa03      	add	r2, sp, #12
 80058f8:	4621      	mov	r1, r4
 80058fa:	4640      	mov	r0, r8
 80058fc:	f7ff fee2 	bl	80056c4 <_printf_common>
 8005900:	3001      	adds	r0, #1
 8005902:	d14c      	bne.n	800599e <_printf_i+0x1fe>
 8005904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005908:	b004      	add	sp, #16
 800590a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590e:	4835      	ldr	r0, [pc, #212]	; (80059e4 <_printf_i+0x244>)
 8005910:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005914:	6829      	ldr	r1, [r5, #0]
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	f851 6b04 	ldr.w	r6, [r1], #4
 800591c:	6029      	str	r1, [r5, #0]
 800591e:	061d      	lsls	r5, r3, #24
 8005920:	d514      	bpl.n	800594c <_printf_i+0x1ac>
 8005922:	07df      	lsls	r7, r3, #31
 8005924:	bf44      	itt	mi
 8005926:	f043 0320 	orrmi.w	r3, r3, #32
 800592a:	6023      	strmi	r3, [r4, #0]
 800592c:	b91e      	cbnz	r6, 8005936 <_printf_i+0x196>
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	f023 0320 	bic.w	r3, r3, #32
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	2310      	movs	r3, #16
 8005938:	e7b0      	b.n	800589c <_printf_i+0xfc>
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	f043 0320 	orr.w	r3, r3, #32
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	2378      	movs	r3, #120	; 0x78
 8005944:	4828      	ldr	r0, [pc, #160]	; (80059e8 <_printf_i+0x248>)
 8005946:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800594a:	e7e3      	b.n	8005914 <_printf_i+0x174>
 800594c:	0659      	lsls	r1, r3, #25
 800594e:	bf48      	it	mi
 8005950:	b2b6      	uxthmi	r6, r6
 8005952:	e7e6      	b.n	8005922 <_printf_i+0x182>
 8005954:	4615      	mov	r5, r2
 8005956:	e7bb      	b.n	80058d0 <_printf_i+0x130>
 8005958:	682b      	ldr	r3, [r5, #0]
 800595a:	6826      	ldr	r6, [r4, #0]
 800595c:	6961      	ldr	r1, [r4, #20]
 800595e:	1d18      	adds	r0, r3, #4
 8005960:	6028      	str	r0, [r5, #0]
 8005962:	0635      	lsls	r5, r6, #24
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	d501      	bpl.n	800596c <_printf_i+0x1cc>
 8005968:	6019      	str	r1, [r3, #0]
 800596a:	e002      	b.n	8005972 <_printf_i+0x1d2>
 800596c:	0670      	lsls	r0, r6, #25
 800596e:	d5fb      	bpl.n	8005968 <_printf_i+0x1c8>
 8005970:	8019      	strh	r1, [r3, #0]
 8005972:	2300      	movs	r3, #0
 8005974:	6123      	str	r3, [r4, #16]
 8005976:	4615      	mov	r5, r2
 8005978:	e7ba      	b.n	80058f0 <_printf_i+0x150>
 800597a:	682b      	ldr	r3, [r5, #0]
 800597c:	1d1a      	adds	r2, r3, #4
 800597e:	602a      	str	r2, [r5, #0]
 8005980:	681d      	ldr	r5, [r3, #0]
 8005982:	6862      	ldr	r2, [r4, #4]
 8005984:	2100      	movs	r1, #0
 8005986:	4628      	mov	r0, r5
 8005988:	f7fa fc2a 	bl	80001e0 <memchr>
 800598c:	b108      	cbz	r0, 8005992 <_printf_i+0x1f2>
 800598e:	1b40      	subs	r0, r0, r5
 8005990:	6060      	str	r0, [r4, #4]
 8005992:	6863      	ldr	r3, [r4, #4]
 8005994:	6123      	str	r3, [r4, #16]
 8005996:	2300      	movs	r3, #0
 8005998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800599c:	e7a8      	b.n	80058f0 <_printf_i+0x150>
 800599e:	6923      	ldr	r3, [r4, #16]
 80059a0:	462a      	mov	r2, r5
 80059a2:	4649      	mov	r1, r9
 80059a4:	4640      	mov	r0, r8
 80059a6:	47d0      	blx	sl
 80059a8:	3001      	adds	r0, #1
 80059aa:	d0ab      	beq.n	8005904 <_printf_i+0x164>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	079b      	lsls	r3, r3, #30
 80059b0:	d413      	bmi.n	80059da <_printf_i+0x23a>
 80059b2:	68e0      	ldr	r0, [r4, #12]
 80059b4:	9b03      	ldr	r3, [sp, #12]
 80059b6:	4298      	cmp	r0, r3
 80059b8:	bfb8      	it	lt
 80059ba:	4618      	movlt	r0, r3
 80059bc:	e7a4      	b.n	8005908 <_printf_i+0x168>
 80059be:	2301      	movs	r3, #1
 80059c0:	4632      	mov	r2, r6
 80059c2:	4649      	mov	r1, r9
 80059c4:	4640      	mov	r0, r8
 80059c6:	47d0      	blx	sl
 80059c8:	3001      	adds	r0, #1
 80059ca:	d09b      	beq.n	8005904 <_printf_i+0x164>
 80059cc:	3501      	adds	r5, #1
 80059ce:	68e3      	ldr	r3, [r4, #12]
 80059d0:	9903      	ldr	r1, [sp, #12]
 80059d2:	1a5b      	subs	r3, r3, r1
 80059d4:	42ab      	cmp	r3, r5
 80059d6:	dcf2      	bgt.n	80059be <_printf_i+0x21e>
 80059d8:	e7eb      	b.n	80059b2 <_printf_i+0x212>
 80059da:	2500      	movs	r5, #0
 80059dc:	f104 0619 	add.w	r6, r4, #25
 80059e0:	e7f5      	b.n	80059ce <_printf_i+0x22e>
 80059e2:	bf00      	nop
 80059e4:	08005d11 	.word	0x08005d11
 80059e8:	08005d22 	.word	0x08005d22

080059ec <memmove>:
 80059ec:	4288      	cmp	r0, r1
 80059ee:	b510      	push	{r4, lr}
 80059f0:	eb01 0402 	add.w	r4, r1, r2
 80059f4:	d902      	bls.n	80059fc <memmove+0x10>
 80059f6:	4284      	cmp	r4, r0
 80059f8:	4623      	mov	r3, r4
 80059fa:	d807      	bhi.n	8005a0c <memmove+0x20>
 80059fc:	1e43      	subs	r3, r0, #1
 80059fe:	42a1      	cmp	r1, r4
 8005a00:	d008      	beq.n	8005a14 <memmove+0x28>
 8005a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a0a:	e7f8      	b.n	80059fe <memmove+0x12>
 8005a0c:	4402      	add	r2, r0
 8005a0e:	4601      	mov	r1, r0
 8005a10:	428a      	cmp	r2, r1
 8005a12:	d100      	bne.n	8005a16 <memmove+0x2a>
 8005a14:	bd10      	pop	{r4, pc}
 8005a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a1e:	e7f7      	b.n	8005a10 <memmove+0x24>

08005a20 <_free_r>:
 8005a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a22:	2900      	cmp	r1, #0
 8005a24:	d044      	beq.n	8005ab0 <_free_r+0x90>
 8005a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a2a:	9001      	str	r0, [sp, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a32:	bfb8      	it	lt
 8005a34:	18e4      	addlt	r4, r4, r3
 8005a36:	f000 f913 	bl	8005c60 <__malloc_lock>
 8005a3a:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <_free_r+0x94>)
 8005a3c:	9801      	ldr	r0, [sp, #4]
 8005a3e:	6813      	ldr	r3, [r2, #0]
 8005a40:	b933      	cbnz	r3, 8005a50 <_free_r+0x30>
 8005a42:	6063      	str	r3, [r4, #4]
 8005a44:	6014      	str	r4, [r2, #0]
 8005a46:	b003      	add	sp, #12
 8005a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a4c:	f000 b90e 	b.w	8005c6c <__malloc_unlock>
 8005a50:	42a3      	cmp	r3, r4
 8005a52:	d908      	bls.n	8005a66 <_free_r+0x46>
 8005a54:	6825      	ldr	r5, [r4, #0]
 8005a56:	1961      	adds	r1, r4, r5
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	bf01      	itttt	eq
 8005a5c:	6819      	ldreq	r1, [r3, #0]
 8005a5e:	685b      	ldreq	r3, [r3, #4]
 8005a60:	1949      	addeq	r1, r1, r5
 8005a62:	6021      	streq	r1, [r4, #0]
 8005a64:	e7ed      	b.n	8005a42 <_free_r+0x22>
 8005a66:	461a      	mov	r2, r3
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	b10b      	cbz	r3, 8005a70 <_free_r+0x50>
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	d9fa      	bls.n	8005a66 <_free_r+0x46>
 8005a70:	6811      	ldr	r1, [r2, #0]
 8005a72:	1855      	adds	r5, r2, r1
 8005a74:	42a5      	cmp	r5, r4
 8005a76:	d10b      	bne.n	8005a90 <_free_r+0x70>
 8005a78:	6824      	ldr	r4, [r4, #0]
 8005a7a:	4421      	add	r1, r4
 8005a7c:	1854      	adds	r4, r2, r1
 8005a7e:	42a3      	cmp	r3, r4
 8005a80:	6011      	str	r1, [r2, #0]
 8005a82:	d1e0      	bne.n	8005a46 <_free_r+0x26>
 8005a84:	681c      	ldr	r4, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	6053      	str	r3, [r2, #4]
 8005a8a:	4421      	add	r1, r4
 8005a8c:	6011      	str	r1, [r2, #0]
 8005a8e:	e7da      	b.n	8005a46 <_free_r+0x26>
 8005a90:	d902      	bls.n	8005a98 <_free_r+0x78>
 8005a92:	230c      	movs	r3, #12
 8005a94:	6003      	str	r3, [r0, #0]
 8005a96:	e7d6      	b.n	8005a46 <_free_r+0x26>
 8005a98:	6825      	ldr	r5, [r4, #0]
 8005a9a:	1961      	adds	r1, r4, r5
 8005a9c:	428b      	cmp	r3, r1
 8005a9e:	bf04      	itt	eq
 8005aa0:	6819      	ldreq	r1, [r3, #0]
 8005aa2:	685b      	ldreq	r3, [r3, #4]
 8005aa4:	6063      	str	r3, [r4, #4]
 8005aa6:	bf04      	itt	eq
 8005aa8:	1949      	addeq	r1, r1, r5
 8005aaa:	6021      	streq	r1, [r4, #0]
 8005aac:	6054      	str	r4, [r2, #4]
 8005aae:	e7ca      	b.n	8005a46 <_free_r+0x26>
 8005ab0:	b003      	add	sp, #12
 8005ab2:	bd30      	pop	{r4, r5, pc}
 8005ab4:	20004ac4 	.word	0x20004ac4

08005ab8 <sbrk_aligned>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	4e0e      	ldr	r6, [pc, #56]	; (8005af4 <sbrk_aligned+0x3c>)
 8005abc:	460c      	mov	r4, r1
 8005abe:	6831      	ldr	r1, [r6, #0]
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	b911      	cbnz	r1, 8005aca <sbrk_aligned+0x12>
 8005ac4:	f000 f8bc 	bl	8005c40 <_sbrk_r>
 8005ac8:	6030      	str	r0, [r6, #0]
 8005aca:	4621      	mov	r1, r4
 8005acc:	4628      	mov	r0, r5
 8005ace:	f000 f8b7 	bl	8005c40 <_sbrk_r>
 8005ad2:	1c43      	adds	r3, r0, #1
 8005ad4:	d00a      	beq.n	8005aec <sbrk_aligned+0x34>
 8005ad6:	1cc4      	adds	r4, r0, #3
 8005ad8:	f024 0403 	bic.w	r4, r4, #3
 8005adc:	42a0      	cmp	r0, r4
 8005ade:	d007      	beq.n	8005af0 <sbrk_aligned+0x38>
 8005ae0:	1a21      	subs	r1, r4, r0
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f000 f8ac 	bl	8005c40 <_sbrk_r>
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d101      	bne.n	8005af0 <sbrk_aligned+0x38>
 8005aec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005af0:	4620      	mov	r0, r4
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
 8005af4:	20004ac8 	.word	0x20004ac8

08005af8 <_malloc_r>:
 8005af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005afc:	1ccd      	adds	r5, r1, #3
 8005afe:	f025 0503 	bic.w	r5, r5, #3
 8005b02:	3508      	adds	r5, #8
 8005b04:	2d0c      	cmp	r5, #12
 8005b06:	bf38      	it	cc
 8005b08:	250c      	movcc	r5, #12
 8005b0a:	2d00      	cmp	r5, #0
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	db01      	blt.n	8005b14 <_malloc_r+0x1c>
 8005b10:	42a9      	cmp	r1, r5
 8005b12:	d905      	bls.n	8005b20 <_malloc_r+0x28>
 8005b14:	230c      	movs	r3, #12
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	2600      	movs	r6, #0
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b20:	4e2e      	ldr	r6, [pc, #184]	; (8005bdc <_malloc_r+0xe4>)
 8005b22:	f000 f89d 	bl	8005c60 <__malloc_lock>
 8005b26:	6833      	ldr	r3, [r6, #0]
 8005b28:	461c      	mov	r4, r3
 8005b2a:	bb34      	cbnz	r4, 8005b7a <_malloc_r+0x82>
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	4638      	mov	r0, r7
 8005b30:	f7ff ffc2 	bl	8005ab8 <sbrk_aligned>
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	4604      	mov	r4, r0
 8005b38:	d14d      	bne.n	8005bd6 <_malloc_r+0xde>
 8005b3a:	6834      	ldr	r4, [r6, #0]
 8005b3c:	4626      	mov	r6, r4
 8005b3e:	2e00      	cmp	r6, #0
 8005b40:	d140      	bne.n	8005bc4 <_malloc_r+0xcc>
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	4631      	mov	r1, r6
 8005b46:	4638      	mov	r0, r7
 8005b48:	eb04 0803 	add.w	r8, r4, r3
 8005b4c:	f000 f878 	bl	8005c40 <_sbrk_r>
 8005b50:	4580      	cmp	r8, r0
 8005b52:	d13a      	bne.n	8005bca <_malloc_r+0xd2>
 8005b54:	6821      	ldr	r1, [r4, #0]
 8005b56:	3503      	adds	r5, #3
 8005b58:	1a6d      	subs	r5, r5, r1
 8005b5a:	f025 0503 	bic.w	r5, r5, #3
 8005b5e:	3508      	adds	r5, #8
 8005b60:	2d0c      	cmp	r5, #12
 8005b62:	bf38      	it	cc
 8005b64:	250c      	movcc	r5, #12
 8005b66:	4629      	mov	r1, r5
 8005b68:	4638      	mov	r0, r7
 8005b6a:	f7ff ffa5 	bl	8005ab8 <sbrk_aligned>
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d02b      	beq.n	8005bca <_malloc_r+0xd2>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	442b      	add	r3, r5
 8005b76:	6023      	str	r3, [r4, #0]
 8005b78:	e00e      	b.n	8005b98 <_malloc_r+0xa0>
 8005b7a:	6822      	ldr	r2, [r4, #0]
 8005b7c:	1b52      	subs	r2, r2, r5
 8005b7e:	d41e      	bmi.n	8005bbe <_malloc_r+0xc6>
 8005b80:	2a0b      	cmp	r2, #11
 8005b82:	d916      	bls.n	8005bb2 <_malloc_r+0xba>
 8005b84:	1961      	adds	r1, r4, r5
 8005b86:	42a3      	cmp	r3, r4
 8005b88:	6025      	str	r5, [r4, #0]
 8005b8a:	bf18      	it	ne
 8005b8c:	6059      	strne	r1, [r3, #4]
 8005b8e:	6863      	ldr	r3, [r4, #4]
 8005b90:	bf08      	it	eq
 8005b92:	6031      	streq	r1, [r6, #0]
 8005b94:	5162      	str	r2, [r4, r5]
 8005b96:	604b      	str	r3, [r1, #4]
 8005b98:	4638      	mov	r0, r7
 8005b9a:	f104 060b 	add.w	r6, r4, #11
 8005b9e:	f000 f865 	bl	8005c6c <__malloc_unlock>
 8005ba2:	f026 0607 	bic.w	r6, r6, #7
 8005ba6:	1d23      	adds	r3, r4, #4
 8005ba8:	1af2      	subs	r2, r6, r3
 8005baa:	d0b6      	beq.n	8005b1a <_malloc_r+0x22>
 8005bac:	1b9b      	subs	r3, r3, r6
 8005bae:	50a3      	str	r3, [r4, r2]
 8005bb0:	e7b3      	b.n	8005b1a <_malloc_r+0x22>
 8005bb2:	6862      	ldr	r2, [r4, #4]
 8005bb4:	42a3      	cmp	r3, r4
 8005bb6:	bf0c      	ite	eq
 8005bb8:	6032      	streq	r2, [r6, #0]
 8005bba:	605a      	strne	r2, [r3, #4]
 8005bbc:	e7ec      	b.n	8005b98 <_malloc_r+0xa0>
 8005bbe:	4623      	mov	r3, r4
 8005bc0:	6864      	ldr	r4, [r4, #4]
 8005bc2:	e7b2      	b.n	8005b2a <_malloc_r+0x32>
 8005bc4:	4634      	mov	r4, r6
 8005bc6:	6876      	ldr	r6, [r6, #4]
 8005bc8:	e7b9      	b.n	8005b3e <_malloc_r+0x46>
 8005bca:	230c      	movs	r3, #12
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	4638      	mov	r0, r7
 8005bd0:	f000 f84c 	bl	8005c6c <__malloc_unlock>
 8005bd4:	e7a1      	b.n	8005b1a <_malloc_r+0x22>
 8005bd6:	6025      	str	r5, [r4, #0]
 8005bd8:	e7de      	b.n	8005b98 <_malloc_r+0xa0>
 8005bda:	bf00      	nop
 8005bdc:	20004ac4 	.word	0x20004ac4

08005be0 <_realloc_r>:
 8005be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be4:	4680      	mov	r8, r0
 8005be6:	4614      	mov	r4, r2
 8005be8:	460e      	mov	r6, r1
 8005bea:	b921      	cbnz	r1, 8005bf6 <_realloc_r+0x16>
 8005bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	f7ff bf81 	b.w	8005af8 <_malloc_r>
 8005bf6:	b92a      	cbnz	r2, 8005c04 <_realloc_r+0x24>
 8005bf8:	f7ff ff12 	bl	8005a20 <_free_r>
 8005bfc:	4625      	mov	r5, r4
 8005bfe:	4628      	mov	r0, r5
 8005c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c04:	f000 f838 	bl	8005c78 <_malloc_usable_size_r>
 8005c08:	4284      	cmp	r4, r0
 8005c0a:	4607      	mov	r7, r0
 8005c0c:	d802      	bhi.n	8005c14 <_realloc_r+0x34>
 8005c0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c12:	d812      	bhi.n	8005c3a <_realloc_r+0x5a>
 8005c14:	4621      	mov	r1, r4
 8005c16:	4640      	mov	r0, r8
 8005c18:	f7ff ff6e 	bl	8005af8 <_malloc_r>
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d0ed      	beq.n	8005bfe <_realloc_r+0x1e>
 8005c22:	42bc      	cmp	r4, r7
 8005c24:	4622      	mov	r2, r4
 8005c26:	4631      	mov	r1, r6
 8005c28:	bf28      	it	cs
 8005c2a:	463a      	movcs	r2, r7
 8005c2c:	f7ff fbb8 	bl	80053a0 <memcpy>
 8005c30:	4631      	mov	r1, r6
 8005c32:	4640      	mov	r0, r8
 8005c34:	f7ff fef4 	bl	8005a20 <_free_r>
 8005c38:	e7e1      	b.n	8005bfe <_realloc_r+0x1e>
 8005c3a:	4635      	mov	r5, r6
 8005c3c:	e7df      	b.n	8005bfe <_realloc_r+0x1e>
	...

08005c40 <_sbrk_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4d06      	ldr	r5, [pc, #24]	; (8005c5c <_sbrk_r+0x1c>)
 8005c44:	2300      	movs	r3, #0
 8005c46:	4604      	mov	r4, r0
 8005c48:	4608      	mov	r0, r1
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	f7fa ff4e 	bl	8000aec <_sbrk>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_sbrk_r+0x1a>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_sbrk_r+0x1a>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	20004acc 	.word	0x20004acc

08005c60 <__malloc_lock>:
 8005c60:	4801      	ldr	r0, [pc, #4]	; (8005c68 <__malloc_lock+0x8>)
 8005c62:	f000 b811 	b.w	8005c88 <__retarget_lock_acquire_recursive>
 8005c66:	bf00      	nop
 8005c68:	20004ad0 	.word	0x20004ad0

08005c6c <__malloc_unlock>:
 8005c6c:	4801      	ldr	r0, [pc, #4]	; (8005c74 <__malloc_unlock+0x8>)
 8005c6e:	f000 b80c 	b.w	8005c8a <__retarget_lock_release_recursive>
 8005c72:	bf00      	nop
 8005c74:	20004ad0 	.word	0x20004ad0

08005c78 <_malloc_usable_size_r>:
 8005c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c7c:	1f18      	subs	r0, r3, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bfbc      	itt	lt
 8005c82:	580b      	ldrlt	r3, [r1, r0]
 8005c84:	18c0      	addlt	r0, r0, r3
 8005c86:	4770      	bx	lr

08005c88 <__retarget_lock_acquire_recursive>:
 8005c88:	4770      	bx	lr

08005c8a <__retarget_lock_release_recursive>:
 8005c8a:	4770      	bx	lr

08005c8c <_init>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	bf00      	nop
 8005c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c92:	bc08      	pop	{r3}
 8005c94:	469e      	mov	lr, r3
 8005c96:	4770      	bx	lr

08005c98 <_fini>:
 8005c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9a:	bf00      	nop
 8005c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9e:	bc08      	pop	{r3}
 8005ca0:	469e      	mov	lr, r3
 8005ca2:	4770      	bx	lr
