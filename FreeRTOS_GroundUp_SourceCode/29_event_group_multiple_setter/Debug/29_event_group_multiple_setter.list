
29_event_group_multiple_setter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005bc0  08005bc0  00015bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c94  08005c94  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c9c  08005c9c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c9c  08005c9c  00015c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ca0  08005ca0  00015ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a10  20000078  08005d1c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a88  08005d1c  00024a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018710  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000365a  00000000  00000000  000387b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  0003be18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  0003d340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004fd4  00000000  00000000  0003e720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cac  00000000  00000000  000436f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099b66  00000000  00000000  0005c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5f06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f38  00000000  00000000  000f5f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ba8 	.word	0x08005ba8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005ba8 	.word	0x08005ba8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
void Task3(void *pvParameters);



int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af02      	add	r7, sp, #8

  HAL_Init();
 80004ea:	f000 fb35 	bl	8000b58 <HAL_Init>


  SystemClock_Config();
 80004ee:	f000 f889 	bl	8000604 <SystemClock_Config>
  MX_GPIO_Init();
 80004f2:	f000 f8e5 	bl	80006c0 <MX_GPIO_Init>
  USART2_UART_TX_Init();
 80004f6:	f000 fab7 	bl	8000a68 <USART2_UART_TX_Init>
  printf("hello form stm32f4xx\r\n");
 80004fa:	4814      	ldr	r0, [pc, #80]	; (800054c <main+0x68>)
 80004fc:	f004 fec4 	bl	8005288 <puts>

  xEventGroup=xEventGroupCreate();
 8000500:	f001 ffe2 	bl	80024c8 <xEventGroupCreate>
 8000504:	4603      	mov	r3, r0
 8000506:	4a12      	ldr	r2, [pc, #72]	; (8000550 <main+0x6c>)
 8000508:	6013      	str	r3, [r2, #0]
  xTaskCreate(Task1, "task 1", 100, NULL, 1, NULL);
 800050a:	2300      	movs	r3, #0
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	2264      	movs	r2, #100	; 0x64
 8000516:	490f      	ldr	r1, [pc, #60]	; (8000554 <main+0x70>)
 8000518:	480f      	ldr	r0, [pc, #60]	; (8000558 <main+0x74>)
 800051a:	f002 ff26 	bl	800336a <xTaskCreate>
  xTaskCreate(Task2, "task 2", 100, NULL, 1, NULL);
 800051e:	2300      	movs	r3, #0
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2300      	movs	r3, #0
 8000528:	2264      	movs	r2, #100	; 0x64
 800052a:	490c      	ldr	r1, [pc, #48]	; (800055c <main+0x78>)
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <main+0x7c>)
 800052e:	f002 ff1c 	bl	800336a <xTaskCreate>
  xTaskCreate(Task3, "task 3", 100, NULL, 1, NULL);
 8000532:	2300      	movs	r3, #0
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	2301      	movs	r3, #1
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2300      	movs	r3, #0
 800053c:	2264      	movs	r2, #100	; 0x64
 800053e:	4909      	ldr	r1, [pc, #36]	; (8000564 <main+0x80>)
 8000540:	4809      	ldr	r0, [pc, #36]	; (8000568 <main+0x84>)
 8000542:	f002 ff12 	bl	800336a <xTaskCreate>


  vTaskStartScheduler();
 8000546:	f003 f889 	bl	800365c <vTaskStartScheduler>
  while (1)
 800054a:	e7fe      	b.n	800054a <main+0x66>
 800054c:	08005bc0 	.word	0x08005bc0
 8000550:	200000d8 	.word	0x200000d8
 8000554:	08005bd8 	.word	0x08005bd8
 8000558:	0800056d 	.word	0x0800056d
 800055c:	08005be0 	.word	0x08005be0
 8000560:	08000595 	.word	0x08000595
 8000564:	08005be8 	.word	0x08005be8
 8000568:	080005bd 	.word	0x080005bd

0800056c <Task1>:
}



void Task1(void *pvParameters)
	{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	EventBits_t uxReturn;
	while(1)
		{

		uxReturn=xEventGroupSync(xEventGroup, TASK1_BIT, uxALLSyncBits, portMAX_DELAY);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <Task1+0x20>)
 8000576:	6818      	ldr	r0, [r3, #0]
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <Task1+0x24>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000580:	2101      	movs	r1, #1
 8000582:	f001 ffbb 	bl	80024fc <xEventGroupSync>
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	e7f4      	b.n	8000574 <Task1+0x8>
 800058a:	bf00      	nop
 800058c:	200000d8 	.word	0x200000d8
 8000590:	20000000 	.word	0x20000000

08000594 <Task2>:
		}
	}


void Task2(void *pvParameters)
	{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	EventBits_t uxReturn;
	while(1)
		{
		uxReturn=xEventGroupSync(xEventGroup, TASK2_BIT, uxALLSyncBits, portMAX_DELAY);
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <Task2+0x20>)
 800059e:	6818      	ldr	r0, [r3, #0]
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <Task2+0x24>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a8:	2102      	movs	r1, #2
 80005aa:	f001 ffa7 	bl	80024fc <xEventGroupSync>
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	e7f4      	b.n	800059c <Task2+0x8>
 80005b2:	bf00      	nop
 80005b4:	200000d8 	.word	0x200000d8
 80005b8:	20000000 	.word	0x20000000

080005bc <Task3>:
					}
		}
	}

void Task3(void *pvParameters)
	{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	EventBits_t uxReturn;
	while(1)
		{
		uxReturn=xEventGroupSync(xEventGroup, TASK3_BIT, uxALLSyncBits, portMAX_DELAY);
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <Task3+0x3c>)
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <Task3+0x40>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005d0:	2104      	movs	r1, #4
 80005d2:	f001 ff93 	bl	80024fc <xEventGroupSync>
 80005d6:	60f8      	str	r0, [r7, #12]
		if(uxALLSyncBits==(uxReturn&uxALLSyncBits))
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <Task3+0x40>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	401a      	ands	r2, r3
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <Task3+0x40>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d1ed      	bne.n	80005c4 <Task3+0x8>
					{
						printf("ALL TASKS SET\r\n");
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <Task3+0x44>)
 80005ea:	f004 fe4d 	bl	8005288 <puts>
						vTaskDelay(20);
 80005ee:	2014      	movs	r0, #20
 80005f0:	f003 f800 	bl	80035f4 <vTaskDelay>
		uxReturn=xEventGroupSync(xEventGroup, TASK3_BIT, uxALLSyncBits, portMAX_DELAY);
 80005f4:	e7e6      	b.n	80005c4 <Task3+0x8>
 80005f6:	bf00      	nop
 80005f8:	200000d8 	.word	0x200000d8
 80005fc:	20000000 	.word	0x20000000
 8000600:	08005bf0 	.word	0x08005bf0

08000604 <SystemClock_Config>:
	}



void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f004 fdc2 	bl	800519c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <SystemClock_Config+0xb4>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xb4>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xb4>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <SystemClock_Config+0xb8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <SystemClock_Config+0xb8>)
 800064e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <SystemClock_Config+0xb8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fd17 	bl	80010a8 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000680:	f000 f84a 	bl	8000718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 ff7a 	bl	8001598 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006aa:	f000 f835 	bl	8000718 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_GPIO_Init+0x30>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <MX_GPIO_Init+0x30>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_GPIO_Init+0x30>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d101      	bne.n	800070a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000706:	f000 fa49 	bl	8000b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40014800 	.word	0x40014800

08000718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071c:	b672      	cpsid	i
}
 800071e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000720:	e7fe      	b.n	8000720 <Error_Handler+0x8>
	...

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_MspInit+0x54>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	4a11      	ldr	r2, [pc, #68]	; (8000778 <HAL_MspInit+0x54>)
 8000734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000738:	6453      	str	r3, [r2, #68]	; 0x44
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_MspInit+0x54>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <HAL_MspInit+0x54>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <HAL_MspInit+0x54>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	6413      	str	r3, [r2, #64]	; 0x40
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <HAL_MspInit+0x54>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	210f      	movs	r1, #15
 8000766:	f06f 0001 	mvn.w	r0, #1
 800076a:	f000 faef 	bl	8000d4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a19      	ldr	r2, [pc, #100]	; (8000800 <HAL_UART_MspInit+0x84>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d12b      	bne.n	80007f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <HAL_UART_MspInit+0x88>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a17      	ldr	r2, [pc, #92]	; (8000804 <HAL_UART_MspInit+0x88>)
 80007a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_UART_MspInit+0x88>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <HAL_UART_MspInit+0x88>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a10      	ldr	r2, [pc, #64]	; (8000804 <HAL_UART_MspInit+0x88>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <HAL_UART_MspInit+0x88>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007d6:	230c      	movs	r3, #12
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e6:	2307      	movs	r3, #7
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <HAL_UART_MspInit+0x8c>)
 80007f2:	f000 fad5 	bl	8000da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	; 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40004400 	.word	0x40004400
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000

0800080c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 800081c:	2200      	movs	r2, #0
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	201a      	movs	r0, #26
 8000822:	f000 fa93 	bl	8000d4c <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000826:	201a      	movs	r0, #26
 8000828:	f000 faac 	bl	8000d84 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <HAL_InitTick+0xa0>)
 8000832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000834:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <HAL_InitTick+0xa0>)
 8000836:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800083a:	6453      	str	r3, [r2, #68]	; 0x44
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <HAL_InitTick+0xa0>)
 800083e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000848:	f107 0210 	add.w	r2, r7, #16
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4611      	mov	r1, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f001 f880 	bl	8001958 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000858:	f001 f86a 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 800085c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800085e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000860:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <HAL_InitTick+0xa4>)
 8000862:	fba2 2303 	umull	r2, r3, r2, r3
 8000866:	0c9b      	lsrs	r3, r3, #18
 8000868:	3b01      	subs	r3, #1
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_InitTick+0xa8>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <HAL_InitTick+0xac>)
 8000870:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_InitTick+0xa8>)
 8000874:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000878:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800087a:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <HAL_InitTick+0xa8>)
 800087c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <HAL_InitTick+0xa8>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <HAL_InitTick+0xa8>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <HAL_InitTick+0xa8>)
 800088e:	f001 f895 	bl	80019bc <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d104      	bne.n	80008a2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000898:	4806      	ldr	r0, [pc, #24]	; (80008b4 <HAL_InitTick+0xa8>)
 800089a:	f001 f8e9 	bl	8001a70 <HAL_TIM_Base_Start_IT>
 800089e:	4603      	mov	r3, r0
 80008a0:	e000      	b.n	80008a4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3730      	adds	r7, #48	; 0x30
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	431bde83 	.word	0x431bde83
 80008b4:	200000dc 	.word	0x200000dc
 80008b8:	40014800 	.word	0x40014800

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80008ee:	f001 f921 	bl	8001b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200000dc 	.word	0x200000dc

080008fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	e00a      	b.n	8000924 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800090e:	f3af 8000 	nop.w
 8000912:	4601      	mov	r1, r0
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	60ba      	str	r2, [r7, #8]
 800091a:	b2ca      	uxtb	r2, r1
 800091c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3301      	adds	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697a      	ldr	r2, [r7, #20]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	429a      	cmp	r2, r3
 800092a:	dbf0      	blt.n	800090e <_read+0x12>
	}

return len;
 800092c:	687b      	ldr	r3, [r7, #4]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b086      	sub	sp, #24
 800093a:	af00      	add	r7, sp, #0
 800093c:	60f8      	str	r0, [r7, #12]
 800093e:	60b9      	str	r1, [r7, #8]
 8000940:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	e009      	b.n	800095c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60ba      	str	r2, [r7, #8]
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f8cb 	bl	8000aec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	dbf1      	blt.n	8000948 <_write+0x12>
	}
	return len;
 8000964:	687b      	ldr	r3, [r7, #4]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <_close>:

int _close(int file)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
	return -1;
 8000976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000996:	605a      	str	r2, [r3, #4]
	return 0;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <_isatty>:

int _isatty(int file)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	return 1;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
	return 0;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e0:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <_sbrk+0x5c>)
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <_sbrk+0x60>)
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <_sbrk+0x64>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <_sbrk+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d207      	bcs.n	8000a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a08:	f004 fb90 	bl	800512c <__errno>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	220c      	movs	r2, #12
 8000a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a16:	e009      	b.n	8000a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <_sbrk+0x64>)
 8000a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20020000 	.word	0x20020000
 8000a38:	00000400 	.word	0x00000400
 8000a3c:	20000124 	.word	0x20000124
 8000a40:	20004a88 	.word	0x20004a88

08000a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <SystemInit+0x20>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <SystemInit+0x20>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <USART2_UART_TX_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
 void USART2_UART_TX_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <USART2_UART_TX_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <USART2_UART_TX_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <USART2_UART_TX_Init+0x4c>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <USART2_UART_TX_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <USART2_UART_TX_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <USART2_UART_TX_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <USART2_UART_TX_Init+0x4c>)
 8000a8e:	2208      	movs	r2, #8
 8000a90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <USART2_UART_TX_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <USART2_UART_TX_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <USART2_UART_TX_Init+0x4c>)
 8000aa0:	f001 fa0c 	bl	8001ebc <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <USART2_UART_TX_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f7ff fe35 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000094 	.word	0x20000094
 8000ab8:	40004400 	.word	0x40004400

08000abc <uart2_write>:




 int uart2_write(int ch)
 	{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 	/*Make sure the transmit data register is empty*/
 	while(!(USART2->SR & USART_SR_TXE)){}
 8000ac4:	bf00      	nop
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <uart2_write+0x2c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0f9      	beq.n	8000ac6 <uart2_write+0xa>

 	 /*Write to transmit data register*/
 	USART2->DR	=  (ch & 0xFF);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <uart2_write+0x2c>)
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	6053      	str	r3, [r2, #4]
 	return ch;
 8000ada:	687b      	ldr	r3, [r7, #4]
 	}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	40004400 	.word	0x40004400

08000aec <__io_putchar>:


 int __io_putchar(int ch)
 	{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	 uart2_write(ch);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ffe1 	bl	8000abc <uart2_write>
 	return ch;
 8000afa:	687b      	ldr	r3, [r7, #4]
 	}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	; (8000b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b2e:	f7ff ff89 	bl	8000a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f004 fb01 	bl	8005138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fcd5 	bl	80004e4 <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000b48:	08005ca4 	.word	0x08005ca4
  ldr r2, =_sbss
 8000b4c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000b50:	20004a88 	.word	0x20004a88

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <HAL_Init+0x40>)
 8000b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_Init+0x40>)
 8000b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_Init+0x40>)
 8000b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f8d8 	bl	8000d36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	200f      	movs	r0, #15
 8000b88:	f7ff fe40 	bl	800080c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff fdca 	bl	8000724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	2000000c 	.word	0x2000000c
 8000bc0:	20000128 	.word	0x20000128

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000128 	.word	0x20000128

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	; (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ff4c 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5e:	f7ff ff61 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000d62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	6978      	ldr	r0, [r7, #20]
 8000d6a:	f7ff ffb1 	bl	8000cd0 <NVIC_EncodePriority>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff80 	bl	8000c7c <__NVIC_SetPriority>
}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff54 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
 8000dba:	e159      	b.n	8001070 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	f040 8148 	bne.w	800106a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d005      	beq.n	8000df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d130      	bne.n	8000e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	091b      	lsrs	r3, r3, #4
 8000e3e:	f003 0201 	and.w	r2, r3, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d017      	beq.n	8000e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d123      	bne.n	8000ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	69b9      	ldr	r1, [r7, #24]
 8000ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0203 	and.w	r2, r3, #3
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80a2 	beq.w	800106a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b57      	ldr	r3, [pc, #348]	; (8001088 <HAL_GPIO_Init+0x2e8>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a56      	ldr	r2, [pc, #344]	; (8001088 <HAL_GPIO_Init+0x2e8>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b54      	ldr	r3, [pc, #336]	; (8001088 <HAL_GPIO_Init+0x2e8>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f42:	4a52      	ldr	r2, [pc, #328]	; (800108c <HAL_GPIO_Init+0x2ec>)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a49      	ldr	r2, [pc, #292]	; (8001090 <HAL_GPIO_Init+0x2f0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d019      	beq.n	8000fa2 <HAL_GPIO_Init+0x202>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a48      	ldr	r2, [pc, #288]	; (8001094 <HAL_GPIO_Init+0x2f4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_GPIO_Init+0x1fe>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a47      	ldr	r2, [pc, #284]	; (8001098 <HAL_GPIO_Init+0x2f8>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d00d      	beq.n	8000f9a <HAL_GPIO_Init+0x1fa>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a46      	ldr	r2, [pc, #280]	; (800109c <HAL_GPIO_Init+0x2fc>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d007      	beq.n	8000f96 <HAL_GPIO_Init+0x1f6>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a45      	ldr	r2, [pc, #276]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d101      	bne.n	8000f92 <HAL_GPIO_Init+0x1f2>
 8000f8e:	2304      	movs	r3, #4
 8000f90:	e008      	b.n	8000fa4 <HAL_GPIO_Init+0x204>
 8000f92:	2307      	movs	r3, #7
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x204>
 8000f96:	2303      	movs	r3, #3
 8000f98:	e004      	b.n	8000fa4 <HAL_GPIO_Init+0x204>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_Init+0x204>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_Init+0x204>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	69fa      	ldr	r2, [r7, #28]
 8000fa6:	f002 0203 	and.w	r2, r2, #3
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	4093      	lsls	r3, r2
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb4:	4935      	ldr	r1, [pc, #212]	; (800108c <HAL_GPIO_Init+0x2ec>)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc2:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <HAL_GPIO_Init+0x304>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe6:	4a2f      	ldr	r2, [pc, #188]	; (80010a4 <HAL_GPIO_Init+0x304>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fec:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <HAL_GPIO_Init+0x304>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001010:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <HAL_GPIO_Init+0x304>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <HAL_GPIO_Init+0x304>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800103a:	4a1a      	ldr	r2, [pc, #104]	; (80010a4 <HAL_GPIO_Init+0x304>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_GPIO_Init+0x304>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001064:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <HAL_GPIO_Init+0x304>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3301      	adds	r3, #1
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	2b0f      	cmp	r3, #15
 8001074:	f67f aea2 	bls.w	8000dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40013800 	.word	0x40013800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020400 	.word	0x40020400
 8001098:	40020800 	.word	0x40020800
 800109c:	40020c00 	.word	0x40020c00
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40013c00 	.word	0x40013c00

080010a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e267      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d075      	beq.n	80011b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010c6:	4b88      	ldr	r3, [pc, #544]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 030c 	and.w	r3, r3, #12
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	d00c      	beq.n	80010ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d2:	4b85      	ldr	r3, [pc, #532]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010da:	2b08      	cmp	r3, #8
 80010dc:	d112      	bne.n	8001104 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010de:	4b82      	ldr	r3, [pc, #520]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010ea:	d10b      	bne.n	8001104 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ec:	4b7e      	ldr	r3, [pc, #504]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d05b      	beq.n	80011b0 <HAL_RCC_OscConfig+0x108>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d157      	bne.n	80011b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e242      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800110c:	d106      	bne.n	800111c <HAL_RCC_OscConfig+0x74>
 800110e:	4b76      	ldr	r3, [pc, #472]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a75      	ldr	r2, [pc, #468]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e01d      	b.n	8001158 <HAL_RCC_OscConfig+0xb0>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0x98>
 8001126:	4b70      	ldr	r3, [pc, #448]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a6f      	ldr	r2, [pc, #444]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 800112c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b6d      	ldr	r3, [pc, #436]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a6c      	ldr	r2, [pc, #432]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e00b      	b.n	8001158 <HAL_RCC_OscConfig+0xb0>
 8001140:	4b69      	ldr	r3, [pc, #420]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a68      	ldr	r2, [pc, #416]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b66      	ldr	r3, [pc, #408]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a65      	ldr	r2, [pc, #404]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d013      	beq.n	8001188 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fd30 	bl	8000bc4 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001168:	f7ff fd2c 	bl	8000bc4 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b64      	cmp	r3, #100	; 0x64
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e207      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	4b5b      	ldr	r3, [pc, #364]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0xc0>
 8001186:	e014      	b.n	80011b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fd1c 	bl	8000bc4 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fd18 	bl	8000bc4 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	; 0x64
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e1f3      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a2:	4b51      	ldr	r3, [pc, #324]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0xe8>
 80011ae:	e000      	b.n	80011b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d063      	beq.n	8001286 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011be:	4b4a      	ldr	r3, [pc, #296]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d11c      	bne.n	8001210 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d6:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d116      	bne.n	8001210 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	4b41      	ldr	r3, [pc, #260]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d005      	beq.n	80011fa <HAL_RCC_OscConfig+0x152>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d001      	beq.n	80011fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e1c7      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fa:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4937      	ldr	r1, [pc, #220]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	e03a      	b.n	8001286 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d020      	beq.n	800125a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001218:	4b34      	ldr	r3, [pc, #208]	; (80012ec <HAL_RCC_OscConfig+0x244>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121e:	f7ff fcd1 	bl	8000bc4 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001226:	f7ff fccd 	bl	8000bc4 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e1a8      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001244:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4925      	ldr	r1, [pc, #148]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
 8001258:	e015      	b.n	8001286 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125a:	4b24      	ldr	r3, [pc, #144]	; (80012ec <HAL_RCC_OscConfig+0x244>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001260:	f7ff fcb0 	bl	8000bc4 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001268:	f7ff fcac 	bl	8000bc4 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e187      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d036      	beq.n	8001300 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d016      	beq.n	80012c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_RCC_OscConfig+0x248>)
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a0:	f7ff fc90 	bl	8000bc4 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a8:	f7ff fc8c 	bl	8000bc4 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e167      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_RCC_OscConfig+0x240>)
 80012bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0x200>
 80012c6:	e01b      	b.n	8001300 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_RCC_OscConfig+0x248>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fc79 	bl	8000bc4 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d4:	e00e      	b.n	80012f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d6:	f7ff fc75 	bl	8000bc4 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d907      	bls.n	80012f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e150      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
 80012e8:	40023800 	.word	0x40023800
 80012ec:	42470000 	.word	0x42470000
 80012f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f4:	4b88      	ldr	r3, [pc, #544]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80012f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1ea      	bne.n	80012d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 8097 	beq.w	800143c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001312:	4b81      	ldr	r3, [pc, #516]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10f      	bne.n	800133e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b7d      	ldr	r3, [pc, #500]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a7c      	ldr	r2, [pc, #496]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b7a      	ldr	r3, [pc, #488]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800133a:	2301      	movs	r3, #1
 800133c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133e:	4b77      	ldr	r3, [pc, #476]	; (800151c <HAL_RCC_OscConfig+0x474>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001346:	2b00      	cmp	r3, #0
 8001348:	d118      	bne.n	800137c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134a:	4b74      	ldr	r3, [pc, #464]	; (800151c <HAL_RCC_OscConfig+0x474>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a73      	ldr	r2, [pc, #460]	; (800151c <HAL_RCC_OscConfig+0x474>)
 8001350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001356:	f7ff fc35 	bl	8000bc4 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135e:	f7ff fc31 	bl	8000bc4 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e10c      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001370:	4b6a      	ldr	r3, [pc, #424]	; (800151c <HAL_RCC_OscConfig+0x474>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d106      	bne.n	8001392 <HAL_RCC_OscConfig+0x2ea>
 8001384:	4b64      	ldr	r3, [pc, #400]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001388:	4a63      	ldr	r2, [pc, #396]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6713      	str	r3, [r2, #112]	; 0x70
 8001390:	e01c      	b.n	80013cc <HAL_RCC_OscConfig+0x324>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b05      	cmp	r3, #5
 8001398:	d10c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x30c>
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 800139c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139e:	4a5e      	ldr	r2, [pc, #376]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6713      	str	r3, [r2, #112]	; 0x70
 80013a6:	4b5c      	ldr	r3, [pc, #368]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80013a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013aa:	4a5b      	ldr	r2, [pc, #364]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6713      	str	r3, [r2, #112]	; 0x70
 80013b2:	e00b      	b.n	80013cc <HAL_RCC_OscConfig+0x324>
 80013b4:	4b58      	ldr	r3, [pc, #352]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b8:	4a57      	ldr	r2, [pc, #348]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80013ba:	f023 0301 	bic.w	r3, r3, #1
 80013be:	6713      	str	r3, [r2, #112]	; 0x70
 80013c0:	4b55      	ldr	r3, [pc, #340]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80013c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c4:	4a54      	ldr	r2, [pc, #336]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80013c6:	f023 0304 	bic.w	r3, r3, #4
 80013ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d015      	beq.n	8001400 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff fbf6 	bl	8000bc4 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013da:	e00a      	b.n	80013f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013dc:	f7ff fbf2 	bl	8000bc4 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e0cb      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f2:	4b49      	ldr	r3, [pc, #292]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0ee      	beq.n	80013dc <HAL_RCC_OscConfig+0x334>
 80013fe:	e014      	b.n	800142a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001400:	f7ff fbe0 	bl	8000bc4 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001406:	e00a      	b.n	800141e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001408:	f7ff fbdc 	bl	8000bc4 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	f241 3288 	movw	r2, #5000	; 0x1388
 8001416:	4293      	cmp	r3, r2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e0b5      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141e:	4b3e      	ldr	r3, [pc, #248]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1ee      	bne.n	8001408 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d105      	bne.n	800143c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001430:	4b39      	ldr	r3, [pc, #228]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	4a38      	ldr	r2, [pc, #224]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800143a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80a1 	beq.w	8001588 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001446:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b08      	cmp	r3, #8
 8001450:	d05c      	beq.n	800150c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d141      	bne.n	80014de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145a:	4b31      	ldr	r3, [pc, #196]	; (8001520 <HAL_RCC_OscConfig+0x478>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fbb0 	bl	8000bc4 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001468:	f7ff fbac 	bl	8000bc4 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e087      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147a:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69da      	ldr	r2, [r3, #28]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	019b      	lsls	r3, r3, #6
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	085b      	lsrs	r3, r3, #1
 800149e:	3b01      	subs	r3, #1
 80014a0:	041b      	lsls	r3, r3, #16
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	061b      	lsls	r3, r3, #24
 80014aa:	491b      	ldr	r1, [pc, #108]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_RCC_OscConfig+0x478>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b6:	f7ff fb85 	bl	8000bc4 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014be:	f7ff fb81 	bl	8000bc4 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e05c      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x416>
 80014dc:	e054      	b.n	8001588 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_RCC_OscConfig+0x478>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fb6e 	bl	8000bc4 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ec:	f7ff fb6a 	bl	8000bc4 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e045      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_RCC_OscConfig+0x470>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x444>
 800150a:	e03d      	b.n	8001588 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d107      	bne.n	8001524 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e038      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000
 8001520:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <HAL_RCC_OscConfig+0x4ec>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d028      	beq.n	8001584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800153c:	429a      	cmp	r2, r3
 800153e:	d121      	bne.n	8001584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154a:	429a      	cmp	r2, r3
 800154c:	d11a      	bne.n	8001584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001554:	4013      	ands	r3, r2
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800155a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800155c:	4293      	cmp	r3, r2
 800155e:	d111      	bne.n	8001584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	085b      	lsrs	r3, r3, #1
 800156c:	3b01      	subs	r3, #1
 800156e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001570:	429a      	cmp	r2, r3
 8001572:	d107      	bne.n	8001584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0cc      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ac:	4b68      	ldr	r3, [pc, #416]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d90c      	bls.n	80015d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b65      	ldr	r3, [pc, #404]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c2:	4b63      	ldr	r3, [pc, #396]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0b8      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ec:	4b59      	ldr	r3, [pc, #356]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4a58      	ldr	r2, [pc, #352]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001604:	4b53      	ldr	r3, [pc, #332]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a52      	ldr	r2, [pc, #328]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800160e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001610:	4b50      	ldr	r3, [pc, #320]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	494d      	ldr	r1, [pc, #308]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	4313      	orrs	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d044      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b47      	ldr	r3, [pc, #284]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d119      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e07f      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d003      	beq.n	8001656 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001652:	2b03      	cmp	r3, #3
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001656:	4b3f      	ldr	r3, [pc, #252]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e06f      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e067      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001676:	4b37      	ldr	r3, [pc, #220]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f023 0203 	bic.w	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4934      	ldr	r1, [pc, #208]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	4313      	orrs	r3, r2
 8001686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001688:	f7ff fa9c 	bl	8000bc4 <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001690:	f7ff fa98 	bl	8000bc4 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e04f      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 020c 	and.w	r2, r3, #12
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1eb      	bne.n	8001690 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d20c      	bcs.n	80016e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e032      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4916      	ldr	r1, [pc, #88]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d009      	beq.n	800171e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	490e      	ldr	r1, [pc, #56]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800171e:	f000 f821 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 8001722:	4602      	mov	r2, r0
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	490a      	ldr	r1, [pc, #40]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 8001730:	5ccb      	ldrb	r3, [r1, r3]
 8001732:	fa22 f303 	lsr.w	r3, r2, r3
 8001736:	4a09      	ldr	r2, [pc, #36]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_RCC_ClockConfig+0x1c8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff f864 	bl	800080c <HAL_InitTick>

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023c00 	.word	0x40023c00
 8001754:	40023800 	.word	0x40023800
 8001758:	08005c18 	.word	0x08005c18
 800175c:	20000004 	.word	0x20000004
 8001760:	20000008 	.word	0x20000008

08001764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001768:	b090      	sub	sp, #64	; 0x40
 800176a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	637b      	str	r3, [r7, #52]	; 0x34
 8001770:	2300      	movs	r3, #0
 8001772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001774:	2300      	movs	r3, #0
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800177c:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b08      	cmp	r3, #8
 8001786:	d00d      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001788:	2b08      	cmp	r3, #8
 800178a:	f200 80a1 	bhi.w	80018d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x34>
 8001792:	2b04      	cmp	r3, #4
 8001794:	d003      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x3a>
 8001796:	e09b      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001798:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800179a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800179c:	e09b      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800179e:	4b53      	ldr	r3, [pc, #332]	; (80018ec <HAL_RCC_GetSysClockFreq+0x188>)
 80017a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017a2:	e098      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a4:	4b4f      	ldr	r3, [pc, #316]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ae:	4b4d      	ldr	r3, [pc, #308]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d028      	beq.n	800180c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ba:	4b4a      	ldr	r3, [pc, #296]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	099b      	lsrs	r3, r3, #6
 80017c0:	2200      	movs	r2, #0
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	627a      	str	r2, [r7, #36]	; 0x24
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017cc:	2100      	movs	r1, #0
 80017ce:	4b47      	ldr	r3, [pc, #284]	; (80018ec <HAL_RCC_GetSysClockFreq+0x188>)
 80017d0:	fb03 f201 	mul.w	r2, r3, r1
 80017d4:	2300      	movs	r3, #0
 80017d6:	fb00 f303 	mul.w	r3, r0, r3
 80017da:	4413      	add	r3, r2
 80017dc:	4a43      	ldr	r2, [pc, #268]	; (80018ec <HAL_RCC_GetSysClockFreq+0x188>)
 80017de:	fba0 1202 	umull	r1, r2, r0, r2
 80017e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017e4:	460a      	mov	r2, r1
 80017e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80017e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ea:	4413      	add	r3, r2
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f0:	2200      	movs	r2, #0
 80017f2:	61bb      	str	r3, [r7, #24]
 80017f4:	61fa      	str	r2, [r7, #28]
 80017f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017fe:	f7fe fcef 	bl	80001e0 <__aeabi_uldivmod>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4613      	mov	r3, r2
 8001808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800180a:	e053      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180c:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	099b      	lsrs	r3, r3, #6
 8001812:	2200      	movs	r2, #0
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	617a      	str	r2, [r7, #20]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800181e:	f04f 0b00 	mov.w	fp, #0
 8001822:	4652      	mov	r2, sl
 8001824:	465b      	mov	r3, fp
 8001826:	f04f 0000 	mov.w	r0, #0
 800182a:	f04f 0100 	mov.w	r1, #0
 800182e:	0159      	lsls	r1, r3, #5
 8001830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001834:	0150      	lsls	r0, r2, #5
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	ebb2 080a 	subs.w	r8, r2, sl
 800183e:	eb63 090b 	sbc.w	r9, r3, fp
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800184e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001852:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001856:	ebb2 0408 	subs.w	r4, r2, r8
 800185a:	eb63 0509 	sbc.w	r5, r3, r9
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	00eb      	lsls	r3, r5, #3
 8001868:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800186c:	00e2      	lsls	r2, r4, #3
 800186e:	4614      	mov	r4, r2
 8001870:	461d      	mov	r5, r3
 8001872:	eb14 030a 	adds.w	r3, r4, sl
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	eb45 030b 	adc.w	r3, r5, fp
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	e9d7 4500 	ldrd	r4, r5, [r7]
 800188a:	4629      	mov	r1, r5
 800188c:	028b      	lsls	r3, r1, #10
 800188e:	4621      	mov	r1, r4
 8001890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001894:	4621      	mov	r1, r4
 8001896:	028a      	lsls	r2, r1, #10
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189e:	2200      	movs	r2, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	60fa      	str	r2, [r7, #12]
 80018a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018a8:	f7fe fc9a 	bl	80001e0 <__aeabi_uldivmod>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4613      	mov	r3, r2
 80018b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	0c1b      	lsrs	r3, r3, #16
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	3301      	adds	r3, #1
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80018c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018ce:	e002      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80018d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3740      	adds	r7, #64	; 0x40
 80018dc:	46bd      	mov	sp, r7
 80018de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	00f42400 	.word	0x00f42400
 80018ec:	017d7840 	.word	0x017d7840

080018f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_RCC_GetHCLKFreq+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800190c:	f7ff fff0 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	0a9b      	lsrs	r3, r3, #10
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	4903      	ldr	r1, [pc, #12]	; (800192c <HAL_RCC_GetPCLK1Freq+0x24>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40023800 	.word	0x40023800
 800192c:	08005c28 	.word	0x08005c28

08001930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001934:	f7ff ffdc 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0b5b      	lsrs	r3, r3, #13
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	; (8001954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	08005c28 	.word	0x08005c28

08001958 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	220f      	movs	r2, #15
 8001966:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0203 	and.w	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	08db      	lsrs	r3, r3, #3
 8001992:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <HAL_RCC_GetClockConfig+0x60>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0207 	and.w	r2, r3, #7
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	601a      	str	r2, [r3, #0]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40023c00 	.word	0x40023c00

080019bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e041      	b.n	8001a52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d106      	bne.n	80019e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f839 	bl	8001a5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3304      	adds	r3, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f000 f9ca 	bl	8001d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d001      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e044      	b.n	8001b12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_TIM_Base_Start_IT+0xb0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d018      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0x6c>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab2:	d013      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0x6c>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1a      	ldr	r2, [pc, #104]	; (8001b24 <HAL_TIM_Base_Start_IT+0xb4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00e      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0x6c>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d009      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0x6c>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <HAL_TIM_Base_Start_IT+0xbc>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d004      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0x6c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a16      	ldr	r2, [pc, #88]	; (8001b30 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d111      	bne.n	8001b00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d010      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0201 	orr.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afe:	e007      	b.n	8001b10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40010000 	.word	0x40010000
 8001b24:	40000400 	.word	0x40000400
 8001b28:	40000800 	.word	0x40000800
 8001b2c:	40000c00 	.word	0x40000c00
 8001b30:	40014000 	.word	0x40014000

08001b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d122      	bne.n	8001b90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d11b      	bne.n	8001b90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f06f 0202 	mvn.w	r2, #2
 8001b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f8ee 	bl	8001d58 <HAL_TIM_IC_CaptureCallback>
 8001b7c:	e005      	b.n	8001b8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f8e0 	bl	8001d44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f8f1 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d122      	bne.n	8001be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d11b      	bne.n	8001be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0204 	mvn.w	r2, #4
 8001bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8c4 	bl	8001d58 <HAL_TIM_IC_CaptureCallback>
 8001bd0:	e005      	b.n	8001bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8b6 	bl	8001d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f8c7 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d122      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d11b      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f06f 0208 	mvn.w	r2, #8
 8001c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f89a 	bl	8001d58 <HAL_TIM_IC_CaptureCallback>
 8001c24:	e005      	b.n	8001c32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f88c 	bl	8001d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f89d 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	2b10      	cmp	r3, #16
 8001c44:	d122      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b10      	cmp	r3, #16
 8001c52:	d11b      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0210 	mvn.w	r2, #16
 8001c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2208      	movs	r2, #8
 8001c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f870 	bl	8001d58 <HAL_TIM_IC_CaptureCallback>
 8001c78:	e005      	b.n	8001c86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f862 	bl	8001d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f873 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d10e      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d107      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0201 	mvn.w	r2, #1
 8001cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7fe fd1e 	bl	80006f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc2:	2b80      	cmp	r3, #128	; 0x80
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd0:	2b80      	cmp	r3, #128	; 0x80
 8001cd2:	d107      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8e2 	bl	8001ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cee:	2b40      	cmp	r3, #64	; 0x40
 8001cf0:	d10e      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfc:	2b40      	cmp	r3, #64	; 0x40
 8001cfe:	d107      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f838 	bl	8001d80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	2b20      	cmp	r3, #32
 8001d1c:	d10e      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0320 	and.w	r3, r3, #32
 8001d28:	2b20      	cmp	r3, #32
 8001d2a:	d107      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0220 	mvn.w	r2, #32
 8001d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8ac 	bl	8001e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a34      	ldr	r2, [pc, #208]	; (8001e78 <TIM_Base_SetConfig+0xe4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00f      	beq.n	8001dcc <TIM_Base_SetConfig+0x38>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db2:	d00b      	beq.n	8001dcc <TIM_Base_SetConfig+0x38>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a31      	ldr	r2, [pc, #196]	; (8001e7c <TIM_Base_SetConfig+0xe8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d007      	beq.n	8001dcc <TIM_Base_SetConfig+0x38>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a30      	ldr	r2, [pc, #192]	; (8001e80 <TIM_Base_SetConfig+0xec>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d003      	beq.n	8001dcc <TIM_Base_SetConfig+0x38>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a2f      	ldr	r2, [pc, #188]	; (8001e84 <TIM_Base_SetConfig+0xf0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d108      	bne.n	8001dde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a25      	ldr	r2, [pc, #148]	; (8001e78 <TIM_Base_SetConfig+0xe4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01b      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dec:	d017      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a22      	ldr	r2, [pc, #136]	; (8001e7c <TIM_Base_SetConfig+0xe8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a21      	ldr	r2, [pc, #132]	; (8001e80 <TIM_Base_SetConfig+0xec>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00f      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a20      	ldr	r2, [pc, #128]	; (8001e84 <TIM_Base_SetConfig+0xf0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00b      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <TIM_Base_SetConfig+0xf4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <TIM_Base_SetConfig+0xf8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d003      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a1d      	ldr	r2, [pc, #116]	; (8001e90 <TIM_Base_SetConfig+0xfc>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d108      	bne.n	8001e30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <TIM_Base_SetConfig+0xe4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d103      	bne.n	8001e64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	615a      	str	r2, [r3, #20]
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40000800 	.word	0x40000800
 8001e84:	40000c00 	.word	0x40000c00
 8001e88:	40014000 	.word	0x40014000
 8001e8c:	40014400 	.word	0x40014400
 8001e90:	40014800 	.word	0x40014800

08001e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e03f      	b.n	8001f4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe fc4a 	bl	800077c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2224      	movs	r2, #36	; 0x24
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f829 	bl	8001f58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2220      	movs	r2, #32
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f5c:	b0c0      	sub	sp, #256	; 0x100
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f74:	68d9      	ldr	r1, [r3, #12]
 8001f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	ea40 0301 	orr.w	r3, r0, r1
 8001f80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001fb0:	f021 010c 	bic.w	r1, r1, #12
 8001fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001fbe:	430b      	orrs	r3, r1
 8001fc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd2:	6999      	ldr	r1, [r3, #24]
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	ea40 0301 	orr.w	r3, r0, r1
 8001fde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4b8f      	ldr	r3, [pc, #572]	; (8002224 <UART_SetConfig+0x2cc>)
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d005      	beq.n	8001ff8 <UART_SetConfig+0xa0>
 8001fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4b8d      	ldr	r3, [pc, #564]	; (8002228 <UART_SetConfig+0x2d0>)
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d104      	bne.n	8002002 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ff8:	f7ff fc9a 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 8001ffc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002000:	e003      	b.n	800200a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002002:	f7ff fc81 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8002006:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800200a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002014:	f040 810c 	bne.w	8002230 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800201c:	2200      	movs	r2, #0
 800201e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002022:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002026:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800202a:	4622      	mov	r2, r4
 800202c:	462b      	mov	r3, r5
 800202e:	1891      	adds	r1, r2, r2
 8002030:	65b9      	str	r1, [r7, #88]	; 0x58
 8002032:	415b      	adcs	r3, r3
 8002034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002036:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800203a:	4621      	mov	r1, r4
 800203c:	eb12 0801 	adds.w	r8, r2, r1
 8002040:	4629      	mov	r1, r5
 8002042:	eb43 0901 	adc.w	r9, r3, r1
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800205a:	4690      	mov	r8, r2
 800205c:	4699      	mov	r9, r3
 800205e:	4623      	mov	r3, r4
 8002060:	eb18 0303 	adds.w	r3, r8, r3
 8002064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002068:	462b      	mov	r3, r5
 800206a:	eb49 0303 	adc.w	r3, r9, r3
 800206e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800207e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002082:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002086:	460b      	mov	r3, r1
 8002088:	18db      	adds	r3, r3, r3
 800208a:	653b      	str	r3, [r7, #80]	; 0x50
 800208c:	4613      	mov	r3, r2
 800208e:	eb42 0303 	adc.w	r3, r2, r3
 8002092:	657b      	str	r3, [r7, #84]	; 0x54
 8002094:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002098:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800209c:	f7fe f8a0 	bl	80001e0 <__aeabi_uldivmod>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4b61      	ldr	r3, [pc, #388]	; (800222c <UART_SetConfig+0x2d4>)
 80020a6:	fba3 2302 	umull	r2, r3, r3, r2
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	011c      	lsls	r4, r3, #4
 80020ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020b2:	2200      	movs	r2, #0
 80020b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80020bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80020c0:	4642      	mov	r2, r8
 80020c2:	464b      	mov	r3, r9
 80020c4:	1891      	adds	r1, r2, r2
 80020c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80020c8:	415b      	adcs	r3, r3
 80020ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020d0:	4641      	mov	r1, r8
 80020d2:	eb12 0a01 	adds.w	sl, r2, r1
 80020d6:	4649      	mov	r1, r9
 80020d8:	eb43 0b01 	adc.w	fp, r3, r1
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020f0:	4692      	mov	sl, r2
 80020f2:	469b      	mov	fp, r3
 80020f4:	4643      	mov	r3, r8
 80020f6:	eb1a 0303 	adds.w	r3, sl, r3
 80020fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020fe:	464b      	mov	r3, r9
 8002100:	eb4b 0303 	adc.w	r3, fp, r3
 8002104:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002114:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002118:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800211c:	460b      	mov	r3, r1
 800211e:	18db      	adds	r3, r3, r3
 8002120:	643b      	str	r3, [r7, #64]	; 0x40
 8002122:	4613      	mov	r3, r2
 8002124:	eb42 0303 	adc.w	r3, r2, r3
 8002128:	647b      	str	r3, [r7, #68]	; 0x44
 800212a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800212e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002132:	f7fe f855 	bl	80001e0 <__aeabi_uldivmod>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4611      	mov	r1, r2
 800213c:	4b3b      	ldr	r3, [pc, #236]	; (800222c <UART_SetConfig+0x2d4>)
 800213e:	fba3 2301 	umull	r2, r3, r3, r1
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2264      	movs	r2, #100	; 0x64
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	1acb      	subs	r3, r1, r3
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002152:	4b36      	ldr	r3, [pc, #216]	; (800222c <UART_SetConfig+0x2d4>)
 8002154:	fba3 2302 	umull	r2, r3, r3, r2
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002160:	441c      	add	r4, r3
 8002162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002166:	2200      	movs	r2, #0
 8002168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800216c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002170:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002174:	4642      	mov	r2, r8
 8002176:	464b      	mov	r3, r9
 8002178:	1891      	adds	r1, r2, r2
 800217a:	63b9      	str	r1, [r7, #56]	; 0x38
 800217c:	415b      	adcs	r3, r3
 800217e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002184:	4641      	mov	r1, r8
 8002186:	1851      	adds	r1, r2, r1
 8002188:	6339      	str	r1, [r7, #48]	; 0x30
 800218a:	4649      	mov	r1, r9
 800218c:	414b      	adcs	r3, r1
 800218e:	637b      	str	r3, [r7, #52]	; 0x34
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800219c:	4659      	mov	r1, fp
 800219e:	00cb      	lsls	r3, r1, #3
 80021a0:	4651      	mov	r1, sl
 80021a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021a6:	4651      	mov	r1, sl
 80021a8:	00ca      	lsls	r2, r1, #3
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	4603      	mov	r3, r0
 80021b0:	4642      	mov	r2, r8
 80021b2:	189b      	adds	r3, r3, r2
 80021b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021b8:	464b      	mov	r3, r9
 80021ba:	460a      	mov	r2, r1
 80021bc:	eb42 0303 	adc.w	r3, r2, r3
 80021c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80021d8:	460b      	mov	r3, r1
 80021da:	18db      	adds	r3, r3, r3
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80021de:	4613      	mov	r3, r2
 80021e0:	eb42 0303 	adc.w	r3, r2, r3
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80021ee:	f7fd fff7 	bl	80001e0 <__aeabi_uldivmod>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4b0d      	ldr	r3, [pc, #52]	; (800222c <UART_SetConfig+0x2d4>)
 80021f8:	fba3 1302 	umull	r1, r3, r3, r2
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	2164      	movs	r1, #100	; 0x64
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	3332      	adds	r3, #50	; 0x32
 800220a:	4a08      	ldr	r2, [pc, #32]	; (800222c <UART_SetConfig+0x2d4>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	f003 0207 	and.w	r2, r3, #7
 8002216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4422      	add	r2, r4
 800221e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002220:	e105      	b.n	800242e <UART_SetConfig+0x4d6>
 8002222:	bf00      	nop
 8002224:	40011000 	.word	0x40011000
 8002228:	40011400 	.word	0x40011400
 800222c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002234:	2200      	movs	r2, #0
 8002236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800223a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800223e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002242:	4642      	mov	r2, r8
 8002244:	464b      	mov	r3, r9
 8002246:	1891      	adds	r1, r2, r2
 8002248:	6239      	str	r1, [r7, #32]
 800224a:	415b      	adcs	r3, r3
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002252:	4641      	mov	r1, r8
 8002254:	1854      	adds	r4, r2, r1
 8002256:	4649      	mov	r1, r9
 8002258:	eb43 0501 	adc.w	r5, r3, r1
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	00eb      	lsls	r3, r5, #3
 8002266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800226a:	00e2      	lsls	r2, r4, #3
 800226c:	4614      	mov	r4, r2
 800226e:	461d      	mov	r5, r3
 8002270:	4643      	mov	r3, r8
 8002272:	18e3      	adds	r3, r4, r3
 8002274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002278:	464b      	mov	r3, r9
 800227a:	eb45 0303 	adc.w	r3, r5, r3
 800227e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800228e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800229e:	4629      	mov	r1, r5
 80022a0:	008b      	lsls	r3, r1, #2
 80022a2:	4621      	mov	r1, r4
 80022a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022a8:	4621      	mov	r1, r4
 80022aa:	008a      	lsls	r2, r1, #2
 80022ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80022b0:	f7fd ff96 	bl	80001e0 <__aeabi_uldivmod>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4b60      	ldr	r3, [pc, #384]	; (800243c <UART_SetConfig+0x4e4>)
 80022ba:	fba3 2302 	umull	r2, r3, r3, r2
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	011c      	lsls	r4, r3, #4
 80022c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022c6:	2200      	movs	r2, #0
 80022c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80022d4:	4642      	mov	r2, r8
 80022d6:	464b      	mov	r3, r9
 80022d8:	1891      	adds	r1, r2, r2
 80022da:	61b9      	str	r1, [r7, #24]
 80022dc:	415b      	adcs	r3, r3
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022e4:	4641      	mov	r1, r8
 80022e6:	1851      	adds	r1, r2, r1
 80022e8:	6139      	str	r1, [r7, #16]
 80022ea:	4649      	mov	r1, r9
 80022ec:	414b      	adcs	r3, r1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022fc:	4659      	mov	r1, fp
 80022fe:	00cb      	lsls	r3, r1, #3
 8002300:	4651      	mov	r1, sl
 8002302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002306:	4651      	mov	r1, sl
 8002308:	00ca      	lsls	r2, r1, #3
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	4603      	mov	r3, r0
 8002310:	4642      	mov	r2, r8
 8002312:	189b      	adds	r3, r3, r2
 8002314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002318:	464b      	mov	r3, r9
 800231a:	460a      	mov	r2, r1
 800231c:	eb42 0303 	adc.w	r3, r2, r3
 8002320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	67bb      	str	r3, [r7, #120]	; 0x78
 800232e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800233c:	4649      	mov	r1, r9
 800233e:	008b      	lsls	r3, r1, #2
 8002340:	4641      	mov	r1, r8
 8002342:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002346:	4641      	mov	r1, r8
 8002348:	008a      	lsls	r2, r1, #2
 800234a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800234e:	f7fd ff47 	bl	80001e0 <__aeabi_uldivmod>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4b39      	ldr	r3, [pc, #228]	; (800243c <UART_SetConfig+0x4e4>)
 8002358:	fba3 1302 	umull	r1, r3, r3, r2
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	2164      	movs	r1, #100	; 0x64
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	3332      	adds	r3, #50	; 0x32
 800236a:	4a34      	ldr	r2, [pc, #208]	; (800243c <UART_SetConfig+0x4e4>)
 800236c:	fba2 2303 	umull	r2, r3, r2, r3
 8002370:	095b      	lsrs	r3, r3, #5
 8002372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002376:	441c      	add	r4, r3
 8002378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800237c:	2200      	movs	r2, #0
 800237e:	673b      	str	r3, [r7, #112]	; 0x70
 8002380:	677a      	str	r2, [r7, #116]	; 0x74
 8002382:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002386:	4642      	mov	r2, r8
 8002388:	464b      	mov	r3, r9
 800238a:	1891      	adds	r1, r2, r2
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	415b      	adcs	r3, r3
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002396:	4641      	mov	r1, r8
 8002398:	1851      	adds	r1, r2, r1
 800239a:	6039      	str	r1, [r7, #0]
 800239c:	4649      	mov	r1, r9
 800239e:	414b      	adcs	r3, r1
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023ae:	4659      	mov	r1, fp
 80023b0:	00cb      	lsls	r3, r1, #3
 80023b2:	4651      	mov	r1, sl
 80023b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023b8:	4651      	mov	r1, sl
 80023ba:	00ca      	lsls	r2, r1, #3
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	4603      	mov	r3, r0
 80023c2:	4642      	mov	r2, r8
 80023c4:	189b      	adds	r3, r3, r2
 80023c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80023c8:	464b      	mov	r3, r9
 80023ca:	460a      	mov	r2, r1
 80023cc:	eb42 0303 	adc.w	r3, r2, r3
 80023d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	663b      	str	r3, [r7, #96]	; 0x60
 80023dc:	667a      	str	r2, [r7, #100]	; 0x64
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80023ea:	4649      	mov	r1, r9
 80023ec:	008b      	lsls	r3, r1, #2
 80023ee:	4641      	mov	r1, r8
 80023f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023f4:	4641      	mov	r1, r8
 80023f6:	008a      	lsls	r2, r1, #2
 80023f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023fc:	f7fd fef0 	bl	80001e0 <__aeabi_uldivmod>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4b0d      	ldr	r3, [pc, #52]	; (800243c <UART_SetConfig+0x4e4>)
 8002406:	fba3 1302 	umull	r1, r3, r3, r2
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	2164      	movs	r1, #100	; 0x64
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	3332      	adds	r3, #50	; 0x32
 8002418:	4a08      	ldr	r2, [pc, #32]	; (800243c <UART_SetConfig+0x4e4>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	f003 020f 	and.w	r2, r3, #15
 8002424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4422      	add	r2, r4
 800242c:	609a      	str	r2, [r3, #8]
}
 800242e:	bf00      	nop
 8002430:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002434:	46bd      	mov	sp, r7
 8002436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800243a:	bf00      	nop
 800243c:	51eb851f 	.word	0x51eb851f

08002440 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <SysTick_Handler+0x1c>)
 8002446:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002448:	f001 fdee 	bl	8004028 <xTaskGetSchedulerState>
 800244c:	4603      	mov	r3, r0
 800244e:	2b01      	cmp	r3, #1
 8002450:	d001      	beq.n	8002456 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002452:	f002 fbf1 	bl	8004c38 <xPortSysTickHandler>
  }
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	e000e010 	.word	0xe000e010

08002460 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4a07      	ldr	r2, [pc, #28]	; (800248c <vApplicationGetIdleTaskMemory+0x2c>)
 8002470:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	4a06      	ldr	r2, [pc, #24]	; (8002490 <vApplicationGetIdleTaskMemory+0x30>)
 8002476:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2280      	movs	r2, #128	; 0x80
 800247c:	601a      	str	r2, [r3, #0]
}
 800247e:	bf00      	nop
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	2000012c 	.word	0x2000012c
 8002490:	20000188 	.word	0x20000188

08002494 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80024a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4a06      	ldr	r2, [pc, #24]	; (80024c4 <vApplicationGetTimerTaskMemory+0x30>)
 80024aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024b2:	601a      	str	r2, [r3, #0]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	20000388 	.word	0x20000388
 80024c4:	200003e4 	.word	0x200003e4

080024c8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80024ce:	2020      	movs	r0, #32
 80024d0:	f002 fc42 	bl	8004d58 <pvPortMalloc>
 80024d4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3304      	adds	r3, #4
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f941 	bl	800276e <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80024f2:	687b      	ldr	r3, [r7, #4]
	}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	; 0x30
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = xEventGroup;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00a      	beq.n	8002532 <xEventGroupSync+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800251c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002520:	f383 8811 	msr	BASEPRI, r3
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	61bb      	str	r3, [r7, #24]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800252e:	bf00      	nop
 8002530:	e7fe      	b.n	8002530 <xEventGroupSync+0x34>
	configASSERT( uxBitsToWaitFor != 0 );
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <xEventGroupSync+0x52>
	__asm volatile
 8002538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	617b      	str	r3, [r7, #20]
}
 800254a:	bf00      	nop
 800254c:	e7fe      	b.n	800254c <xEventGroupSync+0x50>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800254e:	f001 fd6b 	bl	8004028 <xTaskGetSchedulerState>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <xEventGroupSync+0x62>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <xEventGroupSync+0x66>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <xEventGroupSync+0x68>
 8002562:	2300      	movs	r3, #0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10a      	bne.n	800257e <xEventGroupSync+0x82>
	__asm volatile
 8002568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	613b      	str	r3, [r7, #16]
}
 800257a:	bf00      	nop
 800257c:	e7fe      	b.n	800257c <xEventGroupSync+0x80>
	}
	#endif

	vTaskSuspendAll();
 800257e:	f001 f8d3 	bl	8003728 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	623b      	str	r3, [r7, #32]

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f864 	bl	8002658 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002590:	6a3a      	ldr	r2, [r7, #32]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4013      	ands	r3, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	429a      	cmp	r2, r3
 800259e:	d10d      	bne.n	80025bc <xEventGroupSync+0xc0>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 80025a0:	6a3a      	ldr	r2, [r7, #32]
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80025a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	401a      	ands	r2, r3
 80025b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b4:	601a      	str	r2, [r3, #0]

			xTicksToWait = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	e013      	b.n	80025e4 <xEventGroupSync+0xe8>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <xEventGroupSync+0xde>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 80025c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c4:	1d18      	adds	r0, r3, #4
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	4619      	mov	r1, r3
 80025d0:	f001 faa2 	bl	8003b18 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025d8:	e004      	b.n	80025e4 <xEventGroupSync+0xe8>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80025da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
				xTimeoutOccurred = pdTRUE;
 80025e0:	2301      	movs	r3, #1
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80025e4:	f001 f8ae 	bl	8003744 <xTaskResumeAll>
 80025e8:	61f8      	str	r0, [r7, #28]

	if( xTicksToWait != ( TickType_t ) 0 )
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d02c      	beq.n	800264a <xEventGroupSync+0x14e>
	{
		if( xAlreadyYielded == pdFALSE )
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d107      	bne.n	8002606 <xEventGroupSync+0x10a>
		{
			portYIELD_WITHIN_API();
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <xEventGroupSync+0x158>)
 80025f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8002606:	f001 fd9b 	bl	8004140 <uxTaskResetEventItemValue>
 800260a:	62f8      	str	r0, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d115      	bne.n	8002642 <xEventGroupSync+0x146>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
 8002616:	f002 fa7d 	bl	8004b14 <vPortEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4013      	ands	r3, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	d106      	bne.n	800263a <xEventGroupSync+0x13e>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	43db      	mvns	r3, r3
 8002634:	401a      	ands	r2, r3
 8002636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002638:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800263a:	f002 fa9b 	bl	8004b74 <vPortExitCritical>

			xTimeoutOccurred = pdTRUE;
 800263e:	2301      	movs	r3, #1
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800264c:	4618      	mov	r0, r3
 800264e:	3730      	adds	r7, #48	; 0x30
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	e000ed04 	.word	0xe000ed04

08002658 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08e      	sub	sp, #56	; 0x38
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002662:	2300      	movs	r3, #0
 8002664:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800266a:	2300      	movs	r3, #0
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <xEventGroupSetBits+0x32>
	__asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	613b      	str	r3, [r7, #16]
}
 8002686:	bf00      	nop
 8002688:	e7fe      	b.n	8002688 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <xEventGroupSetBits+0x52>
	__asm volatile
 8002694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	60fb      	str	r3, [r7, #12]
}
 80026a6:	bf00      	nop
 80026a8:	e7fe      	b.n	80026a8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	3304      	adds	r3, #4
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	3308      	adds	r3, #8
 80026b4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80026b6:	f001 f837 	bl	8003728 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80026cc:	e03c      	b.n	8002748 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80026ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80026d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80026da:	2300      	movs	r3, #0
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80026e4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80026ec:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d108      	bne.n	800270a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80026f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00b      	beq.n	800271c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8002704:	2301      	movs	r3, #1
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002708:	e008      	b.n	800271c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	429a      	cmp	r2, r3
 8002716:	d101      	bne.n	800271c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8002718:	2301      	movs	r3, #1
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d010      	beq.n	8002744 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800272c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800273c:	4619      	mov	r1, r3
 800273e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002740:	f001 fab6 	bl	8003cb0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8002748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	429a      	cmp	r2, r3
 800274e:	d1be      	bne.n	80026ce <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002756:	43db      	mvns	r3, r3
 8002758:	401a      	ands	r2, r3
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800275e:	f000 fff1 	bl	8003744 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	681b      	ldr	r3, [r3, #0]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3738      	adds	r7, #56	; 0x38
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f103 0208 	add.w	r2, r3, #8
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002786:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f103 0208 	add.w	r2, r3, #8
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f103 0208 	add.w	r2, r3, #8
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	601a      	str	r2, [r3, #0]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002826:	d103      	bne.n	8002830 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	e00c      	b.n	800284a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3308      	adds	r3, #8
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	e002      	b.n	800283e <vListInsert+0x2e>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	429a      	cmp	r2, r3
 8002848:	d2f6      	bcs.n	8002838 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	601a      	str	r2, [r3, #0]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6892      	ldr	r2, [r2, #8]
 8002898:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6852      	ldr	r2, [r2, #4]
 80028a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d103      	bne.n	80028b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	1e5a      	subs	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10a      	bne.n	8002902 <xQueueGenericReset+0x2a>
	__asm volatile
 80028ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	60bb      	str	r3, [r7, #8]
}
 80028fe:	bf00      	nop
 8002900:	e7fe      	b.n	8002900 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002902:	f002 f907 	bl	8004b14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290e:	68f9      	ldr	r1, [r7, #12]
 8002910:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	441a      	add	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	3b01      	subs	r3, #1
 8002934:	68f9      	ldr	r1, [r7, #12]
 8002936:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	441a      	add	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	22ff      	movs	r2, #255	; 0xff
 8002946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	22ff      	movs	r2, #255	; 0xff
 800294e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d114      	bne.n	8002982 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01a      	beq.n	8002996 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3310      	adds	r3, #16
 8002964:	4618      	mov	r0, r3
 8002966:	f001 f93f 	bl	8003be8 <xTaskRemoveFromEventList>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d012      	beq.n	8002996 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <xQueueGenericReset+0xcc>)
 8002972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	e009      	b.n	8002996 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3310      	adds	r3, #16
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fef1 	bl	800276e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	3324      	adds	r3, #36	; 0x24
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff feec 	bl	800276e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002996:	f002 f8ed 	bl	8004b74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800299a:	2301      	movs	r3, #1
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	e000ed04 	.word	0xe000ed04

080029a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08e      	sub	sp, #56	; 0x38
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10a      	bne.n	80029ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80029d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029ea:	bf00      	nop
 80029ec:	e7fe      	b.n	80029ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <xQueueGenericCreateStatic+0x52>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <xQueueGenericCreateStatic+0x56>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <xQueueGenericCreateStatic+0x58>
 80029fe:	2300      	movs	r3, #0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10a      	bne.n	8002a1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	623b      	str	r3, [r7, #32]
}
 8002a16:	bf00      	nop
 8002a18:	e7fe      	b.n	8002a18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <xQueueGenericCreateStatic+0x7e>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <xQueueGenericCreateStatic+0x82>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <xQueueGenericCreateStatic+0x84>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	61fb      	str	r3, [r7, #28]
}
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a46:	2350      	movs	r3, #80	; 0x50
 8002a48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2b50      	cmp	r3, #80	; 0x50
 8002a4e:	d00a      	beq.n	8002a66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a54:	f383 8811 	msr	BASEPRI, r3
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	61bb      	str	r3, [r7, #24]
}
 8002a62:	bf00      	nop
 8002a64:	e7fe      	b.n	8002a64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00d      	beq.n	8002a8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	4613      	mov	r3, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f805 	bl	8002a98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3730      	adds	r7, #48	; 0x30
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d103      	bne.n	8002ab4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e002      	b.n	8002aba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	69b8      	ldr	r0, [r7, #24]
 8002aca:	f7ff ff05 	bl	80028d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	78fa      	ldrb	r2, [r7, #3]
 8002ad2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08e      	sub	sp, #56	; 0x38
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002aee:	2300      	movs	r3, #0
 8002af0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <xQueueGenericSend+0x32>
	__asm volatile
 8002afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b0e:	bf00      	nop
 8002b10:	e7fe      	b.n	8002b10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d103      	bne.n	8002b20 <xQueueGenericSend+0x40>
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <xQueueGenericSend+0x44>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <xQueueGenericSend+0x46>
 8002b24:	2300      	movs	r3, #0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10a      	bne.n	8002b40 <xQueueGenericSend+0x60>
	__asm volatile
 8002b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2e:	f383 8811 	msr	BASEPRI, r3
 8002b32:	f3bf 8f6f 	isb	sy
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b3c:	bf00      	nop
 8002b3e:	e7fe      	b.n	8002b3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d103      	bne.n	8002b4e <xQueueGenericSend+0x6e>
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <xQueueGenericSend+0x72>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <xQueueGenericSend+0x74>
 8002b52:	2300      	movs	r3, #0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10a      	bne.n	8002b6e <xQueueGenericSend+0x8e>
	__asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	623b      	str	r3, [r7, #32]
}
 8002b6a:	bf00      	nop
 8002b6c:	e7fe      	b.n	8002b6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b6e:	f001 fa5b 	bl	8004028 <xTaskGetSchedulerState>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <xQueueGenericSend+0x9e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <xQueueGenericSend+0xa2>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <xQueueGenericSend+0xa4>
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <xQueueGenericSend+0xbe>
	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	61fb      	str	r3, [r7, #28]
}
 8002b9a:	bf00      	nop
 8002b9c:	e7fe      	b.n	8002b9c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b9e:	f001 ffb9 	bl	8004b14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d302      	bcc.n	8002bb4 <xQueueGenericSend+0xd4>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d129      	bne.n	8002c08 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bba:	f000 fa0b 	bl	8002fd4 <prvCopyDataToQueue>
 8002bbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d010      	beq.n	8002bea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	3324      	adds	r3, #36	; 0x24
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f001 f80b 	bl	8003be8 <xTaskRemoveFromEventList>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d013      	beq.n	8002c00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bd8:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <xQueueGenericSend+0x1f8>)
 8002bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	e00a      	b.n	8002c00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002bf0:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <xQueueGenericSend+0x1f8>)
 8002bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c00:	f001 ffb8 	bl	8004b74 <vPortExitCritical>
				return pdPASS;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e063      	b.n	8002cd0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d103      	bne.n	8002c16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c0e:	f001 ffb1 	bl	8004b74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e05c      	b.n	8002cd0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d106      	bne.n	8002c2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c1c:	f107 0314 	add.w	r3, r7, #20
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 f8a7 	bl	8003d74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c26:	2301      	movs	r3, #1
 8002c28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c2a:	f001 ffa3 	bl	8004b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c2e:	f000 fd7b 	bl	8003728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c32:	f001 ff6f 	bl	8004b14 <vPortEnterCritical>
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c3c:	b25b      	sxtb	r3, r3
 8002c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c42:	d103      	bne.n	8002c4c <xQueueGenericSend+0x16c>
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c52:	b25b      	sxtb	r3, r3
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c58:	d103      	bne.n	8002c62 <xQueueGenericSend+0x182>
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c62:	f001 ff87 	bl	8004b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c66:	1d3a      	adds	r2, r7, #4
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 f896 	bl	8003da0 <xTaskCheckForTimeOut>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d124      	bne.n	8002cc4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c7c:	f000 faa2 	bl	80031c4 <prvIsQueueFull>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d018      	beq.n	8002cb8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c88:	3310      	adds	r3, #16
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 ff1e 	bl	8003ad0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c96:	f000 fa2d 	bl	80030f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c9a:	f000 fd53 	bl	8003744 <xTaskResumeAll>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f47f af7c 	bne.w	8002b9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <xQueueGenericSend+0x1f8>)
 8002ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	e772      	b.n	8002b9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cba:	f000 fa1b 	bl	80030f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cbe:	f000 fd41 	bl	8003744 <xTaskResumeAll>
 8002cc2:	e76c      	b.n	8002b9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cc6:	f000 fa15 	bl	80030f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cca:	f000 fd3b 	bl	8003744 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3738      	adds	r7, #56	; 0x38
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	e000ed04 	.word	0xe000ed04

08002cdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b090      	sub	sp, #64	; 0x40
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d06:	bf00      	nop
 8002d08:	e7fe      	b.n	8002d08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d103      	bne.n	8002d18 <xQueueGenericSendFromISR+0x3c>
 8002d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <xQueueGenericSendFromISR+0x40>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <xQueueGenericSendFromISR+0x42>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10a      	bne.n	8002d38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d34:	bf00      	nop
 8002d36:	e7fe      	b.n	8002d36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d103      	bne.n	8002d46 <xQueueGenericSendFromISR+0x6a>
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <xQueueGenericSendFromISR+0x6e>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <xQueueGenericSendFromISR+0x70>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	623b      	str	r3, [r7, #32]
}
 8002d62:	bf00      	nop
 8002d64:	e7fe      	b.n	8002d64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d66:	f001 ffb7 	bl	8004cd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d6a:	f3ef 8211 	mrs	r2, BASEPRI
 8002d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	61fa      	str	r2, [r7, #28]
 8002d80:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d82:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d302      	bcc.n	8002d98 <xQueueGenericSendFromISR+0xbc>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d12f      	bne.n	8002df8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002dae:	f000 f911 	bl	8002fd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002db2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002db6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dba:	d112      	bne.n	8002de2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d016      	beq.n	8002df2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc6:	3324      	adds	r3, #36	; 0x24
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 ff0d 	bl	8003be8 <xTaskRemoveFromEventList>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00e      	beq.n	8002df2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00b      	beq.n	8002df2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e007      	b.n	8002df2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002de2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002de6:	3301      	adds	r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	b25a      	sxtb	r2, r3
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002df2:	2301      	movs	r3, #1
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002df6:	e001      	b.n	8002dfc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3740      	adds	r7, #64	; 0x40
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08c      	sub	sp, #48	; 0x30
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <xQueueReceive+0x30>
	__asm volatile
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	623b      	str	r3, [r7, #32]
}
 8002e40:	bf00      	nop
 8002e42:	e7fe      	b.n	8002e42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d103      	bne.n	8002e52 <xQueueReceive+0x3e>
 8002e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <xQueueReceive+0x42>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <xQueueReceive+0x44>
 8002e56:	2300      	movs	r3, #0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <xQueueReceive+0x5e>
	__asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	61fb      	str	r3, [r7, #28]
}
 8002e6e:	bf00      	nop
 8002e70:	e7fe      	b.n	8002e70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e72:	f001 f8d9 	bl	8004028 <xTaskGetSchedulerState>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <xQueueReceive+0x6e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <xQueueReceive+0x72>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <xQueueReceive+0x74>
 8002e86:	2300      	movs	r3, #0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <xQueueReceive+0x8e>
	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	61bb      	str	r3, [r7, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	e7fe      	b.n	8002ea0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ea2:	f001 fe37 	bl	8004b14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01f      	beq.n	8002ef2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eb6:	f000 f8f7 	bl	80030a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	1e5a      	subs	r2, r3, #1
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00f      	beq.n	8002eea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	3310      	adds	r3, #16
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fe8a 	bl	8003be8 <xTaskRemoveFromEventList>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002eda:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <xQueueReceive+0x1bc>)
 8002edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002eea:	f001 fe43 	bl	8004b74 <vPortExitCritical>
				return pdPASS;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e069      	b.n	8002fc6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d103      	bne.n	8002f00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ef8:	f001 fe3c 	bl	8004b74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e062      	b.n	8002fc6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f06:	f107 0310 	add.w	r3, r7, #16
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 ff32 	bl	8003d74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f10:	2301      	movs	r3, #1
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f14:	f001 fe2e 	bl	8004b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f18:	f000 fc06 	bl	8003728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f1c:	f001 fdfa 	bl	8004b14 <vPortEnterCritical>
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f26:	b25b      	sxtb	r3, r3
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f2c:	d103      	bne.n	8002f36 <xQueueReceive+0x122>
 8002f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f3c:	b25b      	sxtb	r3, r3
 8002f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f42:	d103      	bne.n	8002f4c <xQueueReceive+0x138>
 8002f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f4c:	f001 fe12 	bl	8004b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f50:	1d3a      	adds	r2, r7, #4
 8002f52:	f107 0310 	add.w	r3, r7, #16
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 ff21 	bl	8003da0 <xTaskCheckForTimeOut>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d123      	bne.n	8002fac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f66:	f000 f917 	bl	8003198 <prvIsQueueEmpty>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d017      	beq.n	8002fa0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f72:	3324      	adds	r3, #36	; 0x24
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fda9 	bl	8003ad0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f80:	f000 f8b8 	bl	80030f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f84:	f000 fbde 	bl	8003744 <xTaskResumeAll>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d189      	bne.n	8002ea2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <xQueueReceive+0x1bc>)
 8002f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	e780      	b.n	8002ea2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fa2:	f000 f8a7 	bl	80030f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fa6:	f000 fbcd 	bl	8003744 <xTaskResumeAll>
 8002faa:	e77a      	b.n	8002ea2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fae:	f000 f8a1 	bl	80030f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fb2:	f000 fbc7 	bl	8003744 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fb8:	f000 f8ee 	bl	8003198 <prvIsQueueEmpty>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f43f af6f 	beq.w	8002ea2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3730      	adds	r7, #48	; 0x30
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	e000ed04 	.word	0xe000ed04

08002fd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10d      	bne.n	800300e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d14d      	bne.n	8003096 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f001 f830 	bl	8004064 <xTaskPriorityDisinherit>
 8003004:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	e043      	b.n	8003096 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d119      	bne.n	8003048 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6858      	ldr	r0, [r3, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	461a      	mov	r2, r3
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	f002 f8ae 	bl	8005180 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	441a      	add	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d32b      	bcc.n	8003096 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	e026      	b.n	8003096 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	68d8      	ldr	r0, [r3, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	461a      	mov	r2, r3
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	f002 f894 	bl	8005180 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	425b      	negs	r3, r3
 8003062:	441a      	add	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d207      	bcs.n	8003084 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	425b      	negs	r3, r3
 800307e:	441a      	add	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d105      	bne.n	8003096 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	3b01      	subs	r3, #1
 8003094:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800309e:	697b      	ldr	r3, [r7, #20]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d018      	beq.n	80030ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	441a      	add	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d303      	bcc.n	80030dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68d9      	ldr	r1, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	461a      	mov	r2, r3
 80030e6:	6838      	ldr	r0, [r7, #0]
 80030e8:	f002 f84a 	bl	8005180 <memcpy>
	}
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030fc:	f001 fd0a 	bl	8004b14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003106:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003108:	e011      	b.n	800312e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	2b00      	cmp	r3, #0
 8003110:	d012      	beq.n	8003138 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3324      	adds	r3, #36	; 0x24
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fd66 	bl	8003be8 <xTaskRemoveFromEventList>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003122:	f000 fe9f 	bl	8003e64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	3b01      	subs	r3, #1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800312e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003132:	2b00      	cmp	r3, #0
 8003134:	dce9      	bgt.n	800310a <prvUnlockQueue+0x16>
 8003136:	e000      	b.n	800313a <prvUnlockQueue+0x46>
					break;
 8003138:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	22ff      	movs	r2, #255	; 0xff
 800313e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003142:	f001 fd17 	bl	8004b74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003146:	f001 fce5 	bl	8004b14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003150:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003152:	e011      	b.n	8003178 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d012      	beq.n	8003182 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3310      	adds	r3, #16
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fd41 	bl	8003be8 <xTaskRemoveFromEventList>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800316c:	f000 fe7a 	bl	8003e64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003170:	7bbb      	ldrb	r3, [r7, #14]
 8003172:	3b01      	subs	r3, #1
 8003174:	b2db      	uxtb	r3, r3
 8003176:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800317c:	2b00      	cmp	r3, #0
 800317e:	dce9      	bgt.n	8003154 <prvUnlockQueue+0x60>
 8003180:	e000      	b.n	8003184 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003182:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	22ff      	movs	r2, #255	; 0xff
 8003188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800318c:	f001 fcf2 	bl	8004b74 <vPortExitCritical>
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031a0:	f001 fcb8 	bl	8004b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d102      	bne.n	80031b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031ac:	2301      	movs	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	e001      	b.n	80031b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031b6:	f001 fcdd 	bl	8004b74 <vPortExitCritical>

	return xReturn;
 80031ba:	68fb      	ldr	r3, [r7, #12]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031cc:	f001 fca2 	bl	8004b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d8:	429a      	cmp	r2, r3
 80031da:	d102      	bne.n	80031e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031dc:	2301      	movs	r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	e001      	b.n	80031e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031e6:	f001 fcc5 	bl	8004b74 <vPortExitCritical>

	return xReturn;
 80031ea:	68fb      	ldr	r3, [r7, #12]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e014      	b.n	800322e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003204:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <vQueueAddToRegistry+0x50>)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10b      	bne.n	8003228 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003210:	490c      	ldr	r1, [pc, #48]	; (8003244 <vQueueAddToRegistry+0x50>)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <vQueueAddToRegistry+0x50>)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003226:	e006      	b.n	8003236 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3301      	adds	r3, #1
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b07      	cmp	r3, #7
 8003232:	d9e7      	bls.n	8003204 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	200007e4 	.word	0x200007e4

08003248 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003258:	f001 fc5c 	bl	8004b14 <vPortEnterCritical>
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003262:	b25b      	sxtb	r3, r3
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003268:	d103      	bne.n	8003272 <vQueueWaitForMessageRestricted+0x2a>
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003278:	b25b      	sxtb	r3, r3
 800327a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800327e:	d103      	bne.n	8003288 <vQueueWaitForMessageRestricted+0x40>
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003288:	f001 fc74 	bl	8004b74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	2b00      	cmp	r3, #0
 8003292:	d106      	bne.n	80032a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	3324      	adds	r3, #36	; 0x24
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fc77 	bl	8003b90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80032a2:	6978      	ldr	r0, [r7, #20]
 80032a4:	f7ff ff26 	bl	80030f4 <prvUnlockQueue>
	}
 80032a8:	bf00      	nop
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08e      	sub	sp, #56	; 0x38
 80032b4:	af04      	add	r7, sp, #16
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <xTaskCreateStatic+0x2a>
	__asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	623b      	str	r3, [r7, #32]
}
 80032d6:	bf00      	nop
 80032d8:	e7fe      	b.n	80032d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80032da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	61fb      	str	r3, [r7, #28]
}
 80032f2:	bf00      	nop
 80032f4:	e7fe      	b.n	80032f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032f6:	235c      	movs	r3, #92	; 0x5c
 80032f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b5c      	cmp	r3, #92	; 0x5c
 80032fe:	d00a      	beq.n	8003316 <xTaskCreateStatic+0x66>
	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	61bb      	str	r3, [r7, #24]
}
 8003312:	bf00      	nop
 8003314:	e7fe      	b.n	8003314 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003316:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331a:	2b00      	cmp	r3, #0
 800331c:	d01e      	beq.n	800335c <xTaskCreateStatic+0xac>
 800331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01b      	beq.n	800335c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800332c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	2202      	movs	r2, #2
 8003332:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003336:	2300      	movs	r3, #0
 8003338:	9303      	str	r3, [sp, #12]
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	9302      	str	r3, [sp, #8]
 800333e:	f107 0314 	add.w	r3, r7, #20
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f850 	bl	80033f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003354:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003356:	f000 f8dd 	bl	8003514 <prvAddNewTaskToReadyList>
 800335a:	e001      	b.n	8003360 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003360:	697b      	ldr	r3, [r7, #20]
	}
 8003362:	4618      	mov	r0, r3
 8003364:	3728      	adds	r7, #40	; 0x28
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800336a:	b580      	push	{r7, lr}
 800336c:	b08c      	sub	sp, #48	; 0x30
 800336e:	af04      	add	r7, sp, #16
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4618      	mov	r0, r3
 8003380:	f001 fcea 	bl	8004d58 <pvPortMalloc>
 8003384:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00e      	beq.n	80033aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800338c:	205c      	movs	r0, #92	; 0x5c
 800338e:	f001 fce3 	bl	8004d58 <pvPortMalloc>
 8003392:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
 80033a0:	e005      	b.n	80033ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033a2:	6978      	ldr	r0, [r7, #20]
 80033a4:	f001 fda4 	bl	8004ef0 <vPortFree>
 80033a8:	e001      	b.n	80033ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d017      	beq.n	80033e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033bc:	88fa      	ldrh	r2, [r7, #6]
 80033be:	2300      	movs	r3, #0
 80033c0:	9303      	str	r3, [sp, #12]
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	9302      	str	r3, [sp, #8]
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f80e 	bl	80033f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033d8:	69f8      	ldr	r0, [r7, #28]
 80033da:	f000 f89b 	bl	8003514 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033de:	2301      	movs	r3, #1
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	e002      	b.n	80033ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033ea:	69bb      	ldr	r3, [r7, #24]
	}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3720      	adds	r7, #32
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	461a      	mov	r2, r3
 800340c:	21a5      	movs	r1, #165	; 0xa5
 800340e:	f001 fec5 	bl	800519c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800341c:	3b01      	subs	r3, #1
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f023 0307 	bic.w	r3, r3, #7
 800342a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	617b      	str	r3, [r7, #20]
}
 8003448:	bf00      	nop
 800344a:	e7fe      	b.n	800344a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01f      	beq.n	8003492 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	e012      	b.n	800347e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	4413      	add	r3, r2
 800345e:	7819      	ldrb	r1, [r3, #0]
 8003460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	3334      	adds	r3, #52	; 0x34
 8003468:	460a      	mov	r2, r1
 800346a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	4413      	add	r3, r2
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d006      	beq.n	8003486 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	3301      	adds	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2b0f      	cmp	r3, #15
 8003482:	d9e9      	bls.n	8003458 <prvInitialiseNewTask+0x64>
 8003484:	e000      	b.n	8003488 <prvInitialiseNewTask+0x94>
			{
				break;
 8003486:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003490:	e003      	b.n	800349a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	2b37      	cmp	r3, #55	; 0x37
 800349e:	d901      	bls.n	80034a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034a0:	2337      	movs	r3, #55	; 0x37
 80034a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	2200      	movs	r2, #0
 80034b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	3304      	adds	r3, #4
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff f977 	bl	80027ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c2:	3318      	adds	r3, #24
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff f972 	bl	80027ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e2:	2200      	movs	r2, #0
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	68f9      	ldr	r1, [r7, #12]
 80034f2:	69b8      	ldr	r0, [r7, #24]
 80034f4:	f001 f9de 	bl	80048b4 <pxPortInitialiseStack>
 80034f8:	4602      	mov	r2, r0
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003508:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800350a:	bf00      	nop
 800350c:	3720      	adds	r7, #32
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800351c:	f001 fafa 	bl	8004b14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003520:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <prvAddNewTaskToReadyList+0xc4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	4a2c      	ldr	r2, [pc, #176]	; (80035d8 <prvAddNewTaskToReadyList+0xc4>)
 8003528:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800352a:	4b2c      	ldr	r3, [pc, #176]	; (80035dc <prvAddNewTaskToReadyList+0xc8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d109      	bne.n	8003546 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003532:	4a2a      	ldr	r2, [pc, #168]	; (80035dc <prvAddNewTaskToReadyList+0xc8>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003538:	4b27      	ldr	r3, [pc, #156]	; (80035d8 <prvAddNewTaskToReadyList+0xc4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d110      	bne.n	8003562 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003540:	f000 fcb4 	bl	8003eac <prvInitialiseTaskLists>
 8003544:	e00d      	b.n	8003562 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003546:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <prvAddNewTaskToReadyList+0xcc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800354e:	4b23      	ldr	r3, [pc, #140]	; (80035dc <prvAddNewTaskToReadyList+0xc8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	429a      	cmp	r2, r3
 800355a:	d802      	bhi.n	8003562 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800355c:	4a1f      	ldr	r2, [pc, #124]	; (80035dc <prvAddNewTaskToReadyList+0xc8>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003562:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <prvAddNewTaskToReadyList+0xd0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3301      	adds	r3, #1
 8003568:	4a1e      	ldr	r2, [pc, #120]	; (80035e4 <prvAddNewTaskToReadyList+0xd0>)
 800356a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800356c:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <prvAddNewTaskToReadyList+0xd0>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003578:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <prvAddNewTaskToReadyList+0xd4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d903      	bls.n	8003588 <prvAddNewTaskToReadyList+0x74>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	4a18      	ldr	r2, [pc, #96]	; (80035e8 <prvAddNewTaskToReadyList+0xd4>)
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4a15      	ldr	r2, [pc, #84]	; (80035ec <prvAddNewTaskToReadyList+0xd8>)
 8003596:	441a      	add	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3304      	adds	r3, #4
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f7ff f912 	bl	80027c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035a4:	f001 fae6 	bl	8004b74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035a8:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <prvAddNewTaskToReadyList+0xcc>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00e      	beq.n	80035ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <prvAddNewTaskToReadyList+0xc8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d207      	bcs.n	80035ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <prvAddNewTaskToReadyList+0xdc>)
 80035c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000cf8 	.word	0x20000cf8
 80035dc:	20000824 	.word	0x20000824
 80035e0:	20000d04 	.word	0x20000d04
 80035e4:	20000d14 	.word	0x20000d14
 80035e8:	20000d00 	.word	0x20000d00
 80035ec:	20000828 	.word	0x20000828
 80035f0:	e000ed04 	.word	0xe000ed04

080035f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d017      	beq.n	8003636 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003606:	4b13      	ldr	r3, [pc, #76]	; (8003654 <vTaskDelay+0x60>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <vTaskDelay+0x30>
	__asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	60bb      	str	r3, [r7, #8]
}
 8003620:	bf00      	nop
 8003622:	e7fe      	b.n	8003622 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003624:	f000 f880 	bl	8003728 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003628:	2100      	movs	r1, #0
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fda0 	bl	8004170 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003630:	f000 f888 	bl	8003744 <xTaskResumeAll>
 8003634:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d107      	bne.n	800364c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <vTaskDelay+0x64>)
 800363e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20000d20 	.word	0x20000d20
 8003658:	e000ed04 	.word	0xe000ed04

0800365c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	; 0x28
 8003660:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003666:	2300      	movs	r3, #0
 8003668:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800366a:	463a      	mov	r2, r7
 800366c:	1d39      	adds	r1, r7, #4
 800366e:	f107 0308 	add.w	r3, r7, #8
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe fef4 	bl	8002460 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003678:	6839      	ldr	r1, [r7, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	9202      	str	r2, [sp, #8]
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	2300      	movs	r3, #0
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	2300      	movs	r3, #0
 8003688:	460a      	mov	r2, r1
 800368a:	4921      	ldr	r1, [pc, #132]	; (8003710 <vTaskStartScheduler+0xb4>)
 800368c:	4821      	ldr	r0, [pc, #132]	; (8003714 <vTaskStartScheduler+0xb8>)
 800368e:	f7ff fe0f 	bl	80032b0 <xTaskCreateStatic>
 8003692:	4603      	mov	r3, r0
 8003694:	4a20      	ldr	r2, [pc, #128]	; (8003718 <vTaskStartScheduler+0xbc>)
 8003696:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003698:	4b1f      	ldr	r3, [pc, #124]	; (8003718 <vTaskStartScheduler+0xbc>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036a0:	2301      	movs	r3, #1
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	e001      	b.n	80036aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d102      	bne.n	80036b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80036b0:	f000 fdb2 	bl	8004218 <xTimerCreateTimerTask>
 80036b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d116      	bne.n	80036ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	613b      	str	r3, [r7, #16]
}
 80036ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036d0:	4b12      	ldr	r3, [pc, #72]	; (800371c <vTaskStartScheduler+0xc0>)
 80036d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036d8:	4b11      	ldr	r3, [pc, #68]	; (8003720 <vTaskStartScheduler+0xc4>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80036de:	4b11      	ldr	r3, [pc, #68]	; (8003724 <vTaskStartScheduler+0xc8>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036e4:	f001 f974 	bl	80049d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036e8:	e00e      	b.n	8003708 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f0:	d10a      	bne.n	8003708 <vTaskStartScheduler+0xac>
	__asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	60fb      	str	r3, [r7, #12]
}
 8003704:	bf00      	nop
 8003706:	e7fe      	b.n	8003706 <vTaskStartScheduler+0xaa>
}
 8003708:	bf00      	nop
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	08005c00 	.word	0x08005c00
 8003714:	08003e7d 	.word	0x08003e7d
 8003718:	20000d1c 	.word	0x20000d1c
 800371c:	20000d18 	.word	0x20000d18
 8003720:	20000d04 	.word	0x20000d04
 8003724:	20000cfc 	.word	0x20000cfc

08003728 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <vTaskSuspendAll+0x18>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3301      	adds	r3, #1
 8003732:	4a03      	ldr	r2, [pc, #12]	; (8003740 <vTaskSuspendAll+0x18>)
 8003734:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003736:	bf00      	nop
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	20000d20 	.word	0x20000d20

08003744 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800374e:	2300      	movs	r3, #0
 8003750:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003752:	4b42      	ldr	r3, [pc, #264]	; (800385c <xTaskResumeAll+0x118>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10a      	bne.n	8003770 <xTaskResumeAll+0x2c>
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	603b      	str	r3, [r7, #0]
}
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003770:	f001 f9d0 	bl	8004b14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003774:	4b39      	ldr	r3, [pc, #228]	; (800385c <xTaskResumeAll+0x118>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3b01      	subs	r3, #1
 800377a:	4a38      	ldr	r2, [pc, #224]	; (800385c <xTaskResumeAll+0x118>)
 800377c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800377e:	4b37      	ldr	r3, [pc, #220]	; (800385c <xTaskResumeAll+0x118>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d162      	bne.n	800384c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003786:	4b36      	ldr	r3, [pc, #216]	; (8003860 <xTaskResumeAll+0x11c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d05e      	beq.n	800384c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800378e:	e02f      	b.n	80037f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003790:	4b34      	ldr	r3, [pc, #208]	; (8003864 <xTaskResumeAll+0x120>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3318      	adds	r3, #24
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff f870 	bl	8002882 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	3304      	adds	r3, #4
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff f86b 	bl	8002882 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b0:	4b2d      	ldr	r3, [pc, #180]	; (8003868 <xTaskResumeAll+0x124>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d903      	bls.n	80037c0 <xTaskResumeAll+0x7c>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	4a2a      	ldr	r2, [pc, #168]	; (8003868 <xTaskResumeAll+0x124>)
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4a27      	ldr	r2, [pc, #156]	; (800386c <xTaskResumeAll+0x128>)
 80037ce:	441a      	add	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	3304      	adds	r3, #4
 80037d4:	4619      	mov	r1, r3
 80037d6:	4610      	mov	r0, r2
 80037d8:	f7fe fff6 	bl	80027c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	4b23      	ldr	r3, [pc, #140]	; (8003870 <xTaskResumeAll+0x12c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d302      	bcc.n	80037f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80037ea:	4b22      	ldr	r3, [pc, #136]	; (8003874 <xTaskResumeAll+0x130>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037f0:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <xTaskResumeAll+0x120>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1cb      	bne.n	8003790 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037fe:	f000 fbf3 	bl	8003fe8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003802:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <xTaskResumeAll+0x134>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d010      	beq.n	8003830 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800380e:	f000 f847 	bl	80038a0 <xTaskIncrementTick>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003818:	4b16      	ldr	r3, [pc, #88]	; (8003874 <xTaskResumeAll+0x130>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3b01      	subs	r3, #1
 8003822:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f1      	bne.n	800380e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <xTaskResumeAll+0x134>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003830:	4b10      	ldr	r3, [pc, #64]	; (8003874 <xTaskResumeAll+0x130>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d009      	beq.n	800384c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003838:	2301      	movs	r3, #1
 800383a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <xTaskResumeAll+0x138>)
 800383e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800384c:	f001 f992 	bl	8004b74 <vPortExitCritical>

	return xAlreadyYielded;
 8003850:	68bb      	ldr	r3, [r7, #8]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000d20 	.word	0x20000d20
 8003860:	20000cf8 	.word	0x20000cf8
 8003864:	20000cb8 	.word	0x20000cb8
 8003868:	20000d00 	.word	0x20000d00
 800386c:	20000828 	.word	0x20000828
 8003870:	20000824 	.word	0x20000824
 8003874:	20000d0c 	.word	0x20000d0c
 8003878:	20000d08 	.word	0x20000d08
 800387c:	e000ed04 	.word	0xe000ed04

08003880 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003886:	4b05      	ldr	r3, [pc, #20]	; (800389c <xTaskGetTickCount+0x1c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800388c:	687b      	ldr	r3, [r7, #4]
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000cfc 	.word	0x20000cfc

080038a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038aa:	4b4f      	ldr	r3, [pc, #316]	; (80039e8 <xTaskIncrementTick+0x148>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f040 808f 	bne.w	80039d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038b4:	4b4d      	ldr	r3, [pc, #308]	; (80039ec <xTaskIncrementTick+0x14c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3301      	adds	r3, #1
 80038ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038bc:	4a4b      	ldr	r2, [pc, #300]	; (80039ec <xTaskIncrementTick+0x14c>)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d120      	bne.n	800390a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80038c8:	4b49      	ldr	r3, [pc, #292]	; (80039f0 <xTaskIncrementTick+0x150>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80038d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	603b      	str	r3, [r7, #0]
}
 80038e4:	bf00      	nop
 80038e6:	e7fe      	b.n	80038e6 <xTaskIncrementTick+0x46>
 80038e8:	4b41      	ldr	r3, [pc, #260]	; (80039f0 <xTaskIncrementTick+0x150>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	4b41      	ldr	r3, [pc, #260]	; (80039f4 <xTaskIncrementTick+0x154>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a3f      	ldr	r2, [pc, #252]	; (80039f0 <xTaskIncrementTick+0x150>)
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	4a3f      	ldr	r2, [pc, #252]	; (80039f4 <xTaskIncrementTick+0x154>)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	4b3e      	ldr	r3, [pc, #248]	; (80039f8 <xTaskIncrementTick+0x158>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3301      	adds	r3, #1
 8003902:	4a3d      	ldr	r2, [pc, #244]	; (80039f8 <xTaskIncrementTick+0x158>)
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	f000 fb6f 	bl	8003fe8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800390a:	4b3c      	ldr	r3, [pc, #240]	; (80039fc <xTaskIncrementTick+0x15c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	429a      	cmp	r2, r3
 8003912:	d349      	bcc.n	80039a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003914:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <xTaskIncrementTick+0x150>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d104      	bne.n	8003928 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800391e:	4b37      	ldr	r3, [pc, #220]	; (80039fc <xTaskIncrementTick+0x15c>)
 8003920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003924:	601a      	str	r2, [r3, #0]
					break;
 8003926:	e03f      	b.n	80039a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003928:	4b31      	ldr	r3, [pc, #196]	; (80039f0 <xTaskIncrementTick+0x150>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	429a      	cmp	r2, r3
 800393e:	d203      	bcs.n	8003948 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003940:	4a2e      	ldr	r2, [pc, #184]	; (80039fc <xTaskIncrementTick+0x15c>)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003946:	e02f      	b.n	80039a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	3304      	adds	r3, #4
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe ff98 	bl	8002882 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	3318      	adds	r3, #24
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe ff8f 	bl	8002882 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <xTaskIncrementTick+0x160>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d903      	bls.n	8003978 <xTaskIncrementTick+0xd8>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	4a22      	ldr	r2, [pc, #136]	; (8003a00 <xTaskIncrementTick+0x160>)
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4a1f      	ldr	r2, [pc, #124]	; (8003a04 <xTaskIncrementTick+0x164>)
 8003986:	441a      	add	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	3304      	adds	r3, #4
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f7fe ff1a 	bl	80027c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003998:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <xTaskIncrementTick+0x168>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	429a      	cmp	r2, r3
 80039a0:	d3b8      	bcc.n	8003914 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80039a2:	2301      	movs	r3, #1
 80039a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039a6:	e7b5      	b.n	8003914 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039a8:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <xTaskIncrementTick+0x168>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ae:	4915      	ldr	r1, [pc, #84]	; (8003a04 <xTaskIncrementTick+0x164>)
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d901      	bls.n	80039c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80039c0:	2301      	movs	r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80039c4:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <xTaskIncrementTick+0x16c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80039cc:	2301      	movs	r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	e004      	b.n	80039dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80039d2:	4b0f      	ldr	r3, [pc, #60]	; (8003a10 <xTaskIncrementTick+0x170>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3301      	adds	r3, #1
 80039d8:	4a0d      	ldr	r2, [pc, #52]	; (8003a10 <xTaskIncrementTick+0x170>)
 80039da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80039dc:	697b      	ldr	r3, [r7, #20]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000d20 	.word	0x20000d20
 80039ec:	20000cfc 	.word	0x20000cfc
 80039f0:	20000cb0 	.word	0x20000cb0
 80039f4:	20000cb4 	.word	0x20000cb4
 80039f8:	20000d10 	.word	0x20000d10
 80039fc:	20000d18 	.word	0x20000d18
 8003a00:	20000d00 	.word	0x20000d00
 8003a04:	20000828 	.word	0x20000828
 8003a08:	20000824 	.word	0x20000824
 8003a0c:	20000d0c 	.word	0x20000d0c
 8003a10:	20000d08 	.word	0x20000d08

08003a14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a1a:	4b28      	ldr	r3, [pc, #160]	; (8003abc <vTaskSwitchContext+0xa8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a22:	4b27      	ldr	r3, [pc, #156]	; (8003ac0 <vTaskSwitchContext+0xac>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a28:	e041      	b.n	8003aae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003a2a:	4b25      	ldr	r3, [pc, #148]	; (8003ac0 <vTaskSwitchContext+0xac>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a30:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <vTaskSwitchContext+0xb0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	e010      	b.n	8003a5a <vTaskSwitchContext+0x46>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <vTaskSwitchContext+0x40>
	__asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	607b      	str	r3, [r7, #4]
}
 8003a50:	bf00      	nop
 8003a52:	e7fe      	b.n	8003a52 <vTaskSwitchContext+0x3e>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	491b      	ldr	r1, [pc, #108]	; (8003ac8 <vTaskSwitchContext+0xb4>)
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0e4      	beq.n	8003a38 <vTaskSwitchContext+0x24>
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <vTaskSwitchContext+0xb4>)
 8003a7a:	4413      	add	r3, r2
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	3308      	adds	r3, #8
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d104      	bne.n	8003a9e <vTaskSwitchContext+0x8a>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4a09      	ldr	r2, [pc, #36]	; (8003acc <vTaskSwitchContext+0xb8>)
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	4a06      	ldr	r2, [pc, #24]	; (8003ac4 <vTaskSwitchContext+0xb0>)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6013      	str	r3, [r2, #0]
}
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20000d20 	.word	0x20000d20
 8003ac0:	20000d0c 	.word	0x20000d0c
 8003ac4:	20000d00 	.word	0x20000d00
 8003ac8:	20000828 	.word	0x20000828
 8003acc:	20000824 	.word	0x20000824

08003ad0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	60fb      	str	r3, [r7, #12]
}
 8003af2:	bf00      	nop
 8003af4:	e7fe      	b.n	8003af4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003af6:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <vTaskPlaceOnEventList+0x44>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3318      	adds	r3, #24
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fe fe86 	bl	8002810 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b04:	2101      	movs	r1, #1
 8003b06:	6838      	ldr	r0, [r7, #0]
 8003b08:	f000 fb32 	bl	8004170 <prvAddCurrentTaskToDelayedList>
}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000824 	.word	0x20000824

08003b18 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10a      	bne.n	8003b40 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8003b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	617b      	str	r3, [r7, #20]
}
 8003b3c:	bf00      	nop
 8003b3e:	e7fe      	b.n	8003b3e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8003b40:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <vTaskPlaceOnUnorderedEventList+0x70>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	613b      	str	r3, [r7, #16]
}
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <vTaskPlaceOnUnorderedEventList+0x74>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003b68:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b6a:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <vTaskPlaceOnUnorderedEventList+0x74>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3318      	adds	r3, #24
 8003b70:	4619      	mov	r1, r3
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f7fe fe28 	bl	80027c8 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b78:	2101      	movs	r1, #1
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 faf8 	bl	8004170 <prvAddCurrentTaskToDelayedList>
}
 8003b80:	bf00      	nop
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000d20 	.word	0x20000d20
 8003b8c:	20000824 	.word	0x20000824

08003b90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	617b      	str	r3, [r7, #20]
}
 8003bb4:	bf00      	nop
 8003bb6:	e7fe      	b.n	8003bb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3318      	adds	r3, #24
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f7fe fe01 	bl	80027c8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	68b8      	ldr	r0, [r7, #8]
 8003bd6:	f000 facb 	bl	8004170 <prvAddCurrentTaskToDelayedList>
	}
 8003bda:	bf00      	nop
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000824 	.word	0x20000824

08003be8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10a      	bne.n	8003c14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	60fb      	str	r3, [r7, #12]
}
 8003c10:	bf00      	nop
 8003c12:	e7fe      	b.n	8003c12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	3318      	adds	r3, #24
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fe fe32 	bl	8002882 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <xTaskRemoveFromEventList+0xb0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d11d      	bne.n	8003c62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe fe29 	bl	8002882 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c34:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <xTaskRemoveFromEventList+0xb4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d903      	bls.n	8003c44 <xTaskRemoveFromEventList+0x5c>
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	4a16      	ldr	r2, [pc, #88]	; (8003c9c <xTaskRemoveFromEventList+0xb4>)
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <xTaskRemoveFromEventList+0xb8>)
 8003c52:	441a      	add	r2, r3
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	f7fe fdb4 	bl	80027c8 <vListInsertEnd>
 8003c60:	e005      	b.n	8003c6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	3318      	adds	r3, #24
 8003c66:	4619      	mov	r1, r3
 8003c68:	480e      	ldr	r0, [pc, #56]	; (8003ca4 <xTaskRemoveFromEventList+0xbc>)
 8003c6a:	f7fe fdad 	bl	80027c8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c72:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <xTaskRemoveFromEventList+0xc0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d905      	bls.n	8003c88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c80:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <xTaskRemoveFromEventList+0xc4>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e001      	b.n	8003c8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c8c:	697b      	ldr	r3, [r7, #20]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000d20 	.word	0x20000d20
 8003c9c:	20000d00 	.word	0x20000d00
 8003ca0:	20000828 	.word	0x20000828
 8003ca4:	20000cb8 	.word	0x20000cb8
 8003ca8:	20000824 	.word	0x20000824
 8003cac:	20000d0c 	.word	0x20000d0c

08003cb0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8003cba:	4b29      	ldr	r3, [pc, #164]	; (8003d60 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	613b      	str	r3, [r7, #16]
}
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	60fb      	str	r3, [r7, #12]
}
 8003d00:	bf00      	nop
 8003d02:	e7fe      	b.n	8003d02 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7fe fdbc 	bl	8002882 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe fdb7 	bl	8002882 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d18:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d903      	bls.n	8003d28 <vTaskRemoveFromUnorderedEventList+0x78>
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	4a0f      	ldr	r2, [pc, #60]	; (8003d64 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4a0c      	ldr	r2, [pc, #48]	; (8003d68 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8003d36:	441a      	add	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	f7fe fd42 	bl	80027c8 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d48:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d902      	bls.n	8003d58 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8003d52:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
	}
}
 8003d58:	bf00      	nop
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20000d20 	.word	0x20000d20
 8003d64:	20000d00 	.word	0x20000d00
 8003d68:	20000828 	.word	0x20000828
 8003d6c:	20000824 	.word	0x20000824
 8003d70:	20000d0c 	.word	0x20000d0c

08003d74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <vTaskInternalSetTimeOutState+0x24>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <vTaskInternalSetTimeOutState+0x28>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	605a      	str	r2, [r3, #4]
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	20000d10 	.word	0x20000d10
 8003d9c:	20000cfc 	.word	0x20000cfc

08003da0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	613b      	str	r3, [r7, #16]
}
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	60fb      	str	r3, [r7, #12]
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003de2:	f000 fe97 	bl	8004b14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003de6:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <xTaskCheckForTimeOut+0xbc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dfe:	d102      	bne.n	8003e06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	e023      	b.n	8003e4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <xTaskCheckForTimeOut+0xc0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d007      	beq.n	8003e22 <xTaskCheckForTimeOut+0x82>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d302      	bcc.n	8003e22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	e015      	b.n	8003e4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d20b      	bcs.n	8003e44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	1ad2      	subs	r2, r2, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff9b 	bl	8003d74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	e004      	b.n	8003e4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e4e:	f000 fe91 	bl	8004b74 <vPortExitCritical>

	return xReturn;
 8003e52:	69fb      	ldr	r3, [r7, #28]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3720      	adds	r7, #32
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	20000cfc 	.word	0x20000cfc
 8003e60:	20000d10 	.word	0x20000d10

08003e64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e68:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <vTaskMissedYield+0x14>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
}
 8003e6e:	bf00      	nop
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	20000d0c 	.word	0x20000d0c

08003e7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e84:	f000 f852 	bl	8003f2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <prvIdleTask+0x28>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d9f9      	bls.n	8003e84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e90:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <prvIdleTask+0x2c>)
 8003e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ea0:	e7f0      	b.n	8003e84 <prvIdleTask+0x8>
 8003ea2:	bf00      	nop
 8003ea4:	20000828 	.word	0x20000828
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	e00c      	b.n	8003ed2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4a12      	ldr	r2, [pc, #72]	; (8003f0c <prvInitialiseTaskLists+0x60>)
 8003ec4:	4413      	add	r3, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe fc51 	bl	800276e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b37      	cmp	r3, #55	; 0x37
 8003ed6:	d9ef      	bls.n	8003eb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ed8:	480d      	ldr	r0, [pc, #52]	; (8003f10 <prvInitialiseTaskLists+0x64>)
 8003eda:	f7fe fc48 	bl	800276e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ede:	480d      	ldr	r0, [pc, #52]	; (8003f14 <prvInitialiseTaskLists+0x68>)
 8003ee0:	f7fe fc45 	bl	800276e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ee4:	480c      	ldr	r0, [pc, #48]	; (8003f18 <prvInitialiseTaskLists+0x6c>)
 8003ee6:	f7fe fc42 	bl	800276e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003eea:	480c      	ldr	r0, [pc, #48]	; (8003f1c <prvInitialiseTaskLists+0x70>)
 8003eec:	f7fe fc3f 	bl	800276e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ef0:	480b      	ldr	r0, [pc, #44]	; (8003f20 <prvInitialiseTaskLists+0x74>)
 8003ef2:	f7fe fc3c 	bl	800276e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <prvInitialiseTaskLists+0x78>)
 8003ef8:	4a05      	ldr	r2, [pc, #20]	; (8003f10 <prvInitialiseTaskLists+0x64>)
 8003efa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003efc:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <prvInitialiseTaskLists+0x7c>)
 8003efe:	4a05      	ldr	r2, [pc, #20]	; (8003f14 <prvInitialiseTaskLists+0x68>)
 8003f00:	601a      	str	r2, [r3, #0]
}
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000828 	.word	0x20000828
 8003f10:	20000c88 	.word	0x20000c88
 8003f14:	20000c9c 	.word	0x20000c9c
 8003f18:	20000cb8 	.word	0x20000cb8
 8003f1c:	20000ccc 	.word	0x20000ccc
 8003f20:	20000ce4 	.word	0x20000ce4
 8003f24:	20000cb0 	.word	0x20000cb0
 8003f28:	20000cb4 	.word	0x20000cb4

08003f2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f32:	e019      	b.n	8003f68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f34:	f000 fdee 	bl	8004b14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f38:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <prvCheckTasksWaitingTermination+0x50>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3304      	adds	r3, #4
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe fc9c 	bl	8002882 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <prvCheckTasksWaitingTermination+0x54>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	4a0b      	ldr	r2, [pc, #44]	; (8003f80 <prvCheckTasksWaitingTermination+0x54>)
 8003f52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <prvCheckTasksWaitingTermination+0x58>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <prvCheckTasksWaitingTermination+0x58>)
 8003f5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f5e:	f000 fe09 	bl	8004b74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f810 	bl	8003f88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f68:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <prvCheckTasksWaitingTermination+0x58>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e1      	bne.n	8003f34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000ccc 	.word	0x20000ccc
 8003f80:	20000cf8 	.word	0x20000cf8
 8003f84:	20000ce0 	.word	0x20000ce0

08003f88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d108      	bne.n	8003fac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 ffa6 	bl	8004ef0 <vPortFree>
				vPortFree( pxTCB );
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 ffa3 	bl	8004ef0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003faa:	e018      	b.n	8003fde <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d103      	bne.n	8003fbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 ff9a 	bl	8004ef0 <vPortFree>
	}
 8003fbc:	e00f      	b.n	8003fde <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d00a      	beq.n	8003fde <prvDeleteTCB+0x56>
	__asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	60fb      	str	r3, [r7, #12]
}
 8003fda:	bf00      	nop
 8003fdc:	e7fe      	b.n	8003fdc <prvDeleteTCB+0x54>
	}
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fee:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <prvResetNextTaskUnblockTime+0x38>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d104      	bne.n	8004002 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <prvResetNextTaskUnblockTime+0x3c>)
 8003ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ffe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004000:	e008      	b.n	8004014 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004002:	4b07      	ldr	r3, [pc, #28]	; (8004020 <prvResetNextTaskUnblockTime+0x38>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	4a04      	ldr	r2, [pc, #16]	; (8004024 <prvResetNextTaskUnblockTime+0x3c>)
 8004012:	6013      	str	r3, [r2, #0]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	20000cb0 	.word	0x20000cb0
 8004024:	20000d18 	.word	0x20000d18

08004028 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800402e:	4b0b      	ldr	r3, [pc, #44]	; (800405c <xTaskGetSchedulerState+0x34>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d102      	bne.n	800403c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004036:	2301      	movs	r3, #1
 8004038:	607b      	str	r3, [r7, #4]
 800403a:	e008      	b.n	800404e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800403c:	4b08      	ldr	r3, [pc, #32]	; (8004060 <xTaskGetSchedulerState+0x38>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d102      	bne.n	800404a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004044:	2302      	movs	r3, #2
 8004046:	607b      	str	r3, [r7, #4]
 8004048:	e001      	b.n	800404e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800404a:	2300      	movs	r3, #0
 800404c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800404e:	687b      	ldr	r3, [r7, #4]
	}
 8004050:	4618      	mov	r0, r3
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	20000d04 	.word	0x20000d04
 8004060:	20000d20 	.word	0x20000d20

08004064 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d056      	beq.n	8004128 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800407a:	4b2e      	ldr	r3, [pc, #184]	; (8004134 <xTaskPriorityDisinherit+0xd0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	429a      	cmp	r2, r3
 8004082:	d00a      	beq.n	800409a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	60fb      	str	r3, [r7, #12]
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	60bb      	str	r3, [r7, #8]
}
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040bc:	1e5a      	subs	r2, r3, #1
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d02c      	beq.n	8004128 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d128      	bne.n	8004128 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	3304      	adds	r3, #4
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe fbd1 	bl	8002882 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f8:	4b0f      	ldr	r3, [pc, #60]	; (8004138 <xTaskPriorityDisinherit+0xd4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d903      	bls.n	8004108 <xTaskPriorityDisinherit+0xa4>
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	4a0c      	ldr	r2, [pc, #48]	; (8004138 <xTaskPriorityDisinherit+0xd4>)
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4a09      	ldr	r2, [pc, #36]	; (800413c <xTaskPriorityDisinherit+0xd8>)
 8004116:	441a      	add	r2, r3
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	3304      	adds	r3, #4
 800411c:	4619      	mov	r1, r3
 800411e:	4610      	mov	r0, r2
 8004120:	f7fe fb52 	bl	80027c8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004124:	2301      	movs	r3, #1
 8004126:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004128:	697b      	ldr	r3, [r7, #20]
	}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000824 	.word	0x20000824
 8004138:	20000d00 	.word	0x20000d00
 800413c:	20000828 	.word	0x20000828

08004140 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <uxTaskResetEventItemValue+0x2c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800414e:	4b07      	ldr	r3, [pc, #28]	; (800416c <uxTaskResetEventItemValue+0x2c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <uxTaskResetEventItemValue+0x2c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800415c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800415e:	687b      	ldr	r3, [r7, #4]
}
 8004160:	4618      	mov	r0, r3
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	20000824 	.word	0x20000824

08004170 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800417a:	4b21      	ldr	r3, [pc, #132]	; (8004200 <prvAddCurrentTaskToDelayedList+0x90>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004180:	4b20      	ldr	r3, [pc, #128]	; (8004204 <prvAddCurrentTaskToDelayedList+0x94>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3304      	adds	r3, #4
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe fb7b 	bl	8002882 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004192:	d10a      	bne.n	80041aa <prvAddCurrentTaskToDelayedList+0x3a>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800419a:	4b1a      	ldr	r3, [pc, #104]	; (8004204 <prvAddCurrentTaskToDelayedList+0x94>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3304      	adds	r3, #4
 80041a0:	4619      	mov	r1, r3
 80041a2:	4819      	ldr	r0, [pc, #100]	; (8004208 <prvAddCurrentTaskToDelayedList+0x98>)
 80041a4:	f7fe fb10 	bl	80027c8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041a8:	e026      	b.n	80041f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4413      	add	r3, r2
 80041b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041b2:	4b14      	ldr	r3, [pc, #80]	; (8004204 <prvAddCurrentTaskToDelayedList+0x94>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d209      	bcs.n	80041d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041c2:	4b12      	ldr	r3, [pc, #72]	; (800420c <prvAddCurrentTaskToDelayedList+0x9c>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <prvAddCurrentTaskToDelayedList+0x94>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	f7fe fb1e 	bl	8002810 <vListInsert>
}
 80041d4:	e010      	b.n	80041f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041d6:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <prvAddCurrentTaskToDelayedList+0xa0>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <prvAddCurrentTaskToDelayedList+0x94>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3304      	adds	r3, #4
 80041e0:	4619      	mov	r1, r3
 80041e2:	4610      	mov	r0, r2
 80041e4:	f7fe fb14 	bl	8002810 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <prvAddCurrentTaskToDelayedList+0xa4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d202      	bcs.n	80041f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80041f2:	4a08      	ldr	r2, [pc, #32]	; (8004214 <prvAddCurrentTaskToDelayedList+0xa4>)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6013      	str	r3, [r2, #0]
}
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000cfc 	.word	0x20000cfc
 8004204:	20000824 	.word	0x20000824
 8004208:	20000ce4 	.word	0x20000ce4
 800420c:	20000cb4 	.word	0x20000cb4
 8004210:	20000cb0 	.word	0x20000cb0
 8004214:	20000d18 	.word	0x20000d18

08004218 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	; 0x28
 800421c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004222:	f000 fb07 	bl	8004834 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004226:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <xTimerCreateTimerTask+0x80>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d021      	beq.n	8004272 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004236:	1d3a      	adds	r2, r7, #4
 8004238:	f107 0108 	add.w	r1, r7, #8
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	4618      	mov	r0, r3
 8004242:	f7fe f927 	bl	8002494 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	9202      	str	r2, [sp, #8]
 800424e:	9301      	str	r3, [sp, #4]
 8004250:	2302      	movs	r3, #2
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	2300      	movs	r3, #0
 8004256:	460a      	mov	r2, r1
 8004258:	4910      	ldr	r1, [pc, #64]	; (800429c <xTimerCreateTimerTask+0x84>)
 800425a:	4811      	ldr	r0, [pc, #68]	; (80042a0 <xTimerCreateTimerTask+0x88>)
 800425c:	f7ff f828 	bl	80032b0 <xTaskCreateStatic>
 8004260:	4603      	mov	r3, r0
 8004262:	4a10      	ldr	r2, [pc, #64]	; (80042a4 <xTimerCreateTimerTask+0x8c>)
 8004264:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004266:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <xTimerCreateTimerTask+0x8c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800426e:	2301      	movs	r3, #1
 8004270:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	613b      	str	r3, [r7, #16]
}
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800428e:	697b      	ldr	r3, [r7, #20]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000d54 	.word	0x20000d54
 800429c:	08005c08 	.word	0x08005c08
 80042a0:	080043dd 	.word	0x080043dd
 80042a4:	20000d58 	.word	0x20000d58

080042a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	; 0x28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10a      	bne.n	80042d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	623b      	str	r3, [r7, #32]
}
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80042d6:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <xTimerGenericCommand+0x98>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d02a      	beq.n	8004334 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b05      	cmp	r3, #5
 80042ee:	dc18      	bgt.n	8004322 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80042f0:	f7ff fe9a 	bl	8004028 <xTaskGetSchedulerState>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d109      	bne.n	800430e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80042fa:	4b11      	ldr	r3, [pc, #68]	; (8004340 <xTimerGenericCommand+0x98>)
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	f107 0110 	add.w	r1, r7, #16
 8004302:	2300      	movs	r3, #0
 8004304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004306:	f7fe fbeb 	bl	8002ae0 <xQueueGenericSend>
 800430a:	6278      	str	r0, [r7, #36]	; 0x24
 800430c:	e012      	b.n	8004334 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800430e:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <xTimerGenericCommand+0x98>)
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	f107 0110 	add.w	r1, r7, #16
 8004316:	2300      	movs	r3, #0
 8004318:	2200      	movs	r2, #0
 800431a:	f7fe fbe1 	bl	8002ae0 <xQueueGenericSend>
 800431e:	6278      	str	r0, [r7, #36]	; 0x24
 8004320:	e008      	b.n	8004334 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004322:	4b07      	ldr	r3, [pc, #28]	; (8004340 <xTimerGenericCommand+0x98>)
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	f107 0110 	add.w	r1, r7, #16
 800432a:	2300      	movs	r3, #0
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	f7fe fcd5 	bl	8002cdc <xQueueGenericSendFromISR>
 8004332:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004336:	4618      	mov	r0, r3
 8004338:	3728      	adds	r7, #40	; 0x28
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000d54 	.word	0x20000d54

08004344 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af02      	add	r7, sp, #8
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800434e:	4b22      	ldr	r3, [pc, #136]	; (80043d8 <prvProcessExpiredTimer+0x94>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	3304      	adds	r3, #4
 800435c:	4618      	mov	r0, r3
 800435e:	f7fe fa90 	bl	8002882 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d022      	beq.n	80043b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	699a      	ldr	r2, [r3, #24]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	18d1      	adds	r1, r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	6978      	ldr	r0, [r7, #20]
 800437e:	f000 f8d1 	bl	8004524 <prvInsertTimerInActiveList>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01f      	beq.n	80043c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004388:	2300      	movs	r3, #0
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	2300      	movs	r3, #0
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	2100      	movs	r1, #0
 8004392:	6978      	ldr	r0, [r7, #20]
 8004394:	f7ff ff88 	bl	80042a8 <xTimerGenericCommand>
 8004398:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d113      	bne.n	80043c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	60fb      	str	r3, [r7, #12]
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	6978      	ldr	r0, [r7, #20]
 80043ce:	4798      	blx	r3
}
 80043d0:	bf00      	nop
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20000d4c 	.word	0x20000d4c

080043dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043e4:	f107 0308 	add.w	r3, r7, #8
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 f857 	bl	800449c <prvGetNextExpireTime>
 80043ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4619      	mov	r1, r3
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f803 	bl	8004400 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80043fa:	f000 f8d5 	bl	80045a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043fe:	e7f1      	b.n	80043e4 <prvTimerTask+0x8>

08004400 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800440a:	f7ff f98d 	bl	8003728 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800440e:	f107 0308 	add.w	r3, r7, #8
 8004412:	4618      	mov	r0, r3
 8004414:	f000 f866 	bl	80044e4 <prvSampleTimeNow>
 8004418:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d130      	bne.n	8004482 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <prvProcessTimerOrBlockTask+0x3c>
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	429a      	cmp	r2, r3
 800442c:	d806      	bhi.n	800443c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800442e:	f7ff f989 	bl	8003744 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004432:	68f9      	ldr	r1, [r7, #12]
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff ff85 	bl	8004344 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800443a:	e024      	b.n	8004486 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004442:	4b13      	ldr	r3, [pc, #76]	; (8004490 <prvProcessTimerOrBlockTask+0x90>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <prvProcessTimerOrBlockTask+0x50>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <prvProcessTimerOrBlockTask+0x52>
 8004450:	2300      	movs	r3, #0
 8004452:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004454:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <prvProcessTimerOrBlockTask+0x94>)
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	4619      	mov	r1, r3
 8004462:	f7fe fef1 	bl	8003248 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004466:	f7ff f96d 	bl	8003744 <xTaskResumeAll>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <prvProcessTimerOrBlockTask+0x98>)
 8004472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
}
 8004480:	e001      	b.n	8004486 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004482:	f7ff f95f 	bl	8003744 <xTaskResumeAll>
}
 8004486:	bf00      	nop
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	20000d50 	.word	0x20000d50
 8004494:	20000d54 	.word	0x20000d54
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <prvGetNextExpireTime+0x44>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <prvGetNextExpireTime+0x16>
 80044ae:	2201      	movs	r2, #1
 80044b0:	e000      	b.n	80044b4 <prvGetNextExpireTime+0x18>
 80044b2:	2200      	movs	r2, #0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d105      	bne.n	80044cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044c0:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <prvGetNextExpireTime+0x44>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e001      	b.n	80044d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80044d0:	68fb      	ldr	r3, [r7, #12]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000d4c 	.word	0x20000d4c

080044e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80044ec:	f7ff f9c8 	bl	8003880 <xTaskGetTickCount>
 80044f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <prvSampleTimeNow+0x3c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d205      	bcs.n	8004508 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80044fc:	f000 f936 	bl	800476c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	e002      	b.n	800450e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800450e:	4a04      	ldr	r2, [pc, #16]	; (8004520 <prvSampleTimeNow+0x3c>)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004514:	68fb      	ldr	r3, [r7, #12]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20000d5c 	.word	0x20000d5c

08004524 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	429a      	cmp	r2, r3
 8004548:	d812      	bhi.n	8004570 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	1ad2      	subs	r2, r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	429a      	cmp	r2, r3
 8004556:	d302      	bcc.n	800455e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004558:	2301      	movs	r3, #1
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	e01b      	b.n	8004596 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800455e:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <prvInsertTimerInActiveList+0x7c>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3304      	adds	r3, #4
 8004566:	4619      	mov	r1, r3
 8004568:	4610      	mov	r0, r2
 800456a:	f7fe f951 	bl	8002810 <vListInsert>
 800456e:	e012      	b.n	8004596 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d206      	bcs.n	8004586 <prvInsertTimerInActiveList+0x62>
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d302      	bcc.n	8004586 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004580:	2301      	movs	r3, #1
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	e007      	b.n	8004596 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004586:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <prvInsertTimerInActiveList+0x80>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3304      	adds	r3, #4
 800458e:	4619      	mov	r1, r3
 8004590:	4610      	mov	r0, r2
 8004592:	f7fe f93d 	bl	8002810 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004596:	697b      	ldr	r3, [r7, #20]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20000d50 	.word	0x20000d50
 80045a4:	20000d4c 	.word	0x20000d4c

080045a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08e      	sub	sp, #56	; 0x38
 80045ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045ae:	e0ca      	b.n	8004746 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	da18      	bge.n	80045e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80045b6:	1d3b      	adds	r3, r7, #4
 80045b8:	3304      	adds	r3, #4
 80045ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	61fb      	str	r3, [r7, #28]
}
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80045d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045de:	6850      	ldr	r0, [r2, #4]
 80045e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e2:	6892      	ldr	r2, [r2, #8]
 80045e4:	4611      	mov	r1, r2
 80045e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f2c0 80aa 	blt.w	8004744 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d004      	beq.n	8004606 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fe:	3304      	adds	r3, #4
 8004600:	4618      	mov	r0, r3
 8004602:	f7fe f93e 	bl	8002882 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004606:	463b      	mov	r3, r7
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff ff6b 	bl	80044e4 <prvSampleTimeNow>
 800460e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b09      	cmp	r3, #9
 8004614:	f200 8097 	bhi.w	8004746 <prvProcessReceivedCommands+0x19e>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <prvProcessReceivedCommands+0x78>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004649 	.word	0x08004649
 8004624:	08004649 	.word	0x08004649
 8004628:	08004649 	.word	0x08004649
 800462c:	080046bd 	.word	0x080046bd
 8004630:	080046d1 	.word	0x080046d1
 8004634:	0800471b 	.word	0x0800471b
 8004638:	08004649 	.word	0x08004649
 800463c:	08004649 	.word	0x08004649
 8004640:	080046bd 	.word	0x080046bd
 8004644:	080046d1 	.word	0x080046d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	b2da      	uxtb	r2, r3
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	18d1      	adds	r1, r2, r3
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004668:	f7ff ff5c 	bl	8004524 <prvInsertTimerInActiveList>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d069      	beq.n	8004746 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004678:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800467a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d05e      	beq.n	8004746 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	441a      	add	r2, r3
 8004690:	2300      	movs	r3, #0
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	2300      	movs	r3, #0
 8004696:	2100      	movs	r1, #0
 8004698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800469a:	f7ff fe05 	bl	80042a8 <xTimerGenericCommand>
 800469e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d14f      	bne.n	8004746 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	61bb      	str	r3, [r7, #24]
}
 80046b8:	bf00      	nop
 80046ba:	e7fe      	b.n	80046ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046c2:	f023 0301 	bic.w	r3, r3, #1
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80046ce:	e03a      	b.n	8004746 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10a      	bne.n	8004706 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	617b      	str	r3, [r7, #20]
}
 8004702:	bf00      	nop
 8004704:	e7fe      	b.n	8004704 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	18d1      	adds	r1, r2, r3
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004714:	f7ff ff06 	bl	8004524 <prvInsertTimerInActiveList>
					break;
 8004718:	e015      	b.n	8004746 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d103      	bne.n	8004730 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800472a:	f000 fbe1 	bl	8004ef0 <vPortFree>
 800472e:	e00a      	b.n	8004746 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004736:	f023 0301 	bic.w	r3, r3, #1
 800473a:	b2da      	uxtb	r2, r3
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004742:	e000      	b.n	8004746 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004744:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004746:	4b08      	ldr	r3, [pc, #32]	; (8004768 <prvProcessReceivedCommands+0x1c0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	1d39      	adds	r1, r7, #4
 800474c:	2200      	movs	r2, #0
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fb60 	bl	8002e14 <xQueueReceive>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	f47f af2a 	bne.w	80045b0 <prvProcessReceivedCommands+0x8>
	}
}
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	3730      	adds	r7, #48	; 0x30
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000d54 	.word	0x20000d54

0800476c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004772:	e048      	b.n	8004806 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004774:	4b2d      	ldr	r3, [pc, #180]	; (800482c <prvSwitchTimerLists+0xc0>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800477e:	4b2b      	ldr	r3, [pc, #172]	; (800482c <prvSwitchTimerLists+0xc0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3304      	adds	r3, #4
 800478c:	4618      	mov	r0, r3
 800478e:	f7fe f878 	bl	8002882 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d02e      	beq.n	8004806 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4413      	add	r3, r2
 80047b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d90e      	bls.n	80047d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047c6:	4b19      	ldr	r3, [pc, #100]	; (800482c <prvSwitchTimerLists+0xc0>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3304      	adds	r3, #4
 80047ce:	4619      	mov	r1, r3
 80047d0:	4610      	mov	r0, r2
 80047d2:	f7fe f81d 	bl	8002810 <vListInsert>
 80047d6:	e016      	b.n	8004806 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047d8:	2300      	movs	r3, #0
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	2300      	movs	r3, #0
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	2100      	movs	r1, #0
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7ff fd60 	bl	80042a8 <xTimerGenericCommand>
 80047e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	603b      	str	r3, [r7, #0]
}
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004806:	4b09      	ldr	r3, [pc, #36]	; (800482c <prvSwitchTimerLists+0xc0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1b1      	bne.n	8004774 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004810:	4b06      	ldr	r3, [pc, #24]	; (800482c <prvSwitchTimerLists+0xc0>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004816:	4b06      	ldr	r3, [pc, #24]	; (8004830 <prvSwitchTimerLists+0xc4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a04      	ldr	r2, [pc, #16]	; (800482c <prvSwitchTimerLists+0xc0>)
 800481c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800481e:	4a04      	ldr	r2, [pc, #16]	; (8004830 <prvSwitchTimerLists+0xc4>)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	6013      	str	r3, [r2, #0]
}
 8004824:	bf00      	nop
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000d4c 	.word	0x20000d4c
 8004830:	20000d50 	.word	0x20000d50

08004834 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800483a:	f000 f96b 	bl	8004b14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800483e:	4b15      	ldr	r3, [pc, #84]	; (8004894 <prvCheckForValidListAndQueue+0x60>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d120      	bne.n	8004888 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004846:	4814      	ldr	r0, [pc, #80]	; (8004898 <prvCheckForValidListAndQueue+0x64>)
 8004848:	f7fd ff91 	bl	800276e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800484c:	4813      	ldr	r0, [pc, #76]	; (800489c <prvCheckForValidListAndQueue+0x68>)
 800484e:	f7fd ff8e 	bl	800276e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004852:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <prvCheckForValidListAndQueue+0x6c>)
 8004854:	4a10      	ldr	r2, [pc, #64]	; (8004898 <prvCheckForValidListAndQueue+0x64>)
 8004856:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004858:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <prvCheckForValidListAndQueue+0x70>)
 800485a:	4a10      	ldr	r2, [pc, #64]	; (800489c <prvCheckForValidListAndQueue+0x68>)
 800485c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800485e:	2300      	movs	r3, #0
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <prvCheckForValidListAndQueue+0x74>)
 8004864:	4a11      	ldr	r2, [pc, #68]	; (80048ac <prvCheckForValidListAndQueue+0x78>)
 8004866:	2110      	movs	r1, #16
 8004868:	200a      	movs	r0, #10
 800486a:	f7fe f89d 	bl	80029a8 <xQueueGenericCreateStatic>
 800486e:	4603      	mov	r3, r0
 8004870:	4a08      	ldr	r2, [pc, #32]	; (8004894 <prvCheckForValidListAndQueue+0x60>)
 8004872:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004874:	4b07      	ldr	r3, [pc, #28]	; (8004894 <prvCheckForValidListAndQueue+0x60>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <prvCheckForValidListAndQueue+0x60>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	490b      	ldr	r1, [pc, #44]	; (80048b0 <prvCheckForValidListAndQueue+0x7c>)
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe fcb6 	bl	80031f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004888:	f000 f974 	bl	8004b74 <vPortExitCritical>
}
 800488c:	bf00      	nop
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000d54 	.word	0x20000d54
 8004898:	20000d24 	.word	0x20000d24
 800489c:	20000d38 	.word	0x20000d38
 80048a0:	20000d4c 	.word	0x20000d4c
 80048a4:	20000d50 	.word	0x20000d50
 80048a8:	20000e00 	.word	0x20000e00
 80048ac:	20000d60 	.word	0x20000d60
 80048b0:	08005c10 	.word	0x08005c10

080048b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3b04      	subs	r3, #4
 80048c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3b04      	subs	r3, #4
 80048d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f023 0201 	bic.w	r2, r3, #1
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3b04      	subs	r3, #4
 80048e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048e4:	4a0c      	ldr	r2, [pc, #48]	; (8004918 <pxPortInitialiseStack+0x64>)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3b14      	subs	r3, #20
 80048ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3b04      	subs	r3, #4
 80048fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f06f 0202 	mvn.w	r2, #2
 8004902:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3b20      	subs	r3, #32
 8004908:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800490a:	68fb      	ldr	r3, [r7, #12]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	0800491d 	.word	0x0800491d

0800491c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004926:	4b12      	ldr	r3, [pc, #72]	; (8004970 <prvTaskExitError+0x54>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800492e:	d00a      	beq.n	8004946 <prvTaskExitError+0x2a>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	60fb      	str	r3, [r7, #12]
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <prvTaskExitError+0x28>
	__asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	60bb      	str	r3, [r7, #8]
}
 8004958:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800495a:	bf00      	nop
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0fc      	beq.n	800495c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004962:	bf00      	nop
 8004964:	bf00      	nop
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	20000010 	.word	0x20000010
	...

08004980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004980:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <pxCurrentTCBConst2>)
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	6808      	ldr	r0, [r1, #0]
 8004986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498a:	f380 8809 	msr	PSP, r0
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f04f 0000 	mov.w	r0, #0
 8004996:	f380 8811 	msr	BASEPRI, r0
 800499a:	4770      	bx	lr
 800499c:	f3af 8000 	nop.w

080049a0 <pxCurrentTCBConst2>:
 80049a0:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop

080049a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049a8:	4808      	ldr	r0, [pc, #32]	; (80049cc <prvPortStartFirstTask+0x24>)
 80049aa:	6800      	ldr	r0, [r0, #0]
 80049ac:	6800      	ldr	r0, [r0, #0]
 80049ae:	f380 8808 	msr	MSP, r0
 80049b2:	f04f 0000 	mov.w	r0, #0
 80049b6:	f380 8814 	msr	CONTROL, r0
 80049ba:	b662      	cpsie	i
 80049bc:	b661      	cpsie	f
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	df00      	svc	0
 80049c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049ca:	bf00      	nop
 80049cc:	e000ed08 	.word	0xe000ed08

080049d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049d6:	4b46      	ldr	r3, [pc, #280]	; (8004af0 <xPortStartScheduler+0x120>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a46      	ldr	r2, [pc, #280]	; (8004af4 <xPortStartScheduler+0x124>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d10a      	bne.n	80049f6 <xPortStartScheduler+0x26>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	613b      	str	r3, [r7, #16]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049f6:	4b3e      	ldr	r3, [pc, #248]	; (8004af0 <xPortStartScheduler+0x120>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a3f      	ldr	r2, [pc, #252]	; (8004af8 <xPortStartScheduler+0x128>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d10a      	bne.n	8004a16 <xPortStartScheduler+0x46>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	60fb      	str	r3, [r7, #12]
}
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a16:	4b39      	ldr	r3, [pc, #228]	; (8004afc <xPortStartScheduler+0x12c>)
 8004a18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	22ff      	movs	r2, #255	; 0xff
 8004a26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	4b31      	ldr	r3, [pc, #196]	; (8004b00 <xPortStartScheduler+0x130>)
 8004a3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a3e:	4b31      	ldr	r3, [pc, #196]	; (8004b04 <xPortStartScheduler+0x134>)
 8004a40:	2207      	movs	r2, #7
 8004a42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a44:	e009      	b.n	8004a5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004a46:	4b2f      	ldr	r3, [pc, #188]	; (8004b04 <xPortStartScheduler+0x134>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	4a2d      	ldr	r2, [pc, #180]	; (8004b04 <xPortStartScheduler+0x134>)
 8004a4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a62:	2b80      	cmp	r3, #128	; 0x80
 8004a64:	d0ef      	beq.n	8004a46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a66:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <xPortStartScheduler+0x134>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f1c3 0307 	rsb	r3, r3, #7
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d00a      	beq.n	8004a88 <xPortStartScheduler+0xb8>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	60bb      	str	r3, [r7, #8]
}
 8004a84:	bf00      	nop
 8004a86:	e7fe      	b.n	8004a86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a88:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <xPortStartScheduler+0x134>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <xPortStartScheduler+0x134>)
 8004a90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a92:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <xPortStartScheduler+0x134>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a9a:	4a1a      	ldr	r2, [pc, #104]	; (8004b04 <xPortStartScheduler+0x134>)
 8004a9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004aa6:	4b18      	ldr	r3, [pc, #96]	; (8004b08 <xPortStartScheduler+0x138>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a17      	ldr	r2, [pc, #92]	; (8004b08 <xPortStartScheduler+0x138>)
 8004aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ab2:	4b15      	ldr	r3, [pc, #84]	; (8004b08 <xPortStartScheduler+0x138>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a14      	ldr	r2, [pc, #80]	; (8004b08 <xPortStartScheduler+0x138>)
 8004ab8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004abc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004abe:	f000 f8dd 	bl	8004c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ac2:	4b12      	ldr	r3, [pc, #72]	; (8004b0c <xPortStartScheduler+0x13c>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ac8:	f000 f8fc 	bl	8004cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004acc:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <xPortStartScheduler+0x140>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a0f      	ldr	r2, [pc, #60]	; (8004b10 <xPortStartScheduler+0x140>)
 8004ad2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ad6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ad8:	f7ff ff66 	bl	80049a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004adc:	f7fe ff9a 	bl	8003a14 <vTaskSwitchContext>
	prvTaskExitError();
 8004ae0:	f7ff ff1c 	bl	800491c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	e000ed00 	.word	0xe000ed00
 8004af4:	410fc271 	.word	0x410fc271
 8004af8:	410fc270 	.word	0x410fc270
 8004afc:	e000e400 	.word	0xe000e400
 8004b00:	20000e50 	.word	0x20000e50
 8004b04:	20000e54 	.word	0x20000e54
 8004b08:	e000ed20 	.word	0xe000ed20
 8004b0c:	20000010 	.word	0x20000010
 8004b10:	e000ef34 	.word	0xe000ef34

08004b14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	607b      	str	r3, [r7, #4]
}
 8004b2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <vPortEnterCritical+0x58>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	4a0d      	ldr	r2, [pc, #52]	; (8004b6c <vPortEnterCritical+0x58>)
 8004b36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <vPortEnterCritical+0x58>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d10f      	bne.n	8004b60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <vPortEnterCritical+0x5c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	603b      	str	r3, [r7, #0]
}
 8004b5c:	bf00      	nop
 8004b5e:	e7fe      	b.n	8004b5e <vPortEnterCritical+0x4a>
	}
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	20000010 	.word	0x20000010
 8004b70:	e000ed04 	.word	0xe000ed04

08004b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <vPortExitCritical+0x50>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10a      	bne.n	8004b98 <vPortExitCritical+0x24>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	607b      	str	r3, [r7, #4]
}
 8004b94:	bf00      	nop
 8004b96:	e7fe      	b.n	8004b96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <vPortExitCritical+0x50>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	4a09      	ldr	r2, [pc, #36]	; (8004bc4 <vPortExitCritical+0x50>)
 8004ba0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <vPortExitCritical+0x50>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d105      	bne.n	8004bb6 <vPortExitCritical+0x42>
 8004baa:	2300      	movs	r3, #0
 8004bac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	f383 8811 	msr	BASEPRI, r3
}
 8004bb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000010 	.word	0x20000010
	...

08004bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004bd0:	f3ef 8009 	mrs	r0, PSP
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <pxCurrentTCBConst>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	f01e 0f10 	tst.w	lr, #16
 8004be0:	bf08      	it	eq
 8004be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bea:	6010      	str	r0, [r2, #0]
 8004bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bf4:	f380 8811 	msr	BASEPRI, r0
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f7fe ff08 	bl	8003a14 <vTaskSwitchContext>
 8004c04:	f04f 0000 	mov.w	r0, #0
 8004c08:	f380 8811 	msr	BASEPRI, r0
 8004c0c:	bc09      	pop	{r0, r3}
 8004c0e:	6819      	ldr	r1, [r3, #0]
 8004c10:	6808      	ldr	r0, [r1, #0]
 8004c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c16:	f01e 0f10 	tst.w	lr, #16
 8004c1a:	bf08      	it	eq
 8004c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c20:	f380 8809 	msr	PSP, r0
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	f3af 8000 	nop.w

08004c30 <pxCurrentTCBConst>:
 8004c30:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop

08004c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	607b      	str	r3, [r7, #4]
}
 8004c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c52:	f7fe fe25 	bl	80038a0 <xTaskIncrementTick>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c5c:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <xPortSysTickHandler+0x40>)
 8004c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	2300      	movs	r3, #0
 8004c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f383 8811 	msr	BASEPRI, r3
}
 8004c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	e000ed04 	.word	0xe000ed04

08004c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <vPortSetupTimerInterrupt+0x34>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c86:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <vPortSetupTimerInterrupt+0x38>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <vPortSetupTimerInterrupt+0x3c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <vPortSetupTimerInterrupt+0x40>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	099b      	lsrs	r3, r3, #6
 8004c98:	4a09      	ldr	r2, [pc, #36]	; (8004cc0 <vPortSetupTimerInterrupt+0x44>)
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c9e:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <vPortSetupTimerInterrupt+0x34>)
 8004ca0:	2207      	movs	r2, #7
 8004ca2:	601a      	str	r2, [r3, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	e000e010 	.word	0xe000e010
 8004cb4:	e000e018 	.word	0xe000e018
 8004cb8:	20000004 	.word	0x20000004
 8004cbc:	10624dd3 	.word	0x10624dd3
 8004cc0:	e000e014 	.word	0xe000e014

08004cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004cd4 <vPortEnableVFP+0x10>
 8004cc8:	6801      	ldr	r1, [r0, #0]
 8004cca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cce:	6001      	str	r1, [r0, #0]
 8004cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004cd2:	bf00      	nop
 8004cd4:	e000ed88 	.word	0xe000ed88

08004cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cde:	f3ef 8305 	mrs	r3, IPSR
 8004ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b0f      	cmp	r3, #15
 8004ce8:	d914      	bls.n	8004d14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004cea:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <vPortValidateInterruptPriority+0x70>)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004cf4:	4b15      	ldr	r3, [pc, #84]	; (8004d4c <vPortValidateInterruptPriority+0x74>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	7afa      	ldrb	r2, [r7, #11]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d20a      	bcs.n	8004d14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	607b      	str	r3, [r7, #4]
}
 8004d10:	bf00      	nop
 8004d12:	e7fe      	b.n	8004d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d14:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <vPortValidateInterruptPriority+0x78>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <vPortValidateInterruptPriority+0x7c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d90a      	bls.n	8004d3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	603b      	str	r3, [r7, #0]
}
 8004d36:	bf00      	nop
 8004d38:	e7fe      	b.n	8004d38 <vPortValidateInterruptPriority+0x60>
	}
 8004d3a:	bf00      	nop
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	e000e3f0 	.word	0xe000e3f0
 8004d4c:	20000e50 	.word	0x20000e50
 8004d50:	e000ed0c 	.word	0xe000ed0c
 8004d54:	20000e54 	.word	0x20000e54

08004d58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08a      	sub	sp, #40	; 0x28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d64:	f7fe fce0 	bl	8003728 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d68:	4b5b      	ldr	r3, [pc, #364]	; (8004ed8 <pvPortMalloc+0x180>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d70:	f000 f920 	bl	8004fb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d74:	4b59      	ldr	r3, [pc, #356]	; (8004edc <pvPortMalloc+0x184>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f040 8093 	bne.w	8004ea8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01d      	beq.n	8004dc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d88:	2208      	movs	r2, #8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d014      	beq.n	8004dc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f023 0307 	bic.w	r3, r3, #7
 8004da0:	3308      	adds	r3, #8
 8004da2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <pvPortMalloc+0x6c>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	617b      	str	r3, [r7, #20]
}
 8004dc0:	bf00      	nop
 8004dc2:	e7fe      	b.n	8004dc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d06e      	beq.n	8004ea8 <pvPortMalloc+0x150>
 8004dca:	4b45      	ldr	r3, [pc, #276]	; (8004ee0 <pvPortMalloc+0x188>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d869      	bhi.n	8004ea8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004dd4:	4b43      	ldr	r3, [pc, #268]	; (8004ee4 <pvPortMalloc+0x18c>)
 8004dd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004dd8:	4b42      	ldr	r3, [pc, #264]	; (8004ee4 <pvPortMalloc+0x18c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dde:	e004      	b.n	8004dea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d903      	bls.n	8004dfc <pvPortMalloc+0xa4>
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f1      	bne.n	8004de0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004dfc:	4b36      	ldr	r3, [pc, #216]	; (8004ed8 <pvPortMalloc+0x180>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d050      	beq.n	8004ea8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2208      	movs	r2, #8
 8004e0c:	4413      	add	r3, r2
 8004e0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	1ad2      	subs	r2, r2, r3
 8004e20:	2308      	movs	r3, #8
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d91f      	bls.n	8004e68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <pvPortMalloc+0xf8>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	613b      	str	r3, [r7, #16]
}
 8004e4c:	bf00      	nop
 8004e4e:	e7fe      	b.n	8004e4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	1ad2      	subs	r2, r2, r3
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e62:	69b8      	ldr	r0, [r7, #24]
 8004e64:	f000 f908 	bl	8005078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e68:	4b1d      	ldr	r3, [pc, #116]	; (8004ee0 <pvPortMalloc+0x188>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <pvPortMalloc+0x188>)
 8004e74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e76:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <pvPortMalloc+0x188>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ee8 <pvPortMalloc+0x190>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d203      	bcs.n	8004e8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e82:	4b17      	ldr	r3, [pc, #92]	; (8004ee0 <pvPortMalloc+0x188>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <pvPortMalloc+0x190>)
 8004e88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	4b13      	ldr	r3, [pc, #76]	; (8004edc <pvPortMalloc+0x184>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	431a      	orrs	r2, r3
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e9e:	4b13      	ldr	r3, [pc, #76]	; (8004eec <pvPortMalloc+0x194>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	4a11      	ldr	r2, [pc, #68]	; (8004eec <pvPortMalloc+0x194>)
 8004ea6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ea8:	f7fe fc4c 	bl	8003744 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <pvPortMalloc+0x174>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	60fb      	str	r3, [r7, #12]
}
 8004ec8:	bf00      	nop
 8004eca:	e7fe      	b.n	8004eca <pvPortMalloc+0x172>
	return pvReturn;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3728      	adds	r7, #40	; 0x28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20004a60 	.word	0x20004a60
 8004edc:	20004a74 	.word	0x20004a74
 8004ee0:	20004a64 	.word	0x20004a64
 8004ee4:	20004a58 	.word	0x20004a58
 8004ee8:	20004a68 	.word	0x20004a68
 8004eec:	20004a6c 	.word	0x20004a6c

08004ef0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d04d      	beq.n	8004f9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f02:	2308      	movs	r3, #8
 8004f04:	425b      	negs	r3, r3
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4413      	add	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <vPortFree+0xb8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10a      	bne.n	8004f34 <vPortFree+0x44>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	60fb      	str	r3, [r7, #12]
}
 8004f30:	bf00      	nop
 8004f32:	e7fe      	b.n	8004f32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <vPortFree+0x62>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	60bb      	str	r3, [r7, #8]
}
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <vPortFree+0xb8>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01e      	beq.n	8004f9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d11a      	bne.n	8004f9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <vPortFree+0xb8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	43db      	mvns	r3, r3
 8004f72:	401a      	ands	r2, r3
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f78:	f7fe fbd6 	bl	8003728 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <vPortFree+0xbc>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4413      	add	r3, r2
 8004f86:	4a09      	ldr	r2, [pc, #36]	; (8004fac <vPortFree+0xbc>)
 8004f88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f8a:	6938      	ldr	r0, [r7, #16]
 8004f8c:	f000 f874 	bl	8005078 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f90:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <vPortFree+0xc0>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3301      	adds	r3, #1
 8004f96:	4a06      	ldr	r2, [pc, #24]	; (8004fb0 <vPortFree+0xc0>)
 8004f98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f9a:	f7fe fbd3 	bl	8003744 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f9e:	bf00      	nop
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20004a74 	.word	0x20004a74
 8004fac:	20004a64 	.word	0x20004a64
 8004fb0:	20004a70 	.word	0x20004a70

08004fb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004fbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fc0:	4b27      	ldr	r3, [pc, #156]	; (8005060 <prvHeapInit+0xac>)
 8004fc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00c      	beq.n	8004fe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3307      	adds	r3, #7
 8004fd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0307 	bic.w	r3, r3, #7
 8004fda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	4a1f      	ldr	r2, [pc, #124]	; (8005060 <prvHeapInit+0xac>)
 8004fe4:	4413      	add	r3, r2
 8004fe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fec:	4a1d      	ldr	r2, [pc, #116]	; (8005064 <prvHeapInit+0xb0>)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ff2:	4b1c      	ldr	r3, [pc, #112]	; (8005064 <prvHeapInit+0xb0>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005000:	2208      	movs	r2, #8
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0307 	bic.w	r3, r3, #7
 800500e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4a15      	ldr	r2, [pc, #84]	; (8005068 <prvHeapInit+0xb4>)
 8005014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <prvHeapInit+0xb4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2200      	movs	r2, #0
 800501c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800501e:	4b12      	ldr	r3, [pc, #72]	; (8005068 <prvHeapInit+0xb4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	1ad2      	subs	r2, r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005034:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <prvHeapInit+0xb4>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	4a0a      	ldr	r2, [pc, #40]	; (800506c <prvHeapInit+0xb8>)
 8005042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	4a09      	ldr	r2, [pc, #36]	; (8005070 <prvHeapInit+0xbc>)
 800504a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800504c:	4b09      	ldr	r3, [pc, #36]	; (8005074 <prvHeapInit+0xc0>)
 800504e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005052:	601a      	str	r2, [r3, #0]
}
 8005054:	bf00      	nop
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	20000e58 	.word	0x20000e58
 8005064:	20004a58 	.word	0x20004a58
 8005068:	20004a60 	.word	0x20004a60
 800506c:	20004a68 	.word	0x20004a68
 8005070:	20004a64 	.word	0x20004a64
 8005074:	20004a74 	.word	0x20004a74

08005078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005080:	4b28      	ldr	r3, [pc, #160]	; (8005124 <prvInsertBlockIntoFreeList+0xac>)
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e002      	b.n	800508c <prvInsertBlockIntoFreeList+0x14>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	429a      	cmp	r2, r3
 8005094:	d8f7      	bhi.n	8005086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4413      	add	r3, r2
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d108      	bne.n	80050ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	441a      	add	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	441a      	add	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d118      	bne.n	8005100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b15      	ldr	r3, [pc, #84]	; (8005128 <prvInsertBlockIntoFreeList+0xb0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d00d      	beq.n	80050f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	441a      	add	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	e008      	b.n	8005108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050f6:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <prvInsertBlockIntoFreeList+0xb0>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e003      	b.n	8005108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	429a      	cmp	r2, r3
 800510e:	d002      	beq.n	8005116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20004a58 	.word	0x20004a58
 8005128:	20004a60 	.word	0x20004a60

0800512c <__errno>:
 800512c:	4b01      	ldr	r3, [pc, #4]	; (8005134 <__errno+0x8>)
 800512e:	6818      	ldr	r0, [r3, #0]
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20000014 	.word	0x20000014

08005138 <__libc_init_array>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	4d0d      	ldr	r5, [pc, #52]	; (8005170 <__libc_init_array+0x38>)
 800513c:	4c0d      	ldr	r4, [pc, #52]	; (8005174 <__libc_init_array+0x3c>)
 800513e:	1b64      	subs	r4, r4, r5
 8005140:	10a4      	asrs	r4, r4, #2
 8005142:	2600      	movs	r6, #0
 8005144:	42a6      	cmp	r6, r4
 8005146:	d109      	bne.n	800515c <__libc_init_array+0x24>
 8005148:	4d0b      	ldr	r5, [pc, #44]	; (8005178 <__libc_init_array+0x40>)
 800514a:	4c0c      	ldr	r4, [pc, #48]	; (800517c <__libc_init_array+0x44>)
 800514c:	f000 fd2c 	bl	8005ba8 <_init>
 8005150:	1b64      	subs	r4, r4, r5
 8005152:	10a4      	asrs	r4, r4, #2
 8005154:	2600      	movs	r6, #0
 8005156:	42a6      	cmp	r6, r4
 8005158:	d105      	bne.n	8005166 <__libc_init_array+0x2e>
 800515a:	bd70      	pop	{r4, r5, r6, pc}
 800515c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005160:	4798      	blx	r3
 8005162:	3601      	adds	r6, #1
 8005164:	e7ee      	b.n	8005144 <__libc_init_array+0xc>
 8005166:	f855 3b04 	ldr.w	r3, [r5], #4
 800516a:	4798      	blx	r3
 800516c:	3601      	adds	r6, #1
 800516e:	e7f2      	b.n	8005156 <__libc_init_array+0x1e>
 8005170:	08005c9c 	.word	0x08005c9c
 8005174:	08005c9c 	.word	0x08005c9c
 8005178:	08005c9c 	.word	0x08005c9c
 800517c:	08005ca0 	.word	0x08005ca0

08005180 <memcpy>:
 8005180:	440a      	add	r2, r1
 8005182:	4291      	cmp	r1, r2
 8005184:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005188:	d100      	bne.n	800518c <memcpy+0xc>
 800518a:	4770      	bx	lr
 800518c:	b510      	push	{r4, lr}
 800518e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005196:	4291      	cmp	r1, r2
 8005198:	d1f9      	bne.n	800518e <memcpy+0xe>
 800519a:	bd10      	pop	{r4, pc}

0800519c <memset>:
 800519c:	4402      	add	r2, r0
 800519e:	4603      	mov	r3, r0
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d100      	bne.n	80051a6 <memset+0xa>
 80051a4:	4770      	bx	lr
 80051a6:	f803 1b01 	strb.w	r1, [r3], #1
 80051aa:	e7f9      	b.n	80051a0 <memset+0x4>

080051ac <_puts_r>:
 80051ac:	b570      	push	{r4, r5, r6, lr}
 80051ae:	460e      	mov	r6, r1
 80051b0:	4605      	mov	r5, r0
 80051b2:	b118      	cbz	r0, 80051bc <_puts_r+0x10>
 80051b4:	6983      	ldr	r3, [r0, #24]
 80051b6:	b90b      	cbnz	r3, 80051bc <_puts_r+0x10>
 80051b8:	f000 fa48 	bl	800564c <__sinit>
 80051bc:	69ab      	ldr	r3, [r5, #24]
 80051be:	68ac      	ldr	r4, [r5, #8]
 80051c0:	b913      	cbnz	r3, 80051c8 <_puts_r+0x1c>
 80051c2:	4628      	mov	r0, r5
 80051c4:	f000 fa42 	bl	800564c <__sinit>
 80051c8:	4b2c      	ldr	r3, [pc, #176]	; (800527c <_puts_r+0xd0>)
 80051ca:	429c      	cmp	r4, r3
 80051cc:	d120      	bne.n	8005210 <_puts_r+0x64>
 80051ce:	686c      	ldr	r4, [r5, #4]
 80051d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051d2:	07db      	lsls	r3, r3, #31
 80051d4:	d405      	bmi.n	80051e2 <_puts_r+0x36>
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	0598      	lsls	r0, r3, #22
 80051da:	d402      	bmi.n	80051e2 <_puts_r+0x36>
 80051dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051de:	f000 fad3 	bl	8005788 <__retarget_lock_acquire_recursive>
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	0719      	lsls	r1, r3, #28
 80051e6:	d51d      	bpl.n	8005224 <_puts_r+0x78>
 80051e8:	6923      	ldr	r3, [r4, #16]
 80051ea:	b1db      	cbz	r3, 8005224 <_puts_r+0x78>
 80051ec:	3e01      	subs	r6, #1
 80051ee:	68a3      	ldr	r3, [r4, #8]
 80051f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051f4:	3b01      	subs	r3, #1
 80051f6:	60a3      	str	r3, [r4, #8]
 80051f8:	bb39      	cbnz	r1, 800524a <_puts_r+0x9e>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	da38      	bge.n	8005270 <_puts_r+0xc4>
 80051fe:	4622      	mov	r2, r4
 8005200:	210a      	movs	r1, #10
 8005202:	4628      	mov	r0, r5
 8005204:	f000 f848 	bl	8005298 <__swbuf_r>
 8005208:	3001      	adds	r0, #1
 800520a:	d011      	beq.n	8005230 <_puts_r+0x84>
 800520c:	250a      	movs	r5, #10
 800520e:	e011      	b.n	8005234 <_puts_r+0x88>
 8005210:	4b1b      	ldr	r3, [pc, #108]	; (8005280 <_puts_r+0xd4>)
 8005212:	429c      	cmp	r4, r3
 8005214:	d101      	bne.n	800521a <_puts_r+0x6e>
 8005216:	68ac      	ldr	r4, [r5, #8]
 8005218:	e7da      	b.n	80051d0 <_puts_r+0x24>
 800521a:	4b1a      	ldr	r3, [pc, #104]	; (8005284 <_puts_r+0xd8>)
 800521c:	429c      	cmp	r4, r3
 800521e:	bf08      	it	eq
 8005220:	68ec      	ldreq	r4, [r5, #12]
 8005222:	e7d5      	b.n	80051d0 <_puts_r+0x24>
 8005224:	4621      	mov	r1, r4
 8005226:	4628      	mov	r0, r5
 8005228:	f000 f888 	bl	800533c <__swsetup_r>
 800522c:	2800      	cmp	r0, #0
 800522e:	d0dd      	beq.n	80051ec <_puts_r+0x40>
 8005230:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005234:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005236:	07da      	lsls	r2, r3, #31
 8005238:	d405      	bmi.n	8005246 <_puts_r+0x9a>
 800523a:	89a3      	ldrh	r3, [r4, #12]
 800523c:	059b      	lsls	r3, r3, #22
 800523e:	d402      	bmi.n	8005246 <_puts_r+0x9a>
 8005240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005242:	f000 faa2 	bl	800578a <__retarget_lock_release_recursive>
 8005246:	4628      	mov	r0, r5
 8005248:	bd70      	pop	{r4, r5, r6, pc}
 800524a:	2b00      	cmp	r3, #0
 800524c:	da04      	bge.n	8005258 <_puts_r+0xac>
 800524e:	69a2      	ldr	r2, [r4, #24]
 8005250:	429a      	cmp	r2, r3
 8005252:	dc06      	bgt.n	8005262 <_puts_r+0xb6>
 8005254:	290a      	cmp	r1, #10
 8005256:	d004      	beq.n	8005262 <_puts_r+0xb6>
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	6022      	str	r2, [r4, #0]
 800525e:	7019      	strb	r1, [r3, #0]
 8005260:	e7c5      	b.n	80051ee <_puts_r+0x42>
 8005262:	4622      	mov	r2, r4
 8005264:	4628      	mov	r0, r5
 8005266:	f000 f817 	bl	8005298 <__swbuf_r>
 800526a:	3001      	adds	r0, #1
 800526c:	d1bf      	bne.n	80051ee <_puts_r+0x42>
 800526e:	e7df      	b.n	8005230 <_puts_r+0x84>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	250a      	movs	r5, #10
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	6022      	str	r2, [r4, #0]
 8005278:	701d      	strb	r5, [r3, #0]
 800527a:	e7db      	b.n	8005234 <_puts_r+0x88>
 800527c:	08005c54 	.word	0x08005c54
 8005280:	08005c74 	.word	0x08005c74
 8005284:	08005c34 	.word	0x08005c34

08005288 <puts>:
 8005288:	4b02      	ldr	r3, [pc, #8]	; (8005294 <puts+0xc>)
 800528a:	4601      	mov	r1, r0
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	f7ff bf8d 	b.w	80051ac <_puts_r>
 8005292:	bf00      	nop
 8005294:	20000014 	.word	0x20000014

08005298 <__swbuf_r>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	460e      	mov	r6, r1
 800529c:	4614      	mov	r4, r2
 800529e:	4605      	mov	r5, r0
 80052a0:	b118      	cbz	r0, 80052aa <__swbuf_r+0x12>
 80052a2:	6983      	ldr	r3, [r0, #24]
 80052a4:	b90b      	cbnz	r3, 80052aa <__swbuf_r+0x12>
 80052a6:	f000 f9d1 	bl	800564c <__sinit>
 80052aa:	4b21      	ldr	r3, [pc, #132]	; (8005330 <__swbuf_r+0x98>)
 80052ac:	429c      	cmp	r4, r3
 80052ae:	d12b      	bne.n	8005308 <__swbuf_r+0x70>
 80052b0:	686c      	ldr	r4, [r5, #4]
 80052b2:	69a3      	ldr	r3, [r4, #24]
 80052b4:	60a3      	str	r3, [r4, #8]
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	071a      	lsls	r2, r3, #28
 80052ba:	d52f      	bpl.n	800531c <__swbuf_r+0x84>
 80052bc:	6923      	ldr	r3, [r4, #16]
 80052be:	b36b      	cbz	r3, 800531c <__swbuf_r+0x84>
 80052c0:	6923      	ldr	r3, [r4, #16]
 80052c2:	6820      	ldr	r0, [r4, #0]
 80052c4:	1ac0      	subs	r0, r0, r3
 80052c6:	6963      	ldr	r3, [r4, #20]
 80052c8:	b2f6      	uxtb	r6, r6
 80052ca:	4283      	cmp	r3, r0
 80052cc:	4637      	mov	r7, r6
 80052ce:	dc04      	bgt.n	80052da <__swbuf_r+0x42>
 80052d0:	4621      	mov	r1, r4
 80052d2:	4628      	mov	r0, r5
 80052d4:	f000 f926 	bl	8005524 <_fflush_r>
 80052d8:	bb30      	cbnz	r0, 8005328 <__swbuf_r+0x90>
 80052da:	68a3      	ldr	r3, [r4, #8]
 80052dc:	3b01      	subs	r3, #1
 80052de:	60a3      	str	r3, [r4, #8]
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	6022      	str	r2, [r4, #0]
 80052e6:	701e      	strb	r6, [r3, #0]
 80052e8:	6963      	ldr	r3, [r4, #20]
 80052ea:	3001      	adds	r0, #1
 80052ec:	4283      	cmp	r3, r0
 80052ee:	d004      	beq.n	80052fa <__swbuf_r+0x62>
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	07db      	lsls	r3, r3, #31
 80052f4:	d506      	bpl.n	8005304 <__swbuf_r+0x6c>
 80052f6:	2e0a      	cmp	r6, #10
 80052f8:	d104      	bne.n	8005304 <__swbuf_r+0x6c>
 80052fa:	4621      	mov	r1, r4
 80052fc:	4628      	mov	r0, r5
 80052fe:	f000 f911 	bl	8005524 <_fflush_r>
 8005302:	b988      	cbnz	r0, 8005328 <__swbuf_r+0x90>
 8005304:	4638      	mov	r0, r7
 8005306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <__swbuf_r+0x9c>)
 800530a:	429c      	cmp	r4, r3
 800530c:	d101      	bne.n	8005312 <__swbuf_r+0x7a>
 800530e:	68ac      	ldr	r4, [r5, #8]
 8005310:	e7cf      	b.n	80052b2 <__swbuf_r+0x1a>
 8005312:	4b09      	ldr	r3, [pc, #36]	; (8005338 <__swbuf_r+0xa0>)
 8005314:	429c      	cmp	r4, r3
 8005316:	bf08      	it	eq
 8005318:	68ec      	ldreq	r4, [r5, #12]
 800531a:	e7ca      	b.n	80052b2 <__swbuf_r+0x1a>
 800531c:	4621      	mov	r1, r4
 800531e:	4628      	mov	r0, r5
 8005320:	f000 f80c 	bl	800533c <__swsetup_r>
 8005324:	2800      	cmp	r0, #0
 8005326:	d0cb      	beq.n	80052c0 <__swbuf_r+0x28>
 8005328:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800532c:	e7ea      	b.n	8005304 <__swbuf_r+0x6c>
 800532e:	bf00      	nop
 8005330:	08005c54 	.word	0x08005c54
 8005334:	08005c74 	.word	0x08005c74
 8005338:	08005c34 	.word	0x08005c34

0800533c <__swsetup_r>:
 800533c:	4b32      	ldr	r3, [pc, #200]	; (8005408 <__swsetup_r+0xcc>)
 800533e:	b570      	push	{r4, r5, r6, lr}
 8005340:	681d      	ldr	r5, [r3, #0]
 8005342:	4606      	mov	r6, r0
 8005344:	460c      	mov	r4, r1
 8005346:	b125      	cbz	r5, 8005352 <__swsetup_r+0x16>
 8005348:	69ab      	ldr	r3, [r5, #24]
 800534a:	b913      	cbnz	r3, 8005352 <__swsetup_r+0x16>
 800534c:	4628      	mov	r0, r5
 800534e:	f000 f97d 	bl	800564c <__sinit>
 8005352:	4b2e      	ldr	r3, [pc, #184]	; (800540c <__swsetup_r+0xd0>)
 8005354:	429c      	cmp	r4, r3
 8005356:	d10f      	bne.n	8005378 <__swsetup_r+0x3c>
 8005358:	686c      	ldr	r4, [r5, #4]
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005360:	0719      	lsls	r1, r3, #28
 8005362:	d42c      	bmi.n	80053be <__swsetup_r+0x82>
 8005364:	06dd      	lsls	r5, r3, #27
 8005366:	d411      	bmi.n	800538c <__swsetup_r+0x50>
 8005368:	2309      	movs	r3, #9
 800536a:	6033      	str	r3, [r6, #0]
 800536c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005370:	81a3      	strh	r3, [r4, #12]
 8005372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005376:	e03e      	b.n	80053f6 <__swsetup_r+0xba>
 8005378:	4b25      	ldr	r3, [pc, #148]	; (8005410 <__swsetup_r+0xd4>)
 800537a:	429c      	cmp	r4, r3
 800537c:	d101      	bne.n	8005382 <__swsetup_r+0x46>
 800537e:	68ac      	ldr	r4, [r5, #8]
 8005380:	e7eb      	b.n	800535a <__swsetup_r+0x1e>
 8005382:	4b24      	ldr	r3, [pc, #144]	; (8005414 <__swsetup_r+0xd8>)
 8005384:	429c      	cmp	r4, r3
 8005386:	bf08      	it	eq
 8005388:	68ec      	ldreq	r4, [r5, #12]
 800538a:	e7e6      	b.n	800535a <__swsetup_r+0x1e>
 800538c:	0758      	lsls	r0, r3, #29
 800538e:	d512      	bpl.n	80053b6 <__swsetup_r+0x7a>
 8005390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005392:	b141      	cbz	r1, 80053a6 <__swsetup_r+0x6a>
 8005394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005398:	4299      	cmp	r1, r3
 800539a:	d002      	beq.n	80053a2 <__swsetup_r+0x66>
 800539c:	4630      	mov	r0, r6
 800539e:	f000 fa5b 	bl	8005858 <_free_r>
 80053a2:	2300      	movs	r3, #0
 80053a4:	6363      	str	r3, [r4, #52]	; 0x34
 80053a6:	89a3      	ldrh	r3, [r4, #12]
 80053a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053ac:	81a3      	strh	r3, [r4, #12]
 80053ae:	2300      	movs	r3, #0
 80053b0:	6063      	str	r3, [r4, #4]
 80053b2:	6923      	ldr	r3, [r4, #16]
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	89a3      	ldrh	r3, [r4, #12]
 80053b8:	f043 0308 	orr.w	r3, r3, #8
 80053bc:	81a3      	strh	r3, [r4, #12]
 80053be:	6923      	ldr	r3, [r4, #16]
 80053c0:	b94b      	cbnz	r3, 80053d6 <__swsetup_r+0x9a>
 80053c2:	89a3      	ldrh	r3, [r4, #12]
 80053c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053cc:	d003      	beq.n	80053d6 <__swsetup_r+0x9a>
 80053ce:	4621      	mov	r1, r4
 80053d0:	4630      	mov	r0, r6
 80053d2:	f000 fa01 	bl	80057d8 <__smakebuf_r>
 80053d6:	89a0      	ldrh	r0, [r4, #12]
 80053d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053dc:	f010 0301 	ands.w	r3, r0, #1
 80053e0:	d00a      	beq.n	80053f8 <__swsetup_r+0xbc>
 80053e2:	2300      	movs	r3, #0
 80053e4:	60a3      	str	r3, [r4, #8]
 80053e6:	6963      	ldr	r3, [r4, #20]
 80053e8:	425b      	negs	r3, r3
 80053ea:	61a3      	str	r3, [r4, #24]
 80053ec:	6923      	ldr	r3, [r4, #16]
 80053ee:	b943      	cbnz	r3, 8005402 <__swsetup_r+0xc6>
 80053f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053f4:	d1ba      	bne.n	800536c <__swsetup_r+0x30>
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	0781      	lsls	r1, r0, #30
 80053fa:	bf58      	it	pl
 80053fc:	6963      	ldrpl	r3, [r4, #20]
 80053fe:	60a3      	str	r3, [r4, #8]
 8005400:	e7f4      	b.n	80053ec <__swsetup_r+0xb0>
 8005402:	2000      	movs	r0, #0
 8005404:	e7f7      	b.n	80053f6 <__swsetup_r+0xba>
 8005406:	bf00      	nop
 8005408:	20000014 	.word	0x20000014
 800540c:	08005c54 	.word	0x08005c54
 8005410:	08005c74 	.word	0x08005c74
 8005414:	08005c34 	.word	0x08005c34

08005418 <__sflush_r>:
 8005418:	898a      	ldrh	r2, [r1, #12]
 800541a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800541e:	4605      	mov	r5, r0
 8005420:	0710      	lsls	r0, r2, #28
 8005422:	460c      	mov	r4, r1
 8005424:	d458      	bmi.n	80054d8 <__sflush_r+0xc0>
 8005426:	684b      	ldr	r3, [r1, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	dc05      	bgt.n	8005438 <__sflush_r+0x20>
 800542c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	dc02      	bgt.n	8005438 <__sflush_r+0x20>
 8005432:	2000      	movs	r0, #0
 8005434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800543a:	2e00      	cmp	r6, #0
 800543c:	d0f9      	beq.n	8005432 <__sflush_r+0x1a>
 800543e:	2300      	movs	r3, #0
 8005440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005444:	682f      	ldr	r7, [r5, #0]
 8005446:	602b      	str	r3, [r5, #0]
 8005448:	d032      	beq.n	80054b0 <__sflush_r+0x98>
 800544a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800544c:	89a3      	ldrh	r3, [r4, #12]
 800544e:	075a      	lsls	r2, r3, #29
 8005450:	d505      	bpl.n	800545e <__sflush_r+0x46>
 8005452:	6863      	ldr	r3, [r4, #4]
 8005454:	1ac0      	subs	r0, r0, r3
 8005456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005458:	b10b      	cbz	r3, 800545e <__sflush_r+0x46>
 800545a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800545c:	1ac0      	subs	r0, r0, r3
 800545e:	2300      	movs	r3, #0
 8005460:	4602      	mov	r2, r0
 8005462:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005464:	6a21      	ldr	r1, [r4, #32]
 8005466:	4628      	mov	r0, r5
 8005468:	47b0      	blx	r6
 800546a:	1c43      	adds	r3, r0, #1
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	d106      	bne.n	800547e <__sflush_r+0x66>
 8005470:	6829      	ldr	r1, [r5, #0]
 8005472:	291d      	cmp	r1, #29
 8005474:	d82c      	bhi.n	80054d0 <__sflush_r+0xb8>
 8005476:	4a2a      	ldr	r2, [pc, #168]	; (8005520 <__sflush_r+0x108>)
 8005478:	40ca      	lsrs	r2, r1
 800547a:	07d6      	lsls	r6, r2, #31
 800547c:	d528      	bpl.n	80054d0 <__sflush_r+0xb8>
 800547e:	2200      	movs	r2, #0
 8005480:	6062      	str	r2, [r4, #4]
 8005482:	04d9      	lsls	r1, r3, #19
 8005484:	6922      	ldr	r2, [r4, #16]
 8005486:	6022      	str	r2, [r4, #0]
 8005488:	d504      	bpl.n	8005494 <__sflush_r+0x7c>
 800548a:	1c42      	adds	r2, r0, #1
 800548c:	d101      	bne.n	8005492 <__sflush_r+0x7a>
 800548e:	682b      	ldr	r3, [r5, #0]
 8005490:	b903      	cbnz	r3, 8005494 <__sflush_r+0x7c>
 8005492:	6560      	str	r0, [r4, #84]	; 0x54
 8005494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005496:	602f      	str	r7, [r5, #0]
 8005498:	2900      	cmp	r1, #0
 800549a:	d0ca      	beq.n	8005432 <__sflush_r+0x1a>
 800549c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054a0:	4299      	cmp	r1, r3
 80054a2:	d002      	beq.n	80054aa <__sflush_r+0x92>
 80054a4:	4628      	mov	r0, r5
 80054a6:	f000 f9d7 	bl	8005858 <_free_r>
 80054aa:	2000      	movs	r0, #0
 80054ac:	6360      	str	r0, [r4, #52]	; 0x34
 80054ae:	e7c1      	b.n	8005434 <__sflush_r+0x1c>
 80054b0:	6a21      	ldr	r1, [r4, #32]
 80054b2:	2301      	movs	r3, #1
 80054b4:	4628      	mov	r0, r5
 80054b6:	47b0      	blx	r6
 80054b8:	1c41      	adds	r1, r0, #1
 80054ba:	d1c7      	bne.n	800544c <__sflush_r+0x34>
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0c4      	beq.n	800544c <__sflush_r+0x34>
 80054c2:	2b1d      	cmp	r3, #29
 80054c4:	d001      	beq.n	80054ca <__sflush_r+0xb2>
 80054c6:	2b16      	cmp	r3, #22
 80054c8:	d101      	bne.n	80054ce <__sflush_r+0xb6>
 80054ca:	602f      	str	r7, [r5, #0]
 80054cc:	e7b1      	b.n	8005432 <__sflush_r+0x1a>
 80054ce:	89a3      	ldrh	r3, [r4, #12]
 80054d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054d4:	81a3      	strh	r3, [r4, #12]
 80054d6:	e7ad      	b.n	8005434 <__sflush_r+0x1c>
 80054d8:	690f      	ldr	r7, [r1, #16]
 80054da:	2f00      	cmp	r7, #0
 80054dc:	d0a9      	beq.n	8005432 <__sflush_r+0x1a>
 80054de:	0793      	lsls	r3, r2, #30
 80054e0:	680e      	ldr	r6, [r1, #0]
 80054e2:	bf08      	it	eq
 80054e4:	694b      	ldreq	r3, [r1, #20]
 80054e6:	600f      	str	r7, [r1, #0]
 80054e8:	bf18      	it	ne
 80054ea:	2300      	movne	r3, #0
 80054ec:	eba6 0807 	sub.w	r8, r6, r7
 80054f0:	608b      	str	r3, [r1, #8]
 80054f2:	f1b8 0f00 	cmp.w	r8, #0
 80054f6:	dd9c      	ble.n	8005432 <__sflush_r+0x1a>
 80054f8:	6a21      	ldr	r1, [r4, #32]
 80054fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80054fc:	4643      	mov	r3, r8
 80054fe:	463a      	mov	r2, r7
 8005500:	4628      	mov	r0, r5
 8005502:	47b0      	blx	r6
 8005504:	2800      	cmp	r0, #0
 8005506:	dc06      	bgt.n	8005516 <__sflush_r+0xfe>
 8005508:	89a3      	ldrh	r3, [r4, #12]
 800550a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800550e:	81a3      	strh	r3, [r4, #12]
 8005510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005514:	e78e      	b.n	8005434 <__sflush_r+0x1c>
 8005516:	4407      	add	r7, r0
 8005518:	eba8 0800 	sub.w	r8, r8, r0
 800551c:	e7e9      	b.n	80054f2 <__sflush_r+0xda>
 800551e:	bf00      	nop
 8005520:	20400001 	.word	0x20400001

08005524 <_fflush_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	690b      	ldr	r3, [r1, #16]
 8005528:	4605      	mov	r5, r0
 800552a:	460c      	mov	r4, r1
 800552c:	b913      	cbnz	r3, 8005534 <_fflush_r+0x10>
 800552e:	2500      	movs	r5, #0
 8005530:	4628      	mov	r0, r5
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	b118      	cbz	r0, 800553e <_fflush_r+0x1a>
 8005536:	6983      	ldr	r3, [r0, #24]
 8005538:	b90b      	cbnz	r3, 800553e <_fflush_r+0x1a>
 800553a:	f000 f887 	bl	800564c <__sinit>
 800553e:	4b14      	ldr	r3, [pc, #80]	; (8005590 <_fflush_r+0x6c>)
 8005540:	429c      	cmp	r4, r3
 8005542:	d11b      	bne.n	800557c <_fflush_r+0x58>
 8005544:	686c      	ldr	r4, [r5, #4]
 8005546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0ef      	beq.n	800552e <_fflush_r+0xa>
 800554e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005550:	07d0      	lsls	r0, r2, #31
 8005552:	d404      	bmi.n	800555e <_fflush_r+0x3a>
 8005554:	0599      	lsls	r1, r3, #22
 8005556:	d402      	bmi.n	800555e <_fflush_r+0x3a>
 8005558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800555a:	f000 f915 	bl	8005788 <__retarget_lock_acquire_recursive>
 800555e:	4628      	mov	r0, r5
 8005560:	4621      	mov	r1, r4
 8005562:	f7ff ff59 	bl	8005418 <__sflush_r>
 8005566:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005568:	07da      	lsls	r2, r3, #31
 800556a:	4605      	mov	r5, r0
 800556c:	d4e0      	bmi.n	8005530 <_fflush_r+0xc>
 800556e:	89a3      	ldrh	r3, [r4, #12]
 8005570:	059b      	lsls	r3, r3, #22
 8005572:	d4dd      	bmi.n	8005530 <_fflush_r+0xc>
 8005574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005576:	f000 f908 	bl	800578a <__retarget_lock_release_recursive>
 800557a:	e7d9      	b.n	8005530 <_fflush_r+0xc>
 800557c:	4b05      	ldr	r3, [pc, #20]	; (8005594 <_fflush_r+0x70>)
 800557e:	429c      	cmp	r4, r3
 8005580:	d101      	bne.n	8005586 <_fflush_r+0x62>
 8005582:	68ac      	ldr	r4, [r5, #8]
 8005584:	e7df      	b.n	8005546 <_fflush_r+0x22>
 8005586:	4b04      	ldr	r3, [pc, #16]	; (8005598 <_fflush_r+0x74>)
 8005588:	429c      	cmp	r4, r3
 800558a:	bf08      	it	eq
 800558c:	68ec      	ldreq	r4, [r5, #12]
 800558e:	e7da      	b.n	8005546 <_fflush_r+0x22>
 8005590:	08005c54 	.word	0x08005c54
 8005594:	08005c74 	.word	0x08005c74
 8005598:	08005c34 	.word	0x08005c34

0800559c <std>:
 800559c:	2300      	movs	r3, #0
 800559e:	b510      	push	{r4, lr}
 80055a0:	4604      	mov	r4, r0
 80055a2:	e9c0 3300 	strd	r3, r3, [r0]
 80055a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055aa:	6083      	str	r3, [r0, #8]
 80055ac:	8181      	strh	r1, [r0, #12]
 80055ae:	6643      	str	r3, [r0, #100]	; 0x64
 80055b0:	81c2      	strh	r2, [r0, #14]
 80055b2:	6183      	str	r3, [r0, #24]
 80055b4:	4619      	mov	r1, r3
 80055b6:	2208      	movs	r2, #8
 80055b8:	305c      	adds	r0, #92	; 0x5c
 80055ba:	f7ff fdef 	bl	800519c <memset>
 80055be:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <std+0x38>)
 80055c0:	6263      	str	r3, [r4, #36]	; 0x24
 80055c2:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <std+0x3c>)
 80055c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80055c6:	4b05      	ldr	r3, [pc, #20]	; (80055dc <std+0x40>)
 80055c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055ca:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <std+0x44>)
 80055cc:	6224      	str	r4, [r4, #32]
 80055ce:	6323      	str	r3, [r4, #48]	; 0x30
 80055d0:	bd10      	pop	{r4, pc}
 80055d2:	bf00      	nop
 80055d4:	08005a39 	.word	0x08005a39
 80055d8:	08005a5b 	.word	0x08005a5b
 80055dc:	08005a93 	.word	0x08005a93
 80055e0:	08005ab7 	.word	0x08005ab7

080055e4 <_cleanup_r>:
 80055e4:	4901      	ldr	r1, [pc, #4]	; (80055ec <_cleanup_r+0x8>)
 80055e6:	f000 b8af 	b.w	8005748 <_fwalk_reent>
 80055ea:	bf00      	nop
 80055ec:	08005525 	.word	0x08005525

080055f0 <__sfmoreglue>:
 80055f0:	b570      	push	{r4, r5, r6, lr}
 80055f2:	2268      	movs	r2, #104	; 0x68
 80055f4:	1e4d      	subs	r5, r1, #1
 80055f6:	4355      	muls	r5, r2
 80055f8:	460e      	mov	r6, r1
 80055fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055fe:	f000 f997 	bl	8005930 <_malloc_r>
 8005602:	4604      	mov	r4, r0
 8005604:	b140      	cbz	r0, 8005618 <__sfmoreglue+0x28>
 8005606:	2100      	movs	r1, #0
 8005608:	e9c0 1600 	strd	r1, r6, [r0]
 800560c:	300c      	adds	r0, #12
 800560e:	60a0      	str	r0, [r4, #8]
 8005610:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005614:	f7ff fdc2 	bl	800519c <memset>
 8005618:	4620      	mov	r0, r4
 800561a:	bd70      	pop	{r4, r5, r6, pc}

0800561c <__sfp_lock_acquire>:
 800561c:	4801      	ldr	r0, [pc, #4]	; (8005624 <__sfp_lock_acquire+0x8>)
 800561e:	f000 b8b3 	b.w	8005788 <__retarget_lock_acquire_recursive>
 8005622:	bf00      	nop
 8005624:	20004a79 	.word	0x20004a79

08005628 <__sfp_lock_release>:
 8005628:	4801      	ldr	r0, [pc, #4]	; (8005630 <__sfp_lock_release+0x8>)
 800562a:	f000 b8ae 	b.w	800578a <__retarget_lock_release_recursive>
 800562e:	bf00      	nop
 8005630:	20004a79 	.word	0x20004a79

08005634 <__sinit_lock_acquire>:
 8005634:	4801      	ldr	r0, [pc, #4]	; (800563c <__sinit_lock_acquire+0x8>)
 8005636:	f000 b8a7 	b.w	8005788 <__retarget_lock_acquire_recursive>
 800563a:	bf00      	nop
 800563c:	20004a7a 	.word	0x20004a7a

08005640 <__sinit_lock_release>:
 8005640:	4801      	ldr	r0, [pc, #4]	; (8005648 <__sinit_lock_release+0x8>)
 8005642:	f000 b8a2 	b.w	800578a <__retarget_lock_release_recursive>
 8005646:	bf00      	nop
 8005648:	20004a7a 	.word	0x20004a7a

0800564c <__sinit>:
 800564c:	b510      	push	{r4, lr}
 800564e:	4604      	mov	r4, r0
 8005650:	f7ff fff0 	bl	8005634 <__sinit_lock_acquire>
 8005654:	69a3      	ldr	r3, [r4, #24]
 8005656:	b11b      	cbz	r3, 8005660 <__sinit+0x14>
 8005658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800565c:	f7ff bff0 	b.w	8005640 <__sinit_lock_release>
 8005660:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005664:	6523      	str	r3, [r4, #80]	; 0x50
 8005666:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <__sinit+0x68>)
 8005668:	4a13      	ldr	r2, [pc, #76]	; (80056b8 <__sinit+0x6c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	62a2      	str	r2, [r4, #40]	; 0x28
 800566e:	42a3      	cmp	r3, r4
 8005670:	bf04      	itt	eq
 8005672:	2301      	moveq	r3, #1
 8005674:	61a3      	streq	r3, [r4, #24]
 8005676:	4620      	mov	r0, r4
 8005678:	f000 f820 	bl	80056bc <__sfp>
 800567c:	6060      	str	r0, [r4, #4]
 800567e:	4620      	mov	r0, r4
 8005680:	f000 f81c 	bl	80056bc <__sfp>
 8005684:	60a0      	str	r0, [r4, #8]
 8005686:	4620      	mov	r0, r4
 8005688:	f000 f818 	bl	80056bc <__sfp>
 800568c:	2200      	movs	r2, #0
 800568e:	60e0      	str	r0, [r4, #12]
 8005690:	2104      	movs	r1, #4
 8005692:	6860      	ldr	r0, [r4, #4]
 8005694:	f7ff ff82 	bl	800559c <std>
 8005698:	68a0      	ldr	r0, [r4, #8]
 800569a:	2201      	movs	r2, #1
 800569c:	2109      	movs	r1, #9
 800569e:	f7ff ff7d 	bl	800559c <std>
 80056a2:	68e0      	ldr	r0, [r4, #12]
 80056a4:	2202      	movs	r2, #2
 80056a6:	2112      	movs	r1, #18
 80056a8:	f7ff ff78 	bl	800559c <std>
 80056ac:	2301      	movs	r3, #1
 80056ae:	61a3      	str	r3, [r4, #24]
 80056b0:	e7d2      	b.n	8005658 <__sinit+0xc>
 80056b2:	bf00      	nop
 80056b4:	08005c30 	.word	0x08005c30
 80056b8:	080055e5 	.word	0x080055e5

080056bc <__sfp>:
 80056bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056be:	4607      	mov	r7, r0
 80056c0:	f7ff ffac 	bl	800561c <__sfp_lock_acquire>
 80056c4:	4b1e      	ldr	r3, [pc, #120]	; (8005740 <__sfp+0x84>)
 80056c6:	681e      	ldr	r6, [r3, #0]
 80056c8:	69b3      	ldr	r3, [r6, #24]
 80056ca:	b913      	cbnz	r3, 80056d2 <__sfp+0x16>
 80056cc:	4630      	mov	r0, r6
 80056ce:	f7ff ffbd 	bl	800564c <__sinit>
 80056d2:	3648      	adds	r6, #72	; 0x48
 80056d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80056d8:	3b01      	subs	r3, #1
 80056da:	d503      	bpl.n	80056e4 <__sfp+0x28>
 80056dc:	6833      	ldr	r3, [r6, #0]
 80056de:	b30b      	cbz	r3, 8005724 <__sfp+0x68>
 80056e0:	6836      	ldr	r6, [r6, #0]
 80056e2:	e7f7      	b.n	80056d4 <__sfp+0x18>
 80056e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80056e8:	b9d5      	cbnz	r5, 8005720 <__sfp+0x64>
 80056ea:	4b16      	ldr	r3, [pc, #88]	; (8005744 <__sfp+0x88>)
 80056ec:	60e3      	str	r3, [r4, #12]
 80056ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056f2:	6665      	str	r5, [r4, #100]	; 0x64
 80056f4:	f000 f847 	bl	8005786 <__retarget_lock_init_recursive>
 80056f8:	f7ff ff96 	bl	8005628 <__sfp_lock_release>
 80056fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005700:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005704:	6025      	str	r5, [r4, #0]
 8005706:	61a5      	str	r5, [r4, #24]
 8005708:	2208      	movs	r2, #8
 800570a:	4629      	mov	r1, r5
 800570c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005710:	f7ff fd44 	bl	800519c <memset>
 8005714:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005718:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800571c:	4620      	mov	r0, r4
 800571e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005720:	3468      	adds	r4, #104	; 0x68
 8005722:	e7d9      	b.n	80056d8 <__sfp+0x1c>
 8005724:	2104      	movs	r1, #4
 8005726:	4638      	mov	r0, r7
 8005728:	f7ff ff62 	bl	80055f0 <__sfmoreglue>
 800572c:	4604      	mov	r4, r0
 800572e:	6030      	str	r0, [r6, #0]
 8005730:	2800      	cmp	r0, #0
 8005732:	d1d5      	bne.n	80056e0 <__sfp+0x24>
 8005734:	f7ff ff78 	bl	8005628 <__sfp_lock_release>
 8005738:	230c      	movs	r3, #12
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	e7ee      	b.n	800571c <__sfp+0x60>
 800573e:	bf00      	nop
 8005740:	08005c30 	.word	0x08005c30
 8005744:	ffff0001 	.word	0xffff0001

08005748 <_fwalk_reent>:
 8005748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800574c:	4606      	mov	r6, r0
 800574e:	4688      	mov	r8, r1
 8005750:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005754:	2700      	movs	r7, #0
 8005756:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800575a:	f1b9 0901 	subs.w	r9, r9, #1
 800575e:	d505      	bpl.n	800576c <_fwalk_reent+0x24>
 8005760:	6824      	ldr	r4, [r4, #0]
 8005762:	2c00      	cmp	r4, #0
 8005764:	d1f7      	bne.n	8005756 <_fwalk_reent+0xe>
 8005766:	4638      	mov	r0, r7
 8005768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800576c:	89ab      	ldrh	r3, [r5, #12]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d907      	bls.n	8005782 <_fwalk_reent+0x3a>
 8005772:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005776:	3301      	adds	r3, #1
 8005778:	d003      	beq.n	8005782 <_fwalk_reent+0x3a>
 800577a:	4629      	mov	r1, r5
 800577c:	4630      	mov	r0, r6
 800577e:	47c0      	blx	r8
 8005780:	4307      	orrs	r7, r0
 8005782:	3568      	adds	r5, #104	; 0x68
 8005784:	e7e9      	b.n	800575a <_fwalk_reent+0x12>

08005786 <__retarget_lock_init_recursive>:
 8005786:	4770      	bx	lr

08005788 <__retarget_lock_acquire_recursive>:
 8005788:	4770      	bx	lr

0800578a <__retarget_lock_release_recursive>:
 800578a:	4770      	bx	lr

0800578c <__swhatbuf_r>:
 800578c:	b570      	push	{r4, r5, r6, lr}
 800578e:	460e      	mov	r6, r1
 8005790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005794:	2900      	cmp	r1, #0
 8005796:	b096      	sub	sp, #88	; 0x58
 8005798:	4614      	mov	r4, r2
 800579a:	461d      	mov	r5, r3
 800579c:	da08      	bge.n	80057b0 <__swhatbuf_r+0x24>
 800579e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	602a      	str	r2, [r5, #0]
 80057a6:	061a      	lsls	r2, r3, #24
 80057a8:	d410      	bmi.n	80057cc <__swhatbuf_r+0x40>
 80057aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ae:	e00e      	b.n	80057ce <__swhatbuf_r+0x42>
 80057b0:	466a      	mov	r2, sp
 80057b2:	f000 f9a7 	bl	8005b04 <_fstat_r>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	dbf1      	blt.n	800579e <__swhatbuf_r+0x12>
 80057ba:	9a01      	ldr	r2, [sp, #4]
 80057bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80057c4:	425a      	negs	r2, r3
 80057c6:	415a      	adcs	r2, r3
 80057c8:	602a      	str	r2, [r5, #0]
 80057ca:	e7ee      	b.n	80057aa <__swhatbuf_r+0x1e>
 80057cc:	2340      	movs	r3, #64	; 0x40
 80057ce:	2000      	movs	r0, #0
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	b016      	add	sp, #88	; 0x58
 80057d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080057d8 <__smakebuf_r>:
 80057d8:	898b      	ldrh	r3, [r1, #12]
 80057da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057dc:	079d      	lsls	r5, r3, #30
 80057de:	4606      	mov	r6, r0
 80057e0:	460c      	mov	r4, r1
 80057e2:	d507      	bpl.n	80057f4 <__smakebuf_r+0x1c>
 80057e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	6123      	str	r3, [r4, #16]
 80057ec:	2301      	movs	r3, #1
 80057ee:	6163      	str	r3, [r4, #20]
 80057f0:	b002      	add	sp, #8
 80057f2:	bd70      	pop	{r4, r5, r6, pc}
 80057f4:	ab01      	add	r3, sp, #4
 80057f6:	466a      	mov	r2, sp
 80057f8:	f7ff ffc8 	bl	800578c <__swhatbuf_r>
 80057fc:	9900      	ldr	r1, [sp, #0]
 80057fe:	4605      	mov	r5, r0
 8005800:	4630      	mov	r0, r6
 8005802:	f000 f895 	bl	8005930 <_malloc_r>
 8005806:	b948      	cbnz	r0, 800581c <__smakebuf_r+0x44>
 8005808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800580c:	059a      	lsls	r2, r3, #22
 800580e:	d4ef      	bmi.n	80057f0 <__smakebuf_r+0x18>
 8005810:	f023 0303 	bic.w	r3, r3, #3
 8005814:	f043 0302 	orr.w	r3, r3, #2
 8005818:	81a3      	strh	r3, [r4, #12]
 800581a:	e7e3      	b.n	80057e4 <__smakebuf_r+0xc>
 800581c:	4b0d      	ldr	r3, [pc, #52]	; (8005854 <__smakebuf_r+0x7c>)
 800581e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	6020      	str	r0, [r4, #0]
 8005824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005828:	81a3      	strh	r3, [r4, #12]
 800582a:	9b00      	ldr	r3, [sp, #0]
 800582c:	6163      	str	r3, [r4, #20]
 800582e:	9b01      	ldr	r3, [sp, #4]
 8005830:	6120      	str	r0, [r4, #16]
 8005832:	b15b      	cbz	r3, 800584c <__smakebuf_r+0x74>
 8005834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005838:	4630      	mov	r0, r6
 800583a:	f000 f975 	bl	8005b28 <_isatty_r>
 800583e:	b128      	cbz	r0, 800584c <__smakebuf_r+0x74>
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	f023 0303 	bic.w	r3, r3, #3
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	81a3      	strh	r3, [r4, #12]
 800584c:	89a0      	ldrh	r0, [r4, #12]
 800584e:	4305      	orrs	r5, r0
 8005850:	81a5      	strh	r5, [r4, #12]
 8005852:	e7cd      	b.n	80057f0 <__smakebuf_r+0x18>
 8005854:	080055e5 	.word	0x080055e5

08005858 <_free_r>:
 8005858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800585a:	2900      	cmp	r1, #0
 800585c:	d044      	beq.n	80058e8 <_free_r+0x90>
 800585e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005862:	9001      	str	r0, [sp, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f1a1 0404 	sub.w	r4, r1, #4
 800586a:	bfb8      	it	lt
 800586c:	18e4      	addlt	r4, r4, r3
 800586e:	f000 f97d 	bl	8005b6c <__malloc_lock>
 8005872:	4a1e      	ldr	r2, [pc, #120]	; (80058ec <_free_r+0x94>)
 8005874:	9801      	ldr	r0, [sp, #4]
 8005876:	6813      	ldr	r3, [r2, #0]
 8005878:	b933      	cbnz	r3, 8005888 <_free_r+0x30>
 800587a:	6063      	str	r3, [r4, #4]
 800587c:	6014      	str	r4, [r2, #0]
 800587e:	b003      	add	sp, #12
 8005880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005884:	f000 b978 	b.w	8005b78 <__malloc_unlock>
 8005888:	42a3      	cmp	r3, r4
 800588a:	d908      	bls.n	800589e <_free_r+0x46>
 800588c:	6825      	ldr	r5, [r4, #0]
 800588e:	1961      	adds	r1, r4, r5
 8005890:	428b      	cmp	r3, r1
 8005892:	bf01      	itttt	eq
 8005894:	6819      	ldreq	r1, [r3, #0]
 8005896:	685b      	ldreq	r3, [r3, #4]
 8005898:	1949      	addeq	r1, r1, r5
 800589a:	6021      	streq	r1, [r4, #0]
 800589c:	e7ed      	b.n	800587a <_free_r+0x22>
 800589e:	461a      	mov	r2, r3
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	b10b      	cbz	r3, 80058a8 <_free_r+0x50>
 80058a4:	42a3      	cmp	r3, r4
 80058a6:	d9fa      	bls.n	800589e <_free_r+0x46>
 80058a8:	6811      	ldr	r1, [r2, #0]
 80058aa:	1855      	adds	r5, r2, r1
 80058ac:	42a5      	cmp	r5, r4
 80058ae:	d10b      	bne.n	80058c8 <_free_r+0x70>
 80058b0:	6824      	ldr	r4, [r4, #0]
 80058b2:	4421      	add	r1, r4
 80058b4:	1854      	adds	r4, r2, r1
 80058b6:	42a3      	cmp	r3, r4
 80058b8:	6011      	str	r1, [r2, #0]
 80058ba:	d1e0      	bne.n	800587e <_free_r+0x26>
 80058bc:	681c      	ldr	r4, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	6053      	str	r3, [r2, #4]
 80058c2:	4421      	add	r1, r4
 80058c4:	6011      	str	r1, [r2, #0]
 80058c6:	e7da      	b.n	800587e <_free_r+0x26>
 80058c8:	d902      	bls.n	80058d0 <_free_r+0x78>
 80058ca:	230c      	movs	r3, #12
 80058cc:	6003      	str	r3, [r0, #0]
 80058ce:	e7d6      	b.n	800587e <_free_r+0x26>
 80058d0:	6825      	ldr	r5, [r4, #0]
 80058d2:	1961      	adds	r1, r4, r5
 80058d4:	428b      	cmp	r3, r1
 80058d6:	bf04      	itt	eq
 80058d8:	6819      	ldreq	r1, [r3, #0]
 80058da:	685b      	ldreq	r3, [r3, #4]
 80058dc:	6063      	str	r3, [r4, #4]
 80058de:	bf04      	itt	eq
 80058e0:	1949      	addeq	r1, r1, r5
 80058e2:	6021      	streq	r1, [r4, #0]
 80058e4:	6054      	str	r4, [r2, #4]
 80058e6:	e7ca      	b.n	800587e <_free_r+0x26>
 80058e8:	b003      	add	sp, #12
 80058ea:	bd30      	pop	{r4, r5, pc}
 80058ec:	20004a7c 	.word	0x20004a7c

080058f0 <sbrk_aligned>:
 80058f0:	b570      	push	{r4, r5, r6, lr}
 80058f2:	4e0e      	ldr	r6, [pc, #56]	; (800592c <sbrk_aligned+0x3c>)
 80058f4:	460c      	mov	r4, r1
 80058f6:	6831      	ldr	r1, [r6, #0]
 80058f8:	4605      	mov	r5, r0
 80058fa:	b911      	cbnz	r1, 8005902 <sbrk_aligned+0x12>
 80058fc:	f000 f88c 	bl	8005a18 <_sbrk_r>
 8005900:	6030      	str	r0, [r6, #0]
 8005902:	4621      	mov	r1, r4
 8005904:	4628      	mov	r0, r5
 8005906:	f000 f887 	bl	8005a18 <_sbrk_r>
 800590a:	1c43      	adds	r3, r0, #1
 800590c:	d00a      	beq.n	8005924 <sbrk_aligned+0x34>
 800590e:	1cc4      	adds	r4, r0, #3
 8005910:	f024 0403 	bic.w	r4, r4, #3
 8005914:	42a0      	cmp	r0, r4
 8005916:	d007      	beq.n	8005928 <sbrk_aligned+0x38>
 8005918:	1a21      	subs	r1, r4, r0
 800591a:	4628      	mov	r0, r5
 800591c:	f000 f87c 	bl	8005a18 <_sbrk_r>
 8005920:	3001      	adds	r0, #1
 8005922:	d101      	bne.n	8005928 <sbrk_aligned+0x38>
 8005924:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005928:	4620      	mov	r0, r4
 800592a:	bd70      	pop	{r4, r5, r6, pc}
 800592c:	20004a80 	.word	0x20004a80

08005930 <_malloc_r>:
 8005930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005934:	1ccd      	adds	r5, r1, #3
 8005936:	f025 0503 	bic.w	r5, r5, #3
 800593a:	3508      	adds	r5, #8
 800593c:	2d0c      	cmp	r5, #12
 800593e:	bf38      	it	cc
 8005940:	250c      	movcc	r5, #12
 8005942:	2d00      	cmp	r5, #0
 8005944:	4607      	mov	r7, r0
 8005946:	db01      	blt.n	800594c <_malloc_r+0x1c>
 8005948:	42a9      	cmp	r1, r5
 800594a:	d905      	bls.n	8005958 <_malloc_r+0x28>
 800594c:	230c      	movs	r3, #12
 800594e:	603b      	str	r3, [r7, #0]
 8005950:	2600      	movs	r6, #0
 8005952:	4630      	mov	r0, r6
 8005954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005958:	4e2e      	ldr	r6, [pc, #184]	; (8005a14 <_malloc_r+0xe4>)
 800595a:	f000 f907 	bl	8005b6c <__malloc_lock>
 800595e:	6833      	ldr	r3, [r6, #0]
 8005960:	461c      	mov	r4, r3
 8005962:	bb34      	cbnz	r4, 80059b2 <_malloc_r+0x82>
 8005964:	4629      	mov	r1, r5
 8005966:	4638      	mov	r0, r7
 8005968:	f7ff ffc2 	bl	80058f0 <sbrk_aligned>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	4604      	mov	r4, r0
 8005970:	d14d      	bne.n	8005a0e <_malloc_r+0xde>
 8005972:	6834      	ldr	r4, [r6, #0]
 8005974:	4626      	mov	r6, r4
 8005976:	2e00      	cmp	r6, #0
 8005978:	d140      	bne.n	80059fc <_malloc_r+0xcc>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	4631      	mov	r1, r6
 800597e:	4638      	mov	r0, r7
 8005980:	eb04 0803 	add.w	r8, r4, r3
 8005984:	f000 f848 	bl	8005a18 <_sbrk_r>
 8005988:	4580      	cmp	r8, r0
 800598a:	d13a      	bne.n	8005a02 <_malloc_r+0xd2>
 800598c:	6821      	ldr	r1, [r4, #0]
 800598e:	3503      	adds	r5, #3
 8005990:	1a6d      	subs	r5, r5, r1
 8005992:	f025 0503 	bic.w	r5, r5, #3
 8005996:	3508      	adds	r5, #8
 8005998:	2d0c      	cmp	r5, #12
 800599a:	bf38      	it	cc
 800599c:	250c      	movcc	r5, #12
 800599e:	4629      	mov	r1, r5
 80059a0:	4638      	mov	r0, r7
 80059a2:	f7ff ffa5 	bl	80058f0 <sbrk_aligned>
 80059a6:	3001      	adds	r0, #1
 80059a8:	d02b      	beq.n	8005a02 <_malloc_r+0xd2>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	442b      	add	r3, r5
 80059ae:	6023      	str	r3, [r4, #0]
 80059b0:	e00e      	b.n	80059d0 <_malloc_r+0xa0>
 80059b2:	6822      	ldr	r2, [r4, #0]
 80059b4:	1b52      	subs	r2, r2, r5
 80059b6:	d41e      	bmi.n	80059f6 <_malloc_r+0xc6>
 80059b8:	2a0b      	cmp	r2, #11
 80059ba:	d916      	bls.n	80059ea <_malloc_r+0xba>
 80059bc:	1961      	adds	r1, r4, r5
 80059be:	42a3      	cmp	r3, r4
 80059c0:	6025      	str	r5, [r4, #0]
 80059c2:	bf18      	it	ne
 80059c4:	6059      	strne	r1, [r3, #4]
 80059c6:	6863      	ldr	r3, [r4, #4]
 80059c8:	bf08      	it	eq
 80059ca:	6031      	streq	r1, [r6, #0]
 80059cc:	5162      	str	r2, [r4, r5]
 80059ce:	604b      	str	r3, [r1, #4]
 80059d0:	4638      	mov	r0, r7
 80059d2:	f104 060b 	add.w	r6, r4, #11
 80059d6:	f000 f8cf 	bl	8005b78 <__malloc_unlock>
 80059da:	f026 0607 	bic.w	r6, r6, #7
 80059de:	1d23      	adds	r3, r4, #4
 80059e0:	1af2      	subs	r2, r6, r3
 80059e2:	d0b6      	beq.n	8005952 <_malloc_r+0x22>
 80059e4:	1b9b      	subs	r3, r3, r6
 80059e6:	50a3      	str	r3, [r4, r2]
 80059e8:	e7b3      	b.n	8005952 <_malloc_r+0x22>
 80059ea:	6862      	ldr	r2, [r4, #4]
 80059ec:	42a3      	cmp	r3, r4
 80059ee:	bf0c      	ite	eq
 80059f0:	6032      	streq	r2, [r6, #0]
 80059f2:	605a      	strne	r2, [r3, #4]
 80059f4:	e7ec      	b.n	80059d0 <_malloc_r+0xa0>
 80059f6:	4623      	mov	r3, r4
 80059f8:	6864      	ldr	r4, [r4, #4]
 80059fa:	e7b2      	b.n	8005962 <_malloc_r+0x32>
 80059fc:	4634      	mov	r4, r6
 80059fe:	6876      	ldr	r6, [r6, #4]
 8005a00:	e7b9      	b.n	8005976 <_malloc_r+0x46>
 8005a02:	230c      	movs	r3, #12
 8005a04:	603b      	str	r3, [r7, #0]
 8005a06:	4638      	mov	r0, r7
 8005a08:	f000 f8b6 	bl	8005b78 <__malloc_unlock>
 8005a0c:	e7a1      	b.n	8005952 <_malloc_r+0x22>
 8005a0e:	6025      	str	r5, [r4, #0]
 8005a10:	e7de      	b.n	80059d0 <_malloc_r+0xa0>
 8005a12:	bf00      	nop
 8005a14:	20004a7c 	.word	0x20004a7c

08005a18 <_sbrk_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4d06      	ldr	r5, [pc, #24]	; (8005a34 <_sbrk_r+0x1c>)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	4604      	mov	r4, r0
 8005a20:	4608      	mov	r0, r1
 8005a22:	602b      	str	r3, [r5, #0]
 8005a24:	f7fa ffd8 	bl	80009d8 <_sbrk>
 8005a28:	1c43      	adds	r3, r0, #1
 8005a2a:	d102      	bne.n	8005a32 <_sbrk_r+0x1a>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	b103      	cbz	r3, 8005a32 <_sbrk_r+0x1a>
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	bd38      	pop	{r3, r4, r5, pc}
 8005a34:	20004a84 	.word	0x20004a84

08005a38 <__sread>:
 8005a38:	b510      	push	{r4, lr}
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a40:	f000 f8a0 	bl	8005b84 <_read_r>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	bfab      	itete	ge
 8005a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a4c:	181b      	addge	r3, r3, r0
 8005a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a52:	bfac      	ite	ge
 8005a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a56:	81a3      	strhlt	r3, [r4, #12]
 8005a58:	bd10      	pop	{r4, pc}

08005a5a <__swrite>:
 8005a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5e:	461f      	mov	r7, r3
 8005a60:	898b      	ldrh	r3, [r1, #12]
 8005a62:	05db      	lsls	r3, r3, #23
 8005a64:	4605      	mov	r5, r0
 8005a66:	460c      	mov	r4, r1
 8005a68:	4616      	mov	r6, r2
 8005a6a:	d505      	bpl.n	8005a78 <__swrite+0x1e>
 8005a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a70:	2302      	movs	r3, #2
 8005a72:	2200      	movs	r2, #0
 8005a74:	f000 f868 	bl	8005b48 <_lseek_r>
 8005a78:	89a3      	ldrh	r3, [r4, #12]
 8005a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a82:	81a3      	strh	r3, [r4, #12]
 8005a84:	4632      	mov	r2, r6
 8005a86:	463b      	mov	r3, r7
 8005a88:	4628      	mov	r0, r5
 8005a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8e:	f000 b817 	b.w	8005ac0 <_write_r>

08005a92 <__sseek>:
 8005a92:	b510      	push	{r4, lr}
 8005a94:	460c      	mov	r4, r1
 8005a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9a:	f000 f855 	bl	8005b48 <_lseek_r>
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	bf15      	itete	ne
 8005aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005aae:	81a3      	strheq	r3, [r4, #12]
 8005ab0:	bf18      	it	ne
 8005ab2:	81a3      	strhne	r3, [r4, #12]
 8005ab4:	bd10      	pop	{r4, pc}

08005ab6 <__sclose>:
 8005ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aba:	f000 b813 	b.w	8005ae4 <_close_r>
	...

08005ac0 <_write_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	4d07      	ldr	r5, [pc, #28]	; (8005ae0 <_write_r+0x20>)
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	4608      	mov	r0, r1
 8005ac8:	4611      	mov	r1, r2
 8005aca:	2200      	movs	r2, #0
 8005acc:	602a      	str	r2, [r5, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f7fa ff31 	bl	8000936 <_write>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d102      	bne.n	8005ade <_write_r+0x1e>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	b103      	cbz	r3, 8005ade <_write_r+0x1e>
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	20004a84 	.word	0x20004a84

08005ae4 <_close_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4d06      	ldr	r5, [pc, #24]	; (8005b00 <_close_r+0x1c>)
 8005ae8:	2300      	movs	r3, #0
 8005aea:	4604      	mov	r4, r0
 8005aec:	4608      	mov	r0, r1
 8005aee:	602b      	str	r3, [r5, #0]
 8005af0:	f7fa ff3d 	bl	800096e <_close>
 8005af4:	1c43      	adds	r3, r0, #1
 8005af6:	d102      	bne.n	8005afe <_close_r+0x1a>
 8005af8:	682b      	ldr	r3, [r5, #0]
 8005afa:	b103      	cbz	r3, 8005afe <_close_r+0x1a>
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	20004a84 	.word	0x20004a84

08005b04 <_fstat_r>:
 8005b04:	b538      	push	{r3, r4, r5, lr}
 8005b06:	4d07      	ldr	r5, [pc, #28]	; (8005b24 <_fstat_r+0x20>)
 8005b08:	2300      	movs	r3, #0
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	4611      	mov	r1, r2
 8005b10:	602b      	str	r3, [r5, #0]
 8005b12:	f7fa ff38 	bl	8000986 <_fstat>
 8005b16:	1c43      	adds	r3, r0, #1
 8005b18:	d102      	bne.n	8005b20 <_fstat_r+0x1c>
 8005b1a:	682b      	ldr	r3, [r5, #0]
 8005b1c:	b103      	cbz	r3, 8005b20 <_fstat_r+0x1c>
 8005b1e:	6023      	str	r3, [r4, #0]
 8005b20:	bd38      	pop	{r3, r4, r5, pc}
 8005b22:	bf00      	nop
 8005b24:	20004a84 	.word	0x20004a84

08005b28 <_isatty_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4d06      	ldr	r5, [pc, #24]	; (8005b44 <_isatty_r+0x1c>)
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	4604      	mov	r4, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	602b      	str	r3, [r5, #0]
 8005b34:	f7fa ff37 	bl	80009a6 <_isatty>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d102      	bne.n	8005b42 <_isatty_r+0x1a>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	b103      	cbz	r3, 8005b42 <_isatty_r+0x1a>
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	20004a84 	.word	0x20004a84

08005b48 <_lseek_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	4d07      	ldr	r5, [pc, #28]	; (8005b68 <_lseek_r+0x20>)
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	4608      	mov	r0, r1
 8005b50:	4611      	mov	r1, r2
 8005b52:	2200      	movs	r2, #0
 8005b54:	602a      	str	r2, [r5, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	f7fa ff30 	bl	80009bc <_lseek>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d102      	bne.n	8005b66 <_lseek_r+0x1e>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	b103      	cbz	r3, 8005b66 <_lseek_r+0x1e>
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	bd38      	pop	{r3, r4, r5, pc}
 8005b68:	20004a84 	.word	0x20004a84

08005b6c <__malloc_lock>:
 8005b6c:	4801      	ldr	r0, [pc, #4]	; (8005b74 <__malloc_lock+0x8>)
 8005b6e:	f7ff be0b 	b.w	8005788 <__retarget_lock_acquire_recursive>
 8005b72:	bf00      	nop
 8005b74:	20004a78 	.word	0x20004a78

08005b78 <__malloc_unlock>:
 8005b78:	4801      	ldr	r0, [pc, #4]	; (8005b80 <__malloc_unlock+0x8>)
 8005b7a:	f7ff be06 	b.w	800578a <__retarget_lock_release_recursive>
 8005b7e:	bf00      	nop
 8005b80:	20004a78 	.word	0x20004a78

08005b84 <_read_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	4d07      	ldr	r5, [pc, #28]	; (8005ba4 <_read_r+0x20>)
 8005b88:	4604      	mov	r4, r0
 8005b8a:	4608      	mov	r0, r1
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	2200      	movs	r2, #0
 8005b90:	602a      	str	r2, [r5, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	f7fa feb2 	bl	80008fc <_read>
 8005b98:	1c43      	adds	r3, r0, #1
 8005b9a:	d102      	bne.n	8005ba2 <_read_r+0x1e>
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	b103      	cbz	r3, 8005ba2 <_read_r+0x1e>
 8005ba0:	6023      	str	r3, [r4, #0]
 8005ba2:	bd38      	pop	{r3, r4, r5, pc}
 8005ba4:	20004a84 	.word	0x20004a84

08005ba8 <_init>:
 8005ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005baa:	bf00      	nop
 8005bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bae:	bc08      	pop	{r3}
 8005bb0:	469e      	mov	lr, r3
 8005bb2:	4770      	bx	lr

08005bb4 <_fini>:
 8005bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb6:	bf00      	nop
 8005bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bba:	bc08      	pop	{r3}
 8005bbc:	469e      	mov	lr, r3
 8005bbe:	4770      	bx	lr
