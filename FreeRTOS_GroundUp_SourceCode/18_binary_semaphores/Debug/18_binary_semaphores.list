
18_binary_semaphores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005edc  08005edc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005edc  08005edc  00015edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee4  08005ee4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ee8  08005ee8  00015ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004adc  20000074  08005f60  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b50  08005f60  00024b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b0c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ac  00000000  00000000  00038bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0003be60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044e5  00000000  00000000  0003e618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017482  00000000  00000000  00042afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099be2  00000000  00000000  00059f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3b61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cb0  00000000  00000000  000f3bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005dc0 	.word	0x08005dc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005dc0 	.word	0x08005dc0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
TaskProfiler YellowLEDProfiler;
TaskProfiler BlueLEDProfiler;


int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af02      	add	r7, sp, #8
  HAL_Init();
 80004ea:	f000 fb5b 	bl	8000ba4 <HAL_Init>


  SystemClock_Config();
 80004ee:	f000 f8d3 	bl	8000698 <SystemClock_Config>
  MX_GPIO_Init();
 80004f2:	f000 f959 	bl	80007a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f6:	f000 f92d 	bl	8000754 <MX_USART2_UART_Init>
  /*
   * printf won't work sometimes if you didn't enable newlib for RTOS
   * */
  xBinarySemaphore=xSemaphoreCreateBinary();
 80004fa:	2203      	movs	r2, #3
 80004fc:	2100      	movs	r1, #0
 80004fe:	2001      	movs	r0, #1
 8000500:	f002 f99c 	bl	800283c <xQueueGenericCreate>
 8000504:	4603      	mov	r3, r0
 8000506:	4a11      	ldr	r2, [pc, #68]	; (800054c <main+0x68>)
 8000508:	6013      	str	r3, [r2, #0]
  xTaskCreate(redLedController,"red led task",100,NULL,1,NULL);
 800050a:	2300      	movs	r3, #0
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	2264      	movs	r2, #100	; 0x64
 8000516:	490e      	ldr	r1, [pc, #56]	; (8000550 <main+0x6c>)
 8000518:	480e      	ldr	r0, [pc, #56]	; (8000554 <main+0x70>)
 800051a:	f002 ff56 	bl	80033ca <xTaskCreate>
  xTaskCreate(yellowLedController,"yellow led task",100,NULL,1,NULL);
 800051e:	2300      	movs	r3, #0
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2300      	movs	r3, #0
 8000528:	2264      	movs	r2, #100	; 0x64
 800052a:	490b      	ldr	r1, [pc, #44]	; (8000558 <main+0x74>)
 800052c:	480b      	ldr	r0, [pc, #44]	; (800055c <main+0x78>)
 800052e:	f002 ff4c 	bl	80033ca <xTaskCreate>
  xTaskCreate(blueLedController,"blue led task",100,NULL,1,NULL);
 8000532:	2300      	movs	r3, #0
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	2301      	movs	r3, #1
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2300      	movs	r3, #0
 800053c:	2264      	movs	r2, #100	; 0x64
 800053e:	4908      	ldr	r1, [pc, #32]	; (8000560 <main+0x7c>)
 8000540:	4808      	ldr	r0, [pc, #32]	; (8000564 <main+0x80>)
 8000542:	f002 ff42 	bl	80033ca <xTaskCreate>

  vTaskStartScheduler();
 8000546:	f003 f8cf 	bl	80036e8 <vTaskStartScheduler>

  while (1)
 800054a:	e7fe      	b.n	800054a <main+0x66>
 800054c:	200000d4 	.word	0x200000d4
 8000550:	08005dd8 	.word	0x08005dd8
 8000554:	080005b1 	.word	0x080005b1
 8000558:	08005de8 	.word	0x08005de8
 800055c:	08000609 	.word	0x08000609
 8000560:	08005df8 	.word	0x08005df8
 8000564:	08000651 	.word	0x08000651

08000568 <uart2_write>:




int uart2_write(int ch)
	{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & USART_SR_TXE)){}
 8000570:	bf00      	nop
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <uart2_write+0x2c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057a:	2b00      	cmp	r3, #0
 800057c:	d0f9      	beq.n	8000572 <uart2_write+0xa>

	 /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <uart2_write+0x2c>)
 8000582:	b2db      	uxtb	r3, r3
 8000584:	6053      	str	r3, [r2, #4]
	return ch;
 8000586:	687b      	ldr	r3, [r7, #4]
	}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40004400 	.word	0x40004400

08000598 <__io_putchar>:

int __io_putchar(int ch)
	{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f7ff ffe1 	bl	8000568 <uart2_write>
	return ch;
 80005a6:	687b      	ldr	r3, [r7, #4]
	}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <redLedController>:



void redLedController(void *pvParameters)
	{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(xBinarySemaphore);
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <redLedController+0x4c>)
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	f002 f999 	bl	80028f8 <xQueueGenericSend>
	while(1)
	{
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <redLedController+0x4c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fc0c 	bl	8002dec <xQueueSemaphoreTake>
		RedLEDProfiler++;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <redLedController+0x50>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	4a09      	ldr	r2, [pc, #36]	; (8000600 <redLedController+0x50>)
 80005dc:	6013      	str	r3, [r2, #0]
		printf("this is red task\r\n");
 80005de:	4809      	ldr	r0, [pc, #36]	; (8000604 <redLedController+0x54>)
 80005e0:	f005 f880 	bl	80056e4 <puts>
		xSemaphoreGive(xBinarySemaphore);
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <redLedController+0x4c>)
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	2300      	movs	r3, #0
 80005ea:	2200      	movs	r2, #0
 80005ec:	2100      	movs	r1, #0
 80005ee:	f002 f983 	bl	80028f8 <xQueueGenericSend>
		vTaskDelay(1);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f003 f844 	bl	8003680 <vTaskDelay>
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 80005f8:	e7e5      	b.n	80005c6 <redLedController+0x16>
 80005fa:	bf00      	nop
 80005fc:	200000d4 	.word	0x200000d4
 8000600:	200000d8 	.word	0x200000d8
 8000604:	08005e08 	.word	0x08005e08

08000608 <yellowLedController>:
	}

	}
void yellowLedController(void *pvParameters)
	{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <yellowLedController+0x3c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fbe7 	bl	8002dec <xQueueSemaphoreTake>
		YellowLEDProfiler++;
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <yellowLedController+0x40>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	3301      	adds	r3, #1
 8000624:	4a08      	ldr	r2, [pc, #32]	; (8000648 <yellowLedController+0x40>)
 8000626:	6013      	str	r3, [r2, #0]
		printf("this is yellow task\r\n");
 8000628:	4808      	ldr	r0, [pc, #32]	; (800064c <yellowLedController+0x44>)
 800062a:	f005 f85b 	bl	80056e4 <puts>
		xSemaphoreGive(xBinarySemaphore);
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <yellowLedController+0x3c>)
 8000630:	6818      	ldr	r0, [r3, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	2200      	movs	r2, #0
 8000636:	2100      	movs	r1, #0
 8000638:	f002 f95e 	bl	80028f8 <xQueueGenericSend>
		vTaskDelay(1);
 800063c:	2001      	movs	r0, #1
 800063e:	f003 f81f 	bl	8003680 <vTaskDelay>
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 8000642:	e7e5      	b.n	8000610 <yellowLedController+0x8>
 8000644:	200000d4 	.word	0x200000d4
 8000648:	200000dc 	.word	0x200000dc
 800064c:	08005e1c 	.word	0x08005e1c

08000650 <blueLedController>:
	}

	}
void blueLedController(void *pvParameters)
	{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]


	while(1)
	{
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <blueLedController+0x3c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000660:	4618      	mov	r0, r3
 8000662:	f002 fbc3 	bl	8002dec <xQueueSemaphoreTake>
		BlueLEDProfiler++;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <blueLedController+0x40>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	4a08      	ldr	r2, [pc, #32]	; (8000690 <blueLedController+0x40>)
 800066e:	6013      	str	r3, [r2, #0]
		printf("this is blue task\r\n");
 8000670:	4808      	ldr	r0, [pc, #32]	; (8000694 <blueLedController+0x44>)
 8000672:	f005 f837 	bl	80056e4 <puts>
		xSemaphoreGive(xBinarySemaphore);
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <blueLedController+0x3c>)
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	f002 f93a 	bl	80028f8 <xQueueGenericSend>
		vTaskDelay(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f002 fffb 	bl	8003680 <vTaskDelay>
		xSemaphoreTake(xBinarySemaphore,portMAX_DELAY);
 800068a:	e7e5      	b.n	8000658 <blueLedController+0x8>
 800068c:	200000d4 	.word	0x200000d4
 8000690:	200000e0 	.word	0x200000e0
 8000694:	08005e34 	.word	0x08005e34

08000698 <SystemClock_Config>:
	}



void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 ff11 	bl	80054ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <SystemClock_Config+0xb4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xb4>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xb4>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <SystemClock_Config+0xb8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <SystemClock_Config+0xb8>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b19      	ldr	r3, [pc, #100]	; (8000750 <SystemClock_Config+0xb8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000700:	2300      	movs	r3, #0
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fcf3 	bl	80010f4 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000714:	f000 f874 	bl	8000800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f000 ff56 	bl	80015e4 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800073e:	f000 f85f 	bl	8000800 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_USART2_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800078c:	f001 fbbc 	bl	8001f08 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 f833 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000090 	.word	0x20000090
 80007a4:	40004400 	.word	0x40004400

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_GPIO_Init+0x30>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <MX_GPIO_Init+0x30>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_GPIO_Init+0x30>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d101      	bne.n	80007f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ee:	f000 f9fb 	bl	8000be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40014800 	.word	0x40014800

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_MspInit+0x54>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	4a11      	ldr	r2, [pc, #68]	; (8000860 <HAL_MspInit+0x54>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000820:	6453      	str	r3, [r2, #68]	; 0x44
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_MspInit+0x54>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <HAL_MspInit+0x54>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <HAL_MspInit+0x54>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_MspInit+0x54>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	210f      	movs	r1, #15
 800084e:	f06f 0001 	mvn.w	r0, #1
 8000852:	f000 faa1 	bl	8000d98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <HAL_UART_MspInit+0x84>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d12b      	bne.n	80008de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <HAL_UART_MspInit+0x88>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a17      	ldr	r2, [pc, #92]	; (80008ec <HAL_UART_MspInit+0x88>)
 8000890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_UART_MspInit+0x88>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_UART_MspInit+0x88>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <HAL_UART_MspInit+0x88>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_UART_MspInit+0x88>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008be:	230c      	movs	r3, #12
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ce:	2307      	movs	r3, #7
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <HAL_UART_MspInit+0x8c>)
 80008da:	f000 fa87 	bl	8000dec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40004400 	.word	0x40004400
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000

080008f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	201a      	movs	r0, #26
 800090a:	f000 fa45 	bl	8000d98 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800090e:	201a      	movs	r0, #26
 8000910:	f000 fa5e 	bl	8000dd0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <HAL_InitTick+0xa0>)
 800091a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091c:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <HAL_InitTick+0xa0>)
 800091e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000922:	6453      	str	r3, [r2, #68]	; 0x44
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <HAL_InitTick+0xa0>)
 8000926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000930:	f107 0210 	add.w	r2, r7, #16
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f001 f832 	bl	80019a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000940:	f001 f81c 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 8000944:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000948:	4a13      	ldr	r2, [pc, #76]	; (8000998 <HAL_InitTick+0xa4>)
 800094a:	fba2 2303 	umull	r2, r3, r2, r3
 800094e:	0c9b      	lsrs	r3, r3, #18
 8000950:	3b01      	subs	r3, #1
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <HAL_InitTick+0xa8>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <HAL_InitTick+0xac>)
 8000958:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_InitTick+0xa8>)
 800095c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000960:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000962:	4a0e      	ldr	r2, [pc, #56]	; (800099c <HAL_InitTick+0xa8>)
 8000964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000966:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_InitTick+0xa8>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <HAL_InitTick+0xa8>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000974:	4809      	ldr	r0, [pc, #36]	; (800099c <HAL_InitTick+0xa8>)
 8000976:	f001 f847 	bl	8001a08 <HAL_TIM_Base_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d104      	bne.n	800098a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000980:	4806      	ldr	r0, [pc, #24]	; (800099c <HAL_InitTick+0xa8>)
 8000982:	f001 f89b 	bl	8001abc <HAL_TIM_Base_Start_IT>
 8000986:	4603      	mov	r3, r0
 8000988:	e000      	b.n	800098c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	3730      	adds	r7, #48	; 0x30
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	431bde83 	.word	0x431bde83
 800099c:	200000e4 	.word	0x200000e4
 80009a0:	40014800 	.word	0x40014800

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80009d6:	f001 f8d3 	bl	8001b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000e4 	.word	0x200000e4

080009e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	e00a      	b.n	8000a0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009f6:	f3af 8000 	nop.w
 80009fa:	4601      	mov	r1, r0
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	60ba      	str	r2, [r7, #8]
 8000a02:	b2ca      	uxtb	r2, r1
 8000a04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697a      	ldr	r2, [r7, #20]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	dbf0      	blt.n	80009f6 <_read+0x12>
	}

return len;
 8000a14:	687b      	ldr	r3, [r7, #4]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	60f8      	str	r0, [r7, #12]
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	e009      	b.n	8000a44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	60ba      	str	r2, [r7, #8]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fdad 	bl	8000598 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	3301      	adds	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dbf1      	blt.n	8000a30 <_write+0x12>
	}
	return len;
 8000a4c:	687b      	ldr	r3, [r7, #4]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_close>:

int _close(int file)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a7e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_isatty>:

int _isatty(int file)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
	return 1;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
	return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f004 fbbc 	bl	800526c <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20020000 	.word	0x20020000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	2000012c 	.word	0x2000012c
 8000b28:	20004b50 	.word	0x20004b50

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b56:	490e      	ldr	r1, [pc, #56]	; (8000b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b6c:	4c0b      	ldr	r4, [pc, #44]	; (8000b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b7a:	f7ff ffd7 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f004 fc71 	bl	8005464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fcaf 	bl	80004e4 <main>
  bx  lr    
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b94:	08005eec 	.word	0x08005eec
  ldr r2, =_sbss
 8000b98:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b9c:	20004b50 	.word	0x20004b50

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <HAL_Init+0x40>)
 8000bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_Init+0x40>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x40>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f8d8 	bl	8000d82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f7ff fe8e 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff fe18 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000130 	.word	0x20000130

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000130 	.word	0x20000130

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff4c 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000daa:	f7ff ff61 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000dae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	6978      	ldr	r0, [r7, #20]
 8000db6:	f7ff ffb1 	bl	8000d1c <NVIC_EncodePriority>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff80 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000dc8:	bf00      	nop
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff54 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	e159      	b.n	80010bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f040 8148 	bne.w	80010b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d005      	beq.n	8000e3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d130      	bne.n	8000ea0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	f003 0201 	and.w	r2, r3, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d017      	beq.n	8000edc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d123      	bne.n	8000f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	69b9      	ldr	r1, [r7, #24]
 8000f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0203 	and.w	r2, r3, #3
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80a2 	beq.w	80010b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b57      	ldr	r3, [pc, #348]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a56      	ldr	r2, [pc, #344]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b54      	ldr	r3, [pc, #336]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8e:	4a52      	ldr	r2, [pc, #328]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a49      	ldr	r2, [pc, #292]	; (80010dc <HAL_GPIO_Init+0x2f0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d019      	beq.n	8000fee <HAL_GPIO_Init+0x202>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a48      	ldr	r2, [pc, #288]	; (80010e0 <HAL_GPIO_Init+0x2f4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x1fe>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a47      	ldr	r2, [pc, #284]	; (80010e4 <HAL_GPIO_Init+0x2f8>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x1fa>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a46      	ldr	r2, [pc, #280]	; (80010e8 <HAL_GPIO_Init+0x2fc>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x1f6>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a45      	ldr	r2, [pc, #276]	; (80010ec <HAL_GPIO_Init+0x300>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x1f2>
 8000fda:	2304      	movs	r3, #4
 8000fdc:	e008      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fde:	2307      	movs	r3, #7
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e004      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e002      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_GPIO_Init+0x204>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	f002 0203 	and.w	r2, r2, #3
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001000:	4935      	ldr	r1, [pc, #212]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100e:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001032:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001038:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <HAL_GPIO_Init+0x304>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105c:	4a24      	ldr	r2, [pc, #144]	; (80010f0 <HAL_GPIO_Init+0x304>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001086:	4a1a      	ldr	r2, [pc, #104]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_GPIO_Init+0x304>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b0:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <HAL_GPIO_Init+0x304>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	f67f aea2 	bls.w	8000e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40013800 	.word	0x40013800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40020800 	.word	0x40020800
 80010e8:	40020c00 	.word	0x40020c00
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40013c00 	.word	0x40013c00

080010f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e267      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	d075      	beq.n	80011fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001112:	4b88      	ldr	r3, [pc, #544]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
 800111a:	2b04      	cmp	r3, #4
 800111c:	d00c      	beq.n	8001138 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111e:	4b85      	ldr	r3, [pc, #532]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001126:	2b08      	cmp	r3, #8
 8001128:	d112      	bne.n	8001150 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112a:	4b82      	ldr	r3, [pc, #520]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001136:	d10b      	bne.n	8001150 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	4b7e      	ldr	r3, [pc, #504]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d05b      	beq.n	80011fc <HAL_RCC_OscConfig+0x108>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d157      	bne.n	80011fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e242      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001158:	d106      	bne.n	8001168 <HAL_RCC_OscConfig+0x74>
 800115a:	4b76      	ldr	r3, [pc, #472]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a75      	ldr	r2, [pc, #468]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 8001160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e01d      	b.n	80011a4 <HAL_RCC_OscConfig+0xb0>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001170:	d10c      	bne.n	800118c <HAL_RCC_OscConfig+0x98>
 8001172:	4b70      	ldr	r3, [pc, #448]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a6f      	ldr	r2, [pc, #444]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 8001178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	4b6d      	ldr	r3, [pc, #436]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a6c      	ldr	r2, [pc, #432]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e00b      	b.n	80011a4 <HAL_RCC_OscConfig+0xb0>
 800118c:	4b69      	ldr	r3, [pc, #420]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a68      	ldr	r2, [pc, #416]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 8001192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b66      	ldr	r3, [pc, #408]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a65      	ldr	r2, [pc, #404]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 800119e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d013      	beq.n	80011d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fd30 	bl	8000c10 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fd2c 	bl	8000c10 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e207      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	4b5b      	ldr	r3, [pc, #364]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0xc0>
 80011d2:	e014      	b.n	80011fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fd1c 	bl	8000c10 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff fd18 	bl	8000c10 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	; 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e1f3      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ee:	4b51      	ldr	r3, [pc, #324]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0xe8>
 80011fa:	e000      	b.n	80011fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d063      	beq.n	80012d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800120a:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001216:	4b47      	ldr	r3, [pc, #284]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121e:	2b08      	cmp	r3, #8
 8001220:	d11c      	bne.n	800125c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001222:	4b44      	ldr	r3, [pc, #272]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d116      	bne.n	800125c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	4b41      	ldr	r3, [pc, #260]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <HAL_RCC_OscConfig+0x152>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d001      	beq.n	8001246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e1c7      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	4937      	ldr	r1, [pc, #220]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	e03a      	b.n	80012d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d020      	beq.n	80012a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001264:	4b34      	ldr	r3, [pc, #208]	; (8001338 <HAL_RCC_OscConfig+0x244>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126a:	f7ff fcd1 	bl	8000c10 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001272:	f7ff fccd 	bl	8000c10 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e1a8      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001284:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001290:	4b28      	ldr	r3, [pc, #160]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4925      	ldr	r1, [pc, #148]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
 80012a4:	e015      	b.n	80012d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <HAL_RCC_OscConfig+0x244>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fcb0 	bl	8000c10 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff fcac 	bl	8000c10 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e187      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d036      	beq.n	800134c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d016      	beq.n	8001314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_RCC_OscConfig+0x248>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ec:	f7ff fc90 	bl	8000c10 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff fc8c 	bl	8000c10 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e167      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_RCC_OscConfig+0x240>)
 8001308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x200>
 8001312:	e01b      	b.n	800134c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_RCC_OscConfig+0x248>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fc79 	bl	8000c10 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	e00e      	b.n	8001340 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001322:	f7ff fc75 	bl	8000c10 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d907      	bls.n	8001340 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e150      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
 8001334:	40023800 	.word	0x40023800
 8001338:	42470000 	.word	0x42470000
 800133c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001340:	4b88      	ldr	r3, [pc, #544]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 8001342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1ea      	bne.n	8001322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 8097 	beq.w	8001488 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135e:	4b81      	ldr	r3, [pc, #516]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10f      	bne.n	800138a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b7d      	ldr	r3, [pc, #500]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a7c      	ldr	r2, [pc, #496]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
 800137a:	4b7a      	ldr	r3, [pc, #488]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001386:	2301      	movs	r3, #1
 8001388:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138a:	4b77      	ldr	r3, [pc, #476]	; (8001568 <HAL_RCC_OscConfig+0x474>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001392:	2b00      	cmp	r3, #0
 8001394:	d118      	bne.n	80013c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001396:	4b74      	ldr	r3, [pc, #464]	; (8001568 <HAL_RCC_OscConfig+0x474>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a73      	ldr	r2, [pc, #460]	; (8001568 <HAL_RCC_OscConfig+0x474>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fc35 	bl	8000c10 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013aa:	f7ff fc31 	bl	8000c10 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e10c      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013bc:	4b6a      	ldr	r3, [pc, #424]	; (8001568 <HAL_RCC_OscConfig+0x474>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x2ea>
 80013d0:	4b64      	ldr	r3, [pc, #400]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 80013d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d4:	4a63      	ldr	r2, [pc, #396]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6713      	str	r3, [r2, #112]	; 0x70
 80013dc:	e01c      	b.n	8001418 <HAL_RCC_OscConfig+0x324>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b05      	cmp	r3, #5
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x30c>
 80013e6:	4b5f      	ldr	r3, [pc, #380]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	4a5e      	ldr	r2, [pc, #376]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6713      	str	r3, [r2, #112]	; 0x70
 80013f2:	4b5c      	ldr	r3, [pc, #368]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f6:	4a5b      	ldr	r2, [pc, #364]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6713      	str	r3, [r2, #112]	; 0x70
 80013fe:	e00b      	b.n	8001418 <HAL_RCC_OscConfig+0x324>
 8001400:	4b58      	ldr	r3, [pc, #352]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001404:	4a57      	ldr	r2, [pc, #348]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	6713      	str	r3, [r2, #112]	; 0x70
 800140c:	4b55      	ldr	r3, [pc, #340]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001410:	4a54      	ldr	r2, [pc, #336]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 8001412:	f023 0304 	bic.w	r3, r3, #4
 8001416:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d015      	beq.n	800144c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001420:	f7ff fbf6 	bl	8000c10 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001426:	e00a      	b.n	800143e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001428:	f7ff fbf2 	bl	8000c10 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f241 3288 	movw	r2, #5000	; 0x1388
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e0cb      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143e:	4b49      	ldr	r3, [pc, #292]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0ee      	beq.n	8001428 <HAL_RCC_OscConfig+0x334>
 800144a:	e014      	b.n	8001476 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144c:	f7ff fbe0 	bl	8000c10 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001452:	e00a      	b.n	800146a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001454:	f7ff fbdc 	bl	8000c10 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001462:	4293      	cmp	r3, r2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e0b5      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146a:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1ee      	bne.n	8001454 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001476:	7dfb      	ldrb	r3, [r7, #23]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d105      	bne.n	8001488 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147c:	4b39      	ldr	r3, [pc, #228]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	4a38      	ldr	r2, [pc, #224]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 8001482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001486:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80a1 	beq.w	80015d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001492:	4b34      	ldr	r3, [pc, #208]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b08      	cmp	r3, #8
 800149c:	d05c      	beq.n	8001558 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d141      	bne.n	800152a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <HAL_RCC_OscConfig+0x478>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fbb0 	bl	8000c10 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff fbac 	bl	8000c10 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e087      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c6:	4b27      	ldr	r3, [pc, #156]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69da      	ldr	r2, [r3, #28]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	019b      	lsls	r3, r3, #6
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	085b      	lsrs	r3, r3, #1
 80014ea:	3b01      	subs	r3, #1
 80014ec:	041b      	lsls	r3, r3, #16
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	061b      	lsls	r3, r3, #24
 80014f6:	491b      	ldr	r1, [pc, #108]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_RCC_OscConfig+0x478>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff fb85 	bl	8000c10 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150a:	f7ff fb81 	bl	8000c10 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e05c      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x416>
 8001528:	e054      	b.n	80015d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_RCC_OscConfig+0x478>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fb6e 	bl	8000c10 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001538:	f7ff fb6a 	bl	8000c10 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e045      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_RCC_OscConfig+0x470>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x444>
 8001556:	e03d      	b.n	80015d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d107      	bne.n	8001570 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e038      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
 8001564:	40023800 	.word	0x40023800
 8001568:	40007000 	.word	0x40007000
 800156c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_RCC_OscConfig+0x4ec>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d028      	beq.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001588:	429a      	cmp	r2, r3
 800158a:	d121      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001596:	429a      	cmp	r2, r3
 8001598:	d11a      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015a0:	4013      	ands	r3, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d111      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	085b      	lsrs	r3, r3, #1
 80015b8:	3b01      	subs	r3, #1
 80015ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015bc:	429a      	cmp	r2, r3
 80015be:	d107      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0cc      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015f8:	4b68      	ldr	r3, [pc, #416]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d90c      	bls.n	8001620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001606:	4b65      	ldr	r3, [pc, #404]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160e:	4b63      	ldr	r3, [pc, #396]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d001      	beq.n	8001620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0b8      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d020      	beq.n	800166e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001638:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	4a58      	ldr	r2, [pc, #352]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001650:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	4a52      	ldr	r2, [pc, #328]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800165a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800165c:	4b50      	ldr	r3, [pc, #320]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	494d      	ldr	r1, [pc, #308]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	4313      	orrs	r3, r2
 800166c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d044      	beq.n	8001704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d107      	bne.n	8001692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d119      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e07f      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d003      	beq.n	80016a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a2:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d109      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e06f      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b2:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e067      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016c2:	4b37      	ldr	r3, [pc, #220]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f023 0203 	bic.w	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4934      	ldr	r1, [pc, #208]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d4:	f7ff fa9c 	bl	8000c10 <HAL_GetTick>
 80016d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016dc:	f7ff fa98 	bl	8000c10 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e04f      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f2:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 020c 	and.w	r2, r3, #12
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	429a      	cmp	r2, r3
 8001702:	d1eb      	bne.n	80016dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d20c      	bcs.n	800172c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e032      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4916      	ldr	r1, [pc, #88]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d009      	beq.n	800176a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	490e      	ldr	r1, [pc, #56]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800176a:	f000 f821 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 800176e:	4602      	mov	r2, r0
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	490a      	ldr	r1, [pc, #40]	; (80017a4 <HAL_RCC_ClockConfig+0x1c0>)
 800177c:	5ccb      	ldrb	r3, [r1, r3]
 800177e:	fa22 f303 	lsr.w	r3, r2, r3
 8001782:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_RCC_ClockConfig+0x1c8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff f8b2 	bl	80008f4 <HAL_InitTick>

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023c00 	.word	0x40023c00
 80017a0:	40023800 	.word	0x40023800
 80017a4:	08005e60 	.word	0x08005e60
 80017a8:	20000000 	.word	0x20000000
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b4:	b090      	sub	sp, #64	; 0x40
 80017b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
 80017bc:	2300      	movs	r3, #0
 80017be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017c0:	2300      	movs	r3, #0
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d00d      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0x40>
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	f200 80a1 	bhi.w	800191c <HAL_RCC_GetSysClockFreq+0x16c>
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x34>
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_GetSysClockFreq+0x3a>
 80017e2:	e09b      	b.n	800191c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e4:	4b53      	ldr	r3, [pc, #332]	; (8001934 <HAL_RCC_GetSysClockFreq+0x184>)
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80017e8:	e09b      	b.n	8001922 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ea:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_GetSysClockFreq+0x188>)
 80017ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017ee:	e098      	b.n	8001922 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f0:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <HAL_RCC_GetSysClockFreq+0x180>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017fa:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <HAL_RCC_GetSysClockFreq+0x180>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d028      	beq.n	8001858 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001806:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <HAL_RCC_GetSysClockFreq+0x180>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	099b      	lsrs	r3, r3, #6
 800180c:	2200      	movs	r2, #0
 800180e:	623b      	str	r3, [r7, #32]
 8001810:	627a      	str	r2, [r7, #36]	; 0x24
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001818:	2100      	movs	r1, #0
 800181a:	4b47      	ldr	r3, [pc, #284]	; (8001938 <HAL_RCC_GetSysClockFreq+0x188>)
 800181c:	fb03 f201 	mul.w	r2, r3, r1
 8001820:	2300      	movs	r3, #0
 8001822:	fb00 f303 	mul.w	r3, r0, r3
 8001826:	4413      	add	r3, r2
 8001828:	4a43      	ldr	r2, [pc, #268]	; (8001938 <HAL_RCC_GetSysClockFreq+0x188>)
 800182a:	fba0 1202 	umull	r1, r2, r0, r2
 800182e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001830:	460a      	mov	r2, r1
 8001832:	62ba      	str	r2, [r7, #40]	; 0x28
 8001834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001836:	4413      	add	r3, r2
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800183a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183c:	2200      	movs	r2, #0
 800183e:	61bb      	str	r3, [r7, #24]
 8001840:	61fa      	str	r2, [r7, #28]
 8001842:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001846:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800184a:	f7fe fcc9 	bl	80001e0 <__aeabi_uldivmod>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4613      	mov	r3, r2
 8001854:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001856:	e053      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001858:	4b35      	ldr	r3, [pc, #212]	; (8001930 <HAL_RCC_GetSysClockFreq+0x180>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	099b      	lsrs	r3, r3, #6
 800185e:	2200      	movs	r2, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	617a      	str	r2, [r7, #20]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800186a:	f04f 0b00 	mov.w	fp, #0
 800186e:	4652      	mov	r2, sl
 8001870:	465b      	mov	r3, fp
 8001872:	f04f 0000 	mov.w	r0, #0
 8001876:	f04f 0100 	mov.w	r1, #0
 800187a:	0159      	lsls	r1, r3, #5
 800187c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001880:	0150      	lsls	r0, r2, #5
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	ebb2 080a 	subs.w	r8, r2, sl
 800188a:	eb63 090b 	sbc.w	r9, r3, fp
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800189a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800189e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018a2:	ebb2 0408 	subs.w	r4, r2, r8
 80018a6:	eb63 0509 	sbc.w	r5, r3, r9
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	00eb      	lsls	r3, r5, #3
 80018b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018b8:	00e2      	lsls	r2, r4, #3
 80018ba:	4614      	mov	r4, r2
 80018bc:	461d      	mov	r5, r3
 80018be:	eb14 030a 	adds.w	r3, r4, sl
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	eb45 030b 	adc.w	r3, r5, fp
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018d6:	4629      	mov	r1, r5
 80018d8:	028b      	lsls	r3, r1, #10
 80018da:	4621      	mov	r1, r4
 80018dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018e0:	4621      	mov	r1, r4
 80018e2:	028a      	lsls	r2, r1, #10
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ea:	2200      	movs	r2, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	60fa      	str	r2, [r7, #12]
 80018f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018f4:	f7fe fc74 	bl	80001e0 <__aeabi_uldivmod>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4613      	mov	r3, r2
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_GetSysClockFreq+0x180>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	0c1b      	lsrs	r3, r3, #16
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	3301      	adds	r3, #1
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001910:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001914:	fbb2 f3f3 	udiv	r3, r2, r3
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800191a:	e002      	b.n	8001922 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_RCC_GetSysClockFreq+0x184>)
 800191e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001924:	4618      	mov	r0, r3
 8001926:	3740      	adds	r7, #64	; 0x40
 8001928:	46bd      	mov	sp, r7
 800192a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	00f42400 	.word	0x00f42400
 8001938:	017d7840 	.word	0x017d7840

0800193c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <HAL_RCC_GetHCLKFreq+0x14>)
 8001942:	681b      	ldr	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000000 	.word	0x20000000

08001954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001958:	f7ff fff0 	bl	800193c <HAL_RCC_GetHCLKFreq>
 800195c:	4602      	mov	r2, r0
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	0a9b      	lsrs	r3, r3, #10
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	4903      	ldr	r1, [pc, #12]	; (8001978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800196a:	5ccb      	ldrb	r3, [r1, r3]
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001970:	4618      	mov	r0, r3
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	08005e70 	.word	0x08005e70

0800197c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001980:	f7ff ffdc 	bl	800193c <HAL_RCC_GetHCLKFreq>
 8001984:	4602      	mov	r2, r0
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	0b5b      	lsrs	r3, r3, #13
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	4903      	ldr	r1, [pc, #12]	; (80019a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001992:	5ccb      	ldrb	r3, [r1, r3]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	08005e70 	.word	0x08005e70

080019a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	220f      	movs	r2, #15
 80019b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_RCC_GetClockConfig+0x5c>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0203 	and.w	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_RCC_GetClockConfig+0x5c>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <HAL_RCC_GetClockConfig+0x60>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0207 	and.w	r2, r3, #7
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	601a      	str	r2, [r3, #0]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40023c00 	.word	0x40023c00

08001a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e041      	b.n	8001a9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d106      	bne.n	8001a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f839 	bl	8001aa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3304      	adds	r3, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4610      	mov	r0, r2
 8001a48:	f000 f9ca 	bl	8001de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d001      	beq.n	8001ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e044      	b.n	8001b5e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1e      	ldr	r2, [pc, #120]	; (8001b6c <HAL_TIM_Base_Start_IT+0xb0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d018      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x6c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001afe:	d013      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x6c>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00e      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x6c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d009      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x6c>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d004      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x6c>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a16      	ldr	r2, [pc, #88]	; (8001b7c <HAL_TIM_Base_Start_IT+0xc0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d111      	bne.n	8001b4c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d010      	beq.n	8001b5c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4a:	e007      	b.n	8001b5c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40010000 	.word	0x40010000
 8001b70:	40000400 	.word	0x40000400
 8001b74:	40000800 	.word	0x40000800
 8001b78:	40000c00 	.word	0x40000c00
 8001b7c:	40014000 	.word	0x40014000

08001b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d122      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d11b      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f06f 0202 	mvn.w	r2, #2
 8001bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f8ee 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001bc8:	e005      	b.n	8001bd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8e0 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f8f1 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d122      	bne.n	8001c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d11b      	bne.n	8001c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0204 	mvn.w	r2, #4
 8001c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2202      	movs	r2, #2
 8001c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f8c4 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001c1c:	e005      	b.n	8001c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f8b6 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f8c7 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d122      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d11b      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 0208 	mvn.w	r2, #8
 8001c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2204      	movs	r2, #4
 8001c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f89a 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001c70:	e005      	b.n	8001c7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f88c 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f89d 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b10      	cmp	r3, #16
 8001c90:	d122      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	2b10      	cmp	r3, #16
 8001c9e:	d11b      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f06f 0210 	mvn.w	r2, #16
 8001ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2208      	movs	r2, #8
 8001cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f870 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001cc4:	e005      	b.n	8001cd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f862 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f873 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d10e      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d107      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0201 	mvn.w	r2, #1
 8001cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7fe fd6c 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	2b80      	cmp	r3, #128	; 0x80
 8001d10:	d10e      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1c:	2b80      	cmp	r3, #128	; 0x80
 8001d1e:	d107      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f8e2 	bl	8001ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3a:	2b40      	cmp	r3, #64	; 0x40
 8001d3c:	d10e      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d48:	2b40      	cmp	r3, #64	; 0x40
 8001d4a:	d107      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f838 	bl	8001dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	d10e      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	d107      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0220 	mvn.w	r2, #32
 8001d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8ac 	bl	8001ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a34      	ldr	r2, [pc, #208]	; (8001ec4 <TIM_Base_SetConfig+0xe4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00f      	beq.n	8001e18 <TIM_Base_SetConfig+0x38>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfe:	d00b      	beq.n	8001e18 <TIM_Base_SetConfig+0x38>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a31      	ldr	r2, [pc, #196]	; (8001ec8 <TIM_Base_SetConfig+0xe8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d007      	beq.n	8001e18 <TIM_Base_SetConfig+0x38>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a30      	ldr	r2, [pc, #192]	; (8001ecc <TIM_Base_SetConfig+0xec>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d003      	beq.n	8001e18 <TIM_Base_SetConfig+0x38>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a2f      	ldr	r2, [pc, #188]	; (8001ed0 <TIM_Base_SetConfig+0xf0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d108      	bne.n	8001e2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a25      	ldr	r2, [pc, #148]	; (8001ec4 <TIM_Base_SetConfig+0xe4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01b      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e38:	d017      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a22      	ldr	r2, [pc, #136]	; (8001ec8 <TIM_Base_SetConfig+0xe8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <TIM_Base_SetConfig+0xec>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00f      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a20      	ldr	r2, [pc, #128]	; (8001ed0 <TIM_Base_SetConfig+0xf0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00b      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a1f      	ldr	r2, [pc, #124]	; (8001ed4 <TIM_Base_SetConfig+0xf4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d007      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a1e      	ldr	r2, [pc, #120]	; (8001ed8 <TIM_Base_SetConfig+0xf8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d003      	beq.n	8001e6a <TIM_Base_SetConfig+0x8a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <TIM_Base_SetConfig+0xfc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d108      	bne.n	8001e7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <TIM_Base_SetConfig+0xe4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d103      	bne.n	8001eb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	615a      	str	r2, [r3, #20]
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40000800 	.word	0x40000800
 8001ed0:	40000c00 	.word	0x40000c00
 8001ed4:	40014000 	.word	0x40014000
 8001ed8:	40014400 	.word	0x40014400
 8001edc:	40014800 	.word	0x40014800

08001ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e03f      	b.n	8001f9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe fc98 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2224      	movs	r2, #36	; 0x24
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f829 	bl	8001fa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa8:	b0c0      	sub	sp, #256	; 0x100
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc0:	68d9      	ldr	r1, [r3, #12]
 8001fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	ea40 0301 	orr.w	r3, r0, r1
 8001fcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001ffc:	f021 010c 	bic.w	r1, r1, #12
 8002000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800200a:	430b      	orrs	r3, r1
 800200c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800200e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800201a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201e:	6999      	ldr	r1, [r3, #24]
 8002020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	ea40 0301 	orr.w	r3, r0, r1
 800202a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800202c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4b8f      	ldr	r3, [pc, #572]	; (8002270 <UART_SetConfig+0x2cc>)
 8002034:	429a      	cmp	r2, r3
 8002036:	d005      	beq.n	8002044 <UART_SetConfig+0xa0>
 8002038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b8d      	ldr	r3, [pc, #564]	; (8002274 <UART_SetConfig+0x2d0>)
 8002040:	429a      	cmp	r2, r3
 8002042:	d104      	bne.n	800204e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002044:	f7ff fc9a 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 8002048:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800204c:	e003      	b.n	8002056 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800204e:	f7ff fc81 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8002052:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002060:	f040 810c 	bne.w	800227c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002068:	2200      	movs	r2, #0
 800206a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800206e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002072:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002076:	4622      	mov	r2, r4
 8002078:	462b      	mov	r3, r5
 800207a:	1891      	adds	r1, r2, r2
 800207c:	65b9      	str	r1, [r7, #88]	; 0x58
 800207e:	415b      	adcs	r3, r3
 8002080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002082:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002086:	4621      	mov	r1, r4
 8002088:	eb12 0801 	adds.w	r8, r2, r1
 800208c:	4629      	mov	r1, r5
 800208e:	eb43 0901 	adc.w	r9, r3, r1
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800209e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020a6:	4690      	mov	r8, r2
 80020a8:	4699      	mov	r9, r3
 80020aa:	4623      	mov	r3, r4
 80020ac:	eb18 0303 	adds.w	r3, r8, r3
 80020b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80020b4:	462b      	mov	r3, r5
 80020b6:	eb49 0303 	adc.w	r3, r9, r3
 80020ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80020be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80020ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80020ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80020d2:	460b      	mov	r3, r1
 80020d4:	18db      	adds	r3, r3, r3
 80020d6:	653b      	str	r3, [r7, #80]	; 0x50
 80020d8:	4613      	mov	r3, r2
 80020da:	eb42 0303 	adc.w	r3, r2, r3
 80020de:	657b      	str	r3, [r7, #84]	; 0x54
 80020e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80020e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80020e8:	f7fe f87a 	bl	80001e0 <__aeabi_uldivmod>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4b61      	ldr	r3, [pc, #388]	; (8002278 <UART_SetConfig+0x2d4>)
 80020f2:	fba3 2302 	umull	r2, r3, r3, r2
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	011c      	lsls	r4, r3, #4
 80020fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020fe:	2200      	movs	r2, #0
 8002100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002104:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002108:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800210c:	4642      	mov	r2, r8
 800210e:	464b      	mov	r3, r9
 8002110:	1891      	adds	r1, r2, r2
 8002112:	64b9      	str	r1, [r7, #72]	; 0x48
 8002114:	415b      	adcs	r3, r3
 8002116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002118:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800211c:	4641      	mov	r1, r8
 800211e:	eb12 0a01 	adds.w	sl, r2, r1
 8002122:	4649      	mov	r1, r9
 8002124:	eb43 0b01 	adc.w	fp, r3, r1
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002134:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800213c:	4692      	mov	sl, r2
 800213e:	469b      	mov	fp, r3
 8002140:	4643      	mov	r3, r8
 8002142:	eb1a 0303 	adds.w	r3, sl, r3
 8002146:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800214a:	464b      	mov	r3, r9
 800214c:	eb4b 0303 	adc.w	r3, fp, r3
 8002150:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002160:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002164:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002168:	460b      	mov	r3, r1
 800216a:	18db      	adds	r3, r3, r3
 800216c:	643b      	str	r3, [r7, #64]	; 0x40
 800216e:	4613      	mov	r3, r2
 8002170:	eb42 0303 	adc.w	r3, r2, r3
 8002174:	647b      	str	r3, [r7, #68]	; 0x44
 8002176:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800217a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800217e:	f7fe f82f 	bl	80001e0 <__aeabi_uldivmod>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4611      	mov	r1, r2
 8002188:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <UART_SetConfig+0x2d4>)
 800218a:	fba3 2301 	umull	r2, r3, r3, r1
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2264      	movs	r2, #100	; 0x64
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	1acb      	subs	r3, r1, r3
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800219e:	4b36      	ldr	r3, [pc, #216]	; (8002278 <UART_SetConfig+0x2d4>)
 80021a0:	fba3 2302 	umull	r2, r3, r3, r2
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021ac:	441c      	add	r4, r3
 80021ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021b2:	2200      	movs	r2, #0
 80021b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80021bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80021c0:	4642      	mov	r2, r8
 80021c2:	464b      	mov	r3, r9
 80021c4:	1891      	adds	r1, r2, r2
 80021c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80021c8:	415b      	adcs	r3, r3
 80021ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021d0:	4641      	mov	r1, r8
 80021d2:	1851      	adds	r1, r2, r1
 80021d4:	6339      	str	r1, [r7, #48]	; 0x30
 80021d6:	4649      	mov	r1, r9
 80021d8:	414b      	adcs	r3, r1
 80021da:	637b      	str	r3, [r7, #52]	; 0x34
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80021e8:	4659      	mov	r1, fp
 80021ea:	00cb      	lsls	r3, r1, #3
 80021ec:	4651      	mov	r1, sl
 80021ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021f2:	4651      	mov	r1, sl
 80021f4:	00ca      	lsls	r2, r1, #3
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	4603      	mov	r3, r0
 80021fc:	4642      	mov	r2, r8
 80021fe:	189b      	adds	r3, r3, r2
 8002200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002204:	464b      	mov	r3, r9
 8002206:	460a      	mov	r2, r1
 8002208:	eb42 0303 	adc.w	r3, r2, r3
 800220c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800221c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002220:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002224:	460b      	mov	r3, r1
 8002226:	18db      	adds	r3, r3, r3
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
 800222a:	4613      	mov	r3, r2
 800222c:	eb42 0303 	adc.w	r3, r2, r3
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002232:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002236:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800223a:	f7fd ffd1 	bl	80001e0 <__aeabi_uldivmod>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <UART_SetConfig+0x2d4>)
 8002244:	fba3 1302 	umull	r1, r3, r3, r2
 8002248:	095b      	lsrs	r3, r3, #5
 800224a:	2164      	movs	r1, #100	; 0x64
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	3332      	adds	r3, #50	; 0x32
 8002256:	4a08      	ldr	r2, [pc, #32]	; (8002278 <UART_SetConfig+0x2d4>)
 8002258:	fba2 2303 	umull	r2, r3, r2, r3
 800225c:	095b      	lsrs	r3, r3, #5
 800225e:	f003 0207 	and.w	r2, r3, #7
 8002262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4422      	add	r2, r4
 800226a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800226c:	e105      	b.n	800247a <UART_SetConfig+0x4d6>
 800226e:	bf00      	nop
 8002270:	40011000 	.word	0x40011000
 8002274:	40011400 	.word	0x40011400
 8002278:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800227c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002280:	2200      	movs	r2, #0
 8002282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002286:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800228a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800228e:	4642      	mov	r2, r8
 8002290:	464b      	mov	r3, r9
 8002292:	1891      	adds	r1, r2, r2
 8002294:	6239      	str	r1, [r7, #32]
 8002296:	415b      	adcs	r3, r3
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
 800229a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800229e:	4641      	mov	r1, r8
 80022a0:	1854      	adds	r4, r2, r1
 80022a2:	4649      	mov	r1, r9
 80022a4:	eb43 0501 	adc.w	r5, r3, r1
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	00eb      	lsls	r3, r5, #3
 80022b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022b6:	00e2      	lsls	r2, r4, #3
 80022b8:	4614      	mov	r4, r2
 80022ba:	461d      	mov	r5, r3
 80022bc:	4643      	mov	r3, r8
 80022be:	18e3      	adds	r3, r4, r3
 80022c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022c4:	464b      	mov	r3, r9
 80022c6:	eb45 0303 	adc.w	r3, r5, r3
 80022ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80022ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80022ea:	4629      	mov	r1, r5
 80022ec:	008b      	lsls	r3, r1, #2
 80022ee:	4621      	mov	r1, r4
 80022f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022f4:	4621      	mov	r1, r4
 80022f6:	008a      	lsls	r2, r1, #2
 80022f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80022fc:	f7fd ff70 	bl	80001e0 <__aeabi_uldivmod>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4b60      	ldr	r3, [pc, #384]	; (8002488 <UART_SetConfig+0x4e4>)
 8002306:	fba3 2302 	umull	r2, r3, r3, r2
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	011c      	lsls	r4, r3, #4
 800230e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002312:	2200      	movs	r2, #0
 8002314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002318:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800231c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002320:	4642      	mov	r2, r8
 8002322:	464b      	mov	r3, r9
 8002324:	1891      	adds	r1, r2, r2
 8002326:	61b9      	str	r1, [r7, #24]
 8002328:	415b      	adcs	r3, r3
 800232a:	61fb      	str	r3, [r7, #28]
 800232c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002330:	4641      	mov	r1, r8
 8002332:	1851      	adds	r1, r2, r1
 8002334:	6139      	str	r1, [r7, #16]
 8002336:	4649      	mov	r1, r9
 8002338:	414b      	adcs	r3, r1
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002348:	4659      	mov	r1, fp
 800234a:	00cb      	lsls	r3, r1, #3
 800234c:	4651      	mov	r1, sl
 800234e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002352:	4651      	mov	r1, sl
 8002354:	00ca      	lsls	r2, r1, #3
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	4603      	mov	r3, r0
 800235c:	4642      	mov	r2, r8
 800235e:	189b      	adds	r3, r3, r2
 8002360:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002364:	464b      	mov	r3, r9
 8002366:	460a      	mov	r2, r1
 8002368:	eb42 0303 	adc.w	r3, r2, r3
 800236c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	67bb      	str	r3, [r7, #120]	; 0x78
 800237a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002388:	4649      	mov	r1, r9
 800238a:	008b      	lsls	r3, r1, #2
 800238c:	4641      	mov	r1, r8
 800238e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002392:	4641      	mov	r1, r8
 8002394:	008a      	lsls	r2, r1, #2
 8002396:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800239a:	f7fd ff21 	bl	80001e0 <__aeabi_uldivmod>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4b39      	ldr	r3, [pc, #228]	; (8002488 <UART_SetConfig+0x4e4>)
 80023a4:	fba3 1302 	umull	r1, r3, r3, r2
 80023a8:	095b      	lsrs	r3, r3, #5
 80023aa:	2164      	movs	r1, #100	; 0x64
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	3332      	adds	r3, #50	; 0x32
 80023b6:	4a34      	ldr	r2, [pc, #208]	; (8002488 <UART_SetConfig+0x4e4>)
 80023b8:	fba2 2303 	umull	r2, r3, r2, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c2:	441c      	add	r4, r3
 80023c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023c8:	2200      	movs	r2, #0
 80023ca:	673b      	str	r3, [r7, #112]	; 0x70
 80023cc:	677a      	str	r2, [r7, #116]	; 0x74
 80023ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80023d2:	4642      	mov	r2, r8
 80023d4:	464b      	mov	r3, r9
 80023d6:	1891      	adds	r1, r2, r2
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	415b      	adcs	r3, r3
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023e2:	4641      	mov	r1, r8
 80023e4:	1851      	adds	r1, r2, r1
 80023e6:	6039      	str	r1, [r7, #0]
 80023e8:	4649      	mov	r1, r9
 80023ea:	414b      	adcs	r3, r1
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023fa:	4659      	mov	r1, fp
 80023fc:	00cb      	lsls	r3, r1, #3
 80023fe:	4651      	mov	r1, sl
 8002400:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002404:	4651      	mov	r1, sl
 8002406:	00ca      	lsls	r2, r1, #3
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	4603      	mov	r3, r0
 800240e:	4642      	mov	r2, r8
 8002410:	189b      	adds	r3, r3, r2
 8002412:	66bb      	str	r3, [r7, #104]	; 0x68
 8002414:	464b      	mov	r3, r9
 8002416:	460a      	mov	r2, r1
 8002418:	eb42 0303 	adc.w	r3, r2, r3
 800241c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800241e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	663b      	str	r3, [r7, #96]	; 0x60
 8002428:	667a      	str	r2, [r7, #100]	; 0x64
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002436:	4649      	mov	r1, r9
 8002438:	008b      	lsls	r3, r1, #2
 800243a:	4641      	mov	r1, r8
 800243c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002440:	4641      	mov	r1, r8
 8002442:	008a      	lsls	r2, r1, #2
 8002444:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002448:	f7fd feca 	bl	80001e0 <__aeabi_uldivmod>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <UART_SetConfig+0x4e4>)
 8002452:	fba3 1302 	umull	r1, r3, r3, r2
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2164      	movs	r1, #100	; 0x64
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	3332      	adds	r3, #50	; 0x32
 8002464:	4a08      	ldr	r2, [pc, #32]	; (8002488 <UART_SetConfig+0x4e4>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	f003 020f 	and.w	r2, r3, #15
 8002470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4422      	add	r2, r4
 8002478:	609a      	str	r2, [r3, #8]
}
 800247a:	bf00      	nop
 800247c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002480:	46bd      	mov	sp, r7
 8002482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002486:	bf00      	nop
 8002488:	51eb851f 	.word	0x51eb851f

0800248c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <SysTick_Handler+0x1c>)
 8002492:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002494:	f001 fd84 	bl	8003fa0 <xTaskGetSchedulerState>
 8002498:	4603      	mov	r3, r0
 800249a:	2b01      	cmp	r3, #1
 800249c:	d001      	beq.n	80024a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800249e:	f002 fc6b 	bl	8004d78 <xPortSysTickHandler>
  }
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	e000e010 	.word	0xe000e010

080024ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80024bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4a06      	ldr	r2, [pc, #24]	; (80024dc <vApplicationGetIdleTaskMemory+0x30>)
 80024c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2280      	movs	r2, #128	; 0x80
 80024c8:	601a      	str	r2, [r3, #0]
}
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000134 	.word	0x20000134
 80024dc:	200001f0 	.word	0x200001f0

080024e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <vApplicationGetTimerTaskMemory+0x2c>)
 80024f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	4a06      	ldr	r2, [pc, #24]	; (8002510 <vApplicationGetTimerTaskMemory+0x30>)
 80024f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024fe:	601a      	str	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	200003f0 	.word	0x200003f0
 8002510:	200004ac 	.word	0x200004ac

08002514 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f103 0208 	add.w	r2, r3, #8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800252c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f103 0208 	add.w	r2, r3, #8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f103 0208 	add.w	r2, r3, #8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800256e:	b480      	push	{r7}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	601a      	str	r2, [r3, #0]
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025b6:	b480      	push	{r7}
 80025b8:	b085      	sub	sp, #20
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025cc:	d103      	bne.n	80025d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e00c      	b.n	80025f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3308      	adds	r3, #8
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	e002      	b.n	80025e4 <vListInsert+0x2e>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d2f6      	bcs.n	80025de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	601a      	str	r2, [r3, #0]
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6892      	ldr	r2, [r2, #8]
 800263e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6852      	ldr	r2, [r2, #4]
 8002648:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	d103      	bne.n	800265c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10a      	bne.n	80026a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026a2:	bf00      	nop
 80026a4:	e7fe      	b.n	80026a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80026a6:	f002 fad5 	bl	8004c54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b2:	68f9      	ldr	r1, [r7, #12]
 80026b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	441a      	add	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	3b01      	subs	r3, #1
 80026d8:	68f9      	ldr	r1, [r7, #12]
 80026da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	441a      	add	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	22ff      	movs	r2, #255	; 0xff
 80026ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	22ff      	movs	r2, #255	; 0xff
 80026f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d114      	bne.n	8002726 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01a      	beq.n	800273a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3310      	adds	r3, #16
 8002708:	4618      	mov	r0, r3
 800270a:	f001 fa87 	bl	8003c1c <xTaskRemoveFromEventList>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d012      	beq.n	800273a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <xQueueGenericReset+0xcc>)
 8002716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	e009      	b.n	800273a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	3310      	adds	r3, #16
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fef2 	bl	8002514 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3324      	adds	r3, #36	; 0x24
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff feed 	bl	8002514 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800273a:	f002 fabb 	bl	8004cb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800273e:	2301      	movs	r3, #1
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	e000ed04 	.word	0xe000ed04

0800274c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08e      	sub	sp, #56	; 0x38
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002764:	f383 8811 	msr	BASEPRI, r3
 8002768:	f3bf 8f6f 	isb	sy
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002772:	bf00      	nop
 8002774:	e7fe      	b.n	8002774 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10a      	bne.n	8002792 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800277c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002780:	f383 8811 	msr	BASEPRI, r3
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800278e:	bf00      	nop
 8002790:	e7fe      	b.n	8002790 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <xQueueGenericCreateStatic+0x52>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <xQueueGenericCreateStatic+0x56>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <xQueueGenericCreateStatic+0x58>
 80027a2:	2300      	movs	r3, #0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	623b      	str	r3, [r7, #32]
}
 80027ba:	bf00      	nop
 80027bc:	e7fe      	b.n	80027bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <xQueueGenericCreateStatic+0x7e>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <xQueueGenericCreateStatic+0x82>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <xQueueGenericCreateStatic+0x84>
 80027ce:	2300      	movs	r3, #0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80027d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	61fb      	str	r3, [r7, #28]
}
 80027e6:	bf00      	nop
 80027e8:	e7fe      	b.n	80027e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80027ea:	2350      	movs	r3, #80	; 0x50
 80027ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b50      	cmp	r3, #80	; 0x50
 80027f2:	d00a      	beq.n	800280a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80027f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	61bb      	str	r3, [r7, #24]
}
 8002806:	bf00      	nop
 8002808:	e7fe      	b.n	8002808 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800280a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800281e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	4613      	mov	r3, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f83f 	bl	80028b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002834:	4618      	mov	r0, r3
 8002836:	3730      	adds	r7, #48	; 0x30
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	; 0x28
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	613b      	str	r3, [r7, #16]
}
 8002862:	bf00      	nop
 8002864:	e7fe      	b.n	8002864 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	3350      	adds	r3, #80	; 0x50
 8002874:	4618      	mov	r0, r3
 8002876:	f002 fb0f 	bl	8004e98 <pvPortMalloc>
 800287a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d011      	beq.n	80028a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3350      	adds	r3, #80	; 0x50
 800288a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002894:	79fa      	ldrb	r2, [r7, #7]
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	4613      	mov	r3, r2
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f805 	bl	80028b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028a6:	69bb      	ldr	r3, [r7, #24]
	}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3720      	adds	r7, #32
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d103      	bne.n	80028cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e002      	b.n	80028d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028de:	2101      	movs	r1, #1
 80028e0:	69b8      	ldr	r0, [r7, #24]
 80028e2:	f7ff fecb 	bl	800267c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08e      	sub	sp, #56	; 0x38
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002906:	2300      	movs	r3, #0
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <xQueueGenericSend+0x32>
	__asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002926:	bf00      	nop
 8002928:	e7fe      	b.n	8002928 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <xQueueGenericSend+0x40>
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <xQueueGenericSend+0x44>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <xQueueGenericSend+0x46>
 800293c:	2300      	movs	r3, #0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10a      	bne.n	8002958 <xQueueGenericSend+0x60>
	__asm volatile
 8002942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002946:	f383 8811 	msr	BASEPRI, r3
 800294a:	f3bf 8f6f 	isb	sy
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002954:	bf00      	nop
 8002956:	e7fe      	b.n	8002956 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d103      	bne.n	8002966 <xQueueGenericSend+0x6e>
 800295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <xQueueGenericSend+0x72>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <xQueueGenericSend+0x74>
 800296a:	2300      	movs	r3, #0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <xQueueGenericSend+0x8e>
	__asm volatile
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	623b      	str	r3, [r7, #32]
}
 8002982:	bf00      	nop
 8002984:	e7fe      	b.n	8002984 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002986:	f001 fb0b 	bl	8003fa0 <xTaskGetSchedulerState>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <xQueueGenericSend+0x9e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <xQueueGenericSend+0xa2>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <xQueueGenericSend+0xa4>
 800299a:	2300      	movs	r3, #0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80029a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	61fb      	str	r3, [r7, #28]
}
 80029b2:	bf00      	nop
 80029b4:	e7fe      	b.n	80029b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029b6:	f002 f94d 	bl	8004c54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d302      	bcc.n	80029cc <xQueueGenericSend+0xd4>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d129      	bne.n	8002a20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029d2:	f000 fb2f 	bl	8003034 <prvCopyDataToQueue>
 80029d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d010      	beq.n	8002a02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e2:	3324      	adds	r3, #36	; 0x24
 80029e4:	4618      	mov	r0, r3
 80029e6:	f001 f919 	bl	8003c1c <xTaskRemoveFromEventList>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d013      	beq.n	8002a18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029f0:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <xQueueGenericSend+0x1f8>)
 80029f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	e00a      	b.n	8002a18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a08:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <xQueueGenericSend+0x1f8>)
 8002a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a18:	f002 f94c 	bl	8004cb4 <vPortExitCritical>
				return pdPASS;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e063      	b.n	8002ae8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d103      	bne.n	8002a2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a26:	f002 f945 	bl	8004cb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e05c      	b.n	8002ae8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d106      	bne.n	8002a42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a34:	f107 0314 	add.w	r3, r7, #20
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 f953 	bl	8003ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a42:	f002 f937 	bl	8004cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a46:	f000 febf 	bl	80037c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a4a:	f002 f903 	bl	8004c54 <vPortEnterCritical>
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a54:	b25b      	sxtb	r3, r3
 8002a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a5a:	d103      	bne.n	8002a64 <xQueueGenericSend+0x16c>
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a6a:	b25b      	sxtb	r3, r3
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a70:	d103      	bne.n	8002a7a <xQueueGenericSend+0x182>
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a7a:	f002 f91b 	bl	8004cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a7e:	1d3a      	adds	r2, r7, #4
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 f942 	bl	8003d10 <xTaskCheckForTimeOut>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d124      	bne.n	8002adc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a94:	f000 fbc6 	bl	8003224 <prvIsQueueFull>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d018      	beq.n	8002ad0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa0:	3310      	adds	r3, #16
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f001 f868 	bl	8003b7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aae:	f000 fb51 	bl	8003154 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ab2:	f000 fe97 	bl	80037e4 <xTaskResumeAll>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f47f af7c 	bne.w	80029b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <xQueueGenericSend+0x1f8>)
 8002ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	e772      	b.n	80029b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ad2:	f000 fb3f 	bl	8003154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ad6:	f000 fe85 	bl	80037e4 <xTaskResumeAll>
 8002ada:	e76c      	b.n	80029b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ade:	f000 fb39 	bl	8003154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ae2:	f000 fe7f 	bl	80037e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ae6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3738      	adds	r7, #56	; 0x38
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	e000ed04 	.word	0xe000ed04

08002af4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b090      	sub	sp, #64	; 0x40
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b1e:	bf00      	nop
 8002b20:	e7fe      	b.n	8002b20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d103      	bne.n	8002b30 <xQueueGenericSendFromISR+0x3c>
 8002b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <xQueueGenericSendFromISR+0x40>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <xQueueGenericSendFromISR+0x42>
 8002b34:	2300      	movs	r3, #0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10a      	bne.n	8002b50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b4c:	bf00      	nop
 8002b4e:	e7fe      	b.n	8002b4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d103      	bne.n	8002b5e <xQueueGenericSendFromISR+0x6a>
 8002b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <xQueueGenericSendFromISR+0x6e>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <xQueueGenericSendFromISR+0x70>
 8002b62:	2300      	movs	r3, #0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	623b      	str	r3, [r7, #32]
}
 8002b7a:	bf00      	nop
 8002b7c:	e7fe      	b.n	8002b7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b7e:	f002 f94b 	bl	8004e18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b82:	f3ef 8211 	mrs	r2, BASEPRI
 8002b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	61fa      	str	r2, [r7, #28]
 8002b98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d302      	bcc.n	8002bb0 <xQueueGenericSendFromISR+0xbc>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d12f      	bne.n	8002c10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002bc6:	f000 fa35 	bl	8003034 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002bca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bd2:	d112      	bne.n	8002bfa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d016      	beq.n	8002c0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bde:	3324      	adds	r3, #36	; 0x24
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 f81b 	bl	8003c1c <xTaskRemoveFromEventList>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00e      	beq.n	8002c0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00b      	beq.n	8002c0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	e007      	b.n	8002c0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002bfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bfe:	3301      	adds	r3, #1
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	b25a      	sxtb	r2, r3
 8002c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002c0e:	e001      	b.n	8002c14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3740      	adds	r7, #64	; 0x40
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08c      	sub	sp, #48	; 0x30
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10a      	bne.n	8002c5c <xQueueReceive+0x30>
	__asm volatile
 8002c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	623b      	str	r3, [r7, #32]
}
 8002c58:	bf00      	nop
 8002c5a:	e7fe      	b.n	8002c5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d103      	bne.n	8002c6a <xQueueReceive+0x3e>
 8002c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <xQueueReceive+0x42>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <xQueueReceive+0x44>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <xQueueReceive+0x5e>
	__asm volatile
 8002c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	61fb      	str	r3, [r7, #28]
}
 8002c86:	bf00      	nop
 8002c88:	e7fe      	b.n	8002c88 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c8a:	f001 f989 	bl	8003fa0 <xTaskGetSchedulerState>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <xQueueReceive+0x6e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <xQueueReceive+0x72>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <xQueueReceive+0x74>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <xQueueReceive+0x8e>
	__asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	61bb      	str	r3, [r7, #24]
}
 8002cb6:	bf00      	nop
 8002cb8:	e7fe      	b.n	8002cb8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cba:	f001 ffcb 	bl	8004c54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01f      	beq.n	8002d0a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cca:	68b9      	ldr	r1, [r7, #8]
 8002ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cce:	f000 fa1b 	bl	8003108 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	1e5a      	subs	r2, r3, #1
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00f      	beq.n	8002d02 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	3310      	adds	r3, #16
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 ff98 	bl	8003c1c <xTaskRemoveFromEventList>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d007      	beq.n	8002d02 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cf2:	4b3d      	ldr	r3, [pc, #244]	; (8002de8 <xQueueReceive+0x1bc>)
 8002cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d02:	f001 ffd7 	bl	8004cb4 <vPortExitCritical>
				return pdPASS;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e069      	b.n	8002dde <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d103      	bne.n	8002d18 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d10:	f001 ffd0 	bl	8004cb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d14:	2300      	movs	r3, #0
 8002d16:	e062      	b.n	8002dde <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d1e:	f107 0310 	add.w	r3, r7, #16
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 ffde 	bl	8003ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d2c:	f001 ffc2 	bl	8004cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d30:	f000 fd4a 	bl	80037c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d34:	f001 ff8e 	bl	8004c54 <vPortEnterCritical>
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d3e:	b25b      	sxtb	r3, r3
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d44:	d103      	bne.n	8002d4e <xQueueReceive+0x122>
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d5a:	d103      	bne.n	8002d64 <xQueueReceive+0x138>
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d64:	f001 ffa6 	bl	8004cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d68:	1d3a      	adds	r2, r7, #4
 8002d6a:	f107 0310 	add.w	r3, r7, #16
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 ffcd 	bl	8003d10 <xTaskCheckForTimeOut>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d123      	bne.n	8002dc4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d7e:	f000 fa3b 	bl	80031f8 <prvIsQueueEmpty>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d017      	beq.n	8002db8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	3324      	adds	r3, #36	; 0x24
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fef3 	bl	8003b7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d98:	f000 f9dc 	bl	8003154 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d9c:	f000 fd22 	bl	80037e4 <xTaskResumeAll>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d189      	bne.n	8002cba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <xQueueReceive+0x1bc>)
 8002da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	e780      	b.n	8002cba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dba:	f000 f9cb 	bl	8003154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dbe:	f000 fd11 	bl	80037e4 <xTaskResumeAll>
 8002dc2:	e77a      	b.n	8002cba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dc6:	f000 f9c5 	bl	8003154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dca:	f000 fd0b 	bl	80037e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dd0:	f000 fa12 	bl	80031f8 <prvIsQueueEmpty>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f43f af6f 	beq.w	8002cba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ddc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3730      	adds	r7, #48	; 0x30
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	e000ed04 	.word	0xe000ed04

08002dec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08e      	sub	sp, #56	; 0x38
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	623b      	str	r3, [r7, #32]
}
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	61fb      	str	r3, [r7, #28]
}
 8002e38:	bf00      	nop
 8002e3a:	e7fe      	b.n	8002e3a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e3c:	f001 f8b0 	bl	8003fa0 <xTaskGetSchedulerState>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <xQueueSemaphoreTake+0x60>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <xQueueSemaphoreTake+0x64>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <xQueueSemaphoreTake+0x66>
 8002e50:	2300      	movs	r3, #0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5a:	f383 8811 	msr	BASEPRI, r3
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	61bb      	str	r3, [r7, #24]
}
 8002e68:	bf00      	nop
 8002e6a:	e7fe      	b.n	8002e6a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e6c:	f001 fef2 	bl	8004c54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d024      	beq.n	8002ec6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	1e5a      	subs	r2, r3, #1
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d104      	bne.n	8002e96 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002e8c:	f001 f9fe 	bl	800428c <pvTaskIncrementMutexHeldCount>
 8002e90:	4602      	mov	r2, r0
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00f      	beq.n	8002ebe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	3310      	adds	r3, #16
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 feba 	bl	8003c1c <xTaskRemoveFromEventList>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002eae:	4b54      	ldr	r3, [pc, #336]	; (8003000 <xQueueSemaphoreTake+0x214>)
 8002eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ebe:	f001 fef9 	bl	8004cb4 <vPortExitCritical>
				return pdPASS;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e097      	b.n	8002ff6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d111      	bne.n	8002ef0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	617b      	str	r3, [r7, #20]
}
 8002ee4:	bf00      	nop
 8002ee6:	e7fe      	b.n	8002ee6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002ee8:	f001 fee4 	bl	8004cb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e082      	b.n	8002ff6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ef6:	f107 030c 	add.w	r3, r7, #12
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fef2 	bl	8003ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f00:	2301      	movs	r3, #1
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f04:	f001 fed6 	bl	8004cb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f08:	f000 fc5e 	bl	80037c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f0c:	f001 fea2 	bl	8004c54 <vPortEnterCritical>
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f16:	b25b      	sxtb	r3, r3
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f1c:	d103      	bne.n	8002f26 <xQueueSemaphoreTake+0x13a>
 8002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f2c:	b25b      	sxtb	r3, r3
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f32:	d103      	bne.n	8002f3c <xQueueSemaphoreTake+0x150>
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f3c:	f001 feba 	bl	8004cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f40:	463a      	mov	r2, r7
 8002f42:	f107 030c 	add.w	r3, r7, #12
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fee1 	bl	8003d10 <xTaskCheckForTimeOut>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d132      	bne.n	8002fba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f56:	f000 f94f 	bl	80031f8 <prvIsQueueEmpty>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d026      	beq.n	8002fae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d109      	bne.n	8002f7c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002f68:	f001 fe74 	bl	8004c54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f001 f833 	bl	8003fdc <xTaskPriorityInherit>
 8002f76:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002f78:	f001 fe9c 	bl	8004cb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7e:	3324      	adds	r3, #36	; 0x24
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fdf9 	bl	8003b7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f8c:	f000 f8e2 	bl	8003154 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f90:	f000 fc28 	bl	80037e4 <xTaskResumeAll>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f47f af68 	bne.w	8002e6c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002f9c:	4b18      	ldr	r3, [pc, #96]	; (8003000 <xQueueSemaphoreTake+0x214>)
 8002f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	e75e      	b.n	8002e6c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002fae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fb0:	f000 f8d0 	bl	8003154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fb4:	f000 fc16 	bl	80037e4 <xTaskResumeAll>
 8002fb8:	e758      	b.n	8002e6c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002fba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fbc:	f000 f8ca 	bl	8003154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fc0:	f000 fc10 	bl	80037e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fc6:	f000 f917 	bl	80031f8 <prvIsQueueEmpty>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f43f af4d 	beq.w	8002e6c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002fd8:	f001 fe3c 	bl	8004c54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002fdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fde:	f000 f811 	bl	8003004 <prvGetDisinheritPriorityAfterTimeout>
 8002fe2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fea:	4618      	mov	r0, r3
 8002fec:	f001 f8cc 	bl	8004188 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002ff0:	f001 fe60 	bl	8004cb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ff4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3738      	adds	r7, #56	; 0x38
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	e000ed04 	.word	0xe000ed04

08003004 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	2b00      	cmp	r3, #0
 8003012:	d006      	beq.n	8003022 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	e001      	b.n	8003026 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003026:	68fb      	ldr	r3, [r7, #12]
	}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10d      	bne.n	800306e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d14d      	bne.n	80030f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	4618      	mov	r0, r3
 8003060:	f001 f824 	bl	80040ac <xTaskPriorityDisinherit>
 8003064:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	e043      	b.n	80030f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d119      	bne.n	80030a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6858      	ldr	r0, [r3, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	461a      	mov	r2, r3
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	f002 fa17 	bl	80054b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	441a      	add	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	429a      	cmp	r2, r3
 800309c:	d32b      	bcc.n	80030f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	e026      	b.n	80030f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	68d8      	ldr	r0, [r3, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	461a      	mov	r2, r3
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	f002 f9fd 	bl	80054b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	425b      	negs	r3, r3
 80030c2:	441a      	add	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d207      	bcs.n	80030e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	425b      	negs	r3, r3
 80030de:	441a      	add	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d105      	bne.n	80030f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80030fe:	697b      	ldr	r3, [r7, #20]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d018      	beq.n	800314c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	441a      	add	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	429a      	cmp	r2, r3
 8003132:	d303      	bcc.n	800313c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68d9      	ldr	r1, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	461a      	mov	r2, r3
 8003146:	6838      	ldr	r0, [r7, #0]
 8003148:	f002 f9b3 	bl	80054b2 <memcpy>
	}
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800315c:	f001 fd7a 	bl	8004c54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003166:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003168:	e011      	b.n	800318e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2b00      	cmp	r3, #0
 8003170:	d012      	beq.n	8003198 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3324      	adds	r3, #36	; 0x24
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fd50 	bl	8003c1c <xTaskRemoveFromEventList>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003182:	f000 fe27 	bl	8003dd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	3b01      	subs	r3, #1
 800318a:	b2db      	uxtb	r3, r3
 800318c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800318e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	dce9      	bgt.n	800316a <prvUnlockQueue+0x16>
 8003196:	e000      	b.n	800319a <prvUnlockQueue+0x46>
					break;
 8003198:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	22ff      	movs	r2, #255	; 0xff
 800319e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80031a2:	f001 fd87 	bl	8004cb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80031a6:	f001 fd55 	bl	8004c54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031b2:	e011      	b.n	80031d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d012      	beq.n	80031e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3310      	adds	r3, #16
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fd2b 	bl	8003c1c <xTaskRemoveFromEventList>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80031cc:	f000 fe02 	bl	8003dd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031d0:	7bbb      	ldrb	r3, [r7, #14]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	dce9      	bgt.n	80031b4 <prvUnlockQueue+0x60>
 80031e0:	e000      	b.n	80031e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	22ff      	movs	r2, #255	; 0xff
 80031e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80031ec:	f001 fd62 	bl	8004cb4 <vPortExitCritical>
}
 80031f0:	bf00      	nop
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003200:	f001 fd28 	bl	8004c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	2b00      	cmp	r3, #0
 800320a:	d102      	bne.n	8003212 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800320c:	2301      	movs	r3, #1
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	e001      	b.n	8003216 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003216:	f001 fd4d 	bl	8004cb4 <vPortExitCritical>

	return xReturn;
 800321a:	68fb      	ldr	r3, [r7, #12]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800322c:	f001 fd12 	bl	8004c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003238:	429a      	cmp	r2, r3
 800323a:	d102      	bne.n	8003242 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800323c:	2301      	movs	r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	e001      	b.n	8003246 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003246:	f001 fd35 	bl	8004cb4 <vPortExitCritical>

	return xReturn;
 800324a:	68fb      	ldr	r3, [r7, #12]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	e014      	b.n	800328e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003264:	4a0f      	ldr	r2, [pc, #60]	; (80032a4 <vQueueAddToRegistry+0x50>)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003270:	490c      	ldr	r1, [pc, #48]	; (80032a4 <vQueueAddToRegistry+0x50>)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800327a:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <vQueueAddToRegistry+0x50>)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003286:	e006      	b.n	8003296 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3301      	adds	r3, #1
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b07      	cmp	r3, #7
 8003292:	d9e7      	bls.n	8003264 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	200008ac 	.word	0x200008ac

080032a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80032b8:	f001 fccc 	bl	8004c54 <vPortEnterCritical>
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032c2:	b25b      	sxtb	r3, r3
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032c8:	d103      	bne.n	80032d2 <vQueueWaitForMessageRestricted+0x2a>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032d8:	b25b      	sxtb	r3, r3
 80032da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032de:	d103      	bne.n	80032e8 <vQueueWaitForMessageRestricted+0x40>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032e8:	f001 fce4 	bl	8004cb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	3324      	adds	r3, #36	; 0x24
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fc61 	bl	8003bc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f7ff ff26 	bl	8003154 <prvUnlockQueue>
	}
 8003308:	bf00      	nop
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08e      	sub	sp, #56	; 0x38
 8003314:	af04      	add	r7, sp, #16
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	623b      	str	r3, [r7, #32]
}
 8003336:	bf00      	nop
 8003338:	e7fe      	b.n	8003338 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <xTaskCreateStatic+0x46>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	61fb      	str	r3, [r7, #28]
}
 8003352:	bf00      	nop
 8003354:	e7fe      	b.n	8003354 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003356:	23bc      	movs	r3, #188	; 0xbc
 8003358:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2bbc      	cmp	r3, #188	; 0xbc
 800335e:	d00a      	beq.n	8003376 <xTaskCreateStatic+0x66>
	__asm volatile
 8003360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	61bb      	str	r3, [r7, #24]
}
 8003372:	bf00      	nop
 8003374:	e7fe      	b.n	8003374 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003376:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	2b00      	cmp	r3, #0
 800337c:	d01e      	beq.n	80033bc <xTaskCreateStatic+0xac>
 800337e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01b      	beq.n	80033bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800338c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	2202      	movs	r2, #2
 8003392:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003396:	2300      	movs	r3, #0
 8003398:	9303      	str	r3, [sp, #12]
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	9302      	str	r3, [sp, #8]
 800339e:	f107 0314 	add.w	r3, r7, #20
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f850 	bl	8003454 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033b6:	f000 f8f3 	bl	80035a0 <prvAddNewTaskToReadyList>
 80033ba:	e001      	b.n	80033c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033c0:	697b      	ldr	r3, [r7, #20]
	}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3728      	adds	r7, #40	; 0x28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b08c      	sub	sp, #48	; 0x30
 80033ce:	af04      	add	r7, sp, #16
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	4613      	mov	r3, r2
 80033d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4618      	mov	r0, r3
 80033e0:	f001 fd5a 	bl	8004e98 <pvPortMalloc>
 80033e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033ec:	20bc      	movs	r0, #188	; 0xbc
 80033ee:	f001 fd53 	bl	8004e98 <pvPortMalloc>
 80033f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003400:	e005      	b.n	800340e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003402:	6978      	ldr	r0, [r7, #20]
 8003404:	f001 fe14 	bl	8005030 <vPortFree>
 8003408:	e001      	b.n	800340e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d017      	beq.n	8003444 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800341c:	88fa      	ldrh	r2, [r7, #6]
 800341e:	2300      	movs	r3, #0
 8003420:	9303      	str	r3, [sp, #12]
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	9302      	str	r3, [sp, #8]
 8003426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f80e 	bl	8003454 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003438:	69f8      	ldr	r0, [r7, #28]
 800343a:	f000 f8b1 	bl	80035a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800343e:	2301      	movs	r3, #1
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	e002      	b.n	800344a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003448:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800344a:	69bb      	ldr	r3, [r7, #24]
	}
 800344c:	4618      	mov	r0, r3
 800344e:	3720      	adds	r7, #32
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003464:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	461a      	mov	r2, r3
 800346c:	21a5      	movs	r1, #165	; 0xa5
 800346e:	f002 f82e 	bl	80054ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800347c:	3b01      	subs	r3, #1
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f023 0307 	bic.w	r3, r3, #7
 800348a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	617b      	str	r3, [r7, #20]
}
 80034a8:	bf00      	nop
 80034aa:	e7fe      	b.n	80034aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d01f      	beq.n	80034f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	e012      	b.n	80034de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	4413      	add	r3, r2
 80034be:	7819      	ldrb	r1, [r3, #0]
 80034c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	4413      	add	r3, r2
 80034c6:	3334      	adds	r3, #52	; 0x34
 80034c8:	460a      	mov	r2, r1
 80034ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d006      	beq.n	80034e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	3301      	adds	r3, #1
 80034dc:	61fb      	str	r3, [r7, #28]
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	2b0f      	cmp	r3, #15
 80034e2:	d9e9      	bls.n	80034b8 <prvInitialiseNewTask+0x64>
 80034e4:	e000      	b.n	80034e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80034e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034f0:	e003      	b.n	80034fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	2b37      	cmp	r3, #55	; 0x37
 80034fe:	d901      	bls.n	8003504 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003500:	2337      	movs	r3, #55	; 0x37
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003508:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800350e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003512:	2200      	movs	r2, #0
 8003514:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	3304      	adds	r3, #4
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff f81a 	bl	8002554 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003522:	3318      	adds	r3, #24
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff f815 	bl	8002554 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800352e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	2200      	movs	r2, #0
 8003544:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	2200      	movs	r2, #0
 800354c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	3354      	adds	r3, #84	; 0x54
 8003554:	2260      	movs	r2, #96	; 0x60
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f001 ffb8 	bl	80054ce <memset>
 800355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003560:	4a0c      	ldr	r2, [pc, #48]	; (8003594 <prvInitialiseNewTask+0x140>)
 8003562:	659a      	str	r2, [r3, #88]	; 0x58
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	4a0c      	ldr	r2, [pc, #48]	; (8003598 <prvInitialiseNewTask+0x144>)
 8003568:	65da      	str	r2, [r3, #92]	; 0x5c
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	4a0b      	ldr	r2, [pc, #44]	; (800359c <prvInitialiseNewTask+0x148>)
 800356e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	68f9      	ldr	r1, [r7, #12]
 8003574:	69b8      	ldr	r0, [r7, #24]
 8003576:	f001 fa3f 	bl	80049f8 <pxPortInitialiseStack>
 800357a:	4602      	mov	r2, r0
 800357c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800358a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800358c:	bf00      	nop
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	08005e98 	.word	0x08005e98
 8003598:	08005eb8 	.word	0x08005eb8
 800359c:	08005e78 	.word	0x08005e78

080035a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035a8:	f001 fb54 	bl	8004c54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035ac:	4b2d      	ldr	r3, [pc, #180]	; (8003664 <prvAddNewTaskToReadyList+0xc4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	4a2c      	ldr	r2, [pc, #176]	; (8003664 <prvAddNewTaskToReadyList+0xc4>)
 80035b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035b6:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <prvAddNewTaskToReadyList+0xc8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035be:	4a2a      	ldr	r2, [pc, #168]	; (8003668 <prvAddNewTaskToReadyList+0xc8>)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035c4:	4b27      	ldr	r3, [pc, #156]	; (8003664 <prvAddNewTaskToReadyList+0xc4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d110      	bne.n	80035ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035cc:	f000 fc26 	bl	8003e1c <prvInitialiseTaskLists>
 80035d0:	e00d      	b.n	80035ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035d2:	4b26      	ldr	r3, [pc, #152]	; (800366c <prvAddNewTaskToReadyList+0xcc>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035da:	4b23      	ldr	r3, [pc, #140]	; (8003668 <prvAddNewTaskToReadyList+0xc8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d802      	bhi.n	80035ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035e8:	4a1f      	ldr	r2, [pc, #124]	; (8003668 <prvAddNewTaskToReadyList+0xc8>)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035ee:	4b20      	ldr	r3, [pc, #128]	; (8003670 <prvAddNewTaskToReadyList+0xd0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3301      	adds	r3, #1
 80035f4:	4a1e      	ldr	r2, [pc, #120]	; (8003670 <prvAddNewTaskToReadyList+0xd0>)
 80035f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <prvAddNewTaskToReadyList+0xd0>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003604:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <prvAddNewTaskToReadyList+0xd4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d903      	bls.n	8003614 <prvAddNewTaskToReadyList+0x74>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	4a18      	ldr	r2, [pc, #96]	; (8003674 <prvAddNewTaskToReadyList+0xd4>)
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4a15      	ldr	r2, [pc, #84]	; (8003678 <prvAddNewTaskToReadyList+0xd8>)
 8003622:	441a      	add	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3304      	adds	r3, #4
 8003628:	4619      	mov	r1, r3
 800362a:	4610      	mov	r0, r2
 800362c:	f7fe ff9f 	bl	800256e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003630:	f001 fb40 	bl	8004cb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003634:	4b0d      	ldr	r3, [pc, #52]	; (800366c <prvAddNewTaskToReadyList+0xcc>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00e      	beq.n	800365a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <prvAddNewTaskToReadyList+0xc8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	429a      	cmp	r2, r3
 8003648:	d207      	bcs.n	800365a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800364a:	4b0c      	ldr	r3, [pc, #48]	; (800367c <prvAddNewTaskToReadyList+0xdc>)
 800364c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000dc0 	.word	0x20000dc0
 8003668:	200008ec 	.word	0x200008ec
 800366c:	20000dcc 	.word	0x20000dcc
 8003670:	20000ddc 	.word	0x20000ddc
 8003674:	20000dc8 	.word	0x20000dc8
 8003678:	200008f0 	.word	0x200008f0
 800367c:	e000ed04 	.word	0xe000ed04

08003680 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d017      	beq.n	80036c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <vTaskDelay+0x60>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <vTaskDelay+0x30>
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	60bb      	str	r3, [r7, #8]
}
 80036ac:	bf00      	nop
 80036ae:	e7fe      	b.n	80036ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036b0:	f000 f88a 	bl	80037c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036b4:	2100      	movs	r1, #0
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fdfc 	bl	80042b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036bc:	f000 f892 	bl	80037e4 <xTaskResumeAll>
 80036c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d107      	bne.n	80036d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <vTaskDelay+0x64>)
 80036ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036d8:	bf00      	nop
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20000de8 	.word	0x20000de8
 80036e4:	e000ed04 	.word	0xe000ed04

080036e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	; 0x28
 80036ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036f6:	463a      	mov	r2, r7
 80036f8:	1d39      	adds	r1, r7, #4
 80036fa:	f107 0308 	add.w	r3, r7, #8
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe fed4 	bl	80024ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003704:	6839      	ldr	r1, [r7, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	9202      	str	r2, [sp, #8]
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	2300      	movs	r3, #0
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	2300      	movs	r3, #0
 8003714:	460a      	mov	r2, r1
 8003716:	4924      	ldr	r1, [pc, #144]	; (80037a8 <vTaskStartScheduler+0xc0>)
 8003718:	4824      	ldr	r0, [pc, #144]	; (80037ac <vTaskStartScheduler+0xc4>)
 800371a:	f7ff fdf9 	bl	8003310 <xTaskCreateStatic>
 800371e:	4603      	mov	r3, r0
 8003720:	4a23      	ldr	r2, [pc, #140]	; (80037b0 <vTaskStartScheduler+0xc8>)
 8003722:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003724:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <vTaskStartScheduler+0xc8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800372c:	2301      	movs	r3, #1
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	e001      	b.n	8003736 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d102      	bne.n	8003742 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800373c:	f000 fe0e 	bl	800435c <xTimerCreateTimerTask>
 8003740:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d11b      	bne.n	8003780 <vTaskStartScheduler+0x98>
	__asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	613b      	str	r3, [r7, #16]
}
 800375a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800375c:	4b15      	ldr	r3, [pc, #84]	; (80037b4 <vTaskStartScheduler+0xcc>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3354      	adds	r3, #84	; 0x54
 8003762:	4a15      	ldr	r2, [pc, #84]	; (80037b8 <vTaskStartScheduler+0xd0>)
 8003764:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <vTaskStartScheduler+0xd4>)
 8003768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800376c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800376e:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <vTaskStartScheduler+0xd8>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003774:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <vTaskStartScheduler+0xdc>)
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800377a:	f001 f9c9 	bl	8004b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800377e:	e00e      	b.n	800379e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003786:	d10a      	bne.n	800379e <vTaskStartScheduler+0xb6>
	__asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	60fb      	str	r3, [r7, #12]
}
 800379a:	bf00      	nop
 800379c:	e7fe      	b.n	800379c <vTaskStartScheduler+0xb4>
}
 800379e:	bf00      	nop
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	08005e48 	.word	0x08005e48
 80037ac:	08003ded 	.word	0x08003ded
 80037b0:	20000de4 	.word	0x20000de4
 80037b4:	200008ec 	.word	0x200008ec
 80037b8:	20000010 	.word	0x20000010
 80037bc:	20000de0 	.word	0x20000de0
 80037c0:	20000dcc 	.word	0x20000dcc
 80037c4:	20000dc4 	.word	0x20000dc4

080037c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <vTaskSuspendAll+0x18>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3301      	adds	r3, #1
 80037d2:	4a03      	ldr	r2, [pc, #12]	; (80037e0 <vTaskSuspendAll+0x18>)
 80037d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037d6:	bf00      	nop
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	20000de8 	.word	0x20000de8

080037e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037f2:	4b42      	ldr	r3, [pc, #264]	; (80038fc <xTaskResumeAll+0x118>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10a      	bne.n	8003810 <xTaskResumeAll+0x2c>
	__asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	603b      	str	r3, [r7, #0]
}
 800380c:	bf00      	nop
 800380e:	e7fe      	b.n	800380e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003810:	f001 fa20 	bl	8004c54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003814:	4b39      	ldr	r3, [pc, #228]	; (80038fc <xTaskResumeAll+0x118>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3b01      	subs	r3, #1
 800381a:	4a38      	ldr	r2, [pc, #224]	; (80038fc <xTaskResumeAll+0x118>)
 800381c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800381e:	4b37      	ldr	r3, [pc, #220]	; (80038fc <xTaskResumeAll+0x118>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d162      	bne.n	80038ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003826:	4b36      	ldr	r3, [pc, #216]	; (8003900 <xTaskResumeAll+0x11c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d05e      	beq.n	80038ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800382e:	e02f      	b.n	8003890 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003830:	4b34      	ldr	r3, [pc, #208]	; (8003904 <xTaskResumeAll+0x120>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3318      	adds	r3, #24
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe fef3 	bl	8002628 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3304      	adds	r3, #4
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe feee 	bl	8002628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	4b2d      	ldr	r3, [pc, #180]	; (8003908 <xTaskResumeAll+0x124>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d903      	bls.n	8003860 <xTaskResumeAll+0x7c>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	4a2a      	ldr	r2, [pc, #168]	; (8003908 <xTaskResumeAll+0x124>)
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4a27      	ldr	r2, [pc, #156]	; (800390c <xTaskResumeAll+0x128>)
 800386e:	441a      	add	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	3304      	adds	r3, #4
 8003874:	4619      	mov	r1, r3
 8003876:	4610      	mov	r0, r2
 8003878:	f7fe fe79 	bl	800256e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	4b23      	ldr	r3, [pc, #140]	; (8003910 <xTaskResumeAll+0x12c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800388a:	4b22      	ldr	r3, [pc, #136]	; (8003914 <xTaskResumeAll+0x130>)
 800388c:	2201      	movs	r2, #1
 800388e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003890:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <xTaskResumeAll+0x120>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1cb      	bne.n	8003830 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800389e:	f000 fb5f 	bl	8003f60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038a2:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <xTaskResumeAll+0x134>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d010      	beq.n	80038d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038ae:	f000 f847 	bl	8003940 <xTaskIncrementTick>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80038b8:	4b16      	ldr	r3, [pc, #88]	; (8003914 <xTaskResumeAll+0x130>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3b01      	subs	r3, #1
 80038c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f1      	bne.n	80038ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80038ca:	4b13      	ldr	r3, [pc, #76]	; (8003918 <xTaskResumeAll+0x134>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038d0:	4b10      	ldr	r3, [pc, #64]	; (8003914 <xTaskResumeAll+0x130>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038d8:	2301      	movs	r3, #1
 80038da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038dc:	4b0f      	ldr	r3, [pc, #60]	; (800391c <xTaskResumeAll+0x138>)
 80038de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038ec:	f001 f9e2 	bl	8004cb4 <vPortExitCritical>

	return xAlreadyYielded;
 80038f0:	68bb      	ldr	r3, [r7, #8]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000de8 	.word	0x20000de8
 8003900:	20000dc0 	.word	0x20000dc0
 8003904:	20000d80 	.word	0x20000d80
 8003908:	20000dc8 	.word	0x20000dc8
 800390c:	200008f0 	.word	0x200008f0
 8003910:	200008ec 	.word	0x200008ec
 8003914:	20000dd4 	.word	0x20000dd4
 8003918:	20000dd0 	.word	0x20000dd0
 800391c:	e000ed04 	.word	0xe000ed04

08003920 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <xTaskGetTickCount+0x1c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800392c:	687b      	ldr	r3, [r7, #4]
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000dc4 	.word	0x20000dc4

08003940 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800394a:	4b4f      	ldr	r3, [pc, #316]	; (8003a88 <xTaskIncrementTick+0x148>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f040 808f 	bne.w	8003a72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003954:	4b4d      	ldr	r3, [pc, #308]	; (8003a8c <xTaskIncrementTick+0x14c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3301      	adds	r3, #1
 800395a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800395c:	4a4b      	ldr	r2, [pc, #300]	; (8003a8c <xTaskIncrementTick+0x14c>)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d120      	bne.n	80039aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003968:	4b49      	ldr	r3, [pc, #292]	; (8003a90 <xTaskIncrementTick+0x150>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <xTaskIncrementTick+0x48>
	__asm volatile
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	603b      	str	r3, [r7, #0]
}
 8003984:	bf00      	nop
 8003986:	e7fe      	b.n	8003986 <xTaskIncrementTick+0x46>
 8003988:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <xTaskIncrementTick+0x150>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	4b41      	ldr	r3, [pc, #260]	; (8003a94 <xTaskIncrementTick+0x154>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a3f      	ldr	r2, [pc, #252]	; (8003a90 <xTaskIncrementTick+0x150>)
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4a3f      	ldr	r2, [pc, #252]	; (8003a94 <xTaskIncrementTick+0x154>)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b3e      	ldr	r3, [pc, #248]	; (8003a98 <xTaskIncrementTick+0x158>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3301      	adds	r3, #1
 80039a2:	4a3d      	ldr	r2, [pc, #244]	; (8003a98 <xTaskIncrementTick+0x158>)
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	f000 fadb 	bl	8003f60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039aa:	4b3c      	ldr	r3, [pc, #240]	; (8003a9c <xTaskIncrementTick+0x15c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d349      	bcc.n	8003a48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039b4:	4b36      	ldr	r3, [pc, #216]	; (8003a90 <xTaskIncrementTick+0x150>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d104      	bne.n	80039c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039be:	4b37      	ldr	r3, [pc, #220]	; (8003a9c <xTaskIncrementTick+0x15c>)
 80039c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039c4:	601a      	str	r2, [r3, #0]
					break;
 80039c6:	e03f      	b.n	8003a48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039c8:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <xTaskIncrementTick+0x150>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d203      	bcs.n	80039e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039e0:	4a2e      	ldr	r2, [pc, #184]	; (8003a9c <xTaskIncrementTick+0x15c>)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039e6:	e02f      	b.n	8003a48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	3304      	adds	r3, #4
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fe1b 	bl	8002628 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d004      	beq.n	8003a04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	3318      	adds	r3, #24
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe fe12 	bl	8002628 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a08:	4b25      	ldr	r3, [pc, #148]	; (8003aa0 <xTaskIncrementTick+0x160>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d903      	bls.n	8003a18 <xTaskIncrementTick+0xd8>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	4a22      	ldr	r2, [pc, #136]	; (8003aa0 <xTaskIncrementTick+0x160>)
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4a1f      	ldr	r2, [pc, #124]	; (8003aa4 <xTaskIncrementTick+0x164>)
 8003a26:	441a      	add	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4610      	mov	r0, r2
 8003a30:	f7fe fd9d 	bl	800256e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a38:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <xTaskIncrementTick+0x168>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d3b8      	bcc.n	80039b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a42:	2301      	movs	r3, #1
 8003a44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a46:	e7b5      	b.n	80039b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a48:	4b17      	ldr	r3, [pc, #92]	; (8003aa8 <xTaskIncrementTick+0x168>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4e:	4915      	ldr	r1, [pc, #84]	; (8003aa4 <xTaskIncrementTick+0x164>)
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d901      	bls.n	8003a64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a64:	4b11      	ldr	r3, [pc, #68]	; (8003aac <xTaskIncrementTick+0x16c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	e004      	b.n	8003a7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a72:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <xTaskIncrementTick+0x170>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3301      	adds	r3, #1
 8003a78:	4a0d      	ldr	r2, [pc, #52]	; (8003ab0 <xTaskIncrementTick+0x170>)
 8003a7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a7c:	697b      	ldr	r3, [r7, #20]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000de8 	.word	0x20000de8
 8003a8c:	20000dc4 	.word	0x20000dc4
 8003a90:	20000d78 	.word	0x20000d78
 8003a94:	20000d7c 	.word	0x20000d7c
 8003a98:	20000dd8 	.word	0x20000dd8
 8003a9c:	20000de0 	.word	0x20000de0
 8003aa0:	20000dc8 	.word	0x20000dc8
 8003aa4:	200008f0 	.word	0x200008f0
 8003aa8:	200008ec 	.word	0x200008ec
 8003aac:	20000dd4 	.word	0x20000dd4
 8003ab0:	20000dd0 	.word	0x20000dd0

08003ab4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003aba:	4b2a      	ldr	r3, [pc, #168]	; (8003b64 <vTaskSwitchContext+0xb0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ac2:	4b29      	ldr	r3, [pc, #164]	; (8003b68 <vTaskSwitchContext+0xb4>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ac8:	e046      	b.n	8003b58 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003aca:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <vTaskSwitchContext+0xb4>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ad0:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <vTaskSwitchContext+0xb8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	e010      	b.n	8003afa <vTaskSwitchContext+0x46>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <vTaskSwitchContext+0x40>
	__asm volatile
 8003ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	607b      	str	r3, [r7, #4]
}
 8003af0:	bf00      	nop
 8003af2:	e7fe      	b.n	8003af2 <vTaskSwitchContext+0x3e>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	491d      	ldr	r1, [pc, #116]	; (8003b70 <vTaskSwitchContext+0xbc>)
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0e4      	beq.n	8003ad8 <vTaskSwitchContext+0x24>
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <vTaskSwitchContext+0xbc>)
 8003b1a:	4413      	add	r3, r2
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	605a      	str	r2, [r3, #4]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	3308      	adds	r3, #8
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d104      	bne.n	8003b3e <vTaskSwitchContext+0x8a>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a0b      	ldr	r2, [pc, #44]	; (8003b74 <vTaskSwitchContext+0xc0>)
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <vTaskSwitchContext+0xb8>)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <vTaskSwitchContext+0xc0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	3354      	adds	r3, #84	; 0x54
 8003b54:	4a08      	ldr	r2, [pc, #32]	; (8003b78 <vTaskSwitchContext+0xc4>)
 8003b56:	6013      	str	r3, [r2, #0]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	20000de8 	.word	0x20000de8
 8003b68:	20000dd4 	.word	0x20000dd4
 8003b6c:	20000dc8 	.word	0x20000dc8
 8003b70:	200008f0 	.word	0x200008f0
 8003b74:	200008ec 	.word	0x200008ec
 8003b78:	20000010 	.word	0x20000010

08003b7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	60fb      	str	r3, [r7, #12]
}
 8003b9e:	bf00      	nop
 8003ba0:	e7fe      	b.n	8003ba0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ba2:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <vTaskPlaceOnEventList+0x44>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3318      	adds	r3, #24
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fe fd03 	bl	80025b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	6838      	ldr	r0, [r7, #0]
 8003bb4:	f000 fb7e 	bl	80042b4 <prvAddCurrentTaskToDelayedList>
}
 8003bb8:	bf00      	nop
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	200008ec 	.word	0x200008ec

08003bc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	617b      	str	r3, [r7, #20]
}
 8003be8:	bf00      	nop
 8003bea:	e7fe      	b.n	8003bea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <vTaskPlaceOnEventListRestricted+0x54>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3318      	adds	r3, #24
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f7fe fcba 	bl	800256e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	68b8      	ldr	r0, [r7, #8]
 8003c0a:	f000 fb53 	bl	80042b4 <prvAddCurrentTaskToDelayedList>
	}
 8003c0e:	bf00      	nop
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	200008ec 	.word	0x200008ec

08003c1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10a      	bne.n	8003c48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	60fb      	str	r3, [r7, #12]
}
 8003c44:	bf00      	nop
 8003c46:	e7fe      	b.n	8003c46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	3318      	adds	r3, #24
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fe fceb 	bl	8002628 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c52:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <xTaskRemoveFromEventList+0xb0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d11d      	bne.n	8003c96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe fce2 	bl	8002628 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c68:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <xTaskRemoveFromEventList+0xb4>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d903      	bls.n	8003c78 <xTaskRemoveFromEventList+0x5c>
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	4a16      	ldr	r2, [pc, #88]	; (8003cd0 <xTaskRemoveFromEventList+0xb4>)
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4a13      	ldr	r2, [pc, #76]	; (8003cd4 <xTaskRemoveFromEventList+0xb8>)
 8003c86:	441a      	add	r2, r3
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f7fe fc6d 	bl	800256e <vListInsertEnd>
 8003c94:	e005      	b.n	8003ca2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	3318      	adds	r3, #24
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	480e      	ldr	r0, [pc, #56]	; (8003cd8 <xTaskRemoveFromEventList+0xbc>)
 8003c9e:	f7fe fc66 	bl	800256e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <xTaskRemoveFromEventList+0xc0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d905      	bls.n	8003cbc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <xTaskRemoveFromEventList+0xc4>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	e001      	b.n	8003cc0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003cc0:	697b      	ldr	r3, [r7, #20]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000de8 	.word	0x20000de8
 8003cd0:	20000dc8 	.word	0x20000dc8
 8003cd4:	200008f0 	.word	0x200008f0
 8003cd8:	20000d80 	.word	0x20000d80
 8003cdc:	200008ec 	.word	0x200008ec
 8003ce0:	20000dd4 	.word	0x20000dd4

08003ce4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003cec:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <vTaskInternalSetTimeOutState+0x24>)
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <vTaskInternalSetTimeOutState+0x28>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	605a      	str	r2, [r3, #4]
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	20000dd8 	.word	0x20000dd8
 8003d0c:	20000dc4 	.word	0x20000dc4

08003d10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	613b      	str	r3, [r7, #16]
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	60fb      	str	r3, [r7, #12]
}
 8003d4e:	bf00      	nop
 8003d50:	e7fe      	b.n	8003d50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003d52:	f000 ff7f 	bl	8004c54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <xTaskCheckForTimeOut+0xbc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d6e:	d102      	bne.n	8003d76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	e023      	b.n	8003dbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <xTaskCheckForTimeOut+0xc0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d007      	beq.n	8003d92 <xTaskCheckForTimeOut+0x82>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d302      	bcc.n	8003d92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	e015      	b.n	8003dbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d20b      	bcs.n	8003db4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	1ad2      	subs	r2, r2, r3
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff9b 	bl	8003ce4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	e004      	b.n	8003dbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003dbe:	f000 ff79 	bl	8004cb4 <vPortExitCritical>

	return xReturn;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20000dc4 	.word	0x20000dc4
 8003dd0:	20000dd8 	.word	0x20000dd8

08003dd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <vTaskMissedYield+0x14>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
}
 8003dde:	bf00      	nop
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	20000dd4 	.word	0x20000dd4

08003dec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003df4:	f000 f852 	bl	8003e9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <prvIdleTask+0x28>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d9f9      	bls.n	8003df4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <prvIdleTask+0x2c>)
 8003e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e10:	e7f0      	b.n	8003df4 <prvIdleTask+0x8>
 8003e12:	bf00      	nop
 8003e14:	200008f0 	.word	0x200008f0
 8003e18:	e000ed04 	.word	0xe000ed04

08003e1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e22:	2300      	movs	r3, #0
 8003e24:	607b      	str	r3, [r7, #4]
 8003e26:	e00c      	b.n	8003e42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4a12      	ldr	r2, [pc, #72]	; (8003e7c <prvInitialiseTaskLists+0x60>)
 8003e34:	4413      	add	r3, r2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe fb6c 	bl	8002514 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b37      	cmp	r3, #55	; 0x37
 8003e46:	d9ef      	bls.n	8003e28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e48:	480d      	ldr	r0, [pc, #52]	; (8003e80 <prvInitialiseTaskLists+0x64>)
 8003e4a:	f7fe fb63 	bl	8002514 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e4e:	480d      	ldr	r0, [pc, #52]	; (8003e84 <prvInitialiseTaskLists+0x68>)
 8003e50:	f7fe fb60 	bl	8002514 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e54:	480c      	ldr	r0, [pc, #48]	; (8003e88 <prvInitialiseTaskLists+0x6c>)
 8003e56:	f7fe fb5d 	bl	8002514 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e5a:	480c      	ldr	r0, [pc, #48]	; (8003e8c <prvInitialiseTaskLists+0x70>)
 8003e5c:	f7fe fb5a 	bl	8002514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e60:	480b      	ldr	r0, [pc, #44]	; (8003e90 <prvInitialiseTaskLists+0x74>)
 8003e62:	f7fe fb57 	bl	8002514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <prvInitialiseTaskLists+0x78>)
 8003e68:	4a05      	ldr	r2, [pc, #20]	; (8003e80 <prvInitialiseTaskLists+0x64>)
 8003e6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <prvInitialiseTaskLists+0x7c>)
 8003e6e:	4a05      	ldr	r2, [pc, #20]	; (8003e84 <prvInitialiseTaskLists+0x68>)
 8003e70:	601a      	str	r2, [r3, #0]
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	200008f0 	.word	0x200008f0
 8003e80:	20000d50 	.word	0x20000d50
 8003e84:	20000d64 	.word	0x20000d64
 8003e88:	20000d80 	.word	0x20000d80
 8003e8c:	20000d94 	.word	0x20000d94
 8003e90:	20000dac 	.word	0x20000dac
 8003e94:	20000d78 	.word	0x20000d78
 8003e98:	20000d7c 	.word	0x20000d7c

08003e9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ea2:	e019      	b.n	8003ed8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ea4:	f000 fed6 	bl	8004c54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ea8:	4b10      	ldr	r3, [pc, #64]	; (8003eec <prvCheckTasksWaitingTermination+0x50>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fe fbb7 	bl	8002628 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003eba:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <prvCheckTasksWaitingTermination+0x54>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	4a0b      	ldr	r2, [pc, #44]	; (8003ef0 <prvCheckTasksWaitingTermination+0x54>)
 8003ec2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <prvCheckTasksWaitingTermination+0x58>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <prvCheckTasksWaitingTermination+0x58>)
 8003ecc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ece:	f000 fef1 	bl	8004cb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f810 	bl	8003ef8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <prvCheckTasksWaitingTermination+0x58>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e1      	bne.n	8003ea4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000d94 	.word	0x20000d94
 8003ef0:	20000dc0 	.word	0x20000dc0
 8003ef4:	20000da8 	.word	0x20000da8

08003ef8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3354      	adds	r3, #84	; 0x54
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 fc03 	bl	8005710 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d108      	bne.n	8003f26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 f889 	bl	8005030 <vPortFree>
				vPortFree( pxTCB );
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f001 f886 	bl	8005030 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f24:	e018      	b.n	8003f58 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d103      	bne.n	8003f38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f001 f87d 	bl	8005030 <vPortFree>
	}
 8003f36:	e00f      	b.n	8003f58 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d00a      	beq.n	8003f58 <prvDeleteTCB+0x60>
	__asm volatile
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	60fb      	str	r3, [r7, #12]
}
 8003f54:	bf00      	nop
 8003f56:	e7fe      	b.n	8003f56 <prvDeleteTCB+0x5e>
	}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f66:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <prvResetNextTaskUnblockTime+0x38>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d104      	bne.n	8003f7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <prvResetNextTaskUnblockTime+0x3c>)
 8003f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f78:	e008      	b.n	8003f8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f7a:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <prvResetNextTaskUnblockTime+0x38>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4a04      	ldr	r2, [pc, #16]	; (8003f9c <prvResetNextTaskUnblockTime+0x3c>)
 8003f8a:	6013      	str	r3, [r2, #0]
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	20000d78 	.word	0x20000d78
 8003f9c:	20000de0 	.word	0x20000de0

08003fa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <xTaskGetSchedulerState+0x34>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d102      	bne.n	8003fb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	607b      	str	r3, [r7, #4]
 8003fb2:	e008      	b.n	8003fc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fb4:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <xTaskGetSchedulerState+0x38>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d102      	bne.n	8003fc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	607b      	str	r3, [r7, #4]
 8003fc0:	e001      	b.n	8003fc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003fc6:	687b      	ldr	r3, [r7, #4]
	}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	20000dcc 	.word	0x20000dcc
 8003fd8:	20000de8 	.word	0x20000de8

08003fdc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d051      	beq.n	8004096 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff6:	4b2a      	ldr	r3, [pc, #168]	; (80040a0 <xTaskPriorityInherit+0xc4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d241      	bcs.n	8004084 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	db06      	blt.n	8004016 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004008:	4b25      	ldr	r3, [pc, #148]	; (80040a0 <xTaskPriorityInherit+0xc4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6959      	ldr	r1, [r3, #20]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4a1f      	ldr	r2, [pc, #124]	; (80040a4 <xTaskPriorityInherit+0xc8>)
 8004028:	4413      	add	r3, r2
 800402a:	4299      	cmp	r1, r3
 800402c:	d122      	bne.n	8004074 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	3304      	adds	r3, #4
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe faf8 	bl	8002628 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004038:	4b19      	ldr	r3, [pc, #100]	; (80040a0 <xTaskPriorityInherit+0xc4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004046:	4b18      	ldr	r3, [pc, #96]	; (80040a8 <xTaskPriorityInherit+0xcc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d903      	bls.n	8004056 <xTaskPriorityInherit+0x7a>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	4a15      	ldr	r2, [pc, #84]	; (80040a8 <xTaskPriorityInherit+0xcc>)
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4a10      	ldr	r2, [pc, #64]	; (80040a4 <xTaskPriorityInherit+0xc8>)
 8004064:	441a      	add	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	3304      	adds	r3, #4
 800406a:	4619      	mov	r1, r3
 800406c:	4610      	mov	r0, r2
 800406e:	f7fe fa7e 	bl	800256e <vListInsertEnd>
 8004072:	e004      	b.n	800407e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <xTaskPriorityInherit+0xc4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800407e:	2301      	movs	r3, #1
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	e008      	b.n	8004096 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <xTaskPriorityInherit+0xc4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	429a      	cmp	r2, r3
 8004090:	d201      	bcs.n	8004096 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004092:	2301      	movs	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004096:	68fb      	ldr	r3, [r7, #12]
	}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	200008ec 	.word	0x200008ec
 80040a4:	200008f0 	.word	0x200008f0
 80040a8:	20000dc8 	.word	0x20000dc8

080040ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d056      	beq.n	8004170 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80040c2:	4b2e      	ldr	r3, [pc, #184]	; (800417c <xTaskPriorityDisinherit+0xd0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d00a      	beq.n	80040e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	60fb      	str	r3, [r7, #12]
}
 80040de:	bf00      	nop
 80040e0:	e7fe      	b.n	80040e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	60bb      	str	r3, [r7, #8]
}
 80040fc:	bf00      	nop
 80040fe:	e7fe      	b.n	80040fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004104:	1e5a      	subs	r2, r3, #1
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004112:	429a      	cmp	r2, r3
 8004114:	d02c      	beq.n	8004170 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411a:	2b00      	cmp	r3, #0
 800411c:	d128      	bne.n	8004170 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	3304      	adds	r3, #4
 8004122:	4618      	mov	r0, r3
 8004124:	f7fe fa80 	bl	8002628 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004140:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <xTaskPriorityDisinherit+0xd4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d903      	bls.n	8004150 <xTaskPriorityDisinherit+0xa4>
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	4a0c      	ldr	r2, [pc, #48]	; (8004180 <xTaskPriorityDisinherit+0xd4>)
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4a09      	ldr	r2, [pc, #36]	; (8004184 <xTaskPriorityDisinherit+0xd8>)
 800415e:	441a      	add	r2, r3
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	3304      	adds	r3, #4
 8004164:	4619      	mov	r1, r3
 8004166:	4610      	mov	r0, r2
 8004168:	f7fe fa01 	bl	800256e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800416c:	2301      	movs	r3, #1
 800416e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004170:	697b      	ldr	r3, [r7, #20]
	}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	200008ec 	.word	0x200008ec
 8004180:	20000dc8 	.word	0x20000dc8
 8004184:	200008f0 	.word	0x200008f0

08004188 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004196:	2301      	movs	r3, #1
 8004198:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d06a      	beq.n	8004276 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	60fb      	str	r3, [r7, #12]
}
 80041ba:	bf00      	nop
 80041bc:	e7fe      	b.n	80041bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d902      	bls.n	80041ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	61fb      	str	r3, [r7, #28]
 80041cc:	e002      	b.n	80041d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d04b      	beq.n	8004276 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d146      	bne.n	8004276 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80041e8:	4b25      	ldr	r3, [pc, #148]	; (8004280 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d10a      	bne.n	8004208 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	60bb      	str	r3, [r7, #8]
}
 8004204:	bf00      	nop
 8004206:	e7fe      	b.n	8004206 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	2b00      	cmp	r3, #0
 800421a:	db04      	blt.n	8004226 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	6959      	ldr	r1, [r3, #20]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4a13      	ldr	r2, [pc, #76]	; (8004284 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004236:	4413      	add	r3, r2
 8004238:	4299      	cmp	r1, r3
 800423a:	d11c      	bne.n	8004276 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	3304      	adds	r3, #4
 8004240:	4618      	mov	r0, r3
 8004242:	f7fe f9f1 	bl	8002628 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424a:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d903      	bls.n	800425a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	4a0c      	ldr	r2, [pc, #48]	; (8004288 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4a07      	ldr	r2, [pc, #28]	; (8004284 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004268:	441a      	add	r2, r3
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	3304      	adds	r3, #4
 800426e:	4619      	mov	r1, r3
 8004270:	4610      	mov	r0, r2
 8004272:	f7fe f97c 	bl	800256e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004276:	bf00      	nop
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	200008ec 	.word	0x200008ec
 8004284:	200008f0 	.word	0x200008f0
 8004288:	20000dc8 	.word	0x20000dc8

0800428c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004290:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800429e:	3201      	adds	r2, #1
 80042a0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80042a2:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80042a4:	681b      	ldr	r3, [r3, #0]
	}
 80042a6:	4618      	mov	r0, r3
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	200008ec 	.word	0x200008ec

080042b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042be:	4b21      	ldr	r3, [pc, #132]	; (8004344 <prvAddCurrentTaskToDelayedList+0x90>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042c4:	4b20      	ldr	r3, [pc, #128]	; (8004348 <prvAddCurrentTaskToDelayedList+0x94>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3304      	adds	r3, #4
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe f9ac 	bl	8002628 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d6:	d10a      	bne.n	80042ee <prvAddCurrentTaskToDelayedList+0x3a>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042de:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <prvAddCurrentTaskToDelayedList+0x94>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	4819      	ldr	r0, [pc, #100]	; (800434c <prvAddCurrentTaskToDelayedList+0x98>)
 80042e8:	f7fe f941 	bl	800256e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042ec:	e026      	b.n	800433c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4413      	add	r3, r2
 80042f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042f6:	4b14      	ldr	r3, [pc, #80]	; (8004348 <prvAddCurrentTaskToDelayedList+0x94>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	429a      	cmp	r2, r3
 8004304:	d209      	bcs.n	800431a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <prvAddCurrentTaskToDelayedList+0x94>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3304      	adds	r3, #4
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f7fe f94f 	bl	80025b6 <vListInsert>
}
 8004318:	e010      	b.n	800433c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800431a:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <prvAddCurrentTaskToDelayedList+0xa0>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <prvAddCurrentTaskToDelayedList+0x94>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f7fe f945 	bl	80025b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <prvAddCurrentTaskToDelayedList+0xa4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	429a      	cmp	r2, r3
 8004334:	d202      	bcs.n	800433c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004336:	4a08      	ldr	r2, [pc, #32]	; (8004358 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	6013      	str	r3, [r2, #0]
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000dc4 	.word	0x20000dc4
 8004348:	200008ec 	.word	0x200008ec
 800434c:	20000dac 	.word	0x20000dac
 8004350:	20000d7c 	.word	0x20000d7c
 8004354:	20000d78 	.word	0x20000d78
 8004358:	20000de0 	.word	0x20000de0

0800435c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004366:	f000 fb07 	bl	8004978 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800436a:	4b1c      	ldr	r3, [pc, #112]	; (80043dc <xTimerCreateTimerTask+0x80>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d021      	beq.n	80043b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800437a:	1d3a      	adds	r2, r7, #4
 800437c:	f107 0108 	add.w	r1, r7, #8
 8004380:	f107 030c 	add.w	r3, r7, #12
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe f8ab 	bl	80024e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	9202      	str	r2, [sp, #8]
 8004392:	9301      	str	r3, [sp, #4]
 8004394:	2302      	movs	r3, #2
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	2300      	movs	r3, #0
 800439a:	460a      	mov	r2, r1
 800439c:	4910      	ldr	r1, [pc, #64]	; (80043e0 <xTimerCreateTimerTask+0x84>)
 800439e:	4811      	ldr	r0, [pc, #68]	; (80043e4 <xTimerCreateTimerTask+0x88>)
 80043a0:	f7fe ffb6 	bl	8003310 <xTaskCreateStatic>
 80043a4:	4603      	mov	r3, r0
 80043a6:	4a10      	ldr	r2, [pc, #64]	; (80043e8 <xTimerCreateTimerTask+0x8c>)
 80043a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80043aa:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <xTimerCreateTimerTask+0x8c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80043b2:	2301      	movs	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	613b      	str	r3, [r7, #16]
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80043d2:	697b      	ldr	r3, [r7, #20]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000e1c 	.word	0x20000e1c
 80043e0:	08005e50 	.word	0x08005e50
 80043e4:	08004521 	.word	0x08004521
 80043e8:	20000e20 	.word	0x20000e20

080043ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	; 0x28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	623b      	str	r3, [r7, #32]
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800441a:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <xTimerGenericCommand+0x98>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d02a      	beq.n	8004478 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b05      	cmp	r3, #5
 8004432:	dc18      	bgt.n	8004466 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004434:	f7ff fdb4 	bl	8003fa0 <xTaskGetSchedulerState>
 8004438:	4603      	mov	r3, r0
 800443a:	2b02      	cmp	r3, #2
 800443c:	d109      	bne.n	8004452 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800443e:	4b11      	ldr	r3, [pc, #68]	; (8004484 <xTimerGenericCommand+0x98>)
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	f107 0110 	add.w	r1, r7, #16
 8004446:	2300      	movs	r3, #0
 8004448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800444a:	f7fe fa55 	bl	80028f8 <xQueueGenericSend>
 800444e:	6278      	str	r0, [r7, #36]	; 0x24
 8004450:	e012      	b.n	8004478 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <xTimerGenericCommand+0x98>)
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	f107 0110 	add.w	r1, r7, #16
 800445a:	2300      	movs	r3, #0
 800445c:	2200      	movs	r2, #0
 800445e:	f7fe fa4b 	bl	80028f8 <xQueueGenericSend>
 8004462:	6278      	str	r0, [r7, #36]	; 0x24
 8004464:	e008      	b.n	8004478 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <xTimerGenericCommand+0x98>)
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	f107 0110 	add.w	r1, r7, #16
 800446e:	2300      	movs	r3, #0
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	f7fe fb3f 	bl	8002af4 <xQueueGenericSendFromISR>
 8004476:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800447a:	4618      	mov	r0, r3
 800447c:	3728      	adds	r7, #40	; 0x28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000e1c 	.word	0x20000e1c

08004488 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af02      	add	r7, sp, #8
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004492:	4b22      	ldr	r3, [pc, #136]	; (800451c <prvProcessExpiredTimer+0x94>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	3304      	adds	r3, #4
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fe f8c1 	bl	8002628 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d022      	beq.n	80044fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	699a      	ldr	r2, [r3, #24]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	18d1      	adds	r1, r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	6978      	ldr	r0, [r7, #20]
 80044c2:	f000 f8d1 	bl	8004668 <prvInsertTimerInActiveList>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01f      	beq.n	800450c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044cc:	2300      	movs	r3, #0
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	2300      	movs	r3, #0
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	2100      	movs	r1, #0
 80044d6:	6978      	ldr	r0, [r7, #20]
 80044d8:	f7ff ff88 	bl	80043ec <xTimerGenericCommand>
 80044dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d113      	bne.n	800450c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	60fb      	str	r3, [r7, #12]
}
 80044f6:	bf00      	nop
 80044f8:	e7fe      	b.n	80044f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	b2da      	uxtb	r2, r3
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	6978      	ldr	r0, [r7, #20]
 8004512:	4798      	blx	r3
}
 8004514:	bf00      	nop
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20000e14 	.word	0x20000e14

08004520 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004528:	f107 0308 	add.w	r3, r7, #8
 800452c:	4618      	mov	r0, r3
 800452e:	f000 f857 	bl	80045e0 <prvGetNextExpireTime>
 8004532:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4619      	mov	r1, r3
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f803 	bl	8004544 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800453e:	f000 f8d5 	bl	80046ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004542:	e7f1      	b.n	8004528 <prvTimerTask+0x8>

08004544 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800454e:	f7ff f93b 	bl	80037c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004552:	f107 0308 	add.w	r3, r7, #8
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f866 	bl	8004628 <prvSampleTimeNow>
 800455c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d130      	bne.n	80045c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <prvProcessTimerOrBlockTask+0x3c>
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	429a      	cmp	r2, r3
 8004570:	d806      	bhi.n	8004580 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004572:	f7ff f937 	bl	80037e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff ff85 	bl	8004488 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800457e:	e024      	b.n	80045ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d008      	beq.n	8004598 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004586:	4b13      	ldr	r3, [pc, #76]	; (80045d4 <prvProcessTimerOrBlockTask+0x90>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <prvProcessTimerOrBlockTask+0x50>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <prvProcessTimerOrBlockTask+0x52>
 8004594:	2300      	movs	r3, #0
 8004596:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <prvProcessTimerOrBlockTask+0x94>)
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	4619      	mov	r1, r3
 80045a6:	f7fe fe7f 	bl	80032a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80045aa:	f7ff f91b 	bl	80037e4 <xTaskResumeAll>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80045b4:	4b09      	ldr	r3, [pc, #36]	; (80045dc <prvProcessTimerOrBlockTask+0x98>)
 80045b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	f3bf 8f6f 	isb	sy
}
 80045c4:	e001      	b.n	80045ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80045c6:	f7ff f90d 	bl	80037e4 <xTaskResumeAll>
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000e18 	.word	0x20000e18
 80045d8:	20000e1c 	.word	0x20000e1c
 80045dc:	e000ed04 	.word	0xe000ed04

080045e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045e8:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <prvGetNextExpireTime+0x44>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <prvGetNextExpireTime+0x16>
 80045f2:	2201      	movs	r2, #1
 80045f4:	e000      	b.n	80045f8 <prvGetNextExpireTime+0x18>
 80045f6:	2200      	movs	r2, #0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004604:	4b07      	ldr	r3, [pc, #28]	; (8004624 <prvGetNextExpireTime+0x44>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	e001      	b.n	8004614 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004614:	68fb      	ldr	r3, [r7, #12]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000e14 	.word	0x20000e14

08004628 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004630:	f7ff f976 	bl	8003920 <xTaskGetTickCount>
 8004634:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <prvSampleTimeNow+0x3c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	429a      	cmp	r2, r3
 800463e:	d205      	bcs.n	800464c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004640:	f000 f936 	bl	80048b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	e002      	b.n	8004652 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004652:	4a04      	ldr	r2, [pc, #16]	; (8004664 <prvSampleTimeNow+0x3c>)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004658:	68fb      	ldr	r3, [r7, #12]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000e24 	.word	0x20000e24

08004668 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d812      	bhi.n	80046b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	1ad2      	subs	r2, r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	429a      	cmp	r2, r3
 800469a:	d302      	bcc.n	80046a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800469c:	2301      	movs	r3, #1
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e01b      	b.n	80046da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046a2:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <prvInsertTimerInActiveList+0x7c>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3304      	adds	r3, #4
 80046aa:	4619      	mov	r1, r3
 80046ac:	4610      	mov	r0, r2
 80046ae:	f7fd ff82 	bl	80025b6 <vListInsert>
 80046b2:	e012      	b.n	80046da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d206      	bcs.n	80046ca <prvInsertTimerInActiveList+0x62>
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80046c4:	2301      	movs	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	e007      	b.n	80046da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046ca:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <prvInsertTimerInActiveList+0x80>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f7fd ff6e 	bl	80025b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80046da:	697b      	ldr	r3, [r7, #20]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20000e18 	.word	0x20000e18
 80046e8:	20000e14 	.word	0x20000e14

080046ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08e      	sub	sp, #56	; 0x38
 80046f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046f2:	e0ca      	b.n	800488a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	da18      	bge.n	800472c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80046fa:	1d3b      	adds	r3, r7, #4
 80046fc:	3304      	adds	r3, #4
 80046fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	61fb      	str	r3, [r7, #28]
}
 8004718:	bf00      	nop
 800471a:	e7fe      	b.n	800471a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004722:	6850      	ldr	r0, [r2, #4]
 8004724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004726:	6892      	ldr	r2, [r2, #8]
 8004728:	4611      	mov	r1, r2
 800472a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f2c0 80aa 	blt.w	8004888 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d004      	beq.n	800474a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	3304      	adds	r3, #4
 8004744:	4618      	mov	r0, r3
 8004746:	f7fd ff6f 	bl	8002628 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800474a:	463b      	mov	r3, r7
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff ff6b 	bl	8004628 <prvSampleTimeNow>
 8004752:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b09      	cmp	r3, #9
 8004758:	f200 8097 	bhi.w	800488a <prvProcessReceivedCommands+0x19e>
 800475c:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <prvProcessReceivedCommands+0x78>)
 800475e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004762:	bf00      	nop
 8004764:	0800478d 	.word	0x0800478d
 8004768:	0800478d 	.word	0x0800478d
 800476c:	0800478d 	.word	0x0800478d
 8004770:	08004801 	.word	0x08004801
 8004774:	08004815 	.word	0x08004815
 8004778:	0800485f 	.word	0x0800485f
 800477c:	0800478d 	.word	0x0800478d
 8004780:	0800478d 	.word	0x0800478d
 8004784:	08004801 	.word	0x08004801
 8004788:	08004815 	.word	0x08004815
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	b2da      	uxtb	r2, r3
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	18d1      	adds	r1, r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ac:	f7ff ff5c 	bl	8004668 <prvInsertTimerInActiveList>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d069      	beq.n	800488a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d05e      	beq.n	800488a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	441a      	add	r2, r3
 80047d4:	2300      	movs	r3, #0
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	2300      	movs	r3, #0
 80047da:	2100      	movs	r1, #0
 80047dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047de:	f7ff fe05 	bl	80043ec <xTimerGenericCommand>
 80047e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d14f      	bne.n	800488a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	61bb      	str	r3, [r7, #24]
}
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004806:	f023 0301 	bic.w	r3, r3, #1
 800480a:	b2da      	uxtb	r2, r3
 800480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004812:	e03a      	b.n	800488a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	b2da      	uxtb	r2, r3
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	617b      	str	r3, [r7, #20]
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	18d1      	adds	r1, r2, r3
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004858:	f7ff ff06 	bl	8004668 <prvInsertTimerInActiveList>
					break;
 800485c:	e015      	b.n	800488a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d103      	bne.n	8004874 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800486c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800486e:	f000 fbdf 	bl	8005030 <vPortFree>
 8004872:	e00a      	b.n	800488a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	b2da      	uxtb	r2, r3
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004886:	e000      	b.n	800488a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004888:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800488a:	4b08      	ldr	r3, [pc, #32]	; (80048ac <prvProcessReceivedCommands+0x1c0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	1d39      	adds	r1, r7, #4
 8004890:	2200      	movs	r2, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe f9ca 	bl	8002c2c <xQueueReceive>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	f47f af2a 	bne.w	80046f4 <prvProcessReceivedCommands+0x8>
	}
}
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop
 80048a4:	3730      	adds	r7, #48	; 0x30
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000e1c 	.word	0x20000e1c

080048b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048b6:	e048      	b.n	800494a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048b8:	4b2d      	ldr	r3, [pc, #180]	; (8004970 <prvSwitchTimerLists+0xc0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c2:	4b2b      	ldr	r3, [pc, #172]	; (8004970 <prvSwitchTimerLists+0xc0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fd fea9 	bl	8002628 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d02e      	beq.n	800494a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4413      	add	r3, r2
 80048f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d90e      	bls.n	800491c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800490a:	4b19      	ldr	r3, [pc, #100]	; (8004970 <prvSwitchTimerLists+0xc0>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3304      	adds	r3, #4
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f7fd fe4e 	bl	80025b6 <vListInsert>
 800491a:	e016      	b.n	800494a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800491c:	2300      	movs	r3, #0
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	2300      	movs	r3, #0
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	2100      	movs	r1, #0
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f7ff fd60 	bl	80043ec <xTimerGenericCommand>
 800492c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	603b      	str	r3, [r7, #0]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800494a:	4b09      	ldr	r3, [pc, #36]	; (8004970 <prvSwitchTimerLists+0xc0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1b1      	bne.n	80048b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <prvSwitchTimerLists+0xc0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <prvSwitchTimerLists+0xc4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a04      	ldr	r2, [pc, #16]	; (8004970 <prvSwitchTimerLists+0xc0>)
 8004960:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004962:	4a04      	ldr	r2, [pc, #16]	; (8004974 <prvSwitchTimerLists+0xc4>)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	6013      	str	r3, [r2, #0]
}
 8004968:	bf00      	nop
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000e14 	.word	0x20000e14
 8004974:	20000e18 	.word	0x20000e18

08004978 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800497e:	f000 f969 	bl	8004c54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <prvCheckForValidListAndQueue+0x60>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d120      	bne.n	80049cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800498a:	4814      	ldr	r0, [pc, #80]	; (80049dc <prvCheckForValidListAndQueue+0x64>)
 800498c:	f7fd fdc2 	bl	8002514 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004990:	4813      	ldr	r0, [pc, #76]	; (80049e0 <prvCheckForValidListAndQueue+0x68>)
 8004992:	f7fd fdbf 	bl	8002514 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <prvCheckForValidListAndQueue+0x6c>)
 8004998:	4a10      	ldr	r2, [pc, #64]	; (80049dc <prvCheckForValidListAndQueue+0x64>)
 800499a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800499c:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <prvCheckForValidListAndQueue+0x70>)
 800499e:	4a10      	ldr	r2, [pc, #64]	; (80049e0 <prvCheckForValidListAndQueue+0x68>)
 80049a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80049a2:	2300      	movs	r3, #0
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	4b11      	ldr	r3, [pc, #68]	; (80049ec <prvCheckForValidListAndQueue+0x74>)
 80049a8:	4a11      	ldr	r2, [pc, #68]	; (80049f0 <prvCheckForValidListAndQueue+0x78>)
 80049aa:	2110      	movs	r1, #16
 80049ac:	200a      	movs	r0, #10
 80049ae:	f7fd fecd 	bl	800274c <xQueueGenericCreateStatic>
 80049b2:	4603      	mov	r3, r0
 80049b4:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <prvCheckForValidListAndQueue+0x60>)
 80049b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80049b8:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <prvCheckForValidListAndQueue+0x60>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <prvCheckForValidListAndQueue+0x60>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	490b      	ldr	r1, [pc, #44]	; (80049f4 <prvCheckForValidListAndQueue+0x7c>)
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe fc44 	bl	8003254 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049cc:	f000 f972 	bl	8004cb4 <vPortExitCritical>
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000e1c 	.word	0x20000e1c
 80049dc:	20000dec 	.word	0x20000dec
 80049e0:	20000e00 	.word	0x20000e00
 80049e4:	20000e14 	.word	0x20000e14
 80049e8:	20000e18 	.word	0x20000e18
 80049ec:	20000ec8 	.word	0x20000ec8
 80049f0:	20000e28 	.word	0x20000e28
 80049f4:	08005e58 	.word	0x08005e58

080049f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3b04      	subs	r3, #4
 8004a08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3b04      	subs	r3, #4
 8004a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f023 0201 	bic.w	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3b04      	subs	r3, #4
 8004a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a28:	4a0c      	ldr	r2, [pc, #48]	; (8004a5c <pxPortInitialiseStack+0x64>)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3b14      	subs	r3, #20
 8004a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3b04      	subs	r3, #4
 8004a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f06f 0202 	mvn.w	r2, #2
 8004a46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3b20      	subs	r3, #32
 8004a4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	08004a61 	.word	0x08004a61

08004a60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a6a:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <prvTaskExitError+0x54>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a72:	d00a      	beq.n	8004a8a <prvTaskExitError+0x2a>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	60fb      	str	r3, [r7, #12]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <prvTaskExitError+0x28>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	60bb      	str	r3, [r7, #8]
}
 8004a9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a9e:	bf00      	nop
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0fc      	beq.n	8004aa0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004aa6:	bf00      	nop
 8004aa8:	bf00      	nop
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	2000000c 	.word	0x2000000c
	...

08004ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <pxCurrentTCBConst2>)
 8004ac2:	6819      	ldr	r1, [r3, #0]
 8004ac4:	6808      	ldr	r0, [r1, #0]
 8004ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aca:	f380 8809 	msr	PSP, r0
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f04f 0000 	mov.w	r0, #0
 8004ad6:	f380 8811 	msr	BASEPRI, r0
 8004ada:	4770      	bx	lr
 8004adc:	f3af 8000 	nop.w

08004ae0 <pxCurrentTCBConst2>:
 8004ae0:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop

08004ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ae8:	4808      	ldr	r0, [pc, #32]	; (8004b0c <prvPortStartFirstTask+0x24>)
 8004aea:	6800      	ldr	r0, [r0, #0]
 8004aec:	6800      	ldr	r0, [r0, #0]
 8004aee:	f380 8808 	msr	MSP, r0
 8004af2:	f04f 0000 	mov.w	r0, #0
 8004af6:	f380 8814 	msr	CONTROL, r0
 8004afa:	b662      	cpsie	i
 8004afc:	b661      	cpsie	f
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	df00      	svc	0
 8004b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b0a:	bf00      	nop
 8004b0c:	e000ed08 	.word	0xe000ed08

08004b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b16:	4b46      	ldr	r3, [pc, #280]	; (8004c30 <xPortStartScheduler+0x120>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a46      	ldr	r2, [pc, #280]	; (8004c34 <xPortStartScheduler+0x124>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d10a      	bne.n	8004b36 <xPortStartScheduler+0x26>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	613b      	str	r3, [r7, #16]
}
 8004b32:	bf00      	nop
 8004b34:	e7fe      	b.n	8004b34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b36:	4b3e      	ldr	r3, [pc, #248]	; (8004c30 <xPortStartScheduler+0x120>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a3f      	ldr	r2, [pc, #252]	; (8004c38 <xPortStartScheduler+0x128>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d10a      	bne.n	8004b56 <xPortStartScheduler+0x46>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	60fb      	str	r3, [r7, #12]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b56:	4b39      	ldr	r3, [pc, #228]	; (8004c3c <xPortStartScheduler+0x12c>)
 8004b58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	22ff      	movs	r2, #255	; 0xff
 8004b66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	4b31      	ldr	r3, [pc, #196]	; (8004c40 <xPortStartScheduler+0x130>)
 8004b7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b7e:	4b31      	ldr	r3, [pc, #196]	; (8004c44 <xPortStartScheduler+0x134>)
 8004b80:	2207      	movs	r2, #7
 8004b82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b84:	e009      	b.n	8004b9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b86:	4b2f      	ldr	r3, [pc, #188]	; (8004c44 <xPortStartScheduler+0x134>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	4a2d      	ldr	r2, [pc, #180]	; (8004c44 <xPortStartScheduler+0x134>)
 8004b8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba2:	2b80      	cmp	r3, #128	; 0x80
 8004ba4:	d0ef      	beq.n	8004b86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ba6:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <xPortStartScheduler+0x134>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f1c3 0307 	rsb	r3, r3, #7
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d00a      	beq.n	8004bc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	60bb      	str	r3, [r7, #8]
}
 8004bc4:	bf00      	nop
 8004bc6:	e7fe      	b.n	8004bc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bc8:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	4a1d      	ldr	r2, [pc, #116]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bd2:	4b1c      	ldr	r3, [pc, #112]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bda:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004be6:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <xPortStartScheduler+0x138>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a17      	ldr	r2, [pc, #92]	; (8004c48 <xPortStartScheduler+0x138>)
 8004bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bf2:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <xPortStartScheduler+0x138>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <xPortStartScheduler+0x138>)
 8004bf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bfe:	f000 f8dd 	bl	8004dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <xPortStartScheduler+0x13c>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c08:	f000 f8fc 	bl	8004e04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c0c:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <xPortStartScheduler+0x140>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0f      	ldr	r2, [pc, #60]	; (8004c50 <xPortStartScheduler+0x140>)
 8004c12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c18:	f7ff ff66 	bl	8004ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c1c:	f7fe ff4a 	bl	8003ab4 <vTaskSwitchContext>
	prvTaskExitError();
 8004c20:	f7ff ff1e 	bl	8004a60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	e000ed00 	.word	0xe000ed00
 8004c34:	410fc271 	.word	0x410fc271
 8004c38:	410fc270 	.word	0x410fc270
 8004c3c:	e000e400 	.word	0xe000e400
 8004c40:	20000f18 	.word	0x20000f18
 8004c44:	20000f1c 	.word	0x20000f1c
 8004c48:	e000ed20 	.word	0xe000ed20
 8004c4c:	2000000c 	.word	0x2000000c
 8004c50:	e000ef34 	.word	0xe000ef34

08004c54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	607b      	str	r3, [r7, #4]
}
 8004c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c6e:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <vPortEnterCritical+0x58>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3301      	adds	r3, #1
 8004c74:	4a0d      	ldr	r2, [pc, #52]	; (8004cac <vPortEnterCritical+0x58>)
 8004c76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <vPortEnterCritical+0x58>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d10f      	bne.n	8004ca0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <vPortEnterCritical+0x5c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	603b      	str	r3, [r7, #0]
}
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <vPortEnterCritical+0x4a>
	}
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	2000000c 	.word	0x2000000c
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <vPortExitCritical+0x50>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <vPortExitCritical+0x24>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	607b      	str	r3, [r7, #4]
}
 8004cd4:	bf00      	nop
 8004cd6:	e7fe      	b.n	8004cd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <vPortExitCritical+0x50>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <vPortExitCritical+0x50>)
 8004ce0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <vPortExitCritical+0x50>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d105      	bne.n	8004cf6 <vPortExitCritical+0x42>
 8004cea:	2300      	movs	r3, #0
 8004cec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	f383 8811 	msr	BASEPRI, r3
}
 8004cf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	2000000c 	.word	0x2000000c
	...

08004d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d10:	f3ef 8009 	mrs	r0, PSP
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <pxCurrentTCBConst>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	f01e 0f10 	tst.w	lr, #16
 8004d20:	bf08      	it	eq
 8004d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2a:	6010      	str	r0, [r2, #0]
 8004d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d34:	f380 8811 	msr	BASEPRI, r0
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f7fe feb8 	bl	8003ab4 <vTaskSwitchContext>
 8004d44:	f04f 0000 	mov.w	r0, #0
 8004d48:	f380 8811 	msr	BASEPRI, r0
 8004d4c:	bc09      	pop	{r0, r3}
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	6808      	ldr	r0, [r1, #0]
 8004d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d56:	f01e 0f10 	tst.w	lr, #16
 8004d5a:	bf08      	it	eq
 8004d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d60:	f380 8809 	msr	PSP, r0
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	f3af 8000 	nop.w

08004d70 <pxCurrentTCBConst>:
 8004d70:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop

08004d78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	607b      	str	r3, [r7, #4]
}
 8004d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d92:	f7fe fdd5 	bl	8003940 <xTaskIncrementTick>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <xPortSysTickHandler+0x40>)
 8004d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	2300      	movs	r3, #0
 8004da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f383 8811 	msr	BASEPRI, r3
}
 8004dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	e000ed04 	.word	0xe000ed04

08004dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <vPortSetupTimerInterrupt+0x34>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004dc6:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <vPortSetupTimerInterrupt+0x38>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <vPortSetupTimerInterrupt+0x3c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a0a      	ldr	r2, [pc, #40]	; (8004dfc <vPortSetupTimerInterrupt+0x40>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	099b      	lsrs	r3, r3, #6
 8004dd8:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <vPortSetupTimerInterrupt+0x44>)
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dde:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <vPortSetupTimerInterrupt+0x34>)
 8004de0:	2207      	movs	r2, #7
 8004de2:	601a      	str	r2, [r3, #0]
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	e000e010 	.word	0xe000e010
 8004df4:	e000e018 	.word	0xe000e018
 8004df8:	20000000 	.word	0x20000000
 8004dfc:	10624dd3 	.word	0x10624dd3
 8004e00:	e000e014 	.word	0xe000e014

08004e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e14 <vPortEnableVFP+0x10>
 8004e08:	6801      	ldr	r1, [r0, #0]
 8004e0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e0e:	6001      	str	r1, [r0, #0]
 8004e10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e12:	bf00      	nop
 8004e14:	e000ed88 	.word	0xe000ed88

08004e18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e1e:	f3ef 8305 	mrs	r3, IPSR
 8004e22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b0f      	cmp	r3, #15
 8004e28:	d914      	bls.n	8004e54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e2a:	4a17      	ldr	r2, [pc, #92]	; (8004e88 <vPortValidateInterruptPriority+0x70>)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e34:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <vPortValidateInterruptPriority+0x74>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	7afa      	ldrb	r2, [r7, #11]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d20a      	bcs.n	8004e54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	607b      	str	r3, [r7, #4]
}
 8004e50:	bf00      	nop
 8004e52:	e7fe      	b.n	8004e52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e54:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <vPortValidateInterruptPriority+0x78>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <vPortValidateInterruptPriority+0x7c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d90a      	bls.n	8004e7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	603b      	str	r3, [r7, #0]
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <vPortValidateInterruptPriority+0x60>
	}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	e000e3f0 	.word	0xe000e3f0
 8004e8c:	20000f18 	.word	0x20000f18
 8004e90:	e000ed0c 	.word	0xe000ed0c
 8004e94:	20000f1c 	.word	0x20000f1c

08004e98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	; 0x28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ea4:	f7fe fc90 	bl	80037c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ea8:	4b5b      	ldr	r3, [pc, #364]	; (8005018 <pvPortMalloc+0x180>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004eb0:	f000 f920 	bl	80050f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004eb4:	4b59      	ldr	r3, [pc, #356]	; (800501c <pvPortMalloc+0x184>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f040 8093 	bne.w	8004fe8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01d      	beq.n	8004f04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004ec8:	2208      	movs	r2, #8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4413      	add	r3, r2
 8004ece:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d014      	beq.n	8004f04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f023 0307 	bic.w	r3, r3, #7
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <pvPortMalloc+0x6c>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	617b      	str	r3, [r7, #20]
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d06e      	beq.n	8004fe8 <pvPortMalloc+0x150>
 8004f0a:	4b45      	ldr	r3, [pc, #276]	; (8005020 <pvPortMalloc+0x188>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d869      	bhi.n	8004fe8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f14:	4b43      	ldr	r3, [pc, #268]	; (8005024 <pvPortMalloc+0x18c>)
 8004f16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f18:	4b42      	ldr	r3, [pc, #264]	; (8005024 <pvPortMalloc+0x18c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f1e:	e004      	b.n	8004f2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d903      	bls.n	8004f3c <pvPortMalloc+0xa4>
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f1      	bne.n	8004f20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f3c:	4b36      	ldr	r3, [pc, #216]	; (8005018 <pvPortMalloc+0x180>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d050      	beq.n	8004fe8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2208      	movs	r2, #8
 8004f4c:	4413      	add	r3, r2
 8004f4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	1ad2      	subs	r2, r2, r3
 8004f60:	2308      	movs	r3, #8
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d91f      	bls.n	8004fa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <pvPortMalloc+0xf8>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	613b      	str	r3, [r7, #16]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	1ad2      	subs	r2, r2, r3
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fa2:	69b8      	ldr	r0, [r7, #24]
 8004fa4:	f000 f908 	bl	80051b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <pvPortMalloc+0x188>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	4a1b      	ldr	r2, [pc, #108]	; (8005020 <pvPortMalloc+0x188>)
 8004fb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fb6:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <pvPortMalloc+0x188>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <pvPortMalloc+0x190>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d203      	bcs.n	8004fca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fc2:	4b17      	ldr	r3, [pc, #92]	; (8005020 <pvPortMalloc+0x188>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a18      	ldr	r2, [pc, #96]	; (8005028 <pvPortMalloc+0x190>)
 8004fc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <pvPortMalloc+0x184>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004fde:	4b13      	ldr	r3, [pc, #76]	; (800502c <pvPortMalloc+0x194>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	4a11      	ldr	r2, [pc, #68]	; (800502c <pvPortMalloc+0x194>)
 8004fe6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fe8:	f7fe fbfc 	bl	80037e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <pvPortMalloc+0x174>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	60fb      	str	r3, [r7, #12]
}
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <pvPortMalloc+0x172>
	return pvReturn;
 800500c:	69fb      	ldr	r3, [r7, #28]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3728      	adds	r7, #40	; 0x28
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20004b28 	.word	0x20004b28
 800501c:	20004b3c 	.word	0x20004b3c
 8005020:	20004b2c 	.word	0x20004b2c
 8005024:	20004b20 	.word	0x20004b20
 8005028:	20004b30 	.word	0x20004b30
 800502c:	20004b34 	.word	0x20004b34

08005030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d04d      	beq.n	80050de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005042:	2308      	movs	r3, #8
 8005044:	425b      	negs	r3, r3
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4413      	add	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <vPortFree+0xb8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <vPortFree+0x44>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	60fb      	str	r3, [r7, #12]
}
 8005070:	bf00      	nop
 8005072:	e7fe      	b.n	8005072 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <vPortFree+0x62>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	60bb      	str	r3, [r7, #8]
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <vPortFree+0xb8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4013      	ands	r3, r2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01e      	beq.n	80050de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d11a      	bne.n	80050de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <vPortFree+0xb8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	401a      	ands	r2, r3
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050b8:	f7fe fb86 	bl	80037c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <vPortFree+0xbc>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4413      	add	r3, r2
 80050c6:	4a09      	ldr	r2, [pc, #36]	; (80050ec <vPortFree+0xbc>)
 80050c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050ca:	6938      	ldr	r0, [r7, #16]
 80050cc:	f000 f874 	bl	80051b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80050d0:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <vPortFree+0xc0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3301      	adds	r3, #1
 80050d6:	4a06      	ldr	r2, [pc, #24]	; (80050f0 <vPortFree+0xc0>)
 80050d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80050da:	f7fe fb83 	bl	80037e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050de:	bf00      	nop
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20004b3c 	.word	0x20004b3c
 80050ec:	20004b2c 	.word	0x20004b2c
 80050f0:	20004b38 	.word	0x20004b38

080050f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80050fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005100:	4b27      	ldr	r3, [pc, #156]	; (80051a0 <prvHeapInit+0xac>)
 8005102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00c      	beq.n	8005128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3307      	adds	r3, #7
 8005112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0307 	bic.w	r3, r3, #7
 800511a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	4a1f      	ldr	r2, [pc, #124]	; (80051a0 <prvHeapInit+0xac>)
 8005124:	4413      	add	r3, r2
 8005126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800512c:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <prvHeapInit+0xb0>)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005132:	4b1c      	ldr	r3, [pc, #112]	; (80051a4 <prvHeapInit+0xb0>)
 8005134:	2200      	movs	r2, #0
 8005136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	4413      	add	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005140:	2208      	movs	r2, #8
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1a9b      	subs	r3, r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0307 	bic.w	r3, r3, #7
 800514e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <prvHeapInit+0xb4>)
 8005154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005156:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <prvHeapInit+0xb4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2200      	movs	r2, #0
 800515c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800515e:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <prvHeapInit+0xb4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <prvHeapInit+0xb4>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <prvHeapInit+0xb8>)
 8005182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	4a09      	ldr	r2, [pc, #36]	; (80051b0 <prvHeapInit+0xbc>)
 800518a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800518c:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <prvHeapInit+0xc0>)
 800518e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005192:	601a      	str	r2, [r3, #0]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	20000f20 	.word	0x20000f20
 80051a4:	20004b20 	.word	0x20004b20
 80051a8:	20004b28 	.word	0x20004b28
 80051ac:	20004b30 	.word	0x20004b30
 80051b0:	20004b2c 	.word	0x20004b2c
 80051b4:	20004b3c 	.word	0x20004b3c

080051b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051c0:	4b28      	ldr	r3, [pc, #160]	; (8005264 <prvInsertBlockIntoFreeList+0xac>)
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	e002      	b.n	80051cc <prvInsertBlockIntoFreeList+0x14>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d8f7      	bhi.n	80051c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	4413      	add	r3, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d108      	bne.n	80051fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	441a      	add	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	441a      	add	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d118      	bne.n	8005240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4b15      	ldr	r3, [pc, #84]	; (8005268 <prvInsertBlockIntoFreeList+0xb0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d00d      	beq.n	8005236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	441a      	add	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	e008      	b.n	8005248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005236:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <prvInsertBlockIntoFreeList+0xb0>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	e003      	b.n	8005248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	429a      	cmp	r2, r3
 800524e:	d002      	beq.n	8005256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005256:	bf00      	nop
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20004b20 	.word	0x20004b20
 8005268:	20004b28 	.word	0x20004b28

0800526c <__errno>:
 800526c:	4b01      	ldr	r3, [pc, #4]	; (8005274 <__errno+0x8>)
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000010 	.word	0x20000010

08005278 <std>:
 8005278:	2300      	movs	r3, #0
 800527a:	b510      	push	{r4, lr}
 800527c:	4604      	mov	r4, r0
 800527e:	e9c0 3300 	strd	r3, r3, [r0]
 8005282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005286:	6083      	str	r3, [r0, #8]
 8005288:	8181      	strh	r1, [r0, #12]
 800528a:	6643      	str	r3, [r0, #100]	; 0x64
 800528c:	81c2      	strh	r2, [r0, #14]
 800528e:	6183      	str	r3, [r0, #24]
 8005290:	4619      	mov	r1, r3
 8005292:	2208      	movs	r2, #8
 8005294:	305c      	adds	r0, #92	; 0x5c
 8005296:	f000 f91a 	bl	80054ce <memset>
 800529a:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <std+0x38>)
 800529c:	6263      	str	r3, [r4, #36]	; 0x24
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <std+0x3c>)
 80052a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <std+0x40>)
 80052a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <std+0x44>)
 80052a8:	6224      	str	r4, [r4, #32]
 80052aa:	6323      	str	r3, [r4, #48]	; 0x30
 80052ac:	bd10      	pop	{r4, pc}
 80052ae:	bf00      	nop
 80052b0:	080057e9 	.word	0x080057e9
 80052b4:	0800580b 	.word	0x0800580b
 80052b8:	08005843 	.word	0x08005843
 80052bc:	08005867 	.word	0x08005867

080052c0 <_cleanup_r>:
 80052c0:	4901      	ldr	r1, [pc, #4]	; (80052c8 <_cleanup_r+0x8>)
 80052c2:	f000 b8af 	b.w	8005424 <_fwalk_reent>
 80052c6:	bf00      	nop
 80052c8:	08005b41 	.word	0x08005b41

080052cc <__sfmoreglue>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	2268      	movs	r2, #104	; 0x68
 80052d0:	1e4d      	subs	r5, r1, #1
 80052d2:	4355      	muls	r5, r2
 80052d4:	460e      	mov	r6, r1
 80052d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80052da:	f000 f921 	bl	8005520 <_malloc_r>
 80052de:	4604      	mov	r4, r0
 80052e0:	b140      	cbz	r0, 80052f4 <__sfmoreglue+0x28>
 80052e2:	2100      	movs	r1, #0
 80052e4:	e9c0 1600 	strd	r1, r6, [r0]
 80052e8:	300c      	adds	r0, #12
 80052ea:	60a0      	str	r0, [r4, #8]
 80052ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80052f0:	f000 f8ed 	bl	80054ce <memset>
 80052f4:	4620      	mov	r0, r4
 80052f6:	bd70      	pop	{r4, r5, r6, pc}

080052f8 <__sfp_lock_acquire>:
 80052f8:	4801      	ldr	r0, [pc, #4]	; (8005300 <__sfp_lock_acquire+0x8>)
 80052fa:	f000 b8d8 	b.w	80054ae <__retarget_lock_acquire_recursive>
 80052fe:	bf00      	nop
 8005300:	20004b41 	.word	0x20004b41

08005304 <__sfp_lock_release>:
 8005304:	4801      	ldr	r0, [pc, #4]	; (800530c <__sfp_lock_release+0x8>)
 8005306:	f000 b8d3 	b.w	80054b0 <__retarget_lock_release_recursive>
 800530a:	bf00      	nop
 800530c:	20004b41 	.word	0x20004b41

08005310 <__sinit_lock_acquire>:
 8005310:	4801      	ldr	r0, [pc, #4]	; (8005318 <__sinit_lock_acquire+0x8>)
 8005312:	f000 b8cc 	b.w	80054ae <__retarget_lock_acquire_recursive>
 8005316:	bf00      	nop
 8005318:	20004b42 	.word	0x20004b42

0800531c <__sinit_lock_release>:
 800531c:	4801      	ldr	r0, [pc, #4]	; (8005324 <__sinit_lock_release+0x8>)
 800531e:	f000 b8c7 	b.w	80054b0 <__retarget_lock_release_recursive>
 8005322:	bf00      	nop
 8005324:	20004b42 	.word	0x20004b42

08005328 <__sinit>:
 8005328:	b510      	push	{r4, lr}
 800532a:	4604      	mov	r4, r0
 800532c:	f7ff fff0 	bl	8005310 <__sinit_lock_acquire>
 8005330:	69a3      	ldr	r3, [r4, #24]
 8005332:	b11b      	cbz	r3, 800533c <__sinit+0x14>
 8005334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005338:	f7ff bff0 	b.w	800531c <__sinit_lock_release>
 800533c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005340:	6523      	str	r3, [r4, #80]	; 0x50
 8005342:	4b13      	ldr	r3, [pc, #76]	; (8005390 <__sinit+0x68>)
 8005344:	4a13      	ldr	r2, [pc, #76]	; (8005394 <__sinit+0x6c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	62a2      	str	r2, [r4, #40]	; 0x28
 800534a:	42a3      	cmp	r3, r4
 800534c:	bf04      	itt	eq
 800534e:	2301      	moveq	r3, #1
 8005350:	61a3      	streq	r3, [r4, #24]
 8005352:	4620      	mov	r0, r4
 8005354:	f000 f820 	bl	8005398 <__sfp>
 8005358:	6060      	str	r0, [r4, #4]
 800535a:	4620      	mov	r0, r4
 800535c:	f000 f81c 	bl	8005398 <__sfp>
 8005360:	60a0      	str	r0, [r4, #8]
 8005362:	4620      	mov	r0, r4
 8005364:	f000 f818 	bl	8005398 <__sfp>
 8005368:	2200      	movs	r2, #0
 800536a:	60e0      	str	r0, [r4, #12]
 800536c:	2104      	movs	r1, #4
 800536e:	6860      	ldr	r0, [r4, #4]
 8005370:	f7ff ff82 	bl	8005278 <std>
 8005374:	68a0      	ldr	r0, [r4, #8]
 8005376:	2201      	movs	r2, #1
 8005378:	2109      	movs	r1, #9
 800537a:	f7ff ff7d 	bl	8005278 <std>
 800537e:	68e0      	ldr	r0, [r4, #12]
 8005380:	2202      	movs	r2, #2
 8005382:	2112      	movs	r1, #18
 8005384:	f7ff ff78 	bl	8005278 <std>
 8005388:	2301      	movs	r3, #1
 800538a:	61a3      	str	r3, [r4, #24]
 800538c:	e7d2      	b.n	8005334 <__sinit+0xc>
 800538e:	bf00      	nop
 8005390:	08005ed8 	.word	0x08005ed8
 8005394:	080052c1 	.word	0x080052c1

08005398 <__sfp>:
 8005398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539a:	4607      	mov	r7, r0
 800539c:	f7ff ffac 	bl	80052f8 <__sfp_lock_acquire>
 80053a0:	4b1e      	ldr	r3, [pc, #120]	; (800541c <__sfp+0x84>)
 80053a2:	681e      	ldr	r6, [r3, #0]
 80053a4:	69b3      	ldr	r3, [r6, #24]
 80053a6:	b913      	cbnz	r3, 80053ae <__sfp+0x16>
 80053a8:	4630      	mov	r0, r6
 80053aa:	f7ff ffbd 	bl	8005328 <__sinit>
 80053ae:	3648      	adds	r6, #72	; 0x48
 80053b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80053b4:	3b01      	subs	r3, #1
 80053b6:	d503      	bpl.n	80053c0 <__sfp+0x28>
 80053b8:	6833      	ldr	r3, [r6, #0]
 80053ba:	b30b      	cbz	r3, 8005400 <__sfp+0x68>
 80053bc:	6836      	ldr	r6, [r6, #0]
 80053be:	e7f7      	b.n	80053b0 <__sfp+0x18>
 80053c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80053c4:	b9d5      	cbnz	r5, 80053fc <__sfp+0x64>
 80053c6:	4b16      	ldr	r3, [pc, #88]	; (8005420 <__sfp+0x88>)
 80053c8:	60e3      	str	r3, [r4, #12]
 80053ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80053ce:	6665      	str	r5, [r4, #100]	; 0x64
 80053d0:	f000 f86c 	bl	80054ac <__retarget_lock_init_recursive>
 80053d4:	f7ff ff96 	bl	8005304 <__sfp_lock_release>
 80053d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80053dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80053e0:	6025      	str	r5, [r4, #0]
 80053e2:	61a5      	str	r5, [r4, #24]
 80053e4:	2208      	movs	r2, #8
 80053e6:	4629      	mov	r1, r5
 80053e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80053ec:	f000 f86f 	bl	80054ce <memset>
 80053f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80053f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80053f8:	4620      	mov	r0, r4
 80053fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053fc:	3468      	adds	r4, #104	; 0x68
 80053fe:	e7d9      	b.n	80053b4 <__sfp+0x1c>
 8005400:	2104      	movs	r1, #4
 8005402:	4638      	mov	r0, r7
 8005404:	f7ff ff62 	bl	80052cc <__sfmoreglue>
 8005408:	4604      	mov	r4, r0
 800540a:	6030      	str	r0, [r6, #0]
 800540c:	2800      	cmp	r0, #0
 800540e:	d1d5      	bne.n	80053bc <__sfp+0x24>
 8005410:	f7ff ff78 	bl	8005304 <__sfp_lock_release>
 8005414:	230c      	movs	r3, #12
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	e7ee      	b.n	80053f8 <__sfp+0x60>
 800541a:	bf00      	nop
 800541c:	08005ed8 	.word	0x08005ed8
 8005420:	ffff0001 	.word	0xffff0001

08005424 <_fwalk_reent>:
 8005424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005428:	4606      	mov	r6, r0
 800542a:	4688      	mov	r8, r1
 800542c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005430:	2700      	movs	r7, #0
 8005432:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005436:	f1b9 0901 	subs.w	r9, r9, #1
 800543a:	d505      	bpl.n	8005448 <_fwalk_reent+0x24>
 800543c:	6824      	ldr	r4, [r4, #0]
 800543e:	2c00      	cmp	r4, #0
 8005440:	d1f7      	bne.n	8005432 <_fwalk_reent+0xe>
 8005442:	4638      	mov	r0, r7
 8005444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005448:	89ab      	ldrh	r3, [r5, #12]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d907      	bls.n	800545e <_fwalk_reent+0x3a>
 800544e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005452:	3301      	adds	r3, #1
 8005454:	d003      	beq.n	800545e <_fwalk_reent+0x3a>
 8005456:	4629      	mov	r1, r5
 8005458:	4630      	mov	r0, r6
 800545a:	47c0      	blx	r8
 800545c:	4307      	orrs	r7, r0
 800545e:	3568      	adds	r5, #104	; 0x68
 8005460:	e7e9      	b.n	8005436 <_fwalk_reent+0x12>
	...

08005464 <__libc_init_array>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4d0d      	ldr	r5, [pc, #52]	; (800549c <__libc_init_array+0x38>)
 8005468:	4c0d      	ldr	r4, [pc, #52]	; (80054a0 <__libc_init_array+0x3c>)
 800546a:	1b64      	subs	r4, r4, r5
 800546c:	10a4      	asrs	r4, r4, #2
 800546e:	2600      	movs	r6, #0
 8005470:	42a6      	cmp	r6, r4
 8005472:	d109      	bne.n	8005488 <__libc_init_array+0x24>
 8005474:	4d0b      	ldr	r5, [pc, #44]	; (80054a4 <__libc_init_array+0x40>)
 8005476:	4c0c      	ldr	r4, [pc, #48]	; (80054a8 <__libc_init_array+0x44>)
 8005478:	f000 fca2 	bl	8005dc0 <_init>
 800547c:	1b64      	subs	r4, r4, r5
 800547e:	10a4      	asrs	r4, r4, #2
 8005480:	2600      	movs	r6, #0
 8005482:	42a6      	cmp	r6, r4
 8005484:	d105      	bne.n	8005492 <__libc_init_array+0x2e>
 8005486:	bd70      	pop	{r4, r5, r6, pc}
 8005488:	f855 3b04 	ldr.w	r3, [r5], #4
 800548c:	4798      	blx	r3
 800548e:	3601      	adds	r6, #1
 8005490:	e7ee      	b.n	8005470 <__libc_init_array+0xc>
 8005492:	f855 3b04 	ldr.w	r3, [r5], #4
 8005496:	4798      	blx	r3
 8005498:	3601      	adds	r6, #1
 800549a:	e7f2      	b.n	8005482 <__libc_init_array+0x1e>
 800549c:	08005ee4 	.word	0x08005ee4
 80054a0:	08005ee4 	.word	0x08005ee4
 80054a4:	08005ee4 	.word	0x08005ee4
 80054a8:	08005ee8 	.word	0x08005ee8

080054ac <__retarget_lock_init_recursive>:
 80054ac:	4770      	bx	lr

080054ae <__retarget_lock_acquire_recursive>:
 80054ae:	4770      	bx	lr

080054b0 <__retarget_lock_release_recursive>:
 80054b0:	4770      	bx	lr

080054b2 <memcpy>:
 80054b2:	440a      	add	r2, r1
 80054b4:	4291      	cmp	r1, r2
 80054b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80054ba:	d100      	bne.n	80054be <memcpy+0xc>
 80054bc:	4770      	bx	lr
 80054be:	b510      	push	{r4, lr}
 80054c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c8:	4291      	cmp	r1, r2
 80054ca:	d1f9      	bne.n	80054c0 <memcpy+0xe>
 80054cc:	bd10      	pop	{r4, pc}

080054ce <memset>:
 80054ce:	4402      	add	r2, r0
 80054d0:	4603      	mov	r3, r0
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d100      	bne.n	80054d8 <memset+0xa>
 80054d6:	4770      	bx	lr
 80054d8:	f803 1b01 	strb.w	r1, [r3], #1
 80054dc:	e7f9      	b.n	80054d2 <memset+0x4>
	...

080054e0 <sbrk_aligned>:
 80054e0:	b570      	push	{r4, r5, r6, lr}
 80054e2:	4e0e      	ldr	r6, [pc, #56]	; (800551c <sbrk_aligned+0x3c>)
 80054e4:	460c      	mov	r4, r1
 80054e6:	6831      	ldr	r1, [r6, #0]
 80054e8:	4605      	mov	r5, r0
 80054ea:	b911      	cbnz	r1, 80054f2 <sbrk_aligned+0x12>
 80054ec:	f000 f96c 	bl	80057c8 <_sbrk_r>
 80054f0:	6030      	str	r0, [r6, #0]
 80054f2:	4621      	mov	r1, r4
 80054f4:	4628      	mov	r0, r5
 80054f6:	f000 f967 	bl	80057c8 <_sbrk_r>
 80054fa:	1c43      	adds	r3, r0, #1
 80054fc:	d00a      	beq.n	8005514 <sbrk_aligned+0x34>
 80054fe:	1cc4      	adds	r4, r0, #3
 8005500:	f024 0403 	bic.w	r4, r4, #3
 8005504:	42a0      	cmp	r0, r4
 8005506:	d007      	beq.n	8005518 <sbrk_aligned+0x38>
 8005508:	1a21      	subs	r1, r4, r0
 800550a:	4628      	mov	r0, r5
 800550c:	f000 f95c 	bl	80057c8 <_sbrk_r>
 8005510:	3001      	adds	r0, #1
 8005512:	d101      	bne.n	8005518 <sbrk_aligned+0x38>
 8005514:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005518:	4620      	mov	r0, r4
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	20004b48 	.word	0x20004b48

08005520 <_malloc_r>:
 8005520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005524:	1ccd      	adds	r5, r1, #3
 8005526:	f025 0503 	bic.w	r5, r5, #3
 800552a:	3508      	adds	r5, #8
 800552c:	2d0c      	cmp	r5, #12
 800552e:	bf38      	it	cc
 8005530:	250c      	movcc	r5, #12
 8005532:	2d00      	cmp	r5, #0
 8005534:	4607      	mov	r7, r0
 8005536:	db01      	blt.n	800553c <_malloc_r+0x1c>
 8005538:	42a9      	cmp	r1, r5
 800553a:	d905      	bls.n	8005548 <_malloc_r+0x28>
 800553c:	230c      	movs	r3, #12
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	2600      	movs	r6, #0
 8005542:	4630      	mov	r0, r6
 8005544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005548:	4e2e      	ldr	r6, [pc, #184]	; (8005604 <_malloc_r+0xe4>)
 800554a:	f000 fbad 	bl	8005ca8 <__malloc_lock>
 800554e:	6833      	ldr	r3, [r6, #0]
 8005550:	461c      	mov	r4, r3
 8005552:	bb34      	cbnz	r4, 80055a2 <_malloc_r+0x82>
 8005554:	4629      	mov	r1, r5
 8005556:	4638      	mov	r0, r7
 8005558:	f7ff ffc2 	bl	80054e0 <sbrk_aligned>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	4604      	mov	r4, r0
 8005560:	d14d      	bne.n	80055fe <_malloc_r+0xde>
 8005562:	6834      	ldr	r4, [r6, #0]
 8005564:	4626      	mov	r6, r4
 8005566:	2e00      	cmp	r6, #0
 8005568:	d140      	bne.n	80055ec <_malloc_r+0xcc>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	4631      	mov	r1, r6
 800556e:	4638      	mov	r0, r7
 8005570:	eb04 0803 	add.w	r8, r4, r3
 8005574:	f000 f928 	bl	80057c8 <_sbrk_r>
 8005578:	4580      	cmp	r8, r0
 800557a:	d13a      	bne.n	80055f2 <_malloc_r+0xd2>
 800557c:	6821      	ldr	r1, [r4, #0]
 800557e:	3503      	adds	r5, #3
 8005580:	1a6d      	subs	r5, r5, r1
 8005582:	f025 0503 	bic.w	r5, r5, #3
 8005586:	3508      	adds	r5, #8
 8005588:	2d0c      	cmp	r5, #12
 800558a:	bf38      	it	cc
 800558c:	250c      	movcc	r5, #12
 800558e:	4629      	mov	r1, r5
 8005590:	4638      	mov	r0, r7
 8005592:	f7ff ffa5 	bl	80054e0 <sbrk_aligned>
 8005596:	3001      	adds	r0, #1
 8005598:	d02b      	beq.n	80055f2 <_malloc_r+0xd2>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	442b      	add	r3, r5
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	e00e      	b.n	80055c0 <_malloc_r+0xa0>
 80055a2:	6822      	ldr	r2, [r4, #0]
 80055a4:	1b52      	subs	r2, r2, r5
 80055a6:	d41e      	bmi.n	80055e6 <_malloc_r+0xc6>
 80055a8:	2a0b      	cmp	r2, #11
 80055aa:	d916      	bls.n	80055da <_malloc_r+0xba>
 80055ac:	1961      	adds	r1, r4, r5
 80055ae:	42a3      	cmp	r3, r4
 80055b0:	6025      	str	r5, [r4, #0]
 80055b2:	bf18      	it	ne
 80055b4:	6059      	strne	r1, [r3, #4]
 80055b6:	6863      	ldr	r3, [r4, #4]
 80055b8:	bf08      	it	eq
 80055ba:	6031      	streq	r1, [r6, #0]
 80055bc:	5162      	str	r2, [r4, r5]
 80055be:	604b      	str	r3, [r1, #4]
 80055c0:	4638      	mov	r0, r7
 80055c2:	f104 060b 	add.w	r6, r4, #11
 80055c6:	f000 fb75 	bl	8005cb4 <__malloc_unlock>
 80055ca:	f026 0607 	bic.w	r6, r6, #7
 80055ce:	1d23      	adds	r3, r4, #4
 80055d0:	1af2      	subs	r2, r6, r3
 80055d2:	d0b6      	beq.n	8005542 <_malloc_r+0x22>
 80055d4:	1b9b      	subs	r3, r3, r6
 80055d6:	50a3      	str	r3, [r4, r2]
 80055d8:	e7b3      	b.n	8005542 <_malloc_r+0x22>
 80055da:	6862      	ldr	r2, [r4, #4]
 80055dc:	42a3      	cmp	r3, r4
 80055de:	bf0c      	ite	eq
 80055e0:	6032      	streq	r2, [r6, #0]
 80055e2:	605a      	strne	r2, [r3, #4]
 80055e4:	e7ec      	b.n	80055c0 <_malloc_r+0xa0>
 80055e6:	4623      	mov	r3, r4
 80055e8:	6864      	ldr	r4, [r4, #4]
 80055ea:	e7b2      	b.n	8005552 <_malloc_r+0x32>
 80055ec:	4634      	mov	r4, r6
 80055ee:	6876      	ldr	r6, [r6, #4]
 80055f0:	e7b9      	b.n	8005566 <_malloc_r+0x46>
 80055f2:	230c      	movs	r3, #12
 80055f4:	603b      	str	r3, [r7, #0]
 80055f6:	4638      	mov	r0, r7
 80055f8:	f000 fb5c 	bl	8005cb4 <__malloc_unlock>
 80055fc:	e7a1      	b.n	8005542 <_malloc_r+0x22>
 80055fe:	6025      	str	r5, [r4, #0]
 8005600:	e7de      	b.n	80055c0 <_malloc_r+0xa0>
 8005602:	bf00      	nop
 8005604:	20004b44 	.word	0x20004b44

08005608 <_puts_r>:
 8005608:	b570      	push	{r4, r5, r6, lr}
 800560a:	460e      	mov	r6, r1
 800560c:	4605      	mov	r5, r0
 800560e:	b118      	cbz	r0, 8005618 <_puts_r+0x10>
 8005610:	6983      	ldr	r3, [r0, #24]
 8005612:	b90b      	cbnz	r3, 8005618 <_puts_r+0x10>
 8005614:	f7ff fe88 	bl	8005328 <__sinit>
 8005618:	69ab      	ldr	r3, [r5, #24]
 800561a:	68ac      	ldr	r4, [r5, #8]
 800561c:	b913      	cbnz	r3, 8005624 <_puts_r+0x1c>
 800561e:	4628      	mov	r0, r5
 8005620:	f7ff fe82 	bl	8005328 <__sinit>
 8005624:	4b2c      	ldr	r3, [pc, #176]	; (80056d8 <_puts_r+0xd0>)
 8005626:	429c      	cmp	r4, r3
 8005628:	d120      	bne.n	800566c <_puts_r+0x64>
 800562a:	686c      	ldr	r4, [r5, #4]
 800562c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800562e:	07db      	lsls	r3, r3, #31
 8005630:	d405      	bmi.n	800563e <_puts_r+0x36>
 8005632:	89a3      	ldrh	r3, [r4, #12]
 8005634:	0598      	lsls	r0, r3, #22
 8005636:	d402      	bmi.n	800563e <_puts_r+0x36>
 8005638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800563a:	f7ff ff38 	bl	80054ae <__retarget_lock_acquire_recursive>
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	0719      	lsls	r1, r3, #28
 8005642:	d51d      	bpl.n	8005680 <_puts_r+0x78>
 8005644:	6923      	ldr	r3, [r4, #16]
 8005646:	b1db      	cbz	r3, 8005680 <_puts_r+0x78>
 8005648:	3e01      	subs	r6, #1
 800564a:	68a3      	ldr	r3, [r4, #8]
 800564c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005650:	3b01      	subs	r3, #1
 8005652:	60a3      	str	r3, [r4, #8]
 8005654:	bb39      	cbnz	r1, 80056a6 <_puts_r+0x9e>
 8005656:	2b00      	cmp	r3, #0
 8005658:	da38      	bge.n	80056cc <_puts_r+0xc4>
 800565a:	4622      	mov	r2, r4
 800565c:	210a      	movs	r1, #10
 800565e:	4628      	mov	r0, r5
 8005660:	f000 f906 	bl	8005870 <__swbuf_r>
 8005664:	3001      	adds	r0, #1
 8005666:	d011      	beq.n	800568c <_puts_r+0x84>
 8005668:	250a      	movs	r5, #10
 800566a:	e011      	b.n	8005690 <_puts_r+0x88>
 800566c:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <_puts_r+0xd4>)
 800566e:	429c      	cmp	r4, r3
 8005670:	d101      	bne.n	8005676 <_puts_r+0x6e>
 8005672:	68ac      	ldr	r4, [r5, #8]
 8005674:	e7da      	b.n	800562c <_puts_r+0x24>
 8005676:	4b1a      	ldr	r3, [pc, #104]	; (80056e0 <_puts_r+0xd8>)
 8005678:	429c      	cmp	r4, r3
 800567a:	bf08      	it	eq
 800567c:	68ec      	ldreq	r4, [r5, #12]
 800567e:	e7d5      	b.n	800562c <_puts_r+0x24>
 8005680:	4621      	mov	r1, r4
 8005682:	4628      	mov	r0, r5
 8005684:	f000 f958 	bl	8005938 <__swsetup_r>
 8005688:	2800      	cmp	r0, #0
 800568a:	d0dd      	beq.n	8005648 <_puts_r+0x40>
 800568c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005690:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005692:	07da      	lsls	r2, r3, #31
 8005694:	d405      	bmi.n	80056a2 <_puts_r+0x9a>
 8005696:	89a3      	ldrh	r3, [r4, #12]
 8005698:	059b      	lsls	r3, r3, #22
 800569a:	d402      	bmi.n	80056a2 <_puts_r+0x9a>
 800569c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800569e:	f7ff ff07 	bl	80054b0 <__retarget_lock_release_recursive>
 80056a2:	4628      	mov	r0, r5
 80056a4:	bd70      	pop	{r4, r5, r6, pc}
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	da04      	bge.n	80056b4 <_puts_r+0xac>
 80056aa:	69a2      	ldr	r2, [r4, #24]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	dc06      	bgt.n	80056be <_puts_r+0xb6>
 80056b0:	290a      	cmp	r1, #10
 80056b2:	d004      	beq.n	80056be <_puts_r+0xb6>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	6022      	str	r2, [r4, #0]
 80056ba:	7019      	strb	r1, [r3, #0]
 80056bc:	e7c5      	b.n	800564a <_puts_r+0x42>
 80056be:	4622      	mov	r2, r4
 80056c0:	4628      	mov	r0, r5
 80056c2:	f000 f8d5 	bl	8005870 <__swbuf_r>
 80056c6:	3001      	adds	r0, #1
 80056c8:	d1bf      	bne.n	800564a <_puts_r+0x42>
 80056ca:	e7df      	b.n	800568c <_puts_r+0x84>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	250a      	movs	r5, #10
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	6022      	str	r2, [r4, #0]
 80056d4:	701d      	strb	r5, [r3, #0]
 80056d6:	e7db      	b.n	8005690 <_puts_r+0x88>
 80056d8:	08005e98 	.word	0x08005e98
 80056dc:	08005eb8 	.word	0x08005eb8
 80056e0:	08005e78 	.word	0x08005e78

080056e4 <puts>:
 80056e4:	4b02      	ldr	r3, [pc, #8]	; (80056f0 <puts+0xc>)
 80056e6:	4601      	mov	r1, r0
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	f7ff bf8d 	b.w	8005608 <_puts_r>
 80056ee:	bf00      	nop
 80056f0:	20000010 	.word	0x20000010

080056f4 <cleanup_glue>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	460c      	mov	r4, r1
 80056f8:	6809      	ldr	r1, [r1, #0]
 80056fa:	4605      	mov	r5, r0
 80056fc:	b109      	cbz	r1, 8005702 <cleanup_glue+0xe>
 80056fe:	f7ff fff9 	bl	80056f4 <cleanup_glue>
 8005702:	4621      	mov	r1, r4
 8005704:	4628      	mov	r0, r5
 8005706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800570a:	f000 bad9 	b.w	8005cc0 <_free_r>
	...

08005710 <_reclaim_reent>:
 8005710:	4b2c      	ldr	r3, [pc, #176]	; (80057c4 <_reclaim_reent+0xb4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4283      	cmp	r3, r0
 8005716:	b570      	push	{r4, r5, r6, lr}
 8005718:	4604      	mov	r4, r0
 800571a:	d051      	beq.n	80057c0 <_reclaim_reent+0xb0>
 800571c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800571e:	b143      	cbz	r3, 8005732 <_reclaim_reent+0x22>
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d14a      	bne.n	80057bc <_reclaim_reent+0xac>
 8005726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005728:	6819      	ldr	r1, [r3, #0]
 800572a:	b111      	cbz	r1, 8005732 <_reclaim_reent+0x22>
 800572c:	4620      	mov	r0, r4
 800572e:	f000 fac7 	bl	8005cc0 <_free_r>
 8005732:	6961      	ldr	r1, [r4, #20]
 8005734:	b111      	cbz	r1, 800573c <_reclaim_reent+0x2c>
 8005736:	4620      	mov	r0, r4
 8005738:	f000 fac2 	bl	8005cc0 <_free_r>
 800573c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800573e:	b111      	cbz	r1, 8005746 <_reclaim_reent+0x36>
 8005740:	4620      	mov	r0, r4
 8005742:	f000 fabd 	bl	8005cc0 <_free_r>
 8005746:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005748:	b111      	cbz	r1, 8005750 <_reclaim_reent+0x40>
 800574a:	4620      	mov	r0, r4
 800574c:	f000 fab8 	bl	8005cc0 <_free_r>
 8005750:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005752:	b111      	cbz	r1, 800575a <_reclaim_reent+0x4a>
 8005754:	4620      	mov	r0, r4
 8005756:	f000 fab3 	bl	8005cc0 <_free_r>
 800575a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800575c:	b111      	cbz	r1, 8005764 <_reclaim_reent+0x54>
 800575e:	4620      	mov	r0, r4
 8005760:	f000 faae 	bl	8005cc0 <_free_r>
 8005764:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005766:	b111      	cbz	r1, 800576e <_reclaim_reent+0x5e>
 8005768:	4620      	mov	r0, r4
 800576a:	f000 faa9 	bl	8005cc0 <_free_r>
 800576e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005770:	b111      	cbz	r1, 8005778 <_reclaim_reent+0x68>
 8005772:	4620      	mov	r0, r4
 8005774:	f000 faa4 	bl	8005cc0 <_free_r>
 8005778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800577a:	b111      	cbz	r1, 8005782 <_reclaim_reent+0x72>
 800577c:	4620      	mov	r0, r4
 800577e:	f000 fa9f 	bl	8005cc0 <_free_r>
 8005782:	69a3      	ldr	r3, [r4, #24]
 8005784:	b1e3      	cbz	r3, 80057c0 <_reclaim_reent+0xb0>
 8005786:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005788:	4620      	mov	r0, r4
 800578a:	4798      	blx	r3
 800578c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800578e:	b1b9      	cbz	r1, 80057c0 <_reclaim_reent+0xb0>
 8005790:	4620      	mov	r0, r4
 8005792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005796:	f7ff bfad 	b.w	80056f4 <cleanup_glue>
 800579a:	5949      	ldr	r1, [r1, r5]
 800579c:	b941      	cbnz	r1, 80057b0 <_reclaim_reent+0xa0>
 800579e:	3504      	adds	r5, #4
 80057a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057a2:	2d80      	cmp	r5, #128	; 0x80
 80057a4:	68d9      	ldr	r1, [r3, #12]
 80057a6:	d1f8      	bne.n	800579a <_reclaim_reent+0x8a>
 80057a8:	4620      	mov	r0, r4
 80057aa:	f000 fa89 	bl	8005cc0 <_free_r>
 80057ae:	e7ba      	b.n	8005726 <_reclaim_reent+0x16>
 80057b0:	680e      	ldr	r6, [r1, #0]
 80057b2:	4620      	mov	r0, r4
 80057b4:	f000 fa84 	bl	8005cc0 <_free_r>
 80057b8:	4631      	mov	r1, r6
 80057ba:	e7ef      	b.n	800579c <_reclaim_reent+0x8c>
 80057bc:	2500      	movs	r5, #0
 80057be:	e7ef      	b.n	80057a0 <_reclaim_reent+0x90>
 80057c0:	bd70      	pop	{r4, r5, r6, pc}
 80057c2:	bf00      	nop
 80057c4:	20000010 	.word	0x20000010

080057c8 <_sbrk_r>:
 80057c8:	b538      	push	{r3, r4, r5, lr}
 80057ca:	4d06      	ldr	r5, [pc, #24]	; (80057e4 <_sbrk_r+0x1c>)
 80057cc:	2300      	movs	r3, #0
 80057ce:	4604      	mov	r4, r0
 80057d0:	4608      	mov	r0, r1
 80057d2:	602b      	str	r3, [r5, #0]
 80057d4:	f7fb f974 	bl	8000ac0 <_sbrk>
 80057d8:	1c43      	adds	r3, r0, #1
 80057da:	d102      	bne.n	80057e2 <_sbrk_r+0x1a>
 80057dc:	682b      	ldr	r3, [r5, #0]
 80057de:	b103      	cbz	r3, 80057e2 <_sbrk_r+0x1a>
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	bd38      	pop	{r3, r4, r5, pc}
 80057e4:	20004b4c 	.word	0x20004b4c

080057e8 <__sread>:
 80057e8:	b510      	push	{r4, lr}
 80057ea:	460c      	mov	r4, r1
 80057ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f0:	f000 fab2 	bl	8005d58 <_read_r>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	bfab      	itete	ge
 80057f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057fa:	89a3      	ldrhlt	r3, [r4, #12]
 80057fc:	181b      	addge	r3, r3, r0
 80057fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005802:	bfac      	ite	ge
 8005804:	6563      	strge	r3, [r4, #84]	; 0x54
 8005806:	81a3      	strhlt	r3, [r4, #12]
 8005808:	bd10      	pop	{r4, pc}

0800580a <__swrite>:
 800580a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800580e:	461f      	mov	r7, r3
 8005810:	898b      	ldrh	r3, [r1, #12]
 8005812:	05db      	lsls	r3, r3, #23
 8005814:	4605      	mov	r5, r0
 8005816:	460c      	mov	r4, r1
 8005818:	4616      	mov	r6, r2
 800581a:	d505      	bpl.n	8005828 <__swrite+0x1e>
 800581c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005820:	2302      	movs	r3, #2
 8005822:	2200      	movs	r2, #0
 8005824:	f000 f9c8 	bl	8005bb8 <_lseek_r>
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800582e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005832:	81a3      	strh	r3, [r4, #12]
 8005834:	4632      	mov	r2, r6
 8005836:	463b      	mov	r3, r7
 8005838:	4628      	mov	r0, r5
 800583a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800583e:	f000 b869 	b.w	8005914 <_write_r>

08005842 <__sseek>:
 8005842:	b510      	push	{r4, lr}
 8005844:	460c      	mov	r4, r1
 8005846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800584a:	f000 f9b5 	bl	8005bb8 <_lseek_r>
 800584e:	1c43      	adds	r3, r0, #1
 8005850:	89a3      	ldrh	r3, [r4, #12]
 8005852:	bf15      	itete	ne
 8005854:	6560      	strne	r0, [r4, #84]	; 0x54
 8005856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800585a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800585e:	81a3      	strheq	r3, [r4, #12]
 8005860:	bf18      	it	ne
 8005862:	81a3      	strhne	r3, [r4, #12]
 8005864:	bd10      	pop	{r4, pc}

08005866 <__sclose>:
 8005866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800586a:	f000 b8d3 	b.w	8005a14 <_close_r>
	...

08005870 <__swbuf_r>:
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	460e      	mov	r6, r1
 8005874:	4614      	mov	r4, r2
 8005876:	4605      	mov	r5, r0
 8005878:	b118      	cbz	r0, 8005882 <__swbuf_r+0x12>
 800587a:	6983      	ldr	r3, [r0, #24]
 800587c:	b90b      	cbnz	r3, 8005882 <__swbuf_r+0x12>
 800587e:	f7ff fd53 	bl	8005328 <__sinit>
 8005882:	4b21      	ldr	r3, [pc, #132]	; (8005908 <__swbuf_r+0x98>)
 8005884:	429c      	cmp	r4, r3
 8005886:	d12b      	bne.n	80058e0 <__swbuf_r+0x70>
 8005888:	686c      	ldr	r4, [r5, #4]
 800588a:	69a3      	ldr	r3, [r4, #24]
 800588c:	60a3      	str	r3, [r4, #8]
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	071a      	lsls	r2, r3, #28
 8005892:	d52f      	bpl.n	80058f4 <__swbuf_r+0x84>
 8005894:	6923      	ldr	r3, [r4, #16]
 8005896:	b36b      	cbz	r3, 80058f4 <__swbuf_r+0x84>
 8005898:	6923      	ldr	r3, [r4, #16]
 800589a:	6820      	ldr	r0, [r4, #0]
 800589c:	1ac0      	subs	r0, r0, r3
 800589e:	6963      	ldr	r3, [r4, #20]
 80058a0:	b2f6      	uxtb	r6, r6
 80058a2:	4283      	cmp	r3, r0
 80058a4:	4637      	mov	r7, r6
 80058a6:	dc04      	bgt.n	80058b2 <__swbuf_r+0x42>
 80058a8:	4621      	mov	r1, r4
 80058aa:	4628      	mov	r0, r5
 80058ac:	f000 f948 	bl	8005b40 <_fflush_r>
 80058b0:	bb30      	cbnz	r0, 8005900 <__swbuf_r+0x90>
 80058b2:	68a3      	ldr	r3, [r4, #8]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	60a3      	str	r3, [r4, #8]
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	6022      	str	r2, [r4, #0]
 80058be:	701e      	strb	r6, [r3, #0]
 80058c0:	6963      	ldr	r3, [r4, #20]
 80058c2:	3001      	adds	r0, #1
 80058c4:	4283      	cmp	r3, r0
 80058c6:	d004      	beq.n	80058d2 <__swbuf_r+0x62>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	07db      	lsls	r3, r3, #31
 80058cc:	d506      	bpl.n	80058dc <__swbuf_r+0x6c>
 80058ce:	2e0a      	cmp	r6, #10
 80058d0:	d104      	bne.n	80058dc <__swbuf_r+0x6c>
 80058d2:	4621      	mov	r1, r4
 80058d4:	4628      	mov	r0, r5
 80058d6:	f000 f933 	bl	8005b40 <_fflush_r>
 80058da:	b988      	cbnz	r0, 8005900 <__swbuf_r+0x90>
 80058dc:	4638      	mov	r0, r7
 80058de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058e0:	4b0a      	ldr	r3, [pc, #40]	; (800590c <__swbuf_r+0x9c>)
 80058e2:	429c      	cmp	r4, r3
 80058e4:	d101      	bne.n	80058ea <__swbuf_r+0x7a>
 80058e6:	68ac      	ldr	r4, [r5, #8]
 80058e8:	e7cf      	b.n	800588a <__swbuf_r+0x1a>
 80058ea:	4b09      	ldr	r3, [pc, #36]	; (8005910 <__swbuf_r+0xa0>)
 80058ec:	429c      	cmp	r4, r3
 80058ee:	bf08      	it	eq
 80058f0:	68ec      	ldreq	r4, [r5, #12]
 80058f2:	e7ca      	b.n	800588a <__swbuf_r+0x1a>
 80058f4:	4621      	mov	r1, r4
 80058f6:	4628      	mov	r0, r5
 80058f8:	f000 f81e 	bl	8005938 <__swsetup_r>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d0cb      	beq.n	8005898 <__swbuf_r+0x28>
 8005900:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005904:	e7ea      	b.n	80058dc <__swbuf_r+0x6c>
 8005906:	bf00      	nop
 8005908:	08005e98 	.word	0x08005e98
 800590c:	08005eb8 	.word	0x08005eb8
 8005910:	08005e78 	.word	0x08005e78

08005914 <_write_r>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	4d07      	ldr	r5, [pc, #28]	; (8005934 <_write_r+0x20>)
 8005918:	4604      	mov	r4, r0
 800591a:	4608      	mov	r0, r1
 800591c:	4611      	mov	r1, r2
 800591e:	2200      	movs	r2, #0
 8005920:	602a      	str	r2, [r5, #0]
 8005922:	461a      	mov	r2, r3
 8005924:	f7fb f87b 	bl	8000a1e <_write>
 8005928:	1c43      	adds	r3, r0, #1
 800592a:	d102      	bne.n	8005932 <_write_r+0x1e>
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	b103      	cbz	r3, 8005932 <_write_r+0x1e>
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	bd38      	pop	{r3, r4, r5, pc}
 8005934:	20004b4c 	.word	0x20004b4c

08005938 <__swsetup_r>:
 8005938:	4b32      	ldr	r3, [pc, #200]	; (8005a04 <__swsetup_r+0xcc>)
 800593a:	b570      	push	{r4, r5, r6, lr}
 800593c:	681d      	ldr	r5, [r3, #0]
 800593e:	4606      	mov	r6, r0
 8005940:	460c      	mov	r4, r1
 8005942:	b125      	cbz	r5, 800594e <__swsetup_r+0x16>
 8005944:	69ab      	ldr	r3, [r5, #24]
 8005946:	b913      	cbnz	r3, 800594e <__swsetup_r+0x16>
 8005948:	4628      	mov	r0, r5
 800594a:	f7ff fced 	bl	8005328 <__sinit>
 800594e:	4b2e      	ldr	r3, [pc, #184]	; (8005a08 <__swsetup_r+0xd0>)
 8005950:	429c      	cmp	r4, r3
 8005952:	d10f      	bne.n	8005974 <__swsetup_r+0x3c>
 8005954:	686c      	ldr	r4, [r5, #4]
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800595c:	0719      	lsls	r1, r3, #28
 800595e:	d42c      	bmi.n	80059ba <__swsetup_r+0x82>
 8005960:	06dd      	lsls	r5, r3, #27
 8005962:	d411      	bmi.n	8005988 <__swsetup_r+0x50>
 8005964:	2309      	movs	r3, #9
 8005966:	6033      	str	r3, [r6, #0]
 8005968:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800596c:	81a3      	strh	r3, [r4, #12]
 800596e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005972:	e03e      	b.n	80059f2 <__swsetup_r+0xba>
 8005974:	4b25      	ldr	r3, [pc, #148]	; (8005a0c <__swsetup_r+0xd4>)
 8005976:	429c      	cmp	r4, r3
 8005978:	d101      	bne.n	800597e <__swsetup_r+0x46>
 800597a:	68ac      	ldr	r4, [r5, #8]
 800597c:	e7eb      	b.n	8005956 <__swsetup_r+0x1e>
 800597e:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <__swsetup_r+0xd8>)
 8005980:	429c      	cmp	r4, r3
 8005982:	bf08      	it	eq
 8005984:	68ec      	ldreq	r4, [r5, #12]
 8005986:	e7e6      	b.n	8005956 <__swsetup_r+0x1e>
 8005988:	0758      	lsls	r0, r3, #29
 800598a:	d512      	bpl.n	80059b2 <__swsetup_r+0x7a>
 800598c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800598e:	b141      	cbz	r1, 80059a2 <__swsetup_r+0x6a>
 8005990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005994:	4299      	cmp	r1, r3
 8005996:	d002      	beq.n	800599e <__swsetup_r+0x66>
 8005998:	4630      	mov	r0, r6
 800599a:	f000 f991 	bl	8005cc0 <_free_r>
 800599e:	2300      	movs	r3, #0
 80059a0:	6363      	str	r3, [r4, #52]	; 0x34
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059a8:	81a3      	strh	r3, [r4, #12]
 80059aa:	2300      	movs	r3, #0
 80059ac:	6063      	str	r3, [r4, #4]
 80059ae:	6923      	ldr	r3, [r4, #16]
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	89a3      	ldrh	r3, [r4, #12]
 80059b4:	f043 0308 	orr.w	r3, r3, #8
 80059b8:	81a3      	strh	r3, [r4, #12]
 80059ba:	6923      	ldr	r3, [r4, #16]
 80059bc:	b94b      	cbnz	r3, 80059d2 <__swsetup_r+0x9a>
 80059be:	89a3      	ldrh	r3, [r4, #12]
 80059c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c8:	d003      	beq.n	80059d2 <__swsetup_r+0x9a>
 80059ca:	4621      	mov	r1, r4
 80059cc:	4630      	mov	r0, r6
 80059ce:	f000 f92b 	bl	8005c28 <__smakebuf_r>
 80059d2:	89a0      	ldrh	r0, [r4, #12]
 80059d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059d8:	f010 0301 	ands.w	r3, r0, #1
 80059dc:	d00a      	beq.n	80059f4 <__swsetup_r+0xbc>
 80059de:	2300      	movs	r3, #0
 80059e0:	60a3      	str	r3, [r4, #8]
 80059e2:	6963      	ldr	r3, [r4, #20]
 80059e4:	425b      	negs	r3, r3
 80059e6:	61a3      	str	r3, [r4, #24]
 80059e8:	6923      	ldr	r3, [r4, #16]
 80059ea:	b943      	cbnz	r3, 80059fe <__swsetup_r+0xc6>
 80059ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059f0:	d1ba      	bne.n	8005968 <__swsetup_r+0x30>
 80059f2:	bd70      	pop	{r4, r5, r6, pc}
 80059f4:	0781      	lsls	r1, r0, #30
 80059f6:	bf58      	it	pl
 80059f8:	6963      	ldrpl	r3, [r4, #20]
 80059fa:	60a3      	str	r3, [r4, #8]
 80059fc:	e7f4      	b.n	80059e8 <__swsetup_r+0xb0>
 80059fe:	2000      	movs	r0, #0
 8005a00:	e7f7      	b.n	80059f2 <__swsetup_r+0xba>
 8005a02:	bf00      	nop
 8005a04:	20000010 	.word	0x20000010
 8005a08:	08005e98 	.word	0x08005e98
 8005a0c:	08005eb8 	.word	0x08005eb8
 8005a10:	08005e78 	.word	0x08005e78

08005a14 <_close_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	4d06      	ldr	r5, [pc, #24]	; (8005a30 <_close_r+0x1c>)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	4608      	mov	r0, r1
 8005a1e:	602b      	str	r3, [r5, #0]
 8005a20:	f7fb f819 	bl	8000a56 <_close>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d102      	bne.n	8005a2e <_close_r+0x1a>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	b103      	cbz	r3, 8005a2e <_close_r+0x1a>
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	20004b4c 	.word	0x20004b4c

08005a34 <__sflush_r>:
 8005a34:	898a      	ldrh	r2, [r1, #12]
 8005a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	0710      	lsls	r0, r2, #28
 8005a3e:	460c      	mov	r4, r1
 8005a40:	d458      	bmi.n	8005af4 <__sflush_r+0xc0>
 8005a42:	684b      	ldr	r3, [r1, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	dc05      	bgt.n	8005a54 <__sflush_r+0x20>
 8005a48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	dc02      	bgt.n	8005a54 <__sflush_r+0x20>
 8005a4e:	2000      	movs	r0, #0
 8005a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a56:	2e00      	cmp	r6, #0
 8005a58:	d0f9      	beq.n	8005a4e <__sflush_r+0x1a>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a60:	682f      	ldr	r7, [r5, #0]
 8005a62:	602b      	str	r3, [r5, #0]
 8005a64:	d032      	beq.n	8005acc <__sflush_r+0x98>
 8005a66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a68:	89a3      	ldrh	r3, [r4, #12]
 8005a6a:	075a      	lsls	r2, r3, #29
 8005a6c:	d505      	bpl.n	8005a7a <__sflush_r+0x46>
 8005a6e:	6863      	ldr	r3, [r4, #4]
 8005a70:	1ac0      	subs	r0, r0, r3
 8005a72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a74:	b10b      	cbz	r3, 8005a7a <__sflush_r+0x46>
 8005a76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a78:	1ac0      	subs	r0, r0, r3
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a80:	6a21      	ldr	r1, [r4, #32]
 8005a82:	4628      	mov	r0, r5
 8005a84:	47b0      	blx	r6
 8005a86:	1c43      	adds	r3, r0, #1
 8005a88:	89a3      	ldrh	r3, [r4, #12]
 8005a8a:	d106      	bne.n	8005a9a <__sflush_r+0x66>
 8005a8c:	6829      	ldr	r1, [r5, #0]
 8005a8e:	291d      	cmp	r1, #29
 8005a90:	d82c      	bhi.n	8005aec <__sflush_r+0xb8>
 8005a92:	4a2a      	ldr	r2, [pc, #168]	; (8005b3c <__sflush_r+0x108>)
 8005a94:	40ca      	lsrs	r2, r1
 8005a96:	07d6      	lsls	r6, r2, #31
 8005a98:	d528      	bpl.n	8005aec <__sflush_r+0xb8>
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	6062      	str	r2, [r4, #4]
 8005a9e:	04d9      	lsls	r1, r3, #19
 8005aa0:	6922      	ldr	r2, [r4, #16]
 8005aa2:	6022      	str	r2, [r4, #0]
 8005aa4:	d504      	bpl.n	8005ab0 <__sflush_r+0x7c>
 8005aa6:	1c42      	adds	r2, r0, #1
 8005aa8:	d101      	bne.n	8005aae <__sflush_r+0x7a>
 8005aaa:	682b      	ldr	r3, [r5, #0]
 8005aac:	b903      	cbnz	r3, 8005ab0 <__sflush_r+0x7c>
 8005aae:	6560      	str	r0, [r4, #84]	; 0x54
 8005ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ab2:	602f      	str	r7, [r5, #0]
 8005ab4:	2900      	cmp	r1, #0
 8005ab6:	d0ca      	beq.n	8005a4e <__sflush_r+0x1a>
 8005ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005abc:	4299      	cmp	r1, r3
 8005abe:	d002      	beq.n	8005ac6 <__sflush_r+0x92>
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f000 f8fd 	bl	8005cc0 <_free_r>
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	6360      	str	r0, [r4, #52]	; 0x34
 8005aca:	e7c1      	b.n	8005a50 <__sflush_r+0x1c>
 8005acc:	6a21      	ldr	r1, [r4, #32]
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	47b0      	blx	r6
 8005ad4:	1c41      	adds	r1, r0, #1
 8005ad6:	d1c7      	bne.n	8005a68 <__sflush_r+0x34>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0c4      	beq.n	8005a68 <__sflush_r+0x34>
 8005ade:	2b1d      	cmp	r3, #29
 8005ae0:	d001      	beq.n	8005ae6 <__sflush_r+0xb2>
 8005ae2:	2b16      	cmp	r3, #22
 8005ae4:	d101      	bne.n	8005aea <__sflush_r+0xb6>
 8005ae6:	602f      	str	r7, [r5, #0]
 8005ae8:	e7b1      	b.n	8005a4e <__sflush_r+0x1a>
 8005aea:	89a3      	ldrh	r3, [r4, #12]
 8005aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005af0:	81a3      	strh	r3, [r4, #12]
 8005af2:	e7ad      	b.n	8005a50 <__sflush_r+0x1c>
 8005af4:	690f      	ldr	r7, [r1, #16]
 8005af6:	2f00      	cmp	r7, #0
 8005af8:	d0a9      	beq.n	8005a4e <__sflush_r+0x1a>
 8005afa:	0793      	lsls	r3, r2, #30
 8005afc:	680e      	ldr	r6, [r1, #0]
 8005afe:	bf08      	it	eq
 8005b00:	694b      	ldreq	r3, [r1, #20]
 8005b02:	600f      	str	r7, [r1, #0]
 8005b04:	bf18      	it	ne
 8005b06:	2300      	movne	r3, #0
 8005b08:	eba6 0807 	sub.w	r8, r6, r7
 8005b0c:	608b      	str	r3, [r1, #8]
 8005b0e:	f1b8 0f00 	cmp.w	r8, #0
 8005b12:	dd9c      	ble.n	8005a4e <__sflush_r+0x1a>
 8005b14:	6a21      	ldr	r1, [r4, #32]
 8005b16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b18:	4643      	mov	r3, r8
 8005b1a:	463a      	mov	r2, r7
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	47b0      	blx	r6
 8005b20:	2800      	cmp	r0, #0
 8005b22:	dc06      	bgt.n	8005b32 <__sflush_r+0xfe>
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b2a:	81a3      	strh	r3, [r4, #12]
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b30:	e78e      	b.n	8005a50 <__sflush_r+0x1c>
 8005b32:	4407      	add	r7, r0
 8005b34:	eba8 0800 	sub.w	r8, r8, r0
 8005b38:	e7e9      	b.n	8005b0e <__sflush_r+0xda>
 8005b3a:	bf00      	nop
 8005b3c:	20400001 	.word	0x20400001

08005b40 <_fflush_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	690b      	ldr	r3, [r1, #16]
 8005b44:	4605      	mov	r5, r0
 8005b46:	460c      	mov	r4, r1
 8005b48:	b913      	cbnz	r3, 8005b50 <_fflush_r+0x10>
 8005b4a:	2500      	movs	r5, #0
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	bd38      	pop	{r3, r4, r5, pc}
 8005b50:	b118      	cbz	r0, 8005b5a <_fflush_r+0x1a>
 8005b52:	6983      	ldr	r3, [r0, #24]
 8005b54:	b90b      	cbnz	r3, 8005b5a <_fflush_r+0x1a>
 8005b56:	f7ff fbe7 	bl	8005328 <__sinit>
 8005b5a:	4b14      	ldr	r3, [pc, #80]	; (8005bac <_fflush_r+0x6c>)
 8005b5c:	429c      	cmp	r4, r3
 8005b5e:	d11b      	bne.n	8005b98 <_fflush_r+0x58>
 8005b60:	686c      	ldr	r4, [r5, #4]
 8005b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0ef      	beq.n	8005b4a <_fflush_r+0xa>
 8005b6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b6c:	07d0      	lsls	r0, r2, #31
 8005b6e:	d404      	bmi.n	8005b7a <_fflush_r+0x3a>
 8005b70:	0599      	lsls	r1, r3, #22
 8005b72:	d402      	bmi.n	8005b7a <_fflush_r+0x3a>
 8005b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b76:	f7ff fc9a 	bl	80054ae <__retarget_lock_acquire_recursive>
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	f7ff ff59 	bl	8005a34 <__sflush_r>
 8005b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b84:	07da      	lsls	r2, r3, #31
 8005b86:	4605      	mov	r5, r0
 8005b88:	d4e0      	bmi.n	8005b4c <_fflush_r+0xc>
 8005b8a:	89a3      	ldrh	r3, [r4, #12]
 8005b8c:	059b      	lsls	r3, r3, #22
 8005b8e:	d4dd      	bmi.n	8005b4c <_fflush_r+0xc>
 8005b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b92:	f7ff fc8d 	bl	80054b0 <__retarget_lock_release_recursive>
 8005b96:	e7d9      	b.n	8005b4c <_fflush_r+0xc>
 8005b98:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <_fflush_r+0x70>)
 8005b9a:	429c      	cmp	r4, r3
 8005b9c:	d101      	bne.n	8005ba2 <_fflush_r+0x62>
 8005b9e:	68ac      	ldr	r4, [r5, #8]
 8005ba0:	e7df      	b.n	8005b62 <_fflush_r+0x22>
 8005ba2:	4b04      	ldr	r3, [pc, #16]	; (8005bb4 <_fflush_r+0x74>)
 8005ba4:	429c      	cmp	r4, r3
 8005ba6:	bf08      	it	eq
 8005ba8:	68ec      	ldreq	r4, [r5, #12]
 8005baa:	e7da      	b.n	8005b62 <_fflush_r+0x22>
 8005bac:	08005e98 	.word	0x08005e98
 8005bb0:	08005eb8 	.word	0x08005eb8
 8005bb4:	08005e78 	.word	0x08005e78

08005bb8 <_lseek_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4d07      	ldr	r5, [pc, #28]	; (8005bd8 <_lseek_r+0x20>)
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	4608      	mov	r0, r1
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	602a      	str	r2, [r5, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f7fa ff6c 	bl	8000aa4 <_lseek>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d102      	bne.n	8005bd6 <_lseek_r+0x1e>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	b103      	cbz	r3, 8005bd6 <_lseek_r+0x1e>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	20004b4c 	.word	0x20004b4c

08005bdc <__swhatbuf_r>:
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	460e      	mov	r6, r1
 8005be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be4:	2900      	cmp	r1, #0
 8005be6:	b096      	sub	sp, #88	; 0x58
 8005be8:	4614      	mov	r4, r2
 8005bea:	461d      	mov	r5, r3
 8005bec:	da08      	bge.n	8005c00 <__swhatbuf_r+0x24>
 8005bee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	602a      	str	r2, [r5, #0]
 8005bf6:	061a      	lsls	r2, r3, #24
 8005bf8:	d410      	bmi.n	8005c1c <__swhatbuf_r+0x40>
 8005bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bfe:	e00e      	b.n	8005c1e <__swhatbuf_r+0x42>
 8005c00:	466a      	mov	r2, sp
 8005c02:	f000 f8bb 	bl	8005d7c <_fstat_r>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	dbf1      	blt.n	8005bee <__swhatbuf_r+0x12>
 8005c0a:	9a01      	ldr	r2, [sp, #4]
 8005c0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c14:	425a      	negs	r2, r3
 8005c16:	415a      	adcs	r2, r3
 8005c18:	602a      	str	r2, [r5, #0]
 8005c1a:	e7ee      	b.n	8005bfa <__swhatbuf_r+0x1e>
 8005c1c:	2340      	movs	r3, #64	; 0x40
 8005c1e:	2000      	movs	r0, #0
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	b016      	add	sp, #88	; 0x58
 8005c24:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c28 <__smakebuf_r>:
 8005c28:	898b      	ldrh	r3, [r1, #12]
 8005c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c2c:	079d      	lsls	r5, r3, #30
 8005c2e:	4606      	mov	r6, r0
 8005c30:	460c      	mov	r4, r1
 8005c32:	d507      	bpl.n	8005c44 <__smakebuf_r+0x1c>
 8005c34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	6123      	str	r3, [r4, #16]
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	6163      	str	r3, [r4, #20]
 8005c40:	b002      	add	sp, #8
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	ab01      	add	r3, sp, #4
 8005c46:	466a      	mov	r2, sp
 8005c48:	f7ff ffc8 	bl	8005bdc <__swhatbuf_r>
 8005c4c:	9900      	ldr	r1, [sp, #0]
 8005c4e:	4605      	mov	r5, r0
 8005c50:	4630      	mov	r0, r6
 8005c52:	f7ff fc65 	bl	8005520 <_malloc_r>
 8005c56:	b948      	cbnz	r0, 8005c6c <__smakebuf_r+0x44>
 8005c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5c:	059a      	lsls	r2, r3, #22
 8005c5e:	d4ef      	bmi.n	8005c40 <__smakebuf_r+0x18>
 8005c60:	f023 0303 	bic.w	r3, r3, #3
 8005c64:	f043 0302 	orr.w	r3, r3, #2
 8005c68:	81a3      	strh	r3, [r4, #12]
 8005c6a:	e7e3      	b.n	8005c34 <__smakebuf_r+0xc>
 8005c6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <__smakebuf_r+0x7c>)
 8005c6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	6020      	str	r0, [r4, #0]
 8005c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c78:	81a3      	strh	r3, [r4, #12]
 8005c7a:	9b00      	ldr	r3, [sp, #0]
 8005c7c:	6163      	str	r3, [r4, #20]
 8005c7e:	9b01      	ldr	r3, [sp, #4]
 8005c80:	6120      	str	r0, [r4, #16]
 8005c82:	b15b      	cbz	r3, 8005c9c <__smakebuf_r+0x74>
 8005c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f000 f889 	bl	8005da0 <_isatty_r>
 8005c8e:	b128      	cbz	r0, 8005c9c <__smakebuf_r+0x74>
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	f043 0301 	orr.w	r3, r3, #1
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	89a0      	ldrh	r0, [r4, #12]
 8005c9e:	4305      	orrs	r5, r0
 8005ca0:	81a5      	strh	r5, [r4, #12]
 8005ca2:	e7cd      	b.n	8005c40 <__smakebuf_r+0x18>
 8005ca4:	080052c1 	.word	0x080052c1

08005ca8 <__malloc_lock>:
 8005ca8:	4801      	ldr	r0, [pc, #4]	; (8005cb0 <__malloc_lock+0x8>)
 8005caa:	f7ff bc00 	b.w	80054ae <__retarget_lock_acquire_recursive>
 8005cae:	bf00      	nop
 8005cb0:	20004b40 	.word	0x20004b40

08005cb4 <__malloc_unlock>:
 8005cb4:	4801      	ldr	r0, [pc, #4]	; (8005cbc <__malloc_unlock+0x8>)
 8005cb6:	f7ff bbfb 	b.w	80054b0 <__retarget_lock_release_recursive>
 8005cba:	bf00      	nop
 8005cbc:	20004b40 	.word	0x20004b40

08005cc0 <_free_r>:
 8005cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cc2:	2900      	cmp	r1, #0
 8005cc4:	d044      	beq.n	8005d50 <_free_r+0x90>
 8005cc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cca:	9001      	str	r0, [sp, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f1a1 0404 	sub.w	r4, r1, #4
 8005cd2:	bfb8      	it	lt
 8005cd4:	18e4      	addlt	r4, r4, r3
 8005cd6:	f7ff ffe7 	bl	8005ca8 <__malloc_lock>
 8005cda:	4a1e      	ldr	r2, [pc, #120]	; (8005d54 <_free_r+0x94>)
 8005cdc:	9801      	ldr	r0, [sp, #4]
 8005cde:	6813      	ldr	r3, [r2, #0]
 8005ce0:	b933      	cbnz	r3, 8005cf0 <_free_r+0x30>
 8005ce2:	6063      	str	r3, [r4, #4]
 8005ce4:	6014      	str	r4, [r2, #0]
 8005ce6:	b003      	add	sp, #12
 8005ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cec:	f7ff bfe2 	b.w	8005cb4 <__malloc_unlock>
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	d908      	bls.n	8005d06 <_free_r+0x46>
 8005cf4:	6825      	ldr	r5, [r4, #0]
 8005cf6:	1961      	adds	r1, r4, r5
 8005cf8:	428b      	cmp	r3, r1
 8005cfa:	bf01      	itttt	eq
 8005cfc:	6819      	ldreq	r1, [r3, #0]
 8005cfe:	685b      	ldreq	r3, [r3, #4]
 8005d00:	1949      	addeq	r1, r1, r5
 8005d02:	6021      	streq	r1, [r4, #0]
 8005d04:	e7ed      	b.n	8005ce2 <_free_r+0x22>
 8005d06:	461a      	mov	r2, r3
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	b10b      	cbz	r3, 8005d10 <_free_r+0x50>
 8005d0c:	42a3      	cmp	r3, r4
 8005d0e:	d9fa      	bls.n	8005d06 <_free_r+0x46>
 8005d10:	6811      	ldr	r1, [r2, #0]
 8005d12:	1855      	adds	r5, r2, r1
 8005d14:	42a5      	cmp	r5, r4
 8005d16:	d10b      	bne.n	8005d30 <_free_r+0x70>
 8005d18:	6824      	ldr	r4, [r4, #0]
 8005d1a:	4421      	add	r1, r4
 8005d1c:	1854      	adds	r4, r2, r1
 8005d1e:	42a3      	cmp	r3, r4
 8005d20:	6011      	str	r1, [r2, #0]
 8005d22:	d1e0      	bne.n	8005ce6 <_free_r+0x26>
 8005d24:	681c      	ldr	r4, [r3, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	6053      	str	r3, [r2, #4]
 8005d2a:	4421      	add	r1, r4
 8005d2c:	6011      	str	r1, [r2, #0]
 8005d2e:	e7da      	b.n	8005ce6 <_free_r+0x26>
 8005d30:	d902      	bls.n	8005d38 <_free_r+0x78>
 8005d32:	230c      	movs	r3, #12
 8005d34:	6003      	str	r3, [r0, #0]
 8005d36:	e7d6      	b.n	8005ce6 <_free_r+0x26>
 8005d38:	6825      	ldr	r5, [r4, #0]
 8005d3a:	1961      	adds	r1, r4, r5
 8005d3c:	428b      	cmp	r3, r1
 8005d3e:	bf04      	itt	eq
 8005d40:	6819      	ldreq	r1, [r3, #0]
 8005d42:	685b      	ldreq	r3, [r3, #4]
 8005d44:	6063      	str	r3, [r4, #4]
 8005d46:	bf04      	itt	eq
 8005d48:	1949      	addeq	r1, r1, r5
 8005d4a:	6021      	streq	r1, [r4, #0]
 8005d4c:	6054      	str	r4, [r2, #4]
 8005d4e:	e7ca      	b.n	8005ce6 <_free_r+0x26>
 8005d50:	b003      	add	sp, #12
 8005d52:	bd30      	pop	{r4, r5, pc}
 8005d54:	20004b44 	.word	0x20004b44

08005d58 <_read_r>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	4d07      	ldr	r5, [pc, #28]	; (8005d78 <_read_r+0x20>)
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	4608      	mov	r0, r1
 8005d60:	4611      	mov	r1, r2
 8005d62:	2200      	movs	r2, #0
 8005d64:	602a      	str	r2, [r5, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	f7fa fe3c 	bl	80009e4 <_read>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d102      	bne.n	8005d76 <_read_r+0x1e>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	b103      	cbz	r3, 8005d76 <_read_r+0x1e>
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	20004b4c 	.word	0x20004b4c

08005d7c <_fstat_r>:
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4d07      	ldr	r5, [pc, #28]	; (8005d9c <_fstat_r+0x20>)
 8005d80:	2300      	movs	r3, #0
 8005d82:	4604      	mov	r4, r0
 8005d84:	4608      	mov	r0, r1
 8005d86:	4611      	mov	r1, r2
 8005d88:	602b      	str	r3, [r5, #0]
 8005d8a:	f7fa fe70 	bl	8000a6e <_fstat>
 8005d8e:	1c43      	adds	r3, r0, #1
 8005d90:	d102      	bne.n	8005d98 <_fstat_r+0x1c>
 8005d92:	682b      	ldr	r3, [r5, #0]
 8005d94:	b103      	cbz	r3, 8005d98 <_fstat_r+0x1c>
 8005d96:	6023      	str	r3, [r4, #0]
 8005d98:	bd38      	pop	{r3, r4, r5, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20004b4c 	.word	0x20004b4c

08005da0 <_isatty_r>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4d06      	ldr	r5, [pc, #24]	; (8005dbc <_isatty_r+0x1c>)
 8005da4:	2300      	movs	r3, #0
 8005da6:	4604      	mov	r4, r0
 8005da8:	4608      	mov	r0, r1
 8005daa:	602b      	str	r3, [r5, #0]
 8005dac:	f7fa fe6f 	bl	8000a8e <_isatty>
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d102      	bne.n	8005dba <_isatty_r+0x1a>
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	b103      	cbz	r3, 8005dba <_isatty_r+0x1a>
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	bd38      	pop	{r3, r4, r5, pc}
 8005dbc:	20004b4c 	.word	0x20004b4c

08005dc0 <_init>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	bf00      	nop
 8005dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	469e      	mov	lr, r3
 8005dca:	4770      	bx	lr

08005dcc <_fini>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	bf00      	nop
 8005dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd2:	bc08      	pop	{r3}
 8005dd4:	469e      	mov	lr, r3
 8005dd6:	4770      	bx	lr
