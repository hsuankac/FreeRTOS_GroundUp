
15_Syncing_tasks_with_queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006128  08006128  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006128  08006128  00016128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006130  08006130  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006130  08006130  00016130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006134  08006134  00016134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ad8  20000074  080061ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b4c  080061ac  00024b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b95  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c7  00000000  00000000  00038c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0003bf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003d370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044d1  00000000  00000000  0003e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176f8  00000000  00000000  00042b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099be7  00000000  00000000  0005a281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3e68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e30  00000000  00000000  000f3eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f8c 	.word	0x08005f8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005f8c 	.word	0x08005f8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <uart2_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

int uart2_write(int ch)
	{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & USART_SR_TXE)){}
 800058c:	bf00      	nop
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <uart2_write+0x2c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f9      	beq.n	800058e <uart2_write+0xa>

	 /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <uart2_write+0x2c>)
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	6053      	str	r3, [r2, #4]
	return ch;
 80005a2:	687b      	ldr	r3, [r7, #4]
	}
 80005a4:	4618      	mov	r0, r3
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40004400 	.word	0x40004400

080005b4 <__io_putchar>:

int __io_putchar(int ch)
	{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff ffe1 	bl	8000584 <uart2_write>
	return ch;
 80005c2:	687b      	ldr	r3, [r7, #4]
	}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <main>:

xQueueHandle yearQueue;


int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af02      	add	r7, sp, #8

  HAL_Init();
 80005d2:	f000 fb21 	bl	8000c18 <HAL_Init>


  SystemClock_Config();
 80005d6:	f000 f899 	bl	800070c <SystemClock_Config>
  MX_GPIO_Init();
 80005da:	f000 f91f 	bl	800081c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005de:	f000 f8f3 	bl	80007c8 <MX_USART2_UART_Init>
  /*
   * printf won't work sometimes if you didn't enable newlib for RTOS
   * */

  yearQueue=xQueueCreate(5,sizeof(int32_t));
 80005e2:	2200      	movs	r2, #0
 80005e4:	2104      	movs	r1, #4
 80005e6:	2005      	movs	r0, #5
 80005e8:	f002 f962 	bl	80028b0 <xQueueGenericCreate>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a11      	ldr	r2, [pc, #68]	; (8000634 <main+0x68>)
 80005f0:	6013      	str	r3, [r2, #0]

  /*
   * Create sender tasks with lower priority
   * */
  xTaskCreate(SenderTask1,"sender task1",100,NULL,1,&sender_handle);
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <main+0x6c>)
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2301      	movs	r3, #1
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2264      	movs	r2, #100	; 0x64
 80005fe:	490f      	ldr	r1, [pc, #60]	; (800063c <main+0x70>)
 8000600:	480f      	ldr	r0, [pc, #60]	; (8000640 <main+0x74>)
 8000602:	f002 fdf8 	bl	80031f6 <xTaskCreate>
  xTaskCreate(SenderTask2,"sender task2",100,NULL,1,&sender_handle);
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <main+0x6c>)
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2301      	movs	r3, #1
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2300      	movs	r3, #0
 8000610:	2264      	movs	r2, #100	; 0x64
 8000612:	490c      	ldr	r1, [pc, #48]	; (8000644 <main+0x78>)
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <main+0x7c>)
 8000616:	f002 fdee 	bl	80031f6 <xTaskCreate>
  /*
   * Create a receiver task with higher priority
   * */
  xTaskCreate(ReceiverTask,"receiver task",100,NULL,2,&receiver_handle);
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <main+0x80>)
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2302      	movs	r3, #2
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2300      	movs	r3, #0
 8000624:	2264      	movs	r2, #100	; 0x64
 8000626:	490a      	ldr	r1, [pc, #40]	; (8000650 <main+0x84>)
 8000628:	480a      	ldr	r0, [pc, #40]	; (8000654 <main+0x88>)
 800062a:	f002 fde4 	bl	80031f6 <xTaskCreate>

  vTaskStartScheduler();
 800062e:	f002 ff3d 	bl	80034ac <vTaskStartScheduler>


  while (1)
 8000632:	e7fe      	b.n	8000632 <main+0x66>
 8000634:	200000dc 	.word	0x200000dc
 8000638:	200000d4 	.word	0x200000d4
 800063c:	08005fa4 	.word	0x08005fa4
 8000640:	08000659 	.word	0x08000659
 8000644:	08005fb4 	.word	0x08005fb4
 8000648:	08000691 	.word	0x08000691
 800064c:	200000d8 	.word	0x200000d8
 8000650:	08005fc4 	.word	0x08005fc4
 8000654:	080006c9 	.word	0x080006c9

08000658 <SenderTask1>:
}



void SenderTask1 (void *pvParameters)
	{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	int32_t value_to_send= 2050;
 8000660:	f640 0302 	movw	r3, #2050	; 0x802
 8000664:	613b      	str	r3, [r7, #16]
	BaseType_t qStatus;
	while(1)
		{
		qStatus=xQueueSend(yearQueue,&value_to_send,0);
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <SenderTask1+0x30>)
 8000668:	6818      	ldr	r0, [r3, #0]
 800066a:	f107 0110 	add.w	r1, r7, #16
 800066e:	2300      	movs	r3, #0
 8000670:	2200      	movs	r2, #0
 8000672:	f002 f97b 	bl	800296c <xQueueGenericSend>
 8000676:	6178      	str	r0, [r7, #20]
		if(qStatus !=pdPASS)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d0f3      	beq.n	8000666 <SenderTask1+0xe>
			{
			printf("Error: Data couldn't be sent from sender 2\r\n");
 800067e:	4803      	ldr	r0, [pc, #12]	; (800068c <SenderTask1+0x34>)
 8000680:	f004 fe28 	bl	80052d4 <puts>
		qStatus=xQueueSend(yearQueue,&value_to_send,0);
 8000684:	e7ef      	b.n	8000666 <SenderTask1+0xe>
 8000686:	bf00      	nop
 8000688:	200000dc 	.word	0x200000dc
 800068c:	08005fd4 	.word	0x08005fd4

08000690 <SenderTask2>:

	}


void SenderTask2 (void *pvParameters)
	{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	int32_t value_to_send= 5050;
 8000698:	f241 33ba 	movw	r3, #5050	; 0x13ba
 800069c:	613b      	str	r3, [r7, #16]
	BaseType_t qStatus;
	while(1)
		{
		qStatus=xQueueSend(yearQueue,&value_to_send,0);
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <SenderTask2+0x30>)
 80006a0:	6818      	ldr	r0, [r3, #0]
 80006a2:	f107 0110 	add.w	r1, r7, #16
 80006a6:	2300      	movs	r3, #0
 80006a8:	2200      	movs	r2, #0
 80006aa:	f002 f95f 	bl	800296c <xQueueGenericSend>
 80006ae:	6178      	str	r0, [r7, #20]
		if(qStatus !=pdPASS)
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d0f3      	beq.n	800069e <SenderTask2+0xe>
			{
			printf("Error: Data couldn't be sent from sender2\r\n");
 80006b6:	4803      	ldr	r0, [pc, #12]	; (80006c4 <SenderTask2+0x34>)
 80006b8:	f004 fe0c 	bl	80052d4 <puts>
		qStatus=xQueueSend(yearQueue,&value_to_send,0);
 80006bc:	e7ef      	b.n	800069e <SenderTask2+0xe>
 80006be:	bf00      	nop
 80006c0:	200000dc 	.word	0x200000dc
 80006c4:	08006000 	.word	0x08006000

080006c8 <ReceiverTask>:

	}


void ReceiverTask (void *pvParameters)
	{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

	int32_t value_received;
	const TickType_t wait_time =pdMS_TO_TICKS(100);
 80006d0:	2364      	movs	r3, #100	; 0x64
 80006d2:	617b      	str	r3, [r7, #20]
	BaseType_t qStatus;
	while(1)
		{
		qStatus=xQueueReceive(yearQueue, &value_received, wait_time);
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <ReceiverTask+0x38>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f107 010c 	add.w	r1, r7, #12
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fade 	bl	8002ca0 <xQueueReceive>
 80006e4:	6138      	str	r0, [r7, #16]
		if(qStatus==pdPASS)
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d105      	bne.n	80006f8 <ReceiverTask+0x30>
			{
			printf("The value received is ID= %u \r\n",value_received);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4619      	mov	r1, r3
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <ReceiverTask+0x3c>)
 80006f2:	f004 fd69 	bl	80051c8 <iprintf>
 80006f6:	e7ed      	b.n	80006d4 <ReceiverTask+0xc>
			}
		else {printf("couldn't receive\r\n");}
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <ReceiverTask+0x40>)
 80006fa:	f004 fdeb 	bl	80052d4 <puts>
		qStatus=xQueueReceive(yearQueue, &value_received, wait_time);
 80006fe:	e7e9      	b.n	80006d4 <ReceiverTask+0xc>
 8000700:	200000dc 	.word	0x200000dc
 8000704:	0800602c 	.word	0x0800602c
 8000708:	0800604c 	.word	0x0800604c

0800070c <SystemClock_Config>:
	}



void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2230      	movs	r2, #48	; 0x30
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f004 fcb7 	bl	800508e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <SystemClock_Config+0xb4>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <SystemClock_Config+0xb4>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <SystemClock_Config+0xb4>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <SystemClock_Config+0xb8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <SystemClock_Config+0xb8>)
 8000756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <SystemClock_Config+0xb8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	2310      	movs	r3, #16
 8000772:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000774:	2300      	movs	r3, #0
 8000776:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fcf3 	bl	8001168 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000788:	f000 f874 	bl	8000874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 ff56 	bl	8001658 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007b2:	f000 f85f 	bl	8000874 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <MX_USART2_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 8000800:	f001 fbbc 	bl	8001f7c <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f833 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000090 	.word	0x20000090
 8000818:	40004400 	.word	0x40004400

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_GPIO_Init+0x30>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <MX_GPIO_Init+0x30>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_GPIO_Init+0x30>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d101      	bne.n	8000866 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000862:	f000 f9fb 	bl	8000c5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40014800 	.word	0x40014800

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	e7fe      	b.n	800087c <Error_Handler+0x8>
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_MspInit+0x54>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <HAL_MspInit+0x54>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000894:	6453      	str	r3, [r2, #68]	; 0x44
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <HAL_MspInit+0x54>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <HAL_MspInit+0x54>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <HAL_MspInit+0x54>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_MspInit+0x54>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	210f      	movs	r1, #15
 80008c2:	f06f 0001 	mvn.w	r0, #1
 80008c6:	f000 faa1 	bl	8000e0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a19      	ldr	r2, [pc, #100]	; (800095c <HAL_UART_MspInit+0x84>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d12b      	bne.n	8000952 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <HAL_UART_MspInit+0x88>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a17      	ldr	r2, [pc, #92]	; (8000960 <HAL_UART_MspInit+0x88>)
 8000904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_UART_MspInit+0x88>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_UART_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a10      	ldr	r2, [pc, #64]	; (8000960 <HAL_UART_MspInit+0x88>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_UART_MspInit+0x88>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000932:	230c      	movs	r3, #12
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000942:	2307      	movs	r3, #7
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <HAL_UART_MspInit+0x8c>)
 800094e:	f000 fa87 	bl	8000e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	; 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40004400 	.word	0x40004400
 8000960:	40023800 	.word	0x40023800
 8000964:	40020000 	.word	0x40020000

08000968 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08c      	sub	sp, #48	; 0x30
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000978:	2200      	movs	r2, #0
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	201a      	movs	r0, #26
 800097e:	f000 fa45 	bl	8000e0c <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000982:	201a      	movs	r0, #26
 8000984:	f000 fa5e 	bl	8000e44 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <HAL_InitTick+0xa0>)
 800098e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000990:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <HAL_InitTick+0xa0>)
 8000992:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000996:	6453      	str	r3, [r2, #68]	; 0x44
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <HAL_InitTick+0xa0>)
 800099a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a4:	f107 0210 	add.w	r2, r7, #16
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f832 	bl	8001a18 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009b4:	f001 f81c 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 80009b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009bc:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <HAL_InitTick+0xa4>)
 80009be:	fba2 2303 	umull	r2, r3, r2, r3
 80009c2:	0c9b      	lsrs	r3, r3, #18
 80009c4:	3b01      	subs	r3, #1
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_InitTick+0xa8>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <HAL_InitTick+0xac>)
 80009cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_InitTick+0xa8>)
 80009d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009d4:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_InitTick+0xa8>)
 80009d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009da:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_InitTick+0xa8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_InitTick+0xa8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80009e8:	4809      	ldr	r0, [pc, #36]	; (8000a10 <HAL_InitTick+0xa8>)
 80009ea:	f001 f847 	bl	8001a7c <HAL_TIM_Base_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d104      	bne.n	80009fe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 80009f4:	4806      	ldr	r0, [pc, #24]	; (8000a10 <HAL_InitTick+0xa8>)
 80009f6:	f001 f89b 	bl	8001b30 <HAL_TIM_Base_Start_IT>
 80009fa:	4603      	mov	r3, r0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3730      	adds	r7, #48	; 0x30
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	431bde83 	.word	0x431bde83
 8000a10:	200000e0 	.word	0x200000e0
 8000a14:	40014800 	.word	0x40014800

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <NMI_Handler+0x4>

08000a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000a4a:	f001 f8d3 	bl	8001bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000e0 	.word	0x200000e0

08000a58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	e00a      	b.n	8000a80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a6a:	f3af 8000 	nop.w
 8000a6e:	4601      	mov	r1, r0
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	60ba      	str	r2, [r7, #8]
 8000a76:	b2ca      	uxtb	r2, r1
 8000a78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697a      	ldr	r2, [r7, #20]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	dbf0      	blt.n	8000a6a <_read+0x12>
	}

return len;
 8000a88:	687b      	ldr	r3, [r7, #4]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b086      	sub	sp, #24
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	60f8      	str	r0, [r7, #12]
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	e009      	b.n	8000ab8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	1c5a      	adds	r2, r3, #1
 8000aa8:	60ba      	str	r2, [r7, #8]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fd81 	bl	80005b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	dbf1      	blt.n	8000aa4 <_write+0x12>
	}
	return len;
 8000ac0:	687b      	ldr	r3, [r7, #4]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <_close>:

int _close(int file)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af2:	605a      	str	r2, [r3, #4]
	return 0;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <_isatty>:

int _isatty(int file)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
	return 1;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
	return 0;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f004 f962 	bl	8004e2c <__errno>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <_sbrk+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20020000 	.word	0x20020000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	20000128 	.word	0x20000128
 8000b9c:	20004b50 	.word	0x20004b50

08000ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bca:	490e      	ldr	r1, [pc, #56]	; (8000c04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be0:	4c0b      	ldr	r4, [pc, #44]	; (8000c10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bee:	f7ff ffd7 	bl	8000ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f004 fa17 	bl	8005024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf6:	f7ff fce9 	bl	80005cc <main>
  bx  lr    
 8000bfa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c08:	08006138 	.word	0x08006138
  ldr r2, =_sbss
 8000c0c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c10:	20004b4c 	.word	0x20004b4c

08000c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <HAL_Init+0x40>)
 8000c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_Init+0x40>)
 8000c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_Init+0x40>)
 8000c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 f8d8 	bl	8000df6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c46:	200f      	movs	r0, #15
 8000c48:	f7ff fe8e 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4c:	f7ff fe18 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023c00 	.word	0x40023c00

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	2000012c 	.word	0x2000012c

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	2000012c 	.word	0x2000012c

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db0b      	blt.n	8000d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	4907      	ldr	r1, [pc, #28]	; (8000d38 <__NVIC_EnableIRQ+0x38>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	; (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	; (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	; 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ff4c 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1e:	f7ff ff61 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	68b9      	ldr	r1, [r7, #8]
 8000e28:	6978      	ldr	r0, [r7, #20]
 8000e2a:	f7ff ffb1 	bl	8000d90 <NVIC_EncodePriority>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff80 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff54 	bl	8000d00 <__NVIC_EnableIRQ>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	e159      	b.n	8001130 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	f040 8148 	bne.w	800112a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d005      	beq.n	8000eb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d130      	bne.n	8000f14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	f003 0201 	and.w	r2, r3, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d017      	beq.n	8000f50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d123      	bne.n	8000fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	08da      	lsrs	r2, r3, #3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3208      	adds	r2, #8
 8000f9e:	69b9      	ldr	r1, [r7, #24]
 8000fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0203 	and.w	r2, r3, #3
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80a2 	beq.w	800112a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b57      	ldr	r3, [pc, #348]	; (8001148 <HAL_GPIO_Init+0x2e8>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a56      	ldr	r2, [pc, #344]	; (8001148 <HAL_GPIO_Init+0x2e8>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b54      	ldr	r3, [pc, #336]	; (8001148 <HAL_GPIO_Init+0x2e8>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001002:	4a52      	ldr	r2, [pc, #328]	; (800114c <HAL_GPIO_Init+0x2ec>)
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a49      	ldr	r2, [pc, #292]	; (8001150 <HAL_GPIO_Init+0x2f0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d019      	beq.n	8001062 <HAL_GPIO_Init+0x202>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a48      	ldr	r2, [pc, #288]	; (8001154 <HAL_GPIO_Init+0x2f4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0x1fe>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a47      	ldr	r2, [pc, #284]	; (8001158 <HAL_GPIO_Init+0x2f8>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d00d      	beq.n	800105a <HAL_GPIO_Init+0x1fa>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a46      	ldr	r2, [pc, #280]	; (800115c <HAL_GPIO_Init+0x2fc>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d007      	beq.n	8001056 <HAL_GPIO_Init+0x1f6>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a45      	ldr	r2, [pc, #276]	; (8001160 <HAL_GPIO_Init+0x300>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d101      	bne.n	8001052 <HAL_GPIO_Init+0x1f2>
 800104e:	2304      	movs	r3, #4
 8001050:	e008      	b.n	8001064 <HAL_GPIO_Init+0x204>
 8001052:	2307      	movs	r3, #7
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x204>
 8001056:	2303      	movs	r3, #3
 8001058:	e004      	b.n	8001064 <HAL_GPIO_Init+0x204>
 800105a:	2302      	movs	r3, #2
 800105c:	e002      	b.n	8001064 <HAL_GPIO_Init+0x204>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_GPIO_Init+0x204>
 8001062:	2300      	movs	r3, #0
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	f002 0203 	and.w	r2, r2, #3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	4093      	lsls	r3, r2
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001074:	4935      	ldr	r1, [pc, #212]	; (800114c <HAL_GPIO_Init+0x2ec>)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <HAL_GPIO_Init+0x304>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a6:	4a2f      	ldr	r2, [pc, #188]	; (8001164 <HAL_GPIO_Init+0x304>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <HAL_GPIO_Init+0x304>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d0:	4a24      	ldr	r2, [pc, #144]	; (8001164 <HAL_GPIO_Init+0x304>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <HAL_GPIO_Init+0x304>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fa:	4a1a      	ldr	r2, [pc, #104]	; (8001164 <HAL_GPIO_Init+0x304>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <HAL_GPIO_Init+0x304>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001124:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <HAL_GPIO_Init+0x304>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3301      	adds	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	2b0f      	cmp	r3, #15
 8001134:	f67f aea2 	bls.w	8000e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40013800 	.word	0x40013800
 8001150:	40020000 	.word	0x40020000
 8001154:	40020400 	.word	0x40020400
 8001158:	40020800 	.word	0x40020800
 800115c:	40020c00 	.word	0x40020c00
 8001160:	40021000 	.word	0x40021000
 8001164:	40013c00 	.word	0x40013c00

08001168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e267      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d075      	beq.n	8001272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001186:	4b88      	ldr	r3, [pc, #544]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b04      	cmp	r3, #4
 8001190:	d00c      	beq.n	80011ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001192:	4b85      	ldr	r3, [pc, #532]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800119a:	2b08      	cmp	r3, #8
 800119c:	d112      	bne.n	80011c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119e:	4b82      	ldr	r3, [pc, #520]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011aa:	d10b      	bne.n	80011c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	4b7e      	ldr	r3, [pc, #504]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d05b      	beq.n	8001270 <HAL_RCC_OscConfig+0x108>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d157      	bne.n	8001270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e242      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011cc:	d106      	bne.n	80011dc <HAL_RCC_OscConfig+0x74>
 80011ce:	4b76      	ldr	r3, [pc, #472]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a75      	ldr	r2, [pc, #468]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 80011d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e01d      	b.n	8001218 <HAL_RCC_OscConfig+0xb0>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e4:	d10c      	bne.n	8001200 <HAL_RCC_OscConfig+0x98>
 80011e6:	4b70      	ldr	r3, [pc, #448]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a6f      	ldr	r2, [pc, #444]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 80011ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	4b6d      	ldr	r3, [pc, #436]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a6c      	ldr	r2, [pc, #432]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e00b      	b.n	8001218 <HAL_RCC_OscConfig+0xb0>
 8001200:	4b69      	ldr	r3, [pc, #420]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a68      	ldr	r2, [pc, #416]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b66      	ldr	r3, [pc, #408]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a65      	ldr	r2, [pc, #404]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d013      	beq.n	8001248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fd30 	bl	8000c84 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff fd2c 	bl	8000c84 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e207      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	4b5b      	ldr	r3, [pc, #364]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0xc0>
 8001246:	e014      	b.n	8001272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fd1c 	bl	8000c84 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001250:	f7ff fd18 	bl	8000c84 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b64      	cmp	r3, #100	; 0x64
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e1f3      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001262:	4b51      	ldr	r3, [pc, #324]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0xe8>
 800126e:	e000      	b.n	8001272 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d063      	beq.n	8001346 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800127e:	4b4a      	ldr	r3, [pc, #296]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00b      	beq.n	80012a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800128a:	4b47      	ldr	r3, [pc, #284]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001292:	2b08      	cmp	r3, #8
 8001294:	d11c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001296:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d116      	bne.n	80012d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a2:	4b41      	ldr	r3, [pc, #260]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <HAL_RCC_OscConfig+0x152>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d001      	beq.n	80012ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e1c7      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ba:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	4937      	ldr	r1, [pc, #220]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	e03a      	b.n	8001346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d020      	beq.n	800131a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d8:	4b34      	ldr	r3, [pc, #208]	; (80013ac <HAL_RCC_OscConfig+0x244>)
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012de:	f7ff fcd1 	bl	8000c84 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e6:	f7ff fccd 	bl	8000c84 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e1a8      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f8:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001304:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	4925      	ldr	r1, [pc, #148]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 8001314:	4313      	orrs	r3, r2
 8001316:	600b      	str	r3, [r1, #0]
 8001318:	e015      	b.n	8001346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800131a:	4b24      	ldr	r3, [pc, #144]	; (80013ac <HAL_RCC_OscConfig+0x244>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001320:	f7ff fcb0 	bl	8000c84 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001328:	f7ff fcac 	bl	8000c84 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e187      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d036      	beq.n	80013c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d016      	beq.n	8001388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_RCC_OscConfig+0x248>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001360:	f7ff fc90 	bl	8000c84 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001368:	f7ff fc8c 	bl	8000c84 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e167      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_RCC_OscConfig+0x240>)
 800137c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0x200>
 8001386:	e01b      	b.n	80013c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_RCC_OscConfig+0x248>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138e:	f7ff fc79 	bl	8000c84 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001394:	e00e      	b.n	80013b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001396:	f7ff fc75 	bl	8000c84 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d907      	bls.n	80013b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e150      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
 80013a8:	40023800 	.word	0x40023800
 80013ac:	42470000 	.word	0x42470000
 80013b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b4:	4b88      	ldr	r3, [pc, #544]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 80013b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1ea      	bne.n	8001396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 8097 	beq.w	80014fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d2:	4b81      	ldr	r3, [pc, #516]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10f      	bne.n	80013fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	4b7d      	ldr	r3, [pc, #500]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	4a7c      	ldr	r2, [pc, #496]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ec:	6413      	str	r3, [r2, #64]	; 0x40
 80013ee:	4b7a      	ldr	r3, [pc, #488]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013fa:	2301      	movs	r3, #1
 80013fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fe:	4b77      	ldr	r3, [pc, #476]	; (80015dc <HAL_RCC_OscConfig+0x474>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001406:	2b00      	cmp	r3, #0
 8001408:	d118      	bne.n	800143c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800140a:	4b74      	ldr	r3, [pc, #464]	; (80015dc <HAL_RCC_OscConfig+0x474>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a73      	ldr	r2, [pc, #460]	; (80015dc <HAL_RCC_OscConfig+0x474>)
 8001410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001416:	f7ff fc35 	bl	8000c84 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141e:	f7ff fc31 	bl	8000c84 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e10c      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001430:	4b6a      	ldr	r3, [pc, #424]	; (80015dc <HAL_RCC_OscConfig+0x474>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d106      	bne.n	8001452 <HAL_RCC_OscConfig+0x2ea>
 8001444:	4b64      	ldr	r3, [pc, #400]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 8001446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001448:	4a63      	ldr	r2, [pc, #396]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6713      	str	r3, [r2, #112]	; 0x70
 8001450:	e01c      	b.n	800148c <HAL_RCC_OscConfig+0x324>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b05      	cmp	r3, #5
 8001458:	d10c      	bne.n	8001474 <HAL_RCC_OscConfig+0x30c>
 800145a:	4b5f      	ldr	r3, [pc, #380]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 800145c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145e:	4a5e      	ldr	r2, [pc, #376]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	6713      	str	r3, [r2, #112]	; 0x70
 8001466:	4b5c      	ldr	r3, [pc, #368]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146a:	4a5b      	ldr	r2, [pc, #364]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6713      	str	r3, [r2, #112]	; 0x70
 8001472:	e00b      	b.n	800148c <HAL_RCC_OscConfig+0x324>
 8001474:	4b58      	ldr	r3, [pc, #352]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 8001476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001478:	4a57      	ldr	r2, [pc, #348]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	6713      	str	r3, [r2, #112]	; 0x70
 8001480:	4b55      	ldr	r3, [pc, #340]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 8001482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001484:	4a54      	ldr	r2, [pc, #336]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 8001486:	f023 0304 	bic.w	r3, r3, #4
 800148a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d015      	beq.n	80014c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001494:	f7ff fbf6 	bl	8000c84 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149a:	e00a      	b.n	80014b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149c:	f7ff fbf2 	bl	8000c84 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e0cb      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b2:	4b49      	ldr	r3, [pc, #292]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 80014b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0ee      	beq.n	800149c <HAL_RCC_OscConfig+0x334>
 80014be:	e014      	b.n	80014ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c0:	f7ff fbe0 	bl	8000c84 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c6:	e00a      	b.n	80014de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c8:	f7ff fbdc 	bl	8000c84 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e0b5      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014de:	4b3e      	ldr	r3, [pc, #248]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1ee      	bne.n	80014c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d105      	bne.n	80014fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f0:	4b39      	ldr	r3, [pc, #228]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	4a38      	ldr	r2, [pc, #224]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 80014f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80a1 	beq.w	8001648 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001506:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b08      	cmp	r3, #8
 8001510:	d05c      	beq.n	80015cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d141      	bne.n	800159e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151a:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <HAL_RCC_OscConfig+0x478>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fbb0 	bl	8000c84 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001528:	f7ff fbac 	bl	8000c84 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e087      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153a:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69da      	ldr	r2, [r3, #28]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	019b      	lsls	r3, r3, #6
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	085b      	lsrs	r3, r3, #1
 800155e:	3b01      	subs	r3, #1
 8001560:	041b      	lsls	r3, r3, #16
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001568:	061b      	lsls	r3, r3, #24
 800156a:	491b      	ldr	r1, [pc, #108]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_RCC_OscConfig+0x478>)
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff fb85 	bl	8000c84 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157e:	f7ff fb81 	bl	8000c84 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e05c      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x416>
 800159c:	e054      	b.n	8001648 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_RCC_OscConfig+0x478>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fb6e 	bl	8000c84 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ac:	f7ff fb6a 	bl	8000c84 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e045      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_RCC_OscConfig+0x470>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x444>
 80015ca:	e03d      	b.n	8001648 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d107      	bne.n	80015e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e038      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000
 80015e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_RCC_OscConfig+0x4ec>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d028      	beq.n	8001644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d121      	bne.n	8001644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160a:	429a      	cmp	r2, r3
 800160c:	d11a      	bne.n	8001644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001614:	4013      	ands	r3, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800161a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800161c:	4293      	cmp	r3, r2
 800161e:	d111      	bne.n	8001644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	085b      	lsrs	r3, r3, #1
 800162c:	3b01      	subs	r3, #1
 800162e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001630:	429a      	cmp	r2, r3
 8001632:	d107      	bne.n	8001644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001640:	429a      	cmp	r2, r3
 8001642:	d001      	beq.n	8001648 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800

08001658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0cc      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800166c:	4b68      	ldr	r3, [pc, #416]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d90c      	bls.n	8001694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b65      	ldr	r3, [pc, #404]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001682:	4b63      	ldr	r3, [pc, #396]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0b8      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d020      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ac:	4b59      	ldr	r3, [pc, #356]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a58      	ldr	r2, [pc, #352]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016c4:	4b53      	ldr	r3, [pc, #332]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4a52      	ldr	r2, [pc, #328]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d0:	4b50      	ldr	r3, [pc, #320]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	494d      	ldr	r1, [pc, #308]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d044      	beq.n	8001778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f6:	4b47      	ldr	r3, [pc, #284]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d119      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e07f      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d003      	beq.n	8001716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001712:	2b03      	cmp	r3, #3
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001716:	4b3f      	ldr	r3, [pc, #252]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d109      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e06f      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001726:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e067      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001736:	4b37      	ldr	r3, [pc, #220]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f023 0203 	bic.w	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4934      	ldr	r1, [pc, #208]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	4313      	orrs	r3, r2
 8001746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001748:	f7ff fa9c 	bl	8000c84 <HAL_GetTick>
 800174c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	e00a      	b.n	8001766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001750:	f7ff fa98 	bl	8000c84 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e04f      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001766:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 020c 	and.w	r2, r3, #12
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	429a      	cmp	r2, r3
 8001776:	d1eb      	bne.n	8001750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d20c      	bcs.n	80017a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e032      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	4916      	ldr	r1, [pc, #88]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d009      	beq.n	80017de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	490e      	ldr	r1, [pc, #56]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017de:	f000 f821 	bl	8001824 <HAL_RCC_GetSysClockFreq>
 80017e2:	4602      	mov	r2, r0
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	490a      	ldr	r1, [pc, #40]	; (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	5ccb      	ldrb	r3, [r1, r3]
 80017f2:	fa22 f303 	lsr.w	r3, r2, r3
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_RCC_ClockConfig+0x1c8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f8b2 	bl	8000968 <HAL_InitTick>

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40023c00 	.word	0x40023c00
 8001814:	40023800 	.word	0x40023800
 8001818:	08006078 	.word	0x08006078
 800181c:	20000000 	.word	0x20000000
 8001820:	20000004 	.word	0x20000004

08001824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001828:	b090      	sub	sp, #64	; 0x40
 800182a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
 8001830:	2300      	movs	r3, #0
 8001832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001834:	2300      	movs	r3, #0
 8001836:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800183c:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b08      	cmp	r3, #8
 8001846:	d00d      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x40>
 8001848:	2b08      	cmp	r3, #8
 800184a:	f200 80a1 	bhi.w	8001990 <HAL_RCC_GetSysClockFreq+0x16c>
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <HAL_RCC_GetSysClockFreq+0x34>
 8001852:	2b04      	cmp	r3, #4
 8001854:	d003      	beq.n	800185e <HAL_RCC_GetSysClockFreq+0x3a>
 8001856:	e09b      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001858:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800185a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800185c:	e09b      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800185e:	4b53      	ldr	r3, [pc, #332]	; (80019ac <HAL_RCC_GetSysClockFreq+0x188>)
 8001860:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001862:	e098      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001864:	4b4f      	ldr	r3, [pc, #316]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800186c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800186e:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d028      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187a:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	099b      	lsrs	r3, r3, #6
 8001880:	2200      	movs	r2, #0
 8001882:	623b      	str	r3, [r7, #32]
 8001884:	627a      	str	r2, [r7, #36]	; 0x24
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800188c:	2100      	movs	r1, #0
 800188e:	4b47      	ldr	r3, [pc, #284]	; (80019ac <HAL_RCC_GetSysClockFreq+0x188>)
 8001890:	fb03 f201 	mul.w	r2, r3, r1
 8001894:	2300      	movs	r3, #0
 8001896:	fb00 f303 	mul.w	r3, r0, r3
 800189a:	4413      	add	r3, r2
 800189c:	4a43      	ldr	r2, [pc, #268]	; (80019ac <HAL_RCC_GetSysClockFreq+0x188>)
 800189e:	fba0 1202 	umull	r1, r2, r0, r2
 80018a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018a4:	460a      	mov	r2, r1
 80018a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80018a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018aa:	4413      	add	r3, r2
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b0:	2200      	movs	r2, #0
 80018b2:	61bb      	str	r3, [r7, #24]
 80018b4:	61fa      	str	r2, [r7, #28]
 80018b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018be:	f7fe fcdf 	bl	8000280 <__aeabi_uldivmod>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4613      	mov	r3, r2
 80018c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ca:	e053      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	099b      	lsrs	r3, r3, #6
 80018d2:	2200      	movs	r2, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	617a      	str	r2, [r7, #20]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018de:	f04f 0b00 	mov.w	fp, #0
 80018e2:	4652      	mov	r2, sl
 80018e4:	465b      	mov	r3, fp
 80018e6:	f04f 0000 	mov.w	r0, #0
 80018ea:	f04f 0100 	mov.w	r1, #0
 80018ee:	0159      	lsls	r1, r3, #5
 80018f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f4:	0150      	lsls	r0, r2, #5
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	ebb2 080a 	subs.w	r8, r2, sl
 80018fe:	eb63 090b 	sbc.w	r9, r3, fp
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800190e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001912:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001916:	ebb2 0408 	subs.w	r4, r2, r8
 800191a:	eb63 0509 	sbc.w	r5, r3, r9
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	00eb      	lsls	r3, r5, #3
 8001928:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800192c:	00e2      	lsls	r2, r4, #3
 800192e:	4614      	mov	r4, r2
 8001930:	461d      	mov	r5, r3
 8001932:	eb14 030a 	adds.w	r3, r4, sl
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	eb45 030b 	adc.w	r3, r5, fp
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800194a:	4629      	mov	r1, r5
 800194c:	028b      	lsls	r3, r1, #10
 800194e:	4621      	mov	r1, r4
 8001950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001954:	4621      	mov	r1, r4
 8001956:	028a      	lsls	r2, r1, #10
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195e:	2200      	movs	r2, #0
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	60fa      	str	r2, [r7, #12]
 8001964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001968:	f7fe fc8a 	bl	8000280 <__aeabi_uldivmod>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4613      	mov	r3, r2
 8001972:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	0c1b      	lsrs	r3, r3, #16
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	3301      	adds	r3, #1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001984:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800198e:	e002      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001998:	4618      	mov	r0, r3
 800199a:	3740      	adds	r7, #64	; 0x40
 800199c:	46bd      	mov	sp, r7
 800199e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800
 80019a8:	00f42400 	.word	0x00f42400
 80019ac:	017d7840 	.word	0x017d7840

080019b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000000 	.word	0x20000000

080019c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019cc:	f7ff fff0 	bl	80019b0 <HAL_RCC_GetHCLKFreq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	0a9b      	lsrs	r3, r3, #10
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	4903      	ldr	r1, [pc, #12]	; (80019ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80019de:	5ccb      	ldrb	r3, [r1, r3]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	08006088 	.word	0x08006088

080019f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019f4:	f7ff ffdc 	bl	80019b0 <HAL_RCC_GetHCLKFreq>
 80019f8:	4602      	mov	r2, r0
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	0b5b      	lsrs	r3, r3, #13
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	4903      	ldr	r1, [pc, #12]	; (8001a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a06:	5ccb      	ldrb	r3, [r1, r3]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40023800 	.word	0x40023800
 8001a14:	08006088 	.word	0x08006088

08001a18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	220f      	movs	r2, #15
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_RCC_GetClockConfig+0x5c>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 0203 	and.w	r2, r3, #3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_RCC_GetClockConfig+0x5c>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_RCC_GetClockConfig+0x5c>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_RCC_GetClockConfig+0x5c>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	08db      	lsrs	r3, r3, #3
 8001a52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <HAL_RCC_GetClockConfig+0x60>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0207 	and.w	r2, r3, #7
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	601a      	str	r2, [r3, #0]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e041      	b.n	8001b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d106      	bne.n	8001aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f839 	bl	8001b1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4610      	mov	r0, r2
 8001abc:	f000 f9ca 	bl	8001e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d001      	beq.n	8001b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e044      	b.n	8001bd2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1e      	ldr	r2, [pc, #120]	; (8001be0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d018      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x6c>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b72:	d013      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x6c>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1a      	ldr	r2, [pc, #104]	; (8001be4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00e      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x6c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d009      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x6c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a17      	ldr	r2, [pc, #92]	; (8001bec <HAL_TIM_Base_Start_IT+0xbc>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d004      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0x6c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a16      	ldr	r2, [pc, #88]	; (8001bf0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d111      	bne.n	8001bc0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d010      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0201 	orr.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bbe:	e007      	b.n	8001bd0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40010000 	.word	0x40010000
 8001be4:	40000400 	.word	0x40000400
 8001be8:	40000800 	.word	0x40000800
 8001bec:	40000c00 	.word	0x40000c00
 8001bf0:	40014000 	.word	0x40014000

08001bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d122      	bne.n	8001c50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d11b      	bne.n	8001c50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f06f 0202 	mvn.w	r2, #2
 8001c20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8ee 	bl	8001e18 <HAL_TIM_IC_CaptureCallback>
 8001c3c:	e005      	b.n	8001c4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f8e0 	bl	8001e04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f8f1 	bl	8001e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d122      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d11b      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f06f 0204 	mvn.w	r2, #4
 8001c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8c4 	bl	8001e18 <HAL_TIM_IC_CaptureCallback>
 8001c90:	e005      	b.n	8001c9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f8b6 	bl	8001e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f8c7 	bl	8001e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d122      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d11b      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 0208 	mvn.w	r2, #8
 8001cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2204      	movs	r2, #4
 8001cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f89a 	bl	8001e18 <HAL_TIM_IC_CaptureCallback>
 8001ce4:	e005      	b.n	8001cf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f88c 	bl	8001e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f89d 	bl	8001e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d122      	bne.n	8001d4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	d11b      	bne.n	8001d4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0210 	mvn.w	r2, #16
 8001d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2208      	movs	r2, #8
 8001d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f870 	bl	8001e18 <HAL_TIM_IC_CaptureCallback>
 8001d38:	e005      	b.n	8001d46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f862 	bl	8001e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f873 	bl	8001e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d10e      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d107      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0201 	mvn.w	r2, #1
 8001d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fd6c 	bl	8000850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d82:	2b80      	cmp	r3, #128	; 0x80
 8001d84:	d10e      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d90:	2b80      	cmp	r3, #128	; 0x80
 8001d92:	d107      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f8e2 	bl	8001f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dae:	2b40      	cmp	r3, #64	; 0x40
 8001db0:	d10e      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbc:	2b40      	cmp	r3, #64	; 0x40
 8001dbe:	d107      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f838 	bl	8001e40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	d10e      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d107      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0220 	mvn.w	r2, #32
 8001df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8ac 	bl	8001f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a34      	ldr	r2, [pc, #208]	; (8001f38 <TIM_Base_SetConfig+0xe4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d00f      	beq.n	8001e8c <TIM_Base_SetConfig+0x38>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e72:	d00b      	beq.n	8001e8c <TIM_Base_SetConfig+0x38>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a31      	ldr	r2, [pc, #196]	; (8001f3c <TIM_Base_SetConfig+0xe8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d007      	beq.n	8001e8c <TIM_Base_SetConfig+0x38>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a30      	ldr	r2, [pc, #192]	; (8001f40 <TIM_Base_SetConfig+0xec>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d003      	beq.n	8001e8c <TIM_Base_SetConfig+0x38>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a2f      	ldr	r2, [pc, #188]	; (8001f44 <TIM_Base_SetConfig+0xf0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d108      	bne.n	8001e9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a25      	ldr	r2, [pc, #148]	; (8001f38 <TIM_Base_SetConfig+0xe4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d01b      	beq.n	8001ede <TIM_Base_SetConfig+0x8a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eac:	d017      	beq.n	8001ede <TIM_Base_SetConfig+0x8a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a22      	ldr	r2, [pc, #136]	; (8001f3c <TIM_Base_SetConfig+0xe8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d013      	beq.n	8001ede <TIM_Base_SetConfig+0x8a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a21      	ldr	r2, [pc, #132]	; (8001f40 <TIM_Base_SetConfig+0xec>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00f      	beq.n	8001ede <TIM_Base_SetConfig+0x8a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a20      	ldr	r2, [pc, #128]	; (8001f44 <TIM_Base_SetConfig+0xf0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00b      	beq.n	8001ede <TIM_Base_SetConfig+0x8a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a1f      	ldr	r2, [pc, #124]	; (8001f48 <TIM_Base_SetConfig+0xf4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d007      	beq.n	8001ede <TIM_Base_SetConfig+0x8a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a1e      	ldr	r2, [pc, #120]	; (8001f4c <TIM_Base_SetConfig+0xf8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d003      	beq.n	8001ede <TIM_Base_SetConfig+0x8a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <TIM_Base_SetConfig+0xfc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d108      	bne.n	8001ef0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <TIM_Base_SetConfig+0xe4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d103      	bne.n	8001f24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	615a      	str	r2, [r3, #20]
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40010000 	.word	0x40010000
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40000800 	.word	0x40000800
 8001f44:	40000c00 	.word	0x40000c00
 8001f48:	40014000 	.word	0x40014000
 8001f4c:	40014400 	.word	0x40014400
 8001f50:	40014800 	.word	0x40014800

08001f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e03f      	b.n	800200e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7fe fc98 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2224      	movs	r2, #36	; 0x24
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f829 	bl	8002018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800201c:	b0c0      	sub	sp, #256	; 0x100
 800201e:	af00      	add	r7, sp, #0
 8002020:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002034:	68d9      	ldr	r1, [r3, #12]
 8002036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	ea40 0301 	orr.w	r3, r0, r1
 8002040:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	431a      	orrs	r2, r3
 8002050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	431a      	orrs	r2, r3
 8002058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002070:	f021 010c 	bic.w	r1, r1, #12
 8002074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800207e:	430b      	orrs	r3, r1
 8002080:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800208e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002092:	6999      	ldr	r1, [r3, #24]
 8002094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	ea40 0301 	orr.w	r3, r0, r1
 800209e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4b8f      	ldr	r3, [pc, #572]	; (80022e4 <UART_SetConfig+0x2cc>)
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d005      	beq.n	80020b8 <UART_SetConfig+0xa0>
 80020ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4b8d      	ldr	r3, [pc, #564]	; (80022e8 <UART_SetConfig+0x2d0>)
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d104      	bne.n	80020c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020b8:	f7ff fc9a 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 80020bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80020c0:	e003      	b.n	80020ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020c2:	f7ff fc81 	bl	80019c8 <HAL_RCC_GetPCLK1Freq>
 80020c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020d4:	f040 810c 	bne.w	80022f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020dc:	2200      	movs	r2, #0
 80020de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80020e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020ea:	4622      	mov	r2, r4
 80020ec:	462b      	mov	r3, r5
 80020ee:	1891      	adds	r1, r2, r2
 80020f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80020f2:	415b      	adcs	r3, r3
 80020f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020fa:	4621      	mov	r1, r4
 80020fc:	eb12 0801 	adds.w	r8, r2, r1
 8002100:	4629      	mov	r1, r5
 8002102:	eb43 0901 	adc.w	r9, r3, r1
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	f04f 0300 	mov.w	r3, #0
 800210e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800211a:	4690      	mov	r8, r2
 800211c:	4699      	mov	r9, r3
 800211e:	4623      	mov	r3, r4
 8002120:	eb18 0303 	adds.w	r3, r8, r3
 8002124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002128:	462b      	mov	r3, r5
 800212a:	eb49 0303 	adc.w	r3, r9, r3
 800212e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800213e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002146:	460b      	mov	r3, r1
 8002148:	18db      	adds	r3, r3, r3
 800214a:	653b      	str	r3, [r7, #80]	; 0x50
 800214c:	4613      	mov	r3, r2
 800214e:	eb42 0303 	adc.w	r3, r2, r3
 8002152:	657b      	str	r3, [r7, #84]	; 0x54
 8002154:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002158:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800215c:	f7fe f890 	bl	8000280 <__aeabi_uldivmod>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4b61      	ldr	r3, [pc, #388]	; (80022ec <UART_SetConfig+0x2d4>)
 8002166:	fba3 2302 	umull	r2, r3, r3, r2
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	011c      	lsls	r4, r3, #4
 800216e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002172:	2200      	movs	r2, #0
 8002174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002178:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800217c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002180:	4642      	mov	r2, r8
 8002182:	464b      	mov	r3, r9
 8002184:	1891      	adds	r1, r2, r2
 8002186:	64b9      	str	r1, [r7, #72]	; 0x48
 8002188:	415b      	adcs	r3, r3
 800218a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800218c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002190:	4641      	mov	r1, r8
 8002192:	eb12 0a01 	adds.w	sl, r2, r1
 8002196:	4649      	mov	r1, r9
 8002198:	eb43 0b01 	adc.w	fp, r3, r1
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021b0:	4692      	mov	sl, r2
 80021b2:	469b      	mov	fp, r3
 80021b4:	4643      	mov	r3, r8
 80021b6:	eb1a 0303 	adds.w	r3, sl, r3
 80021ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021be:	464b      	mov	r3, r9
 80021c0:	eb4b 0303 	adc.w	r3, fp, r3
 80021c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80021c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80021dc:	460b      	mov	r3, r1
 80021de:	18db      	adds	r3, r3, r3
 80021e0:	643b      	str	r3, [r7, #64]	; 0x40
 80021e2:	4613      	mov	r3, r2
 80021e4:	eb42 0303 	adc.w	r3, r2, r3
 80021e8:	647b      	str	r3, [r7, #68]	; 0x44
 80021ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80021f2:	f7fe f845 	bl	8000280 <__aeabi_uldivmod>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4611      	mov	r1, r2
 80021fc:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <UART_SetConfig+0x2d4>)
 80021fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2264      	movs	r2, #100	; 0x64
 8002206:	fb02 f303 	mul.w	r3, r2, r3
 800220a:	1acb      	subs	r3, r1, r3
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002212:	4b36      	ldr	r3, [pc, #216]	; (80022ec <UART_SetConfig+0x2d4>)
 8002214:	fba3 2302 	umull	r2, r3, r3, r2
 8002218:	095b      	lsrs	r3, r3, #5
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002220:	441c      	add	r4, r3
 8002222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002226:	2200      	movs	r2, #0
 8002228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800222c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002230:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002234:	4642      	mov	r2, r8
 8002236:	464b      	mov	r3, r9
 8002238:	1891      	adds	r1, r2, r2
 800223a:	63b9      	str	r1, [r7, #56]	; 0x38
 800223c:	415b      	adcs	r3, r3
 800223e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002244:	4641      	mov	r1, r8
 8002246:	1851      	adds	r1, r2, r1
 8002248:	6339      	str	r1, [r7, #48]	; 0x30
 800224a:	4649      	mov	r1, r9
 800224c:	414b      	adcs	r3, r1
 800224e:	637b      	str	r3, [r7, #52]	; 0x34
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800225c:	4659      	mov	r1, fp
 800225e:	00cb      	lsls	r3, r1, #3
 8002260:	4651      	mov	r1, sl
 8002262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002266:	4651      	mov	r1, sl
 8002268:	00ca      	lsls	r2, r1, #3
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	4603      	mov	r3, r0
 8002270:	4642      	mov	r2, r8
 8002272:	189b      	adds	r3, r3, r2
 8002274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002278:	464b      	mov	r3, r9
 800227a:	460a      	mov	r2, r1
 800227c:	eb42 0303 	adc.w	r3, r2, r3
 8002280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002290:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002298:	460b      	mov	r3, r1
 800229a:	18db      	adds	r3, r3, r3
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
 800229e:	4613      	mov	r3, r2
 80022a0:	eb42 0303 	adc.w	r3, r2, r3
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80022ae:	f7fd ffe7 	bl	8000280 <__aeabi_uldivmod>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <UART_SetConfig+0x2d4>)
 80022b8:	fba3 1302 	umull	r1, r3, r3, r2
 80022bc:	095b      	lsrs	r3, r3, #5
 80022be:	2164      	movs	r1, #100	; 0x64
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	3332      	adds	r3, #50	; 0x32
 80022ca:	4a08      	ldr	r2, [pc, #32]	; (80022ec <UART_SetConfig+0x2d4>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	095b      	lsrs	r3, r3, #5
 80022d2:	f003 0207 	and.w	r2, r3, #7
 80022d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4422      	add	r2, r4
 80022de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022e0:	e105      	b.n	80024ee <UART_SetConfig+0x4d6>
 80022e2:	bf00      	nop
 80022e4:	40011000 	.word	0x40011000
 80022e8:	40011400 	.word	0x40011400
 80022ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022f4:	2200      	movs	r2, #0
 80022f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80022fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80022fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002302:	4642      	mov	r2, r8
 8002304:	464b      	mov	r3, r9
 8002306:	1891      	adds	r1, r2, r2
 8002308:	6239      	str	r1, [r7, #32]
 800230a:	415b      	adcs	r3, r3
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
 800230e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002312:	4641      	mov	r1, r8
 8002314:	1854      	adds	r4, r2, r1
 8002316:	4649      	mov	r1, r9
 8002318:	eb43 0501 	adc.w	r5, r3, r1
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	00eb      	lsls	r3, r5, #3
 8002326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800232a:	00e2      	lsls	r2, r4, #3
 800232c:	4614      	mov	r4, r2
 800232e:	461d      	mov	r5, r3
 8002330:	4643      	mov	r3, r8
 8002332:	18e3      	adds	r3, r4, r3
 8002334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002338:	464b      	mov	r3, r9
 800233a:	eb45 0303 	adc.w	r3, r5, r3
 800233e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800234e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800235e:	4629      	mov	r1, r5
 8002360:	008b      	lsls	r3, r1, #2
 8002362:	4621      	mov	r1, r4
 8002364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002368:	4621      	mov	r1, r4
 800236a:	008a      	lsls	r2, r1, #2
 800236c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002370:	f7fd ff86 	bl	8000280 <__aeabi_uldivmod>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4b60      	ldr	r3, [pc, #384]	; (80024fc <UART_SetConfig+0x4e4>)
 800237a:	fba3 2302 	umull	r2, r3, r3, r2
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	011c      	lsls	r4, r3, #4
 8002382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002386:	2200      	movs	r2, #0
 8002388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800238c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002390:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002394:	4642      	mov	r2, r8
 8002396:	464b      	mov	r3, r9
 8002398:	1891      	adds	r1, r2, r2
 800239a:	61b9      	str	r1, [r7, #24]
 800239c:	415b      	adcs	r3, r3
 800239e:	61fb      	str	r3, [r7, #28]
 80023a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023a4:	4641      	mov	r1, r8
 80023a6:	1851      	adds	r1, r2, r1
 80023a8:	6139      	str	r1, [r7, #16]
 80023aa:	4649      	mov	r1, r9
 80023ac:	414b      	adcs	r3, r1
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023bc:	4659      	mov	r1, fp
 80023be:	00cb      	lsls	r3, r1, #3
 80023c0:	4651      	mov	r1, sl
 80023c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023c6:	4651      	mov	r1, sl
 80023c8:	00ca      	lsls	r2, r1, #3
 80023ca:	4610      	mov	r0, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	4603      	mov	r3, r0
 80023d0:	4642      	mov	r2, r8
 80023d2:	189b      	adds	r3, r3, r2
 80023d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023d8:	464b      	mov	r3, r9
 80023da:	460a      	mov	r2, r1
 80023dc:	eb42 0303 	adc.w	r3, r2, r3
 80023e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80023ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80023fc:	4649      	mov	r1, r9
 80023fe:	008b      	lsls	r3, r1, #2
 8002400:	4641      	mov	r1, r8
 8002402:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002406:	4641      	mov	r1, r8
 8002408:	008a      	lsls	r2, r1, #2
 800240a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800240e:	f7fd ff37 	bl	8000280 <__aeabi_uldivmod>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4b39      	ldr	r3, [pc, #228]	; (80024fc <UART_SetConfig+0x4e4>)
 8002418:	fba3 1302 	umull	r1, r3, r3, r2
 800241c:	095b      	lsrs	r3, r3, #5
 800241e:	2164      	movs	r1, #100	; 0x64
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	3332      	adds	r3, #50	; 0x32
 800242a:	4a34      	ldr	r2, [pc, #208]	; (80024fc <UART_SetConfig+0x4e4>)
 800242c:	fba2 2303 	umull	r2, r3, r2, r3
 8002430:	095b      	lsrs	r3, r3, #5
 8002432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002436:	441c      	add	r4, r3
 8002438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800243c:	2200      	movs	r2, #0
 800243e:	673b      	str	r3, [r7, #112]	; 0x70
 8002440:	677a      	str	r2, [r7, #116]	; 0x74
 8002442:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002446:	4642      	mov	r2, r8
 8002448:	464b      	mov	r3, r9
 800244a:	1891      	adds	r1, r2, r2
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	415b      	adcs	r3, r3
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002456:	4641      	mov	r1, r8
 8002458:	1851      	adds	r1, r2, r1
 800245a:	6039      	str	r1, [r7, #0]
 800245c:	4649      	mov	r1, r9
 800245e:	414b      	adcs	r3, r1
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800246e:	4659      	mov	r1, fp
 8002470:	00cb      	lsls	r3, r1, #3
 8002472:	4651      	mov	r1, sl
 8002474:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002478:	4651      	mov	r1, sl
 800247a:	00ca      	lsls	r2, r1, #3
 800247c:	4610      	mov	r0, r2
 800247e:	4619      	mov	r1, r3
 8002480:	4603      	mov	r3, r0
 8002482:	4642      	mov	r2, r8
 8002484:	189b      	adds	r3, r3, r2
 8002486:	66bb      	str	r3, [r7, #104]	; 0x68
 8002488:	464b      	mov	r3, r9
 800248a:	460a      	mov	r2, r1
 800248c:	eb42 0303 	adc.w	r3, r2, r3
 8002490:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	663b      	str	r3, [r7, #96]	; 0x60
 800249c:	667a      	str	r2, [r7, #100]	; 0x64
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80024aa:	4649      	mov	r1, r9
 80024ac:	008b      	lsls	r3, r1, #2
 80024ae:	4641      	mov	r1, r8
 80024b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024b4:	4641      	mov	r1, r8
 80024b6:	008a      	lsls	r2, r1, #2
 80024b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024bc:	f7fd fee0 	bl	8000280 <__aeabi_uldivmod>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <UART_SetConfig+0x4e4>)
 80024c6:	fba3 1302 	umull	r1, r3, r3, r2
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	2164      	movs	r1, #100	; 0x64
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	3332      	adds	r3, #50	; 0x32
 80024d8:	4a08      	ldr	r2, [pc, #32]	; (80024fc <UART_SetConfig+0x4e4>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	f003 020f 	and.w	r2, r3, #15
 80024e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4422      	add	r2, r4
 80024ec:	609a      	str	r2, [r3, #8]
}
 80024ee:	bf00      	nop
 80024f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80024f4:	46bd      	mov	sp, r7
 80024f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024fa:	bf00      	nop
 80024fc:	51eb851f 	.word	0x51eb851f

08002500 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <SysTick_Handler+0x1c>)
 8002506:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002508:	f001 fc2c 	bl	8003d64 <xTaskGetSchedulerState>
 800250c:	4603      	mov	r3, r0
 800250e:	2b01      	cmp	r3, #1
 8002510:	d001      	beq.n	8002516 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002512:	f002 fa11 	bl	8004938 <xPortSysTickHandler>
  }
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	e000e010 	.word	0xe000e010

08002520 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a07      	ldr	r2, [pc, #28]	; (800254c <vApplicationGetIdleTaskMemory+0x2c>)
 8002530:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	4a06      	ldr	r2, [pc, #24]	; (8002550 <vApplicationGetIdleTaskMemory+0x30>)
 8002536:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2280      	movs	r2, #128	; 0x80
 800253c:	601a      	str	r2, [r3, #0]
}
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000130 	.word	0x20000130
 8002550:	200001ec 	.word	0x200001ec

08002554 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <vApplicationGetTimerTaskMemory+0x2c>)
 8002564:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	4a06      	ldr	r2, [pc, #24]	; (8002584 <vApplicationGetTimerTaskMemory+0x30>)
 800256a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002572:	601a      	str	r2, [r3, #0]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	200003ec 	.word	0x200003ec
 8002584:	200004a8 	.word	0x200004a8

08002588 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f103 0208 	add.w	r2, r3, #8
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f103 0208 	add.w	r2, r3, #8
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f103 0208 	add.w	r2, r3, #8
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025e2:	b480      	push	{r7}
 80025e4:	b085      	sub	sp, #20
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	601a      	str	r2, [r3, #0]
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002640:	d103      	bne.n	800264a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	e00c      	b.n	8002664 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3308      	adds	r3, #8
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e002      	b.n	8002658 <vListInsert+0x2e>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	429a      	cmp	r2, r3
 8002662:	d2f6      	bcs.n	8002652 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	601a      	str	r2, [r3, #0]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6892      	ldr	r2, [r2, #8]
 80026b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6852      	ldr	r2, [r2, #4]
 80026bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d103      	bne.n	80026d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	1e5a      	subs	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10a      	bne.n	800271a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002716:	bf00      	nop
 8002718:	e7fe      	b.n	8002718 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800271a:	f002 f87b 	bl	8004814 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002726:	68f9      	ldr	r1, [r7, #12]
 8002728:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	441a      	add	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	3b01      	subs	r3, #1
 800274c:	68f9      	ldr	r1, [r7, #12]
 800274e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	441a      	add	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	22ff      	movs	r2, #255	; 0xff
 800275e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	22ff      	movs	r2, #255	; 0xff
 8002766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d114      	bne.n	800279a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01a      	beq.n	80027ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3310      	adds	r3, #16
 800277c:	4618      	mov	r0, r3
 800277e:	f001 f92f 	bl	80039e0 <xTaskRemoveFromEventList>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d012      	beq.n	80027ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <xQueueGenericReset+0xcc>)
 800278a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	e009      	b.n	80027ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3310      	adds	r3, #16
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fef2 	bl	8002588 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3324      	adds	r3, #36	; 0x24
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff feed 	bl	8002588 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027ae:	f002 f861 	bl	8004874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027b2:	2301      	movs	r3, #1
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	e000ed04 	.word	0xe000ed04

080027c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08e      	sub	sp, #56	; 0x38
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80027d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027e6:	bf00      	nop
 80027e8:	e7fe      	b.n	80027e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80027f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f4:	f383 8811 	msr	BASEPRI, r3
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002802:	bf00      	nop
 8002804:	e7fe      	b.n	8002804 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <xQueueGenericCreateStatic+0x52>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <xQueueGenericCreateStatic+0x56>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <xQueueGenericCreateStatic+0x58>
 8002816:	2300      	movs	r3, #0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800281c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	623b      	str	r3, [r7, #32]
}
 800282e:	bf00      	nop
 8002830:	e7fe      	b.n	8002830 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <xQueueGenericCreateStatic+0x7e>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <xQueueGenericCreateStatic+0x82>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <xQueueGenericCreateStatic+0x84>
 8002842:	2300      	movs	r3, #0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10a      	bne.n	800285e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284c:	f383 8811 	msr	BASEPRI, r3
 8002850:	f3bf 8f6f 	isb	sy
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	61fb      	str	r3, [r7, #28]
}
 800285a:	bf00      	nop
 800285c:	e7fe      	b.n	800285c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800285e:	2350      	movs	r3, #80	; 0x50
 8002860:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b50      	cmp	r3, #80	; 0x50
 8002866:	d00a      	beq.n	800287e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	61bb      	str	r3, [r7, #24]
}
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800287e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00d      	beq.n	80028a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002892:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	4613      	mov	r3, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f83f 	bl	8002924 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3730      	adds	r7, #48	; 0x30
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	4613      	mov	r3, r2
 80028bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10a      	bne.n	80028da <xQueueGenericCreate+0x2a>
	__asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	613b      	str	r3, [r7, #16]
}
 80028d6:	bf00      	nop
 80028d8:	e7fe      	b.n	80028d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	3350      	adds	r3, #80	; 0x50
 80028e8:	4618      	mov	r0, r3
 80028ea:	f002 f8b5 	bl	8004a58 <pvPortMalloc>
 80028ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d011      	beq.n	800291a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	3350      	adds	r3, #80	; 0x50
 80028fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002908:	79fa      	ldrb	r2, [r7, #7]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	4613      	mov	r3, r2
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f805 	bl	8002924 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800291a:	69bb      	ldr	r3, [r7, #24]
	}
 800291c:	4618      	mov	r0, r3
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d103      	bne.n	8002940 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e002      	b.n	8002946 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002952:	2101      	movs	r1, #1
 8002954:	69b8      	ldr	r0, [r7, #24]
 8002956:	f7ff fecb 	bl	80026f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08e      	sub	sp, #56	; 0x38
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800297a:	2300      	movs	r3, #0
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <xQueueGenericSend+0x32>
	__asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800299a:	bf00      	nop
 800299c:	e7fe      	b.n	800299c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d103      	bne.n	80029ac <xQueueGenericSend+0x40>
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <xQueueGenericSend+0x44>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <xQueueGenericSend+0x46>
 80029b0:	2300      	movs	r3, #0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <xQueueGenericSend+0x60>
	__asm volatile
 80029b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029c8:	bf00      	nop
 80029ca:	e7fe      	b.n	80029ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d103      	bne.n	80029da <xQueueGenericSend+0x6e>
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <xQueueGenericSend+0x72>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <xQueueGenericSend+0x74>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <xQueueGenericSend+0x8e>
	__asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	623b      	str	r3, [r7, #32]
}
 80029f6:	bf00      	nop
 80029f8:	e7fe      	b.n	80029f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029fa:	f001 f9b3 	bl	8003d64 <xTaskGetSchedulerState>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d102      	bne.n	8002a0a <xQueueGenericSend+0x9e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <xQueueGenericSend+0xa2>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <xQueueGenericSend+0xa4>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10a      	bne.n	8002a2a <xQueueGenericSend+0xbe>
	__asm volatile
 8002a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a18:	f383 8811 	msr	BASEPRI, r3
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	61fb      	str	r3, [r7, #28]
}
 8002a26:	bf00      	nop
 8002a28:	e7fe      	b.n	8002a28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a2a:	f001 fef3 	bl	8004814 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d302      	bcc.n	8002a40 <xQueueGenericSend+0xd4>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d129      	bne.n	8002a94 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a46:	f000 fa0b 	bl	8002e60 <prvCopyDataToQueue>
 8002a4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d010      	beq.n	8002a76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a56:	3324      	adds	r3, #36	; 0x24
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 ffc1 	bl	80039e0 <xTaskRemoveFromEventList>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d013      	beq.n	8002a8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a64:	4b3f      	ldr	r3, [pc, #252]	; (8002b64 <xQueueGenericSend+0x1f8>)
 8002a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	e00a      	b.n	8002a8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a7c:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <xQueueGenericSend+0x1f8>)
 8002a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a8c:	f001 fef2 	bl	8004874 <vPortExitCritical>
				return pdPASS;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e063      	b.n	8002b5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d103      	bne.n	8002aa2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a9a:	f001 feeb 	bl	8004874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e05c      	b.n	8002b5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fffb 	bl	8003aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ab6:	f001 fedd 	bl	8004874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002aba:	f000 fd67 	bl	800358c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002abe:	f001 fea9 	bl	8004814 <vPortEnterCritical>
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ace:	d103      	bne.n	8002ad8 <xQueueGenericSend+0x16c>
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ade:	b25b      	sxtb	r3, r3
 8002ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ae4:	d103      	bne.n	8002aee <xQueueGenericSend+0x182>
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002aee:	f001 fec1 	bl	8004874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002af2:	1d3a      	adds	r2, r7, #4
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 ffea 	bl	8003ad4 <xTaskCheckForTimeOut>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d124      	bne.n	8002b50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b08:	f000 faa2 	bl	8003050 <prvIsQueueFull>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d018      	beq.n	8002b44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	3310      	adds	r3, #16
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 ff10 	bl	8003940 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b22:	f000 fa2d 	bl	8002f80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b26:	f000 fd3f 	bl	80035a8 <xTaskResumeAll>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f47f af7c 	bne.w	8002a2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <xQueueGenericSend+0x1f8>)
 8002b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	f3bf 8f6f 	isb	sy
 8002b42:	e772      	b.n	8002a2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b46:	f000 fa1b 	bl	8002f80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b4a:	f000 fd2d 	bl	80035a8 <xTaskResumeAll>
 8002b4e:	e76c      	b.n	8002a2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b52:	f000 fa15 	bl	8002f80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b56:	f000 fd27 	bl	80035a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3738      	adds	r7, #56	; 0x38
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	e000ed04 	.word	0xe000ed04

08002b68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b090      	sub	sp, #64	; 0x40
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b92:	bf00      	nop
 8002b94:	e7fe      	b.n	8002b94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d103      	bne.n	8002ba4 <xQueueGenericSendFromISR+0x3c>
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <xQueueGenericSendFromISR+0x40>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <xQueueGenericSendFromISR+0x42>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bc0:	bf00      	nop
 8002bc2:	e7fe      	b.n	8002bc2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d103      	bne.n	8002bd2 <xQueueGenericSendFromISR+0x6a>
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <xQueueGenericSendFromISR+0x6e>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <xQueueGenericSendFromISR+0x70>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	623b      	str	r3, [r7, #32]
}
 8002bee:	bf00      	nop
 8002bf0:	e7fe      	b.n	8002bf0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bf2:	f001 fef1 	bl	80049d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bf6:	f3ef 8211 	mrs	r2, BASEPRI
 8002bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	61fa      	str	r2, [r7, #28]
 8002c0c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c10:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <xQueueGenericSendFromISR+0xbc>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d12f      	bne.n	8002c84 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c3a:	f000 f911 	bl	8002e60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c46:	d112      	bne.n	8002c6e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d016      	beq.n	8002c7e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c52:	3324      	adds	r3, #36	; 0x24
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fec3 	bl	80039e0 <xTaskRemoveFromEventList>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00e      	beq.n	8002c7e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	e007      	b.n	8002c7e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c72:	3301      	adds	r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	b25a      	sxtb	r2, r3
 8002c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002c82:	e001      	b.n	8002c88 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3740      	adds	r7, #64	; 0x40
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08c      	sub	sp, #48	; 0x30
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10a      	bne.n	8002cd0 <xQueueReceive+0x30>
	__asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	623b      	str	r3, [r7, #32]
}
 8002ccc:	bf00      	nop
 8002cce:	e7fe      	b.n	8002cce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <xQueueReceive+0x3e>
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <xQueueReceive+0x42>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <xQueueReceive+0x44>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10a      	bne.n	8002cfe <xQueueReceive+0x5e>
	__asm volatile
 8002ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	61fb      	str	r3, [r7, #28]
}
 8002cfa:	bf00      	nop
 8002cfc:	e7fe      	b.n	8002cfc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cfe:	f001 f831 	bl	8003d64 <xTaskGetSchedulerState>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <xQueueReceive+0x6e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <xQueueReceive+0x72>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <xQueueReceive+0x74>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <xQueueReceive+0x8e>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	61bb      	str	r3, [r7, #24]
}
 8002d2a:	bf00      	nop
 8002d2c:	e7fe      	b.n	8002d2c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d2e:	f001 fd71 	bl	8004814 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01f      	beq.n	8002d7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d42:	f000 f8f7 	bl	8002f34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	1e5a      	subs	r2, r3, #1
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00f      	beq.n	8002d76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	3310      	adds	r3, #16
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fe40 	bl	80039e0 <xTaskRemoveFromEventList>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d007      	beq.n	8002d76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d66:	4b3d      	ldr	r3, [pc, #244]	; (8002e5c <xQueueReceive+0x1bc>)
 8002d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d76:	f001 fd7d 	bl	8004874 <vPortExitCritical>
				return pdPASS;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e069      	b.n	8002e52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d103      	bne.n	8002d8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d84:	f001 fd76 	bl	8004874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	e062      	b.n	8002e52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d92:	f107 0310 	add.w	r3, r7, #16
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fe86 	bl	8003aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002da0:	f001 fd68 	bl	8004874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002da4:	f000 fbf2 	bl	800358c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002da8:	f001 fd34 	bl	8004814 <vPortEnterCritical>
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002db2:	b25b      	sxtb	r3, r3
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002db8:	d103      	bne.n	8002dc2 <xQueueReceive+0x122>
 8002dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dc8:	b25b      	sxtb	r3, r3
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dce:	d103      	bne.n	8002dd8 <xQueueReceive+0x138>
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dd8:	f001 fd4c 	bl	8004874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ddc:	1d3a      	adds	r2, r7, #4
 8002dde:	f107 0310 	add.w	r3, r7, #16
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fe75 	bl	8003ad4 <xTaskCheckForTimeOut>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d123      	bne.n	8002e38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df2:	f000 f917 	bl	8003024 <prvIsQueueEmpty>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d017      	beq.n	8002e2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	3324      	adds	r3, #36	; 0x24
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fd9b 	bl	8003940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e0c:	f000 f8b8 	bl	8002f80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e10:	f000 fbca 	bl	80035a8 <xTaskResumeAll>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d189      	bne.n	8002d2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002e1a:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <xQueueReceive+0x1bc>)
 8002e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	f3bf 8f6f 	isb	sy
 8002e2a:	e780      	b.n	8002d2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e2e:	f000 f8a7 	bl	8002f80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e32:	f000 fbb9 	bl	80035a8 <xTaskResumeAll>
 8002e36:	e77a      	b.n	8002d2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e3a:	f000 f8a1 	bl	8002f80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e3e:	f000 fbb3 	bl	80035a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e44:	f000 f8ee 	bl	8003024 <prvIsQueueEmpty>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f43f af6f 	beq.w	8002d2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3730      	adds	r7, #48	; 0x30
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	e000ed04 	.word	0xe000ed04

08002e60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10d      	bne.n	8002e9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d14d      	bne.n	8002f22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 ff88 	bl	8003da0 <xTaskPriorityDisinherit>
 8002e90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	e043      	b.n	8002f22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d119      	bne.n	8002ed4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6858      	ldr	r0, [r3, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	f002 f8e1 	bl	8005072 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	441a      	add	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d32b      	bcc.n	8002f22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	e026      	b.n	8002f22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	68d8      	ldr	r0, [r3, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	461a      	mov	r2, r3
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	f002 f8c7 	bl	8005072 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	425b      	negs	r3, r3
 8002eee:	441a      	add	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d207      	bcs.n	8002f10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	425b      	negs	r3, r3
 8002f0a:	441a      	add	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d105      	bne.n	8002f22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f2a:	697b      	ldr	r3, [r7, #20]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d018      	beq.n	8002f78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	441a      	add	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d303      	bcc.n	8002f68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68d9      	ldr	r1, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	461a      	mov	r2, r3
 8002f72:	6838      	ldr	r0, [r7, #0]
 8002f74:	f002 f87d 	bl	8005072 <memcpy>
	}
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f88:	f001 fc44 	bl	8004814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f94:	e011      	b.n	8002fba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d012      	beq.n	8002fc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3324      	adds	r3, #36	; 0x24
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fd1c 	bl	80039e0 <xTaskRemoveFromEventList>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002fae:	f000 fdf3 	bl	8003b98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	dce9      	bgt.n	8002f96 <prvUnlockQueue+0x16>
 8002fc2:	e000      	b.n	8002fc6 <prvUnlockQueue+0x46>
					break;
 8002fc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	22ff      	movs	r2, #255	; 0xff
 8002fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002fce:	f001 fc51 	bl	8004874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002fd2:	f001 fc1f 	bl	8004814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fde:	e011      	b.n	8003004 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d012      	beq.n	800300e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3310      	adds	r3, #16
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fcf7 	bl	80039e0 <xTaskRemoveFromEventList>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ff8:	f000 fdce 	bl	8003b98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ffc:	7bbb      	ldrb	r3, [r7, #14]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003008:	2b00      	cmp	r3, #0
 800300a:	dce9      	bgt.n	8002fe0 <prvUnlockQueue+0x60>
 800300c:	e000      	b.n	8003010 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800300e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	22ff      	movs	r2, #255	; 0xff
 8003014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003018:	f001 fc2c 	bl	8004874 <vPortExitCritical>
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800302c:	f001 fbf2 	bl	8004814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003038:	2301      	movs	r3, #1
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	e001      	b.n	8003042 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003042:	f001 fc17 	bl	8004874 <vPortExitCritical>

	return xReturn;
 8003046:	68fb      	ldr	r3, [r7, #12]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003058:	f001 fbdc 	bl	8004814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003064:	429a      	cmp	r2, r3
 8003066:	d102      	bne.n	800306e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003068:	2301      	movs	r3, #1
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e001      	b.n	8003072 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003072:	f001 fbff 	bl	8004874 <vPortExitCritical>

	return xReturn;
 8003076:	68fb      	ldr	r3, [r7, #12]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	e014      	b.n	80030ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003090:	4a0f      	ldr	r2, [pc, #60]	; (80030d0 <vQueueAddToRegistry+0x50>)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10b      	bne.n	80030b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800309c:	490c      	ldr	r1, [pc, #48]	; (80030d0 <vQueueAddToRegistry+0x50>)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80030a6:	4a0a      	ldr	r2, [pc, #40]	; (80030d0 <vQueueAddToRegistry+0x50>)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80030b2:	e006      	b.n	80030c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	3301      	adds	r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b07      	cmp	r3, #7
 80030be:	d9e7      	bls.n	8003090 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	200008a8 	.word	0x200008a8

080030d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80030e4:	f001 fb96 	bl	8004814 <vPortEnterCritical>
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030ee:	b25b      	sxtb	r3, r3
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030f4:	d103      	bne.n	80030fe <vQueueWaitForMessageRestricted+0x2a>
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003104:	b25b      	sxtb	r3, r3
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800310a:	d103      	bne.n	8003114 <vQueueWaitForMessageRestricted+0x40>
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003114:	f001 fbae 	bl	8004874 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	2b00      	cmp	r3, #0
 800311e:	d106      	bne.n	800312e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3324      	adds	r3, #36	; 0x24
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fc2d 	bl	8003988 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f7ff ff26 	bl	8002f80 <prvUnlockQueue>
	}
 8003134:	bf00      	nop
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08e      	sub	sp, #56	; 0x38
 8003140:	af04      	add	r7, sp, #16
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800314a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10a      	bne.n	8003166 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	623b      	str	r3, [r7, #32]
}
 8003162:	bf00      	nop
 8003164:	e7fe      	b.n	8003164 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10a      	bne.n	8003182 <xTaskCreateStatic+0x46>
	__asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	61fb      	str	r3, [r7, #28]
}
 800317e:	bf00      	nop
 8003180:	e7fe      	b.n	8003180 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003182:	23bc      	movs	r3, #188	; 0xbc
 8003184:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2bbc      	cmp	r3, #188	; 0xbc
 800318a:	d00a      	beq.n	80031a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	61bb      	str	r3, [r7, #24]
}
 800319e:	bf00      	nop
 80031a0:	e7fe      	b.n	80031a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d01e      	beq.n	80031e8 <xTaskCreateStatic+0xac>
 80031aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01b      	beq.n	80031e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031c2:	2300      	movs	r3, #0
 80031c4:	9303      	str	r3, [sp, #12]
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	9302      	str	r3, [sp, #8]
 80031ca:	f107 0314 	add.w	r3, r7, #20
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f850 	bl	8003280 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031e2:	f000 f8f3 	bl	80033cc <prvAddNewTaskToReadyList>
 80031e6:	e001      	b.n	80031ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031ec:	697b      	ldr	r3, [r7, #20]
	}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3728      	adds	r7, #40	; 0x28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b08c      	sub	sp, #48	; 0x30
 80031fa:	af04      	add	r7, sp, #16
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4618      	mov	r0, r3
 800320c:	f001 fc24 	bl	8004a58 <pvPortMalloc>
 8003210:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00e      	beq.n	8003236 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003218:	20bc      	movs	r0, #188	; 0xbc
 800321a:	f001 fc1d 	bl	8004a58 <pvPortMalloc>
 800321e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
 800322c:	e005      	b.n	800323a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800322e:	6978      	ldr	r0, [r7, #20]
 8003230:	f001 fcde 	bl	8004bf0 <vPortFree>
 8003234:	e001      	b.n	800323a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d017      	beq.n	8003270 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003248:	88fa      	ldrh	r2, [r7, #6]
 800324a:	2300      	movs	r3, #0
 800324c:	9303      	str	r3, [sp, #12]
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	9302      	str	r3, [sp, #8]
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f80e 	bl	8003280 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003264:	69f8      	ldr	r0, [r7, #28]
 8003266:	f000 f8b1 	bl	80033cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800326a:	2301      	movs	r3, #1
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	e002      	b.n	8003276 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003274:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003276:	69bb      	ldr	r3, [r7, #24]
	}
 8003278:	4618      	mov	r0, r3
 800327a:	3720      	adds	r7, #32
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	461a      	mov	r2, r3
 8003298:	21a5      	movs	r1, #165	; 0xa5
 800329a:	f001 fef8 	bl	800508e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032a8:	3b01      	subs	r3, #1
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	f023 0307 	bic.w	r3, r3, #7
 80032b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	617b      	str	r3, [r7, #20]
}
 80032d4:	bf00      	nop
 80032d6:	e7fe      	b.n	80032d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d01f      	beq.n	800331e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	e012      	b.n	800330a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	4413      	add	r3, r2
 80032ea:	7819      	ldrb	r1, [r3, #0]
 80032ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	4413      	add	r3, r2
 80032f2:	3334      	adds	r3, #52	; 0x34
 80032f4:	460a      	mov	r2, r1
 80032f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	4413      	add	r3, r2
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d006      	beq.n	8003312 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	3301      	adds	r3, #1
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	2b0f      	cmp	r3, #15
 800330e:	d9e9      	bls.n	80032e4 <prvInitialiseNewTask+0x64>
 8003310:	e000      	b.n	8003314 <prvInitialiseNewTask+0x94>
			{
				break;
 8003312:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800331c:	e003      	b.n	8003326 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	2b37      	cmp	r3, #55	; 0x37
 800332a:	d901      	bls.n	8003330 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800332c:	2337      	movs	r3, #55	; 0x37
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003334:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800333a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333e:	2200      	movs	r2, #0
 8003340:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	3304      	adds	r3, #4
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff f93e 	bl	80025c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	3318      	adds	r3, #24
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff f939 	bl	80025c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800335a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003364:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800336a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	2200      	movs	r2, #0
 8003370:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	2200      	movs	r2, #0
 8003378:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	3354      	adds	r3, #84	; 0x54
 8003380:	2260      	movs	r2, #96	; 0x60
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f001 fe82 	bl	800508e <memset>
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	4a0c      	ldr	r2, [pc, #48]	; (80033c0 <prvInitialiseNewTask+0x140>)
 800338e:	659a      	str	r2, [r3, #88]	; 0x58
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	4a0c      	ldr	r2, [pc, #48]	; (80033c4 <prvInitialiseNewTask+0x144>)
 8003394:	65da      	str	r2, [r3, #92]	; 0x5c
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <prvInitialiseNewTask+0x148>)
 800339a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	68f9      	ldr	r1, [r7, #12]
 80033a0:	69b8      	ldr	r0, [r7, #24]
 80033a2:	f001 f90d 	bl	80045c0 <pxPortInitialiseStack>
 80033a6:	4602      	mov	r2, r0
 80033a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033b8:	bf00      	nop
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	080060b0 	.word	0x080060b0
 80033c4:	080060d0 	.word	0x080060d0
 80033c8:	08006090 	.word	0x08006090

080033cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033d4:	f001 fa1e 	bl	8004814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033d8:	4b2d      	ldr	r3, [pc, #180]	; (8003490 <prvAddNewTaskToReadyList+0xc4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3301      	adds	r3, #1
 80033de:	4a2c      	ldr	r2, [pc, #176]	; (8003490 <prvAddNewTaskToReadyList+0xc4>)
 80033e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80033e2:	4b2c      	ldr	r3, [pc, #176]	; (8003494 <prvAddNewTaskToReadyList+0xc8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80033ea:	4a2a      	ldr	r2, [pc, #168]	; (8003494 <prvAddNewTaskToReadyList+0xc8>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033f0:	4b27      	ldr	r3, [pc, #156]	; (8003490 <prvAddNewTaskToReadyList+0xc4>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d110      	bne.n	800341a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033f8:	f000 fbf2 	bl	8003be0 <prvInitialiseTaskLists>
 80033fc:	e00d      	b.n	800341a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033fe:	4b26      	ldr	r3, [pc, #152]	; (8003498 <prvAddNewTaskToReadyList+0xcc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003406:	4b23      	ldr	r3, [pc, #140]	; (8003494 <prvAddNewTaskToReadyList+0xc8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	429a      	cmp	r2, r3
 8003412:	d802      	bhi.n	800341a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003414:	4a1f      	ldr	r2, [pc, #124]	; (8003494 <prvAddNewTaskToReadyList+0xc8>)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800341a:	4b20      	ldr	r3, [pc, #128]	; (800349c <prvAddNewTaskToReadyList+0xd0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	3301      	adds	r3, #1
 8003420:	4a1e      	ldr	r2, [pc, #120]	; (800349c <prvAddNewTaskToReadyList+0xd0>)
 8003422:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003424:	4b1d      	ldr	r3, [pc, #116]	; (800349c <prvAddNewTaskToReadyList+0xd0>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003430:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <prvAddNewTaskToReadyList+0xd4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d903      	bls.n	8003440 <prvAddNewTaskToReadyList+0x74>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <prvAddNewTaskToReadyList+0xd4>)
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4a15      	ldr	r2, [pc, #84]	; (80034a4 <prvAddNewTaskToReadyList+0xd8>)
 800344e:	441a      	add	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f7ff f8c3 	bl	80025e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800345c:	f001 fa0a 	bl	8004874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <prvAddNewTaskToReadyList+0xcc>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00e      	beq.n	8003486 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <prvAddNewTaskToReadyList+0xc8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	429a      	cmp	r2, r3
 8003474:	d207      	bcs.n	8003486 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003476:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <prvAddNewTaskToReadyList+0xdc>)
 8003478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000dbc 	.word	0x20000dbc
 8003494:	200008e8 	.word	0x200008e8
 8003498:	20000dc8 	.word	0x20000dc8
 800349c:	20000dd8 	.word	0x20000dd8
 80034a0:	20000dc4 	.word	0x20000dc4
 80034a4:	200008ec 	.word	0x200008ec
 80034a8:	e000ed04 	.word	0xe000ed04

080034ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	; 0x28
 80034b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034ba:	463a      	mov	r2, r7
 80034bc:	1d39      	adds	r1, r7, #4
 80034be:	f107 0308 	add.w	r3, r7, #8
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff f82c 	bl	8002520 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034c8:	6839      	ldr	r1, [r7, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	9202      	str	r2, [sp, #8]
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	2300      	movs	r3, #0
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2300      	movs	r3, #0
 80034d8:	460a      	mov	r2, r1
 80034da:	4924      	ldr	r1, [pc, #144]	; (800356c <vTaskStartScheduler+0xc0>)
 80034dc:	4824      	ldr	r0, [pc, #144]	; (8003570 <vTaskStartScheduler+0xc4>)
 80034de:	f7ff fe2d 	bl	800313c <xTaskCreateStatic>
 80034e2:	4603      	mov	r3, r0
 80034e4:	4a23      	ldr	r2, [pc, #140]	; (8003574 <vTaskStartScheduler+0xc8>)
 80034e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034e8:	4b22      	ldr	r3, [pc, #136]	; (8003574 <vTaskStartScheduler+0xc8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034f0:	2301      	movs	r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	e001      	b.n	80034fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d102      	bne.n	8003506 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003500:	f000 fd10 	bl	8003f24 <xTimerCreateTimerTask>
 8003504:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d11b      	bne.n	8003544 <vTaskStartScheduler+0x98>
	__asm volatile
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	613b      	str	r3, [r7, #16]
}
 800351e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003520:	4b15      	ldr	r3, [pc, #84]	; (8003578 <vTaskStartScheduler+0xcc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3354      	adds	r3, #84	; 0x54
 8003526:	4a15      	ldr	r2, [pc, #84]	; (800357c <vTaskStartScheduler+0xd0>)
 8003528:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <vTaskStartScheduler+0xd4>)
 800352c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003530:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003532:	4b14      	ldr	r3, [pc, #80]	; (8003584 <vTaskStartScheduler+0xd8>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003538:	4b13      	ldr	r3, [pc, #76]	; (8003588 <vTaskStartScheduler+0xdc>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800353e:	f001 f8c7 	bl	80046d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003542:	e00e      	b.n	8003562 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800354a:	d10a      	bne.n	8003562 <vTaskStartScheduler+0xb6>
	__asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	60fb      	str	r3, [r7, #12]
}
 800355e:	bf00      	nop
 8003560:	e7fe      	b.n	8003560 <vTaskStartScheduler+0xb4>
}
 8003562:	bf00      	nop
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	08006060 	.word	0x08006060
 8003570:	08003bb1 	.word	0x08003bb1
 8003574:	20000de0 	.word	0x20000de0
 8003578:	200008e8 	.word	0x200008e8
 800357c:	20000010 	.word	0x20000010
 8003580:	20000ddc 	.word	0x20000ddc
 8003584:	20000dc8 	.word	0x20000dc8
 8003588:	20000dc0 	.word	0x20000dc0

0800358c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <vTaskSuspendAll+0x18>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3301      	adds	r3, #1
 8003596:	4a03      	ldr	r2, [pc, #12]	; (80035a4 <vTaskSuspendAll+0x18>)
 8003598:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	20000de4 	.word	0x20000de4

080035a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035b6:	4b42      	ldr	r3, [pc, #264]	; (80036c0 <xTaskResumeAll+0x118>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	603b      	str	r3, [r7, #0]
}
 80035d0:	bf00      	nop
 80035d2:	e7fe      	b.n	80035d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035d4:	f001 f91e 	bl	8004814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035d8:	4b39      	ldr	r3, [pc, #228]	; (80036c0 <xTaskResumeAll+0x118>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3b01      	subs	r3, #1
 80035de:	4a38      	ldr	r2, [pc, #224]	; (80036c0 <xTaskResumeAll+0x118>)
 80035e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035e2:	4b37      	ldr	r3, [pc, #220]	; (80036c0 <xTaskResumeAll+0x118>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d162      	bne.n	80036b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035ea:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <xTaskResumeAll+0x11c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d05e      	beq.n	80036b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035f2:	e02f      	b.n	8003654 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f4:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <xTaskResumeAll+0x120>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	3318      	adds	r3, #24
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff f84b 	bl	800269c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3304      	adds	r3, #4
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff f846 	bl	800269c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003614:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <xTaskResumeAll+0x124>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d903      	bls.n	8003624 <xTaskResumeAll+0x7c>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	4a2a      	ldr	r2, [pc, #168]	; (80036cc <xTaskResumeAll+0x124>)
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4a27      	ldr	r2, [pc, #156]	; (80036d0 <xTaskResumeAll+0x128>)
 8003632:	441a      	add	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	3304      	adds	r3, #4
 8003638:	4619      	mov	r1, r3
 800363a:	4610      	mov	r0, r2
 800363c:	f7fe ffd1 	bl	80025e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003644:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <xTaskResumeAll+0x12c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	429a      	cmp	r2, r3
 800364c:	d302      	bcc.n	8003654 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800364e:	4b22      	ldr	r3, [pc, #136]	; (80036d8 <xTaskResumeAll+0x130>)
 8003650:	2201      	movs	r2, #1
 8003652:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003654:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <xTaskResumeAll+0x120>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1cb      	bne.n	80035f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003662:	f000 fb5f 	bl	8003d24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003666:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <xTaskResumeAll+0x134>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d010      	beq.n	8003694 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003672:	f000 f847 	bl	8003704 <xTaskIncrementTick>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800367c:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <xTaskResumeAll+0x130>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3b01      	subs	r3, #1
 8003686:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f1      	bne.n	8003672 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800368e:	4b13      	ldr	r3, [pc, #76]	; (80036dc <xTaskResumeAll+0x134>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <xTaskResumeAll+0x130>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d009      	beq.n	80036b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800369c:	2301      	movs	r3, #1
 800369e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036a0:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <xTaskResumeAll+0x138>)
 80036a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036b0:	f001 f8e0 	bl	8004874 <vPortExitCritical>

	return xAlreadyYielded;
 80036b4:	68bb      	ldr	r3, [r7, #8]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000de4 	.word	0x20000de4
 80036c4:	20000dbc 	.word	0x20000dbc
 80036c8:	20000d7c 	.word	0x20000d7c
 80036cc:	20000dc4 	.word	0x20000dc4
 80036d0:	200008ec 	.word	0x200008ec
 80036d4:	200008e8 	.word	0x200008e8
 80036d8:	20000dd0 	.word	0x20000dd0
 80036dc:	20000dcc 	.word	0x20000dcc
 80036e0:	e000ed04 	.word	0xe000ed04

080036e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <xTaskGetTickCount+0x1c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036f0:	687b      	ldr	r3, [r7, #4]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000dc0 	.word	0x20000dc0

08003704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800370e:	4b4f      	ldr	r3, [pc, #316]	; (800384c <xTaskIncrementTick+0x148>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f040 808f 	bne.w	8003836 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003718:	4b4d      	ldr	r3, [pc, #308]	; (8003850 <xTaskIncrementTick+0x14c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3301      	adds	r3, #1
 800371e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003720:	4a4b      	ldr	r2, [pc, #300]	; (8003850 <xTaskIncrementTick+0x14c>)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d120      	bne.n	800376e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800372c:	4b49      	ldr	r3, [pc, #292]	; (8003854 <xTaskIncrementTick+0x150>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <xTaskIncrementTick+0x48>
	__asm volatile
 8003736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373a:	f383 8811 	msr	BASEPRI, r3
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	603b      	str	r3, [r7, #0]
}
 8003748:	bf00      	nop
 800374a:	e7fe      	b.n	800374a <xTaskIncrementTick+0x46>
 800374c:	4b41      	ldr	r3, [pc, #260]	; (8003854 <xTaskIncrementTick+0x150>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4b41      	ldr	r3, [pc, #260]	; (8003858 <xTaskIncrementTick+0x154>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a3f      	ldr	r2, [pc, #252]	; (8003854 <xTaskIncrementTick+0x150>)
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4a3f      	ldr	r2, [pc, #252]	; (8003858 <xTaskIncrementTick+0x154>)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	4b3e      	ldr	r3, [pc, #248]	; (800385c <xTaskIncrementTick+0x158>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	4a3d      	ldr	r2, [pc, #244]	; (800385c <xTaskIncrementTick+0x158>)
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	f000 fadb 	bl	8003d24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800376e:	4b3c      	ldr	r3, [pc, #240]	; (8003860 <xTaskIncrementTick+0x15c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	429a      	cmp	r2, r3
 8003776:	d349      	bcc.n	800380c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003778:	4b36      	ldr	r3, [pc, #216]	; (8003854 <xTaskIncrementTick+0x150>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d104      	bne.n	800378c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003782:	4b37      	ldr	r3, [pc, #220]	; (8003860 <xTaskIncrementTick+0x15c>)
 8003784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003788:	601a      	str	r2, [r3, #0]
					break;
 800378a:	e03f      	b.n	800380c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800378c:	4b31      	ldr	r3, [pc, #196]	; (8003854 <xTaskIncrementTick+0x150>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d203      	bcs.n	80037ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037a4:	4a2e      	ldr	r2, [pc, #184]	; (8003860 <xTaskIncrementTick+0x15c>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037aa:	e02f      	b.n	800380c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe ff73 	bl	800269c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d004      	beq.n	80037c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	3318      	adds	r3, #24
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe ff6a 	bl	800269c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037cc:	4b25      	ldr	r3, [pc, #148]	; (8003864 <xTaskIncrementTick+0x160>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d903      	bls.n	80037dc <xTaskIncrementTick+0xd8>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	4a22      	ldr	r2, [pc, #136]	; (8003864 <xTaskIncrementTick+0x160>)
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <xTaskIncrementTick+0x164>)
 80037ea:	441a      	add	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f7fe fef5 	bl	80025e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <xTaskIncrementTick+0x168>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	429a      	cmp	r2, r3
 8003804:	d3b8      	bcc.n	8003778 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003806:	2301      	movs	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800380a:	e7b5      	b.n	8003778 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800380c:	4b17      	ldr	r3, [pc, #92]	; (800386c <xTaskIncrementTick+0x168>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003812:	4915      	ldr	r1, [pc, #84]	; (8003868 <xTaskIncrementTick+0x164>)
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d901      	bls.n	8003828 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003824:	2301      	movs	r3, #1
 8003826:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <xTaskIncrementTick+0x16c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d007      	beq.n	8003840 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003830:	2301      	movs	r3, #1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	e004      	b.n	8003840 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <xTaskIncrementTick+0x170>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3301      	adds	r3, #1
 800383c:	4a0d      	ldr	r2, [pc, #52]	; (8003874 <xTaskIncrementTick+0x170>)
 800383e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003840:	697b      	ldr	r3, [r7, #20]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000de4 	.word	0x20000de4
 8003850:	20000dc0 	.word	0x20000dc0
 8003854:	20000d74 	.word	0x20000d74
 8003858:	20000d78 	.word	0x20000d78
 800385c:	20000dd4 	.word	0x20000dd4
 8003860:	20000ddc 	.word	0x20000ddc
 8003864:	20000dc4 	.word	0x20000dc4
 8003868:	200008ec 	.word	0x200008ec
 800386c:	200008e8 	.word	0x200008e8
 8003870:	20000dd0 	.word	0x20000dd0
 8003874:	20000dcc 	.word	0x20000dcc

08003878 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800387e:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <vTaskSwitchContext+0xb0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003886:	4b29      	ldr	r3, [pc, #164]	; (800392c <vTaskSwitchContext+0xb4>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800388c:	e046      	b.n	800391c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800388e:	4b27      	ldr	r3, [pc, #156]	; (800392c <vTaskSwitchContext+0xb4>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003894:	4b26      	ldr	r3, [pc, #152]	; (8003930 <vTaskSwitchContext+0xb8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	e010      	b.n	80038be <vTaskSwitchContext+0x46>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	607b      	str	r3, [r7, #4]
}
 80038b4:	bf00      	nop
 80038b6:	e7fe      	b.n	80038b6 <vTaskSwitchContext+0x3e>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	491d      	ldr	r1, [pc, #116]	; (8003934 <vTaskSwitchContext+0xbc>)
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0e4      	beq.n	800389c <vTaskSwitchContext+0x24>
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4a15      	ldr	r2, [pc, #84]	; (8003934 <vTaskSwitchContext+0xbc>)
 80038de:	4413      	add	r3, r2
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	605a      	str	r2, [r3, #4]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	3308      	adds	r3, #8
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d104      	bne.n	8003902 <vTaskSwitchContext+0x8a>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <vTaskSwitchContext+0xc0>)
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	4a08      	ldr	r2, [pc, #32]	; (8003930 <vTaskSwitchContext+0xb8>)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <vTaskSwitchContext+0xc0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3354      	adds	r3, #84	; 0x54
 8003918:	4a08      	ldr	r2, [pc, #32]	; (800393c <vTaskSwitchContext+0xc4>)
 800391a:	6013      	str	r3, [r2, #0]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	20000de4 	.word	0x20000de4
 800392c:	20000dd0 	.word	0x20000dd0
 8003930:	20000dc4 	.word	0x20000dc4
 8003934:	200008ec 	.word	0x200008ec
 8003938:	200008e8 	.word	0x200008e8
 800393c:	20000010 	.word	0x20000010

08003940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	60fb      	str	r3, [r7, #12]
}
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003966:	4b07      	ldr	r3, [pc, #28]	; (8003984 <vTaskPlaceOnEventList+0x44>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3318      	adds	r3, #24
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fe fe5b 	bl	800262a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003974:	2101      	movs	r1, #1
 8003976:	6838      	ldr	r0, [r7, #0]
 8003978:	f000 fa80 	bl	8003e7c <prvAddCurrentTaskToDelayedList>
}
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	200008e8 	.word	0x200008e8

08003988 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	617b      	str	r3, [r7, #20]
}
 80039ac:	bf00      	nop
 80039ae:	e7fe      	b.n	80039ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039b0:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <vTaskPlaceOnEventListRestricted+0x54>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3318      	adds	r3, #24
 80039b6:	4619      	mov	r1, r3
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7fe fe12 	bl	80025e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80039c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	68b8      	ldr	r0, [r7, #8]
 80039ce:	f000 fa55 	bl	8003e7c <prvAddCurrentTaskToDelayedList>
	}
 80039d2:	bf00      	nop
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200008e8 	.word	0x200008e8

080039e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	60fb      	str	r3, [r7, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	e7fe      	b.n	8003a0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	3318      	adds	r3, #24
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe fe43 	bl	800269c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a16:	4b1e      	ldr	r3, [pc, #120]	; (8003a90 <xTaskRemoveFromEventList+0xb0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11d      	bne.n	8003a5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	3304      	adds	r3, #4
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe fe3a 	bl	800269c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <xTaskRemoveFromEventList+0xb4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d903      	bls.n	8003a3c <xTaskRemoveFromEventList+0x5c>
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <xTaskRemoveFromEventList+0xb4>)
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4a13      	ldr	r2, [pc, #76]	; (8003a98 <xTaskRemoveFromEventList+0xb8>)
 8003a4a:	441a      	add	r2, r3
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	4619      	mov	r1, r3
 8003a52:	4610      	mov	r0, r2
 8003a54:	f7fe fdc5 	bl	80025e2 <vListInsertEnd>
 8003a58:	e005      	b.n	8003a66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	3318      	adds	r3, #24
 8003a5e:	4619      	mov	r1, r3
 8003a60:	480e      	ldr	r0, [pc, #56]	; (8003a9c <xTaskRemoveFromEventList+0xbc>)
 8003a62:	f7fe fdbe 	bl	80025e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <xTaskRemoveFromEventList+0xc0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d905      	bls.n	8003a80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a74:	2301      	movs	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <xTaskRemoveFromEventList+0xc4>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e001      	b.n	8003a84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a84:	697b      	ldr	r3, [r7, #20]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000de4 	.word	0x20000de4
 8003a94:	20000dc4 	.word	0x20000dc4
 8003a98:	200008ec 	.word	0x200008ec
 8003a9c:	20000d7c 	.word	0x20000d7c
 8003aa0:	200008e8 	.word	0x200008e8
 8003aa4:	20000dd0 	.word	0x20000dd0

08003aa8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <vTaskInternalSetTimeOutState+0x24>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <vTaskInternalSetTimeOutState+0x28>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	605a      	str	r2, [r3, #4]
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	20000dd4 	.word	0x20000dd4
 8003ad0:	20000dc0 	.word	0x20000dc0

08003ad4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	613b      	str	r3, [r7, #16]
}
 8003af6:	bf00      	nop
 8003af8:	e7fe      	b.n	8003af8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	60fb      	str	r3, [r7, #12]
}
 8003b12:	bf00      	nop
 8003b14:	e7fe      	b.n	8003b14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003b16:	f000 fe7d 	bl	8004814 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <xTaskCheckForTimeOut+0xbc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b32:	d102      	bne.n	8003b3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	e023      	b.n	8003b82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <xTaskCheckForTimeOut+0xc0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d007      	beq.n	8003b56 <xTaskCheckForTimeOut+0x82>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d302      	bcc.n	8003b56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b50:	2301      	movs	r3, #1
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	e015      	b.n	8003b82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d20b      	bcs.n	8003b78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	1ad2      	subs	r2, r2, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff ff9b 	bl	8003aa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	e004      	b.n	8003b82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b82:	f000 fe77 	bl	8004874 <vPortExitCritical>

	return xReturn;
 8003b86:	69fb      	ldr	r3, [r7, #28]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3720      	adds	r7, #32
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000dc0 	.word	0x20000dc0
 8003b94:	20000dd4 	.word	0x20000dd4

08003b98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <vTaskMissedYield+0x14>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
}
 8003ba2:	bf00      	nop
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	20000dd0 	.word	0x20000dd0

08003bb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003bb8:	f000 f852 	bl	8003c60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <prvIdleTask+0x28>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d9f9      	bls.n	8003bb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <prvIdleTask+0x2c>)
 8003bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003bd4:	e7f0      	b.n	8003bb8 <prvIdleTask+0x8>
 8003bd6:	bf00      	nop
 8003bd8:	200008ec 	.word	0x200008ec
 8003bdc:	e000ed04 	.word	0xe000ed04

08003be0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003be6:	2300      	movs	r3, #0
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	e00c      	b.n	8003c06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4a12      	ldr	r2, [pc, #72]	; (8003c40 <prvInitialiseTaskLists+0x60>)
 8003bf8:	4413      	add	r3, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fcc4 	bl	8002588 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3301      	adds	r3, #1
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b37      	cmp	r3, #55	; 0x37
 8003c0a:	d9ef      	bls.n	8003bec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c0c:	480d      	ldr	r0, [pc, #52]	; (8003c44 <prvInitialiseTaskLists+0x64>)
 8003c0e:	f7fe fcbb 	bl	8002588 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c12:	480d      	ldr	r0, [pc, #52]	; (8003c48 <prvInitialiseTaskLists+0x68>)
 8003c14:	f7fe fcb8 	bl	8002588 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c18:	480c      	ldr	r0, [pc, #48]	; (8003c4c <prvInitialiseTaskLists+0x6c>)
 8003c1a:	f7fe fcb5 	bl	8002588 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c1e:	480c      	ldr	r0, [pc, #48]	; (8003c50 <prvInitialiseTaskLists+0x70>)
 8003c20:	f7fe fcb2 	bl	8002588 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c24:	480b      	ldr	r0, [pc, #44]	; (8003c54 <prvInitialiseTaskLists+0x74>)
 8003c26:	f7fe fcaf 	bl	8002588 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <prvInitialiseTaskLists+0x78>)
 8003c2c:	4a05      	ldr	r2, [pc, #20]	; (8003c44 <prvInitialiseTaskLists+0x64>)
 8003c2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <prvInitialiseTaskLists+0x7c>)
 8003c32:	4a05      	ldr	r2, [pc, #20]	; (8003c48 <prvInitialiseTaskLists+0x68>)
 8003c34:	601a      	str	r2, [r3, #0]
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200008ec 	.word	0x200008ec
 8003c44:	20000d4c 	.word	0x20000d4c
 8003c48:	20000d60 	.word	0x20000d60
 8003c4c:	20000d7c 	.word	0x20000d7c
 8003c50:	20000d90 	.word	0x20000d90
 8003c54:	20000da8 	.word	0x20000da8
 8003c58:	20000d74 	.word	0x20000d74
 8003c5c:	20000d78 	.word	0x20000d78

08003c60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c66:	e019      	b.n	8003c9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c68:	f000 fdd4 	bl	8004814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c6c:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <prvCheckTasksWaitingTermination+0x50>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe fd0f 	bl	800269c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <prvCheckTasksWaitingTermination+0x54>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	4a0b      	ldr	r2, [pc, #44]	; (8003cb4 <prvCheckTasksWaitingTermination+0x54>)
 8003c86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c88:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <prvCheckTasksWaitingTermination+0x58>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <prvCheckTasksWaitingTermination+0x58>)
 8003c90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c92:	f000 fdef 	bl	8004874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f810 	bl	8003cbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <prvCheckTasksWaitingTermination+0x58>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e1      	bne.n	8003c68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000d90 	.word	0x20000d90
 8003cb4:	20000dbc 	.word	0x20000dbc
 8003cb8:	20000da4 	.word	0x20000da4

08003cbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3354      	adds	r3, #84	; 0x54
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f001 fb19 	bl	8005300 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d108      	bne.n	8003cea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 ff87 	bl	8004bf0 <vPortFree>
				vPortFree( pxTCB );
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 ff84 	bl	8004bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ce8:	e018      	b.n	8003d1c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d103      	bne.n	8003cfc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 ff7b 	bl	8004bf0 <vPortFree>
	}
 8003cfa:	e00f      	b.n	8003d1c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d00a      	beq.n	8003d1c <prvDeleteTCB+0x60>
	__asm volatile
 8003d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0a:	f383 8811 	msr	BASEPRI, r3
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	60fb      	str	r3, [r7, #12]
}
 8003d18:	bf00      	nop
 8003d1a:	e7fe      	b.n	8003d1a <prvDeleteTCB+0x5e>
	}
 8003d1c:	bf00      	nop
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <prvResetNextTaskUnblockTime+0x38>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d104      	bne.n	8003d3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d34:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <prvResetNextTaskUnblockTime+0x3c>)
 8003d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d3c:	e008      	b.n	8003d50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d3e:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <prvResetNextTaskUnblockTime+0x38>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <prvResetNextTaskUnblockTime+0x3c>)
 8003d4e:	6013      	str	r3, [r2, #0]
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	20000d74 	.word	0x20000d74
 8003d60:	20000ddc 	.word	0x20000ddc

08003d64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <xTaskGetSchedulerState+0x34>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d102      	bne.n	8003d78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d72:	2301      	movs	r3, #1
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	e008      	b.n	8003d8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d78:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <xTaskGetSchedulerState+0x38>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d80:	2302      	movs	r3, #2
 8003d82:	607b      	str	r3, [r7, #4]
 8003d84:	e001      	b.n	8003d8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d86:	2300      	movs	r3, #0
 8003d88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d8a:	687b      	ldr	r3, [r7, #4]
	}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	20000dc8 	.word	0x20000dc8
 8003d9c:	20000de4 	.word	0x20000de4

08003da0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d056      	beq.n	8003e64 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003db6:	4b2e      	ldr	r3, [pc, #184]	; (8003e70 <xTaskPriorityDisinherit+0xd0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d00a      	beq.n	8003dd6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	60fb      	str	r3, [r7, #12]
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	60bb      	str	r3, [r7, #8]
}
 8003df0:	bf00      	nop
 8003df2:	e7fe      	b.n	8003df2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df8:	1e5a      	subs	r2, r3, #1
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d02c      	beq.n	8003e64 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d128      	bne.n	8003e64 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	3304      	adds	r3, #4
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe fc40 	bl	800269c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e34:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <xTaskPriorityDisinherit+0xd4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d903      	bls.n	8003e44 <xTaskPriorityDisinherit+0xa4>
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	4a0c      	ldr	r2, [pc, #48]	; (8003e74 <xTaskPriorityDisinherit+0xd4>)
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <xTaskPriorityDisinherit+0xd8>)
 8003e52:	441a      	add	r2, r3
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	3304      	adds	r3, #4
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	f7fe fbc1 	bl	80025e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e60:	2301      	movs	r3, #1
 8003e62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e64:	697b      	ldr	r3, [r7, #20]
	}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	200008e8 	.word	0x200008e8
 8003e74:	20000dc4 	.word	0x20000dc4
 8003e78:	200008ec 	.word	0x200008ec

08003e7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e86:	4b21      	ldr	r3, [pc, #132]	; (8003f0c <prvAddCurrentTaskToDelayedList+0x90>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e8c:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3304      	adds	r3, #4
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fe fc02 	bl	800269c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e9e:	d10a      	bne.n	8003eb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d007      	beq.n	8003eb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ea6:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4619      	mov	r1, r3
 8003eae:	4819      	ldr	r0, [pc, #100]	; (8003f14 <prvAddCurrentTaskToDelayedList+0x98>)
 8003eb0:	f7fe fb97 	bl	80025e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003eb4:	e026      	b.n	8003f04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4413      	add	r3, r2
 8003ebc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ebe:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d209      	bcs.n	8003ee2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ece:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4610      	mov	r0, r2
 8003edc:	f7fe fba5 	bl	800262a <vListInsert>
}
 8003ee0:	e010      	b.n	8003f04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ee2:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f7fe fb9b 	bl	800262a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d202      	bcs.n	8003f04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003efe:	4a08      	ldr	r2, [pc, #32]	; (8003f20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	6013      	str	r3, [r2, #0]
}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000dc0 	.word	0x20000dc0
 8003f10:	200008e8 	.word	0x200008e8
 8003f14:	20000da8 	.word	0x20000da8
 8003f18:	20000d78 	.word	0x20000d78
 8003f1c:	20000d74 	.word	0x20000d74
 8003f20:	20000ddc 	.word	0x20000ddc

08003f24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	; 0x28
 8003f28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f2e:	f000 fb07 	bl	8004540 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f32:	4b1c      	ldr	r3, [pc, #112]	; (8003fa4 <xTimerCreateTimerTask+0x80>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d021      	beq.n	8003f7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f42:	1d3a      	adds	r2, r7, #4
 8003f44:	f107 0108 	add.w	r1, r7, #8
 8003f48:	f107 030c 	add.w	r3, r7, #12
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe fb01 	bl	8002554 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	9202      	str	r2, [sp, #8]
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2300      	movs	r3, #0
 8003f62:	460a      	mov	r2, r1
 8003f64:	4910      	ldr	r1, [pc, #64]	; (8003fa8 <xTimerCreateTimerTask+0x84>)
 8003f66:	4811      	ldr	r0, [pc, #68]	; (8003fac <xTimerCreateTimerTask+0x88>)
 8003f68:	f7ff f8e8 	bl	800313c <xTaskCreateStatic>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	4a10      	ldr	r2, [pc, #64]	; (8003fb0 <xTimerCreateTimerTask+0x8c>)
 8003f70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f72:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <xTimerCreateTimerTask+0x8c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	613b      	str	r3, [r7, #16]
}
 8003f96:	bf00      	nop
 8003f98:	e7fe      	b.n	8003f98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f9a:	697b      	ldr	r3, [r7, #20]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000e18 	.word	0x20000e18
 8003fa8:	08006068 	.word	0x08006068
 8003fac:	080040e9 	.word	0x080040e9
 8003fb0:	20000e1c 	.word	0x20000e1c

08003fb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08a      	sub	sp, #40	; 0x28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	623b      	str	r3, [r7, #32]
}
 8003fde:	bf00      	nop
 8003fe0:	e7fe      	b.n	8003fe0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003fe2:	4b1a      	ldr	r3, [pc, #104]	; (800404c <xTimerGenericCommand+0x98>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d02a      	beq.n	8004040 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b05      	cmp	r3, #5
 8003ffa:	dc18      	bgt.n	800402e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ffc:	f7ff feb2 	bl	8003d64 <xTaskGetSchedulerState>
 8004000:	4603      	mov	r3, r0
 8004002:	2b02      	cmp	r3, #2
 8004004:	d109      	bne.n	800401a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004006:	4b11      	ldr	r3, [pc, #68]	; (800404c <xTimerGenericCommand+0x98>)
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	f107 0110 	add.w	r1, r7, #16
 800400e:	2300      	movs	r3, #0
 8004010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004012:	f7fe fcab 	bl	800296c <xQueueGenericSend>
 8004016:	6278      	str	r0, [r7, #36]	; 0x24
 8004018:	e012      	b.n	8004040 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800401a:	4b0c      	ldr	r3, [pc, #48]	; (800404c <xTimerGenericCommand+0x98>)
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	f107 0110 	add.w	r1, r7, #16
 8004022:	2300      	movs	r3, #0
 8004024:	2200      	movs	r2, #0
 8004026:	f7fe fca1 	bl	800296c <xQueueGenericSend>
 800402a:	6278      	str	r0, [r7, #36]	; 0x24
 800402c:	e008      	b.n	8004040 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800402e:	4b07      	ldr	r3, [pc, #28]	; (800404c <xTimerGenericCommand+0x98>)
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	f107 0110 	add.w	r1, r7, #16
 8004036:	2300      	movs	r3, #0
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	f7fe fd95 	bl	8002b68 <xQueueGenericSendFromISR>
 800403e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004042:	4618      	mov	r0, r3
 8004044:	3728      	adds	r7, #40	; 0x28
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000e18 	.word	0x20000e18

08004050 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af02      	add	r7, sp, #8
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800405a:	4b22      	ldr	r3, [pc, #136]	; (80040e4 <prvProcessExpiredTimer+0x94>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3304      	adds	r3, #4
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe fb17 	bl	800269c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d022      	beq.n	80040c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	699a      	ldr	r2, [r3, #24]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	18d1      	adds	r1, r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	6978      	ldr	r0, [r7, #20]
 800408a:	f000 f8d1 	bl	8004230 <prvInsertTimerInActiveList>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01f      	beq.n	80040d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004094:	2300      	movs	r3, #0
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	2300      	movs	r3, #0
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	2100      	movs	r1, #0
 800409e:	6978      	ldr	r0, [r7, #20]
 80040a0:	f7ff ff88 	bl	8003fb4 <xTimerGenericCommand>
 80040a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d113      	bne.n	80040d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	60fb      	str	r3, [r7, #12]
}
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	6978      	ldr	r0, [r7, #20]
 80040da:	4798      	blx	r3
}
 80040dc:	bf00      	nop
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20000e10 	.word	0x20000e10

080040e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040f0:	f107 0308 	add.w	r3, r7, #8
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 f857 	bl	80041a8 <prvGetNextExpireTime>
 80040fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4619      	mov	r1, r3
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f803 	bl	800410c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004106:	f000 f8d5 	bl	80042b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800410a:	e7f1      	b.n	80040f0 <prvTimerTask+0x8>

0800410c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004116:	f7ff fa39 	bl	800358c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800411a:	f107 0308 	add.w	r3, r7, #8
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f866 	bl	80041f0 <prvSampleTimeNow>
 8004124:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d130      	bne.n	800418e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <prvProcessTimerOrBlockTask+0x3c>
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	429a      	cmp	r2, r3
 8004138:	d806      	bhi.n	8004148 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800413a:	f7ff fa35 	bl	80035a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ff85 	bl	8004050 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004146:	e024      	b.n	8004192 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d008      	beq.n	8004160 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800414e:	4b13      	ldr	r3, [pc, #76]	; (800419c <prvProcessTimerOrBlockTask+0x90>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <prvProcessTimerOrBlockTask+0x50>
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <prvProcessTimerOrBlockTask+0x52>
 800415c:	2300      	movs	r3, #0
 800415e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <prvProcessTimerOrBlockTask+0x94>)
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	4619      	mov	r1, r3
 800416e:	f7fe ffb1 	bl	80030d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004172:	f7ff fa19 	bl	80035a8 <xTaskResumeAll>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <prvProcessTimerOrBlockTask+0x98>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	f3bf 8f6f 	isb	sy
}
 800418c:	e001      	b.n	8004192 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800418e:	f7ff fa0b 	bl	80035a8 <xTaskResumeAll>
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000e14 	.word	0x20000e14
 80041a0:	20000e18 	.word	0x20000e18
 80041a4:	e000ed04 	.word	0xe000ed04

080041a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041b0:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <prvGetNextExpireTime+0x44>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <prvGetNextExpireTime+0x16>
 80041ba:	2201      	movs	r2, #1
 80041bc:	e000      	b.n	80041c0 <prvGetNextExpireTime+0x18>
 80041be:	2200      	movs	r2, #0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d105      	bne.n	80041d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041cc:	4b07      	ldr	r3, [pc, #28]	; (80041ec <prvGetNextExpireTime+0x44>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	e001      	b.n	80041dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80041dc:	68fb      	ldr	r3, [r7, #12]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	20000e10 	.word	0x20000e10

080041f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80041f8:	f7ff fa74 	bl	80036e4 <xTaskGetTickCount>
 80041fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <prvSampleTimeNow+0x3c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	429a      	cmp	r2, r3
 8004206:	d205      	bcs.n	8004214 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004208:	f000 f936 	bl	8004478 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	e002      	b.n	800421a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800421a:	4a04      	ldr	r2, [pc, #16]	; (800422c <prvSampleTimeNow+0x3c>)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004220:	68fb      	ldr	r3, [r7, #12]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000e20 	.word	0x20000e20

08004230 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d812      	bhi.n	800427c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	1ad2      	subs	r2, r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004264:	2301      	movs	r3, #1
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	e01b      	b.n	80042a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800426a:	4b10      	ldr	r3, [pc, #64]	; (80042ac <prvInsertTimerInActiveList+0x7c>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3304      	adds	r3, #4
 8004272:	4619      	mov	r1, r3
 8004274:	4610      	mov	r0, r2
 8004276:	f7fe f9d8 	bl	800262a <vListInsert>
 800427a:	e012      	b.n	80042a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d206      	bcs.n	8004292 <prvInsertTimerInActiveList+0x62>
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d302      	bcc.n	8004292 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800428c:	2301      	movs	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e007      	b.n	80042a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <prvInsertTimerInActiveList+0x80>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3304      	adds	r3, #4
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f7fe f9c4 	bl	800262a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80042a2:	697b      	ldr	r3, [r7, #20]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20000e14 	.word	0x20000e14
 80042b0:	20000e10 	.word	0x20000e10

080042b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08e      	sub	sp, #56	; 0x38
 80042b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042ba:	e0ca      	b.n	8004452 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	da18      	bge.n	80042f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80042c2:	1d3b      	adds	r3, r7, #4
 80042c4:	3304      	adds	r3, #4
 80042c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10a      	bne.n	80042e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	61fb      	str	r3, [r7, #28]
}
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80042e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ea:	6850      	ldr	r0, [r2, #4]
 80042ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ee:	6892      	ldr	r2, [r2, #8]
 80042f0:	4611      	mov	r1, r2
 80042f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f2c0 80aa 	blt.w	8004450 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d004      	beq.n	8004312 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	3304      	adds	r3, #4
 800430c:	4618      	mov	r0, r3
 800430e:	f7fe f9c5 	bl	800269c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004312:	463b      	mov	r3, r7
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff ff6b 	bl	80041f0 <prvSampleTimeNow>
 800431a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b09      	cmp	r3, #9
 8004320:	f200 8097 	bhi.w	8004452 <prvProcessReceivedCommands+0x19e>
 8004324:	a201      	add	r2, pc, #4	; (adr r2, 800432c <prvProcessReceivedCommands+0x78>)
 8004326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432a:	bf00      	nop
 800432c:	08004355 	.word	0x08004355
 8004330:	08004355 	.word	0x08004355
 8004334:	08004355 	.word	0x08004355
 8004338:	080043c9 	.word	0x080043c9
 800433c:	080043dd 	.word	0x080043dd
 8004340:	08004427 	.word	0x08004427
 8004344:	08004355 	.word	0x08004355
 8004348:	08004355 	.word	0x08004355
 800434c:	080043c9 	.word	0x080043c9
 8004350:	080043dd 	.word	0x080043dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	b2da      	uxtb	r2, r3
 8004360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	18d1      	adds	r1, r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004374:	f7ff ff5c 	bl	8004230 <prvInsertTimerInActiveList>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d069      	beq.n	8004452 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004384:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d05e      	beq.n	8004452 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	441a      	add	r2, r3
 800439c:	2300      	movs	r3, #0
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	2300      	movs	r3, #0
 80043a2:	2100      	movs	r1, #0
 80043a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043a6:	f7ff fe05 	bl	8003fb4 <xTimerGenericCommand>
 80043aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d14f      	bne.n	8004452 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	61bb      	str	r3, [r7, #24]
}
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80043da:	e03a      	b.n	8004452 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	617b      	str	r3, [r7, #20]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	18d1      	adds	r1, r2, r3
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004420:	f7ff ff06 	bl	8004230 <prvInsertTimerInActiveList>
					break;
 8004424:	e015      	b.n	8004452 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d103      	bne.n	800443c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004436:	f000 fbdb 	bl	8004bf0 <vPortFree>
 800443a:	e00a      	b.n	8004452 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800443c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004442:	f023 0301 	bic.w	r3, r3, #1
 8004446:	b2da      	uxtb	r2, r3
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800444e:	e000      	b.n	8004452 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004450:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004452:	4b08      	ldr	r3, [pc, #32]	; (8004474 <prvProcessReceivedCommands+0x1c0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	1d39      	adds	r1, r7, #4
 8004458:	2200      	movs	r2, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe fc20 	bl	8002ca0 <xQueueReceive>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	f47f af2a 	bne.w	80042bc <prvProcessReceivedCommands+0x8>
	}
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	3730      	adds	r7, #48	; 0x30
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000e18 	.word	0x20000e18

08004478 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800447e:	e048      	b.n	8004512 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004480:	4b2d      	ldr	r3, [pc, #180]	; (8004538 <prvSwitchTimerLists+0xc0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800448a:	4b2b      	ldr	r3, [pc, #172]	; (8004538 <prvSwitchTimerLists+0xc0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3304      	adds	r3, #4
 8004498:	4618      	mov	r0, r3
 800449a:	f7fe f8ff 	bl	800269c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d02e      	beq.n	8004512 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d90e      	bls.n	80044e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044d2:	4b19      	ldr	r3, [pc, #100]	; (8004538 <prvSwitchTimerLists+0xc0>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3304      	adds	r3, #4
 80044da:	4619      	mov	r1, r3
 80044dc:	4610      	mov	r0, r2
 80044de:	f7fe f8a4 	bl	800262a <vListInsert>
 80044e2:	e016      	b.n	8004512 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044e4:	2300      	movs	r3, #0
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	2300      	movs	r3, #0
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	2100      	movs	r1, #0
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff fd60 	bl	8003fb4 <xTimerGenericCommand>
 80044f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10a      	bne.n	8004512 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	603b      	str	r3, [r7, #0]
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004512:	4b09      	ldr	r3, [pc, #36]	; (8004538 <prvSwitchTimerLists+0xc0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1b1      	bne.n	8004480 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <prvSwitchTimerLists+0xc0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <prvSwitchTimerLists+0xc4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a04      	ldr	r2, [pc, #16]	; (8004538 <prvSwitchTimerLists+0xc0>)
 8004528:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800452a:	4a04      	ldr	r2, [pc, #16]	; (800453c <prvSwitchTimerLists+0xc4>)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	6013      	str	r3, [r2, #0]
}
 8004530:	bf00      	nop
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20000e10 	.word	0x20000e10
 800453c:	20000e14 	.word	0x20000e14

08004540 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004546:	f000 f965 	bl	8004814 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800454a:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <prvCheckForValidListAndQueue+0x60>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d120      	bne.n	8004594 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004552:	4814      	ldr	r0, [pc, #80]	; (80045a4 <prvCheckForValidListAndQueue+0x64>)
 8004554:	f7fe f818 	bl	8002588 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004558:	4813      	ldr	r0, [pc, #76]	; (80045a8 <prvCheckForValidListAndQueue+0x68>)
 800455a:	f7fe f815 	bl	8002588 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800455e:	4b13      	ldr	r3, [pc, #76]	; (80045ac <prvCheckForValidListAndQueue+0x6c>)
 8004560:	4a10      	ldr	r2, [pc, #64]	; (80045a4 <prvCheckForValidListAndQueue+0x64>)
 8004562:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004564:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <prvCheckForValidListAndQueue+0x70>)
 8004566:	4a10      	ldr	r2, [pc, #64]	; (80045a8 <prvCheckForValidListAndQueue+0x68>)
 8004568:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800456a:	2300      	movs	r3, #0
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <prvCheckForValidListAndQueue+0x74>)
 8004570:	4a11      	ldr	r2, [pc, #68]	; (80045b8 <prvCheckForValidListAndQueue+0x78>)
 8004572:	2110      	movs	r1, #16
 8004574:	200a      	movs	r0, #10
 8004576:	f7fe f923 	bl	80027c0 <xQueueGenericCreateStatic>
 800457a:	4603      	mov	r3, r0
 800457c:	4a08      	ldr	r2, [pc, #32]	; (80045a0 <prvCheckForValidListAndQueue+0x60>)
 800457e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004580:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <prvCheckForValidListAndQueue+0x60>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <prvCheckForValidListAndQueue+0x60>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	490b      	ldr	r1, [pc, #44]	; (80045bc <prvCheckForValidListAndQueue+0x7c>)
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe fd76 	bl	8003080 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004594:	f000 f96e 	bl	8004874 <vPortExitCritical>
}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20000e18 	.word	0x20000e18
 80045a4:	20000de8 	.word	0x20000de8
 80045a8:	20000dfc 	.word	0x20000dfc
 80045ac:	20000e10 	.word	0x20000e10
 80045b0:	20000e14 	.word	0x20000e14
 80045b4:	20000ec4 	.word	0x20000ec4
 80045b8:	20000e24 	.word	0x20000e24
 80045bc:	08006070 	.word	0x08006070

080045c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3b04      	subs	r3, #4
 80045d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3b04      	subs	r3, #4
 80045de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f023 0201 	bic.w	r2, r3, #1
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3b04      	subs	r3, #4
 80045ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045f0:	4a0c      	ldr	r2, [pc, #48]	; (8004624 <pxPortInitialiseStack+0x64>)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3b14      	subs	r3, #20
 80045fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3b04      	subs	r3, #4
 8004606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f06f 0202 	mvn.w	r2, #2
 800460e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3b20      	subs	r3, #32
 8004614:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004616:	68fb      	ldr	r3, [r7, #12]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	08004629 	.word	0x08004629

08004628 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004632:	4b12      	ldr	r3, [pc, #72]	; (800467c <prvTaskExitError+0x54>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800463a:	d00a      	beq.n	8004652 <prvTaskExitError+0x2a>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	60fb      	str	r3, [r7, #12]
}
 800464e:	bf00      	nop
 8004650:	e7fe      	b.n	8004650 <prvTaskExitError+0x28>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	60bb      	str	r3, [r7, #8]
}
 8004664:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004666:	bf00      	nop
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0fc      	beq.n	8004668 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800466e:	bf00      	nop
 8004670:	bf00      	nop
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	2000000c 	.word	0x2000000c

08004680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <pxCurrentTCBConst2>)
 8004682:	6819      	ldr	r1, [r3, #0]
 8004684:	6808      	ldr	r0, [r1, #0]
 8004686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468a:	f380 8809 	msr	PSP, r0
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f04f 0000 	mov.w	r0, #0
 8004696:	f380 8811 	msr	BASEPRI, r0
 800469a:	4770      	bx	lr
 800469c:	f3af 8000 	nop.w

080046a0 <pxCurrentTCBConst2>:
 80046a0:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop

080046a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80046a8:	4808      	ldr	r0, [pc, #32]	; (80046cc <prvPortStartFirstTask+0x24>)
 80046aa:	6800      	ldr	r0, [r0, #0]
 80046ac:	6800      	ldr	r0, [r0, #0]
 80046ae:	f380 8808 	msr	MSP, r0
 80046b2:	f04f 0000 	mov.w	r0, #0
 80046b6:	f380 8814 	msr	CONTROL, r0
 80046ba:	b662      	cpsie	i
 80046bc:	b661      	cpsie	f
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	df00      	svc	0
 80046c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046ca:	bf00      	nop
 80046cc:	e000ed08 	.word	0xe000ed08

080046d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046d6:	4b46      	ldr	r3, [pc, #280]	; (80047f0 <xPortStartScheduler+0x120>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a46      	ldr	r2, [pc, #280]	; (80047f4 <xPortStartScheduler+0x124>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10a      	bne.n	80046f6 <xPortStartScheduler+0x26>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	613b      	str	r3, [r7, #16]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046f6:	4b3e      	ldr	r3, [pc, #248]	; (80047f0 <xPortStartScheduler+0x120>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a3f      	ldr	r2, [pc, #252]	; (80047f8 <xPortStartScheduler+0x128>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d10a      	bne.n	8004716 <xPortStartScheduler+0x46>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	60fb      	str	r3, [r7, #12]
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004716:	4b39      	ldr	r3, [pc, #228]	; (80047fc <xPortStartScheduler+0x12c>)
 8004718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	22ff      	movs	r2, #255	; 0xff
 8004726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004738:	b2da      	uxtb	r2, r3
 800473a:	4b31      	ldr	r3, [pc, #196]	; (8004800 <xPortStartScheduler+0x130>)
 800473c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800473e:	4b31      	ldr	r3, [pc, #196]	; (8004804 <xPortStartScheduler+0x134>)
 8004740:	2207      	movs	r2, #7
 8004742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004744:	e009      	b.n	800475a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004746:	4b2f      	ldr	r3, [pc, #188]	; (8004804 <xPortStartScheduler+0x134>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3b01      	subs	r3, #1
 800474c:	4a2d      	ldr	r2, [pc, #180]	; (8004804 <xPortStartScheduler+0x134>)
 800474e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	b2db      	uxtb	r3, r3
 8004758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800475a:	78fb      	ldrb	r3, [r7, #3]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b80      	cmp	r3, #128	; 0x80
 8004764:	d0ef      	beq.n	8004746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004766:	4b27      	ldr	r3, [pc, #156]	; (8004804 <xPortStartScheduler+0x134>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f1c3 0307 	rsb	r3, r3, #7
 800476e:	2b04      	cmp	r3, #4
 8004770:	d00a      	beq.n	8004788 <xPortStartScheduler+0xb8>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	60bb      	str	r3, [r7, #8]
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004788:	4b1e      	ldr	r3, [pc, #120]	; (8004804 <xPortStartScheduler+0x134>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <xPortStartScheduler+0x134>)
 8004790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <xPortStartScheduler+0x134>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800479a:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <xPortStartScheduler+0x134>)
 800479c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047a6:	4b18      	ldr	r3, [pc, #96]	; (8004808 <xPortStartScheduler+0x138>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a17      	ldr	r2, [pc, #92]	; (8004808 <xPortStartScheduler+0x138>)
 80047ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <xPortStartScheduler+0x138>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a14      	ldr	r2, [pc, #80]	; (8004808 <xPortStartScheduler+0x138>)
 80047b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047be:	f000 f8dd 	bl	800497c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047c2:	4b12      	ldr	r3, [pc, #72]	; (800480c <xPortStartScheduler+0x13c>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047c8:	f000 f8fc 	bl	80049c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047cc:	4b10      	ldr	r3, [pc, #64]	; (8004810 <xPortStartScheduler+0x140>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a0f      	ldr	r2, [pc, #60]	; (8004810 <xPortStartScheduler+0x140>)
 80047d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047d8:	f7ff ff66 	bl	80046a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047dc:	f7ff f84c 	bl	8003878 <vTaskSwitchContext>
	prvTaskExitError();
 80047e0:	f7ff ff22 	bl	8004628 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	e000ed00 	.word	0xe000ed00
 80047f4:	410fc271 	.word	0x410fc271
 80047f8:	410fc270 	.word	0x410fc270
 80047fc:	e000e400 	.word	0xe000e400
 8004800:	20000f14 	.word	0x20000f14
 8004804:	20000f18 	.word	0x20000f18
 8004808:	e000ed20 	.word	0xe000ed20
 800480c:	2000000c 	.word	0x2000000c
 8004810:	e000ef34 	.word	0xe000ef34

08004814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	607b      	str	r3, [r7, #4]
}
 800482c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <vPortEnterCritical+0x58>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3301      	adds	r3, #1
 8004834:	4a0d      	ldr	r2, [pc, #52]	; (800486c <vPortEnterCritical+0x58>)
 8004836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <vPortEnterCritical+0x58>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d10f      	bne.n	8004860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <vPortEnterCritical+0x5c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <vPortEnterCritical+0x4c>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	603b      	str	r3, [r7, #0]
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <vPortEnterCritical+0x4a>
	}
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	2000000c 	.word	0x2000000c
 8004870:	e000ed04 	.word	0xe000ed04

08004874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800487a:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <vPortExitCritical+0x50>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <vPortExitCritical+0x24>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	607b      	str	r3, [r7, #4]
}
 8004894:	bf00      	nop
 8004896:	e7fe      	b.n	8004896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004898:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <vPortExitCritical+0x50>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3b01      	subs	r3, #1
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <vPortExitCritical+0x50>)
 80048a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048a2:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <vPortExitCritical+0x50>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d105      	bne.n	80048b6 <vPortExitCritical+0x42>
 80048aa:	2300      	movs	r3, #0
 80048ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	f383 8811 	msr	BASEPRI, r3
}
 80048b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	2000000c 	.word	0x2000000c
	...

080048d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048d0:	f3ef 8009 	mrs	r0, PSP
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	4b15      	ldr	r3, [pc, #84]	; (8004930 <pxCurrentTCBConst>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	f01e 0f10 	tst.w	lr, #16
 80048e0:	bf08      	it	eq
 80048e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ea:	6010      	str	r0, [r2, #0]
 80048ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048f4:	f380 8811 	msr	BASEPRI, r0
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f7fe ffba 	bl	8003878 <vTaskSwitchContext>
 8004904:	f04f 0000 	mov.w	r0, #0
 8004908:	f380 8811 	msr	BASEPRI, r0
 800490c:	bc09      	pop	{r0, r3}
 800490e:	6819      	ldr	r1, [r3, #0]
 8004910:	6808      	ldr	r0, [r1, #0]
 8004912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004916:	f01e 0f10 	tst.w	lr, #16
 800491a:	bf08      	it	eq
 800491c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004920:	f380 8809 	msr	PSP, r0
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	f3af 8000 	nop.w

08004930 <pxCurrentTCBConst>:
 8004930:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop

08004938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	607b      	str	r3, [r7, #4]
}
 8004950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004952:	f7fe fed7 	bl	8003704 <xTaskIncrementTick>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800495c:	4b06      	ldr	r3, [pc, #24]	; (8004978 <xPortSysTickHandler+0x40>)
 800495e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	2300      	movs	r3, #0
 8004966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f383 8811 	msr	BASEPRI, r3
}
 800496e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	e000ed04 	.word	0xe000ed04

0800497c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <vPortSetupTimerInterrupt+0x34>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <vPortSetupTimerInterrupt+0x38>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800498c:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <vPortSetupTimerInterrupt+0x3c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <vPortSetupTimerInterrupt+0x40>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	099b      	lsrs	r3, r3, #6
 8004998:	4a09      	ldr	r2, [pc, #36]	; (80049c0 <vPortSetupTimerInterrupt+0x44>)
 800499a:	3b01      	subs	r3, #1
 800499c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800499e:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <vPortSetupTimerInterrupt+0x34>)
 80049a0:	2207      	movs	r2, #7
 80049a2:	601a      	str	r2, [r3, #0]
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	e000e010 	.word	0xe000e010
 80049b4:	e000e018 	.word	0xe000e018
 80049b8:	20000000 	.word	0x20000000
 80049bc:	10624dd3 	.word	0x10624dd3
 80049c0:	e000e014 	.word	0xe000e014

080049c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049d4 <vPortEnableVFP+0x10>
 80049c8:	6801      	ldr	r1, [r0, #0]
 80049ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049ce:	6001      	str	r1, [r0, #0]
 80049d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049d2:	bf00      	nop
 80049d4:	e000ed88 	.word	0xe000ed88

080049d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049de:	f3ef 8305 	mrs	r3, IPSR
 80049e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b0f      	cmp	r3, #15
 80049e8:	d914      	bls.n	8004a14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049ea:	4a17      	ldr	r2, [pc, #92]	; (8004a48 <vPortValidateInterruptPriority+0x70>)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4413      	add	r3, r2
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049f4:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <vPortValidateInterruptPriority+0x74>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	7afa      	ldrb	r2, [r7, #11]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d20a      	bcs.n	8004a14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	607b      	str	r3, [r7, #4]
}
 8004a10:	bf00      	nop
 8004a12:	e7fe      	b.n	8004a12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a14:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <vPortValidateInterruptPriority+0x78>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a1c:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <vPortValidateInterruptPriority+0x7c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d90a      	bls.n	8004a3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	603b      	str	r3, [r7, #0]
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <vPortValidateInterruptPriority+0x60>
	}
 8004a3a:	bf00      	nop
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	e000e3f0 	.word	0xe000e3f0
 8004a4c:	20000f14 	.word	0x20000f14
 8004a50:	e000ed0c 	.word	0xe000ed0c
 8004a54:	20000f18 	.word	0x20000f18

08004a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a64:	f7fe fd92 	bl	800358c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a68:	4b5b      	ldr	r3, [pc, #364]	; (8004bd8 <pvPortMalloc+0x180>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a70:	f000 f920 	bl	8004cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a74:	4b59      	ldr	r3, [pc, #356]	; (8004bdc <pvPortMalloc+0x184>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f040 8093 	bne.w	8004ba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01d      	beq.n	8004ac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a88:	2208      	movs	r2, #8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d014      	beq.n	8004ac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f023 0307 	bic.w	r3, r3, #7
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <pvPortMalloc+0x6c>
	__asm volatile
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	617b      	str	r3, [r7, #20]
}
 8004ac0:	bf00      	nop
 8004ac2:	e7fe      	b.n	8004ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d06e      	beq.n	8004ba8 <pvPortMalloc+0x150>
 8004aca:	4b45      	ldr	r3, [pc, #276]	; (8004be0 <pvPortMalloc+0x188>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d869      	bhi.n	8004ba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ad4:	4b43      	ldr	r3, [pc, #268]	; (8004be4 <pvPortMalloc+0x18c>)
 8004ad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ad8:	4b42      	ldr	r3, [pc, #264]	; (8004be4 <pvPortMalloc+0x18c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ade:	e004      	b.n	8004aea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d903      	bls.n	8004afc <pvPortMalloc+0xa4>
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f1      	bne.n	8004ae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004afc:	4b36      	ldr	r3, [pc, #216]	; (8004bd8 <pvPortMalloc+0x180>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d050      	beq.n	8004ba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	4413      	add	r3, r2
 8004b0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	1ad2      	subs	r2, r2, r3
 8004b20:	2308      	movs	r3, #8
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d91f      	bls.n	8004b68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <pvPortMalloc+0xf8>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	613b      	str	r3, [r7, #16]
}
 8004b4c:	bf00      	nop
 8004b4e:	e7fe      	b.n	8004b4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	1ad2      	subs	r2, r2, r3
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b62:	69b8      	ldr	r0, [r7, #24]
 8004b64:	f000 f908 	bl	8004d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b68:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <pvPortMalloc+0x188>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	4a1b      	ldr	r2, [pc, #108]	; (8004be0 <pvPortMalloc+0x188>)
 8004b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <pvPortMalloc+0x188>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <pvPortMalloc+0x190>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d203      	bcs.n	8004b8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b82:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <pvPortMalloc+0x188>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <pvPortMalloc+0x190>)
 8004b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <pvPortMalloc+0x184>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b9e:	4b13      	ldr	r3, [pc, #76]	; (8004bec <pvPortMalloc+0x194>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	4a11      	ldr	r2, [pc, #68]	; (8004bec <pvPortMalloc+0x194>)
 8004ba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ba8:	f7fe fcfe 	bl	80035a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <pvPortMalloc+0x174>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	60fb      	str	r3, [r7, #12]
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <pvPortMalloc+0x172>
	return pvReturn;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3728      	adds	r7, #40	; 0x28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20004b24 	.word	0x20004b24
 8004bdc:	20004b38 	.word	0x20004b38
 8004be0:	20004b28 	.word	0x20004b28
 8004be4:	20004b1c 	.word	0x20004b1c
 8004be8:	20004b2c 	.word	0x20004b2c
 8004bec:	20004b30 	.word	0x20004b30

08004bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d04d      	beq.n	8004c9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c02:	2308      	movs	r3, #8
 8004c04:	425b      	negs	r3, r3
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4413      	add	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <vPortFree+0xb8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <vPortFree+0x44>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	60fb      	str	r3, [r7, #12]
}
 8004c30:	bf00      	nop
 8004c32:	e7fe      	b.n	8004c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <vPortFree+0x62>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	60bb      	str	r3, [r7, #8]
}
 8004c4e:	bf00      	nop
 8004c50:	e7fe      	b.n	8004c50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <vPortFree+0xb8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01e      	beq.n	8004c9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d11a      	bne.n	8004c9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <vPortFree+0xb8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	43db      	mvns	r3, r3
 8004c72:	401a      	ands	r2, r3
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c78:	f7fe fc88 	bl	800358c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <vPortFree+0xbc>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4413      	add	r3, r2
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <vPortFree+0xbc>)
 8004c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c8a:	6938      	ldr	r0, [r7, #16]
 8004c8c:	f000 f874 	bl	8004d78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <vPortFree+0xc0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	4a06      	ldr	r2, [pc, #24]	; (8004cb0 <vPortFree+0xc0>)
 8004c98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c9a:	f7fe fc85 	bl	80035a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c9e:	bf00      	nop
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20004b38 	.word	0x20004b38
 8004cac:	20004b28 	.word	0x20004b28
 8004cb0:	20004b34 	.word	0x20004b34

08004cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cc0:	4b27      	ldr	r3, [pc, #156]	; (8004d60 <prvHeapInit+0xac>)
 8004cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00c      	beq.n	8004ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3307      	adds	r3, #7
 8004cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0307 	bic.w	r3, r3, #7
 8004cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <prvHeapInit+0xac>)
 8004ce4:	4413      	add	r3, r2
 8004ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <prvHeapInit+0xb0>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cf2:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <prvHeapInit+0xb0>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d00:	2208      	movs	r2, #8
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0307 	bic.w	r3, r3, #7
 8004d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <prvHeapInit+0xb4>)
 8004d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <prvHeapInit+0xb4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d1e:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <prvHeapInit+0xb4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	1ad2      	subs	r2, r2, r3
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <prvHeapInit+0xb4>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <prvHeapInit+0xb8>)
 8004d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <prvHeapInit+0xbc>)
 8004d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d4c:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <prvHeapInit+0xc0>)
 8004d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d52:	601a      	str	r2, [r3, #0]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	20000f1c 	.word	0x20000f1c
 8004d64:	20004b1c 	.word	0x20004b1c
 8004d68:	20004b24 	.word	0x20004b24
 8004d6c:	20004b2c 	.word	0x20004b2c
 8004d70:	20004b28 	.word	0x20004b28
 8004d74:	20004b38 	.word	0x20004b38

08004d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d80:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <prvInsertBlockIntoFreeList+0xac>)
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e002      	b.n	8004d8c <prvInsertBlockIntoFreeList+0x14>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d8f7      	bhi.n	8004d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	4413      	add	r3, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d108      	bne.n	8004dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	441a      	add	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d118      	bne.n	8004e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <prvInsertBlockIntoFreeList+0xb0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d00d      	beq.n	8004df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	441a      	add	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	e008      	b.n	8004e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <prvInsertBlockIntoFreeList+0xb0>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	e003      	b.n	8004e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d002      	beq.n	8004e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e16:	bf00      	nop
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20004b1c 	.word	0x20004b1c
 8004e28:	20004b24 	.word	0x20004b24

08004e2c <__errno>:
 8004e2c:	4b01      	ldr	r3, [pc, #4]	; (8004e34 <__errno+0x8>)
 8004e2e:	6818      	ldr	r0, [r3, #0]
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000010 	.word	0x20000010

08004e38 <std>:
 8004e38:	2300      	movs	r3, #0
 8004e3a:	b510      	push	{r4, lr}
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e46:	6083      	str	r3, [r0, #8]
 8004e48:	8181      	strh	r1, [r0, #12]
 8004e4a:	6643      	str	r3, [r0, #100]	; 0x64
 8004e4c:	81c2      	strh	r2, [r0, #14]
 8004e4e:	6183      	str	r3, [r0, #24]
 8004e50:	4619      	mov	r1, r3
 8004e52:	2208      	movs	r2, #8
 8004e54:	305c      	adds	r0, #92	; 0x5c
 8004e56:	f000 f91a 	bl	800508e <memset>
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <std+0x38>)
 8004e5c:	6263      	str	r3, [r4, #36]	; 0x24
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <std+0x3c>)
 8004e60:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <std+0x40>)
 8004e64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e66:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <std+0x44>)
 8004e68:	6224      	str	r4, [r4, #32]
 8004e6a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e6c:	bd10      	pop	{r4, pc}
 8004e6e:	bf00      	nop
 8004e70:	080053d9 	.word	0x080053d9
 8004e74:	080053fb 	.word	0x080053fb
 8004e78:	08005433 	.word	0x08005433
 8004e7c:	08005457 	.word	0x08005457

08004e80 <_cleanup_r>:
 8004e80:	4901      	ldr	r1, [pc, #4]	; (8004e88 <_cleanup_r+0x8>)
 8004e82:	f000 b8af 	b.w	8004fe4 <_fwalk_reent>
 8004e86:	bf00      	nop
 8004e88:	08005731 	.word	0x08005731

08004e8c <__sfmoreglue>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	2268      	movs	r2, #104	; 0x68
 8004e90:	1e4d      	subs	r5, r1, #1
 8004e92:	4355      	muls	r5, r2
 8004e94:	460e      	mov	r6, r1
 8004e96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e9a:	f000 f921 	bl	80050e0 <_malloc_r>
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	b140      	cbz	r0, 8004eb4 <__sfmoreglue+0x28>
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ea8:	300c      	adds	r0, #12
 8004eaa:	60a0      	str	r0, [r4, #8]
 8004eac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004eb0:	f000 f8ed 	bl	800508e <memset>
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}

08004eb8 <__sfp_lock_acquire>:
 8004eb8:	4801      	ldr	r0, [pc, #4]	; (8004ec0 <__sfp_lock_acquire+0x8>)
 8004eba:	f000 b8d8 	b.w	800506e <__retarget_lock_acquire_recursive>
 8004ebe:	bf00      	nop
 8004ec0:	20004b3d 	.word	0x20004b3d

08004ec4 <__sfp_lock_release>:
 8004ec4:	4801      	ldr	r0, [pc, #4]	; (8004ecc <__sfp_lock_release+0x8>)
 8004ec6:	f000 b8d3 	b.w	8005070 <__retarget_lock_release_recursive>
 8004eca:	bf00      	nop
 8004ecc:	20004b3d 	.word	0x20004b3d

08004ed0 <__sinit_lock_acquire>:
 8004ed0:	4801      	ldr	r0, [pc, #4]	; (8004ed8 <__sinit_lock_acquire+0x8>)
 8004ed2:	f000 b8cc 	b.w	800506e <__retarget_lock_acquire_recursive>
 8004ed6:	bf00      	nop
 8004ed8:	20004b3e 	.word	0x20004b3e

08004edc <__sinit_lock_release>:
 8004edc:	4801      	ldr	r0, [pc, #4]	; (8004ee4 <__sinit_lock_release+0x8>)
 8004ede:	f000 b8c7 	b.w	8005070 <__retarget_lock_release_recursive>
 8004ee2:	bf00      	nop
 8004ee4:	20004b3e 	.word	0x20004b3e

08004ee8 <__sinit>:
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	4604      	mov	r4, r0
 8004eec:	f7ff fff0 	bl	8004ed0 <__sinit_lock_acquire>
 8004ef0:	69a3      	ldr	r3, [r4, #24]
 8004ef2:	b11b      	cbz	r3, 8004efc <__sinit+0x14>
 8004ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef8:	f7ff bff0 	b.w	8004edc <__sinit_lock_release>
 8004efc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f00:	6523      	str	r3, [r4, #80]	; 0x50
 8004f02:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <__sinit+0x68>)
 8004f04:	4a13      	ldr	r2, [pc, #76]	; (8004f54 <__sinit+0x6c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f0a:	42a3      	cmp	r3, r4
 8004f0c:	bf04      	itt	eq
 8004f0e:	2301      	moveq	r3, #1
 8004f10:	61a3      	streq	r3, [r4, #24]
 8004f12:	4620      	mov	r0, r4
 8004f14:	f000 f820 	bl	8004f58 <__sfp>
 8004f18:	6060      	str	r0, [r4, #4]
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f000 f81c 	bl	8004f58 <__sfp>
 8004f20:	60a0      	str	r0, [r4, #8]
 8004f22:	4620      	mov	r0, r4
 8004f24:	f000 f818 	bl	8004f58 <__sfp>
 8004f28:	2200      	movs	r2, #0
 8004f2a:	60e0      	str	r0, [r4, #12]
 8004f2c:	2104      	movs	r1, #4
 8004f2e:	6860      	ldr	r0, [r4, #4]
 8004f30:	f7ff ff82 	bl	8004e38 <std>
 8004f34:	68a0      	ldr	r0, [r4, #8]
 8004f36:	2201      	movs	r2, #1
 8004f38:	2109      	movs	r1, #9
 8004f3a:	f7ff ff7d 	bl	8004e38 <std>
 8004f3e:	68e0      	ldr	r0, [r4, #12]
 8004f40:	2202      	movs	r2, #2
 8004f42:	2112      	movs	r1, #18
 8004f44:	f7ff ff78 	bl	8004e38 <std>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	61a3      	str	r3, [r4, #24]
 8004f4c:	e7d2      	b.n	8004ef4 <__sinit+0xc>
 8004f4e:	bf00      	nop
 8004f50:	080060f0 	.word	0x080060f0
 8004f54:	08004e81 	.word	0x08004e81

08004f58 <__sfp>:
 8004f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5a:	4607      	mov	r7, r0
 8004f5c:	f7ff ffac 	bl	8004eb8 <__sfp_lock_acquire>
 8004f60:	4b1e      	ldr	r3, [pc, #120]	; (8004fdc <__sfp+0x84>)
 8004f62:	681e      	ldr	r6, [r3, #0]
 8004f64:	69b3      	ldr	r3, [r6, #24]
 8004f66:	b913      	cbnz	r3, 8004f6e <__sfp+0x16>
 8004f68:	4630      	mov	r0, r6
 8004f6a:	f7ff ffbd 	bl	8004ee8 <__sinit>
 8004f6e:	3648      	adds	r6, #72	; 0x48
 8004f70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	d503      	bpl.n	8004f80 <__sfp+0x28>
 8004f78:	6833      	ldr	r3, [r6, #0]
 8004f7a:	b30b      	cbz	r3, 8004fc0 <__sfp+0x68>
 8004f7c:	6836      	ldr	r6, [r6, #0]
 8004f7e:	e7f7      	b.n	8004f70 <__sfp+0x18>
 8004f80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f84:	b9d5      	cbnz	r5, 8004fbc <__sfp+0x64>
 8004f86:	4b16      	ldr	r3, [pc, #88]	; (8004fe0 <__sfp+0x88>)
 8004f88:	60e3      	str	r3, [r4, #12]
 8004f8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f8e:	6665      	str	r5, [r4, #100]	; 0x64
 8004f90:	f000 f86c 	bl	800506c <__retarget_lock_init_recursive>
 8004f94:	f7ff ff96 	bl	8004ec4 <__sfp_lock_release>
 8004f98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004fa0:	6025      	str	r5, [r4, #0]
 8004fa2:	61a5      	str	r5, [r4, #24]
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fac:	f000 f86f 	bl	800508e <memset>
 8004fb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fb8:	4620      	mov	r0, r4
 8004fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fbc:	3468      	adds	r4, #104	; 0x68
 8004fbe:	e7d9      	b.n	8004f74 <__sfp+0x1c>
 8004fc0:	2104      	movs	r1, #4
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	f7ff ff62 	bl	8004e8c <__sfmoreglue>
 8004fc8:	4604      	mov	r4, r0
 8004fca:	6030      	str	r0, [r6, #0]
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d1d5      	bne.n	8004f7c <__sfp+0x24>
 8004fd0:	f7ff ff78 	bl	8004ec4 <__sfp_lock_release>
 8004fd4:	230c      	movs	r3, #12
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	e7ee      	b.n	8004fb8 <__sfp+0x60>
 8004fda:	bf00      	nop
 8004fdc:	080060f0 	.word	0x080060f0
 8004fe0:	ffff0001 	.word	0xffff0001

08004fe4 <_fwalk_reent>:
 8004fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fe8:	4606      	mov	r6, r0
 8004fea:	4688      	mov	r8, r1
 8004fec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ff0:	2700      	movs	r7, #0
 8004ff2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ff6:	f1b9 0901 	subs.w	r9, r9, #1
 8004ffa:	d505      	bpl.n	8005008 <_fwalk_reent+0x24>
 8004ffc:	6824      	ldr	r4, [r4, #0]
 8004ffe:	2c00      	cmp	r4, #0
 8005000:	d1f7      	bne.n	8004ff2 <_fwalk_reent+0xe>
 8005002:	4638      	mov	r0, r7
 8005004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005008:	89ab      	ldrh	r3, [r5, #12]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d907      	bls.n	800501e <_fwalk_reent+0x3a>
 800500e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005012:	3301      	adds	r3, #1
 8005014:	d003      	beq.n	800501e <_fwalk_reent+0x3a>
 8005016:	4629      	mov	r1, r5
 8005018:	4630      	mov	r0, r6
 800501a:	47c0      	blx	r8
 800501c:	4307      	orrs	r7, r0
 800501e:	3568      	adds	r5, #104	; 0x68
 8005020:	e7e9      	b.n	8004ff6 <_fwalk_reent+0x12>
	...

08005024 <__libc_init_array>:
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	4d0d      	ldr	r5, [pc, #52]	; (800505c <__libc_init_array+0x38>)
 8005028:	4c0d      	ldr	r4, [pc, #52]	; (8005060 <__libc_init_array+0x3c>)
 800502a:	1b64      	subs	r4, r4, r5
 800502c:	10a4      	asrs	r4, r4, #2
 800502e:	2600      	movs	r6, #0
 8005030:	42a6      	cmp	r6, r4
 8005032:	d109      	bne.n	8005048 <__libc_init_array+0x24>
 8005034:	4d0b      	ldr	r5, [pc, #44]	; (8005064 <__libc_init_array+0x40>)
 8005036:	4c0c      	ldr	r4, [pc, #48]	; (8005068 <__libc_init_array+0x44>)
 8005038:	f000 ffa8 	bl	8005f8c <_init>
 800503c:	1b64      	subs	r4, r4, r5
 800503e:	10a4      	asrs	r4, r4, #2
 8005040:	2600      	movs	r6, #0
 8005042:	42a6      	cmp	r6, r4
 8005044:	d105      	bne.n	8005052 <__libc_init_array+0x2e>
 8005046:	bd70      	pop	{r4, r5, r6, pc}
 8005048:	f855 3b04 	ldr.w	r3, [r5], #4
 800504c:	4798      	blx	r3
 800504e:	3601      	adds	r6, #1
 8005050:	e7ee      	b.n	8005030 <__libc_init_array+0xc>
 8005052:	f855 3b04 	ldr.w	r3, [r5], #4
 8005056:	4798      	blx	r3
 8005058:	3601      	adds	r6, #1
 800505a:	e7f2      	b.n	8005042 <__libc_init_array+0x1e>
 800505c:	08006130 	.word	0x08006130
 8005060:	08006130 	.word	0x08006130
 8005064:	08006130 	.word	0x08006130
 8005068:	08006134 	.word	0x08006134

0800506c <__retarget_lock_init_recursive>:
 800506c:	4770      	bx	lr

0800506e <__retarget_lock_acquire_recursive>:
 800506e:	4770      	bx	lr

08005070 <__retarget_lock_release_recursive>:
 8005070:	4770      	bx	lr

08005072 <memcpy>:
 8005072:	440a      	add	r2, r1
 8005074:	4291      	cmp	r1, r2
 8005076:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800507a:	d100      	bne.n	800507e <memcpy+0xc>
 800507c:	4770      	bx	lr
 800507e:	b510      	push	{r4, lr}
 8005080:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005088:	4291      	cmp	r1, r2
 800508a:	d1f9      	bne.n	8005080 <memcpy+0xe>
 800508c:	bd10      	pop	{r4, pc}

0800508e <memset>:
 800508e:	4402      	add	r2, r0
 8005090:	4603      	mov	r3, r0
 8005092:	4293      	cmp	r3, r2
 8005094:	d100      	bne.n	8005098 <memset+0xa>
 8005096:	4770      	bx	lr
 8005098:	f803 1b01 	strb.w	r1, [r3], #1
 800509c:	e7f9      	b.n	8005092 <memset+0x4>
	...

080050a0 <sbrk_aligned>:
 80050a0:	b570      	push	{r4, r5, r6, lr}
 80050a2:	4e0e      	ldr	r6, [pc, #56]	; (80050dc <sbrk_aligned+0x3c>)
 80050a4:	460c      	mov	r4, r1
 80050a6:	6831      	ldr	r1, [r6, #0]
 80050a8:	4605      	mov	r5, r0
 80050aa:	b911      	cbnz	r1, 80050b2 <sbrk_aligned+0x12>
 80050ac:	f000 f984 	bl	80053b8 <_sbrk_r>
 80050b0:	6030      	str	r0, [r6, #0]
 80050b2:	4621      	mov	r1, r4
 80050b4:	4628      	mov	r0, r5
 80050b6:	f000 f97f 	bl	80053b8 <_sbrk_r>
 80050ba:	1c43      	adds	r3, r0, #1
 80050bc:	d00a      	beq.n	80050d4 <sbrk_aligned+0x34>
 80050be:	1cc4      	adds	r4, r0, #3
 80050c0:	f024 0403 	bic.w	r4, r4, #3
 80050c4:	42a0      	cmp	r0, r4
 80050c6:	d007      	beq.n	80050d8 <sbrk_aligned+0x38>
 80050c8:	1a21      	subs	r1, r4, r0
 80050ca:	4628      	mov	r0, r5
 80050cc:	f000 f974 	bl	80053b8 <_sbrk_r>
 80050d0:	3001      	adds	r0, #1
 80050d2:	d101      	bne.n	80050d8 <sbrk_aligned+0x38>
 80050d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80050d8:	4620      	mov	r0, r4
 80050da:	bd70      	pop	{r4, r5, r6, pc}
 80050dc:	20004b44 	.word	0x20004b44

080050e0 <_malloc_r>:
 80050e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e4:	1ccd      	adds	r5, r1, #3
 80050e6:	f025 0503 	bic.w	r5, r5, #3
 80050ea:	3508      	adds	r5, #8
 80050ec:	2d0c      	cmp	r5, #12
 80050ee:	bf38      	it	cc
 80050f0:	250c      	movcc	r5, #12
 80050f2:	2d00      	cmp	r5, #0
 80050f4:	4607      	mov	r7, r0
 80050f6:	db01      	blt.n	80050fc <_malloc_r+0x1c>
 80050f8:	42a9      	cmp	r1, r5
 80050fa:	d905      	bls.n	8005108 <_malloc_r+0x28>
 80050fc:	230c      	movs	r3, #12
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	2600      	movs	r6, #0
 8005102:	4630      	mov	r0, r6
 8005104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005108:	4e2e      	ldr	r6, [pc, #184]	; (80051c4 <_malloc_r+0xe4>)
 800510a:	f000 fbc5 	bl	8005898 <__malloc_lock>
 800510e:	6833      	ldr	r3, [r6, #0]
 8005110:	461c      	mov	r4, r3
 8005112:	bb34      	cbnz	r4, 8005162 <_malloc_r+0x82>
 8005114:	4629      	mov	r1, r5
 8005116:	4638      	mov	r0, r7
 8005118:	f7ff ffc2 	bl	80050a0 <sbrk_aligned>
 800511c:	1c43      	adds	r3, r0, #1
 800511e:	4604      	mov	r4, r0
 8005120:	d14d      	bne.n	80051be <_malloc_r+0xde>
 8005122:	6834      	ldr	r4, [r6, #0]
 8005124:	4626      	mov	r6, r4
 8005126:	2e00      	cmp	r6, #0
 8005128:	d140      	bne.n	80051ac <_malloc_r+0xcc>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	4631      	mov	r1, r6
 800512e:	4638      	mov	r0, r7
 8005130:	eb04 0803 	add.w	r8, r4, r3
 8005134:	f000 f940 	bl	80053b8 <_sbrk_r>
 8005138:	4580      	cmp	r8, r0
 800513a:	d13a      	bne.n	80051b2 <_malloc_r+0xd2>
 800513c:	6821      	ldr	r1, [r4, #0]
 800513e:	3503      	adds	r5, #3
 8005140:	1a6d      	subs	r5, r5, r1
 8005142:	f025 0503 	bic.w	r5, r5, #3
 8005146:	3508      	adds	r5, #8
 8005148:	2d0c      	cmp	r5, #12
 800514a:	bf38      	it	cc
 800514c:	250c      	movcc	r5, #12
 800514e:	4629      	mov	r1, r5
 8005150:	4638      	mov	r0, r7
 8005152:	f7ff ffa5 	bl	80050a0 <sbrk_aligned>
 8005156:	3001      	adds	r0, #1
 8005158:	d02b      	beq.n	80051b2 <_malloc_r+0xd2>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	442b      	add	r3, r5
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	e00e      	b.n	8005180 <_malloc_r+0xa0>
 8005162:	6822      	ldr	r2, [r4, #0]
 8005164:	1b52      	subs	r2, r2, r5
 8005166:	d41e      	bmi.n	80051a6 <_malloc_r+0xc6>
 8005168:	2a0b      	cmp	r2, #11
 800516a:	d916      	bls.n	800519a <_malloc_r+0xba>
 800516c:	1961      	adds	r1, r4, r5
 800516e:	42a3      	cmp	r3, r4
 8005170:	6025      	str	r5, [r4, #0]
 8005172:	bf18      	it	ne
 8005174:	6059      	strne	r1, [r3, #4]
 8005176:	6863      	ldr	r3, [r4, #4]
 8005178:	bf08      	it	eq
 800517a:	6031      	streq	r1, [r6, #0]
 800517c:	5162      	str	r2, [r4, r5]
 800517e:	604b      	str	r3, [r1, #4]
 8005180:	4638      	mov	r0, r7
 8005182:	f104 060b 	add.w	r6, r4, #11
 8005186:	f000 fb8d 	bl	80058a4 <__malloc_unlock>
 800518a:	f026 0607 	bic.w	r6, r6, #7
 800518e:	1d23      	adds	r3, r4, #4
 8005190:	1af2      	subs	r2, r6, r3
 8005192:	d0b6      	beq.n	8005102 <_malloc_r+0x22>
 8005194:	1b9b      	subs	r3, r3, r6
 8005196:	50a3      	str	r3, [r4, r2]
 8005198:	e7b3      	b.n	8005102 <_malloc_r+0x22>
 800519a:	6862      	ldr	r2, [r4, #4]
 800519c:	42a3      	cmp	r3, r4
 800519e:	bf0c      	ite	eq
 80051a0:	6032      	streq	r2, [r6, #0]
 80051a2:	605a      	strne	r2, [r3, #4]
 80051a4:	e7ec      	b.n	8005180 <_malloc_r+0xa0>
 80051a6:	4623      	mov	r3, r4
 80051a8:	6864      	ldr	r4, [r4, #4]
 80051aa:	e7b2      	b.n	8005112 <_malloc_r+0x32>
 80051ac:	4634      	mov	r4, r6
 80051ae:	6876      	ldr	r6, [r6, #4]
 80051b0:	e7b9      	b.n	8005126 <_malloc_r+0x46>
 80051b2:	230c      	movs	r3, #12
 80051b4:	603b      	str	r3, [r7, #0]
 80051b6:	4638      	mov	r0, r7
 80051b8:	f000 fb74 	bl	80058a4 <__malloc_unlock>
 80051bc:	e7a1      	b.n	8005102 <_malloc_r+0x22>
 80051be:	6025      	str	r5, [r4, #0]
 80051c0:	e7de      	b.n	8005180 <_malloc_r+0xa0>
 80051c2:	bf00      	nop
 80051c4:	20004b40 	.word	0x20004b40

080051c8 <iprintf>:
 80051c8:	b40f      	push	{r0, r1, r2, r3}
 80051ca:	4b0a      	ldr	r3, [pc, #40]	; (80051f4 <iprintf+0x2c>)
 80051cc:	b513      	push	{r0, r1, r4, lr}
 80051ce:	681c      	ldr	r4, [r3, #0]
 80051d0:	b124      	cbz	r4, 80051dc <iprintf+0x14>
 80051d2:	69a3      	ldr	r3, [r4, #24]
 80051d4:	b913      	cbnz	r3, 80051dc <iprintf+0x14>
 80051d6:	4620      	mov	r0, r4
 80051d8:	f7ff fe86 	bl	8004ee8 <__sinit>
 80051dc:	ab05      	add	r3, sp, #20
 80051de:	9a04      	ldr	r2, [sp, #16]
 80051e0:	68a1      	ldr	r1, [r4, #8]
 80051e2:	9301      	str	r3, [sp, #4]
 80051e4:	4620      	mov	r0, r4
 80051e6:	f000 fbd9 	bl	800599c <_vfiprintf_r>
 80051ea:	b002      	add	sp, #8
 80051ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051f0:	b004      	add	sp, #16
 80051f2:	4770      	bx	lr
 80051f4:	20000010 	.word	0x20000010

080051f8 <_puts_r>:
 80051f8:	b570      	push	{r4, r5, r6, lr}
 80051fa:	460e      	mov	r6, r1
 80051fc:	4605      	mov	r5, r0
 80051fe:	b118      	cbz	r0, 8005208 <_puts_r+0x10>
 8005200:	6983      	ldr	r3, [r0, #24]
 8005202:	b90b      	cbnz	r3, 8005208 <_puts_r+0x10>
 8005204:	f7ff fe70 	bl	8004ee8 <__sinit>
 8005208:	69ab      	ldr	r3, [r5, #24]
 800520a:	68ac      	ldr	r4, [r5, #8]
 800520c:	b913      	cbnz	r3, 8005214 <_puts_r+0x1c>
 800520e:	4628      	mov	r0, r5
 8005210:	f7ff fe6a 	bl	8004ee8 <__sinit>
 8005214:	4b2c      	ldr	r3, [pc, #176]	; (80052c8 <_puts_r+0xd0>)
 8005216:	429c      	cmp	r4, r3
 8005218:	d120      	bne.n	800525c <_puts_r+0x64>
 800521a:	686c      	ldr	r4, [r5, #4]
 800521c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800521e:	07db      	lsls	r3, r3, #31
 8005220:	d405      	bmi.n	800522e <_puts_r+0x36>
 8005222:	89a3      	ldrh	r3, [r4, #12]
 8005224:	0598      	lsls	r0, r3, #22
 8005226:	d402      	bmi.n	800522e <_puts_r+0x36>
 8005228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800522a:	f7ff ff20 	bl	800506e <__retarget_lock_acquire_recursive>
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	0719      	lsls	r1, r3, #28
 8005232:	d51d      	bpl.n	8005270 <_puts_r+0x78>
 8005234:	6923      	ldr	r3, [r4, #16]
 8005236:	b1db      	cbz	r3, 8005270 <_puts_r+0x78>
 8005238:	3e01      	subs	r6, #1
 800523a:	68a3      	ldr	r3, [r4, #8]
 800523c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005240:	3b01      	subs	r3, #1
 8005242:	60a3      	str	r3, [r4, #8]
 8005244:	bb39      	cbnz	r1, 8005296 <_puts_r+0x9e>
 8005246:	2b00      	cmp	r3, #0
 8005248:	da38      	bge.n	80052bc <_puts_r+0xc4>
 800524a:	4622      	mov	r2, r4
 800524c:	210a      	movs	r1, #10
 800524e:	4628      	mov	r0, r5
 8005250:	f000 f906 	bl	8005460 <__swbuf_r>
 8005254:	3001      	adds	r0, #1
 8005256:	d011      	beq.n	800527c <_puts_r+0x84>
 8005258:	250a      	movs	r5, #10
 800525a:	e011      	b.n	8005280 <_puts_r+0x88>
 800525c:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <_puts_r+0xd4>)
 800525e:	429c      	cmp	r4, r3
 8005260:	d101      	bne.n	8005266 <_puts_r+0x6e>
 8005262:	68ac      	ldr	r4, [r5, #8]
 8005264:	e7da      	b.n	800521c <_puts_r+0x24>
 8005266:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <_puts_r+0xd8>)
 8005268:	429c      	cmp	r4, r3
 800526a:	bf08      	it	eq
 800526c:	68ec      	ldreq	r4, [r5, #12]
 800526e:	e7d5      	b.n	800521c <_puts_r+0x24>
 8005270:	4621      	mov	r1, r4
 8005272:	4628      	mov	r0, r5
 8005274:	f000 f958 	bl	8005528 <__swsetup_r>
 8005278:	2800      	cmp	r0, #0
 800527a:	d0dd      	beq.n	8005238 <_puts_r+0x40>
 800527c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005280:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005282:	07da      	lsls	r2, r3, #31
 8005284:	d405      	bmi.n	8005292 <_puts_r+0x9a>
 8005286:	89a3      	ldrh	r3, [r4, #12]
 8005288:	059b      	lsls	r3, r3, #22
 800528a:	d402      	bmi.n	8005292 <_puts_r+0x9a>
 800528c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800528e:	f7ff feef 	bl	8005070 <__retarget_lock_release_recursive>
 8005292:	4628      	mov	r0, r5
 8005294:	bd70      	pop	{r4, r5, r6, pc}
 8005296:	2b00      	cmp	r3, #0
 8005298:	da04      	bge.n	80052a4 <_puts_r+0xac>
 800529a:	69a2      	ldr	r2, [r4, #24]
 800529c:	429a      	cmp	r2, r3
 800529e:	dc06      	bgt.n	80052ae <_puts_r+0xb6>
 80052a0:	290a      	cmp	r1, #10
 80052a2:	d004      	beq.n	80052ae <_puts_r+0xb6>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	6022      	str	r2, [r4, #0]
 80052aa:	7019      	strb	r1, [r3, #0]
 80052ac:	e7c5      	b.n	800523a <_puts_r+0x42>
 80052ae:	4622      	mov	r2, r4
 80052b0:	4628      	mov	r0, r5
 80052b2:	f000 f8d5 	bl	8005460 <__swbuf_r>
 80052b6:	3001      	adds	r0, #1
 80052b8:	d1bf      	bne.n	800523a <_puts_r+0x42>
 80052ba:	e7df      	b.n	800527c <_puts_r+0x84>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	250a      	movs	r5, #10
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	6022      	str	r2, [r4, #0]
 80052c4:	701d      	strb	r5, [r3, #0]
 80052c6:	e7db      	b.n	8005280 <_puts_r+0x88>
 80052c8:	080060b0 	.word	0x080060b0
 80052cc:	080060d0 	.word	0x080060d0
 80052d0:	08006090 	.word	0x08006090

080052d4 <puts>:
 80052d4:	4b02      	ldr	r3, [pc, #8]	; (80052e0 <puts+0xc>)
 80052d6:	4601      	mov	r1, r0
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	f7ff bf8d 	b.w	80051f8 <_puts_r>
 80052de:	bf00      	nop
 80052e0:	20000010 	.word	0x20000010

080052e4 <cleanup_glue>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	460c      	mov	r4, r1
 80052e8:	6809      	ldr	r1, [r1, #0]
 80052ea:	4605      	mov	r5, r0
 80052ec:	b109      	cbz	r1, 80052f2 <cleanup_glue+0xe>
 80052ee:	f7ff fff9 	bl	80052e4 <cleanup_glue>
 80052f2:	4621      	mov	r1, r4
 80052f4:	4628      	mov	r0, r5
 80052f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052fa:	f000 bad9 	b.w	80058b0 <_free_r>
	...

08005300 <_reclaim_reent>:
 8005300:	4b2c      	ldr	r3, [pc, #176]	; (80053b4 <_reclaim_reent+0xb4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4283      	cmp	r3, r0
 8005306:	b570      	push	{r4, r5, r6, lr}
 8005308:	4604      	mov	r4, r0
 800530a:	d051      	beq.n	80053b0 <_reclaim_reent+0xb0>
 800530c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800530e:	b143      	cbz	r3, 8005322 <_reclaim_reent+0x22>
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d14a      	bne.n	80053ac <_reclaim_reent+0xac>
 8005316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005318:	6819      	ldr	r1, [r3, #0]
 800531a:	b111      	cbz	r1, 8005322 <_reclaim_reent+0x22>
 800531c:	4620      	mov	r0, r4
 800531e:	f000 fac7 	bl	80058b0 <_free_r>
 8005322:	6961      	ldr	r1, [r4, #20]
 8005324:	b111      	cbz	r1, 800532c <_reclaim_reent+0x2c>
 8005326:	4620      	mov	r0, r4
 8005328:	f000 fac2 	bl	80058b0 <_free_r>
 800532c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800532e:	b111      	cbz	r1, 8005336 <_reclaim_reent+0x36>
 8005330:	4620      	mov	r0, r4
 8005332:	f000 fabd 	bl	80058b0 <_free_r>
 8005336:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005338:	b111      	cbz	r1, 8005340 <_reclaim_reent+0x40>
 800533a:	4620      	mov	r0, r4
 800533c:	f000 fab8 	bl	80058b0 <_free_r>
 8005340:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005342:	b111      	cbz	r1, 800534a <_reclaim_reent+0x4a>
 8005344:	4620      	mov	r0, r4
 8005346:	f000 fab3 	bl	80058b0 <_free_r>
 800534a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800534c:	b111      	cbz	r1, 8005354 <_reclaim_reent+0x54>
 800534e:	4620      	mov	r0, r4
 8005350:	f000 faae 	bl	80058b0 <_free_r>
 8005354:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005356:	b111      	cbz	r1, 800535e <_reclaim_reent+0x5e>
 8005358:	4620      	mov	r0, r4
 800535a:	f000 faa9 	bl	80058b0 <_free_r>
 800535e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005360:	b111      	cbz	r1, 8005368 <_reclaim_reent+0x68>
 8005362:	4620      	mov	r0, r4
 8005364:	f000 faa4 	bl	80058b0 <_free_r>
 8005368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800536a:	b111      	cbz	r1, 8005372 <_reclaim_reent+0x72>
 800536c:	4620      	mov	r0, r4
 800536e:	f000 fa9f 	bl	80058b0 <_free_r>
 8005372:	69a3      	ldr	r3, [r4, #24]
 8005374:	b1e3      	cbz	r3, 80053b0 <_reclaim_reent+0xb0>
 8005376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005378:	4620      	mov	r0, r4
 800537a:	4798      	blx	r3
 800537c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800537e:	b1b9      	cbz	r1, 80053b0 <_reclaim_reent+0xb0>
 8005380:	4620      	mov	r0, r4
 8005382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005386:	f7ff bfad 	b.w	80052e4 <cleanup_glue>
 800538a:	5949      	ldr	r1, [r1, r5]
 800538c:	b941      	cbnz	r1, 80053a0 <_reclaim_reent+0xa0>
 800538e:	3504      	adds	r5, #4
 8005390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005392:	2d80      	cmp	r5, #128	; 0x80
 8005394:	68d9      	ldr	r1, [r3, #12]
 8005396:	d1f8      	bne.n	800538a <_reclaim_reent+0x8a>
 8005398:	4620      	mov	r0, r4
 800539a:	f000 fa89 	bl	80058b0 <_free_r>
 800539e:	e7ba      	b.n	8005316 <_reclaim_reent+0x16>
 80053a0:	680e      	ldr	r6, [r1, #0]
 80053a2:	4620      	mov	r0, r4
 80053a4:	f000 fa84 	bl	80058b0 <_free_r>
 80053a8:	4631      	mov	r1, r6
 80053aa:	e7ef      	b.n	800538c <_reclaim_reent+0x8c>
 80053ac:	2500      	movs	r5, #0
 80053ae:	e7ef      	b.n	8005390 <_reclaim_reent+0x90>
 80053b0:	bd70      	pop	{r4, r5, r6, pc}
 80053b2:	bf00      	nop
 80053b4:	20000010 	.word	0x20000010

080053b8 <_sbrk_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4d06      	ldr	r5, [pc, #24]	; (80053d4 <_sbrk_r+0x1c>)
 80053bc:	2300      	movs	r3, #0
 80053be:	4604      	mov	r4, r0
 80053c0:	4608      	mov	r0, r1
 80053c2:	602b      	str	r3, [r5, #0]
 80053c4:	f7fb fbb6 	bl	8000b34 <_sbrk>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d102      	bne.n	80053d2 <_sbrk_r+0x1a>
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	b103      	cbz	r3, 80053d2 <_sbrk_r+0x1a>
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	bd38      	pop	{r3, r4, r5, pc}
 80053d4:	20004b48 	.word	0x20004b48

080053d8 <__sread>:
 80053d8:	b510      	push	{r4, lr}
 80053da:	460c      	mov	r4, r1
 80053dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e0:	f000 fda0 	bl	8005f24 <_read_r>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	bfab      	itete	ge
 80053e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053ea:	89a3      	ldrhlt	r3, [r4, #12]
 80053ec:	181b      	addge	r3, r3, r0
 80053ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053f2:	bfac      	ite	ge
 80053f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80053f6:	81a3      	strhlt	r3, [r4, #12]
 80053f8:	bd10      	pop	{r4, pc}

080053fa <__swrite>:
 80053fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053fe:	461f      	mov	r7, r3
 8005400:	898b      	ldrh	r3, [r1, #12]
 8005402:	05db      	lsls	r3, r3, #23
 8005404:	4605      	mov	r5, r0
 8005406:	460c      	mov	r4, r1
 8005408:	4616      	mov	r6, r2
 800540a:	d505      	bpl.n	8005418 <__swrite+0x1e>
 800540c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005410:	2302      	movs	r3, #2
 8005412:	2200      	movs	r2, #0
 8005414:	f000 f9c8 	bl	80057a8 <_lseek_r>
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800541e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005422:	81a3      	strh	r3, [r4, #12]
 8005424:	4632      	mov	r2, r6
 8005426:	463b      	mov	r3, r7
 8005428:	4628      	mov	r0, r5
 800542a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800542e:	f000 b869 	b.w	8005504 <_write_r>

08005432 <__sseek>:
 8005432:	b510      	push	{r4, lr}
 8005434:	460c      	mov	r4, r1
 8005436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543a:	f000 f9b5 	bl	80057a8 <_lseek_r>
 800543e:	1c43      	adds	r3, r0, #1
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	bf15      	itete	ne
 8005444:	6560      	strne	r0, [r4, #84]	; 0x54
 8005446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800544a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800544e:	81a3      	strheq	r3, [r4, #12]
 8005450:	bf18      	it	ne
 8005452:	81a3      	strhne	r3, [r4, #12]
 8005454:	bd10      	pop	{r4, pc}

08005456 <__sclose>:
 8005456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545a:	f000 b8d3 	b.w	8005604 <_close_r>
	...

08005460 <__swbuf_r>:
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	460e      	mov	r6, r1
 8005464:	4614      	mov	r4, r2
 8005466:	4605      	mov	r5, r0
 8005468:	b118      	cbz	r0, 8005472 <__swbuf_r+0x12>
 800546a:	6983      	ldr	r3, [r0, #24]
 800546c:	b90b      	cbnz	r3, 8005472 <__swbuf_r+0x12>
 800546e:	f7ff fd3b 	bl	8004ee8 <__sinit>
 8005472:	4b21      	ldr	r3, [pc, #132]	; (80054f8 <__swbuf_r+0x98>)
 8005474:	429c      	cmp	r4, r3
 8005476:	d12b      	bne.n	80054d0 <__swbuf_r+0x70>
 8005478:	686c      	ldr	r4, [r5, #4]
 800547a:	69a3      	ldr	r3, [r4, #24]
 800547c:	60a3      	str	r3, [r4, #8]
 800547e:	89a3      	ldrh	r3, [r4, #12]
 8005480:	071a      	lsls	r2, r3, #28
 8005482:	d52f      	bpl.n	80054e4 <__swbuf_r+0x84>
 8005484:	6923      	ldr	r3, [r4, #16]
 8005486:	b36b      	cbz	r3, 80054e4 <__swbuf_r+0x84>
 8005488:	6923      	ldr	r3, [r4, #16]
 800548a:	6820      	ldr	r0, [r4, #0]
 800548c:	1ac0      	subs	r0, r0, r3
 800548e:	6963      	ldr	r3, [r4, #20]
 8005490:	b2f6      	uxtb	r6, r6
 8005492:	4283      	cmp	r3, r0
 8005494:	4637      	mov	r7, r6
 8005496:	dc04      	bgt.n	80054a2 <__swbuf_r+0x42>
 8005498:	4621      	mov	r1, r4
 800549a:	4628      	mov	r0, r5
 800549c:	f000 f948 	bl	8005730 <_fflush_r>
 80054a0:	bb30      	cbnz	r0, 80054f0 <__swbuf_r+0x90>
 80054a2:	68a3      	ldr	r3, [r4, #8]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	60a3      	str	r3, [r4, #8]
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	6022      	str	r2, [r4, #0]
 80054ae:	701e      	strb	r6, [r3, #0]
 80054b0:	6963      	ldr	r3, [r4, #20]
 80054b2:	3001      	adds	r0, #1
 80054b4:	4283      	cmp	r3, r0
 80054b6:	d004      	beq.n	80054c2 <__swbuf_r+0x62>
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	07db      	lsls	r3, r3, #31
 80054bc:	d506      	bpl.n	80054cc <__swbuf_r+0x6c>
 80054be:	2e0a      	cmp	r6, #10
 80054c0:	d104      	bne.n	80054cc <__swbuf_r+0x6c>
 80054c2:	4621      	mov	r1, r4
 80054c4:	4628      	mov	r0, r5
 80054c6:	f000 f933 	bl	8005730 <_fflush_r>
 80054ca:	b988      	cbnz	r0, 80054f0 <__swbuf_r+0x90>
 80054cc:	4638      	mov	r0, r7
 80054ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054d0:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <__swbuf_r+0x9c>)
 80054d2:	429c      	cmp	r4, r3
 80054d4:	d101      	bne.n	80054da <__swbuf_r+0x7a>
 80054d6:	68ac      	ldr	r4, [r5, #8]
 80054d8:	e7cf      	b.n	800547a <__swbuf_r+0x1a>
 80054da:	4b09      	ldr	r3, [pc, #36]	; (8005500 <__swbuf_r+0xa0>)
 80054dc:	429c      	cmp	r4, r3
 80054de:	bf08      	it	eq
 80054e0:	68ec      	ldreq	r4, [r5, #12]
 80054e2:	e7ca      	b.n	800547a <__swbuf_r+0x1a>
 80054e4:	4621      	mov	r1, r4
 80054e6:	4628      	mov	r0, r5
 80054e8:	f000 f81e 	bl	8005528 <__swsetup_r>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d0cb      	beq.n	8005488 <__swbuf_r+0x28>
 80054f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80054f4:	e7ea      	b.n	80054cc <__swbuf_r+0x6c>
 80054f6:	bf00      	nop
 80054f8:	080060b0 	.word	0x080060b0
 80054fc:	080060d0 	.word	0x080060d0
 8005500:	08006090 	.word	0x08006090

08005504 <_write_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4d07      	ldr	r5, [pc, #28]	; (8005524 <_write_r+0x20>)
 8005508:	4604      	mov	r4, r0
 800550a:	4608      	mov	r0, r1
 800550c:	4611      	mov	r1, r2
 800550e:	2200      	movs	r2, #0
 8005510:	602a      	str	r2, [r5, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	f7fb fabd 	bl	8000a92 <_write>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d102      	bne.n	8005522 <_write_r+0x1e>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	b103      	cbz	r3, 8005522 <_write_r+0x1e>
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	20004b48 	.word	0x20004b48

08005528 <__swsetup_r>:
 8005528:	4b32      	ldr	r3, [pc, #200]	; (80055f4 <__swsetup_r+0xcc>)
 800552a:	b570      	push	{r4, r5, r6, lr}
 800552c:	681d      	ldr	r5, [r3, #0]
 800552e:	4606      	mov	r6, r0
 8005530:	460c      	mov	r4, r1
 8005532:	b125      	cbz	r5, 800553e <__swsetup_r+0x16>
 8005534:	69ab      	ldr	r3, [r5, #24]
 8005536:	b913      	cbnz	r3, 800553e <__swsetup_r+0x16>
 8005538:	4628      	mov	r0, r5
 800553a:	f7ff fcd5 	bl	8004ee8 <__sinit>
 800553e:	4b2e      	ldr	r3, [pc, #184]	; (80055f8 <__swsetup_r+0xd0>)
 8005540:	429c      	cmp	r4, r3
 8005542:	d10f      	bne.n	8005564 <__swsetup_r+0x3c>
 8005544:	686c      	ldr	r4, [r5, #4]
 8005546:	89a3      	ldrh	r3, [r4, #12]
 8005548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800554c:	0719      	lsls	r1, r3, #28
 800554e:	d42c      	bmi.n	80055aa <__swsetup_r+0x82>
 8005550:	06dd      	lsls	r5, r3, #27
 8005552:	d411      	bmi.n	8005578 <__swsetup_r+0x50>
 8005554:	2309      	movs	r3, #9
 8005556:	6033      	str	r3, [r6, #0]
 8005558:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800555c:	81a3      	strh	r3, [r4, #12]
 800555e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005562:	e03e      	b.n	80055e2 <__swsetup_r+0xba>
 8005564:	4b25      	ldr	r3, [pc, #148]	; (80055fc <__swsetup_r+0xd4>)
 8005566:	429c      	cmp	r4, r3
 8005568:	d101      	bne.n	800556e <__swsetup_r+0x46>
 800556a:	68ac      	ldr	r4, [r5, #8]
 800556c:	e7eb      	b.n	8005546 <__swsetup_r+0x1e>
 800556e:	4b24      	ldr	r3, [pc, #144]	; (8005600 <__swsetup_r+0xd8>)
 8005570:	429c      	cmp	r4, r3
 8005572:	bf08      	it	eq
 8005574:	68ec      	ldreq	r4, [r5, #12]
 8005576:	e7e6      	b.n	8005546 <__swsetup_r+0x1e>
 8005578:	0758      	lsls	r0, r3, #29
 800557a:	d512      	bpl.n	80055a2 <__swsetup_r+0x7a>
 800557c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800557e:	b141      	cbz	r1, 8005592 <__swsetup_r+0x6a>
 8005580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005584:	4299      	cmp	r1, r3
 8005586:	d002      	beq.n	800558e <__swsetup_r+0x66>
 8005588:	4630      	mov	r0, r6
 800558a:	f000 f991 	bl	80058b0 <_free_r>
 800558e:	2300      	movs	r3, #0
 8005590:	6363      	str	r3, [r4, #52]	; 0x34
 8005592:	89a3      	ldrh	r3, [r4, #12]
 8005594:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	2300      	movs	r3, #0
 800559c:	6063      	str	r3, [r4, #4]
 800559e:	6923      	ldr	r3, [r4, #16]
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	89a3      	ldrh	r3, [r4, #12]
 80055a4:	f043 0308 	orr.w	r3, r3, #8
 80055a8:	81a3      	strh	r3, [r4, #12]
 80055aa:	6923      	ldr	r3, [r4, #16]
 80055ac:	b94b      	cbnz	r3, 80055c2 <__swsetup_r+0x9a>
 80055ae:	89a3      	ldrh	r3, [r4, #12]
 80055b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055b8:	d003      	beq.n	80055c2 <__swsetup_r+0x9a>
 80055ba:	4621      	mov	r1, r4
 80055bc:	4630      	mov	r0, r6
 80055be:	f000 f92b 	bl	8005818 <__smakebuf_r>
 80055c2:	89a0      	ldrh	r0, [r4, #12]
 80055c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055c8:	f010 0301 	ands.w	r3, r0, #1
 80055cc:	d00a      	beq.n	80055e4 <__swsetup_r+0xbc>
 80055ce:	2300      	movs	r3, #0
 80055d0:	60a3      	str	r3, [r4, #8]
 80055d2:	6963      	ldr	r3, [r4, #20]
 80055d4:	425b      	negs	r3, r3
 80055d6:	61a3      	str	r3, [r4, #24]
 80055d8:	6923      	ldr	r3, [r4, #16]
 80055da:	b943      	cbnz	r3, 80055ee <__swsetup_r+0xc6>
 80055dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055e0:	d1ba      	bne.n	8005558 <__swsetup_r+0x30>
 80055e2:	bd70      	pop	{r4, r5, r6, pc}
 80055e4:	0781      	lsls	r1, r0, #30
 80055e6:	bf58      	it	pl
 80055e8:	6963      	ldrpl	r3, [r4, #20]
 80055ea:	60a3      	str	r3, [r4, #8]
 80055ec:	e7f4      	b.n	80055d8 <__swsetup_r+0xb0>
 80055ee:	2000      	movs	r0, #0
 80055f0:	e7f7      	b.n	80055e2 <__swsetup_r+0xba>
 80055f2:	bf00      	nop
 80055f4:	20000010 	.word	0x20000010
 80055f8:	080060b0 	.word	0x080060b0
 80055fc:	080060d0 	.word	0x080060d0
 8005600:	08006090 	.word	0x08006090

08005604 <_close_r>:
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	4d06      	ldr	r5, [pc, #24]	; (8005620 <_close_r+0x1c>)
 8005608:	2300      	movs	r3, #0
 800560a:	4604      	mov	r4, r0
 800560c:	4608      	mov	r0, r1
 800560e:	602b      	str	r3, [r5, #0]
 8005610:	f7fb fa5b 	bl	8000aca <_close>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	d102      	bne.n	800561e <_close_r+0x1a>
 8005618:	682b      	ldr	r3, [r5, #0]
 800561a:	b103      	cbz	r3, 800561e <_close_r+0x1a>
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	bd38      	pop	{r3, r4, r5, pc}
 8005620:	20004b48 	.word	0x20004b48

08005624 <__sflush_r>:
 8005624:	898a      	ldrh	r2, [r1, #12]
 8005626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562a:	4605      	mov	r5, r0
 800562c:	0710      	lsls	r0, r2, #28
 800562e:	460c      	mov	r4, r1
 8005630:	d458      	bmi.n	80056e4 <__sflush_r+0xc0>
 8005632:	684b      	ldr	r3, [r1, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	dc05      	bgt.n	8005644 <__sflush_r+0x20>
 8005638:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	dc02      	bgt.n	8005644 <__sflush_r+0x20>
 800563e:	2000      	movs	r0, #0
 8005640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005646:	2e00      	cmp	r6, #0
 8005648:	d0f9      	beq.n	800563e <__sflush_r+0x1a>
 800564a:	2300      	movs	r3, #0
 800564c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005650:	682f      	ldr	r7, [r5, #0]
 8005652:	602b      	str	r3, [r5, #0]
 8005654:	d032      	beq.n	80056bc <__sflush_r+0x98>
 8005656:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005658:	89a3      	ldrh	r3, [r4, #12]
 800565a:	075a      	lsls	r2, r3, #29
 800565c:	d505      	bpl.n	800566a <__sflush_r+0x46>
 800565e:	6863      	ldr	r3, [r4, #4]
 8005660:	1ac0      	subs	r0, r0, r3
 8005662:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005664:	b10b      	cbz	r3, 800566a <__sflush_r+0x46>
 8005666:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005668:	1ac0      	subs	r0, r0, r3
 800566a:	2300      	movs	r3, #0
 800566c:	4602      	mov	r2, r0
 800566e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005670:	6a21      	ldr	r1, [r4, #32]
 8005672:	4628      	mov	r0, r5
 8005674:	47b0      	blx	r6
 8005676:	1c43      	adds	r3, r0, #1
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	d106      	bne.n	800568a <__sflush_r+0x66>
 800567c:	6829      	ldr	r1, [r5, #0]
 800567e:	291d      	cmp	r1, #29
 8005680:	d82c      	bhi.n	80056dc <__sflush_r+0xb8>
 8005682:	4a2a      	ldr	r2, [pc, #168]	; (800572c <__sflush_r+0x108>)
 8005684:	40ca      	lsrs	r2, r1
 8005686:	07d6      	lsls	r6, r2, #31
 8005688:	d528      	bpl.n	80056dc <__sflush_r+0xb8>
 800568a:	2200      	movs	r2, #0
 800568c:	6062      	str	r2, [r4, #4]
 800568e:	04d9      	lsls	r1, r3, #19
 8005690:	6922      	ldr	r2, [r4, #16]
 8005692:	6022      	str	r2, [r4, #0]
 8005694:	d504      	bpl.n	80056a0 <__sflush_r+0x7c>
 8005696:	1c42      	adds	r2, r0, #1
 8005698:	d101      	bne.n	800569e <__sflush_r+0x7a>
 800569a:	682b      	ldr	r3, [r5, #0]
 800569c:	b903      	cbnz	r3, 80056a0 <__sflush_r+0x7c>
 800569e:	6560      	str	r0, [r4, #84]	; 0x54
 80056a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056a2:	602f      	str	r7, [r5, #0]
 80056a4:	2900      	cmp	r1, #0
 80056a6:	d0ca      	beq.n	800563e <__sflush_r+0x1a>
 80056a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056ac:	4299      	cmp	r1, r3
 80056ae:	d002      	beq.n	80056b6 <__sflush_r+0x92>
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 f8fd 	bl	80058b0 <_free_r>
 80056b6:	2000      	movs	r0, #0
 80056b8:	6360      	str	r0, [r4, #52]	; 0x34
 80056ba:	e7c1      	b.n	8005640 <__sflush_r+0x1c>
 80056bc:	6a21      	ldr	r1, [r4, #32]
 80056be:	2301      	movs	r3, #1
 80056c0:	4628      	mov	r0, r5
 80056c2:	47b0      	blx	r6
 80056c4:	1c41      	adds	r1, r0, #1
 80056c6:	d1c7      	bne.n	8005658 <__sflush_r+0x34>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0c4      	beq.n	8005658 <__sflush_r+0x34>
 80056ce:	2b1d      	cmp	r3, #29
 80056d0:	d001      	beq.n	80056d6 <__sflush_r+0xb2>
 80056d2:	2b16      	cmp	r3, #22
 80056d4:	d101      	bne.n	80056da <__sflush_r+0xb6>
 80056d6:	602f      	str	r7, [r5, #0]
 80056d8:	e7b1      	b.n	800563e <__sflush_r+0x1a>
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056e0:	81a3      	strh	r3, [r4, #12]
 80056e2:	e7ad      	b.n	8005640 <__sflush_r+0x1c>
 80056e4:	690f      	ldr	r7, [r1, #16]
 80056e6:	2f00      	cmp	r7, #0
 80056e8:	d0a9      	beq.n	800563e <__sflush_r+0x1a>
 80056ea:	0793      	lsls	r3, r2, #30
 80056ec:	680e      	ldr	r6, [r1, #0]
 80056ee:	bf08      	it	eq
 80056f0:	694b      	ldreq	r3, [r1, #20]
 80056f2:	600f      	str	r7, [r1, #0]
 80056f4:	bf18      	it	ne
 80056f6:	2300      	movne	r3, #0
 80056f8:	eba6 0807 	sub.w	r8, r6, r7
 80056fc:	608b      	str	r3, [r1, #8]
 80056fe:	f1b8 0f00 	cmp.w	r8, #0
 8005702:	dd9c      	ble.n	800563e <__sflush_r+0x1a>
 8005704:	6a21      	ldr	r1, [r4, #32]
 8005706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005708:	4643      	mov	r3, r8
 800570a:	463a      	mov	r2, r7
 800570c:	4628      	mov	r0, r5
 800570e:	47b0      	blx	r6
 8005710:	2800      	cmp	r0, #0
 8005712:	dc06      	bgt.n	8005722 <__sflush_r+0xfe>
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800571a:	81a3      	strh	r3, [r4, #12]
 800571c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005720:	e78e      	b.n	8005640 <__sflush_r+0x1c>
 8005722:	4407      	add	r7, r0
 8005724:	eba8 0800 	sub.w	r8, r8, r0
 8005728:	e7e9      	b.n	80056fe <__sflush_r+0xda>
 800572a:	bf00      	nop
 800572c:	20400001 	.word	0x20400001

08005730 <_fflush_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	690b      	ldr	r3, [r1, #16]
 8005734:	4605      	mov	r5, r0
 8005736:	460c      	mov	r4, r1
 8005738:	b913      	cbnz	r3, 8005740 <_fflush_r+0x10>
 800573a:	2500      	movs	r5, #0
 800573c:	4628      	mov	r0, r5
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	b118      	cbz	r0, 800574a <_fflush_r+0x1a>
 8005742:	6983      	ldr	r3, [r0, #24]
 8005744:	b90b      	cbnz	r3, 800574a <_fflush_r+0x1a>
 8005746:	f7ff fbcf 	bl	8004ee8 <__sinit>
 800574a:	4b14      	ldr	r3, [pc, #80]	; (800579c <_fflush_r+0x6c>)
 800574c:	429c      	cmp	r4, r3
 800574e:	d11b      	bne.n	8005788 <_fflush_r+0x58>
 8005750:	686c      	ldr	r4, [r5, #4]
 8005752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0ef      	beq.n	800573a <_fflush_r+0xa>
 800575a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800575c:	07d0      	lsls	r0, r2, #31
 800575e:	d404      	bmi.n	800576a <_fflush_r+0x3a>
 8005760:	0599      	lsls	r1, r3, #22
 8005762:	d402      	bmi.n	800576a <_fflush_r+0x3a>
 8005764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005766:	f7ff fc82 	bl	800506e <__retarget_lock_acquire_recursive>
 800576a:	4628      	mov	r0, r5
 800576c:	4621      	mov	r1, r4
 800576e:	f7ff ff59 	bl	8005624 <__sflush_r>
 8005772:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005774:	07da      	lsls	r2, r3, #31
 8005776:	4605      	mov	r5, r0
 8005778:	d4e0      	bmi.n	800573c <_fflush_r+0xc>
 800577a:	89a3      	ldrh	r3, [r4, #12]
 800577c:	059b      	lsls	r3, r3, #22
 800577e:	d4dd      	bmi.n	800573c <_fflush_r+0xc>
 8005780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005782:	f7ff fc75 	bl	8005070 <__retarget_lock_release_recursive>
 8005786:	e7d9      	b.n	800573c <_fflush_r+0xc>
 8005788:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <_fflush_r+0x70>)
 800578a:	429c      	cmp	r4, r3
 800578c:	d101      	bne.n	8005792 <_fflush_r+0x62>
 800578e:	68ac      	ldr	r4, [r5, #8]
 8005790:	e7df      	b.n	8005752 <_fflush_r+0x22>
 8005792:	4b04      	ldr	r3, [pc, #16]	; (80057a4 <_fflush_r+0x74>)
 8005794:	429c      	cmp	r4, r3
 8005796:	bf08      	it	eq
 8005798:	68ec      	ldreq	r4, [r5, #12]
 800579a:	e7da      	b.n	8005752 <_fflush_r+0x22>
 800579c:	080060b0 	.word	0x080060b0
 80057a0:	080060d0 	.word	0x080060d0
 80057a4:	08006090 	.word	0x08006090

080057a8 <_lseek_r>:
 80057a8:	b538      	push	{r3, r4, r5, lr}
 80057aa:	4d07      	ldr	r5, [pc, #28]	; (80057c8 <_lseek_r+0x20>)
 80057ac:	4604      	mov	r4, r0
 80057ae:	4608      	mov	r0, r1
 80057b0:	4611      	mov	r1, r2
 80057b2:	2200      	movs	r2, #0
 80057b4:	602a      	str	r2, [r5, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f7fb f9ae 	bl	8000b18 <_lseek>
 80057bc:	1c43      	adds	r3, r0, #1
 80057be:	d102      	bne.n	80057c6 <_lseek_r+0x1e>
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	b103      	cbz	r3, 80057c6 <_lseek_r+0x1e>
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	bd38      	pop	{r3, r4, r5, pc}
 80057c8:	20004b48 	.word	0x20004b48

080057cc <__swhatbuf_r>:
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	460e      	mov	r6, r1
 80057d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d4:	2900      	cmp	r1, #0
 80057d6:	b096      	sub	sp, #88	; 0x58
 80057d8:	4614      	mov	r4, r2
 80057da:	461d      	mov	r5, r3
 80057dc:	da08      	bge.n	80057f0 <__swhatbuf_r+0x24>
 80057de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	602a      	str	r2, [r5, #0]
 80057e6:	061a      	lsls	r2, r3, #24
 80057e8:	d410      	bmi.n	800580c <__swhatbuf_r+0x40>
 80057ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ee:	e00e      	b.n	800580e <__swhatbuf_r+0x42>
 80057f0:	466a      	mov	r2, sp
 80057f2:	f000 fba9 	bl	8005f48 <_fstat_r>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	dbf1      	blt.n	80057de <__swhatbuf_r+0x12>
 80057fa:	9a01      	ldr	r2, [sp, #4]
 80057fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005800:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005804:	425a      	negs	r2, r3
 8005806:	415a      	adcs	r2, r3
 8005808:	602a      	str	r2, [r5, #0]
 800580a:	e7ee      	b.n	80057ea <__swhatbuf_r+0x1e>
 800580c:	2340      	movs	r3, #64	; 0x40
 800580e:	2000      	movs	r0, #0
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	b016      	add	sp, #88	; 0x58
 8005814:	bd70      	pop	{r4, r5, r6, pc}
	...

08005818 <__smakebuf_r>:
 8005818:	898b      	ldrh	r3, [r1, #12]
 800581a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800581c:	079d      	lsls	r5, r3, #30
 800581e:	4606      	mov	r6, r0
 8005820:	460c      	mov	r4, r1
 8005822:	d507      	bpl.n	8005834 <__smakebuf_r+0x1c>
 8005824:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	6123      	str	r3, [r4, #16]
 800582c:	2301      	movs	r3, #1
 800582e:	6163      	str	r3, [r4, #20]
 8005830:	b002      	add	sp, #8
 8005832:	bd70      	pop	{r4, r5, r6, pc}
 8005834:	ab01      	add	r3, sp, #4
 8005836:	466a      	mov	r2, sp
 8005838:	f7ff ffc8 	bl	80057cc <__swhatbuf_r>
 800583c:	9900      	ldr	r1, [sp, #0]
 800583e:	4605      	mov	r5, r0
 8005840:	4630      	mov	r0, r6
 8005842:	f7ff fc4d 	bl	80050e0 <_malloc_r>
 8005846:	b948      	cbnz	r0, 800585c <__smakebuf_r+0x44>
 8005848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800584c:	059a      	lsls	r2, r3, #22
 800584e:	d4ef      	bmi.n	8005830 <__smakebuf_r+0x18>
 8005850:	f023 0303 	bic.w	r3, r3, #3
 8005854:	f043 0302 	orr.w	r3, r3, #2
 8005858:	81a3      	strh	r3, [r4, #12]
 800585a:	e7e3      	b.n	8005824 <__smakebuf_r+0xc>
 800585c:	4b0d      	ldr	r3, [pc, #52]	; (8005894 <__smakebuf_r+0x7c>)
 800585e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005860:	89a3      	ldrh	r3, [r4, #12]
 8005862:	6020      	str	r0, [r4, #0]
 8005864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005868:	81a3      	strh	r3, [r4, #12]
 800586a:	9b00      	ldr	r3, [sp, #0]
 800586c:	6163      	str	r3, [r4, #20]
 800586e:	9b01      	ldr	r3, [sp, #4]
 8005870:	6120      	str	r0, [r4, #16]
 8005872:	b15b      	cbz	r3, 800588c <__smakebuf_r+0x74>
 8005874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005878:	4630      	mov	r0, r6
 800587a:	f000 fb77 	bl	8005f6c <_isatty_r>
 800587e:	b128      	cbz	r0, 800588c <__smakebuf_r+0x74>
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	f023 0303 	bic.w	r3, r3, #3
 8005886:	f043 0301 	orr.w	r3, r3, #1
 800588a:	81a3      	strh	r3, [r4, #12]
 800588c:	89a0      	ldrh	r0, [r4, #12]
 800588e:	4305      	orrs	r5, r0
 8005890:	81a5      	strh	r5, [r4, #12]
 8005892:	e7cd      	b.n	8005830 <__smakebuf_r+0x18>
 8005894:	08004e81 	.word	0x08004e81

08005898 <__malloc_lock>:
 8005898:	4801      	ldr	r0, [pc, #4]	; (80058a0 <__malloc_lock+0x8>)
 800589a:	f7ff bbe8 	b.w	800506e <__retarget_lock_acquire_recursive>
 800589e:	bf00      	nop
 80058a0:	20004b3c 	.word	0x20004b3c

080058a4 <__malloc_unlock>:
 80058a4:	4801      	ldr	r0, [pc, #4]	; (80058ac <__malloc_unlock+0x8>)
 80058a6:	f7ff bbe3 	b.w	8005070 <__retarget_lock_release_recursive>
 80058aa:	bf00      	nop
 80058ac:	20004b3c 	.word	0x20004b3c

080058b0 <_free_r>:
 80058b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058b2:	2900      	cmp	r1, #0
 80058b4:	d044      	beq.n	8005940 <_free_r+0x90>
 80058b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058ba:	9001      	str	r0, [sp, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f1a1 0404 	sub.w	r4, r1, #4
 80058c2:	bfb8      	it	lt
 80058c4:	18e4      	addlt	r4, r4, r3
 80058c6:	f7ff ffe7 	bl	8005898 <__malloc_lock>
 80058ca:	4a1e      	ldr	r2, [pc, #120]	; (8005944 <_free_r+0x94>)
 80058cc:	9801      	ldr	r0, [sp, #4]
 80058ce:	6813      	ldr	r3, [r2, #0]
 80058d0:	b933      	cbnz	r3, 80058e0 <_free_r+0x30>
 80058d2:	6063      	str	r3, [r4, #4]
 80058d4:	6014      	str	r4, [r2, #0]
 80058d6:	b003      	add	sp, #12
 80058d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058dc:	f7ff bfe2 	b.w	80058a4 <__malloc_unlock>
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d908      	bls.n	80058f6 <_free_r+0x46>
 80058e4:	6825      	ldr	r5, [r4, #0]
 80058e6:	1961      	adds	r1, r4, r5
 80058e8:	428b      	cmp	r3, r1
 80058ea:	bf01      	itttt	eq
 80058ec:	6819      	ldreq	r1, [r3, #0]
 80058ee:	685b      	ldreq	r3, [r3, #4]
 80058f0:	1949      	addeq	r1, r1, r5
 80058f2:	6021      	streq	r1, [r4, #0]
 80058f4:	e7ed      	b.n	80058d2 <_free_r+0x22>
 80058f6:	461a      	mov	r2, r3
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	b10b      	cbz	r3, 8005900 <_free_r+0x50>
 80058fc:	42a3      	cmp	r3, r4
 80058fe:	d9fa      	bls.n	80058f6 <_free_r+0x46>
 8005900:	6811      	ldr	r1, [r2, #0]
 8005902:	1855      	adds	r5, r2, r1
 8005904:	42a5      	cmp	r5, r4
 8005906:	d10b      	bne.n	8005920 <_free_r+0x70>
 8005908:	6824      	ldr	r4, [r4, #0]
 800590a:	4421      	add	r1, r4
 800590c:	1854      	adds	r4, r2, r1
 800590e:	42a3      	cmp	r3, r4
 8005910:	6011      	str	r1, [r2, #0]
 8005912:	d1e0      	bne.n	80058d6 <_free_r+0x26>
 8005914:	681c      	ldr	r4, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	6053      	str	r3, [r2, #4]
 800591a:	4421      	add	r1, r4
 800591c:	6011      	str	r1, [r2, #0]
 800591e:	e7da      	b.n	80058d6 <_free_r+0x26>
 8005920:	d902      	bls.n	8005928 <_free_r+0x78>
 8005922:	230c      	movs	r3, #12
 8005924:	6003      	str	r3, [r0, #0]
 8005926:	e7d6      	b.n	80058d6 <_free_r+0x26>
 8005928:	6825      	ldr	r5, [r4, #0]
 800592a:	1961      	adds	r1, r4, r5
 800592c:	428b      	cmp	r3, r1
 800592e:	bf04      	itt	eq
 8005930:	6819      	ldreq	r1, [r3, #0]
 8005932:	685b      	ldreq	r3, [r3, #4]
 8005934:	6063      	str	r3, [r4, #4]
 8005936:	bf04      	itt	eq
 8005938:	1949      	addeq	r1, r1, r5
 800593a:	6021      	streq	r1, [r4, #0]
 800593c:	6054      	str	r4, [r2, #4]
 800593e:	e7ca      	b.n	80058d6 <_free_r+0x26>
 8005940:	b003      	add	sp, #12
 8005942:	bd30      	pop	{r4, r5, pc}
 8005944:	20004b40 	.word	0x20004b40

08005948 <__sfputc_r>:
 8005948:	6893      	ldr	r3, [r2, #8]
 800594a:	3b01      	subs	r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	b410      	push	{r4}
 8005950:	6093      	str	r3, [r2, #8]
 8005952:	da08      	bge.n	8005966 <__sfputc_r+0x1e>
 8005954:	6994      	ldr	r4, [r2, #24]
 8005956:	42a3      	cmp	r3, r4
 8005958:	db01      	blt.n	800595e <__sfputc_r+0x16>
 800595a:	290a      	cmp	r1, #10
 800595c:	d103      	bne.n	8005966 <__sfputc_r+0x1e>
 800595e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005962:	f7ff bd7d 	b.w	8005460 <__swbuf_r>
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	1c58      	adds	r0, r3, #1
 800596a:	6010      	str	r0, [r2, #0]
 800596c:	7019      	strb	r1, [r3, #0]
 800596e:	4608      	mov	r0, r1
 8005970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005974:	4770      	bx	lr

08005976 <__sfputs_r>:
 8005976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005978:	4606      	mov	r6, r0
 800597a:	460f      	mov	r7, r1
 800597c:	4614      	mov	r4, r2
 800597e:	18d5      	adds	r5, r2, r3
 8005980:	42ac      	cmp	r4, r5
 8005982:	d101      	bne.n	8005988 <__sfputs_r+0x12>
 8005984:	2000      	movs	r0, #0
 8005986:	e007      	b.n	8005998 <__sfputs_r+0x22>
 8005988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800598c:	463a      	mov	r2, r7
 800598e:	4630      	mov	r0, r6
 8005990:	f7ff ffda 	bl	8005948 <__sfputc_r>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d1f3      	bne.n	8005980 <__sfputs_r+0xa>
 8005998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800599c <_vfiprintf_r>:
 800599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a0:	460d      	mov	r5, r1
 80059a2:	b09d      	sub	sp, #116	; 0x74
 80059a4:	4614      	mov	r4, r2
 80059a6:	4698      	mov	r8, r3
 80059a8:	4606      	mov	r6, r0
 80059aa:	b118      	cbz	r0, 80059b4 <_vfiprintf_r+0x18>
 80059ac:	6983      	ldr	r3, [r0, #24]
 80059ae:	b90b      	cbnz	r3, 80059b4 <_vfiprintf_r+0x18>
 80059b0:	f7ff fa9a 	bl	8004ee8 <__sinit>
 80059b4:	4b89      	ldr	r3, [pc, #548]	; (8005bdc <_vfiprintf_r+0x240>)
 80059b6:	429d      	cmp	r5, r3
 80059b8:	d11b      	bne.n	80059f2 <_vfiprintf_r+0x56>
 80059ba:	6875      	ldr	r5, [r6, #4]
 80059bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059be:	07d9      	lsls	r1, r3, #31
 80059c0:	d405      	bmi.n	80059ce <_vfiprintf_r+0x32>
 80059c2:	89ab      	ldrh	r3, [r5, #12]
 80059c4:	059a      	lsls	r2, r3, #22
 80059c6:	d402      	bmi.n	80059ce <_vfiprintf_r+0x32>
 80059c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059ca:	f7ff fb50 	bl	800506e <__retarget_lock_acquire_recursive>
 80059ce:	89ab      	ldrh	r3, [r5, #12]
 80059d0:	071b      	lsls	r3, r3, #28
 80059d2:	d501      	bpl.n	80059d8 <_vfiprintf_r+0x3c>
 80059d4:	692b      	ldr	r3, [r5, #16]
 80059d6:	b9eb      	cbnz	r3, 8005a14 <_vfiprintf_r+0x78>
 80059d8:	4629      	mov	r1, r5
 80059da:	4630      	mov	r0, r6
 80059dc:	f7ff fda4 	bl	8005528 <__swsetup_r>
 80059e0:	b1c0      	cbz	r0, 8005a14 <_vfiprintf_r+0x78>
 80059e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059e4:	07dc      	lsls	r4, r3, #31
 80059e6:	d50e      	bpl.n	8005a06 <_vfiprintf_r+0x6a>
 80059e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059ec:	b01d      	add	sp, #116	; 0x74
 80059ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f2:	4b7b      	ldr	r3, [pc, #492]	; (8005be0 <_vfiprintf_r+0x244>)
 80059f4:	429d      	cmp	r5, r3
 80059f6:	d101      	bne.n	80059fc <_vfiprintf_r+0x60>
 80059f8:	68b5      	ldr	r5, [r6, #8]
 80059fa:	e7df      	b.n	80059bc <_vfiprintf_r+0x20>
 80059fc:	4b79      	ldr	r3, [pc, #484]	; (8005be4 <_vfiprintf_r+0x248>)
 80059fe:	429d      	cmp	r5, r3
 8005a00:	bf08      	it	eq
 8005a02:	68f5      	ldreq	r5, [r6, #12]
 8005a04:	e7da      	b.n	80059bc <_vfiprintf_r+0x20>
 8005a06:	89ab      	ldrh	r3, [r5, #12]
 8005a08:	0598      	lsls	r0, r3, #22
 8005a0a:	d4ed      	bmi.n	80059e8 <_vfiprintf_r+0x4c>
 8005a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a0e:	f7ff fb2f 	bl	8005070 <__retarget_lock_release_recursive>
 8005a12:	e7e9      	b.n	80059e8 <_vfiprintf_r+0x4c>
 8005a14:	2300      	movs	r3, #0
 8005a16:	9309      	str	r3, [sp, #36]	; 0x24
 8005a18:	2320      	movs	r3, #32
 8005a1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a22:	2330      	movs	r3, #48	; 0x30
 8005a24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005be8 <_vfiprintf_r+0x24c>
 8005a28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a2c:	f04f 0901 	mov.w	r9, #1
 8005a30:	4623      	mov	r3, r4
 8005a32:	469a      	mov	sl, r3
 8005a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a38:	b10a      	cbz	r2, 8005a3e <_vfiprintf_r+0xa2>
 8005a3a:	2a25      	cmp	r2, #37	; 0x25
 8005a3c:	d1f9      	bne.n	8005a32 <_vfiprintf_r+0x96>
 8005a3e:	ebba 0b04 	subs.w	fp, sl, r4
 8005a42:	d00b      	beq.n	8005a5c <_vfiprintf_r+0xc0>
 8005a44:	465b      	mov	r3, fp
 8005a46:	4622      	mov	r2, r4
 8005a48:	4629      	mov	r1, r5
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f7ff ff93 	bl	8005976 <__sfputs_r>
 8005a50:	3001      	adds	r0, #1
 8005a52:	f000 80aa 	beq.w	8005baa <_vfiprintf_r+0x20e>
 8005a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a58:	445a      	add	r2, fp
 8005a5a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80a2 	beq.w	8005baa <_vfiprintf_r+0x20e>
 8005a66:	2300      	movs	r3, #0
 8005a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a70:	f10a 0a01 	add.w	sl, sl, #1
 8005a74:	9304      	str	r3, [sp, #16]
 8005a76:	9307      	str	r3, [sp, #28]
 8005a78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a7c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a7e:	4654      	mov	r4, sl
 8005a80:	2205      	movs	r2, #5
 8005a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a86:	4858      	ldr	r0, [pc, #352]	; (8005be8 <_vfiprintf_r+0x24c>)
 8005a88:	f7fa fbaa 	bl	80001e0 <memchr>
 8005a8c:	9a04      	ldr	r2, [sp, #16]
 8005a8e:	b9d8      	cbnz	r0, 8005ac8 <_vfiprintf_r+0x12c>
 8005a90:	06d1      	lsls	r1, r2, #27
 8005a92:	bf44      	itt	mi
 8005a94:	2320      	movmi	r3, #32
 8005a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a9a:	0713      	lsls	r3, r2, #28
 8005a9c:	bf44      	itt	mi
 8005a9e:	232b      	movmi	r3, #43	; 0x2b
 8005aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8005aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aaa:	d015      	beq.n	8005ad8 <_vfiprintf_r+0x13c>
 8005aac:	9a07      	ldr	r2, [sp, #28]
 8005aae:	4654      	mov	r4, sl
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	f04f 0c0a 	mov.w	ip, #10
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005abc:	3b30      	subs	r3, #48	; 0x30
 8005abe:	2b09      	cmp	r3, #9
 8005ac0:	d94e      	bls.n	8005b60 <_vfiprintf_r+0x1c4>
 8005ac2:	b1b0      	cbz	r0, 8005af2 <_vfiprintf_r+0x156>
 8005ac4:	9207      	str	r2, [sp, #28]
 8005ac6:	e014      	b.n	8005af2 <_vfiprintf_r+0x156>
 8005ac8:	eba0 0308 	sub.w	r3, r0, r8
 8005acc:	fa09 f303 	lsl.w	r3, r9, r3
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	9304      	str	r3, [sp, #16]
 8005ad4:	46a2      	mov	sl, r4
 8005ad6:	e7d2      	b.n	8005a7e <_vfiprintf_r+0xe2>
 8005ad8:	9b03      	ldr	r3, [sp, #12]
 8005ada:	1d19      	adds	r1, r3, #4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	9103      	str	r1, [sp, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	bfbb      	ittet	lt
 8005ae4:	425b      	neglt	r3, r3
 8005ae6:	f042 0202 	orrlt.w	r2, r2, #2
 8005aea:	9307      	strge	r3, [sp, #28]
 8005aec:	9307      	strlt	r3, [sp, #28]
 8005aee:	bfb8      	it	lt
 8005af0:	9204      	strlt	r2, [sp, #16]
 8005af2:	7823      	ldrb	r3, [r4, #0]
 8005af4:	2b2e      	cmp	r3, #46	; 0x2e
 8005af6:	d10c      	bne.n	8005b12 <_vfiprintf_r+0x176>
 8005af8:	7863      	ldrb	r3, [r4, #1]
 8005afa:	2b2a      	cmp	r3, #42	; 0x2a
 8005afc:	d135      	bne.n	8005b6a <_vfiprintf_r+0x1ce>
 8005afe:	9b03      	ldr	r3, [sp, #12]
 8005b00:	1d1a      	adds	r2, r3, #4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	9203      	str	r2, [sp, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bfb8      	it	lt
 8005b0a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b0e:	3402      	adds	r4, #2
 8005b10:	9305      	str	r3, [sp, #20]
 8005b12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005bf8 <_vfiprintf_r+0x25c>
 8005b16:	7821      	ldrb	r1, [r4, #0]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	f7fa fb60 	bl	80001e0 <memchr>
 8005b20:	b140      	cbz	r0, 8005b34 <_vfiprintf_r+0x198>
 8005b22:	2340      	movs	r3, #64	; 0x40
 8005b24:	eba0 000a 	sub.w	r0, r0, sl
 8005b28:	fa03 f000 	lsl.w	r0, r3, r0
 8005b2c:	9b04      	ldr	r3, [sp, #16]
 8005b2e:	4303      	orrs	r3, r0
 8005b30:	3401      	adds	r4, #1
 8005b32:	9304      	str	r3, [sp, #16]
 8005b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b38:	482c      	ldr	r0, [pc, #176]	; (8005bec <_vfiprintf_r+0x250>)
 8005b3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b3e:	2206      	movs	r2, #6
 8005b40:	f7fa fb4e 	bl	80001e0 <memchr>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d03f      	beq.n	8005bc8 <_vfiprintf_r+0x22c>
 8005b48:	4b29      	ldr	r3, [pc, #164]	; (8005bf0 <_vfiprintf_r+0x254>)
 8005b4a:	bb1b      	cbnz	r3, 8005b94 <_vfiprintf_r+0x1f8>
 8005b4c:	9b03      	ldr	r3, [sp, #12]
 8005b4e:	3307      	adds	r3, #7
 8005b50:	f023 0307 	bic.w	r3, r3, #7
 8005b54:	3308      	adds	r3, #8
 8005b56:	9303      	str	r3, [sp, #12]
 8005b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b5a:	443b      	add	r3, r7
 8005b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5e:	e767      	b.n	8005a30 <_vfiprintf_r+0x94>
 8005b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b64:	460c      	mov	r4, r1
 8005b66:	2001      	movs	r0, #1
 8005b68:	e7a5      	b.n	8005ab6 <_vfiprintf_r+0x11a>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	3401      	adds	r4, #1
 8005b6e:	9305      	str	r3, [sp, #20]
 8005b70:	4619      	mov	r1, r3
 8005b72:	f04f 0c0a 	mov.w	ip, #10
 8005b76:	4620      	mov	r0, r4
 8005b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b7c:	3a30      	subs	r2, #48	; 0x30
 8005b7e:	2a09      	cmp	r2, #9
 8005b80:	d903      	bls.n	8005b8a <_vfiprintf_r+0x1ee>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0c5      	beq.n	8005b12 <_vfiprintf_r+0x176>
 8005b86:	9105      	str	r1, [sp, #20]
 8005b88:	e7c3      	b.n	8005b12 <_vfiprintf_r+0x176>
 8005b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b8e:	4604      	mov	r4, r0
 8005b90:	2301      	movs	r3, #1
 8005b92:	e7f0      	b.n	8005b76 <_vfiprintf_r+0x1da>
 8005b94:	ab03      	add	r3, sp, #12
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	462a      	mov	r2, r5
 8005b9a:	4b16      	ldr	r3, [pc, #88]	; (8005bf4 <_vfiprintf_r+0x258>)
 8005b9c:	a904      	add	r1, sp, #16
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f3af 8000 	nop.w
 8005ba4:	4607      	mov	r7, r0
 8005ba6:	1c78      	adds	r0, r7, #1
 8005ba8:	d1d6      	bne.n	8005b58 <_vfiprintf_r+0x1bc>
 8005baa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bac:	07d9      	lsls	r1, r3, #31
 8005bae:	d405      	bmi.n	8005bbc <_vfiprintf_r+0x220>
 8005bb0:	89ab      	ldrh	r3, [r5, #12]
 8005bb2:	059a      	lsls	r2, r3, #22
 8005bb4:	d402      	bmi.n	8005bbc <_vfiprintf_r+0x220>
 8005bb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bb8:	f7ff fa5a 	bl	8005070 <__retarget_lock_release_recursive>
 8005bbc:	89ab      	ldrh	r3, [r5, #12]
 8005bbe:	065b      	lsls	r3, r3, #25
 8005bc0:	f53f af12 	bmi.w	80059e8 <_vfiprintf_r+0x4c>
 8005bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bc6:	e711      	b.n	80059ec <_vfiprintf_r+0x50>
 8005bc8:	ab03      	add	r3, sp, #12
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	462a      	mov	r2, r5
 8005bce:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <_vfiprintf_r+0x258>)
 8005bd0:	a904      	add	r1, sp, #16
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f000 f880 	bl	8005cd8 <_printf_i>
 8005bd8:	e7e4      	b.n	8005ba4 <_vfiprintf_r+0x208>
 8005bda:	bf00      	nop
 8005bdc:	080060b0 	.word	0x080060b0
 8005be0:	080060d0 	.word	0x080060d0
 8005be4:	08006090 	.word	0x08006090
 8005be8:	080060f4 	.word	0x080060f4
 8005bec:	080060fe 	.word	0x080060fe
 8005bf0:	00000000 	.word	0x00000000
 8005bf4:	08005977 	.word	0x08005977
 8005bf8:	080060fa 	.word	0x080060fa

08005bfc <_printf_common>:
 8005bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c00:	4616      	mov	r6, r2
 8005c02:	4699      	mov	r9, r3
 8005c04:	688a      	ldr	r2, [r1, #8]
 8005c06:	690b      	ldr	r3, [r1, #16]
 8005c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	bfb8      	it	lt
 8005c10:	4613      	movlt	r3, r2
 8005c12:	6033      	str	r3, [r6, #0]
 8005c14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c18:	4607      	mov	r7, r0
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	b10a      	cbz	r2, 8005c22 <_printf_common+0x26>
 8005c1e:	3301      	adds	r3, #1
 8005c20:	6033      	str	r3, [r6, #0]
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	0699      	lsls	r1, r3, #26
 8005c26:	bf42      	ittt	mi
 8005c28:	6833      	ldrmi	r3, [r6, #0]
 8005c2a:	3302      	addmi	r3, #2
 8005c2c:	6033      	strmi	r3, [r6, #0]
 8005c2e:	6825      	ldr	r5, [r4, #0]
 8005c30:	f015 0506 	ands.w	r5, r5, #6
 8005c34:	d106      	bne.n	8005c44 <_printf_common+0x48>
 8005c36:	f104 0a19 	add.w	sl, r4, #25
 8005c3a:	68e3      	ldr	r3, [r4, #12]
 8005c3c:	6832      	ldr	r2, [r6, #0]
 8005c3e:	1a9b      	subs	r3, r3, r2
 8005c40:	42ab      	cmp	r3, r5
 8005c42:	dc26      	bgt.n	8005c92 <_printf_common+0x96>
 8005c44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c48:	1e13      	subs	r3, r2, #0
 8005c4a:	6822      	ldr	r2, [r4, #0]
 8005c4c:	bf18      	it	ne
 8005c4e:	2301      	movne	r3, #1
 8005c50:	0692      	lsls	r2, r2, #26
 8005c52:	d42b      	bmi.n	8005cac <_printf_common+0xb0>
 8005c54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c58:	4649      	mov	r1, r9
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	47c0      	blx	r8
 8005c5e:	3001      	adds	r0, #1
 8005c60:	d01e      	beq.n	8005ca0 <_printf_common+0xa4>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	68e5      	ldr	r5, [r4, #12]
 8005c66:	6832      	ldr	r2, [r6, #0]
 8005c68:	f003 0306 	and.w	r3, r3, #6
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	bf08      	it	eq
 8005c70:	1aad      	subeq	r5, r5, r2
 8005c72:	68a3      	ldr	r3, [r4, #8]
 8005c74:	6922      	ldr	r2, [r4, #16]
 8005c76:	bf0c      	ite	eq
 8005c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c7c:	2500      	movne	r5, #0
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	bfc4      	itt	gt
 8005c82:	1a9b      	subgt	r3, r3, r2
 8005c84:	18ed      	addgt	r5, r5, r3
 8005c86:	2600      	movs	r6, #0
 8005c88:	341a      	adds	r4, #26
 8005c8a:	42b5      	cmp	r5, r6
 8005c8c:	d11a      	bne.n	8005cc4 <_printf_common+0xc8>
 8005c8e:	2000      	movs	r0, #0
 8005c90:	e008      	b.n	8005ca4 <_printf_common+0xa8>
 8005c92:	2301      	movs	r3, #1
 8005c94:	4652      	mov	r2, sl
 8005c96:	4649      	mov	r1, r9
 8005c98:	4638      	mov	r0, r7
 8005c9a:	47c0      	blx	r8
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d103      	bne.n	8005ca8 <_printf_common+0xac>
 8005ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca8:	3501      	adds	r5, #1
 8005caa:	e7c6      	b.n	8005c3a <_printf_common+0x3e>
 8005cac:	18e1      	adds	r1, r4, r3
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	2030      	movs	r0, #48	; 0x30
 8005cb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cb6:	4422      	add	r2, r4
 8005cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cc0:	3302      	adds	r3, #2
 8005cc2:	e7c7      	b.n	8005c54 <_printf_common+0x58>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	4622      	mov	r2, r4
 8005cc8:	4649      	mov	r1, r9
 8005cca:	4638      	mov	r0, r7
 8005ccc:	47c0      	blx	r8
 8005cce:	3001      	adds	r0, #1
 8005cd0:	d0e6      	beq.n	8005ca0 <_printf_common+0xa4>
 8005cd2:	3601      	adds	r6, #1
 8005cd4:	e7d9      	b.n	8005c8a <_printf_common+0x8e>
	...

08005cd8 <_printf_i>:
 8005cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cdc:	7e0f      	ldrb	r7, [r1, #24]
 8005cde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ce0:	2f78      	cmp	r7, #120	; 0x78
 8005ce2:	4691      	mov	r9, r2
 8005ce4:	4680      	mov	r8, r0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	469a      	mov	sl, r3
 8005cea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cee:	d807      	bhi.n	8005d00 <_printf_i+0x28>
 8005cf0:	2f62      	cmp	r7, #98	; 0x62
 8005cf2:	d80a      	bhi.n	8005d0a <_printf_i+0x32>
 8005cf4:	2f00      	cmp	r7, #0
 8005cf6:	f000 80d8 	beq.w	8005eaa <_printf_i+0x1d2>
 8005cfa:	2f58      	cmp	r7, #88	; 0x58
 8005cfc:	f000 80a3 	beq.w	8005e46 <_printf_i+0x16e>
 8005d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d08:	e03a      	b.n	8005d80 <_printf_i+0xa8>
 8005d0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d0e:	2b15      	cmp	r3, #21
 8005d10:	d8f6      	bhi.n	8005d00 <_printf_i+0x28>
 8005d12:	a101      	add	r1, pc, #4	; (adr r1, 8005d18 <_printf_i+0x40>)
 8005d14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d18:	08005d71 	.word	0x08005d71
 8005d1c:	08005d85 	.word	0x08005d85
 8005d20:	08005d01 	.word	0x08005d01
 8005d24:	08005d01 	.word	0x08005d01
 8005d28:	08005d01 	.word	0x08005d01
 8005d2c:	08005d01 	.word	0x08005d01
 8005d30:	08005d85 	.word	0x08005d85
 8005d34:	08005d01 	.word	0x08005d01
 8005d38:	08005d01 	.word	0x08005d01
 8005d3c:	08005d01 	.word	0x08005d01
 8005d40:	08005d01 	.word	0x08005d01
 8005d44:	08005e91 	.word	0x08005e91
 8005d48:	08005db5 	.word	0x08005db5
 8005d4c:	08005e73 	.word	0x08005e73
 8005d50:	08005d01 	.word	0x08005d01
 8005d54:	08005d01 	.word	0x08005d01
 8005d58:	08005eb3 	.word	0x08005eb3
 8005d5c:	08005d01 	.word	0x08005d01
 8005d60:	08005db5 	.word	0x08005db5
 8005d64:	08005d01 	.word	0x08005d01
 8005d68:	08005d01 	.word	0x08005d01
 8005d6c:	08005e7b 	.word	0x08005e7b
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	1d1a      	adds	r2, r3, #4
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	602a      	str	r2, [r5, #0]
 8005d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0a3      	b.n	8005ecc <_printf_i+0x1f4>
 8005d84:	6820      	ldr	r0, [r4, #0]
 8005d86:	6829      	ldr	r1, [r5, #0]
 8005d88:	0606      	lsls	r6, r0, #24
 8005d8a:	f101 0304 	add.w	r3, r1, #4
 8005d8e:	d50a      	bpl.n	8005da6 <_printf_i+0xce>
 8005d90:	680e      	ldr	r6, [r1, #0]
 8005d92:	602b      	str	r3, [r5, #0]
 8005d94:	2e00      	cmp	r6, #0
 8005d96:	da03      	bge.n	8005da0 <_printf_i+0xc8>
 8005d98:	232d      	movs	r3, #45	; 0x2d
 8005d9a:	4276      	negs	r6, r6
 8005d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da0:	485e      	ldr	r0, [pc, #376]	; (8005f1c <_printf_i+0x244>)
 8005da2:	230a      	movs	r3, #10
 8005da4:	e019      	b.n	8005dda <_printf_i+0x102>
 8005da6:	680e      	ldr	r6, [r1, #0]
 8005da8:	602b      	str	r3, [r5, #0]
 8005daa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005dae:	bf18      	it	ne
 8005db0:	b236      	sxthne	r6, r6
 8005db2:	e7ef      	b.n	8005d94 <_printf_i+0xbc>
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	6820      	ldr	r0, [r4, #0]
 8005db8:	1d19      	adds	r1, r3, #4
 8005dba:	6029      	str	r1, [r5, #0]
 8005dbc:	0601      	lsls	r1, r0, #24
 8005dbe:	d501      	bpl.n	8005dc4 <_printf_i+0xec>
 8005dc0:	681e      	ldr	r6, [r3, #0]
 8005dc2:	e002      	b.n	8005dca <_printf_i+0xf2>
 8005dc4:	0646      	lsls	r6, r0, #25
 8005dc6:	d5fb      	bpl.n	8005dc0 <_printf_i+0xe8>
 8005dc8:	881e      	ldrh	r6, [r3, #0]
 8005dca:	4854      	ldr	r0, [pc, #336]	; (8005f1c <_printf_i+0x244>)
 8005dcc:	2f6f      	cmp	r7, #111	; 0x6f
 8005dce:	bf0c      	ite	eq
 8005dd0:	2308      	moveq	r3, #8
 8005dd2:	230a      	movne	r3, #10
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dda:	6865      	ldr	r5, [r4, #4]
 8005ddc:	60a5      	str	r5, [r4, #8]
 8005dde:	2d00      	cmp	r5, #0
 8005de0:	bfa2      	ittt	ge
 8005de2:	6821      	ldrge	r1, [r4, #0]
 8005de4:	f021 0104 	bicge.w	r1, r1, #4
 8005de8:	6021      	strge	r1, [r4, #0]
 8005dea:	b90e      	cbnz	r6, 8005df0 <_printf_i+0x118>
 8005dec:	2d00      	cmp	r5, #0
 8005dee:	d04d      	beq.n	8005e8c <_printf_i+0x1b4>
 8005df0:	4615      	mov	r5, r2
 8005df2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005df6:	fb03 6711 	mls	r7, r3, r1, r6
 8005dfa:	5dc7      	ldrb	r7, [r0, r7]
 8005dfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e00:	4637      	mov	r7, r6
 8005e02:	42bb      	cmp	r3, r7
 8005e04:	460e      	mov	r6, r1
 8005e06:	d9f4      	bls.n	8005df2 <_printf_i+0x11a>
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d10b      	bne.n	8005e24 <_printf_i+0x14c>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	07de      	lsls	r6, r3, #31
 8005e10:	d508      	bpl.n	8005e24 <_printf_i+0x14c>
 8005e12:	6923      	ldr	r3, [r4, #16]
 8005e14:	6861      	ldr	r1, [r4, #4]
 8005e16:	4299      	cmp	r1, r3
 8005e18:	bfde      	ittt	le
 8005e1a:	2330      	movle	r3, #48	; 0x30
 8005e1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e20:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e24:	1b52      	subs	r2, r2, r5
 8005e26:	6122      	str	r2, [r4, #16]
 8005e28:	f8cd a000 	str.w	sl, [sp]
 8005e2c:	464b      	mov	r3, r9
 8005e2e:	aa03      	add	r2, sp, #12
 8005e30:	4621      	mov	r1, r4
 8005e32:	4640      	mov	r0, r8
 8005e34:	f7ff fee2 	bl	8005bfc <_printf_common>
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d14c      	bne.n	8005ed6 <_printf_i+0x1fe>
 8005e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e40:	b004      	add	sp, #16
 8005e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e46:	4835      	ldr	r0, [pc, #212]	; (8005f1c <_printf_i+0x244>)
 8005e48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e4c:	6829      	ldr	r1, [r5, #0]
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e54:	6029      	str	r1, [r5, #0]
 8005e56:	061d      	lsls	r5, r3, #24
 8005e58:	d514      	bpl.n	8005e84 <_printf_i+0x1ac>
 8005e5a:	07df      	lsls	r7, r3, #31
 8005e5c:	bf44      	itt	mi
 8005e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8005e62:	6023      	strmi	r3, [r4, #0]
 8005e64:	b91e      	cbnz	r6, 8005e6e <_printf_i+0x196>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	f023 0320 	bic.w	r3, r3, #32
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	2310      	movs	r3, #16
 8005e70:	e7b0      	b.n	8005dd4 <_printf_i+0xfc>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	f043 0320 	orr.w	r3, r3, #32
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	2378      	movs	r3, #120	; 0x78
 8005e7c:	4828      	ldr	r0, [pc, #160]	; (8005f20 <_printf_i+0x248>)
 8005e7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e82:	e7e3      	b.n	8005e4c <_printf_i+0x174>
 8005e84:	0659      	lsls	r1, r3, #25
 8005e86:	bf48      	it	mi
 8005e88:	b2b6      	uxthmi	r6, r6
 8005e8a:	e7e6      	b.n	8005e5a <_printf_i+0x182>
 8005e8c:	4615      	mov	r5, r2
 8005e8e:	e7bb      	b.n	8005e08 <_printf_i+0x130>
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	6826      	ldr	r6, [r4, #0]
 8005e94:	6961      	ldr	r1, [r4, #20]
 8005e96:	1d18      	adds	r0, r3, #4
 8005e98:	6028      	str	r0, [r5, #0]
 8005e9a:	0635      	lsls	r5, r6, #24
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	d501      	bpl.n	8005ea4 <_printf_i+0x1cc>
 8005ea0:	6019      	str	r1, [r3, #0]
 8005ea2:	e002      	b.n	8005eaa <_printf_i+0x1d2>
 8005ea4:	0670      	lsls	r0, r6, #25
 8005ea6:	d5fb      	bpl.n	8005ea0 <_printf_i+0x1c8>
 8005ea8:	8019      	strh	r1, [r3, #0]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	6123      	str	r3, [r4, #16]
 8005eae:	4615      	mov	r5, r2
 8005eb0:	e7ba      	b.n	8005e28 <_printf_i+0x150>
 8005eb2:	682b      	ldr	r3, [r5, #0]
 8005eb4:	1d1a      	adds	r2, r3, #4
 8005eb6:	602a      	str	r2, [r5, #0]
 8005eb8:	681d      	ldr	r5, [r3, #0]
 8005eba:	6862      	ldr	r2, [r4, #4]
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f7fa f98e 	bl	80001e0 <memchr>
 8005ec4:	b108      	cbz	r0, 8005eca <_printf_i+0x1f2>
 8005ec6:	1b40      	subs	r0, r0, r5
 8005ec8:	6060      	str	r0, [r4, #4]
 8005eca:	6863      	ldr	r3, [r4, #4]
 8005ecc:	6123      	str	r3, [r4, #16]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ed4:	e7a8      	b.n	8005e28 <_printf_i+0x150>
 8005ed6:	6923      	ldr	r3, [r4, #16]
 8005ed8:	462a      	mov	r2, r5
 8005eda:	4649      	mov	r1, r9
 8005edc:	4640      	mov	r0, r8
 8005ede:	47d0      	blx	sl
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d0ab      	beq.n	8005e3c <_printf_i+0x164>
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	079b      	lsls	r3, r3, #30
 8005ee8:	d413      	bmi.n	8005f12 <_printf_i+0x23a>
 8005eea:	68e0      	ldr	r0, [r4, #12]
 8005eec:	9b03      	ldr	r3, [sp, #12]
 8005eee:	4298      	cmp	r0, r3
 8005ef0:	bfb8      	it	lt
 8005ef2:	4618      	movlt	r0, r3
 8005ef4:	e7a4      	b.n	8005e40 <_printf_i+0x168>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	4632      	mov	r2, r6
 8005efa:	4649      	mov	r1, r9
 8005efc:	4640      	mov	r0, r8
 8005efe:	47d0      	blx	sl
 8005f00:	3001      	adds	r0, #1
 8005f02:	d09b      	beq.n	8005e3c <_printf_i+0x164>
 8005f04:	3501      	adds	r5, #1
 8005f06:	68e3      	ldr	r3, [r4, #12]
 8005f08:	9903      	ldr	r1, [sp, #12]
 8005f0a:	1a5b      	subs	r3, r3, r1
 8005f0c:	42ab      	cmp	r3, r5
 8005f0e:	dcf2      	bgt.n	8005ef6 <_printf_i+0x21e>
 8005f10:	e7eb      	b.n	8005eea <_printf_i+0x212>
 8005f12:	2500      	movs	r5, #0
 8005f14:	f104 0619 	add.w	r6, r4, #25
 8005f18:	e7f5      	b.n	8005f06 <_printf_i+0x22e>
 8005f1a:	bf00      	nop
 8005f1c:	08006105 	.word	0x08006105
 8005f20:	08006116 	.word	0x08006116

08005f24 <_read_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4d07      	ldr	r5, [pc, #28]	; (8005f44 <_read_r+0x20>)
 8005f28:	4604      	mov	r4, r0
 8005f2a:	4608      	mov	r0, r1
 8005f2c:	4611      	mov	r1, r2
 8005f2e:	2200      	movs	r2, #0
 8005f30:	602a      	str	r2, [r5, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f7fa fd90 	bl	8000a58 <_read>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_read_r+0x1e>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_read_r+0x1e>
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	20004b48 	.word	0x20004b48

08005f48 <_fstat_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4d07      	ldr	r5, [pc, #28]	; (8005f68 <_fstat_r+0x20>)
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4608      	mov	r0, r1
 8005f52:	4611      	mov	r1, r2
 8005f54:	602b      	str	r3, [r5, #0]
 8005f56:	f7fa fdc4 	bl	8000ae2 <_fstat>
 8005f5a:	1c43      	adds	r3, r0, #1
 8005f5c:	d102      	bne.n	8005f64 <_fstat_r+0x1c>
 8005f5e:	682b      	ldr	r3, [r5, #0]
 8005f60:	b103      	cbz	r3, 8005f64 <_fstat_r+0x1c>
 8005f62:	6023      	str	r3, [r4, #0]
 8005f64:	bd38      	pop	{r3, r4, r5, pc}
 8005f66:	bf00      	nop
 8005f68:	20004b48 	.word	0x20004b48

08005f6c <_isatty_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4d06      	ldr	r5, [pc, #24]	; (8005f88 <_isatty_r+0x1c>)
 8005f70:	2300      	movs	r3, #0
 8005f72:	4604      	mov	r4, r0
 8005f74:	4608      	mov	r0, r1
 8005f76:	602b      	str	r3, [r5, #0]
 8005f78:	f7fa fdc3 	bl	8000b02 <_isatty>
 8005f7c:	1c43      	adds	r3, r0, #1
 8005f7e:	d102      	bne.n	8005f86 <_isatty_r+0x1a>
 8005f80:	682b      	ldr	r3, [r5, #0]
 8005f82:	b103      	cbz	r3, 8005f86 <_isatty_r+0x1a>
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	bd38      	pop	{r3, r4, r5, pc}
 8005f88:	20004b48 	.word	0x20004b48

08005f8c <_init>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	bf00      	nop
 8005f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f92:	bc08      	pop	{r3}
 8005f94:	469e      	mov	lr, r3
 8005f96:	4770      	bx	lr

08005f98 <_fini>:
 8005f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9a:	bf00      	nop
 8005f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9e:	bc08      	pop	{r3}
 8005fa0:	469e      	mov	lr, r3
 8005fa2:	4770      	bx	lr
