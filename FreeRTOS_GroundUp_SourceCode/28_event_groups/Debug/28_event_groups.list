
28_event_groups.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d80  08005d80  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d88  08005d88  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d88  08005d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a10  20000074  08005e04  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a84  08005e04  00024a84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001870d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000365a  00000000  00000000  000387b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  0003be10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  0003d330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004fce  00000000  00000000  0003e708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018725  00000000  00000000  000436d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099b77  00000000  00000000  0005bdfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5972  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f18  00000000  00000000  000f59c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c18 	.word	0x08005c18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005c18 	.word	0x08005c18

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
void vEventBitSetter(void *pvParameter);
void vEventBitReader(void *pvParameter);


int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af02      	add	r7, sp, #8

  HAL_Init();
 80004ea:	f000 fb2d 	bl	8000b48 <HAL_Init>


  SystemClock_Config();
 80004ee:	f000 f881 	bl	80005f4 <SystemClock_Config>
  MX_GPIO_Init();
 80004f2:	f000 f8dd 	bl	80006b0 <MX_GPIO_Init>
  USART2_UART_TX_Init();
 80004f6:	f000 faaf 	bl	8000a58 <USART2_UART_TX_Init>
  printf("hello form stm32f4xx\r\n");
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <main+0x54>)
 80004fc:	f004 fefc 	bl	80052f8 <puts>
  xEventGroup=xEventGroupCreate();
 8000500:	f001 ffda 	bl	80024b8 <xEventGroupCreate>
 8000504:	4603      	mov	r3, r0
 8000506:	4a0d      	ldr	r2, [pc, #52]	; (800053c <main+0x58>)
 8000508:	6013      	str	r3, [r2, #0]
  xTaskCreate(vEventBitSetter, "Bit setter", 100, NULL, 1, NULL);
 800050a:	2300      	movs	r3, #0
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	2264      	movs	r2, #100	; 0x64
 8000516:	490a      	ldr	r1, [pc, #40]	; (8000540 <main+0x5c>)
 8000518:	480a      	ldr	r0, [pc, #40]	; (8000544 <main+0x60>)
 800051a:	f002 ff60 	bl	80033de <xTaskCreate>
  xTaskCreate(vEventBitReader, "Bit setter", 100, NULL, 1, NULL);
 800051e:	2300      	movs	r3, #0
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2300      	movs	r3, #0
 8000528:	2264      	movs	r2, #100	; 0x64
 800052a:	4905      	ldr	r1, [pc, #20]	; (8000540 <main+0x5c>)
 800052c:	4806      	ldr	r0, [pc, #24]	; (8000548 <main+0x64>)
 800052e:	f002 ff56 	bl	80033de <xTaskCreate>

  vTaskStartScheduler();
 8000532:	f003 f8cd 	bl	80036d0 <vTaskStartScheduler>
  while (1)
 8000536:	e7fe      	b.n	8000536 <main+0x52>
 8000538:	08005c30 	.word	0x08005c30
 800053c:	200000d4 	.word	0x200000d4
 8000540:	08005c48 	.word	0x08005c48
 8000544:	0800054d 	.word	0x0800054d
 8000548:	08000599 	.word	0x08000599

0800054c <vEventBitSetter>:
}



void vEventBitSetter(void *pvParameter)
	{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	const TickType_t xDelay500ms = pdMS_TO_TICKS(500UL);
 8000554:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000558:	60fb      	str	r3, [r7, #12]
	while(1)
		{
			vTaskDelay(xDelay500ms);
 800055a:	68f8      	ldr	r0, [r7, #12]
 800055c:	f003 f884 	bl	8003668 <vTaskDelay>
			printf("Bit setting task-\t about to set bit0\r\n");
 8000560:	480a      	ldr	r0, [pc, #40]	; (800058c <vEventBitSetter+0x40>)
 8000562:	f004 fec9 	bl	80052f8 <puts>
			xEventGroupSetBits(xEventGroup, TASK1_BIT);
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <vEventBitSetter+0x44>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2101      	movs	r1, #1
 800056c:	4618      	mov	r0, r3
 800056e:	f002 f88b 	bl	8002688 <xEventGroupSetBits>

			vTaskDelay(xDelay500ms);
 8000572:	68f8      	ldr	r0, [r7, #12]
 8000574:	f003 f878 	bl	8003668 <vTaskDelay>
			printf("Bit setting task-\t about to set bit1\r\n");
 8000578:	4806      	ldr	r0, [pc, #24]	; (8000594 <vEventBitSetter+0x48>)
 800057a:	f004 febd 	bl	80052f8 <puts>
			xEventGroupSetBits(xEventGroup, TASK2_BIT);
 800057e:	4b04      	ldr	r3, [pc, #16]	; (8000590 <vEventBitSetter+0x44>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2102      	movs	r1, #2
 8000584:	4618      	mov	r0, r3
 8000586:	f002 f87f 	bl	8002688 <xEventGroupSetBits>
			vTaskDelay(xDelay500ms);
 800058a:	e7e6      	b.n	800055a <vEventBitSetter+0xe>
 800058c:	08005c54 	.word	0x08005c54
 8000590:	200000d4 	.word	0x200000d4
 8000594:	08005c7c 	.word	0x08005c7c

08000598 <vEventBitReader>:
		}

	}
void vEventBitReader(void *pvParameter)
	{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af02      	add	r7, sp, #8
 800059e:	6078      	str	r0, [r7, #4]
	EventBits_t xEventGroupValue;
	const EventBits_t xBitsToWaitFor= (TASK1_BIT|TASK2_BIT);
 80005a0:	2303      	movs	r3, #3
 80005a2:	617b      	str	r3, [r7, #20]
	const TickType_t xDelay200ms = pdMS_TO_TICKS(200UL);
 80005a4:	23c8      	movs	r3, #200	; 0xc8
 80005a6:	613b      	str	r3, [r7, #16]
	while(1)
		{
		xEventGroupValue=xEventGroupWaitBits(xEventGroup, xBitsToWaitFor, pdTRUE, pdFALSE, portMAX_DELAY);
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <vEventBitReader+0x50>)
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	2201      	movs	r2, #1
 80005b6:	6979      	ldr	r1, [r7, #20]
 80005b8:	f001 ff98 	bl	80024ec <xEventGroupWaitBits>
 80005bc:	60f8      	str	r0, [r7, #12]
		if ((xEventGroupValue &TASK1_BIT)!=0)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <vEventBitReader+0x36>
				{
					printf("Bit reading task: event bit 0 set \r\n");
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <vEventBitReader+0x54>)
 80005ca:	f004 fe95 	bl	80052f8 <puts>
				}
		if ((xEventGroupValue &TASK2_BIT)!=0)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f003 0302 	and.w	r3, r3, #2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d002      	beq.n	80005de <vEventBitReader+0x46>
						{
							printf("Bit reading task: event bit 1 set \r\n");
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <vEventBitReader+0x58>)
 80005da:	f004 fe8d 	bl	80052f8 <puts>
						}

		vTaskDelay(xDelay200ms);
 80005de:	6938      	ldr	r0, [r7, #16]
 80005e0:	f003 f842 	bl	8003668 <vTaskDelay>
		xEventGroupValue=xEventGroupWaitBits(xEventGroup, xBitsToWaitFor, pdTRUE, pdFALSE, portMAX_DELAY);
 80005e4:	e7e0      	b.n	80005a8 <vEventBitReader+0x10>
 80005e6:	bf00      	nop
 80005e8:	200000d4 	.word	0x200000d4
 80005ec:	08005ca4 	.word	0x08005ca4
 80005f0:	08005cc8 	.word	0x08005cc8

080005f4 <SystemClock_Config>:

	}


void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f004 fe02 	bl	800520c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SystemClock_Config+0xb4>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <SystemClock_Config+0xb4>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SystemClock_Config+0xb4>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <SystemClock_Config+0xb8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <SystemClock_Config+0xb8>)
 800063e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <SystemClock_Config+0xb8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065c:	2300      	movs	r3, #0
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fd17 	bl	8001098 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000670:	f000 f84a 	bl	8000708 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f000 ff7a 	bl	8001588 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800069a:	f000 f835 	bl	8000708 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	; 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_GPIO_Init+0x30>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <MX_GPIO_Init+0x30>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_GPIO_Init+0x30>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800

080006e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d101      	bne.n	80006fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006f6:	f000 fa49 	bl	8000b8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40014800 	.word	0x40014800

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x8>
	...

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_MspInit+0x54>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	4a11      	ldr	r2, [pc, #68]	; (8000768 <HAL_MspInit+0x54>)
 8000724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000728:	6453      	str	r3, [r2, #68]	; 0x44
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_MspInit+0x54>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <HAL_MspInit+0x54>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <HAL_MspInit+0x54>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	6413      	str	r3, [r2, #64]	; 0x40
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <HAL_MspInit+0x54>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	210f      	movs	r1, #15
 8000756:	f06f 0001 	mvn.w	r0, #1
 800075a:	f000 faef 	bl	8000d3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a19      	ldr	r2, [pc, #100]	; (80007f0 <HAL_UART_MspInit+0x84>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d12b      	bne.n	80007e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <HAL_UART_MspInit+0x88>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <HAL_UART_MspInit+0x88>)
 8000798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <HAL_UART_MspInit+0x88>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <HAL_UART_MspInit+0x88>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <HAL_UART_MspInit+0x88>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_UART_MspInit+0x88>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007c6:	230c      	movs	r3, #12
 80007c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007d6:	2307      	movs	r3, #7
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <HAL_UART_MspInit+0x8c>)
 80007e2:	f000 fad5 	bl	8000d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007e6:	bf00      	nop
 80007e8:	3728      	adds	r7, #40	; 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40004400 	.word	0x40004400
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020000 	.word	0x40020000

080007fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 800080c:	2200      	movs	r2, #0
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	201a      	movs	r0, #26
 8000812:	f000 fa93 	bl	8000d3c <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000816:	201a      	movs	r0, #26
 8000818:	f000 faac 	bl	8000d74 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <HAL_InitTick+0xa0>)
 8000822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000824:	4a1d      	ldr	r2, [pc, #116]	; (800089c <HAL_InitTick+0xa0>)
 8000826:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800082a:	6453      	str	r3, [r2, #68]	; 0x44
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <HAL_InitTick+0xa0>)
 800082e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000838:	f107 0210 	add.w	r2, r7, #16
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f001 f880 	bl	8001948 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000848:	f001 f86a 	bl	8001920 <HAL_RCC_GetPCLK2Freq>
 800084c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800084e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000850:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <HAL_InitTick+0xa4>)
 8000852:	fba2 2303 	umull	r2, r3, r2, r3
 8000856:	0c9b      	lsrs	r3, r3, #18
 8000858:	3b01      	subs	r3, #1
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_InitTick+0xa8>)
 800085e:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <HAL_InitTick+0xac>)
 8000860:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <HAL_InitTick+0xa8>)
 8000864:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000868:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800086a:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <HAL_InitTick+0xa8>)
 800086c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800086e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_InitTick+0xa8>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_InitTick+0xa8>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 800087c:	4809      	ldr	r0, [pc, #36]	; (80008a4 <HAL_InitTick+0xa8>)
 800087e:	f001 f895 	bl	80019ac <HAL_TIM_Base_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d104      	bne.n	8000892 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000888:	4806      	ldr	r0, [pc, #24]	; (80008a4 <HAL_InitTick+0xa8>)
 800088a:	f001 f8e9 	bl	8001a60 <HAL_TIM_Base_Start_IT>
 800088e:	4603      	mov	r3, r0
 8000890:	e000      	b.n	8000894 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
}
 8000894:	4618      	mov	r0, r3
 8000896:	3730      	adds	r7, #48	; 0x30
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	431bde83 	.word	0x431bde83
 80008a4:	200000d8 	.word	0x200000d8
 80008a8:	40014800 	.word	0x40014800

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler+0x4>

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <MemManage_Handler+0x4>

080008be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <UsageFault_Handler+0x4>

080008ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80008de:	f001 f921 	bl	8001b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200000d8 	.word	0x200000d8

080008ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	e00a      	b.n	8000914 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008fe:	f3af 8000 	nop.w
 8000902:	4601      	mov	r1, r0
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	60ba      	str	r2, [r7, #8]
 800090a:	b2ca      	uxtb	r2, r1
 800090c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	3301      	adds	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697a      	ldr	r2, [r7, #20]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	429a      	cmp	r2, r3
 800091a:	dbf0      	blt.n	80008fe <_read+0x12>
	}

return len;
 800091c:	687b      	ldr	r3, [r7, #4]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	e009      	b.n	800094c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	60ba      	str	r2, [r7, #8]
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f8cb 	bl	8000adc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	3301      	adds	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	429a      	cmp	r2, r3
 8000952:	dbf1      	blt.n	8000938 <_write+0x12>
	}
	return len;
 8000954:	687b      	ldr	r3, [r7, #4]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_close>:

int _close(int file)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
	return -1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000986:	605a      	str	r2, [r3, #4]
	return 0;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <_isatty>:

int _isatty(int file)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
	return 1;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
	return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
	...

080009c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d0:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <_sbrk+0x5c>)
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <_sbrk+0x60>)
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <_sbrk+0x64>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <_sbrk+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d207      	bcs.n	8000a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f8:	f004 fbd0 	bl	800519c <__errno>
 80009fc:	4603      	mov	r3, r0
 80009fe:	220c      	movs	r2, #12
 8000a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a06:	e009      	b.n	8000a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <_sbrk+0x64>)
 8000a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20020000 	.word	0x20020000
 8000a28:	00000400 	.word	0x00000400
 8000a2c:	20000120 	.word	0x20000120
 8000a30:	20004a88 	.word	0x20004a88

08000a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <SystemInit+0x20>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <SystemInit+0x20>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <USART2_UART_TX_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
 void USART2_UART_TX_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <USART2_UART_TX_Init+0x4c>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <USART2_UART_TX_Init+0x50>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <USART2_UART_TX_Init+0x4c>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <USART2_UART_TX_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <USART2_UART_TX_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <USART2_UART_TX_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <USART2_UART_TX_Init+0x4c>)
 8000a7e:	2208      	movs	r2, #8
 8000a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <USART2_UART_TX_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <USART2_UART_TX_Init+0x4c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <USART2_UART_TX_Init+0x4c>)
 8000a90:	f001 fa0c 	bl	8001eac <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <USART2_UART_TX_Init+0x46>
  {
    Error_Handler();
 8000a9a:	f7ff fe35 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000090 	.word	0x20000090
 8000aa8:	40004400 	.word	0x40004400

08000aac <uart2_write>:




 int uart2_write(int ch)
 	{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 	/*Make sure the transmit data register is empty*/
 	while(!(USART2->SR & USART_SR_TXE)){}
 8000ab4:	bf00      	nop
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <uart2_write+0x2c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d0f9      	beq.n	8000ab6 <uart2_write+0xa>

 	 /*Write to transmit data register*/
 	USART2->DR	=  (ch & 0xFF);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <uart2_write+0x2c>)
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	6053      	str	r3, [r2, #4]
 	return ch;
 8000aca:	687b      	ldr	r3, [r7, #4]
 	}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	40004400 	.word	0x40004400

08000adc <__io_putchar>:


 int __io_putchar(int ch)
 	{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	 uart2_write(ch);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ffe1 	bl	8000aac <uart2_write>
 	return ch;
 8000aea:	687b      	ldr	r3, [r7, #4]
 	}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000afa:	490e      	ldr	r1, [pc, #56]	; (8000b34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000afc:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b10:	4c0b      	ldr	r4, [pc, #44]	; (8000b40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b1e:	f7ff ff89 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f004 fb41 	bl	80051a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b26:	f7ff fcdd 	bl	80004e4 <main>
  bx  lr    
 8000b2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b38:	08005d90 	.word	0x08005d90
  ldr r2, =_sbss
 8000b3c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b40:	20004a84 	.word	0x20004a84

08000b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <HAL_Init+0x40>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_Init+0x40>)
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_Init+0x40>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f8d8 	bl	8000d26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	200f      	movs	r0, #15
 8000b78:	f7ff fe40 	bl	80007fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fdca 	bl	8000714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000124 	.word	0x20000124

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000124 	.word	0x20000124

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0b      	blt.n	8000c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	4907      	ldr	r1, [pc, #28]	; (8000c68 <__NVIC_EnableIRQ+0x38>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	2001      	movs	r0, #1
 8000c52:	fa00 f202 	lsl.w	r2, r0, r2
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	; 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ff4c 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4e:	f7ff ff61 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	68b9      	ldr	r1, [r7, #8]
 8000d58:	6978      	ldr	r0, [r7, #20]
 8000d5a:	f7ff ffb1 	bl	8000cc0 <NVIC_EncodePriority>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff80 	bl	8000c6c <__NVIC_SetPriority>
}
 8000d6c:	bf00      	nop
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff54 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	e159      	b.n	8001060 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f040 8148 	bne.w	800105a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d005      	beq.n	8000de2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d130      	bne.n	8000e44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	091b      	lsrs	r3, r3, #4
 8000e2e:	f003 0201 	and.w	r2, r3, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d017      	beq.n	8000e80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d123      	bne.n	8000ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691a      	ldr	r2, [r3, #16]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3208      	adds	r2, #8
 8000ece:	69b9      	ldr	r1, [r7, #24]
 8000ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0203 	and.w	r2, r3, #3
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80a2 	beq.w	800105a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b57      	ldr	r3, [pc, #348]	; (8001078 <HAL_GPIO_Init+0x2e8>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a56      	ldr	r2, [pc, #344]	; (8001078 <HAL_GPIO_Init+0x2e8>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b54      	ldr	r3, [pc, #336]	; (8001078 <HAL_GPIO_Init+0x2e8>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f32:	4a52      	ldr	r2, [pc, #328]	; (800107c <HAL_GPIO_Init+0x2ec>)
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	220f      	movs	r2, #15
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a49      	ldr	r2, [pc, #292]	; (8001080 <HAL_GPIO_Init+0x2f0>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d019      	beq.n	8000f92 <HAL_GPIO_Init+0x202>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a48      	ldr	r2, [pc, #288]	; (8001084 <HAL_GPIO_Init+0x2f4>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0x1fe>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a47      	ldr	r2, [pc, #284]	; (8001088 <HAL_GPIO_Init+0x2f8>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00d      	beq.n	8000f8a <HAL_GPIO_Init+0x1fa>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a46      	ldr	r2, [pc, #280]	; (800108c <HAL_GPIO_Init+0x2fc>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x1f6>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a45      	ldr	r2, [pc, #276]	; (8001090 <HAL_GPIO_Init+0x300>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x1f2>
 8000f7e:	2304      	movs	r3, #4
 8000f80:	e008      	b.n	8000f94 <HAL_GPIO_Init+0x204>
 8000f82:	2307      	movs	r3, #7
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x204>
 8000f86:	2303      	movs	r3, #3
 8000f88:	e004      	b.n	8000f94 <HAL_GPIO_Init+0x204>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_Init+0x204>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <HAL_GPIO_Init+0x204>
 8000f92:	2300      	movs	r3, #0
 8000f94:	69fa      	ldr	r2, [r7, #28]
 8000f96:	f002 0203 	and.w	r2, r2, #3
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	4093      	lsls	r3, r2
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa4:	4935      	ldr	r1, [pc, #212]	; (800107c <HAL_GPIO_Init+0x2ec>)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb2:	4b38      	ldr	r3, [pc, #224]	; (8001094 <HAL_GPIO_Init+0x304>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd6:	4a2f      	ldr	r2, [pc, #188]	; (8001094 <HAL_GPIO_Init+0x304>)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fdc:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <HAL_GPIO_Init+0x304>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001000:	4a24      	ldr	r2, [pc, #144]	; (8001094 <HAL_GPIO_Init+0x304>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <HAL_GPIO_Init+0x304>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800102a:	4a1a      	ldr	r2, [pc, #104]	; (8001094 <HAL_GPIO_Init+0x304>)
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_GPIO_Init+0x304>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001054:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <HAL_GPIO_Init+0x304>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3301      	adds	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	2b0f      	cmp	r3, #15
 8001064:	f67f aea2 	bls.w	8000dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	40013800 	.word	0x40013800
 8001080:	40020000 	.word	0x40020000
 8001084:	40020400 	.word	0x40020400
 8001088:	40020800 	.word	0x40020800
 800108c:	40020c00 	.word	0x40020c00
 8001090:	40021000 	.word	0x40021000
 8001094:	40013c00 	.word	0x40013c00

08001098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e267      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d075      	beq.n	80011a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010b6:	4b88      	ldr	r3, [pc, #544]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d00c      	beq.n	80010dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010c2:	4b85      	ldr	r3, [pc, #532]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d112      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ce:	4b82      	ldr	r3, [pc, #520]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010da:	d10b      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010dc:	4b7e      	ldr	r3, [pc, #504]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d05b      	beq.n	80011a0 <HAL_RCC_OscConfig+0x108>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d157      	bne.n	80011a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e242      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010fc:	d106      	bne.n	800110c <HAL_RCC_OscConfig+0x74>
 80010fe:	4b76      	ldr	r3, [pc, #472]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a75      	ldr	r2, [pc, #468]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e01d      	b.n	8001148 <HAL_RCC_OscConfig+0xb0>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001114:	d10c      	bne.n	8001130 <HAL_RCC_OscConfig+0x98>
 8001116:	4b70      	ldr	r3, [pc, #448]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a6f      	ldr	r2, [pc, #444]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b6d      	ldr	r3, [pc, #436]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a6c      	ldr	r2, [pc, #432]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e00b      	b.n	8001148 <HAL_RCC_OscConfig+0xb0>
 8001130:	4b69      	ldr	r3, [pc, #420]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a68      	ldr	r2, [pc, #416]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b66      	ldr	r3, [pc, #408]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a65      	ldr	r2, [pc, #404]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fd30 	bl	8000bb4 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fd2c 	bl	8000bb4 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e207      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	4b5b      	ldr	r3, [pc, #364]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0xc0>
 8001176:	e014      	b.n	80011a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fd1c 	bl	8000bb4 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fd18 	bl	8000bb4 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	; 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e1f3      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001192:	4b51      	ldr	r3, [pc, #324]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0xe8>
 800119e:	e000      	b.n	80011a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d063      	beq.n	8001276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ae:	4b4a      	ldr	r3, [pc, #296]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00b      	beq.n	80011d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ba:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d11c      	bne.n	8001200 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c6:	4b44      	ldr	r3, [pc, #272]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d116      	bne.n	8001200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d2:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <HAL_RCC_OscConfig+0x152>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d001      	beq.n	80011ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e1c7      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ea:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4937      	ldr	r1, [pc, #220]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fe:	e03a      	b.n	8001276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d020      	beq.n	800124a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001208:	4b34      	ldr	r3, [pc, #208]	; (80012dc <HAL_RCC_OscConfig+0x244>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120e:	f7ff fcd1 	bl	8000bb4 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001216:	f7ff fccd 	bl	8000bb4 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e1a8      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001228:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001234:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4925      	ldr	r1, [pc, #148]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]
 8001248:	e015      	b.n	8001276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124a:	4b24      	ldr	r3, [pc, #144]	; (80012dc <HAL_RCC_OscConfig+0x244>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001250:	f7ff fcb0 	bl	8000bb4 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001258:	f7ff fcac 	bl	8000bb4 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e187      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d036      	beq.n	80012f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d016      	beq.n	80012b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_RCC_OscConfig+0x248>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001290:	f7ff fc90 	bl	8000bb4 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001298:	f7ff fc8c 	bl	8000bb4 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e167      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_RCC_OscConfig+0x240>)
 80012ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0x200>
 80012b6:	e01b      	b.n	80012f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_RCC_OscConfig+0x248>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012be:	f7ff fc79 	bl	8000bb4 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c4:	e00e      	b.n	80012e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c6:	f7ff fc75 	bl	8000bb4 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d907      	bls.n	80012e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e150      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
 80012d8:	40023800 	.word	0x40023800
 80012dc:	42470000 	.word	0x42470000
 80012e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e4:	4b88      	ldr	r3, [pc, #544]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 80012e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1ea      	bne.n	80012c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 8097 	beq.w	800142c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001302:	4b81      	ldr	r3, [pc, #516]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10f      	bne.n	800132e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b7d      	ldr	r3, [pc, #500]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a7c      	ldr	r2, [pc, #496]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b7a      	ldr	r3, [pc, #488]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800132a:	2301      	movs	r3, #1
 800132c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132e:	4b77      	ldr	r3, [pc, #476]	; (800150c <HAL_RCC_OscConfig+0x474>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001336:	2b00      	cmp	r3, #0
 8001338:	d118      	bne.n	800136c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800133a:	4b74      	ldr	r3, [pc, #464]	; (800150c <HAL_RCC_OscConfig+0x474>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a73      	ldr	r2, [pc, #460]	; (800150c <HAL_RCC_OscConfig+0x474>)
 8001340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001346:	f7ff fc35 	bl	8000bb4 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800134e:	f7ff fc31 	bl	8000bb4 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e10c      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001360:	4b6a      	ldr	r3, [pc, #424]	; (800150c <HAL_RCC_OscConfig+0x474>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d106      	bne.n	8001382 <HAL_RCC_OscConfig+0x2ea>
 8001374:	4b64      	ldr	r3, [pc, #400]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 8001376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001378:	4a63      	ldr	r2, [pc, #396]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6713      	str	r3, [r2, #112]	; 0x70
 8001380:	e01c      	b.n	80013bc <HAL_RCC_OscConfig+0x324>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b05      	cmp	r3, #5
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x30c>
 800138a:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 800138c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138e:	4a5e      	ldr	r2, [pc, #376]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6713      	str	r3, [r2, #112]	; 0x70
 8001396:	4b5c      	ldr	r3, [pc, #368]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139a:	4a5b      	ldr	r2, [pc, #364]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6713      	str	r3, [r2, #112]	; 0x70
 80013a2:	e00b      	b.n	80013bc <HAL_RCC_OscConfig+0x324>
 80013a4:	4b58      	ldr	r3, [pc, #352]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a8:	4a57      	ldr	r2, [pc, #348]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 80013aa:	f023 0301 	bic.w	r3, r3, #1
 80013ae:	6713      	str	r3, [r2, #112]	; 0x70
 80013b0:	4b55      	ldr	r3, [pc, #340]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 80013b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b4:	4a54      	ldr	r2, [pc, #336]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 80013b6:	f023 0304 	bic.w	r3, r3, #4
 80013ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d015      	beq.n	80013f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c4:	f7ff fbf6 	bl	8000bb4 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013cc:	f7ff fbf2 	bl	8000bb4 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e0cb      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e2:	4b49      	ldr	r3, [pc, #292]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0ee      	beq.n	80013cc <HAL_RCC_OscConfig+0x334>
 80013ee:	e014      	b.n	800141a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f0:	f7ff fbe0 	bl	8000bb4 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f6:	e00a      	b.n	800140e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f8:	f7ff fbdc 	bl	8000bb4 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	f241 3288 	movw	r2, #5000	; 0x1388
 8001406:	4293      	cmp	r3, r2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e0b5      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140e:	4b3e      	ldr	r3, [pc, #248]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1ee      	bne.n	80013f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d105      	bne.n	800142c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001420:	4b39      	ldr	r3, [pc, #228]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	4a38      	ldr	r2, [pc, #224]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 8001426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800142a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a1 	beq.w	8001578 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001436:	4b34      	ldr	r3, [pc, #208]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b08      	cmp	r3, #8
 8001440:	d05c      	beq.n	80014fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d141      	bne.n	80014ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144a:	4b31      	ldr	r3, [pc, #196]	; (8001510 <HAL_RCC_OscConfig+0x478>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fbb0 	bl	8000bb4 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff fbac 	bl	8000bb4 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e087      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146a:	4b27      	ldr	r3, [pc, #156]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69da      	ldr	r2, [r3, #28]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	019b      	lsls	r3, r3, #6
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	3b01      	subs	r3, #1
 8001490:	041b      	lsls	r3, r3, #16
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	061b      	lsls	r3, r3, #24
 800149a:	491b      	ldr	r1, [pc, #108]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_RCC_OscConfig+0x478>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fb85 	bl	8000bb4 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff fb81 	bl	8000bb4 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e05c      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x416>
 80014cc:	e054      	b.n	8001578 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_RCC_OscConfig+0x478>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fb6e 	bl	8000bb4 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014dc:	f7ff fb6a 	bl	8000bb4 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e045      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_RCC_OscConfig+0x470>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x444>
 80014fa:	e03d      	b.n	8001578 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d107      	bne.n	8001514 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e038      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000
 8001510:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_RCC_OscConfig+0x4ec>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d028      	beq.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d121      	bne.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d11a      	bne.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001544:	4013      	ands	r3, r2
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800154a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800154c:	4293      	cmp	r3, r2
 800154e:	d111      	bne.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	3b01      	subs	r3, #1
 800155e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d107      	bne.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0cc      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800159c:	4b68      	ldr	r3, [pc, #416]	; (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d90c      	bls.n	80015c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015aa:	4b65      	ldr	r3, [pc, #404]	; (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b63      	ldr	r3, [pc, #396]	; (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0b8      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015dc:	4b59      	ldr	r3, [pc, #356]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4a58      	ldr	r2, [pc, #352]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f4:	4b53      	ldr	r3, [pc, #332]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a52      	ldr	r2, [pc, #328]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001600:	4b50      	ldr	r3, [pc, #320]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	494d      	ldr	r1, [pc, #308]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	4313      	orrs	r3, r2
 8001610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d044      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b47      	ldr	r3, [pc, #284]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d119      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e07f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d003      	beq.n	8001646 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001642:	2b03      	cmp	r3, #3
 8001644:	d107      	bne.n	8001656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001646:	4b3f      	ldr	r3, [pc, #252]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e06f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001656:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e067      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001666:	4b37      	ldr	r3, [pc, #220]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f023 0203 	bic.w	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4934      	ldr	r1, [pc, #208]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	4313      	orrs	r3, r2
 8001676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001678:	f7ff fa9c 	bl	8000bb4 <HAL_GetTick>
 800167c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167e:	e00a      	b.n	8001696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001680:	f7ff fa98 	bl	8000bb4 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e04f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 020c 	and.w	r2, r3, #12
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d1eb      	bne.n	8001680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d20c      	bcs.n	80016d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b6:	4b22      	ldr	r3, [pc, #136]	; (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e032      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4916      	ldr	r1, [pc, #88]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d009      	beq.n	800170e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	490e      	ldr	r1, [pc, #56]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800170e:	f000 f821 	bl	8001754 <HAL_RCC_GetSysClockFreq>
 8001712:	4602      	mov	r2, r0
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	490a      	ldr	r1, [pc, #40]	; (8001748 <HAL_RCC_ClockConfig+0x1c0>)
 8001720:	5ccb      	ldrb	r3, [r1, r3]
 8001722:	fa22 f303 	lsr.w	r3, r2, r3
 8001726:	4a09      	ldr	r2, [pc, #36]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff f864 	bl	80007fc <HAL_InitTick>

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023c00 	.word	0x40023c00
 8001744:	40023800 	.word	0x40023800
 8001748:	08005d04 	.word	0x08005d04
 800174c:	20000000 	.word	0x20000000
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001758:	b090      	sub	sp, #64	; 0x40
 800175a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	637b      	str	r3, [r7, #52]	; 0x34
 8001760:	2300      	movs	r3, #0
 8001762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001764:	2300      	movs	r3, #0
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800176c:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b08      	cmp	r3, #8
 8001776:	d00d      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x40>
 8001778:	2b08      	cmp	r3, #8
 800177a:	f200 80a1 	bhi.w	80018c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x34>
 8001782:	2b04      	cmp	r3, #4
 8001784:	d003      	beq.n	800178e <HAL_RCC_GetSysClockFreq+0x3a>
 8001786:	e09b      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001788:	4b53      	ldr	r3, [pc, #332]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800178a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800178c:	e09b      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800178e:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_RCC_GetSysClockFreq+0x188>)
 8001790:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001792:	e098      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001794:	4b4f      	ldr	r3, [pc, #316]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800179e:	4b4d      	ldr	r3, [pc, #308]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d028      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017aa:	4b4a      	ldr	r3, [pc, #296]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	099b      	lsrs	r3, r3, #6
 80017b0:	2200      	movs	r2, #0
 80017b2:	623b      	str	r3, [r7, #32]
 80017b4:	627a      	str	r2, [r7, #36]	; 0x24
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017bc:	2100      	movs	r1, #0
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_RCC_GetSysClockFreq+0x188>)
 80017c0:	fb03 f201 	mul.w	r2, r3, r1
 80017c4:	2300      	movs	r3, #0
 80017c6:	fb00 f303 	mul.w	r3, r0, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	4a43      	ldr	r2, [pc, #268]	; (80018dc <HAL_RCC_GetSysClockFreq+0x188>)
 80017ce:	fba0 1202 	umull	r1, r2, r0, r2
 80017d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017d4:	460a      	mov	r2, r1
 80017d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80017d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017da:	4413      	add	r3, r2
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e0:	2200      	movs	r2, #0
 80017e2:	61bb      	str	r3, [r7, #24]
 80017e4:	61fa      	str	r2, [r7, #28]
 80017e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017ee:	f7fe fcf7 	bl	80001e0 <__aeabi_uldivmod>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4613      	mov	r3, r2
 80017f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017fa:	e053      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fc:	4b35      	ldr	r3, [pc, #212]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	099b      	lsrs	r3, r3, #6
 8001802:	2200      	movs	r2, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	617a      	str	r2, [r7, #20]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800180e:	f04f 0b00 	mov.w	fp, #0
 8001812:	4652      	mov	r2, sl
 8001814:	465b      	mov	r3, fp
 8001816:	f04f 0000 	mov.w	r0, #0
 800181a:	f04f 0100 	mov.w	r1, #0
 800181e:	0159      	lsls	r1, r3, #5
 8001820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001824:	0150      	lsls	r0, r2, #5
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	ebb2 080a 	subs.w	r8, r2, sl
 800182e:	eb63 090b 	sbc.w	r9, r3, fp
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800183e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001842:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001846:	ebb2 0408 	subs.w	r4, r2, r8
 800184a:	eb63 0509 	sbc.w	r5, r3, r9
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	00eb      	lsls	r3, r5, #3
 8001858:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800185c:	00e2      	lsls	r2, r4, #3
 800185e:	4614      	mov	r4, r2
 8001860:	461d      	mov	r5, r3
 8001862:	eb14 030a 	adds.w	r3, r4, sl
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	eb45 030b 	adc.w	r3, r5, fp
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800187a:	4629      	mov	r1, r5
 800187c:	028b      	lsls	r3, r1, #10
 800187e:	4621      	mov	r1, r4
 8001880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001884:	4621      	mov	r1, r4
 8001886:	028a      	lsls	r2, r1, #10
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188e:	2200      	movs	r2, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	60fa      	str	r2, [r7, #12]
 8001894:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001898:	f7fe fca2 	bl	80001e0 <__aeabi_uldivmod>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4613      	mov	r3, r2
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	0c1b      	lsrs	r3, r3, #16
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	3301      	adds	r3, #1
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80018b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018be:	e002      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80018c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3740      	adds	r7, #64	; 0x40
 80018cc:	46bd      	mov	sp, r7
 80018ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	00f42400 	.word	0x00f42400
 80018dc:	017d7840 	.word	0x017d7840

080018e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000000 	.word	0x20000000

080018f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018fc:	f7ff fff0 	bl	80018e0 <HAL_RCC_GetHCLKFreq>
 8001900:	4602      	mov	r2, r0
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	0a9b      	lsrs	r3, r3, #10
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	4903      	ldr	r1, [pc, #12]	; (800191c <HAL_RCC_GetPCLK1Freq+0x24>)
 800190e:	5ccb      	ldrb	r3, [r1, r3]
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001914:	4618      	mov	r0, r3
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	08005d14 	.word	0x08005d14

08001920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001924:	f7ff ffdc 	bl	80018e0 <HAL_RCC_GetHCLKFreq>
 8001928:	4602      	mov	r2, r0
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	0b5b      	lsrs	r3, r3, #13
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	4903      	ldr	r1, [pc, #12]	; (8001944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001936:	5ccb      	ldrb	r3, [r1, r3]
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800193c:	4618      	mov	r0, r3
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	08005d14 	.word	0x08005d14

08001948 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	220f      	movs	r2, #15
 8001956:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_RCC_GetClockConfig+0x5c>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0203 	and.w	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_RCC_GetClockConfig+0x5c>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	08db      	lsrs	r3, r3, #3
 8001982:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <HAL_RCC_GetClockConfig+0x60>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0207 	and.w	r2, r3, #7
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	601a      	str	r2, [r3, #0]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40023c00 	.word	0x40023c00

080019ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e041      	b.n	8001a42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f839 	bl	8001a4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2202      	movs	r2, #2
 80019dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3304      	adds	r3, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4610      	mov	r0, r2
 80019ec:	f000 f9ca 	bl	8001d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d001      	beq.n	8001a78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e044      	b.n	8001b02 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0201 	orr.w	r2, r2, #1
 8001a8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1e      	ldr	r2, [pc, #120]	; (8001b10 <HAL_TIM_Base_Start_IT+0xb0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d018      	beq.n	8001acc <HAL_TIM_Base_Start_IT+0x6c>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa2:	d013      	beq.n	8001acc <HAL_TIM_Base_Start_IT+0x6c>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a1a      	ldr	r2, [pc, #104]	; (8001b14 <HAL_TIM_Base_Start_IT+0xb4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00e      	beq.n	8001acc <HAL_TIM_Base_Start_IT+0x6c>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a19      	ldr	r2, [pc, #100]	; (8001b18 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d009      	beq.n	8001acc <HAL_TIM_Base_Start_IT+0x6c>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <HAL_TIM_Base_Start_IT+0xbc>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d004      	beq.n	8001acc <HAL_TIM_Base_Start_IT+0x6c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a16      	ldr	r2, [pc, #88]	; (8001b20 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d111      	bne.n	8001af0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d010      	beq.n	8001b00 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0201 	orr.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aee:	e007      	b.n	8001b00 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40010000 	.word	0x40010000
 8001b14:	40000400 	.word	0x40000400
 8001b18:	40000800 	.word	0x40000800
 8001b1c:	40000c00 	.word	0x40000c00
 8001b20:	40014000 	.word	0x40014000

08001b24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d122      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d11b      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f06f 0202 	mvn.w	r2, #2
 8001b50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f8ee 	bl	8001d48 <HAL_TIM_IC_CaptureCallback>
 8001b6c:	e005      	b.n	8001b7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f8e0 	bl	8001d34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f8f1 	bl	8001d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d122      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0204 	mvn.w	r2, #4
 8001ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f8c4 	bl	8001d48 <HAL_TIM_IC_CaptureCallback>
 8001bc0:	e005      	b.n	8001bce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f8b6 	bl	8001d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f8c7 	bl	8001d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d122      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d11b      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0208 	mvn.w	r2, #8
 8001bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f89a 	bl	8001d48 <HAL_TIM_IC_CaptureCallback>
 8001c14:	e005      	b.n	8001c22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f88c 	bl	8001d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f89d 	bl	8001d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b10      	cmp	r3, #16
 8001c34:	d122      	bne.n	8001c7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b10      	cmp	r3, #16
 8001c42:	d11b      	bne.n	8001c7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0210 	mvn.w	r2, #16
 8001c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2208      	movs	r2, #8
 8001c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f870 	bl	8001d48 <HAL_TIM_IC_CaptureCallback>
 8001c68:	e005      	b.n	8001c76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f862 	bl	8001d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f873 	bl	8001d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d10e      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d107      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f06f 0201 	mvn.w	r2, #1
 8001ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7fe fd1e 	bl	80006e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb2:	2b80      	cmp	r3, #128	; 0x80
 8001cb4:	d10e      	bne.n	8001cd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc0:	2b80      	cmp	r3, #128	; 0x80
 8001cc2:	d107      	bne.n	8001cd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8e2 	bl	8001e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cde:	2b40      	cmp	r3, #64	; 0x40
 8001ce0:	d10e      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cec:	2b40      	cmp	r3, #64	; 0x40
 8001cee:	d107      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f838 	bl	8001d70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0320 	and.w	r3, r3, #32
 8001d0a:	2b20      	cmp	r3, #32
 8001d0c:	d10e      	bne.n	8001d2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	2b20      	cmp	r3, #32
 8001d1a:	d107      	bne.n	8001d2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0220 	mvn.w	r2, #32
 8001d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8ac 	bl	8001e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a34      	ldr	r2, [pc, #208]	; (8001e68 <TIM_Base_SetConfig+0xe4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d00f      	beq.n	8001dbc <TIM_Base_SetConfig+0x38>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da2:	d00b      	beq.n	8001dbc <TIM_Base_SetConfig+0x38>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a31      	ldr	r2, [pc, #196]	; (8001e6c <TIM_Base_SetConfig+0xe8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d007      	beq.n	8001dbc <TIM_Base_SetConfig+0x38>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a30      	ldr	r2, [pc, #192]	; (8001e70 <TIM_Base_SetConfig+0xec>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d003      	beq.n	8001dbc <TIM_Base_SetConfig+0x38>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a2f      	ldr	r2, [pc, #188]	; (8001e74 <TIM_Base_SetConfig+0xf0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d108      	bne.n	8001dce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a25      	ldr	r2, [pc, #148]	; (8001e68 <TIM_Base_SetConfig+0xe4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01b      	beq.n	8001e0e <TIM_Base_SetConfig+0x8a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ddc:	d017      	beq.n	8001e0e <TIM_Base_SetConfig+0x8a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a22      	ldr	r2, [pc, #136]	; (8001e6c <TIM_Base_SetConfig+0xe8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <TIM_Base_SetConfig+0x8a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a21      	ldr	r2, [pc, #132]	; (8001e70 <TIM_Base_SetConfig+0xec>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00f      	beq.n	8001e0e <TIM_Base_SetConfig+0x8a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <TIM_Base_SetConfig+0xf0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00b      	beq.n	8001e0e <TIM_Base_SetConfig+0x8a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <TIM_Base_SetConfig+0xf4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d007      	beq.n	8001e0e <TIM_Base_SetConfig+0x8a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <TIM_Base_SetConfig+0xf8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d003      	beq.n	8001e0e <TIM_Base_SetConfig+0x8a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <TIM_Base_SetConfig+0xfc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d108      	bne.n	8001e20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <TIM_Base_SetConfig+0xe4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d103      	bne.n	8001e54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	615a      	str	r2, [r3, #20]
}
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40000800 	.word	0x40000800
 8001e74:	40000c00 	.word	0x40000c00
 8001e78:	40014000 	.word	0x40014000
 8001e7c:	40014400 	.word	0x40014400
 8001e80:	40014800 	.word	0x40014800

08001e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e03f      	b.n	8001f3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d106      	bne.n	8001ed8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7fe fc4a 	bl	800076c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2224      	movs	r2, #36	; 0x24
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f829 	bl	8001f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	695a      	ldr	r2, [r3, #20]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f4c:	b0c0      	sub	sp, #256	; 0x100
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f64:	68d9      	ldr	r1, [r3, #12]
 8001f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	ea40 0301 	orr.w	r3, r0, r1
 8001f70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001fa0:	f021 010c 	bic.w	r1, r1, #12
 8001fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001fae:	430b      	orrs	r3, r1
 8001fb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc2:	6999      	ldr	r1, [r3, #24]
 8001fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	ea40 0301 	orr.w	r3, r0, r1
 8001fce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	4b8f      	ldr	r3, [pc, #572]	; (8002214 <UART_SetConfig+0x2cc>)
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d005      	beq.n	8001fe8 <UART_SetConfig+0xa0>
 8001fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4b8d      	ldr	r3, [pc, #564]	; (8002218 <UART_SetConfig+0x2d0>)
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d104      	bne.n	8001ff2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fe8:	f7ff fc9a 	bl	8001920 <HAL_RCC_GetPCLK2Freq>
 8001fec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001ff0:	e003      	b.n	8001ffa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ff2:	f7ff fc81 	bl	80018f8 <HAL_RCC_GetPCLK1Freq>
 8001ff6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002004:	f040 810c 	bne.w	8002220 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800200c:	2200      	movs	r2, #0
 800200e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002012:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002016:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800201a:	4622      	mov	r2, r4
 800201c:	462b      	mov	r3, r5
 800201e:	1891      	adds	r1, r2, r2
 8002020:	65b9      	str	r1, [r7, #88]	; 0x58
 8002022:	415b      	adcs	r3, r3
 8002024:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002026:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800202a:	4621      	mov	r1, r4
 800202c:	eb12 0801 	adds.w	r8, r2, r1
 8002030:	4629      	mov	r1, r5
 8002032:	eb43 0901 	adc.w	r9, r3, r1
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800204a:	4690      	mov	r8, r2
 800204c:	4699      	mov	r9, r3
 800204e:	4623      	mov	r3, r4
 8002050:	eb18 0303 	adds.w	r3, r8, r3
 8002054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002058:	462b      	mov	r3, r5
 800205a:	eb49 0303 	adc.w	r3, r9, r3
 800205e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800206e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002072:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002076:	460b      	mov	r3, r1
 8002078:	18db      	adds	r3, r3, r3
 800207a:	653b      	str	r3, [r7, #80]	; 0x50
 800207c:	4613      	mov	r3, r2
 800207e:	eb42 0303 	adc.w	r3, r2, r3
 8002082:	657b      	str	r3, [r7, #84]	; 0x54
 8002084:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002088:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800208c:	f7fe f8a8 	bl	80001e0 <__aeabi_uldivmod>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4b61      	ldr	r3, [pc, #388]	; (800221c <UART_SetConfig+0x2d4>)
 8002096:	fba3 2302 	umull	r2, r3, r3, r2
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	011c      	lsls	r4, r3, #4
 800209e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020a2:	2200      	movs	r2, #0
 80020a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80020ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80020b0:	4642      	mov	r2, r8
 80020b2:	464b      	mov	r3, r9
 80020b4:	1891      	adds	r1, r2, r2
 80020b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80020b8:	415b      	adcs	r3, r3
 80020ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020c0:	4641      	mov	r1, r8
 80020c2:	eb12 0a01 	adds.w	sl, r2, r1
 80020c6:	4649      	mov	r1, r9
 80020c8:	eb43 0b01 	adc.w	fp, r3, r1
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020e0:	4692      	mov	sl, r2
 80020e2:	469b      	mov	fp, r3
 80020e4:	4643      	mov	r3, r8
 80020e6:	eb1a 0303 	adds.w	r3, sl, r3
 80020ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020ee:	464b      	mov	r3, r9
 80020f0:	eb4b 0303 	adc.w	r3, fp, r3
 80020f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80020f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002104:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002108:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800210c:	460b      	mov	r3, r1
 800210e:	18db      	adds	r3, r3, r3
 8002110:	643b      	str	r3, [r7, #64]	; 0x40
 8002112:	4613      	mov	r3, r2
 8002114:	eb42 0303 	adc.w	r3, r2, r3
 8002118:	647b      	str	r3, [r7, #68]	; 0x44
 800211a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800211e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002122:	f7fe f85d 	bl	80001e0 <__aeabi_uldivmod>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4611      	mov	r1, r2
 800212c:	4b3b      	ldr	r3, [pc, #236]	; (800221c <UART_SetConfig+0x2d4>)
 800212e:	fba3 2301 	umull	r2, r3, r3, r1
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2264      	movs	r2, #100	; 0x64
 8002136:	fb02 f303 	mul.w	r3, r2, r3
 800213a:	1acb      	subs	r3, r1, r3
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002142:	4b36      	ldr	r3, [pc, #216]	; (800221c <UART_SetConfig+0x2d4>)
 8002144:	fba3 2302 	umull	r2, r3, r3, r2
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002150:	441c      	add	r4, r3
 8002152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002156:	2200      	movs	r2, #0
 8002158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800215c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002160:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002164:	4642      	mov	r2, r8
 8002166:	464b      	mov	r3, r9
 8002168:	1891      	adds	r1, r2, r2
 800216a:	63b9      	str	r1, [r7, #56]	; 0x38
 800216c:	415b      	adcs	r3, r3
 800216e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002170:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002174:	4641      	mov	r1, r8
 8002176:	1851      	adds	r1, r2, r1
 8002178:	6339      	str	r1, [r7, #48]	; 0x30
 800217a:	4649      	mov	r1, r9
 800217c:	414b      	adcs	r3, r1
 800217e:	637b      	str	r3, [r7, #52]	; 0x34
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800218c:	4659      	mov	r1, fp
 800218e:	00cb      	lsls	r3, r1, #3
 8002190:	4651      	mov	r1, sl
 8002192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002196:	4651      	mov	r1, sl
 8002198:	00ca      	lsls	r2, r1, #3
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	4642      	mov	r2, r8
 80021a2:	189b      	adds	r3, r3, r2
 80021a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021a8:	464b      	mov	r3, r9
 80021aa:	460a      	mov	r2, r1
 80021ac:	eb42 0303 	adc.w	r3, r2, r3
 80021b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80021c8:	460b      	mov	r3, r1
 80021ca:	18db      	adds	r3, r3, r3
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ce:	4613      	mov	r3, r2
 80021d0:	eb42 0303 	adc.w	r3, r2, r3
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80021de:	f7fd ffff 	bl	80001e0 <__aeabi_uldivmod>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4b0d      	ldr	r3, [pc, #52]	; (800221c <UART_SetConfig+0x2d4>)
 80021e8:	fba3 1302 	umull	r1, r3, r3, r2
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	2164      	movs	r1, #100	; 0x64
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	3332      	adds	r3, #50	; 0x32
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <UART_SetConfig+0x2d4>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	f003 0207 	and.w	r2, r3, #7
 8002206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4422      	add	r2, r4
 800220e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002210:	e105      	b.n	800241e <UART_SetConfig+0x4d6>
 8002212:	bf00      	nop
 8002214:	40011000 	.word	0x40011000
 8002218:	40011400 	.word	0x40011400
 800221c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002224:	2200      	movs	r2, #0
 8002226:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800222a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800222e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002232:	4642      	mov	r2, r8
 8002234:	464b      	mov	r3, r9
 8002236:	1891      	adds	r1, r2, r2
 8002238:	6239      	str	r1, [r7, #32]
 800223a:	415b      	adcs	r3, r3
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
 800223e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002242:	4641      	mov	r1, r8
 8002244:	1854      	adds	r4, r2, r1
 8002246:	4649      	mov	r1, r9
 8002248:	eb43 0501 	adc.w	r5, r3, r1
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	00eb      	lsls	r3, r5, #3
 8002256:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800225a:	00e2      	lsls	r2, r4, #3
 800225c:	4614      	mov	r4, r2
 800225e:	461d      	mov	r5, r3
 8002260:	4643      	mov	r3, r8
 8002262:	18e3      	adds	r3, r4, r3
 8002264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002268:	464b      	mov	r3, r9
 800226a:	eb45 0303 	adc.w	r3, r5, r3
 800226e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800227e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800228e:	4629      	mov	r1, r5
 8002290:	008b      	lsls	r3, r1, #2
 8002292:	4621      	mov	r1, r4
 8002294:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002298:	4621      	mov	r1, r4
 800229a:	008a      	lsls	r2, r1, #2
 800229c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80022a0:	f7fd ff9e 	bl	80001e0 <__aeabi_uldivmod>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4b60      	ldr	r3, [pc, #384]	; (800242c <UART_SetConfig+0x4e4>)
 80022aa:	fba3 2302 	umull	r2, r3, r3, r2
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	011c      	lsls	r4, r3, #4
 80022b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022b6:	2200      	movs	r2, #0
 80022b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80022c4:	4642      	mov	r2, r8
 80022c6:	464b      	mov	r3, r9
 80022c8:	1891      	adds	r1, r2, r2
 80022ca:	61b9      	str	r1, [r7, #24]
 80022cc:	415b      	adcs	r3, r3
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022d4:	4641      	mov	r1, r8
 80022d6:	1851      	adds	r1, r2, r1
 80022d8:	6139      	str	r1, [r7, #16]
 80022da:	4649      	mov	r1, r9
 80022dc:	414b      	adcs	r3, r1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022ec:	4659      	mov	r1, fp
 80022ee:	00cb      	lsls	r3, r1, #3
 80022f0:	4651      	mov	r1, sl
 80022f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022f6:	4651      	mov	r1, sl
 80022f8:	00ca      	lsls	r2, r1, #3
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	4642      	mov	r2, r8
 8002302:	189b      	adds	r3, r3, r2
 8002304:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002308:	464b      	mov	r3, r9
 800230a:	460a      	mov	r2, r1
 800230c:	eb42 0303 	adc.w	r3, r2, r3
 8002310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	67bb      	str	r3, [r7, #120]	; 0x78
 800231e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800232c:	4649      	mov	r1, r9
 800232e:	008b      	lsls	r3, r1, #2
 8002330:	4641      	mov	r1, r8
 8002332:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002336:	4641      	mov	r1, r8
 8002338:	008a      	lsls	r2, r1, #2
 800233a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800233e:	f7fd ff4f 	bl	80001e0 <__aeabi_uldivmod>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4b39      	ldr	r3, [pc, #228]	; (800242c <UART_SetConfig+0x4e4>)
 8002348:	fba3 1302 	umull	r1, r3, r3, r2
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	2164      	movs	r1, #100	; 0x64
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	3332      	adds	r3, #50	; 0x32
 800235a:	4a34      	ldr	r2, [pc, #208]	; (800242c <UART_SetConfig+0x4e4>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002366:	441c      	add	r4, r3
 8002368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800236c:	2200      	movs	r2, #0
 800236e:	673b      	str	r3, [r7, #112]	; 0x70
 8002370:	677a      	str	r2, [r7, #116]	; 0x74
 8002372:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002376:	4642      	mov	r2, r8
 8002378:	464b      	mov	r3, r9
 800237a:	1891      	adds	r1, r2, r2
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	415b      	adcs	r3, r3
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002386:	4641      	mov	r1, r8
 8002388:	1851      	adds	r1, r2, r1
 800238a:	6039      	str	r1, [r7, #0]
 800238c:	4649      	mov	r1, r9
 800238e:	414b      	adcs	r3, r1
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800239e:	4659      	mov	r1, fp
 80023a0:	00cb      	lsls	r3, r1, #3
 80023a2:	4651      	mov	r1, sl
 80023a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023a8:	4651      	mov	r1, sl
 80023aa:	00ca      	lsls	r2, r1, #3
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	4603      	mov	r3, r0
 80023b2:	4642      	mov	r2, r8
 80023b4:	189b      	adds	r3, r3, r2
 80023b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80023b8:	464b      	mov	r3, r9
 80023ba:	460a      	mov	r2, r1
 80023bc:	eb42 0303 	adc.w	r3, r2, r3
 80023c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	663b      	str	r3, [r7, #96]	; 0x60
 80023cc:	667a      	str	r2, [r7, #100]	; 0x64
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80023da:	4649      	mov	r1, r9
 80023dc:	008b      	lsls	r3, r1, #2
 80023de:	4641      	mov	r1, r8
 80023e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023e4:	4641      	mov	r1, r8
 80023e6:	008a      	lsls	r2, r1, #2
 80023e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023ec:	f7fd fef8 	bl	80001e0 <__aeabi_uldivmod>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4b0d      	ldr	r3, [pc, #52]	; (800242c <UART_SetConfig+0x4e4>)
 80023f6:	fba3 1302 	umull	r1, r3, r3, r2
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2164      	movs	r1, #100	; 0x64
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	3332      	adds	r3, #50	; 0x32
 8002408:	4a08      	ldr	r2, [pc, #32]	; (800242c <UART_SetConfig+0x4e4>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	f003 020f 	and.w	r2, r3, #15
 8002414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4422      	add	r2, r4
 800241c:	609a      	str	r2, [r3, #8]
}
 800241e:	bf00      	nop
 8002420:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002424:	46bd      	mov	sp, r7
 8002426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800242a:	bf00      	nop
 800242c:	51eb851f 	.word	0x51eb851f

08002430 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <SysTick_Handler+0x1c>)
 8002436:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002438:	f001 fe30 	bl	800409c <xTaskGetSchedulerState>
 800243c:	4603      	mov	r3, r0
 800243e:	2b01      	cmp	r3, #1
 8002440:	d001      	beq.n	8002446 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002442:	f002 fc31 	bl	8004ca8 <xPortSysTickHandler>
  }
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	e000e010 	.word	0xe000e010

08002450 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a07      	ldr	r2, [pc, #28]	; (800247c <vApplicationGetIdleTaskMemory+0x2c>)
 8002460:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	4a06      	ldr	r2, [pc, #24]	; (8002480 <vApplicationGetIdleTaskMemory+0x30>)
 8002466:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	601a      	str	r2, [r3, #0]
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000128 	.word	0x20000128
 8002480:	20000184 	.word	0x20000184

08002484 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002494:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	4a06      	ldr	r2, [pc, #24]	; (80024b4 <vApplicationGetTimerTaskMemory+0x30>)
 800249a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024a2:	601a      	str	r2, [r3, #0]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	20000384 	.word	0x20000384
 80024b4:	200003e0 	.word	0x200003e0

080024b8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80024be:	2020      	movs	r0, #32
 80024c0:	f002 fc82 	bl	8004dc8 <pvPortMalloc>
 80024c4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3304      	adds	r3, #4
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 f983 	bl	80027e2 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80024e2:	687b      	ldr	r3, [r7, #4]
	}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b090      	sub	sp, #64	; 0x40
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8002502:	2300      	movs	r3, #0
 8002504:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10a      	bne.n	8002522 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002510:	f383 8811 	msr	BASEPRI, r3
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800251e:	bf00      	nop
 8002520:	e7fe      	b.n	8002520 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <xEventGroupWaitBits+0x56>
	__asm volatile
 800252c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002530:	f383 8811 	msr	BASEPRI, r3
 8002534:	f3bf 8f6f 	isb	sy
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	61fb      	str	r3, [r7, #28]
}
 800253e:	bf00      	nop
 8002540:	e7fe      	b.n	8002540 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <xEventGroupWaitBits+0x72>
	__asm volatile
 8002548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254c:	f383 8811 	msr	BASEPRI, r3
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	61bb      	str	r3, [r7, #24]
}
 800255a:	bf00      	nop
 800255c:	e7fe      	b.n	800255c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800255e:	f001 fd9d 	bl	800409c <xTaskGetSchedulerState>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <xEventGroupWaitBits+0x82>
 8002568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <xEventGroupWaitBits+0x86>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <xEventGroupWaitBits+0x88>
 8002572:	2300      	movs	r3, #0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8002578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257c:	f383 8811 	msr	BASEPRI, r3
 8002580:	f3bf 8f6f 	isb	sy
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	617b      	str	r3, [r7, #20]
}
 800258a:	bf00      	nop
 800258c:	e7fe      	b.n	800258c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800258e:	f001 f905 	bl	800379c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800259e:	f000 f8fe 	bl	800279e <prvTestWaitCondition>
 80025a2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00e      	beq.n	80025c8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d028      	beq.n	800260a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80025b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	43db      	mvns	r3, r3
 80025c0:	401a      	ands	r2, r3
 80025c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	e020      	b.n	800260a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80025c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d104      	bne.n	80025d8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80025d2:	2301      	movs	r3, #1
 80025d4:	633b      	str	r3, [r7, #48]	; 0x30
 80025d6:	e018      	b.n	800260a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80025de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80025ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025f2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f6:	1d18      	adds	r0, r3, #4
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fc:	4313      	orrs	r3, r2
 80025fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002600:	4619      	mov	r1, r3
 8002602:	f001 fac3 	bl	8003b8c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800260a:	f001 f8d5 	bl	80037b8 <xTaskResumeAll>
 800260e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8002610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002612:	2b00      	cmp	r3, #0
 8002614:	d031      	beq.n	800267a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <xEventGroupWaitBits+0x198>)
 800261e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800262c:	f001 fdc2 	bl	80041b4 <uxTaskResetEventItemValue>
 8002630:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d11a      	bne.n	8002672 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800263c:	f002 faa2 	bl	8004b84 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8002640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800264c:	f000 f8a7 	bl	800279e <prvTestWaitCondition>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800265c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	43db      	mvns	r3, r3
 8002664:	401a      	ands	r2, r3
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002668:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800266a:	2301      	movs	r3, #1
 800266c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800266e:	f002 fab9 	bl	8004be4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002674:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002678:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800267a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800267c:	4618      	mov	r0, r3
 800267e:	3740      	adds	r7, #64	; 0x40
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	e000ed04 	.word	0xe000ed04

08002688 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08e      	sub	sp, #56	; 0x38
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002692:	2300      	movs	r3, #0
 8002694:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800269a:	2300      	movs	r3, #0
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <xEventGroupSetBits+0x32>
	__asm volatile
 80026a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	613b      	str	r3, [r7, #16]
}
 80026b6:	bf00      	nop
 80026b8:	e7fe      	b.n	80026b8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <xEventGroupSetBits+0x52>
	__asm volatile
 80026c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	60fb      	str	r3, [r7, #12]
}
 80026d6:	bf00      	nop
 80026d8:	e7fe      	b.n	80026d8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	3304      	adds	r3, #4
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	3308      	adds	r3, #8
 80026e4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80026e6:	f001 f859 	bl	800379c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fa:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80026fc:	e03c      	b.n	8002778 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80026fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800270a:	2300      	movs	r3, #0
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002714:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800271c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d108      	bne.n	800273a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00b      	beq.n	800274c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8002734:	2301      	movs	r3, #1
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002738:	e008      	b.n	800274c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	429a      	cmp	r2, r3
 8002746:	d101      	bne.n	800274c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8002748:	2301      	movs	r3, #1
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	2b00      	cmp	r3, #0
 8002750:	d010      	beq.n	8002774 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800275c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800276c:	4619      	mov	r1, r3
 800276e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002770:	f001 fad8 	bl	8003d24 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8002778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	429a      	cmp	r2, r3
 800277e:	d1be      	bne.n	80026fe <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002786:	43db      	mvns	r3, r3
 8002788:	401a      	ands	r2, r3
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800278e:	f001 f813 	bl	80037b8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002794:	681b      	ldr	r3, [r3, #0]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3738      	adds	r7, #56	; 0x38
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800279e:	b480      	push	{r7}
 80027a0:	b087      	sub	sp, #28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d107      	bne.n	80027c4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80027be:	2301      	movs	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e007      	b.n	80027d4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	4013      	ands	r3, r2
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d101      	bne.n	80027d4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80027d0:	2301      	movs	r3, #1
 80027d2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80027d4:	697b      	ldr	r3, [r7, #20]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f103 0208 	add.w	r2, r3, #8
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f103 0208 	add.w	r2, r3, #8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f103 0208 	add.w	r2, r3, #8
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	601a      	str	r2, [r3, #0]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800289a:	d103      	bne.n	80028a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	e00c      	b.n	80028be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3308      	adds	r3, #8
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	e002      	b.n	80028b2 <vListInsert+0x2e>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d2f6      	bcs.n	80028ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6892      	ldr	r2, [r2, #8]
 800290c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6852      	ldr	r2, [r2, #4]
 8002916:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	429a      	cmp	r2, r3
 8002920:	d103      	bne.n	800292a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	1e5a      	subs	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <xQueueGenericReset+0x2a>
	__asm volatile
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	60bb      	str	r3, [r7, #8]
}
 8002972:	bf00      	nop
 8002974:	e7fe      	b.n	8002974 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002976:	f002 f905 	bl	8004b84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	68f9      	ldr	r1, [r7, #12]
 8002984:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	441a      	add	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	3b01      	subs	r3, #1
 80029a8:	68f9      	ldr	r1, [r7, #12]
 80029aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	441a      	add	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	22ff      	movs	r2, #255	; 0xff
 80029ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	22ff      	movs	r2, #255	; 0xff
 80029c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d114      	bne.n	80029f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01a      	beq.n	8002a0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3310      	adds	r3, #16
 80029d8:	4618      	mov	r0, r3
 80029da:	f001 f93f 	bl	8003c5c <xTaskRemoveFromEventList>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d012      	beq.n	8002a0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <xQueueGenericReset+0xcc>)
 80029e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	e009      	b.n	8002a0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3310      	adds	r3, #16
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fef1 	bl	80027e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3324      	adds	r3, #36	; 0x24
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff feec 	bl	80027e2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a0a:	f002 f8eb 	bl	8004be4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a0e:	2301      	movs	r3, #1
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	e000ed04 	.word	0xe000ed04

08002a1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08e      	sub	sp, #56	; 0x38
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10a      	bne.n	8002a62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a5e:	bf00      	nop
 8002a60:	e7fe      	b.n	8002a60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <xQueueGenericCreateStatic+0x52>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <xQueueGenericCreateStatic+0x56>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <xQueueGenericCreateStatic+0x58>
 8002a72:	2300      	movs	r3, #0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10a      	bne.n	8002a8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	623b      	str	r3, [r7, #32]
}
 8002a8a:	bf00      	nop
 8002a8c:	e7fe      	b.n	8002a8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <xQueueGenericCreateStatic+0x7e>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <xQueueGenericCreateStatic+0x82>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <xQueueGenericCreateStatic+0x84>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa8:	f383 8811 	msr	BASEPRI, r3
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	61fb      	str	r3, [r7, #28]
}
 8002ab6:	bf00      	nop
 8002ab8:	e7fe      	b.n	8002ab8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002aba:	2350      	movs	r3, #80	; 0x50
 8002abc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b50      	cmp	r3, #80	; 0x50
 8002ac2:	d00a      	beq.n	8002ada <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	61bb      	str	r3, [r7, #24]
}
 8002ad6:	bf00      	nop
 8002ad8:	e7fe      	b.n	8002ad8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ada:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00d      	beq.n	8002b02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002aee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4613      	mov	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f805 	bl	8002b0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3730      	adds	r7, #48	; 0x30
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d103      	bne.n	8002b28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e002      	b.n	8002b2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	69b8      	ldr	r0, [r7, #24]
 8002b3e:	f7ff ff05 	bl	800294c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08e      	sub	sp, #56	; 0x38
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b62:	2300      	movs	r3, #0
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <xQueueGenericSend+0x32>
	__asm volatile
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b82:	bf00      	nop
 8002b84:	e7fe      	b.n	8002b84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d103      	bne.n	8002b94 <xQueueGenericSend+0x40>
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <xQueueGenericSend+0x44>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <xQueueGenericSend+0x46>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10a      	bne.n	8002bb4 <xQueueGenericSend+0x60>
	__asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bb0:	bf00      	nop
 8002bb2:	e7fe      	b.n	8002bb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d103      	bne.n	8002bc2 <xQueueGenericSend+0x6e>
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <xQueueGenericSend+0x72>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <xQueueGenericSend+0x74>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	623b      	str	r3, [r7, #32]
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002be2:	f001 fa5b 	bl	800409c <xTaskGetSchedulerState>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <xQueueGenericSend+0x9e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <xQueueGenericSend+0xa2>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <xQueueGenericSend+0xa4>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <xQueueGenericSend+0xbe>
	__asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	61fb      	str	r3, [r7, #28]
}
 8002c0e:	bf00      	nop
 8002c10:	e7fe      	b.n	8002c10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c12:	f001 ffb7 	bl	8004b84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d302      	bcc.n	8002c28 <xQueueGenericSend+0xd4>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d129      	bne.n	8002c7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c2e:	f000 fa0b 	bl	8003048 <prvCopyDataToQueue>
 8002c32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d010      	beq.n	8002c5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	3324      	adds	r3, #36	; 0x24
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 f80b 	bl	8003c5c <xTaskRemoveFromEventList>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d013      	beq.n	8002c74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c4c:	4b3f      	ldr	r3, [pc, #252]	; (8002d4c <xQueueGenericSend+0x1f8>)
 8002c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	e00a      	b.n	8002c74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c64:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <xQueueGenericSend+0x1f8>)
 8002c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c74:	f001 ffb6 	bl	8004be4 <vPortExitCritical>
				return pdPASS;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e063      	b.n	8002d44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d103      	bne.n	8002c8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c82:	f001 ffaf 	bl	8004be4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e05c      	b.n	8002d44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d106      	bne.n	8002c9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	4618      	mov	r0, r3
 8002c96:	f001 f8a7 	bl	8003de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c9e:	f001 ffa1 	bl	8004be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ca2:	f000 fd7b 	bl	800379c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ca6:	f001 ff6d 	bl	8004b84 <vPortEnterCritical>
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cb0:	b25b      	sxtb	r3, r3
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cb6:	d103      	bne.n	8002cc0 <xQueueGenericSend+0x16c>
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cc6:	b25b      	sxtb	r3, r3
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ccc:	d103      	bne.n	8002cd6 <xQueueGenericSend+0x182>
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cd6:	f001 ff85 	bl	8004be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cda:	1d3a      	adds	r2, r7, #4
 8002cdc:	f107 0314 	add.w	r3, r7, #20
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f001 f896 	bl	8003e14 <xTaskCheckForTimeOut>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d124      	bne.n	8002d38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cf0:	f000 faa2 	bl	8003238 <prvIsQueueFull>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d018      	beq.n	8002d2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfc:	3310      	adds	r3, #16
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 ff1e 	bl	8003b44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d0a:	f000 fa2d 	bl	8003168 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d0e:	f000 fd53 	bl	80037b8 <xTaskResumeAll>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f47f af7c 	bne.w	8002c12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002d1a:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <xQueueGenericSend+0x1f8>)
 8002d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	e772      	b.n	8002c12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d2e:	f000 fa1b 	bl	8003168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d32:	f000 fd41 	bl	80037b8 <xTaskResumeAll>
 8002d36:	e76c      	b.n	8002c12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d3a:	f000 fa15 	bl	8003168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d3e:	f000 fd3b 	bl	80037b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3738      	adds	r7, #56	; 0x38
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	e000ed04 	.word	0xe000ed04

08002d50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b090      	sub	sp, #64	; 0x40
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d103      	bne.n	8002d8c <xQueueGenericSendFromISR+0x3c>
 8002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <xQueueGenericSendFromISR+0x40>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <xQueueGenericSendFromISR+0x42>
 8002d90:	2300      	movs	r3, #0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10a      	bne.n	8002dac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002da8:	bf00      	nop
 8002daa:	e7fe      	b.n	8002daa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d103      	bne.n	8002dba <xQueueGenericSendFromISR+0x6a>
 8002db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <xQueueGenericSendFromISR+0x6e>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <xQueueGenericSendFromISR+0x70>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10a      	bne.n	8002dda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	623b      	str	r3, [r7, #32]
}
 8002dd6:	bf00      	nop
 8002dd8:	e7fe      	b.n	8002dd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002dda:	f001 ffb5 	bl	8004d48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002dde:	f3ef 8211 	mrs	r2, BASEPRI
 8002de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	61fa      	str	r2, [r7, #28]
 8002df4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002df6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <xQueueGenericSendFromISR+0xbc>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d12f      	bne.n	8002e6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e22:	f000 f911 	bl	8003048 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e2e:	d112      	bne.n	8002e56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d016      	beq.n	8002e66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3a:	3324      	adds	r3, #36	; 0x24
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 ff0d 	bl	8003c5c <xTaskRemoveFromEventList>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00e      	beq.n	8002e66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	e007      	b.n	8002e66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	b25a      	sxtb	r2, r3
 8002e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e66:	2301      	movs	r3, #1
 8002e68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002e6a:	e001      	b.n	8002e70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3740      	adds	r7, #64	; 0x40
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08c      	sub	sp, #48	; 0x30
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <xQueueReceive+0x30>
	__asm volatile
 8002ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	623b      	str	r3, [r7, #32]
}
 8002eb4:	bf00      	nop
 8002eb6:	e7fe      	b.n	8002eb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <xQueueReceive+0x3e>
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <xQueueReceive+0x42>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <xQueueReceive+0x44>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10a      	bne.n	8002ee6 <xQueueReceive+0x5e>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	61fb      	str	r3, [r7, #28]
}
 8002ee2:	bf00      	nop
 8002ee4:	e7fe      	b.n	8002ee4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ee6:	f001 f8d9 	bl	800409c <xTaskGetSchedulerState>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <xQueueReceive+0x6e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <xQueueReceive+0x72>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <xQueueReceive+0x74>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10a      	bne.n	8002f16 <xQueueReceive+0x8e>
	__asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	61bb      	str	r3, [r7, #24]
}
 8002f12:	bf00      	nop
 8002f14:	e7fe      	b.n	8002f14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f16:	f001 fe35 	bl	8004b84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01f      	beq.n	8002f66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f2a:	f000 f8f7 	bl	800311c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	1e5a      	subs	r2, r3, #1
 8002f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00f      	beq.n	8002f5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	3310      	adds	r3, #16
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fe8a 	bl	8003c5c <xTaskRemoveFromEventList>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <xQueueReceive+0x1bc>)
 8002f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f5e:	f001 fe41 	bl	8004be4 <vPortExitCritical>
				return pdPASS;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e069      	b.n	800303a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d103      	bne.n	8002f74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f6c:	f001 fe3a 	bl	8004be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e062      	b.n	800303a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f7a:	f107 0310 	add.w	r3, r7, #16
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 ff32 	bl	8003de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f84:	2301      	movs	r3, #1
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f88:	f001 fe2c 	bl	8004be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f8c:	f000 fc06 	bl	800379c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f90:	f001 fdf8 	bl	8004b84 <vPortEnterCritical>
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa0:	d103      	bne.n	8002faa <xQueueReceive+0x122>
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fb0:	b25b      	sxtb	r3, r3
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb6:	d103      	bne.n	8002fc0 <xQueueReceive+0x138>
 8002fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc0:	f001 fe10 	bl	8004be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fc4:	1d3a      	adds	r2, r7, #4
 8002fc6:	f107 0310 	add.w	r3, r7, #16
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 ff21 	bl	8003e14 <xTaskCheckForTimeOut>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d123      	bne.n	8003020 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fda:	f000 f917 	bl	800320c <prvIsQueueEmpty>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d017      	beq.n	8003014 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	3324      	adds	r3, #36	; 0x24
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fda9 	bl	8003b44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ff4:	f000 f8b8 	bl	8003168 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ff8:	f000 fbde 	bl	80037b8 <xTaskResumeAll>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d189      	bne.n	8002f16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <xQueueReceive+0x1bc>)
 8003004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	e780      	b.n	8002f16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003016:	f000 f8a7 	bl	8003168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800301a:	f000 fbcd 	bl	80037b8 <xTaskResumeAll>
 800301e:	e77a      	b.n	8002f16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003022:	f000 f8a1 	bl	8003168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003026:	f000 fbc7 	bl	80037b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800302a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800302c:	f000 f8ee 	bl	800320c <prvIsQueueEmpty>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	f43f af6f 	beq.w	8002f16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003038:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800303a:	4618      	mov	r0, r3
 800303c:	3730      	adds	r7, #48	; 0x30
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	e000ed04 	.word	0xe000ed04

08003048 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10d      	bne.n	8003082 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d14d      	bne.n	800310a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	4618      	mov	r0, r3
 8003074:	f001 f830 	bl	80040d8 <xTaskPriorityDisinherit>
 8003078:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	e043      	b.n	800310a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d119      	bne.n	80030bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6858      	ldr	r0, [r3, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	461a      	mov	r2, r3
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	f002 f8ac 	bl	80051f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	441a      	add	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d32b      	bcc.n	800310a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	e026      	b.n	800310a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68d8      	ldr	r0, [r3, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	461a      	mov	r2, r3
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	f002 f892 	bl	80051f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	425b      	negs	r3, r3
 80030d6:	441a      	add	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d207      	bcs.n	80030f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	425b      	negs	r3, r3
 80030f2:	441a      	add	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d105      	bne.n	800310a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	3b01      	subs	r3, #1
 8003108:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003112:	697b      	ldr	r3, [r7, #20]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d018      	beq.n	8003160 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	441a      	add	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	429a      	cmp	r2, r3
 8003146:	d303      	bcc.n	8003150 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68d9      	ldr	r1, [r3, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	461a      	mov	r2, r3
 800315a:	6838      	ldr	r0, [r7, #0]
 800315c:	f002 f848 	bl	80051f0 <memcpy>
	}
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003170:	f001 fd08 	bl	8004b84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800317a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800317c:	e011      	b.n	80031a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	2b00      	cmp	r3, #0
 8003184:	d012      	beq.n	80031ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3324      	adds	r3, #36	; 0x24
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fd66 	bl	8003c5c <xTaskRemoveFromEventList>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003196:	f000 fe9f 	bl	8003ed8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	3b01      	subs	r3, #1
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	dce9      	bgt.n	800317e <prvUnlockQueue+0x16>
 80031aa:	e000      	b.n	80031ae <prvUnlockQueue+0x46>
					break;
 80031ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	22ff      	movs	r2, #255	; 0xff
 80031b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80031b6:	f001 fd15 	bl	8004be4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80031ba:	f001 fce3 	bl	8004b84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031c6:	e011      	b.n	80031ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d012      	beq.n	80031f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3310      	adds	r3, #16
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fd41 	bl	8003c5c <xTaskRemoveFromEventList>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80031e0:	f000 fe7a 	bl	8003ed8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031e4:	7bbb      	ldrb	r3, [r7, #14]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	dce9      	bgt.n	80031c8 <prvUnlockQueue+0x60>
 80031f4:	e000      	b.n	80031f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	22ff      	movs	r2, #255	; 0xff
 80031fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003200:	f001 fcf0 	bl	8004be4 <vPortExitCritical>
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003214:	f001 fcb6 	bl	8004b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003220:	2301      	movs	r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e001      	b.n	800322a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800322a:	f001 fcdb 	bl	8004be4 <vPortExitCritical>

	return xReturn;
 800322e:	68fb      	ldr	r3, [r7, #12]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003240:	f001 fca0 	bl	8004b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324c:	429a      	cmp	r2, r3
 800324e:	d102      	bne.n	8003256 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003250:	2301      	movs	r3, #1
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	e001      	b.n	800325a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800325a:	f001 fcc3 	bl	8004be4 <vPortExitCritical>

	return xReturn;
 800325e:	68fb      	ldr	r3, [r7, #12]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	e014      	b.n	80032a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003278:	4a0f      	ldr	r2, [pc, #60]	; (80032b8 <vQueueAddToRegistry+0x50>)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10b      	bne.n	800329c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003284:	490c      	ldr	r1, [pc, #48]	; (80032b8 <vQueueAddToRegistry+0x50>)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <vQueueAddToRegistry+0x50>)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800329a:	e006      	b.n	80032aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3301      	adds	r3, #1
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b07      	cmp	r3, #7
 80032a6:	d9e7      	bls.n	8003278 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	200007e0 	.word	0x200007e0

080032bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80032cc:	f001 fc5a 	bl	8004b84 <vPortEnterCritical>
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d6:	b25b      	sxtb	r3, r3
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032dc:	d103      	bne.n	80032e6 <vQueueWaitForMessageRestricted+0x2a>
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ec:	b25b      	sxtb	r3, r3
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f2:	d103      	bne.n	80032fc <vQueueWaitForMessageRestricted+0x40>
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032fc:	f001 fc72 	bl	8004be4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	2b00      	cmp	r3, #0
 8003306:	d106      	bne.n	8003316 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	3324      	adds	r3, #36	; 0x24
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fc77 	bl	8003c04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f7ff ff26 	bl	8003168 <prvUnlockQueue>
	}
 800331c:	bf00      	nop
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08e      	sub	sp, #56	; 0x38
 8003328:	af04      	add	r7, sp, #16
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	623b      	str	r3, [r7, #32]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800334e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <xTaskCreateStatic+0x46>
	__asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	61fb      	str	r3, [r7, #28]
}
 8003366:	bf00      	nop
 8003368:	e7fe      	b.n	8003368 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800336a:	235c      	movs	r3, #92	; 0x5c
 800336c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b5c      	cmp	r3, #92	; 0x5c
 8003372:	d00a      	beq.n	800338a <xTaskCreateStatic+0x66>
	__asm volatile
 8003374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	61bb      	str	r3, [r7, #24]
}
 8003386:	bf00      	nop
 8003388:	e7fe      	b.n	8003388 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800338a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01e      	beq.n	80033d0 <xTaskCreateStatic+0xac>
 8003392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01b      	beq.n	80033d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	2202      	movs	r2, #2
 80033a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033aa:	2300      	movs	r3, #0
 80033ac:	9303      	str	r3, [sp, #12]
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	9302      	str	r3, [sp, #8]
 80033b2:	f107 0314 	add.w	r3, r7, #20
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f850 	bl	8003468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033ca:	f000 f8dd 	bl	8003588 <prvAddNewTaskToReadyList>
 80033ce:	e001      	b.n	80033d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033d4:	697b      	ldr	r3, [r7, #20]
	}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3728      	adds	r7, #40	; 0x28
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b08c      	sub	sp, #48	; 0x30
 80033e2:	af04      	add	r7, sp, #16
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f001 fce8 	bl	8004dc8 <pvPortMalloc>
 80033f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00e      	beq.n	800341e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003400:	205c      	movs	r0, #92	; 0x5c
 8003402:	f001 fce1 	bl	8004dc8 <pvPortMalloc>
 8003406:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
 8003414:	e005      	b.n	8003422 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003416:	6978      	ldr	r0, [r7, #20]
 8003418:	f001 fda2 	bl	8004f60 <vPortFree>
 800341c:	e001      	b.n	8003422 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d017      	beq.n	8003458 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003430:	88fa      	ldrh	r2, [r7, #6]
 8003432:	2300      	movs	r3, #0
 8003434:	9303      	str	r3, [sp, #12]
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	9302      	str	r3, [sp, #8]
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f80e 	bl	8003468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800344c:	69f8      	ldr	r0, [r7, #28]
 800344e:	f000 f89b 	bl	8003588 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003452:	2301      	movs	r3, #1
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	e002      	b.n	800345e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800345c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800345e:	69bb      	ldr	r3, [r7, #24]
	}
 8003460:	4618      	mov	r0, r3
 8003462:	3720      	adds	r7, #32
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	461a      	mov	r2, r3
 8003480:	21a5      	movs	r1, #165	; 0xa5
 8003482:	f001 fec3 	bl	800520c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003490:	3b01      	subs	r3, #1
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f023 0307 	bic.w	r3, r3, #7
 800349e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80034aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	617b      	str	r3, [r7, #20]
}
 80034bc:	bf00      	nop
 80034be:	e7fe      	b.n	80034be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d01f      	beq.n	8003506 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	e012      	b.n	80034f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	7819      	ldrb	r1, [r3, #0]
 80034d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	4413      	add	r3, r2
 80034da:	3334      	adds	r3, #52	; 0x34
 80034dc:	460a      	mov	r2, r1
 80034de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	4413      	add	r3, r2
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d006      	beq.n	80034fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	3301      	adds	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	2b0f      	cmp	r3, #15
 80034f6:	d9e9      	bls.n	80034cc <prvInitialiseNewTask+0x64>
 80034f8:	e000      	b.n	80034fc <prvInitialiseNewTask+0x94>
			{
				break;
 80034fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003504:	e003      	b.n	800350e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	2b37      	cmp	r3, #55	; 0x37
 8003512:	d901      	bls.n	8003518 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003514:	2337      	movs	r3, #55	; 0x37
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800351c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003522:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	2200      	movs	r2, #0
 8003528:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	3304      	adds	r3, #4
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff f977 	bl	8002822 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	3318      	adds	r3, #24
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff f972 	bl	8002822 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003542:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003552:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	2200      	movs	r2, #0
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	68f9      	ldr	r1, [r7, #12]
 8003566:	69b8      	ldr	r0, [r7, #24]
 8003568:	f001 f9de 	bl	8004928 <pxPortInitialiseStack>
 800356c:	4602      	mov	r2, r0
 800356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003570:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800357c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800357e:	bf00      	nop
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003590:	f001 faf8 	bl	8004b84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003594:	4b2d      	ldr	r3, [pc, #180]	; (800364c <prvAddNewTaskToReadyList+0xc4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3301      	adds	r3, #1
 800359a:	4a2c      	ldr	r2, [pc, #176]	; (800364c <prvAddNewTaskToReadyList+0xc4>)
 800359c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800359e:	4b2c      	ldr	r3, [pc, #176]	; (8003650 <prvAddNewTaskToReadyList+0xc8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035a6:	4a2a      	ldr	r2, [pc, #168]	; (8003650 <prvAddNewTaskToReadyList+0xc8>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035ac:	4b27      	ldr	r3, [pc, #156]	; (800364c <prvAddNewTaskToReadyList+0xc4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d110      	bne.n	80035d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035b4:	f000 fcb4 	bl	8003f20 <prvInitialiseTaskLists>
 80035b8:	e00d      	b.n	80035d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035ba:	4b26      	ldr	r3, [pc, #152]	; (8003654 <prvAddNewTaskToReadyList+0xcc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035c2:	4b23      	ldr	r3, [pc, #140]	; (8003650 <prvAddNewTaskToReadyList+0xc8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d802      	bhi.n	80035d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035d0:	4a1f      	ldr	r2, [pc, #124]	; (8003650 <prvAddNewTaskToReadyList+0xc8>)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035d6:	4b20      	ldr	r3, [pc, #128]	; (8003658 <prvAddNewTaskToReadyList+0xd0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3301      	adds	r3, #1
 80035dc:	4a1e      	ldr	r2, [pc, #120]	; (8003658 <prvAddNewTaskToReadyList+0xd0>)
 80035de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80035e0:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <prvAddNewTaskToReadyList+0xd0>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ec:	4b1b      	ldr	r3, [pc, #108]	; (800365c <prvAddNewTaskToReadyList+0xd4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d903      	bls.n	80035fc <prvAddNewTaskToReadyList+0x74>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	4a18      	ldr	r2, [pc, #96]	; (800365c <prvAddNewTaskToReadyList+0xd4>)
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4a15      	ldr	r2, [pc, #84]	; (8003660 <prvAddNewTaskToReadyList+0xd8>)
 800360a:	441a      	add	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	4619      	mov	r1, r3
 8003612:	4610      	mov	r0, r2
 8003614:	f7ff f912 	bl	800283c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003618:	f001 fae4 	bl	8004be4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800361c:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <prvAddNewTaskToReadyList+0xcc>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00e      	beq.n	8003642 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <prvAddNewTaskToReadyList+0xc8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	429a      	cmp	r2, r3
 8003630:	d207      	bcs.n	8003642 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003632:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <prvAddNewTaskToReadyList+0xdc>)
 8003634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000cf4 	.word	0x20000cf4
 8003650:	20000820 	.word	0x20000820
 8003654:	20000d00 	.word	0x20000d00
 8003658:	20000d10 	.word	0x20000d10
 800365c:	20000cfc 	.word	0x20000cfc
 8003660:	20000824 	.word	0x20000824
 8003664:	e000ed04 	.word	0xe000ed04

08003668 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d017      	beq.n	80036aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800367a:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <vTaskDelay+0x60>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <vTaskDelay+0x30>
	__asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	60bb      	str	r3, [r7, #8]
}
 8003694:	bf00      	nop
 8003696:	e7fe      	b.n	8003696 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003698:	f000 f880 	bl	800379c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800369c:	2100      	movs	r1, #0
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fda0 	bl	80041e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036a4:	f000 f888 	bl	80037b8 <xTaskResumeAll>
 80036a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d107      	bne.n	80036c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <vTaskDelay+0x64>)
 80036b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20000d1c 	.word	0x20000d1c
 80036cc:	e000ed04 	.word	0xe000ed04

080036d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	; 0x28
 80036d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036de:	463a      	mov	r2, r7
 80036e0:	1d39      	adds	r1, r7, #4
 80036e2:	f107 0308 	add.w	r3, r7, #8
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe feb2 	bl	8002450 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036ec:	6839      	ldr	r1, [r7, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	9202      	str	r2, [sp, #8]
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	2300      	movs	r3, #0
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	2300      	movs	r3, #0
 80036fc:	460a      	mov	r2, r1
 80036fe:	4921      	ldr	r1, [pc, #132]	; (8003784 <vTaskStartScheduler+0xb4>)
 8003700:	4821      	ldr	r0, [pc, #132]	; (8003788 <vTaskStartScheduler+0xb8>)
 8003702:	f7ff fe0f 	bl	8003324 <xTaskCreateStatic>
 8003706:	4603      	mov	r3, r0
 8003708:	4a20      	ldr	r2, [pc, #128]	; (800378c <vTaskStartScheduler+0xbc>)
 800370a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800370c:	4b1f      	ldr	r3, [pc, #124]	; (800378c <vTaskStartScheduler+0xbc>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003714:	2301      	movs	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	e001      	b.n	800371e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d102      	bne.n	800372a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003724:	f000 fdb2 	bl	800428c <xTimerCreateTimerTask>
 8003728:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d116      	bne.n	800375e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	613b      	str	r3, [r7, #16]
}
 8003742:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003744:	4b12      	ldr	r3, [pc, #72]	; (8003790 <vTaskStartScheduler+0xc0>)
 8003746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800374a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <vTaskStartScheduler+0xc4>)
 800374e:	2201      	movs	r2, #1
 8003750:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003752:	4b11      	ldr	r3, [pc, #68]	; (8003798 <vTaskStartScheduler+0xc8>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003758:	f001 f972 	bl	8004a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800375c:	e00e      	b.n	800377c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003764:	d10a      	bne.n	800377c <vTaskStartScheduler+0xac>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	60fb      	str	r3, [r7, #12]
}
 8003778:	bf00      	nop
 800377a:	e7fe      	b.n	800377a <vTaskStartScheduler+0xaa>
}
 800377c:	bf00      	nop
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	08005cec 	.word	0x08005cec
 8003788:	08003ef1 	.word	0x08003ef1
 800378c:	20000d18 	.word	0x20000d18
 8003790:	20000d14 	.word	0x20000d14
 8003794:	20000d00 	.word	0x20000d00
 8003798:	20000cf8 	.word	0x20000cf8

0800379c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <vTaskSuspendAll+0x18>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3301      	adds	r3, #1
 80037a6:	4a03      	ldr	r2, [pc, #12]	; (80037b4 <vTaskSuspendAll+0x18>)
 80037a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037aa:	bf00      	nop
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	20000d1c 	.word	0x20000d1c

080037b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037c6:	4b42      	ldr	r3, [pc, #264]	; (80038d0 <xTaskResumeAll+0x118>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80037ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	603b      	str	r3, [r7, #0]
}
 80037e0:	bf00      	nop
 80037e2:	e7fe      	b.n	80037e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037e4:	f001 f9ce 	bl	8004b84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037e8:	4b39      	ldr	r3, [pc, #228]	; (80038d0 <xTaskResumeAll+0x118>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	4a38      	ldr	r2, [pc, #224]	; (80038d0 <xTaskResumeAll+0x118>)
 80037f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037f2:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <xTaskResumeAll+0x118>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d162      	bne.n	80038c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037fa:	4b36      	ldr	r3, [pc, #216]	; (80038d4 <xTaskResumeAll+0x11c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d05e      	beq.n	80038c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003802:	e02f      	b.n	8003864 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003804:	4b34      	ldr	r3, [pc, #208]	; (80038d8 <xTaskResumeAll+0x120>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	3318      	adds	r3, #24
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff f870 	bl	80028f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	3304      	adds	r3, #4
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff f86b 	bl	80028f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003824:	4b2d      	ldr	r3, [pc, #180]	; (80038dc <xTaskResumeAll+0x124>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d903      	bls.n	8003834 <xTaskResumeAll+0x7c>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	4a2a      	ldr	r2, [pc, #168]	; (80038dc <xTaskResumeAll+0x124>)
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4a27      	ldr	r2, [pc, #156]	; (80038e0 <xTaskResumeAll+0x128>)
 8003842:	441a      	add	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3304      	adds	r3, #4
 8003848:	4619      	mov	r1, r3
 800384a:	4610      	mov	r0, r2
 800384c:	f7fe fff6 	bl	800283c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003854:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <xTaskResumeAll+0x12c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800385e:	4b22      	ldr	r3, [pc, #136]	; (80038e8 <xTaskResumeAll+0x130>)
 8003860:	2201      	movs	r2, #1
 8003862:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003864:	4b1c      	ldr	r3, [pc, #112]	; (80038d8 <xTaskResumeAll+0x120>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1cb      	bne.n	8003804 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003872:	f000 fbf3 	bl	800405c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003876:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <xTaskResumeAll+0x134>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d010      	beq.n	80038a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003882:	f000 f847 	bl	8003914 <xTaskIncrementTick>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800388c:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <xTaskResumeAll+0x130>)
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3b01      	subs	r3, #1
 8003896:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f1      	bne.n	8003882 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800389e:	4b13      	ldr	r3, [pc, #76]	; (80038ec <xTaskResumeAll+0x134>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038a4:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <xTaskResumeAll+0x130>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d009      	beq.n	80038c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038ac:	2301      	movs	r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038b0:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <xTaskResumeAll+0x138>)
 80038b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038c0:	f001 f990 	bl	8004be4 <vPortExitCritical>

	return xAlreadyYielded;
 80038c4:	68bb      	ldr	r3, [r7, #8]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000d1c 	.word	0x20000d1c
 80038d4:	20000cf4 	.word	0x20000cf4
 80038d8:	20000cb4 	.word	0x20000cb4
 80038dc:	20000cfc 	.word	0x20000cfc
 80038e0:	20000824 	.word	0x20000824
 80038e4:	20000820 	.word	0x20000820
 80038e8:	20000d08 	.word	0x20000d08
 80038ec:	20000d04 	.word	0x20000d04
 80038f0:	e000ed04 	.word	0xe000ed04

080038f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <xTaskGetTickCount+0x1c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003900:	687b      	ldr	r3, [r7, #4]
}
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20000cf8 	.word	0x20000cf8

08003914 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800391e:	4b4f      	ldr	r3, [pc, #316]	; (8003a5c <xTaskIncrementTick+0x148>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f040 808f 	bne.w	8003a46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003928:	4b4d      	ldr	r3, [pc, #308]	; (8003a60 <xTaskIncrementTick+0x14c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3301      	adds	r3, #1
 800392e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003930:	4a4b      	ldr	r2, [pc, #300]	; (8003a60 <xTaskIncrementTick+0x14c>)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d120      	bne.n	800397e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800393c:	4b49      	ldr	r3, [pc, #292]	; (8003a64 <xTaskIncrementTick+0x150>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <xTaskIncrementTick+0x48>
	__asm volatile
 8003946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	603b      	str	r3, [r7, #0]
}
 8003958:	bf00      	nop
 800395a:	e7fe      	b.n	800395a <xTaskIncrementTick+0x46>
 800395c:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <xTaskIncrementTick+0x150>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	4b41      	ldr	r3, [pc, #260]	; (8003a68 <xTaskIncrementTick+0x154>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a3f      	ldr	r2, [pc, #252]	; (8003a64 <xTaskIncrementTick+0x150>)
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	4a3f      	ldr	r2, [pc, #252]	; (8003a68 <xTaskIncrementTick+0x154>)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b3e      	ldr	r3, [pc, #248]	; (8003a6c <xTaskIncrementTick+0x158>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3301      	adds	r3, #1
 8003976:	4a3d      	ldr	r2, [pc, #244]	; (8003a6c <xTaskIncrementTick+0x158>)
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	f000 fb6f 	bl	800405c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800397e:	4b3c      	ldr	r3, [pc, #240]	; (8003a70 <xTaskIncrementTick+0x15c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	429a      	cmp	r2, r3
 8003986:	d349      	bcc.n	8003a1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003988:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <xTaskIncrementTick+0x150>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d104      	bne.n	800399c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003992:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <xTaskIncrementTick+0x15c>)
 8003994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003998:	601a      	str	r2, [r3, #0]
					break;
 800399a:	e03f      	b.n	8003a1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800399c:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <xTaskIncrementTick+0x150>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d203      	bcs.n	80039bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039b4:	4a2e      	ldr	r2, [pc, #184]	; (8003a70 <xTaskIncrementTick+0x15c>)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039ba:	e02f      	b.n	8003a1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	3304      	adds	r3, #4
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fe ff98 	bl	80028f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d004      	beq.n	80039d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	3318      	adds	r3, #24
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe ff8f 	bl	80028f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039dc:	4b25      	ldr	r3, [pc, #148]	; (8003a74 <xTaskIncrementTick+0x160>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d903      	bls.n	80039ec <xTaskIncrementTick+0xd8>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	4a22      	ldr	r2, [pc, #136]	; (8003a74 <xTaskIncrementTick+0x160>)
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4a1f      	ldr	r2, [pc, #124]	; (8003a78 <xTaskIncrementTick+0x164>)
 80039fa:	441a      	add	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f7fe ff1a 	bl	800283c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <xTaskIncrementTick+0x168>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d3b8      	bcc.n	8003988 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a16:	2301      	movs	r3, #1
 8003a18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a1a:	e7b5      	b.n	8003988 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <xTaskIncrementTick+0x168>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a22:	4915      	ldr	r1, [pc, #84]	; (8003a78 <xTaskIncrementTick+0x164>)
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d901      	bls.n	8003a38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003a34:	2301      	movs	r3, #1
 8003a36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a38:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <xTaskIncrementTick+0x16c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003a40:	2301      	movs	r3, #1
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	e004      	b.n	8003a50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a46:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <xTaskIncrementTick+0x170>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	4a0d      	ldr	r2, [pc, #52]	; (8003a84 <xTaskIncrementTick+0x170>)
 8003a4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a50:	697b      	ldr	r3, [r7, #20]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000d1c 	.word	0x20000d1c
 8003a60:	20000cf8 	.word	0x20000cf8
 8003a64:	20000cac 	.word	0x20000cac
 8003a68:	20000cb0 	.word	0x20000cb0
 8003a6c:	20000d0c 	.word	0x20000d0c
 8003a70:	20000d14 	.word	0x20000d14
 8003a74:	20000cfc 	.word	0x20000cfc
 8003a78:	20000824 	.word	0x20000824
 8003a7c:	20000820 	.word	0x20000820
 8003a80:	20000d08 	.word	0x20000d08
 8003a84:	20000d04 	.word	0x20000d04

08003a88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a8e:	4b28      	ldr	r3, [pc, #160]	; (8003b30 <vTaskSwitchContext+0xa8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a96:	4b27      	ldr	r3, [pc, #156]	; (8003b34 <vTaskSwitchContext+0xac>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a9c:	e041      	b.n	8003b22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003a9e:	4b25      	ldr	r3, [pc, #148]	; (8003b34 <vTaskSwitchContext+0xac>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa4:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <vTaskSwitchContext+0xb0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	e010      	b.n	8003ace <vTaskSwitchContext+0x46>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10a      	bne.n	8003ac8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab6:	f383 8811 	msr	BASEPRI, r3
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	607b      	str	r3, [r7, #4]
}
 8003ac4:	bf00      	nop
 8003ac6:	e7fe      	b.n	8003ac6 <vTaskSwitchContext+0x3e>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	491b      	ldr	r1, [pc, #108]	; (8003b3c <vTaskSwitchContext+0xb4>)
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0e4      	beq.n	8003aac <vTaskSwitchContext+0x24>
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4a13      	ldr	r2, [pc, #76]	; (8003b3c <vTaskSwitchContext+0xb4>)
 8003aee:	4413      	add	r3, r2
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	605a      	str	r2, [r3, #4]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	3308      	adds	r3, #8
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d104      	bne.n	8003b12 <vTaskSwitchContext+0x8a>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	605a      	str	r2, [r3, #4]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a09      	ldr	r2, [pc, #36]	; (8003b40 <vTaskSwitchContext+0xb8>)
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	4a06      	ldr	r2, [pc, #24]	; (8003b38 <vTaskSwitchContext+0xb0>)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6013      	str	r3, [r2, #0]
}
 8003b22:	bf00      	nop
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000d1c 	.word	0x20000d1c
 8003b34:	20000d08 	.word	0x20000d08
 8003b38:	20000cfc 	.word	0x20000cfc
 8003b3c:	20000824 	.word	0x20000824
 8003b40:	20000820 	.word	0x20000820

08003b44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	60fb      	str	r3, [r7, #12]
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b6a:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <vTaskPlaceOnEventList+0x44>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3318      	adds	r3, #24
 8003b70:	4619      	mov	r1, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fe fe86 	bl	8002884 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b78:	2101      	movs	r1, #1
 8003b7a:	6838      	ldr	r0, [r7, #0]
 8003b7c:	f000 fb32 	bl	80041e4 <prvAddCurrentTaskToDelayedList>
}
 8003b80:	bf00      	nop
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000820 	.word	0x20000820

08003b8c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10a      	bne.n	8003bb4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	617b      	str	r3, [r7, #20]
}
 8003bb0:	bf00      	nop
 8003bb2:	e7fe      	b.n	8003bb2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8003bb4:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <vTaskPlaceOnUnorderedEventList+0x70>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10a      	bne.n	8003bd2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	613b      	str	r3, [r7, #16]
}
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <vTaskPlaceOnUnorderedEventList+0x74>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003bdc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <vTaskPlaceOnUnorderedEventList+0x74>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3318      	adds	r3, #24
 8003be4:	4619      	mov	r1, r3
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f7fe fe28 	bl	800283c <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003bec:	2101      	movs	r1, #1
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 faf8 	bl	80041e4 <prvAddCurrentTaskToDelayedList>
}
 8003bf4:	bf00      	nop
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000d1c 	.word	0x20000d1c
 8003c00:	20000820 	.word	0x20000820

08003c04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	617b      	str	r3, [r7, #20]
}
 8003c28:	bf00      	nop
 8003c2a:	e7fe      	b.n	8003c2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3318      	adds	r3, #24
 8003c32:	4619      	mov	r1, r3
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f7fe fe01 	bl	800283c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	68b8      	ldr	r0, [r7, #8]
 8003c4a:	f000 facb 	bl	80041e4 <prvAddCurrentTaskToDelayedList>
	}
 8003c4e:	bf00      	nop
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000820 	.word	0x20000820

08003c5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	60fb      	str	r3, [r7, #12]
}
 8003c84:	bf00      	nop
 8003c86:	e7fe      	b.n	8003c86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	3318      	adds	r3, #24
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fe fe32 	bl	80028f6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c92:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <xTaskRemoveFromEventList+0xb0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d11d      	bne.n	8003cd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fe fe29 	bl	80028f6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca8:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <xTaskRemoveFromEventList+0xb4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d903      	bls.n	8003cb8 <xTaskRemoveFromEventList+0x5c>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <xTaskRemoveFromEventList+0xb4>)
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <xTaskRemoveFromEventList+0xb8>)
 8003cc6:	441a      	add	r2, r3
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	f7fe fdb4 	bl	800283c <vListInsertEnd>
 8003cd4:	e005      	b.n	8003ce2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	3318      	adds	r3, #24
 8003cda:	4619      	mov	r1, r3
 8003cdc:	480e      	ldr	r0, [pc, #56]	; (8003d18 <xTaskRemoveFromEventList+0xbc>)
 8003cde:	f7fe fdad 	bl	800283c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <xTaskRemoveFromEventList+0xc0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d905      	bls.n	8003cfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <xTaskRemoveFromEventList+0xc4>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e001      	b.n	8003d00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d00:	697b      	ldr	r3, [r7, #20]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000d1c 	.word	0x20000d1c
 8003d10:	20000cfc 	.word	0x20000cfc
 8003d14:	20000824 	.word	0x20000824
 8003d18:	20000cb4 	.word	0x20000cb4
 8003d1c:	20000820 	.word	0x20000820
 8003d20:	20000d08 	.word	0x20000d08

08003d24 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8003d2e:	4b29      	ldr	r3, [pc, #164]	; (8003dd4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	613b      	str	r3, [r7, #16]
}
 8003d48:	bf00      	nop
 8003d4a:	e7fe      	b.n	8003d4a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	60fb      	str	r3, [r7, #12]
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7fe fdbc 	bl	80028f6 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	3304      	adds	r3, #4
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe fdb7 	bl	80028f6 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8c:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d903      	bls.n	8003d9c <vTaskRemoveFromUnorderedEventList+0x78>
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	4a0f      	ldr	r2, [pc, #60]	; (8003dd8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4a0c      	ldr	r2, [pc, #48]	; (8003ddc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8003daa:	441a      	add	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f7fe fd42 	bl	800283c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dbc:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d902      	bls.n	8003dcc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8003dc6:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
	}
}
 8003dcc:	bf00      	nop
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20000d1c 	.word	0x20000d1c
 8003dd8:	20000cfc 	.word	0x20000cfc
 8003ddc:	20000824 	.word	0x20000824
 8003de0:	20000820 	.word	0x20000820
 8003de4:	20000d08 	.word	0x20000d08

08003de8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <vTaskInternalSetTimeOutState+0x24>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <vTaskInternalSetTimeOutState+0x28>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	605a      	str	r2, [r3, #4]
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	20000d0c 	.word	0x20000d0c
 8003e10:	20000cf8 	.word	0x20000cf8

08003e14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	613b      	str	r3, [r7, #16]
}
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	60fb      	str	r3, [r7, #12]
}
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003e56:	f000 fe95 	bl	8004b84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <xTaskCheckForTimeOut+0xbc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e72:	d102      	bne.n	8003e7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]
 8003e78:	e023      	b.n	8003ec2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b15      	ldr	r3, [pc, #84]	; (8003ed4 <xTaskCheckForTimeOut+0xc0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d007      	beq.n	8003e96 <xTaskCheckForTimeOut+0x82>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d302      	bcc.n	8003e96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e90:	2301      	movs	r3, #1
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	e015      	b.n	8003ec2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d20b      	bcs.n	8003eb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	1ad2      	subs	r2, r2, r3
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff ff9b 	bl	8003de8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
 8003eb6:	e004      	b.n	8003ec2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003ec2:	f000 fe8f 	bl	8004be4 <vPortExitCritical>

	return xReturn;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000cf8 	.word	0x20000cf8
 8003ed4:	20000d0c 	.word	0x20000d0c

08003ed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003edc:	4b03      	ldr	r3, [pc, #12]	; (8003eec <vTaskMissedYield+0x14>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	20000d08 	.word	0x20000d08

08003ef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ef8:	f000 f852 	bl	8003fa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <prvIdleTask+0x28>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d9f9      	bls.n	8003ef8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <prvIdleTask+0x2c>)
 8003f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f14:	e7f0      	b.n	8003ef8 <prvIdleTask+0x8>
 8003f16:	bf00      	nop
 8003f18:	20000824 	.word	0x20000824
 8003f1c:	e000ed04 	.word	0xe000ed04

08003f20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f26:	2300      	movs	r3, #0
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	e00c      	b.n	8003f46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <prvInitialiseTaskLists+0x60>)
 8003f38:	4413      	add	r3, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe fc51 	bl	80027e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3301      	adds	r3, #1
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b37      	cmp	r3, #55	; 0x37
 8003f4a:	d9ef      	bls.n	8003f2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f4c:	480d      	ldr	r0, [pc, #52]	; (8003f84 <prvInitialiseTaskLists+0x64>)
 8003f4e:	f7fe fc48 	bl	80027e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f52:	480d      	ldr	r0, [pc, #52]	; (8003f88 <prvInitialiseTaskLists+0x68>)
 8003f54:	f7fe fc45 	bl	80027e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f58:	480c      	ldr	r0, [pc, #48]	; (8003f8c <prvInitialiseTaskLists+0x6c>)
 8003f5a:	f7fe fc42 	bl	80027e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f5e:	480c      	ldr	r0, [pc, #48]	; (8003f90 <prvInitialiseTaskLists+0x70>)
 8003f60:	f7fe fc3f 	bl	80027e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f64:	480b      	ldr	r0, [pc, #44]	; (8003f94 <prvInitialiseTaskLists+0x74>)
 8003f66:	f7fe fc3c 	bl	80027e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f6a:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <prvInitialiseTaskLists+0x78>)
 8003f6c:	4a05      	ldr	r2, [pc, #20]	; (8003f84 <prvInitialiseTaskLists+0x64>)
 8003f6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <prvInitialiseTaskLists+0x7c>)
 8003f72:	4a05      	ldr	r2, [pc, #20]	; (8003f88 <prvInitialiseTaskLists+0x68>)
 8003f74:	601a      	str	r2, [r3, #0]
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000824 	.word	0x20000824
 8003f84:	20000c84 	.word	0x20000c84
 8003f88:	20000c98 	.word	0x20000c98
 8003f8c:	20000cb4 	.word	0x20000cb4
 8003f90:	20000cc8 	.word	0x20000cc8
 8003f94:	20000ce0 	.word	0x20000ce0
 8003f98:	20000cac 	.word	0x20000cac
 8003f9c:	20000cb0 	.word	0x20000cb0

08003fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fa6:	e019      	b.n	8003fdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fa8:	f000 fdec 	bl	8004b84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fac:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <prvCheckTasksWaitingTermination+0x50>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe fc9c 	bl	80028f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <prvCheckTasksWaitingTermination+0x54>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	4a0b      	ldr	r2, [pc, #44]	; (8003ff4 <prvCheckTasksWaitingTermination+0x54>)
 8003fc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <prvCheckTasksWaitingTermination+0x58>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <prvCheckTasksWaitingTermination+0x58>)
 8003fd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003fd2:	f000 fe07 	bl	8004be4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f810 	bl	8003ffc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <prvCheckTasksWaitingTermination+0x58>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e1      	bne.n	8003fa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000cc8 	.word	0x20000cc8
 8003ff4:	20000cf4 	.word	0x20000cf4
 8003ff8:	20000cdc 	.word	0x20000cdc

08003ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800400a:	2b00      	cmp	r3, #0
 800400c:	d108      	bne.n	8004020 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	4618      	mov	r0, r3
 8004014:	f000 ffa4 	bl	8004f60 <vPortFree>
				vPortFree( pxTCB );
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 ffa1 	bl	8004f60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800401e:	e018      	b.n	8004052 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004026:	2b01      	cmp	r3, #1
 8004028:	d103      	bne.n	8004032 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 ff98 	bl	8004f60 <vPortFree>
	}
 8004030:	e00f      	b.n	8004052 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004038:	2b02      	cmp	r3, #2
 800403a:	d00a      	beq.n	8004052 <prvDeleteTCB+0x56>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	60fb      	str	r3, [r7, #12]
}
 800404e:	bf00      	nop
 8004050:	e7fe      	b.n	8004050 <prvDeleteTCB+0x54>
	}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004062:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <prvResetNextTaskUnblockTime+0x38>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800406c:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <prvResetNextTaskUnblockTime+0x3c>)
 800406e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004072:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004074:	e008      	b.n	8004088 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004076:	4b07      	ldr	r3, [pc, #28]	; (8004094 <prvResetNextTaskUnblockTime+0x38>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	4a04      	ldr	r2, [pc, #16]	; (8004098 <prvResetNextTaskUnblockTime+0x3c>)
 8004086:	6013      	str	r3, [r2, #0]
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	20000cac 	.word	0x20000cac
 8004098:	20000d14 	.word	0x20000d14

0800409c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040a2:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <xTaskGetSchedulerState+0x34>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040aa:	2301      	movs	r3, #1
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	e008      	b.n	80040c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040b0:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <xTaskGetSchedulerState+0x38>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040b8:	2302      	movs	r3, #2
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	e001      	b.n	80040c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040be:	2300      	movs	r3, #0
 80040c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040c2:	687b      	ldr	r3, [r7, #4]
	}
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	20000d00 	.word	0x20000d00
 80040d4:	20000d1c 	.word	0x20000d1c

080040d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d056      	beq.n	800419c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80040ee:	4b2e      	ldr	r3, [pc, #184]	; (80041a8 <xTaskPriorityDisinherit+0xd0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d00a      	beq.n	800410e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	60fb      	str	r3, [r7, #12]
}
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	60bb      	str	r3, [r7, #8]
}
 8004128:	bf00      	nop
 800412a:	e7fe      	b.n	800412a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004130:	1e5a      	subs	r2, r3, #1
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	429a      	cmp	r2, r3
 8004140:	d02c      	beq.n	800419c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004146:	2b00      	cmp	r3, #0
 8004148:	d128      	bne.n	800419c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	3304      	adds	r3, #4
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe fbd1 	bl	80028f6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416c:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <xTaskPriorityDisinherit+0xd4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d903      	bls.n	800417c <xTaskPriorityDisinherit+0xa4>
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	4a0c      	ldr	r2, [pc, #48]	; (80041ac <xTaskPriorityDisinherit+0xd4>)
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4a09      	ldr	r2, [pc, #36]	; (80041b0 <xTaskPriorityDisinherit+0xd8>)
 800418a:	441a      	add	r2, r3
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	3304      	adds	r3, #4
 8004190:	4619      	mov	r1, r3
 8004192:	4610      	mov	r0, r2
 8004194:	f7fe fb52 	bl	800283c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004198:	2301      	movs	r3, #1
 800419a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800419c:	697b      	ldr	r3, [r7, #20]
	}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000820 	.word	0x20000820
 80041ac:	20000cfc 	.word	0x20000cfc
 80041b0:	20000824 	.word	0x20000824

080041b4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80041ba:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <uxTaskResetEventItemValue+0x2c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <uxTaskResetEventItemValue+0x2c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <uxTaskResetEventItemValue+0x2c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80041d0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80041d2:	687b      	ldr	r3, [r7, #4]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	20000820 	.word	0x20000820

080041e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041ee:	4b21      	ldr	r3, [pc, #132]	; (8004274 <prvAddCurrentTaskToDelayedList+0x90>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041f4:	4b20      	ldr	r3, [pc, #128]	; (8004278 <prvAddCurrentTaskToDelayedList+0x94>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fe fb7b 	bl	80028f6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004206:	d10a      	bne.n	800421e <prvAddCurrentTaskToDelayedList+0x3a>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800420e:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <prvAddCurrentTaskToDelayedList+0x94>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3304      	adds	r3, #4
 8004214:	4619      	mov	r1, r3
 8004216:	4819      	ldr	r0, [pc, #100]	; (800427c <prvAddCurrentTaskToDelayedList+0x98>)
 8004218:	f7fe fb10 	bl	800283c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800421c:	e026      	b.n	800426c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4413      	add	r3, r2
 8004224:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004226:	4b14      	ldr	r3, [pc, #80]	; (8004278 <prvAddCurrentTaskToDelayedList+0x94>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	429a      	cmp	r2, r3
 8004234:	d209      	bcs.n	800424a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004236:	4b12      	ldr	r3, [pc, #72]	; (8004280 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <prvAddCurrentTaskToDelayedList+0x94>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3304      	adds	r3, #4
 8004240:	4619      	mov	r1, r3
 8004242:	4610      	mov	r0, r2
 8004244:	f7fe fb1e 	bl	8002884 <vListInsert>
}
 8004248:	e010      	b.n	800426c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800424a:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <prvAddCurrentTaskToDelayedList+0xa0>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <prvAddCurrentTaskToDelayedList+0x94>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3304      	adds	r3, #4
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f7fe fb14 	bl	8002884 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <prvAddCurrentTaskToDelayedList+0xa4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	429a      	cmp	r2, r3
 8004264:	d202      	bcs.n	800426c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004266:	4a08      	ldr	r2, [pc, #32]	; (8004288 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	6013      	str	r3, [r2, #0]
}
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000cf8 	.word	0x20000cf8
 8004278:	20000820 	.word	0x20000820
 800427c:	20000ce0 	.word	0x20000ce0
 8004280:	20000cb0 	.word	0x20000cb0
 8004284:	20000cac 	.word	0x20000cac
 8004288:	20000d14 	.word	0x20000d14

0800428c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08a      	sub	sp, #40	; 0x28
 8004290:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004296:	f000 fb07 	bl	80048a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800429a:	4b1c      	ldr	r3, [pc, #112]	; (800430c <xTimerCreateTimerTask+0x80>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d021      	beq.n	80042e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80042aa:	1d3a      	adds	r2, r7, #4
 80042ac:	f107 0108 	add.w	r1, r7, #8
 80042b0:	f107 030c 	add.w	r3, r7, #12
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fe f8e5 	bl	8002484 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	9202      	str	r2, [sp, #8]
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	2302      	movs	r3, #2
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	2300      	movs	r3, #0
 80042ca:	460a      	mov	r2, r1
 80042cc:	4910      	ldr	r1, [pc, #64]	; (8004310 <xTimerCreateTimerTask+0x84>)
 80042ce:	4811      	ldr	r0, [pc, #68]	; (8004314 <xTimerCreateTimerTask+0x88>)
 80042d0:	f7ff f828 	bl	8003324 <xTaskCreateStatic>
 80042d4:	4603      	mov	r3, r0
 80042d6:	4a10      	ldr	r2, [pc, #64]	; (8004318 <xTimerCreateTimerTask+0x8c>)
 80042d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80042da:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <xTimerCreateTimerTask+0x8c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80042e2:	2301      	movs	r3, #1
 80042e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10a      	bne.n	8004302 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	613b      	str	r3, [r7, #16]
}
 80042fe:	bf00      	nop
 8004300:	e7fe      	b.n	8004300 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004302:	697b      	ldr	r3, [r7, #20]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000d50 	.word	0x20000d50
 8004310:	08005cf4 	.word	0x08005cf4
 8004314:	08004451 	.word	0x08004451
 8004318:	20000d54 	.word	0x20000d54

0800431c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	; 0x28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800432a:	2300      	movs	r3, #0
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10a      	bne.n	800434a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	623b      	str	r3, [r7, #32]
}
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800434a:	4b1a      	ldr	r3, [pc, #104]	; (80043b4 <xTimerGenericCommand+0x98>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d02a      	beq.n	80043a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b05      	cmp	r3, #5
 8004362:	dc18      	bgt.n	8004396 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004364:	f7ff fe9a 	bl	800409c <xTaskGetSchedulerState>
 8004368:	4603      	mov	r3, r0
 800436a:	2b02      	cmp	r3, #2
 800436c:	d109      	bne.n	8004382 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <xTimerGenericCommand+0x98>)
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	f107 0110 	add.w	r1, r7, #16
 8004376:	2300      	movs	r3, #0
 8004378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437a:	f7fe fbeb 	bl	8002b54 <xQueueGenericSend>
 800437e:	6278      	str	r0, [r7, #36]	; 0x24
 8004380:	e012      	b.n	80043a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004382:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <xTimerGenericCommand+0x98>)
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	f107 0110 	add.w	r1, r7, #16
 800438a:	2300      	movs	r3, #0
 800438c:	2200      	movs	r2, #0
 800438e:	f7fe fbe1 	bl	8002b54 <xQueueGenericSend>
 8004392:	6278      	str	r0, [r7, #36]	; 0x24
 8004394:	e008      	b.n	80043a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <xTimerGenericCommand+0x98>)
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	f107 0110 	add.w	r1, r7, #16
 800439e:	2300      	movs	r3, #0
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	f7fe fcd5 	bl	8002d50 <xQueueGenericSendFromISR>
 80043a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3728      	adds	r7, #40	; 0x28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000d50 	.word	0x20000d50

080043b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af02      	add	r7, sp, #8
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043c2:	4b22      	ldr	r3, [pc, #136]	; (800444c <prvProcessExpiredTimer+0x94>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe fa90 	bl	80028f6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d022      	beq.n	800442a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	699a      	ldr	r2, [r3, #24]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	18d1      	adds	r1, r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	6978      	ldr	r0, [r7, #20]
 80043f2:	f000 f8d1 	bl	8004598 <prvInsertTimerInActiveList>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d01f      	beq.n	800443c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043fc:	2300      	movs	r3, #0
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	2300      	movs	r3, #0
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	2100      	movs	r1, #0
 8004406:	6978      	ldr	r0, [r7, #20]
 8004408:	f7ff ff88 	bl	800431c <xTimerGenericCommand>
 800440c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d113      	bne.n	800443c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	60fb      	str	r3, [r7, #12]
}
 8004426:	bf00      	nop
 8004428:	e7fe      	b.n	8004428 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	b2da      	uxtb	r2, r3
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	6978      	ldr	r0, [r7, #20]
 8004442:	4798      	blx	r3
}
 8004444:	bf00      	nop
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000d48 	.word	0x20000d48

08004450 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004458:	f107 0308 	add.w	r3, r7, #8
 800445c:	4618      	mov	r0, r3
 800445e:	f000 f857 	bl	8004510 <prvGetNextExpireTime>
 8004462:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4619      	mov	r1, r3
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f803 	bl	8004474 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800446e:	f000 f8d5 	bl	800461c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004472:	e7f1      	b.n	8004458 <prvTimerTask+0x8>

08004474 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800447e:	f7ff f98d 	bl	800379c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004482:	f107 0308 	add.w	r3, r7, #8
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f866 	bl	8004558 <prvSampleTimeNow>
 800448c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d130      	bne.n	80044f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <prvProcessTimerOrBlockTask+0x3c>
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d806      	bhi.n	80044b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80044a2:	f7ff f989 	bl	80037b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044a6:	68f9      	ldr	r1, [r7, #12]
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff ff85 	bl	80043b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80044ae:	e024      	b.n	80044fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d008      	beq.n	80044c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044b6:	4b13      	ldr	r3, [pc, #76]	; (8004504 <prvProcessTimerOrBlockTask+0x90>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <prvProcessTimerOrBlockTask+0x50>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <prvProcessTimerOrBlockTask+0x52>
 80044c4:	2300      	movs	r3, #0
 80044c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044c8:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <prvProcessTimerOrBlockTask+0x94>)
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	4619      	mov	r1, r3
 80044d6:	f7fe fef1 	bl	80032bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80044da:	f7ff f96d 	bl	80037b8 <xTaskResumeAll>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <prvProcessTimerOrBlockTask+0x98>)
 80044e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	f3bf 8f6f 	isb	sy
}
 80044f4:	e001      	b.n	80044fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80044f6:	f7ff f95f 	bl	80037b8 <xTaskResumeAll>
}
 80044fa:	bf00      	nop
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000d4c 	.word	0x20000d4c
 8004508:	20000d50 	.word	0x20000d50
 800450c:	e000ed04 	.word	0xe000ed04

08004510 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004518:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <prvGetNextExpireTime+0x44>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <prvGetNextExpireTime+0x16>
 8004522:	2201      	movs	r2, #1
 8004524:	e000      	b.n	8004528 <prvGetNextExpireTime+0x18>
 8004526:	2200      	movs	r2, #0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d105      	bne.n	8004540 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004534:	4b07      	ldr	r3, [pc, #28]	; (8004554 <prvGetNextExpireTime+0x44>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	e001      	b.n	8004544 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004544:	68fb      	ldr	r3, [r7, #12]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20000d48 	.word	0x20000d48

08004558 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004560:	f7ff f9c8 	bl	80038f4 <xTaskGetTickCount>
 8004564:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004566:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <prvSampleTimeNow+0x3c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	429a      	cmp	r2, r3
 800456e:	d205      	bcs.n	800457c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004570:	f000 f936 	bl	80047e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	e002      	b.n	8004582 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004582:	4a04      	ldr	r2, [pc, #16]	; (8004594 <prvSampleTimeNow+0x3c>)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004588:	68fb      	ldr	r3, [r7, #12]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20000d58 	.word	0x20000d58

08004598 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d812      	bhi.n	80045e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	1ad2      	subs	r2, r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d302      	bcc.n	80045d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80045cc:	2301      	movs	r3, #1
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	e01b      	b.n	800460a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <prvInsertTimerInActiveList+0x7c>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3304      	adds	r3, #4
 80045da:	4619      	mov	r1, r3
 80045dc:	4610      	mov	r0, r2
 80045de:	f7fe f951 	bl	8002884 <vListInsert>
 80045e2:	e012      	b.n	800460a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d206      	bcs.n	80045fa <prvInsertTimerInActiveList+0x62>
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d302      	bcc.n	80045fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80045f4:	2301      	movs	r3, #1
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	e007      	b.n	800460a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045fa:	4b07      	ldr	r3, [pc, #28]	; (8004618 <prvInsertTimerInActiveList+0x80>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3304      	adds	r3, #4
 8004602:	4619      	mov	r1, r3
 8004604:	4610      	mov	r0, r2
 8004606:	f7fe f93d 	bl	8002884 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800460a:	697b      	ldr	r3, [r7, #20]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20000d4c 	.word	0x20000d4c
 8004618:	20000d48 	.word	0x20000d48

0800461c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08e      	sub	sp, #56	; 0x38
 8004620:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004622:	e0ca      	b.n	80047ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	da18      	bge.n	800465c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800462a:	1d3b      	adds	r3, r7, #4
 800462c:	3304      	adds	r3, #4
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	61fb      	str	r3, [r7, #28]
}
 8004648:	bf00      	nop
 800464a:	e7fe      	b.n	800464a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800464c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004652:	6850      	ldr	r0, [r2, #4]
 8004654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004656:	6892      	ldr	r2, [r2, #8]
 8004658:	4611      	mov	r1, r2
 800465a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f2c0 80aa 	blt.w	80047b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d004      	beq.n	800467a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004672:	3304      	adds	r3, #4
 8004674:	4618      	mov	r0, r3
 8004676:	f7fe f93e 	bl	80028f6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800467a:	463b      	mov	r3, r7
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ff6b 	bl	8004558 <prvSampleTimeNow>
 8004682:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b09      	cmp	r3, #9
 8004688:	f200 8097 	bhi.w	80047ba <prvProcessReceivedCommands+0x19e>
 800468c:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <prvProcessReceivedCommands+0x78>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046bd 	.word	0x080046bd
 8004698:	080046bd 	.word	0x080046bd
 800469c:	080046bd 	.word	0x080046bd
 80046a0:	08004731 	.word	0x08004731
 80046a4:	08004745 	.word	0x08004745
 80046a8:	0800478f 	.word	0x0800478f
 80046ac:	080046bd 	.word	0x080046bd
 80046b0:	080046bd 	.word	0x080046bd
 80046b4:	08004731 	.word	0x08004731
 80046b8:	08004745 	.word	0x08004745
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	18d1      	adds	r1, r2, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046dc:	f7ff ff5c 	bl	8004598 <prvInsertTimerInActiveList>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d069      	beq.n	80047ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d05e      	beq.n	80047ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	441a      	add	r2, r3
 8004704:	2300      	movs	r3, #0
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	2300      	movs	r3, #0
 800470a:	2100      	movs	r1, #0
 800470c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800470e:	f7ff fe05 	bl	800431c <xTimerGenericCommand>
 8004712:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d14f      	bne.n	80047ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	61bb      	str	r3, [r7, #24]
}
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004736:	f023 0301 	bic.w	r3, r3, #1
 800473a:	b2da      	uxtb	r2, r3
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004742:	e03a      	b.n	80047ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	b2da      	uxtb	r2, r3
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	617b      	str	r3, [r7, #20]
}
 8004776:	bf00      	nop
 8004778:	e7fe      	b.n	8004778 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	18d1      	adds	r1, r2, r3
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004788:	f7ff ff06 	bl	8004598 <prvInsertTimerInActiveList>
					break;
 800478c:	e015      	b.n	80047ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d103      	bne.n	80047a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800479c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800479e:	f000 fbdf 	bl	8004f60 <vPortFree>
 80047a2:	e00a      	b.n	80047ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80047b6:	e000      	b.n	80047ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80047b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047ba:	4b08      	ldr	r3, [pc, #32]	; (80047dc <prvProcessReceivedCommands+0x1c0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	1d39      	adds	r1, r7, #4
 80047c0:	2200      	movs	r2, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe fb60 	bl	8002e88 <xQueueReceive>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f47f af2a 	bne.w	8004624 <prvProcessReceivedCommands+0x8>
	}
}
 80047d0:	bf00      	nop
 80047d2:	bf00      	nop
 80047d4:	3730      	adds	r7, #48	; 0x30
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000d50 	.word	0x20000d50

080047e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047e6:	e048      	b.n	800487a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047e8:	4b2d      	ldr	r3, [pc, #180]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f2:	4b2b      	ldr	r3, [pc, #172]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3304      	adds	r3, #4
 8004800:	4618      	mov	r0, r3
 8004802:	f7fe f878 	bl	80028f6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d02e      	beq.n	800487a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4413      	add	r3, r2
 8004824:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	429a      	cmp	r2, r3
 800482c:	d90e      	bls.n	800484c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800483a:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3304      	adds	r3, #4
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f7fe f81d 	bl	8002884 <vListInsert>
 800484a:	e016      	b.n	800487a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800484c:	2300      	movs	r3, #0
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	2300      	movs	r3, #0
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	2100      	movs	r1, #0
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f7ff fd60 	bl	800431c <xTimerGenericCommand>
 800485c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	603b      	str	r3, [r7, #0]
}
 8004876:	bf00      	nop
 8004878:	e7fe      	b.n	8004878 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800487a:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1b1      	bne.n	80047e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004884:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <prvSwitchTimerLists+0xc4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a04      	ldr	r2, [pc, #16]	; (80048a0 <prvSwitchTimerLists+0xc0>)
 8004890:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004892:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <prvSwitchTimerLists+0xc4>)
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	6013      	str	r3, [r2, #0]
}
 8004898:	bf00      	nop
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000d48 	.word	0x20000d48
 80048a4:	20000d4c 	.word	0x20000d4c

080048a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80048ae:	f000 f969 	bl	8004b84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80048b2:	4b15      	ldr	r3, [pc, #84]	; (8004908 <prvCheckForValidListAndQueue+0x60>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d120      	bne.n	80048fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80048ba:	4814      	ldr	r0, [pc, #80]	; (800490c <prvCheckForValidListAndQueue+0x64>)
 80048bc:	f7fd ff91 	bl	80027e2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80048c0:	4813      	ldr	r0, [pc, #76]	; (8004910 <prvCheckForValidListAndQueue+0x68>)
 80048c2:	f7fd ff8e 	bl	80027e2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80048c6:	4b13      	ldr	r3, [pc, #76]	; (8004914 <prvCheckForValidListAndQueue+0x6c>)
 80048c8:	4a10      	ldr	r2, [pc, #64]	; (800490c <prvCheckForValidListAndQueue+0x64>)
 80048ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80048cc:	4b12      	ldr	r3, [pc, #72]	; (8004918 <prvCheckForValidListAndQueue+0x70>)
 80048ce:	4a10      	ldr	r2, [pc, #64]	; (8004910 <prvCheckForValidListAndQueue+0x68>)
 80048d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80048d2:	2300      	movs	r3, #0
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	4b11      	ldr	r3, [pc, #68]	; (800491c <prvCheckForValidListAndQueue+0x74>)
 80048d8:	4a11      	ldr	r2, [pc, #68]	; (8004920 <prvCheckForValidListAndQueue+0x78>)
 80048da:	2110      	movs	r1, #16
 80048dc:	200a      	movs	r0, #10
 80048de:	f7fe f89d 	bl	8002a1c <xQueueGenericCreateStatic>
 80048e2:	4603      	mov	r3, r0
 80048e4:	4a08      	ldr	r2, [pc, #32]	; (8004908 <prvCheckForValidListAndQueue+0x60>)
 80048e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80048e8:	4b07      	ldr	r3, [pc, #28]	; (8004908 <prvCheckForValidListAndQueue+0x60>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <prvCheckForValidListAndQueue+0x60>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	490b      	ldr	r1, [pc, #44]	; (8004924 <prvCheckForValidListAndQueue+0x7c>)
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe fcb6 	bl	8003268 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048fc:	f000 f972 	bl	8004be4 <vPortExitCritical>
}
 8004900:	bf00      	nop
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20000d50 	.word	0x20000d50
 800490c:	20000d20 	.word	0x20000d20
 8004910:	20000d34 	.word	0x20000d34
 8004914:	20000d48 	.word	0x20000d48
 8004918:	20000d4c 	.word	0x20000d4c
 800491c:	20000dfc 	.word	0x20000dfc
 8004920:	20000d5c 	.word	0x20000d5c
 8004924:	08005cfc 	.word	0x08005cfc

08004928 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3b04      	subs	r3, #4
 8004938:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3b04      	subs	r3, #4
 8004946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f023 0201 	bic.w	r2, r3, #1
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3b04      	subs	r3, #4
 8004956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004958:	4a0c      	ldr	r2, [pc, #48]	; (800498c <pxPortInitialiseStack+0x64>)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3b14      	subs	r3, #20
 8004962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3b04      	subs	r3, #4
 800496e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f06f 0202 	mvn.w	r2, #2
 8004976:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3b20      	subs	r3, #32
 800497c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800497e:	68fb      	ldr	r3, [r7, #12]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	08004991 	.word	0x08004991

08004990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004996:	2300      	movs	r3, #0
 8004998:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800499a:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <prvTaskExitError+0x54>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049a2:	d00a      	beq.n	80049ba <prvTaskExitError+0x2a>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	60fb      	str	r3, [r7, #12]
}
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <prvTaskExitError+0x28>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	60bb      	str	r3, [r7, #8]
}
 80049cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049ce:	bf00      	nop
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0fc      	beq.n	80049d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049d6:	bf00      	nop
 80049d8:	bf00      	nop
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	2000000c 	.word	0x2000000c
	...

080049f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049f0:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <pxCurrentTCBConst2>)
 80049f2:	6819      	ldr	r1, [r3, #0]
 80049f4:	6808      	ldr	r0, [r1, #0]
 80049f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fa:	f380 8809 	msr	PSP, r0
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f04f 0000 	mov.w	r0, #0
 8004a06:	f380 8811 	msr	BASEPRI, r0
 8004a0a:	4770      	bx	lr
 8004a0c:	f3af 8000 	nop.w

08004a10 <pxCurrentTCBConst2>:
 8004a10:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop

08004a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a18:	4808      	ldr	r0, [pc, #32]	; (8004a3c <prvPortStartFirstTask+0x24>)
 8004a1a:	6800      	ldr	r0, [r0, #0]
 8004a1c:	6800      	ldr	r0, [r0, #0]
 8004a1e:	f380 8808 	msr	MSP, r0
 8004a22:	f04f 0000 	mov.w	r0, #0
 8004a26:	f380 8814 	msr	CONTROL, r0
 8004a2a:	b662      	cpsie	i
 8004a2c:	b661      	cpsie	f
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	df00      	svc	0
 8004a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a3a:	bf00      	nop
 8004a3c:	e000ed08 	.word	0xe000ed08

08004a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a46:	4b46      	ldr	r3, [pc, #280]	; (8004b60 <xPortStartScheduler+0x120>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a46      	ldr	r2, [pc, #280]	; (8004b64 <xPortStartScheduler+0x124>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d10a      	bne.n	8004a66 <xPortStartScheduler+0x26>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	613b      	str	r3, [r7, #16]
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a66:	4b3e      	ldr	r3, [pc, #248]	; (8004b60 <xPortStartScheduler+0x120>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a3f      	ldr	r2, [pc, #252]	; (8004b68 <xPortStartScheduler+0x128>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10a      	bne.n	8004a86 <xPortStartScheduler+0x46>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	60fb      	str	r3, [r7, #12]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a86:	4b39      	ldr	r3, [pc, #228]	; (8004b6c <xPortStartScheduler+0x12c>)
 8004a88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	22ff      	movs	r2, #255	; 0xff
 8004a96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	4b31      	ldr	r3, [pc, #196]	; (8004b70 <xPortStartScheduler+0x130>)
 8004aac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004aae:	4b31      	ldr	r3, [pc, #196]	; (8004b74 <xPortStartScheduler+0x134>)
 8004ab0:	2207      	movs	r2, #7
 8004ab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ab4:	e009      	b.n	8004aca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ab6:	4b2f      	ldr	r3, [pc, #188]	; (8004b74 <xPortStartScheduler+0x134>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	4a2d      	ldr	r2, [pc, #180]	; (8004b74 <xPortStartScheduler+0x134>)
 8004abe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad2:	2b80      	cmp	r3, #128	; 0x80
 8004ad4:	d0ef      	beq.n	8004ab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ad6:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <xPortStartScheduler+0x134>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f1c3 0307 	rsb	r3, r3, #7
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d00a      	beq.n	8004af8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	60bb      	str	r3, [r7, #8]
}
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004af8:	4b1e      	ldr	r3, [pc, #120]	; (8004b74 <xPortStartScheduler+0x134>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	4a1d      	ldr	r2, [pc, #116]	; (8004b74 <xPortStartScheduler+0x134>)
 8004b00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b02:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <xPortStartScheduler+0x134>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b0a:	4a1a      	ldr	r2, [pc, #104]	; (8004b74 <xPortStartScheduler+0x134>)
 8004b0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b16:	4b18      	ldr	r3, [pc, #96]	; (8004b78 <xPortStartScheduler+0x138>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a17      	ldr	r2, [pc, #92]	; (8004b78 <xPortStartScheduler+0x138>)
 8004b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b22:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <xPortStartScheduler+0x138>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <xPortStartScheduler+0x138>)
 8004b28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b2e:	f000 f8dd 	bl	8004cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b32:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <xPortStartScheduler+0x13c>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b38:	f000 f8fc 	bl	8004d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b3c:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <xPortStartScheduler+0x140>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a0f      	ldr	r2, [pc, #60]	; (8004b80 <xPortStartScheduler+0x140>)
 8004b42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b48:	f7ff ff66 	bl	8004a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b4c:	f7fe ff9c 	bl	8003a88 <vTaskSwitchContext>
	prvTaskExitError();
 8004b50:	f7ff ff1e 	bl	8004990 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	e000ed00 	.word	0xe000ed00
 8004b64:	410fc271 	.word	0x410fc271
 8004b68:	410fc270 	.word	0x410fc270
 8004b6c:	e000e400 	.word	0xe000e400
 8004b70:	20000e4c 	.word	0x20000e4c
 8004b74:	20000e50 	.word	0x20000e50
 8004b78:	e000ed20 	.word	0xe000ed20
 8004b7c:	2000000c 	.word	0x2000000c
 8004b80:	e000ef34 	.word	0xe000ef34

08004b84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
	__asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	607b      	str	r3, [r7, #4]
}
 8004b9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b9e:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <vPortEnterCritical+0x58>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	4a0d      	ldr	r2, [pc, #52]	; (8004bdc <vPortEnterCritical+0x58>)
 8004ba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <vPortEnterCritical+0x58>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d10f      	bne.n	8004bd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <vPortEnterCritical+0x5c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	603b      	str	r3, [r7, #0]
}
 8004bcc:	bf00      	nop
 8004bce:	e7fe      	b.n	8004bce <vPortEnterCritical+0x4a>
	}
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	2000000c 	.word	0x2000000c
 8004be0:	e000ed04 	.word	0xe000ed04

08004be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bea:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <vPortExitCritical+0x50>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <vPortExitCritical+0x24>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	607b      	str	r3, [r7, #4]
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <vPortExitCritical+0x50>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	4a09      	ldr	r2, [pc, #36]	; (8004c34 <vPortExitCritical+0x50>)
 8004c10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c12:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <vPortExitCritical+0x50>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d105      	bne.n	8004c26 <vPortExitCritical+0x42>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	f383 8811 	msr	BASEPRI, r3
}
 8004c24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	2000000c 	.word	0x2000000c
	...

08004c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c40:	f3ef 8009 	mrs	r0, PSP
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <pxCurrentTCBConst>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	f01e 0f10 	tst.w	lr, #16
 8004c50:	bf08      	it	eq
 8004c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5a:	6010      	str	r0, [r2, #0]
 8004c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c64:	f380 8811 	msr	BASEPRI, r0
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f7fe ff0a 	bl	8003a88 <vTaskSwitchContext>
 8004c74:	f04f 0000 	mov.w	r0, #0
 8004c78:	f380 8811 	msr	BASEPRI, r0
 8004c7c:	bc09      	pop	{r0, r3}
 8004c7e:	6819      	ldr	r1, [r3, #0]
 8004c80:	6808      	ldr	r0, [r1, #0]
 8004c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c86:	f01e 0f10 	tst.w	lr, #16
 8004c8a:	bf08      	it	eq
 8004c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c90:	f380 8809 	msr	PSP, r0
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	f3af 8000 	nop.w

08004ca0 <pxCurrentTCBConst>:
 8004ca0:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop

08004ca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	607b      	str	r3, [r7, #4]
}
 8004cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004cc2:	f7fe fe27 	bl	8003914 <xTaskIncrementTick>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <xPortSysTickHandler+0x40>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	f383 8811 	msr	BASEPRI, r3
}
 8004cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	e000ed04 	.word	0xe000ed04

08004cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <vPortSetupTimerInterrupt+0x34>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <vPortSetupTimerInterrupt+0x38>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <vPortSetupTimerInterrupt+0x3c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <vPortSetupTimerInterrupt+0x40>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	099b      	lsrs	r3, r3, #6
 8004d08:	4a09      	ldr	r2, [pc, #36]	; (8004d30 <vPortSetupTimerInterrupt+0x44>)
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d0e:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <vPortSetupTimerInterrupt+0x34>)
 8004d10:	2207      	movs	r2, #7
 8004d12:	601a      	str	r2, [r3, #0]
}
 8004d14:	bf00      	nop
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	e000e010 	.word	0xe000e010
 8004d24:	e000e018 	.word	0xe000e018
 8004d28:	20000000 	.word	0x20000000
 8004d2c:	10624dd3 	.word	0x10624dd3
 8004d30:	e000e014 	.word	0xe000e014

08004d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d44 <vPortEnableVFP+0x10>
 8004d38:	6801      	ldr	r1, [r0, #0]
 8004d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d3e:	6001      	str	r1, [r0, #0]
 8004d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d42:	bf00      	nop
 8004d44:	e000ed88 	.word	0xe000ed88

08004d48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d4e:	f3ef 8305 	mrs	r3, IPSR
 8004d52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b0f      	cmp	r3, #15
 8004d58:	d914      	bls.n	8004d84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d5a:	4a17      	ldr	r2, [pc, #92]	; (8004db8 <vPortValidateInterruptPriority+0x70>)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d64:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <vPortValidateInterruptPriority+0x74>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	7afa      	ldrb	r2, [r7, #11]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d20a      	bcs.n	8004d84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	607b      	str	r3, [r7, #4]
}
 8004d80:	bf00      	nop
 8004d82:	e7fe      	b.n	8004d82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d84:	4b0e      	ldr	r3, [pc, #56]	; (8004dc0 <vPortValidateInterruptPriority+0x78>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d8c:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <vPortValidateInterruptPriority+0x7c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d90a      	bls.n	8004daa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	603b      	str	r3, [r7, #0]
}
 8004da6:	bf00      	nop
 8004da8:	e7fe      	b.n	8004da8 <vPortValidateInterruptPriority+0x60>
	}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	e000e3f0 	.word	0xe000e3f0
 8004dbc:	20000e4c 	.word	0x20000e4c
 8004dc0:	e000ed0c 	.word	0xe000ed0c
 8004dc4:	20000e50 	.word	0x20000e50

08004dc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08a      	sub	sp, #40	; 0x28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004dd4:	f7fe fce2 	bl	800379c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004dd8:	4b5b      	ldr	r3, [pc, #364]	; (8004f48 <pvPortMalloc+0x180>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004de0:	f000 f920 	bl	8005024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004de4:	4b59      	ldr	r3, [pc, #356]	; (8004f4c <pvPortMalloc+0x184>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f040 8093 	bne.w	8004f18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01d      	beq.n	8004e34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004df8:	2208      	movs	r2, #8
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d014      	beq.n	8004e34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f023 0307 	bic.w	r3, r3, #7
 8004e10:	3308      	adds	r3, #8
 8004e12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <pvPortMalloc+0x6c>
	__asm volatile
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	617b      	str	r3, [r7, #20]
}
 8004e30:	bf00      	nop
 8004e32:	e7fe      	b.n	8004e32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d06e      	beq.n	8004f18 <pvPortMalloc+0x150>
 8004e3a:	4b45      	ldr	r3, [pc, #276]	; (8004f50 <pvPortMalloc+0x188>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d869      	bhi.n	8004f18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e44:	4b43      	ldr	r3, [pc, #268]	; (8004f54 <pvPortMalloc+0x18c>)
 8004e46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e48:	4b42      	ldr	r3, [pc, #264]	; (8004f54 <pvPortMalloc+0x18c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e4e:	e004      	b.n	8004e5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d903      	bls.n	8004e6c <pvPortMalloc+0xa4>
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1f1      	bne.n	8004e50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e6c:	4b36      	ldr	r3, [pc, #216]	; (8004f48 <pvPortMalloc+0x180>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d050      	beq.n	8004f18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	4413      	add	r3, r2
 8004e7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	1ad2      	subs	r2, r2, r3
 8004e90:	2308      	movs	r3, #8
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d91f      	bls.n	8004ed8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <pvPortMalloc+0xf8>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	613b      	str	r3, [r7, #16]
}
 8004ebc:	bf00      	nop
 8004ebe:	e7fe      	b.n	8004ebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	1ad2      	subs	r2, r2, r3
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ed2:	69b8      	ldr	r0, [r7, #24]
 8004ed4:	f000 f908 	bl	80050e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <pvPortMalloc+0x188>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	4a1b      	ldr	r2, [pc, #108]	; (8004f50 <pvPortMalloc+0x188>)
 8004ee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ee6:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <pvPortMalloc+0x188>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <pvPortMalloc+0x190>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d203      	bcs.n	8004efa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ef2:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <pvPortMalloc+0x188>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a18      	ldr	r2, [pc, #96]	; (8004f58 <pvPortMalloc+0x190>)
 8004ef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	4b13      	ldr	r3, [pc, #76]	; (8004f4c <pvPortMalloc+0x184>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f0e:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <pvPortMalloc+0x194>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3301      	adds	r3, #1
 8004f14:	4a11      	ldr	r2, [pc, #68]	; (8004f5c <pvPortMalloc+0x194>)
 8004f16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f18:	f7fe fc4e 	bl	80037b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <pvPortMalloc+0x174>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	60fb      	str	r3, [r7, #12]
}
 8004f38:	bf00      	nop
 8004f3a:	e7fe      	b.n	8004f3a <pvPortMalloc+0x172>
	return pvReturn;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3728      	adds	r7, #40	; 0x28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20004a5c 	.word	0x20004a5c
 8004f4c:	20004a70 	.word	0x20004a70
 8004f50:	20004a60 	.word	0x20004a60
 8004f54:	20004a54 	.word	0x20004a54
 8004f58:	20004a64 	.word	0x20004a64
 8004f5c:	20004a68 	.word	0x20004a68

08004f60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d04d      	beq.n	800500e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f72:	2308      	movs	r3, #8
 8004f74:	425b      	negs	r3, r3
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4413      	add	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	4b24      	ldr	r3, [pc, #144]	; (8005018 <vPortFree+0xb8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10a      	bne.n	8004fa4 <vPortFree+0x44>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	60fb      	str	r3, [r7, #12]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <vPortFree+0x62>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	60bb      	str	r3, [r7, #8]
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	4b14      	ldr	r3, [pc, #80]	; (8005018 <vPortFree+0xb8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01e      	beq.n	800500e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d11a      	bne.n	800500e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <vPortFree+0xb8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004fe8:	f7fe fbd8 	bl	800379c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	; (800501c <vPortFree+0xbc>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <vPortFree+0xbc>)
 8004ff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ffa:	6938      	ldr	r0, [r7, #16]
 8004ffc:	f000 f874 	bl	80050e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005000:	4b07      	ldr	r3, [pc, #28]	; (8005020 <vPortFree+0xc0>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3301      	adds	r3, #1
 8005006:	4a06      	ldr	r2, [pc, #24]	; (8005020 <vPortFree+0xc0>)
 8005008:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800500a:	f7fe fbd5 	bl	80037b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800500e:	bf00      	nop
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20004a70 	.word	0x20004a70
 800501c:	20004a60 	.word	0x20004a60
 8005020:	20004a6c 	.word	0x20004a6c

08005024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800502a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800502e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005030:	4b27      	ldr	r3, [pc, #156]	; (80050d0 <prvHeapInit+0xac>)
 8005032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00c      	beq.n	8005058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3307      	adds	r3, #7
 8005042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0307 	bic.w	r3, r3, #7
 800504a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	4a1f      	ldr	r2, [pc, #124]	; (80050d0 <prvHeapInit+0xac>)
 8005054:	4413      	add	r3, r2
 8005056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800505c:	4a1d      	ldr	r2, [pc, #116]	; (80050d4 <prvHeapInit+0xb0>)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005062:	4b1c      	ldr	r3, [pc, #112]	; (80050d4 <prvHeapInit+0xb0>)
 8005064:	2200      	movs	r2, #0
 8005066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	4413      	add	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005070:	2208      	movs	r2, #8
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	1a9b      	subs	r3, r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0307 	bic.w	r3, r3, #7
 800507e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <prvHeapInit+0xb4>)
 8005084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005086:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <prvHeapInit+0xb4>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2200      	movs	r2, #0
 800508c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800508e:	4b12      	ldr	r3, [pc, #72]	; (80050d8 <prvHeapInit+0xb4>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	1ad2      	subs	r2, r2, r3
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050a4:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <prvHeapInit+0xb4>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	4a0a      	ldr	r2, [pc, #40]	; (80050dc <prvHeapInit+0xb8>)
 80050b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <prvHeapInit+0xbc>)
 80050ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050bc:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <prvHeapInit+0xc0>)
 80050be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050c2:	601a      	str	r2, [r3, #0]
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	20000e54 	.word	0x20000e54
 80050d4:	20004a54 	.word	0x20004a54
 80050d8:	20004a5c 	.word	0x20004a5c
 80050dc:	20004a64 	.word	0x20004a64
 80050e0:	20004a60 	.word	0x20004a60
 80050e4:	20004a70 	.word	0x20004a70

080050e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050f0:	4b28      	ldr	r3, [pc, #160]	; (8005194 <prvInsertBlockIntoFreeList+0xac>)
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	e002      	b.n	80050fc <prvInsertBlockIntoFreeList+0x14>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	429a      	cmp	r2, r3
 8005104:	d8f7      	bhi.n	80050f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	4413      	add	r3, r2
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	429a      	cmp	r2, r3
 8005116:	d108      	bne.n	800512a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	441a      	add	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	441a      	add	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d118      	bne.n	8005170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4b15      	ldr	r3, [pc, #84]	; (8005198 <prvInsertBlockIntoFreeList+0xb0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d00d      	beq.n	8005166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	441a      	add	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e008      	b.n	8005178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005166:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <prvInsertBlockIntoFreeList+0xb0>)
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e003      	b.n	8005178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d002      	beq.n	8005186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20004a54 	.word	0x20004a54
 8005198:	20004a5c 	.word	0x20004a5c

0800519c <__errno>:
 800519c:	4b01      	ldr	r3, [pc, #4]	; (80051a4 <__errno+0x8>)
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000010 	.word	0x20000010

080051a8 <__libc_init_array>:
 80051a8:	b570      	push	{r4, r5, r6, lr}
 80051aa:	4d0d      	ldr	r5, [pc, #52]	; (80051e0 <__libc_init_array+0x38>)
 80051ac:	4c0d      	ldr	r4, [pc, #52]	; (80051e4 <__libc_init_array+0x3c>)
 80051ae:	1b64      	subs	r4, r4, r5
 80051b0:	10a4      	asrs	r4, r4, #2
 80051b2:	2600      	movs	r6, #0
 80051b4:	42a6      	cmp	r6, r4
 80051b6:	d109      	bne.n	80051cc <__libc_init_array+0x24>
 80051b8:	4d0b      	ldr	r5, [pc, #44]	; (80051e8 <__libc_init_array+0x40>)
 80051ba:	4c0c      	ldr	r4, [pc, #48]	; (80051ec <__libc_init_array+0x44>)
 80051bc:	f000 fd2c 	bl	8005c18 <_init>
 80051c0:	1b64      	subs	r4, r4, r5
 80051c2:	10a4      	asrs	r4, r4, #2
 80051c4:	2600      	movs	r6, #0
 80051c6:	42a6      	cmp	r6, r4
 80051c8:	d105      	bne.n	80051d6 <__libc_init_array+0x2e>
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d0:	4798      	blx	r3
 80051d2:	3601      	adds	r6, #1
 80051d4:	e7ee      	b.n	80051b4 <__libc_init_array+0xc>
 80051d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051da:	4798      	blx	r3
 80051dc:	3601      	adds	r6, #1
 80051de:	e7f2      	b.n	80051c6 <__libc_init_array+0x1e>
 80051e0:	08005d88 	.word	0x08005d88
 80051e4:	08005d88 	.word	0x08005d88
 80051e8:	08005d88 	.word	0x08005d88
 80051ec:	08005d8c 	.word	0x08005d8c

080051f0 <memcpy>:
 80051f0:	440a      	add	r2, r1
 80051f2:	4291      	cmp	r1, r2
 80051f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80051f8:	d100      	bne.n	80051fc <memcpy+0xc>
 80051fa:	4770      	bx	lr
 80051fc:	b510      	push	{r4, lr}
 80051fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005206:	4291      	cmp	r1, r2
 8005208:	d1f9      	bne.n	80051fe <memcpy+0xe>
 800520a:	bd10      	pop	{r4, pc}

0800520c <memset>:
 800520c:	4402      	add	r2, r0
 800520e:	4603      	mov	r3, r0
 8005210:	4293      	cmp	r3, r2
 8005212:	d100      	bne.n	8005216 <memset+0xa>
 8005214:	4770      	bx	lr
 8005216:	f803 1b01 	strb.w	r1, [r3], #1
 800521a:	e7f9      	b.n	8005210 <memset+0x4>

0800521c <_puts_r>:
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	460e      	mov	r6, r1
 8005220:	4605      	mov	r5, r0
 8005222:	b118      	cbz	r0, 800522c <_puts_r+0x10>
 8005224:	6983      	ldr	r3, [r0, #24]
 8005226:	b90b      	cbnz	r3, 800522c <_puts_r+0x10>
 8005228:	f000 fa48 	bl	80056bc <__sinit>
 800522c:	69ab      	ldr	r3, [r5, #24]
 800522e:	68ac      	ldr	r4, [r5, #8]
 8005230:	b913      	cbnz	r3, 8005238 <_puts_r+0x1c>
 8005232:	4628      	mov	r0, r5
 8005234:	f000 fa42 	bl	80056bc <__sinit>
 8005238:	4b2c      	ldr	r3, [pc, #176]	; (80052ec <_puts_r+0xd0>)
 800523a:	429c      	cmp	r4, r3
 800523c:	d120      	bne.n	8005280 <_puts_r+0x64>
 800523e:	686c      	ldr	r4, [r5, #4]
 8005240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005242:	07db      	lsls	r3, r3, #31
 8005244:	d405      	bmi.n	8005252 <_puts_r+0x36>
 8005246:	89a3      	ldrh	r3, [r4, #12]
 8005248:	0598      	lsls	r0, r3, #22
 800524a:	d402      	bmi.n	8005252 <_puts_r+0x36>
 800524c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800524e:	f000 fad3 	bl	80057f8 <__retarget_lock_acquire_recursive>
 8005252:	89a3      	ldrh	r3, [r4, #12]
 8005254:	0719      	lsls	r1, r3, #28
 8005256:	d51d      	bpl.n	8005294 <_puts_r+0x78>
 8005258:	6923      	ldr	r3, [r4, #16]
 800525a:	b1db      	cbz	r3, 8005294 <_puts_r+0x78>
 800525c:	3e01      	subs	r6, #1
 800525e:	68a3      	ldr	r3, [r4, #8]
 8005260:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005264:	3b01      	subs	r3, #1
 8005266:	60a3      	str	r3, [r4, #8]
 8005268:	bb39      	cbnz	r1, 80052ba <_puts_r+0x9e>
 800526a:	2b00      	cmp	r3, #0
 800526c:	da38      	bge.n	80052e0 <_puts_r+0xc4>
 800526e:	4622      	mov	r2, r4
 8005270:	210a      	movs	r1, #10
 8005272:	4628      	mov	r0, r5
 8005274:	f000 f848 	bl	8005308 <__swbuf_r>
 8005278:	3001      	adds	r0, #1
 800527a:	d011      	beq.n	80052a0 <_puts_r+0x84>
 800527c:	250a      	movs	r5, #10
 800527e:	e011      	b.n	80052a4 <_puts_r+0x88>
 8005280:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <_puts_r+0xd4>)
 8005282:	429c      	cmp	r4, r3
 8005284:	d101      	bne.n	800528a <_puts_r+0x6e>
 8005286:	68ac      	ldr	r4, [r5, #8]
 8005288:	e7da      	b.n	8005240 <_puts_r+0x24>
 800528a:	4b1a      	ldr	r3, [pc, #104]	; (80052f4 <_puts_r+0xd8>)
 800528c:	429c      	cmp	r4, r3
 800528e:	bf08      	it	eq
 8005290:	68ec      	ldreq	r4, [r5, #12]
 8005292:	e7d5      	b.n	8005240 <_puts_r+0x24>
 8005294:	4621      	mov	r1, r4
 8005296:	4628      	mov	r0, r5
 8005298:	f000 f888 	bl	80053ac <__swsetup_r>
 800529c:	2800      	cmp	r0, #0
 800529e:	d0dd      	beq.n	800525c <_puts_r+0x40>
 80052a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80052a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052a6:	07da      	lsls	r2, r3, #31
 80052a8:	d405      	bmi.n	80052b6 <_puts_r+0x9a>
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	059b      	lsls	r3, r3, #22
 80052ae:	d402      	bmi.n	80052b6 <_puts_r+0x9a>
 80052b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052b2:	f000 faa2 	bl	80057fa <__retarget_lock_release_recursive>
 80052b6:	4628      	mov	r0, r5
 80052b8:	bd70      	pop	{r4, r5, r6, pc}
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	da04      	bge.n	80052c8 <_puts_r+0xac>
 80052be:	69a2      	ldr	r2, [r4, #24]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	dc06      	bgt.n	80052d2 <_puts_r+0xb6>
 80052c4:	290a      	cmp	r1, #10
 80052c6:	d004      	beq.n	80052d2 <_puts_r+0xb6>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	6022      	str	r2, [r4, #0]
 80052ce:	7019      	strb	r1, [r3, #0]
 80052d0:	e7c5      	b.n	800525e <_puts_r+0x42>
 80052d2:	4622      	mov	r2, r4
 80052d4:	4628      	mov	r0, r5
 80052d6:	f000 f817 	bl	8005308 <__swbuf_r>
 80052da:	3001      	adds	r0, #1
 80052dc:	d1bf      	bne.n	800525e <_puts_r+0x42>
 80052de:	e7df      	b.n	80052a0 <_puts_r+0x84>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	250a      	movs	r5, #10
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	6022      	str	r2, [r4, #0]
 80052e8:	701d      	strb	r5, [r3, #0]
 80052ea:	e7db      	b.n	80052a4 <_puts_r+0x88>
 80052ec:	08005d40 	.word	0x08005d40
 80052f0:	08005d60 	.word	0x08005d60
 80052f4:	08005d20 	.word	0x08005d20

080052f8 <puts>:
 80052f8:	4b02      	ldr	r3, [pc, #8]	; (8005304 <puts+0xc>)
 80052fa:	4601      	mov	r1, r0
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	f7ff bf8d 	b.w	800521c <_puts_r>
 8005302:	bf00      	nop
 8005304:	20000010 	.word	0x20000010

08005308 <__swbuf_r>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	460e      	mov	r6, r1
 800530c:	4614      	mov	r4, r2
 800530e:	4605      	mov	r5, r0
 8005310:	b118      	cbz	r0, 800531a <__swbuf_r+0x12>
 8005312:	6983      	ldr	r3, [r0, #24]
 8005314:	b90b      	cbnz	r3, 800531a <__swbuf_r+0x12>
 8005316:	f000 f9d1 	bl	80056bc <__sinit>
 800531a:	4b21      	ldr	r3, [pc, #132]	; (80053a0 <__swbuf_r+0x98>)
 800531c:	429c      	cmp	r4, r3
 800531e:	d12b      	bne.n	8005378 <__swbuf_r+0x70>
 8005320:	686c      	ldr	r4, [r5, #4]
 8005322:	69a3      	ldr	r3, [r4, #24]
 8005324:	60a3      	str	r3, [r4, #8]
 8005326:	89a3      	ldrh	r3, [r4, #12]
 8005328:	071a      	lsls	r2, r3, #28
 800532a:	d52f      	bpl.n	800538c <__swbuf_r+0x84>
 800532c:	6923      	ldr	r3, [r4, #16]
 800532e:	b36b      	cbz	r3, 800538c <__swbuf_r+0x84>
 8005330:	6923      	ldr	r3, [r4, #16]
 8005332:	6820      	ldr	r0, [r4, #0]
 8005334:	1ac0      	subs	r0, r0, r3
 8005336:	6963      	ldr	r3, [r4, #20]
 8005338:	b2f6      	uxtb	r6, r6
 800533a:	4283      	cmp	r3, r0
 800533c:	4637      	mov	r7, r6
 800533e:	dc04      	bgt.n	800534a <__swbuf_r+0x42>
 8005340:	4621      	mov	r1, r4
 8005342:	4628      	mov	r0, r5
 8005344:	f000 f926 	bl	8005594 <_fflush_r>
 8005348:	bb30      	cbnz	r0, 8005398 <__swbuf_r+0x90>
 800534a:	68a3      	ldr	r3, [r4, #8]
 800534c:	3b01      	subs	r3, #1
 800534e:	60a3      	str	r3, [r4, #8]
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	6022      	str	r2, [r4, #0]
 8005356:	701e      	strb	r6, [r3, #0]
 8005358:	6963      	ldr	r3, [r4, #20]
 800535a:	3001      	adds	r0, #1
 800535c:	4283      	cmp	r3, r0
 800535e:	d004      	beq.n	800536a <__swbuf_r+0x62>
 8005360:	89a3      	ldrh	r3, [r4, #12]
 8005362:	07db      	lsls	r3, r3, #31
 8005364:	d506      	bpl.n	8005374 <__swbuf_r+0x6c>
 8005366:	2e0a      	cmp	r6, #10
 8005368:	d104      	bne.n	8005374 <__swbuf_r+0x6c>
 800536a:	4621      	mov	r1, r4
 800536c:	4628      	mov	r0, r5
 800536e:	f000 f911 	bl	8005594 <_fflush_r>
 8005372:	b988      	cbnz	r0, 8005398 <__swbuf_r+0x90>
 8005374:	4638      	mov	r0, r7
 8005376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005378:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <__swbuf_r+0x9c>)
 800537a:	429c      	cmp	r4, r3
 800537c:	d101      	bne.n	8005382 <__swbuf_r+0x7a>
 800537e:	68ac      	ldr	r4, [r5, #8]
 8005380:	e7cf      	b.n	8005322 <__swbuf_r+0x1a>
 8005382:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <__swbuf_r+0xa0>)
 8005384:	429c      	cmp	r4, r3
 8005386:	bf08      	it	eq
 8005388:	68ec      	ldreq	r4, [r5, #12]
 800538a:	e7ca      	b.n	8005322 <__swbuf_r+0x1a>
 800538c:	4621      	mov	r1, r4
 800538e:	4628      	mov	r0, r5
 8005390:	f000 f80c 	bl	80053ac <__swsetup_r>
 8005394:	2800      	cmp	r0, #0
 8005396:	d0cb      	beq.n	8005330 <__swbuf_r+0x28>
 8005398:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800539c:	e7ea      	b.n	8005374 <__swbuf_r+0x6c>
 800539e:	bf00      	nop
 80053a0:	08005d40 	.word	0x08005d40
 80053a4:	08005d60 	.word	0x08005d60
 80053a8:	08005d20 	.word	0x08005d20

080053ac <__swsetup_r>:
 80053ac:	4b32      	ldr	r3, [pc, #200]	; (8005478 <__swsetup_r+0xcc>)
 80053ae:	b570      	push	{r4, r5, r6, lr}
 80053b0:	681d      	ldr	r5, [r3, #0]
 80053b2:	4606      	mov	r6, r0
 80053b4:	460c      	mov	r4, r1
 80053b6:	b125      	cbz	r5, 80053c2 <__swsetup_r+0x16>
 80053b8:	69ab      	ldr	r3, [r5, #24]
 80053ba:	b913      	cbnz	r3, 80053c2 <__swsetup_r+0x16>
 80053bc:	4628      	mov	r0, r5
 80053be:	f000 f97d 	bl	80056bc <__sinit>
 80053c2:	4b2e      	ldr	r3, [pc, #184]	; (800547c <__swsetup_r+0xd0>)
 80053c4:	429c      	cmp	r4, r3
 80053c6:	d10f      	bne.n	80053e8 <__swsetup_r+0x3c>
 80053c8:	686c      	ldr	r4, [r5, #4]
 80053ca:	89a3      	ldrh	r3, [r4, #12]
 80053cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053d0:	0719      	lsls	r1, r3, #28
 80053d2:	d42c      	bmi.n	800542e <__swsetup_r+0x82>
 80053d4:	06dd      	lsls	r5, r3, #27
 80053d6:	d411      	bmi.n	80053fc <__swsetup_r+0x50>
 80053d8:	2309      	movs	r3, #9
 80053da:	6033      	str	r3, [r6, #0]
 80053dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053e0:	81a3      	strh	r3, [r4, #12]
 80053e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053e6:	e03e      	b.n	8005466 <__swsetup_r+0xba>
 80053e8:	4b25      	ldr	r3, [pc, #148]	; (8005480 <__swsetup_r+0xd4>)
 80053ea:	429c      	cmp	r4, r3
 80053ec:	d101      	bne.n	80053f2 <__swsetup_r+0x46>
 80053ee:	68ac      	ldr	r4, [r5, #8]
 80053f0:	e7eb      	b.n	80053ca <__swsetup_r+0x1e>
 80053f2:	4b24      	ldr	r3, [pc, #144]	; (8005484 <__swsetup_r+0xd8>)
 80053f4:	429c      	cmp	r4, r3
 80053f6:	bf08      	it	eq
 80053f8:	68ec      	ldreq	r4, [r5, #12]
 80053fa:	e7e6      	b.n	80053ca <__swsetup_r+0x1e>
 80053fc:	0758      	lsls	r0, r3, #29
 80053fe:	d512      	bpl.n	8005426 <__swsetup_r+0x7a>
 8005400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005402:	b141      	cbz	r1, 8005416 <__swsetup_r+0x6a>
 8005404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005408:	4299      	cmp	r1, r3
 800540a:	d002      	beq.n	8005412 <__swsetup_r+0x66>
 800540c:	4630      	mov	r0, r6
 800540e:	f000 fa5b 	bl	80058c8 <_free_r>
 8005412:	2300      	movs	r3, #0
 8005414:	6363      	str	r3, [r4, #52]	; 0x34
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800541c:	81a3      	strh	r3, [r4, #12]
 800541e:	2300      	movs	r3, #0
 8005420:	6063      	str	r3, [r4, #4]
 8005422:	6923      	ldr	r3, [r4, #16]
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	89a3      	ldrh	r3, [r4, #12]
 8005428:	f043 0308 	orr.w	r3, r3, #8
 800542c:	81a3      	strh	r3, [r4, #12]
 800542e:	6923      	ldr	r3, [r4, #16]
 8005430:	b94b      	cbnz	r3, 8005446 <__swsetup_r+0x9a>
 8005432:	89a3      	ldrh	r3, [r4, #12]
 8005434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800543c:	d003      	beq.n	8005446 <__swsetup_r+0x9a>
 800543e:	4621      	mov	r1, r4
 8005440:	4630      	mov	r0, r6
 8005442:	f000 fa01 	bl	8005848 <__smakebuf_r>
 8005446:	89a0      	ldrh	r0, [r4, #12]
 8005448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800544c:	f010 0301 	ands.w	r3, r0, #1
 8005450:	d00a      	beq.n	8005468 <__swsetup_r+0xbc>
 8005452:	2300      	movs	r3, #0
 8005454:	60a3      	str	r3, [r4, #8]
 8005456:	6963      	ldr	r3, [r4, #20]
 8005458:	425b      	negs	r3, r3
 800545a:	61a3      	str	r3, [r4, #24]
 800545c:	6923      	ldr	r3, [r4, #16]
 800545e:	b943      	cbnz	r3, 8005472 <__swsetup_r+0xc6>
 8005460:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005464:	d1ba      	bne.n	80053dc <__swsetup_r+0x30>
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	0781      	lsls	r1, r0, #30
 800546a:	bf58      	it	pl
 800546c:	6963      	ldrpl	r3, [r4, #20]
 800546e:	60a3      	str	r3, [r4, #8]
 8005470:	e7f4      	b.n	800545c <__swsetup_r+0xb0>
 8005472:	2000      	movs	r0, #0
 8005474:	e7f7      	b.n	8005466 <__swsetup_r+0xba>
 8005476:	bf00      	nop
 8005478:	20000010 	.word	0x20000010
 800547c:	08005d40 	.word	0x08005d40
 8005480:	08005d60 	.word	0x08005d60
 8005484:	08005d20 	.word	0x08005d20

08005488 <__sflush_r>:
 8005488:	898a      	ldrh	r2, [r1, #12]
 800548a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800548e:	4605      	mov	r5, r0
 8005490:	0710      	lsls	r0, r2, #28
 8005492:	460c      	mov	r4, r1
 8005494:	d458      	bmi.n	8005548 <__sflush_r+0xc0>
 8005496:	684b      	ldr	r3, [r1, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	dc05      	bgt.n	80054a8 <__sflush_r+0x20>
 800549c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	dc02      	bgt.n	80054a8 <__sflush_r+0x20>
 80054a2:	2000      	movs	r0, #0
 80054a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054aa:	2e00      	cmp	r6, #0
 80054ac:	d0f9      	beq.n	80054a2 <__sflush_r+0x1a>
 80054ae:	2300      	movs	r3, #0
 80054b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054b4:	682f      	ldr	r7, [r5, #0]
 80054b6:	602b      	str	r3, [r5, #0]
 80054b8:	d032      	beq.n	8005520 <__sflush_r+0x98>
 80054ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	075a      	lsls	r2, r3, #29
 80054c0:	d505      	bpl.n	80054ce <__sflush_r+0x46>
 80054c2:	6863      	ldr	r3, [r4, #4]
 80054c4:	1ac0      	subs	r0, r0, r3
 80054c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054c8:	b10b      	cbz	r3, 80054ce <__sflush_r+0x46>
 80054ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054cc:	1ac0      	subs	r0, r0, r3
 80054ce:	2300      	movs	r3, #0
 80054d0:	4602      	mov	r2, r0
 80054d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054d4:	6a21      	ldr	r1, [r4, #32]
 80054d6:	4628      	mov	r0, r5
 80054d8:	47b0      	blx	r6
 80054da:	1c43      	adds	r3, r0, #1
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	d106      	bne.n	80054ee <__sflush_r+0x66>
 80054e0:	6829      	ldr	r1, [r5, #0]
 80054e2:	291d      	cmp	r1, #29
 80054e4:	d82c      	bhi.n	8005540 <__sflush_r+0xb8>
 80054e6:	4a2a      	ldr	r2, [pc, #168]	; (8005590 <__sflush_r+0x108>)
 80054e8:	40ca      	lsrs	r2, r1
 80054ea:	07d6      	lsls	r6, r2, #31
 80054ec:	d528      	bpl.n	8005540 <__sflush_r+0xb8>
 80054ee:	2200      	movs	r2, #0
 80054f0:	6062      	str	r2, [r4, #4]
 80054f2:	04d9      	lsls	r1, r3, #19
 80054f4:	6922      	ldr	r2, [r4, #16]
 80054f6:	6022      	str	r2, [r4, #0]
 80054f8:	d504      	bpl.n	8005504 <__sflush_r+0x7c>
 80054fa:	1c42      	adds	r2, r0, #1
 80054fc:	d101      	bne.n	8005502 <__sflush_r+0x7a>
 80054fe:	682b      	ldr	r3, [r5, #0]
 8005500:	b903      	cbnz	r3, 8005504 <__sflush_r+0x7c>
 8005502:	6560      	str	r0, [r4, #84]	; 0x54
 8005504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005506:	602f      	str	r7, [r5, #0]
 8005508:	2900      	cmp	r1, #0
 800550a:	d0ca      	beq.n	80054a2 <__sflush_r+0x1a>
 800550c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005510:	4299      	cmp	r1, r3
 8005512:	d002      	beq.n	800551a <__sflush_r+0x92>
 8005514:	4628      	mov	r0, r5
 8005516:	f000 f9d7 	bl	80058c8 <_free_r>
 800551a:	2000      	movs	r0, #0
 800551c:	6360      	str	r0, [r4, #52]	; 0x34
 800551e:	e7c1      	b.n	80054a4 <__sflush_r+0x1c>
 8005520:	6a21      	ldr	r1, [r4, #32]
 8005522:	2301      	movs	r3, #1
 8005524:	4628      	mov	r0, r5
 8005526:	47b0      	blx	r6
 8005528:	1c41      	adds	r1, r0, #1
 800552a:	d1c7      	bne.n	80054bc <__sflush_r+0x34>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0c4      	beq.n	80054bc <__sflush_r+0x34>
 8005532:	2b1d      	cmp	r3, #29
 8005534:	d001      	beq.n	800553a <__sflush_r+0xb2>
 8005536:	2b16      	cmp	r3, #22
 8005538:	d101      	bne.n	800553e <__sflush_r+0xb6>
 800553a:	602f      	str	r7, [r5, #0]
 800553c:	e7b1      	b.n	80054a2 <__sflush_r+0x1a>
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005544:	81a3      	strh	r3, [r4, #12]
 8005546:	e7ad      	b.n	80054a4 <__sflush_r+0x1c>
 8005548:	690f      	ldr	r7, [r1, #16]
 800554a:	2f00      	cmp	r7, #0
 800554c:	d0a9      	beq.n	80054a2 <__sflush_r+0x1a>
 800554e:	0793      	lsls	r3, r2, #30
 8005550:	680e      	ldr	r6, [r1, #0]
 8005552:	bf08      	it	eq
 8005554:	694b      	ldreq	r3, [r1, #20]
 8005556:	600f      	str	r7, [r1, #0]
 8005558:	bf18      	it	ne
 800555a:	2300      	movne	r3, #0
 800555c:	eba6 0807 	sub.w	r8, r6, r7
 8005560:	608b      	str	r3, [r1, #8]
 8005562:	f1b8 0f00 	cmp.w	r8, #0
 8005566:	dd9c      	ble.n	80054a2 <__sflush_r+0x1a>
 8005568:	6a21      	ldr	r1, [r4, #32]
 800556a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800556c:	4643      	mov	r3, r8
 800556e:	463a      	mov	r2, r7
 8005570:	4628      	mov	r0, r5
 8005572:	47b0      	blx	r6
 8005574:	2800      	cmp	r0, #0
 8005576:	dc06      	bgt.n	8005586 <__sflush_r+0xfe>
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557e:	81a3      	strh	r3, [r4, #12]
 8005580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005584:	e78e      	b.n	80054a4 <__sflush_r+0x1c>
 8005586:	4407      	add	r7, r0
 8005588:	eba8 0800 	sub.w	r8, r8, r0
 800558c:	e7e9      	b.n	8005562 <__sflush_r+0xda>
 800558e:	bf00      	nop
 8005590:	20400001 	.word	0x20400001

08005594 <_fflush_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	690b      	ldr	r3, [r1, #16]
 8005598:	4605      	mov	r5, r0
 800559a:	460c      	mov	r4, r1
 800559c:	b913      	cbnz	r3, 80055a4 <_fflush_r+0x10>
 800559e:	2500      	movs	r5, #0
 80055a0:	4628      	mov	r0, r5
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
 80055a4:	b118      	cbz	r0, 80055ae <_fflush_r+0x1a>
 80055a6:	6983      	ldr	r3, [r0, #24]
 80055a8:	b90b      	cbnz	r3, 80055ae <_fflush_r+0x1a>
 80055aa:	f000 f887 	bl	80056bc <__sinit>
 80055ae:	4b14      	ldr	r3, [pc, #80]	; (8005600 <_fflush_r+0x6c>)
 80055b0:	429c      	cmp	r4, r3
 80055b2:	d11b      	bne.n	80055ec <_fflush_r+0x58>
 80055b4:	686c      	ldr	r4, [r5, #4]
 80055b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0ef      	beq.n	800559e <_fflush_r+0xa>
 80055be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055c0:	07d0      	lsls	r0, r2, #31
 80055c2:	d404      	bmi.n	80055ce <_fflush_r+0x3a>
 80055c4:	0599      	lsls	r1, r3, #22
 80055c6:	d402      	bmi.n	80055ce <_fflush_r+0x3a>
 80055c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ca:	f000 f915 	bl	80057f8 <__retarget_lock_acquire_recursive>
 80055ce:	4628      	mov	r0, r5
 80055d0:	4621      	mov	r1, r4
 80055d2:	f7ff ff59 	bl	8005488 <__sflush_r>
 80055d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055d8:	07da      	lsls	r2, r3, #31
 80055da:	4605      	mov	r5, r0
 80055dc:	d4e0      	bmi.n	80055a0 <_fflush_r+0xc>
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	059b      	lsls	r3, r3, #22
 80055e2:	d4dd      	bmi.n	80055a0 <_fflush_r+0xc>
 80055e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055e6:	f000 f908 	bl	80057fa <__retarget_lock_release_recursive>
 80055ea:	e7d9      	b.n	80055a0 <_fflush_r+0xc>
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <_fflush_r+0x70>)
 80055ee:	429c      	cmp	r4, r3
 80055f0:	d101      	bne.n	80055f6 <_fflush_r+0x62>
 80055f2:	68ac      	ldr	r4, [r5, #8]
 80055f4:	e7df      	b.n	80055b6 <_fflush_r+0x22>
 80055f6:	4b04      	ldr	r3, [pc, #16]	; (8005608 <_fflush_r+0x74>)
 80055f8:	429c      	cmp	r4, r3
 80055fa:	bf08      	it	eq
 80055fc:	68ec      	ldreq	r4, [r5, #12]
 80055fe:	e7da      	b.n	80055b6 <_fflush_r+0x22>
 8005600:	08005d40 	.word	0x08005d40
 8005604:	08005d60 	.word	0x08005d60
 8005608:	08005d20 	.word	0x08005d20

0800560c <std>:
 800560c:	2300      	movs	r3, #0
 800560e:	b510      	push	{r4, lr}
 8005610:	4604      	mov	r4, r0
 8005612:	e9c0 3300 	strd	r3, r3, [r0]
 8005616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800561a:	6083      	str	r3, [r0, #8]
 800561c:	8181      	strh	r1, [r0, #12]
 800561e:	6643      	str	r3, [r0, #100]	; 0x64
 8005620:	81c2      	strh	r2, [r0, #14]
 8005622:	6183      	str	r3, [r0, #24]
 8005624:	4619      	mov	r1, r3
 8005626:	2208      	movs	r2, #8
 8005628:	305c      	adds	r0, #92	; 0x5c
 800562a:	f7ff fdef 	bl	800520c <memset>
 800562e:	4b05      	ldr	r3, [pc, #20]	; (8005644 <std+0x38>)
 8005630:	6263      	str	r3, [r4, #36]	; 0x24
 8005632:	4b05      	ldr	r3, [pc, #20]	; (8005648 <std+0x3c>)
 8005634:	62a3      	str	r3, [r4, #40]	; 0x28
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <std+0x40>)
 8005638:	62e3      	str	r3, [r4, #44]	; 0x2c
 800563a:	4b05      	ldr	r3, [pc, #20]	; (8005650 <std+0x44>)
 800563c:	6224      	str	r4, [r4, #32]
 800563e:	6323      	str	r3, [r4, #48]	; 0x30
 8005640:	bd10      	pop	{r4, pc}
 8005642:	bf00      	nop
 8005644:	08005aa9 	.word	0x08005aa9
 8005648:	08005acb 	.word	0x08005acb
 800564c:	08005b03 	.word	0x08005b03
 8005650:	08005b27 	.word	0x08005b27

08005654 <_cleanup_r>:
 8005654:	4901      	ldr	r1, [pc, #4]	; (800565c <_cleanup_r+0x8>)
 8005656:	f000 b8af 	b.w	80057b8 <_fwalk_reent>
 800565a:	bf00      	nop
 800565c:	08005595 	.word	0x08005595

08005660 <__sfmoreglue>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	2268      	movs	r2, #104	; 0x68
 8005664:	1e4d      	subs	r5, r1, #1
 8005666:	4355      	muls	r5, r2
 8005668:	460e      	mov	r6, r1
 800566a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800566e:	f000 f997 	bl	80059a0 <_malloc_r>
 8005672:	4604      	mov	r4, r0
 8005674:	b140      	cbz	r0, 8005688 <__sfmoreglue+0x28>
 8005676:	2100      	movs	r1, #0
 8005678:	e9c0 1600 	strd	r1, r6, [r0]
 800567c:	300c      	adds	r0, #12
 800567e:	60a0      	str	r0, [r4, #8]
 8005680:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005684:	f7ff fdc2 	bl	800520c <memset>
 8005688:	4620      	mov	r0, r4
 800568a:	bd70      	pop	{r4, r5, r6, pc}

0800568c <__sfp_lock_acquire>:
 800568c:	4801      	ldr	r0, [pc, #4]	; (8005694 <__sfp_lock_acquire+0x8>)
 800568e:	f000 b8b3 	b.w	80057f8 <__retarget_lock_acquire_recursive>
 8005692:	bf00      	nop
 8005694:	20004a75 	.word	0x20004a75

08005698 <__sfp_lock_release>:
 8005698:	4801      	ldr	r0, [pc, #4]	; (80056a0 <__sfp_lock_release+0x8>)
 800569a:	f000 b8ae 	b.w	80057fa <__retarget_lock_release_recursive>
 800569e:	bf00      	nop
 80056a0:	20004a75 	.word	0x20004a75

080056a4 <__sinit_lock_acquire>:
 80056a4:	4801      	ldr	r0, [pc, #4]	; (80056ac <__sinit_lock_acquire+0x8>)
 80056a6:	f000 b8a7 	b.w	80057f8 <__retarget_lock_acquire_recursive>
 80056aa:	bf00      	nop
 80056ac:	20004a76 	.word	0x20004a76

080056b0 <__sinit_lock_release>:
 80056b0:	4801      	ldr	r0, [pc, #4]	; (80056b8 <__sinit_lock_release+0x8>)
 80056b2:	f000 b8a2 	b.w	80057fa <__retarget_lock_release_recursive>
 80056b6:	bf00      	nop
 80056b8:	20004a76 	.word	0x20004a76

080056bc <__sinit>:
 80056bc:	b510      	push	{r4, lr}
 80056be:	4604      	mov	r4, r0
 80056c0:	f7ff fff0 	bl	80056a4 <__sinit_lock_acquire>
 80056c4:	69a3      	ldr	r3, [r4, #24]
 80056c6:	b11b      	cbz	r3, 80056d0 <__sinit+0x14>
 80056c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056cc:	f7ff bff0 	b.w	80056b0 <__sinit_lock_release>
 80056d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80056d4:	6523      	str	r3, [r4, #80]	; 0x50
 80056d6:	4b13      	ldr	r3, [pc, #76]	; (8005724 <__sinit+0x68>)
 80056d8:	4a13      	ldr	r2, [pc, #76]	; (8005728 <__sinit+0x6c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80056de:	42a3      	cmp	r3, r4
 80056e0:	bf04      	itt	eq
 80056e2:	2301      	moveq	r3, #1
 80056e4:	61a3      	streq	r3, [r4, #24]
 80056e6:	4620      	mov	r0, r4
 80056e8:	f000 f820 	bl	800572c <__sfp>
 80056ec:	6060      	str	r0, [r4, #4]
 80056ee:	4620      	mov	r0, r4
 80056f0:	f000 f81c 	bl	800572c <__sfp>
 80056f4:	60a0      	str	r0, [r4, #8]
 80056f6:	4620      	mov	r0, r4
 80056f8:	f000 f818 	bl	800572c <__sfp>
 80056fc:	2200      	movs	r2, #0
 80056fe:	60e0      	str	r0, [r4, #12]
 8005700:	2104      	movs	r1, #4
 8005702:	6860      	ldr	r0, [r4, #4]
 8005704:	f7ff ff82 	bl	800560c <std>
 8005708:	68a0      	ldr	r0, [r4, #8]
 800570a:	2201      	movs	r2, #1
 800570c:	2109      	movs	r1, #9
 800570e:	f7ff ff7d 	bl	800560c <std>
 8005712:	68e0      	ldr	r0, [r4, #12]
 8005714:	2202      	movs	r2, #2
 8005716:	2112      	movs	r1, #18
 8005718:	f7ff ff78 	bl	800560c <std>
 800571c:	2301      	movs	r3, #1
 800571e:	61a3      	str	r3, [r4, #24]
 8005720:	e7d2      	b.n	80056c8 <__sinit+0xc>
 8005722:	bf00      	nop
 8005724:	08005d1c 	.word	0x08005d1c
 8005728:	08005655 	.word	0x08005655

0800572c <__sfp>:
 800572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572e:	4607      	mov	r7, r0
 8005730:	f7ff ffac 	bl	800568c <__sfp_lock_acquire>
 8005734:	4b1e      	ldr	r3, [pc, #120]	; (80057b0 <__sfp+0x84>)
 8005736:	681e      	ldr	r6, [r3, #0]
 8005738:	69b3      	ldr	r3, [r6, #24]
 800573a:	b913      	cbnz	r3, 8005742 <__sfp+0x16>
 800573c:	4630      	mov	r0, r6
 800573e:	f7ff ffbd 	bl	80056bc <__sinit>
 8005742:	3648      	adds	r6, #72	; 0x48
 8005744:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005748:	3b01      	subs	r3, #1
 800574a:	d503      	bpl.n	8005754 <__sfp+0x28>
 800574c:	6833      	ldr	r3, [r6, #0]
 800574e:	b30b      	cbz	r3, 8005794 <__sfp+0x68>
 8005750:	6836      	ldr	r6, [r6, #0]
 8005752:	e7f7      	b.n	8005744 <__sfp+0x18>
 8005754:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005758:	b9d5      	cbnz	r5, 8005790 <__sfp+0x64>
 800575a:	4b16      	ldr	r3, [pc, #88]	; (80057b4 <__sfp+0x88>)
 800575c:	60e3      	str	r3, [r4, #12]
 800575e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005762:	6665      	str	r5, [r4, #100]	; 0x64
 8005764:	f000 f847 	bl	80057f6 <__retarget_lock_init_recursive>
 8005768:	f7ff ff96 	bl	8005698 <__sfp_lock_release>
 800576c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005770:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005774:	6025      	str	r5, [r4, #0]
 8005776:	61a5      	str	r5, [r4, #24]
 8005778:	2208      	movs	r2, #8
 800577a:	4629      	mov	r1, r5
 800577c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005780:	f7ff fd44 	bl	800520c <memset>
 8005784:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005788:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800578c:	4620      	mov	r0, r4
 800578e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005790:	3468      	adds	r4, #104	; 0x68
 8005792:	e7d9      	b.n	8005748 <__sfp+0x1c>
 8005794:	2104      	movs	r1, #4
 8005796:	4638      	mov	r0, r7
 8005798:	f7ff ff62 	bl	8005660 <__sfmoreglue>
 800579c:	4604      	mov	r4, r0
 800579e:	6030      	str	r0, [r6, #0]
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d1d5      	bne.n	8005750 <__sfp+0x24>
 80057a4:	f7ff ff78 	bl	8005698 <__sfp_lock_release>
 80057a8:	230c      	movs	r3, #12
 80057aa:	603b      	str	r3, [r7, #0]
 80057ac:	e7ee      	b.n	800578c <__sfp+0x60>
 80057ae:	bf00      	nop
 80057b0:	08005d1c 	.word	0x08005d1c
 80057b4:	ffff0001 	.word	0xffff0001

080057b8 <_fwalk_reent>:
 80057b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057bc:	4606      	mov	r6, r0
 80057be:	4688      	mov	r8, r1
 80057c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057c4:	2700      	movs	r7, #0
 80057c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057ca:	f1b9 0901 	subs.w	r9, r9, #1
 80057ce:	d505      	bpl.n	80057dc <_fwalk_reent+0x24>
 80057d0:	6824      	ldr	r4, [r4, #0]
 80057d2:	2c00      	cmp	r4, #0
 80057d4:	d1f7      	bne.n	80057c6 <_fwalk_reent+0xe>
 80057d6:	4638      	mov	r0, r7
 80057d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057dc:	89ab      	ldrh	r3, [r5, #12]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d907      	bls.n	80057f2 <_fwalk_reent+0x3a>
 80057e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057e6:	3301      	adds	r3, #1
 80057e8:	d003      	beq.n	80057f2 <_fwalk_reent+0x3a>
 80057ea:	4629      	mov	r1, r5
 80057ec:	4630      	mov	r0, r6
 80057ee:	47c0      	blx	r8
 80057f0:	4307      	orrs	r7, r0
 80057f2:	3568      	adds	r5, #104	; 0x68
 80057f4:	e7e9      	b.n	80057ca <_fwalk_reent+0x12>

080057f6 <__retarget_lock_init_recursive>:
 80057f6:	4770      	bx	lr

080057f8 <__retarget_lock_acquire_recursive>:
 80057f8:	4770      	bx	lr

080057fa <__retarget_lock_release_recursive>:
 80057fa:	4770      	bx	lr

080057fc <__swhatbuf_r>:
 80057fc:	b570      	push	{r4, r5, r6, lr}
 80057fe:	460e      	mov	r6, r1
 8005800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005804:	2900      	cmp	r1, #0
 8005806:	b096      	sub	sp, #88	; 0x58
 8005808:	4614      	mov	r4, r2
 800580a:	461d      	mov	r5, r3
 800580c:	da08      	bge.n	8005820 <__swhatbuf_r+0x24>
 800580e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	602a      	str	r2, [r5, #0]
 8005816:	061a      	lsls	r2, r3, #24
 8005818:	d410      	bmi.n	800583c <__swhatbuf_r+0x40>
 800581a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800581e:	e00e      	b.n	800583e <__swhatbuf_r+0x42>
 8005820:	466a      	mov	r2, sp
 8005822:	f000 f9a7 	bl	8005b74 <_fstat_r>
 8005826:	2800      	cmp	r0, #0
 8005828:	dbf1      	blt.n	800580e <__swhatbuf_r+0x12>
 800582a:	9a01      	ldr	r2, [sp, #4]
 800582c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005830:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005834:	425a      	negs	r2, r3
 8005836:	415a      	adcs	r2, r3
 8005838:	602a      	str	r2, [r5, #0]
 800583a:	e7ee      	b.n	800581a <__swhatbuf_r+0x1e>
 800583c:	2340      	movs	r3, #64	; 0x40
 800583e:	2000      	movs	r0, #0
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	b016      	add	sp, #88	; 0x58
 8005844:	bd70      	pop	{r4, r5, r6, pc}
	...

08005848 <__smakebuf_r>:
 8005848:	898b      	ldrh	r3, [r1, #12]
 800584a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800584c:	079d      	lsls	r5, r3, #30
 800584e:	4606      	mov	r6, r0
 8005850:	460c      	mov	r4, r1
 8005852:	d507      	bpl.n	8005864 <__smakebuf_r+0x1c>
 8005854:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	6123      	str	r3, [r4, #16]
 800585c:	2301      	movs	r3, #1
 800585e:	6163      	str	r3, [r4, #20]
 8005860:	b002      	add	sp, #8
 8005862:	bd70      	pop	{r4, r5, r6, pc}
 8005864:	ab01      	add	r3, sp, #4
 8005866:	466a      	mov	r2, sp
 8005868:	f7ff ffc8 	bl	80057fc <__swhatbuf_r>
 800586c:	9900      	ldr	r1, [sp, #0]
 800586e:	4605      	mov	r5, r0
 8005870:	4630      	mov	r0, r6
 8005872:	f000 f895 	bl	80059a0 <_malloc_r>
 8005876:	b948      	cbnz	r0, 800588c <__smakebuf_r+0x44>
 8005878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800587c:	059a      	lsls	r2, r3, #22
 800587e:	d4ef      	bmi.n	8005860 <__smakebuf_r+0x18>
 8005880:	f023 0303 	bic.w	r3, r3, #3
 8005884:	f043 0302 	orr.w	r3, r3, #2
 8005888:	81a3      	strh	r3, [r4, #12]
 800588a:	e7e3      	b.n	8005854 <__smakebuf_r+0xc>
 800588c:	4b0d      	ldr	r3, [pc, #52]	; (80058c4 <__smakebuf_r+0x7c>)
 800588e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	6020      	str	r0, [r4, #0]
 8005894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005898:	81a3      	strh	r3, [r4, #12]
 800589a:	9b00      	ldr	r3, [sp, #0]
 800589c:	6163      	str	r3, [r4, #20]
 800589e:	9b01      	ldr	r3, [sp, #4]
 80058a0:	6120      	str	r0, [r4, #16]
 80058a2:	b15b      	cbz	r3, 80058bc <__smakebuf_r+0x74>
 80058a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058a8:	4630      	mov	r0, r6
 80058aa:	f000 f975 	bl	8005b98 <_isatty_r>
 80058ae:	b128      	cbz	r0, 80058bc <__smakebuf_r+0x74>
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	f023 0303 	bic.w	r3, r3, #3
 80058b6:	f043 0301 	orr.w	r3, r3, #1
 80058ba:	81a3      	strh	r3, [r4, #12]
 80058bc:	89a0      	ldrh	r0, [r4, #12]
 80058be:	4305      	orrs	r5, r0
 80058c0:	81a5      	strh	r5, [r4, #12]
 80058c2:	e7cd      	b.n	8005860 <__smakebuf_r+0x18>
 80058c4:	08005655 	.word	0x08005655

080058c8 <_free_r>:
 80058c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058ca:	2900      	cmp	r1, #0
 80058cc:	d044      	beq.n	8005958 <_free_r+0x90>
 80058ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d2:	9001      	str	r0, [sp, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f1a1 0404 	sub.w	r4, r1, #4
 80058da:	bfb8      	it	lt
 80058dc:	18e4      	addlt	r4, r4, r3
 80058de:	f000 f97d 	bl	8005bdc <__malloc_lock>
 80058e2:	4a1e      	ldr	r2, [pc, #120]	; (800595c <_free_r+0x94>)
 80058e4:	9801      	ldr	r0, [sp, #4]
 80058e6:	6813      	ldr	r3, [r2, #0]
 80058e8:	b933      	cbnz	r3, 80058f8 <_free_r+0x30>
 80058ea:	6063      	str	r3, [r4, #4]
 80058ec:	6014      	str	r4, [r2, #0]
 80058ee:	b003      	add	sp, #12
 80058f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058f4:	f000 b978 	b.w	8005be8 <__malloc_unlock>
 80058f8:	42a3      	cmp	r3, r4
 80058fa:	d908      	bls.n	800590e <_free_r+0x46>
 80058fc:	6825      	ldr	r5, [r4, #0]
 80058fe:	1961      	adds	r1, r4, r5
 8005900:	428b      	cmp	r3, r1
 8005902:	bf01      	itttt	eq
 8005904:	6819      	ldreq	r1, [r3, #0]
 8005906:	685b      	ldreq	r3, [r3, #4]
 8005908:	1949      	addeq	r1, r1, r5
 800590a:	6021      	streq	r1, [r4, #0]
 800590c:	e7ed      	b.n	80058ea <_free_r+0x22>
 800590e:	461a      	mov	r2, r3
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	b10b      	cbz	r3, 8005918 <_free_r+0x50>
 8005914:	42a3      	cmp	r3, r4
 8005916:	d9fa      	bls.n	800590e <_free_r+0x46>
 8005918:	6811      	ldr	r1, [r2, #0]
 800591a:	1855      	adds	r5, r2, r1
 800591c:	42a5      	cmp	r5, r4
 800591e:	d10b      	bne.n	8005938 <_free_r+0x70>
 8005920:	6824      	ldr	r4, [r4, #0]
 8005922:	4421      	add	r1, r4
 8005924:	1854      	adds	r4, r2, r1
 8005926:	42a3      	cmp	r3, r4
 8005928:	6011      	str	r1, [r2, #0]
 800592a:	d1e0      	bne.n	80058ee <_free_r+0x26>
 800592c:	681c      	ldr	r4, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	6053      	str	r3, [r2, #4]
 8005932:	4421      	add	r1, r4
 8005934:	6011      	str	r1, [r2, #0]
 8005936:	e7da      	b.n	80058ee <_free_r+0x26>
 8005938:	d902      	bls.n	8005940 <_free_r+0x78>
 800593a:	230c      	movs	r3, #12
 800593c:	6003      	str	r3, [r0, #0]
 800593e:	e7d6      	b.n	80058ee <_free_r+0x26>
 8005940:	6825      	ldr	r5, [r4, #0]
 8005942:	1961      	adds	r1, r4, r5
 8005944:	428b      	cmp	r3, r1
 8005946:	bf04      	itt	eq
 8005948:	6819      	ldreq	r1, [r3, #0]
 800594a:	685b      	ldreq	r3, [r3, #4]
 800594c:	6063      	str	r3, [r4, #4]
 800594e:	bf04      	itt	eq
 8005950:	1949      	addeq	r1, r1, r5
 8005952:	6021      	streq	r1, [r4, #0]
 8005954:	6054      	str	r4, [r2, #4]
 8005956:	e7ca      	b.n	80058ee <_free_r+0x26>
 8005958:	b003      	add	sp, #12
 800595a:	bd30      	pop	{r4, r5, pc}
 800595c:	20004a78 	.word	0x20004a78

08005960 <sbrk_aligned>:
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	4e0e      	ldr	r6, [pc, #56]	; (800599c <sbrk_aligned+0x3c>)
 8005964:	460c      	mov	r4, r1
 8005966:	6831      	ldr	r1, [r6, #0]
 8005968:	4605      	mov	r5, r0
 800596a:	b911      	cbnz	r1, 8005972 <sbrk_aligned+0x12>
 800596c:	f000 f88c 	bl	8005a88 <_sbrk_r>
 8005970:	6030      	str	r0, [r6, #0]
 8005972:	4621      	mov	r1, r4
 8005974:	4628      	mov	r0, r5
 8005976:	f000 f887 	bl	8005a88 <_sbrk_r>
 800597a:	1c43      	adds	r3, r0, #1
 800597c:	d00a      	beq.n	8005994 <sbrk_aligned+0x34>
 800597e:	1cc4      	adds	r4, r0, #3
 8005980:	f024 0403 	bic.w	r4, r4, #3
 8005984:	42a0      	cmp	r0, r4
 8005986:	d007      	beq.n	8005998 <sbrk_aligned+0x38>
 8005988:	1a21      	subs	r1, r4, r0
 800598a:	4628      	mov	r0, r5
 800598c:	f000 f87c 	bl	8005a88 <_sbrk_r>
 8005990:	3001      	adds	r0, #1
 8005992:	d101      	bne.n	8005998 <sbrk_aligned+0x38>
 8005994:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005998:	4620      	mov	r0, r4
 800599a:	bd70      	pop	{r4, r5, r6, pc}
 800599c:	20004a7c 	.word	0x20004a7c

080059a0 <_malloc_r>:
 80059a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a4:	1ccd      	adds	r5, r1, #3
 80059a6:	f025 0503 	bic.w	r5, r5, #3
 80059aa:	3508      	adds	r5, #8
 80059ac:	2d0c      	cmp	r5, #12
 80059ae:	bf38      	it	cc
 80059b0:	250c      	movcc	r5, #12
 80059b2:	2d00      	cmp	r5, #0
 80059b4:	4607      	mov	r7, r0
 80059b6:	db01      	blt.n	80059bc <_malloc_r+0x1c>
 80059b8:	42a9      	cmp	r1, r5
 80059ba:	d905      	bls.n	80059c8 <_malloc_r+0x28>
 80059bc:	230c      	movs	r3, #12
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	2600      	movs	r6, #0
 80059c2:	4630      	mov	r0, r6
 80059c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059c8:	4e2e      	ldr	r6, [pc, #184]	; (8005a84 <_malloc_r+0xe4>)
 80059ca:	f000 f907 	bl	8005bdc <__malloc_lock>
 80059ce:	6833      	ldr	r3, [r6, #0]
 80059d0:	461c      	mov	r4, r3
 80059d2:	bb34      	cbnz	r4, 8005a22 <_malloc_r+0x82>
 80059d4:	4629      	mov	r1, r5
 80059d6:	4638      	mov	r0, r7
 80059d8:	f7ff ffc2 	bl	8005960 <sbrk_aligned>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	4604      	mov	r4, r0
 80059e0:	d14d      	bne.n	8005a7e <_malloc_r+0xde>
 80059e2:	6834      	ldr	r4, [r6, #0]
 80059e4:	4626      	mov	r6, r4
 80059e6:	2e00      	cmp	r6, #0
 80059e8:	d140      	bne.n	8005a6c <_malloc_r+0xcc>
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	4631      	mov	r1, r6
 80059ee:	4638      	mov	r0, r7
 80059f0:	eb04 0803 	add.w	r8, r4, r3
 80059f4:	f000 f848 	bl	8005a88 <_sbrk_r>
 80059f8:	4580      	cmp	r8, r0
 80059fa:	d13a      	bne.n	8005a72 <_malloc_r+0xd2>
 80059fc:	6821      	ldr	r1, [r4, #0]
 80059fe:	3503      	adds	r5, #3
 8005a00:	1a6d      	subs	r5, r5, r1
 8005a02:	f025 0503 	bic.w	r5, r5, #3
 8005a06:	3508      	adds	r5, #8
 8005a08:	2d0c      	cmp	r5, #12
 8005a0a:	bf38      	it	cc
 8005a0c:	250c      	movcc	r5, #12
 8005a0e:	4629      	mov	r1, r5
 8005a10:	4638      	mov	r0, r7
 8005a12:	f7ff ffa5 	bl	8005960 <sbrk_aligned>
 8005a16:	3001      	adds	r0, #1
 8005a18:	d02b      	beq.n	8005a72 <_malloc_r+0xd2>
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	442b      	add	r3, r5
 8005a1e:	6023      	str	r3, [r4, #0]
 8005a20:	e00e      	b.n	8005a40 <_malloc_r+0xa0>
 8005a22:	6822      	ldr	r2, [r4, #0]
 8005a24:	1b52      	subs	r2, r2, r5
 8005a26:	d41e      	bmi.n	8005a66 <_malloc_r+0xc6>
 8005a28:	2a0b      	cmp	r2, #11
 8005a2a:	d916      	bls.n	8005a5a <_malloc_r+0xba>
 8005a2c:	1961      	adds	r1, r4, r5
 8005a2e:	42a3      	cmp	r3, r4
 8005a30:	6025      	str	r5, [r4, #0]
 8005a32:	bf18      	it	ne
 8005a34:	6059      	strne	r1, [r3, #4]
 8005a36:	6863      	ldr	r3, [r4, #4]
 8005a38:	bf08      	it	eq
 8005a3a:	6031      	streq	r1, [r6, #0]
 8005a3c:	5162      	str	r2, [r4, r5]
 8005a3e:	604b      	str	r3, [r1, #4]
 8005a40:	4638      	mov	r0, r7
 8005a42:	f104 060b 	add.w	r6, r4, #11
 8005a46:	f000 f8cf 	bl	8005be8 <__malloc_unlock>
 8005a4a:	f026 0607 	bic.w	r6, r6, #7
 8005a4e:	1d23      	adds	r3, r4, #4
 8005a50:	1af2      	subs	r2, r6, r3
 8005a52:	d0b6      	beq.n	80059c2 <_malloc_r+0x22>
 8005a54:	1b9b      	subs	r3, r3, r6
 8005a56:	50a3      	str	r3, [r4, r2]
 8005a58:	e7b3      	b.n	80059c2 <_malloc_r+0x22>
 8005a5a:	6862      	ldr	r2, [r4, #4]
 8005a5c:	42a3      	cmp	r3, r4
 8005a5e:	bf0c      	ite	eq
 8005a60:	6032      	streq	r2, [r6, #0]
 8005a62:	605a      	strne	r2, [r3, #4]
 8005a64:	e7ec      	b.n	8005a40 <_malloc_r+0xa0>
 8005a66:	4623      	mov	r3, r4
 8005a68:	6864      	ldr	r4, [r4, #4]
 8005a6a:	e7b2      	b.n	80059d2 <_malloc_r+0x32>
 8005a6c:	4634      	mov	r4, r6
 8005a6e:	6876      	ldr	r6, [r6, #4]
 8005a70:	e7b9      	b.n	80059e6 <_malloc_r+0x46>
 8005a72:	230c      	movs	r3, #12
 8005a74:	603b      	str	r3, [r7, #0]
 8005a76:	4638      	mov	r0, r7
 8005a78:	f000 f8b6 	bl	8005be8 <__malloc_unlock>
 8005a7c:	e7a1      	b.n	80059c2 <_malloc_r+0x22>
 8005a7e:	6025      	str	r5, [r4, #0]
 8005a80:	e7de      	b.n	8005a40 <_malloc_r+0xa0>
 8005a82:	bf00      	nop
 8005a84:	20004a78 	.word	0x20004a78

08005a88 <_sbrk_r>:
 8005a88:	b538      	push	{r3, r4, r5, lr}
 8005a8a:	4d06      	ldr	r5, [pc, #24]	; (8005aa4 <_sbrk_r+0x1c>)
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	4604      	mov	r4, r0
 8005a90:	4608      	mov	r0, r1
 8005a92:	602b      	str	r3, [r5, #0]
 8005a94:	f7fa ff98 	bl	80009c8 <_sbrk>
 8005a98:	1c43      	adds	r3, r0, #1
 8005a9a:	d102      	bne.n	8005aa2 <_sbrk_r+0x1a>
 8005a9c:	682b      	ldr	r3, [r5, #0]
 8005a9e:	b103      	cbz	r3, 8005aa2 <_sbrk_r+0x1a>
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	bd38      	pop	{r3, r4, r5, pc}
 8005aa4:	20004a80 	.word	0x20004a80

08005aa8 <__sread>:
 8005aa8:	b510      	push	{r4, lr}
 8005aaa:	460c      	mov	r4, r1
 8005aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab0:	f000 f8a0 	bl	8005bf4 <_read_r>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	bfab      	itete	ge
 8005ab8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005aba:	89a3      	ldrhlt	r3, [r4, #12]
 8005abc:	181b      	addge	r3, r3, r0
 8005abe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ac2:	bfac      	ite	ge
 8005ac4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ac6:	81a3      	strhlt	r3, [r4, #12]
 8005ac8:	bd10      	pop	{r4, pc}

08005aca <__swrite>:
 8005aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ace:	461f      	mov	r7, r3
 8005ad0:	898b      	ldrh	r3, [r1, #12]
 8005ad2:	05db      	lsls	r3, r3, #23
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	4616      	mov	r6, r2
 8005ada:	d505      	bpl.n	8005ae8 <__swrite+0x1e>
 8005adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f000 f868 	bl	8005bb8 <_lseek_r>
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005af2:	81a3      	strh	r3, [r4, #12]
 8005af4:	4632      	mov	r2, r6
 8005af6:	463b      	mov	r3, r7
 8005af8:	4628      	mov	r0, r5
 8005afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005afe:	f000 b817 	b.w	8005b30 <_write_r>

08005b02 <__sseek>:
 8005b02:	b510      	push	{r4, lr}
 8005b04:	460c      	mov	r4, r1
 8005b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b0a:	f000 f855 	bl	8005bb8 <_lseek_r>
 8005b0e:	1c43      	adds	r3, r0, #1
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	bf15      	itete	ne
 8005b14:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b1e:	81a3      	strheq	r3, [r4, #12]
 8005b20:	bf18      	it	ne
 8005b22:	81a3      	strhne	r3, [r4, #12]
 8005b24:	bd10      	pop	{r4, pc}

08005b26 <__sclose>:
 8005b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b2a:	f000 b813 	b.w	8005b54 <_close_r>
	...

08005b30 <_write_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	4d07      	ldr	r5, [pc, #28]	; (8005b50 <_write_r+0x20>)
 8005b34:	4604      	mov	r4, r0
 8005b36:	4608      	mov	r0, r1
 8005b38:	4611      	mov	r1, r2
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	602a      	str	r2, [r5, #0]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f7fa fef1 	bl	8000926 <_write>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d102      	bne.n	8005b4e <_write_r+0x1e>
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	b103      	cbz	r3, 8005b4e <_write_r+0x1e>
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	bd38      	pop	{r3, r4, r5, pc}
 8005b50:	20004a80 	.word	0x20004a80

08005b54 <_close_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4d06      	ldr	r5, [pc, #24]	; (8005b70 <_close_r+0x1c>)
 8005b58:	2300      	movs	r3, #0
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	602b      	str	r3, [r5, #0]
 8005b60:	f7fa fefd 	bl	800095e <_close>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d102      	bne.n	8005b6e <_close_r+0x1a>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	b103      	cbz	r3, 8005b6e <_close_r+0x1a>
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	bd38      	pop	{r3, r4, r5, pc}
 8005b70:	20004a80 	.word	0x20004a80

08005b74 <_fstat_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4d07      	ldr	r5, [pc, #28]	; (8005b94 <_fstat_r+0x20>)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	4611      	mov	r1, r2
 8005b80:	602b      	str	r3, [r5, #0]
 8005b82:	f7fa fef8 	bl	8000976 <_fstat>
 8005b86:	1c43      	adds	r3, r0, #1
 8005b88:	d102      	bne.n	8005b90 <_fstat_r+0x1c>
 8005b8a:	682b      	ldr	r3, [r5, #0]
 8005b8c:	b103      	cbz	r3, 8005b90 <_fstat_r+0x1c>
 8005b8e:	6023      	str	r3, [r4, #0]
 8005b90:	bd38      	pop	{r3, r4, r5, pc}
 8005b92:	bf00      	nop
 8005b94:	20004a80 	.word	0x20004a80

08005b98 <_isatty_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4d06      	ldr	r5, [pc, #24]	; (8005bb4 <_isatty_r+0x1c>)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	602b      	str	r3, [r5, #0]
 8005ba4:	f7fa fef7 	bl	8000996 <_isatty>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d102      	bne.n	8005bb2 <_isatty_r+0x1a>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	b103      	cbz	r3, 8005bb2 <_isatty_r+0x1a>
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	20004a80 	.word	0x20004a80

08005bb8 <_lseek_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4d07      	ldr	r5, [pc, #28]	; (8005bd8 <_lseek_r+0x20>)
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	4608      	mov	r0, r1
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	602a      	str	r2, [r5, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f7fa fef0 	bl	80009ac <_lseek>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d102      	bne.n	8005bd6 <_lseek_r+0x1e>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	b103      	cbz	r3, 8005bd6 <_lseek_r+0x1e>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	20004a80 	.word	0x20004a80

08005bdc <__malloc_lock>:
 8005bdc:	4801      	ldr	r0, [pc, #4]	; (8005be4 <__malloc_lock+0x8>)
 8005bde:	f7ff be0b 	b.w	80057f8 <__retarget_lock_acquire_recursive>
 8005be2:	bf00      	nop
 8005be4:	20004a74 	.word	0x20004a74

08005be8 <__malloc_unlock>:
 8005be8:	4801      	ldr	r0, [pc, #4]	; (8005bf0 <__malloc_unlock+0x8>)
 8005bea:	f7ff be06 	b.w	80057fa <__retarget_lock_release_recursive>
 8005bee:	bf00      	nop
 8005bf0:	20004a74 	.word	0x20004a74

08005bf4 <_read_r>:
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	4d07      	ldr	r5, [pc, #28]	; (8005c14 <_read_r+0x20>)
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	4608      	mov	r0, r1
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	2200      	movs	r2, #0
 8005c00:	602a      	str	r2, [r5, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	f7fa fe72 	bl	80008ec <_read>
 8005c08:	1c43      	adds	r3, r0, #1
 8005c0a:	d102      	bne.n	8005c12 <_read_r+0x1e>
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	b103      	cbz	r3, 8005c12 <_read_r+0x1e>
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	bd38      	pop	{r3, r4, r5, pc}
 8005c14:	20004a80 	.word	0x20004a80

08005c18 <_init>:
 8005c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1a:	bf00      	nop
 8005c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1e:	bc08      	pop	{r3}
 8005c20:	469e      	mov	lr, r3
 8005c22:	4770      	bx	lr

08005c24 <_fini>:
 8005c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c26:	bf00      	nop
 8005c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2a:	bc08      	pop	{r3}
 8005c2c:	469e      	mov	lr, r3
 8005c2e:	4770      	bx	lr
