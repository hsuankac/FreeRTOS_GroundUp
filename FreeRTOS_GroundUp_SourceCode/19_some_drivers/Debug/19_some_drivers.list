
19_some_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003784  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f8  080039f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a00  08003a00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a04  08003a04  00013a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  20000070  08003a78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  08003a78  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015011  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d1e  00000000  00000000  000350b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00037dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  00039010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001896e  00000000  00000000  0003a128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ba3  00000000  00000000  00052a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098a37  00000000  00000000  00068639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101070  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005388  00000000  00000000  001010c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800390c 	.word	0x0800390c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800390c 	.word	0x0800390c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <adc_init>:

#define ADC_CH1			(1U<<0)
#define ADC_SEQ_LEN_1	 0x00

void adc_init()
	{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <adc_init+0x50>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058c:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <adc_init+0x50>)
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR|=RCC_APB2ENR_ADC1EN;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <adc_init+0x50>)
 8000596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000598:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <adc_init+0x50>)
 800059a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059e:	6453      	str	r3, [r2, #68]	; 0x44
	GPIOA->MODER|=GPIO_MODER_MODE1;
 80005a0:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <adc_init+0x54>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0c      	ldr	r2, [pc, #48]	; (80005d8 <adc_init+0x54>)
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	6013      	str	r3, [r2, #0]

	ADC1->CR2=0;
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <adc_init+0x58>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]

	/*Conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 80005b2:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <adc_init+0x58>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	635a      	str	r2, [r3, #52]	; 0x34

	/*Conversion sequence length*/
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <adc_init+0x58>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |= ADC_CR2_ADON;
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <adc_init+0x58>)
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	4a06      	ldr	r2, [pc, #24]	; (80005dc <adc_init+0x58>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6093      	str	r3, [r2, #8]

	}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020000 	.word	0x40020000
 80005dc:	40012000 	.word	0x40012000

080005e0 <read_analog_sensor>:

uint32_t read_analog_sensor(void)
	{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	ADC1->CR2|=ADC_CR2_SWSTART;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <read_analog_sensor+0x2c>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	4a08      	ldr	r2, [pc, #32]	; (800060c <read_analog_sensor+0x2c>)
 80005ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80005ee:	6093      	str	r3, [r2, #8]
	/*Wait for conversion to be complete*/
	while(!(ADC1->SR & ADC_SR_EOC)){}
 80005f0:	bf00      	nop
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <read_analog_sensor+0x2c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0f9      	beq.n	80005f2 <read_analog_sensor+0x12>

	/*Read converted result*/
	return (ADC1->DR);
 80005fe:	4b03      	ldr	r3, [pc, #12]	; (800060c <read_analog_sensor+0x2c>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

	}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	40012000 	.word	0x40012000

08000610 <gpio_init>:
	__enable_irq();

}

void gpio_init()
	{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
	/*Enable clock access for GPIOC*/
	RCC->AHB1ENR |=GPIOCEN;
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <gpio_init+0x34>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <gpio_init+0x34>)
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set PC13 as input*/
	GPIOC->MODER &=~(1U<<26);
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <gpio_init+0x38>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a08      	ldr	r2, [pc, #32]	; (8000648 <gpio_init+0x38>)
 8000626:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800062a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <gpio_init+0x38>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a05      	ldr	r2, [pc, #20]	; (8000648 <gpio_init+0x38>)
 8000632:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000636:	6013      	str	r3, [r2, #0]


	}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40020800 	.word	0x40020800

0800064c <read_digital_sensor>:

uint8_t read_digital_sensor()
	{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

	if (GPIOC->IDR & GPIO_IDR_ID13)
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <read_digital_sensor+0x20>)
 8000652:	691b      	ldr	r3, [r3, #16]
 8000654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <read_digital_sensor+0x14>
		{
		return 1;
 800065c:	2301      	movs	r3, #1
 800065e:	e000      	b.n	8000662 <read_digital_sensor+0x16>
		}
	else return 0;
 8000660:	2300      	movs	r3, #0
	}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	40020800 	.word	0x40020800

08000670 <main>:

uint8_t btn_state;
uint32_t sensor_value;

int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  HAL_Init();
 8000674:	f000 facc 	bl	8000c10 <HAL_Init>


  SystemClock_Config();
 8000678:	f000 f820 	bl	80006bc <SystemClock_Config>
  MX_GPIO_Init();
 800067c:	f000 f87c 	bl	8000778 <MX_GPIO_Init>
  USART2_UART_TX_Init();
 8000680:	f000 fa4e 	bl	8000b20 <USART2_UART_TX_Init>
  adc_init();
 8000684:	f7ff ff7e 	bl	8000584 <adc_init>
  gpio_init();
 8000688:	f7ff ffc2 	bl	8000610 <gpio_init>

  while (1)
  {
	  //btn_state=read_digital_sensor();
	  printf("button state %d \r\n",read_digital_sensor());
 800068c:	f7ff ffde 	bl	800064c <read_digital_sensor>
 8000690:	4603      	mov	r3, r0
 8000692:	4619      	mov	r1, r3
 8000694:	4807      	ldr	r0, [pc, #28]	; (80006b4 <main+0x44>)
 8000696:	f002 f9ab 	bl	80029f0 <iprintf>
	  printf("adc value=%ld\r\n",read_analog_sensor());
 800069a:	f7ff ffa1 	bl	80005e0 <read_analog_sensor>
 800069e:	4603      	mov	r3, r0
 80006a0:	4619      	mov	r1, r3
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <main+0x48>)
 80006a4:	f002 f9a4 	bl	80029f0 <iprintf>
	  HAL_Delay(400);
 80006a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80006ac:	f000 faf2 	bl	8000c94 <HAL_Delay>
	  printf("button state %d \r\n",read_digital_sensor());
 80006b0:	e7ec      	b.n	800068c <main+0x1c>
 80006b2:	bf00      	nop
 80006b4:	08003924 	.word	0x08003924
 80006b8:	08003938 	.word	0x08003938

080006bc <SystemClock_Config>:




void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 f988 	bl	80029e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <SystemClock_Config+0xb4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <SystemClock_Config+0xb4>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <SystemClock_Config+0xb4>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <SystemClock_Config+0xb8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <SystemClock_Config+0xb8>)
 8000706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <SystemClock_Config+0xb8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000724:	2300      	movs	r3, #0
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fd3b 	bl	80011a8 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000738:	f000 f84a 	bl	80007d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f000 ff9e 	bl	8001698 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000762:	f000 f835 	bl	80007d0 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_GPIO_Init+0x30>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <MX_GPIO_Init+0x30>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_GPIO_Init+0x30>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d101      	bne.n	80007c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007be:	f000 fa49 	bl	8000c54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40014800 	.word	0x40014800

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_MspInit+0x54>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	4a11      	ldr	r2, [pc, #68]	; (8000830 <HAL_MspInit+0x54>)
 80007ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f0:	6453      	str	r3, [r2, #68]	; 0x44
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x54>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <HAL_MspInit+0x54>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <HAL_MspInit+0x54>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <HAL_MspInit+0x54>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	210f      	movs	r1, #15
 800081e:	f06f 0001 	mvn.w	r0, #1
 8000822:	f000 fb13 	bl	8000e4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a19      	ldr	r2, [pc, #100]	; (80008b8 <HAL_UART_MspInit+0x84>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d12b      	bne.n	80008ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_UART_MspInit+0x88>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <HAL_UART_MspInit+0x88>)
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_UART_MspInit+0x88>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_UART_MspInit+0x88>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <HAL_UART_MspInit+0x88>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_UART_MspInit+0x88>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800088e:	230c      	movs	r3, #12
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089e:	2307      	movs	r3, #7
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <HAL_UART_MspInit+0x8c>)
 80008aa:	f000 faf9 	bl	8000ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40004400 	.word	0x40004400
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020000 	.word	0x40020000

080008c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	201a      	movs	r0, #26
 80008da:	f000 fab7 	bl	8000e4c <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80008de:	201a      	movs	r0, #26
 80008e0:	f000 fad0 	bl	8000e84 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <HAL_InitTick+0xa0>)
 80008ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ec:	4a1d      	ldr	r2, [pc, #116]	; (8000964 <HAL_InitTick+0xa0>)
 80008ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008f2:	6453      	str	r3, [r2, #68]	; 0x44
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <HAL_InitTick+0xa0>)
 80008f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000900:	f107 0210 	add.w	r2, r7, #16
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4611      	mov	r1, r2
 800090a:	4618      	mov	r0, r3
 800090c:	f001 f8a4 	bl	8001a58 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000910:	f001 f88e 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 8000914:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <HAL_InitTick+0xa4>)
 800091a:	fba2 2303 	umull	r2, r3, r2, r3
 800091e:	0c9b      	lsrs	r3, r3, #18
 8000920:	3b01      	subs	r3, #1
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_InitTick+0xa8>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <HAL_InitTick+0xac>)
 8000928:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_InitTick+0xa8>)
 800092c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000930:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_InitTick+0xa8>)
 8000934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000936:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_InitTick+0xa8>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_InitTick+0xa8>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000944:	4809      	ldr	r0, [pc, #36]	; (800096c <HAL_InitTick+0xa8>)
 8000946:	f001 f8b9 	bl	8001abc <HAL_TIM_Base_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d104      	bne.n	800095a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000950:	4806      	ldr	r0, [pc, #24]	; (800096c <HAL_InitTick+0xa8>)
 8000952:	f001 f90d 	bl	8001b70 <HAL_TIM_Base_Start_IT>
 8000956:	4603      	mov	r3, r0
 8000958:	e000      	b.n	800095c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
}
 800095c:	4618      	mov	r0, r3
 800095e:	3730      	adds	r7, #48	; 0x30
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	431bde83 	.word	0x431bde83
 800096c:	200000d0 	.word	0x200000d0
 8000970:	40014800 	.word	0x40014800

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler+0x4>

08000986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler+0x4>

08000992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80009a6:	f001 f945 	bl	8001c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200000d0 	.word	0x200000d0

080009b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	e00a      	b.n	80009dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009c6:	f3af 8000 	nop.w
 80009ca:	4601      	mov	r1, r0
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	60ba      	str	r2, [r7, #8]
 80009d2:	b2ca      	uxtb	r2, r1
 80009d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	3301      	adds	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	dbf0      	blt.n	80009c6 <_read+0x12>
	}

return len;
 80009e4:	687b      	ldr	r3, [r7, #4]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	e009      	b.n	8000a14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	60ba      	str	r2, [r7, #8]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 f8cb 	bl	8000ba4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	3301      	adds	r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	dbf1      	blt.n	8000a00 <_write+0x12>
	}
	return len;
 8000a1c:	687b      	ldr	r3, [r7, #4]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <_close>:

int _close(int file)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <_isatty>:

int _isatty(int file)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
	return 1;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
	...

08000a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a98:	4a14      	ldr	r2, [pc, #80]	; (8000aec <_sbrk+0x5c>)
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <_sbrk+0x60>)
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d102      	bne.n	8000ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <_sbrk+0x64>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <_sbrk+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d207      	bcs.n	8000ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac0:	f001 ff64 	bl	800298c <__errno>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ace:	e009      	b.n	8000ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <_sbrk+0x64>)
 8000ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20020000 	.word	0x20020000
 8000af0:	00000400 	.word	0x00000400
 8000af4:	20000118 	.word	0x20000118
 8000af8:	200005c0 	.word	0x200005c0

08000afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <SystemInit+0x20>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <SystemInit+0x20>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <USART2_UART_TX_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
 void USART2_UART_TX_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <USART2_UART_TX_Init+0x4c>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <USART2_UART_TX_Init+0x50>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <USART2_UART_TX_Init+0x4c>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <USART2_UART_TX_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <USART2_UART_TX_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <USART2_UART_TX_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <USART2_UART_TX_Init+0x4c>)
 8000b46:	2208      	movs	r2, #8
 8000b48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <USART2_UART_TX_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <USART2_UART_TX_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <USART2_UART_TX_Init+0x4c>)
 8000b58:	f001 fa30 	bl	8001fbc <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <USART2_UART_TX_Init+0x46>
  {
    Error_Handler();
 8000b62:	f7ff fe35 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000008c 	.word	0x2000008c
 8000b70:	40004400 	.word	0x40004400

08000b74 <uart2_write>:




 int uart2_write(int ch)
 	{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 	/*Make sure the transmit data register is empty*/
 	while(!(USART2->SR & USART_SR_TXE)){}
 8000b7c:	bf00      	nop
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <uart2_write+0x2c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0f9      	beq.n	8000b7e <uart2_write+0xa>

 	 /*Write to transmit data register*/
 	USART2->DR	=  (ch & 0xFF);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <uart2_write+0x2c>)
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	6053      	str	r3, [r2, #4]
 	return ch;
 8000b92:	687b      	ldr	r3, [r7, #4]
 	}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <__io_putchar>:


 int __io_putchar(int ch)
 	{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	 uart2_write(ch);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ffe1 	bl	8000b74 <uart2_write>
 	return ch;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 	}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc2:	490e      	ldr	r1, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd8:	4c0b      	ldr	r4, [pc, #44]	; (8000c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000be6:	f7ff ff89 	bl	8000afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f001 fed5 	bl	8002998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fd3f 	bl	8000670 <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c00:	08003a08 	.word	0x08003a08
  ldr r2, =_sbss
 8000c04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c08:	200005bc 	.word	0x200005bc

08000c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <HAL_Init+0x40>)
 8000c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_Init+0x40>)
 8000c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_Init+0x40>)
 8000c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 f8fc 	bl	8000e36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	200f      	movs	r0, #15
 8000c40:	f7ff fe40 	bl	80008c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff fdca 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023c00 	.word	0x40023c00

08000c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x20>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_IncTick+0x24>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008
 8000c78:	2000011c 	.word	0x2000011c

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	2000011c 	.word	0x2000011c

08000c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff ffee 	bl	8000c7c <HAL_GetTick>
 8000ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cac:	d005      	beq.n	8000cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_Delay+0x44>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cba:	bf00      	nop
 8000cbc:	f7ff ffde 	bl	8000c7c <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d8f7      	bhi.n	8000cbc <HAL_Delay+0x28>
  {
  }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	db0b      	blt.n	8000d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f003 021f 	and.w	r2, r3, #31
 8000d58:	4907      	ldr	r1, [pc, #28]	; (8000d78 <__NVIC_EnableIRQ+0x38>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	; (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ff4c 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5e:	f7ff ff61 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000e62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	68b9      	ldr	r1, [r7, #8]
 8000e68:	6978      	ldr	r0, [r7, #20]
 8000e6a:	f7ff ffb1 	bl	8000dd0 <NVIC_EncodePriority>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff80 	bl	8000d7c <__NVIC_SetPriority>
}
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff54 	bl	8000d40 <__NVIC_EnableIRQ>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
 8000eba:	e159      	b.n	8001170 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	f040 8148 	bne.w	800116a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d005      	beq.n	8000ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d130      	bne.n	8000f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	091b      	lsrs	r3, r3, #4
 8000f3e:	f003 0201 	and.w	r2, r3, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d017      	beq.n	8000f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d123      	bne.n	8000fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	08da      	lsrs	r2, r3, #3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3208      	adds	r2, #8
 8000fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	691a      	ldr	r2, [r3, #16]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	08da      	lsrs	r2, r3, #3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3208      	adds	r2, #8
 8000fde:	69b9      	ldr	r1, [r7, #24]
 8000fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0203 	and.w	r2, r3, #3
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 80a2 	beq.w	800116a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b57      	ldr	r3, [pc, #348]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a56      	ldr	r2, [pc, #344]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b54      	ldr	r3, [pc, #336]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001042:	4a52      	ldr	r2, [pc, #328]	; (800118c <HAL_GPIO_Init+0x2ec>)
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	3302      	adds	r3, #2
 800104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	220f      	movs	r2, #15
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a49      	ldr	r2, [pc, #292]	; (8001190 <HAL_GPIO_Init+0x2f0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d019      	beq.n	80010a2 <HAL_GPIO_Init+0x202>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a48      	ldr	r2, [pc, #288]	; (8001194 <HAL_GPIO_Init+0x2f4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d013      	beq.n	800109e <HAL_GPIO_Init+0x1fe>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a47      	ldr	r2, [pc, #284]	; (8001198 <HAL_GPIO_Init+0x2f8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00d      	beq.n	800109a <HAL_GPIO_Init+0x1fa>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a46      	ldr	r2, [pc, #280]	; (800119c <HAL_GPIO_Init+0x2fc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d007      	beq.n	8001096 <HAL_GPIO_Init+0x1f6>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a45      	ldr	r2, [pc, #276]	; (80011a0 <HAL_GPIO_Init+0x300>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_GPIO_Init+0x1f2>
 800108e:	2304      	movs	r3, #4
 8001090:	e008      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 8001092:	2307      	movs	r3, #7
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 8001096:	2303      	movs	r3, #3
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 80010a2:	2300      	movs	r3, #0
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	f002 0203 	and.w	r2, r2, #3
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b4:	4935      	ldr	r1, [pc, #212]	; (800118c <HAL_GPIO_Init+0x2ec>)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c2:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <HAL_GPIO_Init+0x304>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010e6:	4a2f      	ldr	r2, [pc, #188]	; (80011a4 <HAL_GPIO_Init+0x304>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <HAL_GPIO_Init+0x304>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001110:	4a24      	ldr	r2, [pc, #144]	; (80011a4 <HAL_GPIO_Init+0x304>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <HAL_GPIO_Init+0x304>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800113a:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <HAL_GPIO_Init+0x304>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_GPIO_Init+0x304>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001164:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <HAL_GPIO_Init+0x304>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3301      	adds	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	2b0f      	cmp	r3, #15
 8001174:	f67f aea2 	bls.w	8000ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40013800 	.word	0x40013800
 8001190:	40020000 	.word	0x40020000
 8001194:	40020400 	.word	0x40020400
 8001198:	40020800 	.word	0x40020800
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40013c00 	.word	0x40013c00

080011a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e267      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d075      	beq.n	80012b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011c6:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d00c      	beq.n	80011ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011d2:	4b85      	ldr	r3, [pc, #532]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d112      	bne.n	8001204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011de:	4b82      	ldr	r3, [pc, #520]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ea:	d10b      	bne.n	8001204 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ec:	4b7e      	ldr	r3, [pc, #504]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d05b      	beq.n	80012b0 <HAL_RCC_OscConfig+0x108>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d157      	bne.n	80012b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e242      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120c:	d106      	bne.n	800121c <HAL_RCC_OscConfig+0x74>
 800120e:	4b76      	ldr	r3, [pc, #472]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a75      	ldr	r2, [pc, #468]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e01d      	b.n	8001258 <HAL_RCC_OscConfig+0xb0>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001224:	d10c      	bne.n	8001240 <HAL_RCC_OscConfig+0x98>
 8001226:	4b70      	ldr	r3, [pc, #448]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a6f      	ldr	r2, [pc, #444]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 800122c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b6d      	ldr	r3, [pc, #436]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a6c      	ldr	r2, [pc, #432]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e00b      	b.n	8001258 <HAL_RCC_OscConfig+0xb0>
 8001240:	4b69      	ldr	r3, [pc, #420]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a68      	ldr	r2, [pc, #416]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b66      	ldr	r3, [pc, #408]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a65      	ldr	r2, [pc, #404]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d013      	beq.n	8001288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fd0c 	bl	8000c7c <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fd08 	bl	8000c7c <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	; 0x64
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e207      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127a:	4b5b      	ldr	r3, [pc, #364]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0xc0>
 8001286:	e014      	b.n	80012b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fcf8 	bl	8000c7c <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fcf4 	bl	8000c7c <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	; 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e1f3      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a2:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f0      	bne.n	8001290 <HAL_RCC_OscConfig+0xe8>
 80012ae:	e000      	b.n	80012b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d063      	beq.n	8001386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012be:	4b4a      	ldr	r3, [pc, #296]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00b      	beq.n	80012e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ca:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d11c      	bne.n	8001310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d6:	4b44      	ldr	r3, [pc, #272]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d116      	bne.n	8001310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e2:	4b41      	ldr	r3, [pc, #260]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_RCC_OscConfig+0x152>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d001      	beq.n	80012fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e1c7      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fa:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	4937      	ldr	r1, [pc, #220]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 800130a:	4313      	orrs	r3, r2
 800130c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130e:	e03a      	b.n	8001386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d020      	beq.n	800135a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001318:	4b34      	ldr	r3, [pc, #208]	; (80013ec <HAL_RCC_OscConfig+0x244>)
 800131a:	2201      	movs	r2, #1
 800131c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131e:	f7ff fcad 	bl	8000c7c <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001326:	f7ff fca9 	bl	8000c7c <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e1a8      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001338:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001344:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	4925      	ldr	r1, [pc, #148]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
 8001358:	e015      	b.n	8001386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800135a:	4b24      	ldr	r3, [pc, #144]	; (80013ec <HAL_RCC_OscConfig+0x244>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001360:	f7ff fc8c 	bl	8000c7c <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001368:	f7ff fc88 	bl	8000c7c <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e187      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d036      	beq.n	8001400 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d016      	beq.n	80013c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_RCC_OscConfig+0x248>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a0:	f7ff fc6c 	bl	8000c7c <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a8:	f7ff fc68 	bl	8000c7c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e167      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80013bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0x200>
 80013c6:	e01b      	b.n	8001400 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_RCC_OscConfig+0x248>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fc55 	bl	8000c7c <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d4:	e00e      	b.n	80013f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d6:	f7ff fc51 	bl	8000c7c <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d907      	bls.n	80013f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e150      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
 80013e8:	40023800 	.word	0x40023800
 80013ec:	42470000 	.word	0x42470000
 80013f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f4:	4b88      	ldr	r3, [pc, #544]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80013f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1ea      	bne.n	80013d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 8097 	beq.w	800153c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001412:	4b81      	ldr	r3, [pc, #516]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10f      	bne.n	800143e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b7d      	ldr	r3, [pc, #500]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a7c      	ldr	r2, [pc, #496]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b7a      	ldr	r3, [pc, #488]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800143a:	2301      	movs	r3, #1
 800143c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143e:	4b77      	ldr	r3, [pc, #476]	; (800161c <HAL_RCC_OscConfig+0x474>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d118      	bne.n	800147c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800144a:	4b74      	ldr	r3, [pc, #464]	; (800161c <HAL_RCC_OscConfig+0x474>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a73      	ldr	r2, [pc, #460]	; (800161c <HAL_RCC_OscConfig+0x474>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001456:	f7ff fc11 	bl	8000c7c <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145e:	f7ff fc0d 	bl	8000c7c <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e10c      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	4b6a      	ldr	r3, [pc, #424]	; (800161c <HAL_RCC_OscConfig+0x474>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d106      	bne.n	8001492 <HAL_RCC_OscConfig+0x2ea>
 8001484:	4b64      	ldr	r3, [pc, #400]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001488:	4a63      	ldr	r2, [pc, #396]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6713      	str	r3, [r2, #112]	; 0x70
 8001490:	e01c      	b.n	80014cc <HAL_RCC_OscConfig+0x324>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b05      	cmp	r3, #5
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x30c>
 800149a:	4b5f      	ldr	r3, [pc, #380]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149e:	4a5e      	ldr	r2, [pc, #376]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6713      	str	r3, [r2, #112]	; 0x70
 80014a6:	4b5c      	ldr	r3, [pc, #368]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80014a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014aa:	4a5b      	ldr	r2, [pc, #364]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6713      	str	r3, [r2, #112]	; 0x70
 80014b2:	e00b      	b.n	80014cc <HAL_RCC_OscConfig+0x324>
 80014b4:	4b58      	ldr	r3, [pc, #352]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80014b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b8:	4a57      	ldr	r2, [pc, #348]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	6713      	str	r3, [r2, #112]	; 0x70
 80014c0:	4b55      	ldr	r3, [pc, #340]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c4:	4a54      	ldr	r2, [pc, #336]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80014c6:	f023 0304 	bic.w	r3, r3, #4
 80014ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d015      	beq.n	8001500 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d4:	f7ff fbd2 	bl	8000c7c <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014da:	e00a      	b.n	80014f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014dc:	f7ff fbce 	bl	8000c7c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e0cb      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f2:	4b49      	ldr	r3, [pc, #292]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0ee      	beq.n	80014dc <HAL_RCC_OscConfig+0x334>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001500:	f7ff fbbc 	bl	8000c7c <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001506:	e00a      	b.n	800151e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001508:	f7ff fbb8 	bl	8000c7c <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	f241 3288 	movw	r2, #5000	; 0x1388
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e0b5      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151e:	4b3e      	ldr	r3, [pc, #248]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1ee      	bne.n	8001508 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800152a:	7dfb      	ldrb	r3, [r7, #23]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d105      	bne.n	800153c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001530:	4b39      	ldr	r3, [pc, #228]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a38      	ldr	r2, [pc, #224]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 80a1 	beq.w	8001688 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001546:	4b34      	ldr	r3, [pc, #208]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b08      	cmp	r3, #8
 8001550:	d05c      	beq.n	800160c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d141      	bne.n	80015de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155a:	4b31      	ldr	r3, [pc, #196]	; (8001620 <HAL_RCC_OscConfig+0x478>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fb8c 	bl	8000c7c <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff fb88 	bl	8000c7c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e087      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157a:	4b27      	ldr	r3, [pc, #156]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69da      	ldr	r2, [r3, #28]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	019b      	lsls	r3, r3, #6
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	085b      	lsrs	r3, r3, #1
 800159e:	3b01      	subs	r3, #1
 80015a0:	041b      	lsls	r3, r3, #16
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	061b      	lsls	r3, r3, #24
 80015aa:	491b      	ldr	r1, [pc, #108]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_RCC_OscConfig+0x478>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b6:	f7ff fb61 	bl	8000c7c <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015be:	f7ff fb5d 	bl	8000c7c <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e05c      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x416>
 80015dc:	e054      	b.n	8001688 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_RCC_OscConfig+0x478>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fb4a 	bl	8000c7c <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ec:	f7ff fb46 	bl	8000c7c <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e045      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x444>
 800160a:	e03d      	b.n	8001688 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d107      	bne.n	8001624 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e038      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000
 8001620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_RCC_OscConfig+0x4ec>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d028      	beq.n	8001684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800163c:	429a      	cmp	r2, r3
 800163e:	d121      	bne.n	8001684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164a:	429a      	cmp	r2, r3
 800164c:	d11a      	bne.n	8001684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001654:	4013      	ands	r3, r2
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800165a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800165c:	4293      	cmp	r3, r2
 800165e:	d111      	bne.n	8001684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	085b      	lsrs	r3, r3, #1
 800166c:	3b01      	subs	r3, #1
 800166e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001670:	429a      	cmp	r2, r3
 8001672:	d107      	bne.n	8001684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001680:	429a      	cmp	r2, r3
 8001682:	d001      	beq.n	8001688 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800

08001698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0cc      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016ac:	4b68      	ldr	r3, [pc, #416]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d90c      	bls.n	80016d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ba:	4b65      	ldr	r3, [pc, #404]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b63      	ldr	r3, [pc, #396]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0b8      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d020      	beq.n	8001722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ec:	4b59      	ldr	r3, [pc, #356]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a58      	ldr	r2, [pc, #352]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001704:	4b53      	ldr	r3, [pc, #332]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a52      	ldr	r2, [pc, #328]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800170e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001710:	4b50      	ldr	r3, [pc, #320]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	494d      	ldr	r1, [pc, #308]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	4313      	orrs	r3, r2
 8001720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d044      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4b47      	ldr	r3, [pc, #284]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d119      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e07f      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d003      	beq.n	8001756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001752:	2b03      	cmp	r3, #3
 8001754:	d107      	bne.n	8001766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001756:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d109      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e06f      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001766:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e067      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001776:	4b37      	ldr	r3, [pc, #220]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f023 0203 	bic.w	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4934      	ldr	r1, [pc, #208]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	4313      	orrs	r3, r2
 8001786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001788:	f7ff fa78 	bl	8000c7c <HAL_GetTick>
 800178c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001790:	f7ff fa74 	bl	8000c7c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e04f      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a6:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 020c 	and.w	r2, r3, #12
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d1eb      	bne.n	8001790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d20c      	bcs.n	80017e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e032      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4916      	ldr	r1, [pc, #88]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d009      	beq.n	800181e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	490e      	ldr	r1, [pc, #56]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800181e:	f000 f821 	bl	8001864 <HAL_RCC_GetSysClockFreq>
 8001822:	4602      	mov	r2, r0
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	490a      	ldr	r1, [pc, #40]	; (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	5ccb      	ldrb	r3, [r1, r3]
 8001832:	fa22 f303 	lsr.w	r3, r2, r3
 8001836:	4a09      	ldr	r2, [pc, #36]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_RCC_ClockConfig+0x1c8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f840 	bl	80008c4 <HAL_InitTick>

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023c00 	.word	0x40023c00
 8001854:	40023800 	.word	0x40023800
 8001858:	08003948 	.word	0x08003948
 800185c:	20000000 	.word	0x20000000
 8001860:	20000004 	.word	0x20000004

08001864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001868:	b090      	sub	sp, #64	; 0x40
 800186a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
 8001870:	2300      	movs	r3, #0
 8001872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001874:	2300      	movs	r3, #0
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800187c:	4b59      	ldr	r3, [pc, #356]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b08      	cmp	r3, #8
 8001886:	d00d      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001888:	2b08      	cmp	r3, #8
 800188a:	f200 80a1 	bhi.w	80019d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <HAL_RCC_GetSysClockFreq+0x34>
 8001892:	2b04      	cmp	r3, #4
 8001894:	d003      	beq.n	800189e <HAL_RCC_GetSysClockFreq+0x3a>
 8001896:	e09b      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800189c:	e09b      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800189e:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_RCC_GetSysClockFreq+0x188>)
 80018a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018a2:	e098      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018a4:	4b4f      	ldr	r3, [pc, #316]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ae:	4b4d      	ldr	r3, [pc, #308]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d028      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ba:	4b4a      	ldr	r3, [pc, #296]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	099b      	lsrs	r3, r3, #6
 80018c0:	2200      	movs	r2, #0
 80018c2:	623b      	str	r3, [r7, #32]
 80018c4:	627a      	str	r2, [r7, #36]	; 0x24
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018cc:	2100      	movs	r1, #0
 80018ce:	4b47      	ldr	r3, [pc, #284]	; (80019ec <HAL_RCC_GetSysClockFreq+0x188>)
 80018d0:	fb03 f201 	mul.w	r2, r3, r1
 80018d4:	2300      	movs	r3, #0
 80018d6:	fb00 f303 	mul.w	r3, r0, r3
 80018da:	4413      	add	r3, r2
 80018dc:	4a43      	ldr	r2, [pc, #268]	; (80019ec <HAL_RCC_GetSysClockFreq+0x188>)
 80018de:	fba0 1202 	umull	r1, r2, r0, r2
 80018e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018e4:	460a      	mov	r2, r1
 80018e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80018e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ea:	4413      	add	r3, r2
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f0:	2200      	movs	r2, #0
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	61fa      	str	r2, [r7, #28]
 80018f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018fe:	f7fe fcbf 	bl	8000280 <__aeabi_uldivmod>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4613      	mov	r3, r2
 8001908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800190a:	e053      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800190c:	4b35      	ldr	r3, [pc, #212]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	099b      	lsrs	r3, r3, #6
 8001912:	2200      	movs	r2, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	617a      	str	r2, [r7, #20]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800191e:	f04f 0b00 	mov.w	fp, #0
 8001922:	4652      	mov	r2, sl
 8001924:	465b      	mov	r3, fp
 8001926:	f04f 0000 	mov.w	r0, #0
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	0159      	lsls	r1, r3, #5
 8001930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001934:	0150      	lsls	r0, r2, #5
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	ebb2 080a 	subs.w	r8, r2, sl
 800193e:	eb63 090b 	sbc.w	r9, r3, fp
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800194e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001952:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001956:	ebb2 0408 	subs.w	r4, r2, r8
 800195a:	eb63 0509 	sbc.w	r5, r3, r9
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	00eb      	lsls	r3, r5, #3
 8001968:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800196c:	00e2      	lsls	r2, r4, #3
 800196e:	4614      	mov	r4, r2
 8001970:	461d      	mov	r5, r3
 8001972:	eb14 030a 	adds.w	r3, r4, sl
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	eb45 030b 	adc.w	r3, r5, fp
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9d7 4500 	ldrd	r4, r5, [r7]
 800198a:	4629      	mov	r1, r5
 800198c:	028b      	lsls	r3, r1, #10
 800198e:	4621      	mov	r1, r4
 8001990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001994:	4621      	mov	r1, r4
 8001996:	028a      	lsls	r2, r1, #10
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199e:	2200      	movs	r2, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	60fa      	str	r2, [r7, #12]
 80019a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019a8:	f7fe fc6a 	bl	8000280 <__aeabi_uldivmod>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4613      	mov	r3, r2
 80019b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	0c1b      	lsrs	r3, r3, #16
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	3301      	adds	r3, #1
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80019c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019ce:	e002      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80019d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3740      	adds	r7, #64	; 0x40
 80019dc:	46bd      	mov	sp, r7
 80019de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	00f42400 	.word	0x00f42400
 80019ec:	017d7840 	.word	0x017d7840

080019f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000000 	.word	0x20000000

08001a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a0c:	f7ff fff0 	bl	80019f0 <HAL_RCC_GetHCLKFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	0a9b      	lsrs	r3, r3, #10
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	4903      	ldr	r1, [pc, #12]	; (8001a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a1e:	5ccb      	ldrb	r3, [r1, r3]
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	08003958 	.word	0x08003958

08001a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a34:	f7ff ffdc 	bl	80019f0 <HAL_RCC_GetHCLKFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	0b5b      	lsrs	r3, r3, #13
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	4903      	ldr	r1, [pc, #12]	; (8001a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	08003958 	.word	0x08003958

08001a58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	220f      	movs	r2, #15
 8001a66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 0203 	and.w	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	08db      	lsrs	r3, r3, #3
 8001a92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <HAL_RCC_GetClockConfig+0x60>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0207 	and.w	r2, r3, #7
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	601a      	str	r2, [r3, #0]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40023c00 	.word	0x40023c00

08001abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e041      	b.n	8001b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f839 	bl	8001b5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3304      	adds	r3, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4610      	mov	r0, r2
 8001afc:	f000 f9ca 	bl	8001e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d001      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e044      	b.n	8001c12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <HAL_TIM_Base_Start_IT+0xb0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d018      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x6c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb2:	d013      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x6c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1a      	ldr	r2, [pc, #104]	; (8001c24 <HAL_TIM_Base_Start_IT+0xb4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00e      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x6c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_TIM_Base_Start_IT+0xb8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x6c>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <HAL_TIM_Base_Start_IT+0xbc>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d004      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x6c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <HAL_TIM_Base_Start_IT+0xc0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d111      	bne.n	8001c00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d010      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bfe:	e007      	b.n	8001c10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40000400 	.word	0x40000400
 8001c28:	40000800 	.word	0x40000800
 8001c2c:	40000c00 	.word	0x40000c00
 8001c30:	40014000 	.word	0x40014000

08001c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d122      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d11b      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0202 	mvn.w	r2, #2
 8001c60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8ee 	bl	8001e58 <HAL_TIM_IC_CaptureCallback>
 8001c7c:	e005      	b.n	8001c8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8e0 	bl	8001e44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f8f1 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d122      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d11b      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0204 	mvn.w	r2, #4
 8001cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f8c4 	bl	8001e58 <HAL_TIM_IC_CaptureCallback>
 8001cd0:	e005      	b.n	8001cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8b6 	bl	8001e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f8c7 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d122      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d11b      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0208 	mvn.w	r2, #8
 8001d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f89a 	bl	8001e58 <HAL_TIM_IC_CaptureCallback>
 8001d24:	e005      	b.n	8001d32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f88c 	bl	8001e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f89d 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b10      	cmp	r3, #16
 8001d44:	d122      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d11b      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0210 	mvn.w	r2, #16
 8001d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2208      	movs	r2, #8
 8001d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f870 	bl	8001e58 <HAL_TIM_IC_CaptureCallback>
 8001d78:	e005      	b.n	8001d86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f862 	bl	8001e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f873 	bl	8001e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d10e      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d107      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0201 	mvn.w	r2, #1
 8001db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7fe fcfa 	bl	80007ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	2b80      	cmp	r3, #128	; 0x80
 8001dc4:	d10e      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd0:	2b80      	cmp	r3, #128	; 0x80
 8001dd2:	d107      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8e2 	bl	8001fa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dee:	2b40      	cmp	r3, #64	; 0x40
 8001df0:	d10e      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfc:	2b40      	cmp	r3, #64	; 0x40
 8001dfe:	d107      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f838 	bl	8001e80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	d10e      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	d107      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0220 	mvn.w	r2, #32
 8001e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8ac 	bl	8001f94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a34      	ldr	r2, [pc, #208]	; (8001f78 <TIM_Base_SetConfig+0xe4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00f      	beq.n	8001ecc <TIM_Base_SetConfig+0x38>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb2:	d00b      	beq.n	8001ecc <TIM_Base_SetConfig+0x38>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a31      	ldr	r2, [pc, #196]	; (8001f7c <TIM_Base_SetConfig+0xe8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d007      	beq.n	8001ecc <TIM_Base_SetConfig+0x38>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a30      	ldr	r2, [pc, #192]	; (8001f80 <TIM_Base_SetConfig+0xec>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d003      	beq.n	8001ecc <TIM_Base_SetConfig+0x38>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a2f      	ldr	r2, [pc, #188]	; (8001f84 <TIM_Base_SetConfig+0xf0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d108      	bne.n	8001ede <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a25      	ldr	r2, [pc, #148]	; (8001f78 <TIM_Base_SetConfig+0xe4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01b      	beq.n	8001f1e <TIM_Base_SetConfig+0x8a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eec:	d017      	beq.n	8001f1e <TIM_Base_SetConfig+0x8a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a22      	ldr	r2, [pc, #136]	; (8001f7c <TIM_Base_SetConfig+0xe8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <TIM_Base_SetConfig+0x8a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a21      	ldr	r2, [pc, #132]	; (8001f80 <TIM_Base_SetConfig+0xec>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00f      	beq.n	8001f1e <TIM_Base_SetConfig+0x8a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a20      	ldr	r2, [pc, #128]	; (8001f84 <TIM_Base_SetConfig+0xf0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00b      	beq.n	8001f1e <TIM_Base_SetConfig+0x8a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <TIM_Base_SetConfig+0xf4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d007      	beq.n	8001f1e <TIM_Base_SetConfig+0x8a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <TIM_Base_SetConfig+0xf8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d003      	beq.n	8001f1e <TIM_Base_SetConfig+0x8a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <TIM_Base_SetConfig+0xfc>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d108      	bne.n	8001f30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <TIM_Base_SetConfig+0xe4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d103      	bne.n	8001f64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	615a      	str	r2, [r3, #20]
}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	40000400 	.word	0x40000400
 8001f80:	40000800 	.word	0x40000800
 8001f84:	40000c00 	.word	0x40000c00
 8001f88:	40014000 	.word	0x40014000
 8001f8c:	40014400 	.word	0x40014400
 8001f90:	40014800 	.word	0x40014800

08001f94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e03f      	b.n	800204e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe fc26 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2224      	movs	r2, #36	; 0x24
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f829 	bl	8002058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800205c:	b0c0      	sub	sp, #256	; 0x100
 800205e:	af00      	add	r7, sp, #0
 8002060:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002074:	68d9      	ldr	r1, [r3, #12]
 8002076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	ea40 0301 	orr.w	r3, r0, r1
 8002080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	431a      	orrs	r2, r3
 8002090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	431a      	orrs	r2, r3
 8002098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020b0:	f021 010c 	bic.w	r1, r1, #12
 80020b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020be:	430b      	orrs	r3, r1
 80020c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d2:	6999      	ldr	r1, [r3, #24]
 80020d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	ea40 0301 	orr.w	r3, r0, r1
 80020de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	4b8f      	ldr	r3, [pc, #572]	; (8002324 <UART_SetConfig+0x2cc>)
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d005      	beq.n	80020f8 <UART_SetConfig+0xa0>
 80020ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b8d      	ldr	r3, [pc, #564]	; (8002328 <UART_SetConfig+0x2d0>)
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d104      	bne.n	8002102 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020f8:	f7ff fc9a 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 80020fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002100:	e003      	b.n	800210a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002102:	f7ff fc81 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 8002106:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800210a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002114:	f040 810c 	bne.w	8002330 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800211c:	2200      	movs	r2, #0
 800211e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002122:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002126:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800212a:	4622      	mov	r2, r4
 800212c:	462b      	mov	r3, r5
 800212e:	1891      	adds	r1, r2, r2
 8002130:	65b9      	str	r1, [r7, #88]	; 0x58
 8002132:	415b      	adcs	r3, r3
 8002134:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002136:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800213a:	4621      	mov	r1, r4
 800213c:	eb12 0801 	adds.w	r8, r2, r1
 8002140:	4629      	mov	r1, r5
 8002142:	eb43 0901 	adc.w	r9, r3, r1
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800215a:	4690      	mov	r8, r2
 800215c:	4699      	mov	r9, r3
 800215e:	4623      	mov	r3, r4
 8002160:	eb18 0303 	adds.w	r3, r8, r3
 8002164:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002168:	462b      	mov	r3, r5
 800216a:	eb49 0303 	adc.w	r3, r9, r3
 800216e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800217e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002186:	460b      	mov	r3, r1
 8002188:	18db      	adds	r3, r3, r3
 800218a:	653b      	str	r3, [r7, #80]	; 0x50
 800218c:	4613      	mov	r3, r2
 800218e:	eb42 0303 	adc.w	r3, r2, r3
 8002192:	657b      	str	r3, [r7, #84]	; 0x54
 8002194:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002198:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800219c:	f7fe f870 	bl	8000280 <__aeabi_uldivmod>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4b61      	ldr	r3, [pc, #388]	; (800232c <UART_SetConfig+0x2d4>)
 80021a6:	fba3 2302 	umull	r2, r3, r3, r2
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	011c      	lsls	r4, r3, #4
 80021ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021b2:	2200      	movs	r2, #0
 80021b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021c0:	4642      	mov	r2, r8
 80021c2:	464b      	mov	r3, r9
 80021c4:	1891      	adds	r1, r2, r2
 80021c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80021c8:	415b      	adcs	r3, r3
 80021ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021d0:	4641      	mov	r1, r8
 80021d2:	eb12 0a01 	adds.w	sl, r2, r1
 80021d6:	4649      	mov	r1, r9
 80021d8:	eb43 0b01 	adc.w	fp, r3, r1
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021f0:	4692      	mov	sl, r2
 80021f2:	469b      	mov	fp, r3
 80021f4:	4643      	mov	r3, r8
 80021f6:	eb1a 0303 	adds.w	r3, sl, r3
 80021fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021fe:	464b      	mov	r3, r9
 8002200:	eb4b 0303 	adc.w	r3, fp, r3
 8002204:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002214:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002218:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800221c:	460b      	mov	r3, r1
 800221e:	18db      	adds	r3, r3, r3
 8002220:	643b      	str	r3, [r7, #64]	; 0x40
 8002222:	4613      	mov	r3, r2
 8002224:	eb42 0303 	adc.w	r3, r2, r3
 8002228:	647b      	str	r3, [r7, #68]	; 0x44
 800222a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800222e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002232:	f7fe f825 	bl	8000280 <__aeabi_uldivmod>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4611      	mov	r1, r2
 800223c:	4b3b      	ldr	r3, [pc, #236]	; (800232c <UART_SetConfig+0x2d4>)
 800223e:	fba3 2301 	umull	r2, r3, r3, r1
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2264      	movs	r2, #100	; 0x64
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	1acb      	subs	r3, r1, r3
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002252:	4b36      	ldr	r3, [pc, #216]	; (800232c <UART_SetConfig+0x2d4>)
 8002254:	fba3 2302 	umull	r2, r3, r3, r2
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002260:	441c      	add	r4, r3
 8002262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002266:	2200      	movs	r2, #0
 8002268:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800226c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002270:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002274:	4642      	mov	r2, r8
 8002276:	464b      	mov	r3, r9
 8002278:	1891      	adds	r1, r2, r2
 800227a:	63b9      	str	r1, [r7, #56]	; 0x38
 800227c:	415b      	adcs	r3, r3
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002280:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002284:	4641      	mov	r1, r8
 8002286:	1851      	adds	r1, r2, r1
 8002288:	6339      	str	r1, [r7, #48]	; 0x30
 800228a:	4649      	mov	r1, r9
 800228c:	414b      	adcs	r3, r1
 800228e:	637b      	str	r3, [r7, #52]	; 0x34
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800229c:	4659      	mov	r1, fp
 800229e:	00cb      	lsls	r3, r1, #3
 80022a0:	4651      	mov	r1, sl
 80022a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022a6:	4651      	mov	r1, sl
 80022a8:	00ca      	lsls	r2, r1, #3
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	4603      	mov	r3, r0
 80022b0:	4642      	mov	r2, r8
 80022b2:	189b      	adds	r3, r3, r2
 80022b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022b8:	464b      	mov	r3, r9
 80022ba:	460a      	mov	r2, r1
 80022bc:	eb42 0303 	adc.w	r3, r2, r3
 80022c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022d8:	460b      	mov	r3, r1
 80022da:	18db      	adds	r3, r3, r3
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022de:	4613      	mov	r3, r2
 80022e0:	eb42 0303 	adc.w	r3, r2, r3
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80022ee:	f7fd ffc7 	bl	8000280 <__aeabi_uldivmod>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <UART_SetConfig+0x2d4>)
 80022f8:	fba3 1302 	umull	r1, r3, r3, r2
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	2164      	movs	r1, #100	; 0x64
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	3332      	adds	r3, #50	; 0x32
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <UART_SetConfig+0x2d4>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	f003 0207 	and.w	r2, r3, #7
 8002316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4422      	add	r2, r4
 800231e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002320:	e105      	b.n	800252e <UART_SetConfig+0x4d6>
 8002322:	bf00      	nop
 8002324:	40011000 	.word	0x40011000
 8002328:	40011400 	.word	0x40011400
 800232c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002334:	2200      	movs	r2, #0
 8002336:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800233a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800233e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002342:	4642      	mov	r2, r8
 8002344:	464b      	mov	r3, r9
 8002346:	1891      	adds	r1, r2, r2
 8002348:	6239      	str	r1, [r7, #32]
 800234a:	415b      	adcs	r3, r3
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
 800234e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002352:	4641      	mov	r1, r8
 8002354:	1854      	adds	r4, r2, r1
 8002356:	4649      	mov	r1, r9
 8002358:	eb43 0501 	adc.w	r5, r3, r1
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	00eb      	lsls	r3, r5, #3
 8002366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800236a:	00e2      	lsls	r2, r4, #3
 800236c:	4614      	mov	r4, r2
 800236e:	461d      	mov	r5, r3
 8002370:	4643      	mov	r3, r8
 8002372:	18e3      	adds	r3, r4, r3
 8002374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002378:	464b      	mov	r3, r9
 800237a:	eb45 0303 	adc.w	r3, r5, r3
 800237e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800238e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800239e:	4629      	mov	r1, r5
 80023a0:	008b      	lsls	r3, r1, #2
 80023a2:	4621      	mov	r1, r4
 80023a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023a8:	4621      	mov	r1, r4
 80023aa:	008a      	lsls	r2, r1, #2
 80023ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023b0:	f7fd ff66 	bl	8000280 <__aeabi_uldivmod>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4b60      	ldr	r3, [pc, #384]	; (800253c <UART_SetConfig+0x4e4>)
 80023ba:	fba3 2302 	umull	r2, r3, r3, r2
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	011c      	lsls	r4, r3, #4
 80023c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023c6:	2200      	movs	r2, #0
 80023c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023d4:	4642      	mov	r2, r8
 80023d6:	464b      	mov	r3, r9
 80023d8:	1891      	adds	r1, r2, r2
 80023da:	61b9      	str	r1, [r7, #24]
 80023dc:	415b      	adcs	r3, r3
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023e4:	4641      	mov	r1, r8
 80023e6:	1851      	adds	r1, r2, r1
 80023e8:	6139      	str	r1, [r7, #16]
 80023ea:	4649      	mov	r1, r9
 80023ec:	414b      	adcs	r3, r1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023fc:	4659      	mov	r1, fp
 80023fe:	00cb      	lsls	r3, r1, #3
 8002400:	4651      	mov	r1, sl
 8002402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002406:	4651      	mov	r1, sl
 8002408:	00ca      	lsls	r2, r1, #3
 800240a:	4610      	mov	r0, r2
 800240c:	4619      	mov	r1, r3
 800240e:	4603      	mov	r3, r0
 8002410:	4642      	mov	r2, r8
 8002412:	189b      	adds	r3, r3, r2
 8002414:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002418:	464b      	mov	r3, r9
 800241a:	460a      	mov	r2, r1
 800241c:	eb42 0303 	adc.w	r3, r2, r3
 8002420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	67bb      	str	r3, [r7, #120]	; 0x78
 800242e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800243c:	4649      	mov	r1, r9
 800243e:	008b      	lsls	r3, r1, #2
 8002440:	4641      	mov	r1, r8
 8002442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002446:	4641      	mov	r1, r8
 8002448:	008a      	lsls	r2, r1, #2
 800244a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800244e:	f7fd ff17 	bl	8000280 <__aeabi_uldivmod>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4b39      	ldr	r3, [pc, #228]	; (800253c <UART_SetConfig+0x4e4>)
 8002458:	fba3 1302 	umull	r1, r3, r3, r2
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	2164      	movs	r1, #100	; 0x64
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	3332      	adds	r3, #50	; 0x32
 800246a:	4a34      	ldr	r2, [pc, #208]	; (800253c <UART_SetConfig+0x4e4>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	095b      	lsrs	r3, r3, #5
 8002472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002476:	441c      	add	r4, r3
 8002478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800247c:	2200      	movs	r2, #0
 800247e:	673b      	str	r3, [r7, #112]	; 0x70
 8002480:	677a      	str	r2, [r7, #116]	; 0x74
 8002482:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002486:	4642      	mov	r2, r8
 8002488:	464b      	mov	r3, r9
 800248a:	1891      	adds	r1, r2, r2
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	415b      	adcs	r3, r3
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002496:	4641      	mov	r1, r8
 8002498:	1851      	adds	r1, r2, r1
 800249a:	6039      	str	r1, [r7, #0]
 800249c:	4649      	mov	r1, r9
 800249e:	414b      	adcs	r3, r1
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024ae:	4659      	mov	r1, fp
 80024b0:	00cb      	lsls	r3, r1, #3
 80024b2:	4651      	mov	r1, sl
 80024b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024b8:	4651      	mov	r1, sl
 80024ba:	00ca      	lsls	r2, r1, #3
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	4603      	mov	r3, r0
 80024c2:	4642      	mov	r2, r8
 80024c4:	189b      	adds	r3, r3, r2
 80024c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80024c8:	464b      	mov	r3, r9
 80024ca:	460a      	mov	r2, r1
 80024cc:	eb42 0303 	adc.w	r3, r2, r3
 80024d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	663b      	str	r3, [r7, #96]	; 0x60
 80024dc:	667a      	str	r2, [r7, #100]	; 0x64
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80024ea:	4649      	mov	r1, r9
 80024ec:	008b      	lsls	r3, r1, #2
 80024ee:	4641      	mov	r1, r8
 80024f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024f4:	4641      	mov	r1, r8
 80024f6:	008a      	lsls	r2, r1, #2
 80024f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024fc:	f7fd fec0 	bl	8000280 <__aeabi_uldivmod>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4b0d      	ldr	r3, [pc, #52]	; (800253c <UART_SetConfig+0x4e4>)
 8002506:	fba3 1302 	umull	r1, r3, r3, r2
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2164      	movs	r1, #100	; 0x64
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	3332      	adds	r3, #50	; 0x32
 8002518:	4a08      	ldr	r2, [pc, #32]	; (800253c <UART_SetConfig+0x4e4>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	f003 020f 	and.w	r2, r3, #15
 8002524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4422      	add	r2, r4
 800252c:	609a      	str	r2, [r3, #8]
}
 800252e:	bf00      	nop
 8002530:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002534:	46bd      	mov	sp, r7
 8002536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800253a:	bf00      	nop
 800253c:	51eb851f 	.word	0x51eb851f

08002540 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <SysTick_Handler+0x1c>)
 8002546:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002548:	f000 f990 	bl	800286c <xTaskGetSchedulerState>
 800254c:	4603      	mov	r3, r0
 800254e:	2b01      	cmp	r3, #1
 8002550:	d001      	beq.n	8002556 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002552:	f000 f9f9 	bl	8002948 <xPortSysTickHandler>
  }
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010

08002560 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	601a      	str	r2, [r3, #0]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6892      	ldr	r2, [r2, #8]
 80025be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6852      	ldr	r2, [r2, #4]
 80025c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d103      	bne.n	80025dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	1e5a      	subs	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002606:	4b4f      	ldr	r3, [pc, #316]	; (8002744 <xTaskIncrementTick+0x148>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f040 808f 	bne.w	800272e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002610:	4b4d      	ldr	r3, [pc, #308]	; (8002748 <xTaskIncrementTick+0x14c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3301      	adds	r3, #1
 8002616:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002618:	4a4b      	ldr	r2, [pc, #300]	; (8002748 <xTaskIncrementTick+0x14c>)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d120      	bne.n	8002666 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002624:	4b49      	ldr	r3, [pc, #292]	; (800274c <xTaskIncrementTick+0x150>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002632:	f383 8811 	msr	BASEPRI, r3
 8002636:	f3bf 8f6f 	isb	sy
 800263a:	f3bf 8f4f 	dsb	sy
 800263e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002640:	bf00      	nop
 8002642:	e7fe      	b.n	8002642 <xTaskIncrementTick+0x46>
 8002644:	4b41      	ldr	r3, [pc, #260]	; (800274c <xTaskIncrementTick+0x150>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b41      	ldr	r3, [pc, #260]	; (8002750 <xTaskIncrementTick+0x154>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a3f      	ldr	r2, [pc, #252]	; (800274c <xTaskIncrementTick+0x150>)
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4a3f      	ldr	r2, [pc, #252]	; (8002750 <xTaskIncrementTick+0x154>)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b3e      	ldr	r3, [pc, #248]	; (8002754 <xTaskIncrementTick+0x158>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3301      	adds	r3, #1
 800265e:	4a3d      	ldr	r2, [pc, #244]	; (8002754 <xTaskIncrementTick+0x158>)
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	f000 f8e3 	bl	800282c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002666:	4b3c      	ldr	r3, [pc, #240]	; (8002758 <xTaskIncrementTick+0x15c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	429a      	cmp	r2, r3
 800266e:	d349      	bcc.n	8002704 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002670:	4b36      	ldr	r3, [pc, #216]	; (800274c <xTaskIncrementTick+0x150>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d104      	bne.n	8002684 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800267a:	4b37      	ldr	r3, [pc, #220]	; (8002758 <xTaskIncrementTick+0x15c>)
 800267c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002680:	601a      	str	r2, [r3, #0]
					break;
 8002682:	e03f      	b.n	8002704 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002684:	4b31      	ldr	r3, [pc, #196]	; (800274c <xTaskIncrementTick+0x150>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	429a      	cmp	r2, r3
 800269a:	d203      	bcs.n	80026a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800269c:	4a2e      	ldr	r2, [pc, #184]	; (8002758 <xTaskIncrementTick+0x15c>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80026a2:	e02f      	b.n	8002704 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	3304      	adds	r3, #4
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff7d 	bl	80025a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d004      	beq.n	80026c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	3318      	adds	r3, #24
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff74 	bl	80025a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c4:	4b25      	ldr	r3, [pc, #148]	; (800275c <xTaskIncrementTick+0x160>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d903      	bls.n	80026d4 <xTaskIncrementTick+0xd8>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	4a22      	ldr	r2, [pc, #136]	; (800275c <xTaskIncrementTick+0x160>)
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4a1f      	ldr	r2, [pc, #124]	; (8002760 <xTaskIncrementTick+0x164>)
 80026e2:	441a      	add	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	3304      	adds	r3, #4
 80026e8:	4619      	mov	r1, r3
 80026ea:	4610      	mov	r0, r2
 80026ec:	f7ff ff38 	bl	8002560 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <xTaskIncrementTick+0x168>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d3b8      	bcc.n	8002670 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80026fe:	2301      	movs	r3, #1
 8002700:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002702:	e7b5      	b.n	8002670 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002704:	4b17      	ldr	r3, [pc, #92]	; (8002764 <xTaskIncrementTick+0x168>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270a:	4915      	ldr	r1, [pc, #84]	; (8002760 <xTaskIncrementTick+0x164>)
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d901      	bls.n	8002720 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800271c:	2301      	movs	r3, #1
 800271e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <xTaskIncrementTick+0x16c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d007      	beq.n	8002738 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002728:	2301      	movs	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	e004      	b.n	8002738 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800272e:	4b0f      	ldr	r3, [pc, #60]	; (800276c <xTaskIncrementTick+0x170>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	3301      	adds	r3, #1
 8002734:	4a0d      	ldr	r2, [pc, #52]	; (800276c <xTaskIncrementTick+0x170>)
 8002736:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002738:	697b      	ldr	r3, [r7, #20]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200005a8 	.word	0x200005a8
 8002748:	2000058c 	.word	0x2000058c
 800274c:	20000584 	.word	0x20000584
 8002750:	20000588 	.word	0x20000588
 8002754:	200005a0 	.word	0x200005a0
 8002758:	200005a4 	.word	0x200005a4
 800275c:	20000590 	.word	0x20000590
 8002760:	20000124 	.word	0x20000124
 8002764:	20000120 	.word	0x20000120
 8002768:	2000059c 	.word	0x2000059c
 800276c:	20000598 	.word	0x20000598

08002770 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002776:	4b28      	ldr	r3, [pc, #160]	; (8002818 <vTaskSwitchContext+0xa8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800277e:	4b27      	ldr	r3, [pc, #156]	; (800281c <vTaskSwitchContext+0xac>)
 8002780:	2201      	movs	r2, #1
 8002782:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002784:	e041      	b.n	800280a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002786:	4b25      	ldr	r3, [pc, #148]	; (800281c <vTaskSwitchContext+0xac>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <vTaskSwitchContext+0xb0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	e010      	b.n	80027b6 <vTaskSwitchContext+0x46>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10a      	bne.n	80027b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800279a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279e:	f383 8811 	msr	BASEPRI, r3
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	f3bf 8f4f 	dsb	sy
 80027aa:	607b      	str	r3, [r7, #4]
}
 80027ac:	bf00      	nop
 80027ae:	e7fe      	b.n	80027ae <vTaskSwitchContext+0x3e>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	491b      	ldr	r1, [pc, #108]	; (8002824 <vTaskSwitchContext+0xb4>)
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0e4      	beq.n	8002794 <vTaskSwitchContext+0x24>
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4a13      	ldr	r2, [pc, #76]	; (8002824 <vTaskSwitchContext+0xb4>)
 80027d6:	4413      	add	r3, r2
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	3308      	adds	r3, #8
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d104      	bne.n	80027fa <vTaskSwitchContext+0x8a>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4a09      	ldr	r2, [pc, #36]	; (8002828 <vTaskSwitchContext+0xb8>)
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4a06      	ldr	r2, [pc, #24]	; (8002820 <vTaskSwitchContext+0xb0>)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6013      	str	r3, [r2, #0]
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	200005a8 	.word	0x200005a8
 800281c:	2000059c 	.word	0x2000059c
 8002820:	20000590 	.word	0x20000590
 8002824:	20000124 	.word	0x20000124
 8002828:	20000120 	.word	0x20000120

0800282c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <prvResetNextTaskUnblockTime+0x38>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <prvResetNextTaskUnblockTime+0x3c>)
 800283e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002842:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002844:	e008      	b.n	8002858 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002846:	4b07      	ldr	r3, [pc, #28]	; (8002864 <prvResetNextTaskUnblockTime+0x38>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a04      	ldr	r2, [pc, #16]	; (8002868 <prvResetNextTaskUnblockTime+0x3c>)
 8002856:	6013      	str	r3, [r2, #0]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	20000584 	.word	0x20000584
 8002868:	200005a4 	.word	0x200005a4

0800286c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <xTaskGetSchedulerState+0x34>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800287a:	2301      	movs	r3, #1
 800287c:	607b      	str	r3, [r7, #4]
 800287e:	e008      	b.n	8002892 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <xTaskGetSchedulerState+0x38>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002888:	2302      	movs	r3, #2
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	e001      	b.n	8002892 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002892:	687b      	ldr	r3, [r7, #4]
	}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	20000594 	.word	0x20000594
 80028a4:	200005a8 	.word	0x200005a8
	...

080028b0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80028b0:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <pxCurrentTCBConst2>)
 80028b2:	6819      	ldr	r1, [r3, #0]
 80028b4:	6808      	ldr	r0, [r1, #0]
 80028b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ba:	f380 8809 	msr	PSP, r0
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f04f 0000 	mov.w	r0, #0
 80028c6:	f380 8811 	msr	BASEPRI, r0
 80028ca:	4770      	bx	lr
 80028cc:	f3af 8000 	nop.w

080028d0 <pxCurrentTCBConst2>:
 80028d0:	20000120 	.word	0x20000120
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
	...

080028e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80028e0:	f3ef 8009 	mrs	r0, PSP
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <pxCurrentTCBConst>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	f01e 0f10 	tst.w	lr, #16
 80028f0:	bf08      	it	eq
 80028f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80028f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028fa:	6010      	str	r0, [r2, #0]
 80028fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002904:	f380 8811 	msr	BASEPRI, r0
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f7ff ff2e 	bl	8002770 <vTaskSwitchContext>
 8002914:	f04f 0000 	mov.w	r0, #0
 8002918:	f380 8811 	msr	BASEPRI, r0
 800291c:	bc09      	pop	{r0, r3}
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	6808      	ldr	r0, [r1, #0]
 8002922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002926:	f01e 0f10 	tst.w	lr, #16
 800292a:	bf08      	it	eq
 800292c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002930:	f380 8809 	msr	PSP, r0
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	f3af 8000 	nop.w

08002940 <pxCurrentTCBConst>:
 8002940:	20000120 	.word	0x20000120
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop

08002948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
	__asm volatile
 800294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	607b      	str	r3, [r7, #4]
}
 8002960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002962:	f7ff fe4b 	bl	80025fc <xTaskIncrementTick>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <xPortSysTickHandler+0x40>)
 800296e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	2300      	movs	r3, #0
 8002976:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800297e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	e000ed04 	.word	0xe000ed04

0800298c <__errno>:
 800298c:	4b01      	ldr	r3, [pc, #4]	; (8002994 <__errno+0x8>)
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	2000000c 	.word	0x2000000c

08002998 <__libc_init_array>:
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	4d0d      	ldr	r5, [pc, #52]	; (80029d0 <__libc_init_array+0x38>)
 800299c:	4c0d      	ldr	r4, [pc, #52]	; (80029d4 <__libc_init_array+0x3c>)
 800299e:	1b64      	subs	r4, r4, r5
 80029a0:	10a4      	asrs	r4, r4, #2
 80029a2:	2600      	movs	r6, #0
 80029a4:	42a6      	cmp	r6, r4
 80029a6:	d109      	bne.n	80029bc <__libc_init_array+0x24>
 80029a8:	4d0b      	ldr	r5, [pc, #44]	; (80029d8 <__libc_init_array+0x40>)
 80029aa:	4c0c      	ldr	r4, [pc, #48]	; (80029dc <__libc_init_array+0x44>)
 80029ac:	f000 ffae 	bl	800390c <_init>
 80029b0:	1b64      	subs	r4, r4, r5
 80029b2:	10a4      	asrs	r4, r4, #2
 80029b4:	2600      	movs	r6, #0
 80029b6:	42a6      	cmp	r6, r4
 80029b8:	d105      	bne.n	80029c6 <__libc_init_array+0x2e>
 80029ba:	bd70      	pop	{r4, r5, r6, pc}
 80029bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c0:	4798      	blx	r3
 80029c2:	3601      	adds	r6, #1
 80029c4:	e7ee      	b.n	80029a4 <__libc_init_array+0xc>
 80029c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ca:	4798      	blx	r3
 80029cc:	3601      	adds	r6, #1
 80029ce:	e7f2      	b.n	80029b6 <__libc_init_array+0x1e>
 80029d0:	08003a00 	.word	0x08003a00
 80029d4:	08003a00 	.word	0x08003a00
 80029d8:	08003a00 	.word	0x08003a00
 80029dc:	08003a04 	.word	0x08003a04

080029e0 <memset>:
 80029e0:	4402      	add	r2, r0
 80029e2:	4603      	mov	r3, r0
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d100      	bne.n	80029ea <memset+0xa>
 80029e8:	4770      	bx	lr
 80029ea:	f803 1b01 	strb.w	r1, [r3], #1
 80029ee:	e7f9      	b.n	80029e4 <memset+0x4>

080029f0 <iprintf>:
 80029f0:	b40f      	push	{r0, r1, r2, r3}
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <iprintf+0x2c>)
 80029f4:	b513      	push	{r0, r1, r4, lr}
 80029f6:	681c      	ldr	r4, [r3, #0]
 80029f8:	b124      	cbz	r4, 8002a04 <iprintf+0x14>
 80029fa:	69a3      	ldr	r3, [r4, #24]
 80029fc:	b913      	cbnz	r3, 8002a04 <iprintf+0x14>
 80029fe:	4620      	mov	r0, r4
 8002a00:	f000 f866 	bl	8002ad0 <__sinit>
 8002a04:	ab05      	add	r3, sp, #20
 8002a06:	9a04      	ldr	r2, [sp, #16]
 8002a08:	68a1      	ldr	r1, [r4, #8]
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f000 f9bd 	bl	8002d8c <_vfiprintf_r>
 8002a12:	b002      	add	sp, #8
 8002a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a18:	b004      	add	sp, #16
 8002a1a:	4770      	bx	lr
 8002a1c:	2000000c 	.word	0x2000000c

08002a20 <std>:
 8002a20:	2300      	movs	r3, #0
 8002a22:	b510      	push	{r4, lr}
 8002a24:	4604      	mov	r4, r0
 8002a26:	e9c0 3300 	strd	r3, r3, [r0]
 8002a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a2e:	6083      	str	r3, [r0, #8]
 8002a30:	8181      	strh	r1, [r0, #12]
 8002a32:	6643      	str	r3, [r0, #100]	; 0x64
 8002a34:	81c2      	strh	r2, [r0, #14]
 8002a36:	6183      	str	r3, [r0, #24]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	305c      	adds	r0, #92	; 0x5c
 8002a3e:	f7ff ffcf 	bl	80029e0 <memset>
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <std+0x38>)
 8002a44:	6263      	str	r3, [r4, #36]	; 0x24
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <std+0x3c>)
 8002a48:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <std+0x40>)
 8002a4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <std+0x44>)
 8002a50:	6224      	str	r4, [r4, #32]
 8002a52:	6323      	str	r3, [r4, #48]	; 0x30
 8002a54:	bd10      	pop	{r4, pc}
 8002a56:	bf00      	nop
 8002a58:	08003335 	.word	0x08003335
 8002a5c:	08003357 	.word	0x08003357
 8002a60:	0800338f 	.word	0x0800338f
 8002a64:	080033b3 	.word	0x080033b3

08002a68 <_cleanup_r>:
 8002a68:	4901      	ldr	r1, [pc, #4]	; (8002a70 <_cleanup_r+0x8>)
 8002a6a:	f000 b8af 	b.w	8002bcc <_fwalk_reent>
 8002a6e:	bf00      	nop
 8002a70:	0800368d 	.word	0x0800368d

08002a74 <__sfmoreglue>:
 8002a74:	b570      	push	{r4, r5, r6, lr}
 8002a76:	2268      	movs	r2, #104	; 0x68
 8002a78:	1e4d      	subs	r5, r1, #1
 8002a7a:	4355      	muls	r5, r2
 8002a7c:	460e      	mov	r6, r1
 8002a7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a82:	f000 f8e5 	bl	8002c50 <_malloc_r>
 8002a86:	4604      	mov	r4, r0
 8002a88:	b140      	cbz	r0, 8002a9c <__sfmoreglue+0x28>
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	e9c0 1600 	strd	r1, r6, [r0]
 8002a90:	300c      	adds	r0, #12
 8002a92:	60a0      	str	r0, [r4, #8]
 8002a94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a98:	f7ff ffa2 	bl	80029e0 <memset>
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	bd70      	pop	{r4, r5, r6, pc}

08002aa0 <__sfp_lock_acquire>:
 8002aa0:	4801      	ldr	r0, [pc, #4]	; (8002aa8 <__sfp_lock_acquire+0x8>)
 8002aa2:	f000 b8b3 	b.w	8002c0c <__retarget_lock_acquire_recursive>
 8002aa6:	bf00      	nop
 8002aa8:	200005ad 	.word	0x200005ad

08002aac <__sfp_lock_release>:
 8002aac:	4801      	ldr	r0, [pc, #4]	; (8002ab4 <__sfp_lock_release+0x8>)
 8002aae:	f000 b8ae 	b.w	8002c0e <__retarget_lock_release_recursive>
 8002ab2:	bf00      	nop
 8002ab4:	200005ad 	.word	0x200005ad

08002ab8 <__sinit_lock_acquire>:
 8002ab8:	4801      	ldr	r0, [pc, #4]	; (8002ac0 <__sinit_lock_acquire+0x8>)
 8002aba:	f000 b8a7 	b.w	8002c0c <__retarget_lock_acquire_recursive>
 8002abe:	bf00      	nop
 8002ac0:	200005ae 	.word	0x200005ae

08002ac4 <__sinit_lock_release>:
 8002ac4:	4801      	ldr	r0, [pc, #4]	; (8002acc <__sinit_lock_release+0x8>)
 8002ac6:	f000 b8a2 	b.w	8002c0e <__retarget_lock_release_recursive>
 8002aca:	bf00      	nop
 8002acc:	200005ae 	.word	0x200005ae

08002ad0 <__sinit>:
 8002ad0:	b510      	push	{r4, lr}
 8002ad2:	4604      	mov	r4, r0
 8002ad4:	f7ff fff0 	bl	8002ab8 <__sinit_lock_acquire>
 8002ad8:	69a3      	ldr	r3, [r4, #24]
 8002ada:	b11b      	cbz	r3, 8002ae4 <__sinit+0x14>
 8002adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ae0:	f7ff bff0 	b.w	8002ac4 <__sinit_lock_release>
 8002ae4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002ae8:	6523      	str	r3, [r4, #80]	; 0x50
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <__sinit+0x68>)
 8002aec:	4a13      	ldr	r2, [pc, #76]	; (8002b3c <__sinit+0x6c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	62a2      	str	r2, [r4, #40]	; 0x28
 8002af2:	42a3      	cmp	r3, r4
 8002af4:	bf04      	itt	eq
 8002af6:	2301      	moveq	r3, #1
 8002af8:	61a3      	streq	r3, [r4, #24]
 8002afa:	4620      	mov	r0, r4
 8002afc:	f000 f820 	bl	8002b40 <__sfp>
 8002b00:	6060      	str	r0, [r4, #4]
 8002b02:	4620      	mov	r0, r4
 8002b04:	f000 f81c 	bl	8002b40 <__sfp>
 8002b08:	60a0      	str	r0, [r4, #8]
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	f000 f818 	bl	8002b40 <__sfp>
 8002b10:	2200      	movs	r2, #0
 8002b12:	60e0      	str	r0, [r4, #12]
 8002b14:	2104      	movs	r1, #4
 8002b16:	6860      	ldr	r0, [r4, #4]
 8002b18:	f7ff ff82 	bl	8002a20 <std>
 8002b1c:	68a0      	ldr	r0, [r4, #8]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	2109      	movs	r1, #9
 8002b22:	f7ff ff7d 	bl	8002a20 <std>
 8002b26:	68e0      	ldr	r0, [r4, #12]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	2112      	movs	r1, #18
 8002b2c:	f7ff ff78 	bl	8002a20 <std>
 8002b30:	2301      	movs	r3, #1
 8002b32:	61a3      	str	r3, [r4, #24]
 8002b34:	e7d2      	b.n	8002adc <__sinit+0xc>
 8002b36:	bf00      	nop
 8002b38:	08003960 	.word	0x08003960
 8002b3c:	08002a69 	.word	0x08002a69

08002b40 <__sfp>:
 8002b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b42:	4607      	mov	r7, r0
 8002b44:	f7ff ffac 	bl	8002aa0 <__sfp_lock_acquire>
 8002b48:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <__sfp+0x84>)
 8002b4a:	681e      	ldr	r6, [r3, #0]
 8002b4c:	69b3      	ldr	r3, [r6, #24]
 8002b4e:	b913      	cbnz	r3, 8002b56 <__sfp+0x16>
 8002b50:	4630      	mov	r0, r6
 8002b52:	f7ff ffbd 	bl	8002ad0 <__sinit>
 8002b56:	3648      	adds	r6, #72	; 0x48
 8002b58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	d503      	bpl.n	8002b68 <__sfp+0x28>
 8002b60:	6833      	ldr	r3, [r6, #0]
 8002b62:	b30b      	cbz	r3, 8002ba8 <__sfp+0x68>
 8002b64:	6836      	ldr	r6, [r6, #0]
 8002b66:	e7f7      	b.n	8002b58 <__sfp+0x18>
 8002b68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002b6c:	b9d5      	cbnz	r5, 8002ba4 <__sfp+0x64>
 8002b6e:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <__sfp+0x88>)
 8002b70:	60e3      	str	r3, [r4, #12]
 8002b72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002b76:	6665      	str	r5, [r4, #100]	; 0x64
 8002b78:	f000 f847 	bl	8002c0a <__retarget_lock_init_recursive>
 8002b7c:	f7ff ff96 	bl	8002aac <__sfp_lock_release>
 8002b80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002b84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002b88:	6025      	str	r5, [r4, #0]
 8002b8a:	61a5      	str	r5, [r4, #24]
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	4629      	mov	r1, r5
 8002b90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b94:	f7ff ff24 	bl	80029e0 <memset>
 8002b98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002b9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ba4:	3468      	adds	r4, #104	; 0x68
 8002ba6:	e7d9      	b.n	8002b5c <__sfp+0x1c>
 8002ba8:	2104      	movs	r1, #4
 8002baa:	4638      	mov	r0, r7
 8002bac:	f7ff ff62 	bl	8002a74 <__sfmoreglue>
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	6030      	str	r0, [r6, #0]
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	d1d5      	bne.n	8002b64 <__sfp+0x24>
 8002bb8:	f7ff ff78 	bl	8002aac <__sfp_lock_release>
 8002bbc:	230c      	movs	r3, #12
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	e7ee      	b.n	8002ba0 <__sfp+0x60>
 8002bc2:	bf00      	nop
 8002bc4:	08003960 	.word	0x08003960
 8002bc8:	ffff0001 	.word	0xffff0001

08002bcc <_fwalk_reent>:
 8002bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bd0:	4606      	mov	r6, r0
 8002bd2:	4688      	mov	r8, r1
 8002bd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002bd8:	2700      	movs	r7, #0
 8002bda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002bde:	f1b9 0901 	subs.w	r9, r9, #1
 8002be2:	d505      	bpl.n	8002bf0 <_fwalk_reent+0x24>
 8002be4:	6824      	ldr	r4, [r4, #0]
 8002be6:	2c00      	cmp	r4, #0
 8002be8:	d1f7      	bne.n	8002bda <_fwalk_reent+0xe>
 8002bea:	4638      	mov	r0, r7
 8002bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bf0:	89ab      	ldrh	r3, [r5, #12]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d907      	bls.n	8002c06 <_fwalk_reent+0x3a>
 8002bf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	d003      	beq.n	8002c06 <_fwalk_reent+0x3a>
 8002bfe:	4629      	mov	r1, r5
 8002c00:	4630      	mov	r0, r6
 8002c02:	47c0      	blx	r8
 8002c04:	4307      	orrs	r7, r0
 8002c06:	3568      	adds	r5, #104	; 0x68
 8002c08:	e7e9      	b.n	8002bde <_fwalk_reent+0x12>

08002c0a <__retarget_lock_init_recursive>:
 8002c0a:	4770      	bx	lr

08002c0c <__retarget_lock_acquire_recursive>:
 8002c0c:	4770      	bx	lr

08002c0e <__retarget_lock_release_recursive>:
 8002c0e:	4770      	bx	lr

08002c10 <sbrk_aligned>:
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	4e0e      	ldr	r6, [pc, #56]	; (8002c4c <sbrk_aligned+0x3c>)
 8002c14:	460c      	mov	r4, r1
 8002c16:	6831      	ldr	r1, [r6, #0]
 8002c18:	4605      	mov	r5, r0
 8002c1a:	b911      	cbnz	r1, 8002c22 <sbrk_aligned+0x12>
 8002c1c:	f000 fb7a 	bl	8003314 <_sbrk_r>
 8002c20:	6030      	str	r0, [r6, #0]
 8002c22:	4621      	mov	r1, r4
 8002c24:	4628      	mov	r0, r5
 8002c26:	f000 fb75 	bl	8003314 <_sbrk_r>
 8002c2a:	1c43      	adds	r3, r0, #1
 8002c2c:	d00a      	beq.n	8002c44 <sbrk_aligned+0x34>
 8002c2e:	1cc4      	adds	r4, r0, #3
 8002c30:	f024 0403 	bic.w	r4, r4, #3
 8002c34:	42a0      	cmp	r0, r4
 8002c36:	d007      	beq.n	8002c48 <sbrk_aligned+0x38>
 8002c38:	1a21      	subs	r1, r4, r0
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f000 fb6a 	bl	8003314 <_sbrk_r>
 8002c40:	3001      	adds	r0, #1
 8002c42:	d101      	bne.n	8002c48 <sbrk_aligned+0x38>
 8002c44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002c48:	4620      	mov	r0, r4
 8002c4a:	bd70      	pop	{r4, r5, r6, pc}
 8002c4c:	200005b4 	.word	0x200005b4

08002c50 <_malloc_r>:
 8002c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c54:	1ccd      	adds	r5, r1, #3
 8002c56:	f025 0503 	bic.w	r5, r5, #3
 8002c5a:	3508      	adds	r5, #8
 8002c5c:	2d0c      	cmp	r5, #12
 8002c5e:	bf38      	it	cc
 8002c60:	250c      	movcc	r5, #12
 8002c62:	2d00      	cmp	r5, #0
 8002c64:	4607      	mov	r7, r0
 8002c66:	db01      	blt.n	8002c6c <_malloc_r+0x1c>
 8002c68:	42a9      	cmp	r1, r5
 8002c6a:	d905      	bls.n	8002c78 <_malloc_r+0x28>
 8002c6c:	230c      	movs	r3, #12
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	2600      	movs	r6, #0
 8002c72:	4630      	mov	r0, r6
 8002c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c78:	4e2e      	ldr	r6, [pc, #184]	; (8002d34 <_malloc_r+0xe4>)
 8002c7a:	f000 fdbb 	bl	80037f4 <__malloc_lock>
 8002c7e:	6833      	ldr	r3, [r6, #0]
 8002c80:	461c      	mov	r4, r3
 8002c82:	bb34      	cbnz	r4, 8002cd2 <_malloc_r+0x82>
 8002c84:	4629      	mov	r1, r5
 8002c86:	4638      	mov	r0, r7
 8002c88:	f7ff ffc2 	bl	8002c10 <sbrk_aligned>
 8002c8c:	1c43      	adds	r3, r0, #1
 8002c8e:	4604      	mov	r4, r0
 8002c90:	d14d      	bne.n	8002d2e <_malloc_r+0xde>
 8002c92:	6834      	ldr	r4, [r6, #0]
 8002c94:	4626      	mov	r6, r4
 8002c96:	2e00      	cmp	r6, #0
 8002c98:	d140      	bne.n	8002d1c <_malloc_r+0xcc>
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	4631      	mov	r1, r6
 8002c9e:	4638      	mov	r0, r7
 8002ca0:	eb04 0803 	add.w	r8, r4, r3
 8002ca4:	f000 fb36 	bl	8003314 <_sbrk_r>
 8002ca8:	4580      	cmp	r8, r0
 8002caa:	d13a      	bne.n	8002d22 <_malloc_r+0xd2>
 8002cac:	6821      	ldr	r1, [r4, #0]
 8002cae:	3503      	adds	r5, #3
 8002cb0:	1a6d      	subs	r5, r5, r1
 8002cb2:	f025 0503 	bic.w	r5, r5, #3
 8002cb6:	3508      	adds	r5, #8
 8002cb8:	2d0c      	cmp	r5, #12
 8002cba:	bf38      	it	cc
 8002cbc:	250c      	movcc	r5, #12
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	4638      	mov	r0, r7
 8002cc2:	f7ff ffa5 	bl	8002c10 <sbrk_aligned>
 8002cc6:	3001      	adds	r0, #1
 8002cc8:	d02b      	beq.n	8002d22 <_malloc_r+0xd2>
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	442b      	add	r3, r5
 8002cce:	6023      	str	r3, [r4, #0]
 8002cd0:	e00e      	b.n	8002cf0 <_malloc_r+0xa0>
 8002cd2:	6822      	ldr	r2, [r4, #0]
 8002cd4:	1b52      	subs	r2, r2, r5
 8002cd6:	d41e      	bmi.n	8002d16 <_malloc_r+0xc6>
 8002cd8:	2a0b      	cmp	r2, #11
 8002cda:	d916      	bls.n	8002d0a <_malloc_r+0xba>
 8002cdc:	1961      	adds	r1, r4, r5
 8002cde:	42a3      	cmp	r3, r4
 8002ce0:	6025      	str	r5, [r4, #0]
 8002ce2:	bf18      	it	ne
 8002ce4:	6059      	strne	r1, [r3, #4]
 8002ce6:	6863      	ldr	r3, [r4, #4]
 8002ce8:	bf08      	it	eq
 8002cea:	6031      	streq	r1, [r6, #0]
 8002cec:	5162      	str	r2, [r4, r5]
 8002cee:	604b      	str	r3, [r1, #4]
 8002cf0:	4638      	mov	r0, r7
 8002cf2:	f104 060b 	add.w	r6, r4, #11
 8002cf6:	f000 fd83 	bl	8003800 <__malloc_unlock>
 8002cfa:	f026 0607 	bic.w	r6, r6, #7
 8002cfe:	1d23      	adds	r3, r4, #4
 8002d00:	1af2      	subs	r2, r6, r3
 8002d02:	d0b6      	beq.n	8002c72 <_malloc_r+0x22>
 8002d04:	1b9b      	subs	r3, r3, r6
 8002d06:	50a3      	str	r3, [r4, r2]
 8002d08:	e7b3      	b.n	8002c72 <_malloc_r+0x22>
 8002d0a:	6862      	ldr	r2, [r4, #4]
 8002d0c:	42a3      	cmp	r3, r4
 8002d0e:	bf0c      	ite	eq
 8002d10:	6032      	streq	r2, [r6, #0]
 8002d12:	605a      	strne	r2, [r3, #4]
 8002d14:	e7ec      	b.n	8002cf0 <_malloc_r+0xa0>
 8002d16:	4623      	mov	r3, r4
 8002d18:	6864      	ldr	r4, [r4, #4]
 8002d1a:	e7b2      	b.n	8002c82 <_malloc_r+0x32>
 8002d1c:	4634      	mov	r4, r6
 8002d1e:	6876      	ldr	r6, [r6, #4]
 8002d20:	e7b9      	b.n	8002c96 <_malloc_r+0x46>
 8002d22:	230c      	movs	r3, #12
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	4638      	mov	r0, r7
 8002d28:	f000 fd6a 	bl	8003800 <__malloc_unlock>
 8002d2c:	e7a1      	b.n	8002c72 <_malloc_r+0x22>
 8002d2e:	6025      	str	r5, [r4, #0]
 8002d30:	e7de      	b.n	8002cf0 <_malloc_r+0xa0>
 8002d32:	bf00      	nop
 8002d34:	200005b0 	.word	0x200005b0

08002d38 <__sfputc_r>:
 8002d38:	6893      	ldr	r3, [r2, #8]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	b410      	push	{r4}
 8002d40:	6093      	str	r3, [r2, #8]
 8002d42:	da08      	bge.n	8002d56 <__sfputc_r+0x1e>
 8002d44:	6994      	ldr	r4, [r2, #24]
 8002d46:	42a3      	cmp	r3, r4
 8002d48:	db01      	blt.n	8002d4e <__sfputc_r+0x16>
 8002d4a:	290a      	cmp	r1, #10
 8002d4c:	d103      	bne.n	8002d56 <__sfputc_r+0x1e>
 8002d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d52:	f000 bb33 	b.w	80033bc <__swbuf_r>
 8002d56:	6813      	ldr	r3, [r2, #0]
 8002d58:	1c58      	adds	r0, r3, #1
 8002d5a:	6010      	str	r0, [r2, #0]
 8002d5c:	7019      	strb	r1, [r3, #0]
 8002d5e:	4608      	mov	r0, r1
 8002d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <__sfputs_r>:
 8002d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d68:	4606      	mov	r6, r0
 8002d6a:	460f      	mov	r7, r1
 8002d6c:	4614      	mov	r4, r2
 8002d6e:	18d5      	adds	r5, r2, r3
 8002d70:	42ac      	cmp	r4, r5
 8002d72:	d101      	bne.n	8002d78 <__sfputs_r+0x12>
 8002d74:	2000      	movs	r0, #0
 8002d76:	e007      	b.n	8002d88 <__sfputs_r+0x22>
 8002d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d7c:	463a      	mov	r2, r7
 8002d7e:	4630      	mov	r0, r6
 8002d80:	f7ff ffda 	bl	8002d38 <__sfputc_r>
 8002d84:	1c43      	adds	r3, r0, #1
 8002d86:	d1f3      	bne.n	8002d70 <__sfputs_r+0xa>
 8002d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d8c <_vfiprintf_r>:
 8002d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d90:	460d      	mov	r5, r1
 8002d92:	b09d      	sub	sp, #116	; 0x74
 8002d94:	4614      	mov	r4, r2
 8002d96:	4698      	mov	r8, r3
 8002d98:	4606      	mov	r6, r0
 8002d9a:	b118      	cbz	r0, 8002da4 <_vfiprintf_r+0x18>
 8002d9c:	6983      	ldr	r3, [r0, #24]
 8002d9e:	b90b      	cbnz	r3, 8002da4 <_vfiprintf_r+0x18>
 8002da0:	f7ff fe96 	bl	8002ad0 <__sinit>
 8002da4:	4b89      	ldr	r3, [pc, #548]	; (8002fcc <_vfiprintf_r+0x240>)
 8002da6:	429d      	cmp	r5, r3
 8002da8:	d11b      	bne.n	8002de2 <_vfiprintf_r+0x56>
 8002daa:	6875      	ldr	r5, [r6, #4]
 8002dac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002dae:	07d9      	lsls	r1, r3, #31
 8002db0:	d405      	bmi.n	8002dbe <_vfiprintf_r+0x32>
 8002db2:	89ab      	ldrh	r3, [r5, #12]
 8002db4:	059a      	lsls	r2, r3, #22
 8002db6:	d402      	bmi.n	8002dbe <_vfiprintf_r+0x32>
 8002db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002dba:	f7ff ff27 	bl	8002c0c <__retarget_lock_acquire_recursive>
 8002dbe:	89ab      	ldrh	r3, [r5, #12]
 8002dc0:	071b      	lsls	r3, r3, #28
 8002dc2:	d501      	bpl.n	8002dc8 <_vfiprintf_r+0x3c>
 8002dc4:	692b      	ldr	r3, [r5, #16]
 8002dc6:	b9eb      	cbnz	r3, 8002e04 <_vfiprintf_r+0x78>
 8002dc8:	4629      	mov	r1, r5
 8002dca:	4630      	mov	r0, r6
 8002dcc:	f000 fb5a 	bl	8003484 <__swsetup_r>
 8002dd0:	b1c0      	cbz	r0, 8002e04 <_vfiprintf_r+0x78>
 8002dd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002dd4:	07dc      	lsls	r4, r3, #31
 8002dd6:	d50e      	bpl.n	8002df6 <_vfiprintf_r+0x6a>
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ddc:	b01d      	add	sp, #116	; 0x74
 8002dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002de2:	4b7b      	ldr	r3, [pc, #492]	; (8002fd0 <_vfiprintf_r+0x244>)
 8002de4:	429d      	cmp	r5, r3
 8002de6:	d101      	bne.n	8002dec <_vfiprintf_r+0x60>
 8002de8:	68b5      	ldr	r5, [r6, #8]
 8002dea:	e7df      	b.n	8002dac <_vfiprintf_r+0x20>
 8002dec:	4b79      	ldr	r3, [pc, #484]	; (8002fd4 <_vfiprintf_r+0x248>)
 8002dee:	429d      	cmp	r5, r3
 8002df0:	bf08      	it	eq
 8002df2:	68f5      	ldreq	r5, [r6, #12]
 8002df4:	e7da      	b.n	8002dac <_vfiprintf_r+0x20>
 8002df6:	89ab      	ldrh	r3, [r5, #12]
 8002df8:	0598      	lsls	r0, r3, #22
 8002dfa:	d4ed      	bmi.n	8002dd8 <_vfiprintf_r+0x4c>
 8002dfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002dfe:	f7ff ff06 	bl	8002c0e <__retarget_lock_release_recursive>
 8002e02:	e7e9      	b.n	8002dd8 <_vfiprintf_r+0x4c>
 8002e04:	2300      	movs	r3, #0
 8002e06:	9309      	str	r3, [sp, #36]	; 0x24
 8002e08:	2320      	movs	r3, #32
 8002e0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e12:	2330      	movs	r3, #48	; 0x30
 8002e14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002fd8 <_vfiprintf_r+0x24c>
 8002e18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e1c:	f04f 0901 	mov.w	r9, #1
 8002e20:	4623      	mov	r3, r4
 8002e22:	469a      	mov	sl, r3
 8002e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e28:	b10a      	cbz	r2, 8002e2e <_vfiprintf_r+0xa2>
 8002e2a:	2a25      	cmp	r2, #37	; 0x25
 8002e2c:	d1f9      	bne.n	8002e22 <_vfiprintf_r+0x96>
 8002e2e:	ebba 0b04 	subs.w	fp, sl, r4
 8002e32:	d00b      	beq.n	8002e4c <_vfiprintf_r+0xc0>
 8002e34:	465b      	mov	r3, fp
 8002e36:	4622      	mov	r2, r4
 8002e38:	4629      	mov	r1, r5
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	f7ff ff93 	bl	8002d66 <__sfputs_r>
 8002e40:	3001      	adds	r0, #1
 8002e42:	f000 80aa 	beq.w	8002f9a <_vfiprintf_r+0x20e>
 8002e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e48:	445a      	add	r2, fp
 8002e4a:	9209      	str	r2, [sp, #36]	; 0x24
 8002e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80a2 	beq.w	8002f9a <_vfiprintf_r+0x20e>
 8002e56:	2300      	movs	r3, #0
 8002e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e60:	f10a 0a01 	add.w	sl, sl, #1
 8002e64:	9304      	str	r3, [sp, #16]
 8002e66:	9307      	str	r3, [sp, #28]
 8002e68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e6c:	931a      	str	r3, [sp, #104]	; 0x68
 8002e6e:	4654      	mov	r4, sl
 8002e70:	2205      	movs	r2, #5
 8002e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e76:	4858      	ldr	r0, [pc, #352]	; (8002fd8 <_vfiprintf_r+0x24c>)
 8002e78:	f7fd f9b2 	bl	80001e0 <memchr>
 8002e7c:	9a04      	ldr	r2, [sp, #16]
 8002e7e:	b9d8      	cbnz	r0, 8002eb8 <_vfiprintf_r+0x12c>
 8002e80:	06d1      	lsls	r1, r2, #27
 8002e82:	bf44      	itt	mi
 8002e84:	2320      	movmi	r3, #32
 8002e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e8a:	0713      	lsls	r3, r2, #28
 8002e8c:	bf44      	itt	mi
 8002e8e:	232b      	movmi	r3, #43	; 0x2b
 8002e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e94:	f89a 3000 	ldrb.w	r3, [sl]
 8002e98:	2b2a      	cmp	r3, #42	; 0x2a
 8002e9a:	d015      	beq.n	8002ec8 <_vfiprintf_r+0x13c>
 8002e9c:	9a07      	ldr	r2, [sp, #28]
 8002e9e:	4654      	mov	r4, sl
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f04f 0c0a 	mov.w	ip, #10
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002eac:	3b30      	subs	r3, #48	; 0x30
 8002eae:	2b09      	cmp	r3, #9
 8002eb0:	d94e      	bls.n	8002f50 <_vfiprintf_r+0x1c4>
 8002eb2:	b1b0      	cbz	r0, 8002ee2 <_vfiprintf_r+0x156>
 8002eb4:	9207      	str	r2, [sp, #28]
 8002eb6:	e014      	b.n	8002ee2 <_vfiprintf_r+0x156>
 8002eb8:	eba0 0308 	sub.w	r3, r0, r8
 8002ebc:	fa09 f303 	lsl.w	r3, r9, r3
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	9304      	str	r3, [sp, #16]
 8002ec4:	46a2      	mov	sl, r4
 8002ec6:	e7d2      	b.n	8002e6e <_vfiprintf_r+0xe2>
 8002ec8:	9b03      	ldr	r3, [sp, #12]
 8002eca:	1d19      	adds	r1, r3, #4
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	9103      	str	r1, [sp, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bfbb      	ittet	lt
 8002ed4:	425b      	neglt	r3, r3
 8002ed6:	f042 0202 	orrlt.w	r2, r2, #2
 8002eda:	9307      	strge	r3, [sp, #28]
 8002edc:	9307      	strlt	r3, [sp, #28]
 8002ede:	bfb8      	it	lt
 8002ee0:	9204      	strlt	r2, [sp, #16]
 8002ee2:	7823      	ldrb	r3, [r4, #0]
 8002ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8002ee6:	d10c      	bne.n	8002f02 <_vfiprintf_r+0x176>
 8002ee8:	7863      	ldrb	r3, [r4, #1]
 8002eea:	2b2a      	cmp	r3, #42	; 0x2a
 8002eec:	d135      	bne.n	8002f5a <_vfiprintf_r+0x1ce>
 8002eee:	9b03      	ldr	r3, [sp, #12]
 8002ef0:	1d1a      	adds	r2, r3, #4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	9203      	str	r2, [sp, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bfb8      	it	lt
 8002efa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002efe:	3402      	adds	r4, #2
 8002f00:	9305      	str	r3, [sp, #20]
 8002f02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002fe8 <_vfiprintf_r+0x25c>
 8002f06:	7821      	ldrb	r1, [r4, #0]
 8002f08:	2203      	movs	r2, #3
 8002f0a:	4650      	mov	r0, sl
 8002f0c:	f7fd f968 	bl	80001e0 <memchr>
 8002f10:	b140      	cbz	r0, 8002f24 <_vfiprintf_r+0x198>
 8002f12:	2340      	movs	r3, #64	; 0x40
 8002f14:	eba0 000a 	sub.w	r0, r0, sl
 8002f18:	fa03 f000 	lsl.w	r0, r3, r0
 8002f1c:	9b04      	ldr	r3, [sp, #16]
 8002f1e:	4303      	orrs	r3, r0
 8002f20:	3401      	adds	r4, #1
 8002f22:	9304      	str	r3, [sp, #16]
 8002f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f28:	482c      	ldr	r0, [pc, #176]	; (8002fdc <_vfiprintf_r+0x250>)
 8002f2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f2e:	2206      	movs	r2, #6
 8002f30:	f7fd f956 	bl	80001e0 <memchr>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d03f      	beq.n	8002fb8 <_vfiprintf_r+0x22c>
 8002f38:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <_vfiprintf_r+0x254>)
 8002f3a:	bb1b      	cbnz	r3, 8002f84 <_vfiprintf_r+0x1f8>
 8002f3c:	9b03      	ldr	r3, [sp, #12]
 8002f3e:	3307      	adds	r3, #7
 8002f40:	f023 0307 	bic.w	r3, r3, #7
 8002f44:	3308      	adds	r3, #8
 8002f46:	9303      	str	r3, [sp, #12]
 8002f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f4a:	443b      	add	r3, r7
 8002f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f4e:	e767      	b.n	8002e20 <_vfiprintf_r+0x94>
 8002f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f54:	460c      	mov	r4, r1
 8002f56:	2001      	movs	r0, #1
 8002f58:	e7a5      	b.n	8002ea6 <_vfiprintf_r+0x11a>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	3401      	adds	r4, #1
 8002f5e:	9305      	str	r3, [sp, #20]
 8002f60:	4619      	mov	r1, r3
 8002f62:	f04f 0c0a 	mov.w	ip, #10
 8002f66:	4620      	mov	r0, r4
 8002f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f6c:	3a30      	subs	r2, #48	; 0x30
 8002f6e:	2a09      	cmp	r2, #9
 8002f70:	d903      	bls.n	8002f7a <_vfiprintf_r+0x1ee>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0c5      	beq.n	8002f02 <_vfiprintf_r+0x176>
 8002f76:	9105      	str	r1, [sp, #20]
 8002f78:	e7c3      	b.n	8002f02 <_vfiprintf_r+0x176>
 8002f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f7e:	4604      	mov	r4, r0
 8002f80:	2301      	movs	r3, #1
 8002f82:	e7f0      	b.n	8002f66 <_vfiprintf_r+0x1da>
 8002f84:	ab03      	add	r3, sp, #12
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	462a      	mov	r2, r5
 8002f8a:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <_vfiprintf_r+0x258>)
 8002f8c:	a904      	add	r1, sp, #16
 8002f8e:	4630      	mov	r0, r6
 8002f90:	f3af 8000 	nop.w
 8002f94:	4607      	mov	r7, r0
 8002f96:	1c78      	adds	r0, r7, #1
 8002f98:	d1d6      	bne.n	8002f48 <_vfiprintf_r+0x1bc>
 8002f9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f9c:	07d9      	lsls	r1, r3, #31
 8002f9e:	d405      	bmi.n	8002fac <_vfiprintf_r+0x220>
 8002fa0:	89ab      	ldrh	r3, [r5, #12]
 8002fa2:	059a      	lsls	r2, r3, #22
 8002fa4:	d402      	bmi.n	8002fac <_vfiprintf_r+0x220>
 8002fa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fa8:	f7ff fe31 	bl	8002c0e <__retarget_lock_release_recursive>
 8002fac:	89ab      	ldrh	r3, [r5, #12]
 8002fae:	065b      	lsls	r3, r3, #25
 8002fb0:	f53f af12 	bmi.w	8002dd8 <_vfiprintf_r+0x4c>
 8002fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fb6:	e711      	b.n	8002ddc <_vfiprintf_r+0x50>
 8002fb8:	ab03      	add	r3, sp, #12
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	462a      	mov	r2, r5
 8002fbe:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <_vfiprintf_r+0x258>)
 8002fc0:	a904      	add	r1, sp, #16
 8002fc2:	4630      	mov	r0, r6
 8002fc4:	f000 f880 	bl	80030c8 <_printf_i>
 8002fc8:	e7e4      	b.n	8002f94 <_vfiprintf_r+0x208>
 8002fca:	bf00      	nop
 8002fcc:	08003984 	.word	0x08003984
 8002fd0:	080039a4 	.word	0x080039a4
 8002fd4:	08003964 	.word	0x08003964
 8002fd8:	080039c4 	.word	0x080039c4
 8002fdc:	080039ce 	.word	0x080039ce
 8002fe0:	00000000 	.word	0x00000000
 8002fe4:	08002d67 	.word	0x08002d67
 8002fe8:	080039ca 	.word	0x080039ca

08002fec <_printf_common>:
 8002fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff0:	4616      	mov	r6, r2
 8002ff2:	4699      	mov	r9, r3
 8002ff4:	688a      	ldr	r2, [r1, #8]
 8002ff6:	690b      	ldr	r3, [r1, #16]
 8002ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	bfb8      	it	lt
 8003000:	4613      	movlt	r3, r2
 8003002:	6033      	str	r3, [r6, #0]
 8003004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003008:	4607      	mov	r7, r0
 800300a:	460c      	mov	r4, r1
 800300c:	b10a      	cbz	r2, 8003012 <_printf_common+0x26>
 800300e:	3301      	adds	r3, #1
 8003010:	6033      	str	r3, [r6, #0]
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	0699      	lsls	r1, r3, #26
 8003016:	bf42      	ittt	mi
 8003018:	6833      	ldrmi	r3, [r6, #0]
 800301a:	3302      	addmi	r3, #2
 800301c:	6033      	strmi	r3, [r6, #0]
 800301e:	6825      	ldr	r5, [r4, #0]
 8003020:	f015 0506 	ands.w	r5, r5, #6
 8003024:	d106      	bne.n	8003034 <_printf_common+0x48>
 8003026:	f104 0a19 	add.w	sl, r4, #25
 800302a:	68e3      	ldr	r3, [r4, #12]
 800302c:	6832      	ldr	r2, [r6, #0]
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	42ab      	cmp	r3, r5
 8003032:	dc26      	bgt.n	8003082 <_printf_common+0x96>
 8003034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003038:	1e13      	subs	r3, r2, #0
 800303a:	6822      	ldr	r2, [r4, #0]
 800303c:	bf18      	it	ne
 800303e:	2301      	movne	r3, #1
 8003040:	0692      	lsls	r2, r2, #26
 8003042:	d42b      	bmi.n	800309c <_printf_common+0xb0>
 8003044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003048:	4649      	mov	r1, r9
 800304a:	4638      	mov	r0, r7
 800304c:	47c0      	blx	r8
 800304e:	3001      	adds	r0, #1
 8003050:	d01e      	beq.n	8003090 <_printf_common+0xa4>
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	68e5      	ldr	r5, [r4, #12]
 8003056:	6832      	ldr	r2, [r6, #0]
 8003058:	f003 0306 	and.w	r3, r3, #6
 800305c:	2b04      	cmp	r3, #4
 800305e:	bf08      	it	eq
 8003060:	1aad      	subeq	r5, r5, r2
 8003062:	68a3      	ldr	r3, [r4, #8]
 8003064:	6922      	ldr	r2, [r4, #16]
 8003066:	bf0c      	ite	eq
 8003068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800306c:	2500      	movne	r5, #0
 800306e:	4293      	cmp	r3, r2
 8003070:	bfc4      	itt	gt
 8003072:	1a9b      	subgt	r3, r3, r2
 8003074:	18ed      	addgt	r5, r5, r3
 8003076:	2600      	movs	r6, #0
 8003078:	341a      	adds	r4, #26
 800307a:	42b5      	cmp	r5, r6
 800307c:	d11a      	bne.n	80030b4 <_printf_common+0xc8>
 800307e:	2000      	movs	r0, #0
 8003080:	e008      	b.n	8003094 <_printf_common+0xa8>
 8003082:	2301      	movs	r3, #1
 8003084:	4652      	mov	r2, sl
 8003086:	4649      	mov	r1, r9
 8003088:	4638      	mov	r0, r7
 800308a:	47c0      	blx	r8
 800308c:	3001      	adds	r0, #1
 800308e:	d103      	bne.n	8003098 <_printf_common+0xac>
 8003090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003098:	3501      	adds	r5, #1
 800309a:	e7c6      	b.n	800302a <_printf_common+0x3e>
 800309c:	18e1      	adds	r1, r4, r3
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	2030      	movs	r0, #48	; 0x30
 80030a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030a6:	4422      	add	r2, r4
 80030a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030b0:	3302      	adds	r3, #2
 80030b2:	e7c7      	b.n	8003044 <_printf_common+0x58>
 80030b4:	2301      	movs	r3, #1
 80030b6:	4622      	mov	r2, r4
 80030b8:	4649      	mov	r1, r9
 80030ba:	4638      	mov	r0, r7
 80030bc:	47c0      	blx	r8
 80030be:	3001      	adds	r0, #1
 80030c0:	d0e6      	beq.n	8003090 <_printf_common+0xa4>
 80030c2:	3601      	adds	r6, #1
 80030c4:	e7d9      	b.n	800307a <_printf_common+0x8e>
	...

080030c8 <_printf_i>:
 80030c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030cc:	7e0f      	ldrb	r7, [r1, #24]
 80030ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80030d0:	2f78      	cmp	r7, #120	; 0x78
 80030d2:	4691      	mov	r9, r2
 80030d4:	4680      	mov	r8, r0
 80030d6:	460c      	mov	r4, r1
 80030d8:	469a      	mov	sl, r3
 80030da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030de:	d807      	bhi.n	80030f0 <_printf_i+0x28>
 80030e0:	2f62      	cmp	r7, #98	; 0x62
 80030e2:	d80a      	bhi.n	80030fa <_printf_i+0x32>
 80030e4:	2f00      	cmp	r7, #0
 80030e6:	f000 80d8 	beq.w	800329a <_printf_i+0x1d2>
 80030ea:	2f58      	cmp	r7, #88	; 0x58
 80030ec:	f000 80a3 	beq.w	8003236 <_printf_i+0x16e>
 80030f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030f8:	e03a      	b.n	8003170 <_printf_i+0xa8>
 80030fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030fe:	2b15      	cmp	r3, #21
 8003100:	d8f6      	bhi.n	80030f0 <_printf_i+0x28>
 8003102:	a101      	add	r1, pc, #4	; (adr r1, 8003108 <_printf_i+0x40>)
 8003104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003108:	08003161 	.word	0x08003161
 800310c:	08003175 	.word	0x08003175
 8003110:	080030f1 	.word	0x080030f1
 8003114:	080030f1 	.word	0x080030f1
 8003118:	080030f1 	.word	0x080030f1
 800311c:	080030f1 	.word	0x080030f1
 8003120:	08003175 	.word	0x08003175
 8003124:	080030f1 	.word	0x080030f1
 8003128:	080030f1 	.word	0x080030f1
 800312c:	080030f1 	.word	0x080030f1
 8003130:	080030f1 	.word	0x080030f1
 8003134:	08003281 	.word	0x08003281
 8003138:	080031a5 	.word	0x080031a5
 800313c:	08003263 	.word	0x08003263
 8003140:	080030f1 	.word	0x080030f1
 8003144:	080030f1 	.word	0x080030f1
 8003148:	080032a3 	.word	0x080032a3
 800314c:	080030f1 	.word	0x080030f1
 8003150:	080031a5 	.word	0x080031a5
 8003154:	080030f1 	.word	0x080030f1
 8003158:	080030f1 	.word	0x080030f1
 800315c:	0800326b 	.word	0x0800326b
 8003160:	682b      	ldr	r3, [r5, #0]
 8003162:	1d1a      	adds	r2, r3, #4
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	602a      	str	r2, [r5, #0]
 8003168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800316c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003170:	2301      	movs	r3, #1
 8003172:	e0a3      	b.n	80032bc <_printf_i+0x1f4>
 8003174:	6820      	ldr	r0, [r4, #0]
 8003176:	6829      	ldr	r1, [r5, #0]
 8003178:	0606      	lsls	r6, r0, #24
 800317a:	f101 0304 	add.w	r3, r1, #4
 800317e:	d50a      	bpl.n	8003196 <_printf_i+0xce>
 8003180:	680e      	ldr	r6, [r1, #0]
 8003182:	602b      	str	r3, [r5, #0]
 8003184:	2e00      	cmp	r6, #0
 8003186:	da03      	bge.n	8003190 <_printf_i+0xc8>
 8003188:	232d      	movs	r3, #45	; 0x2d
 800318a:	4276      	negs	r6, r6
 800318c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003190:	485e      	ldr	r0, [pc, #376]	; (800330c <_printf_i+0x244>)
 8003192:	230a      	movs	r3, #10
 8003194:	e019      	b.n	80031ca <_printf_i+0x102>
 8003196:	680e      	ldr	r6, [r1, #0]
 8003198:	602b      	str	r3, [r5, #0]
 800319a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800319e:	bf18      	it	ne
 80031a0:	b236      	sxthne	r6, r6
 80031a2:	e7ef      	b.n	8003184 <_printf_i+0xbc>
 80031a4:	682b      	ldr	r3, [r5, #0]
 80031a6:	6820      	ldr	r0, [r4, #0]
 80031a8:	1d19      	adds	r1, r3, #4
 80031aa:	6029      	str	r1, [r5, #0]
 80031ac:	0601      	lsls	r1, r0, #24
 80031ae:	d501      	bpl.n	80031b4 <_printf_i+0xec>
 80031b0:	681e      	ldr	r6, [r3, #0]
 80031b2:	e002      	b.n	80031ba <_printf_i+0xf2>
 80031b4:	0646      	lsls	r6, r0, #25
 80031b6:	d5fb      	bpl.n	80031b0 <_printf_i+0xe8>
 80031b8:	881e      	ldrh	r6, [r3, #0]
 80031ba:	4854      	ldr	r0, [pc, #336]	; (800330c <_printf_i+0x244>)
 80031bc:	2f6f      	cmp	r7, #111	; 0x6f
 80031be:	bf0c      	ite	eq
 80031c0:	2308      	moveq	r3, #8
 80031c2:	230a      	movne	r3, #10
 80031c4:	2100      	movs	r1, #0
 80031c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031ca:	6865      	ldr	r5, [r4, #4]
 80031cc:	60a5      	str	r5, [r4, #8]
 80031ce:	2d00      	cmp	r5, #0
 80031d0:	bfa2      	ittt	ge
 80031d2:	6821      	ldrge	r1, [r4, #0]
 80031d4:	f021 0104 	bicge.w	r1, r1, #4
 80031d8:	6021      	strge	r1, [r4, #0]
 80031da:	b90e      	cbnz	r6, 80031e0 <_printf_i+0x118>
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d04d      	beq.n	800327c <_printf_i+0x1b4>
 80031e0:	4615      	mov	r5, r2
 80031e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80031e6:	fb03 6711 	mls	r7, r3, r1, r6
 80031ea:	5dc7      	ldrb	r7, [r0, r7]
 80031ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031f0:	4637      	mov	r7, r6
 80031f2:	42bb      	cmp	r3, r7
 80031f4:	460e      	mov	r6, r1
 80031f6:	d9f4      	bls.n	80031e2 <_printf_i+0x11a>
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d10b      	bne.n	8003214 <_printf_i+0x14c>
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	07de      	lsls	r6, r3, #31
 8003200:	d508      	bpl.n	8003214 <_printf_i+0x14c>
 8003202:	6923      	ldr	r3, [r4, #16]
 8003204:	6861      	ldr	r1, [r4, #4]
 8003206:	4299      	cmp	r1, r3
 8003208:	bfde      	ittt	le
 800320a:	2330      	movle	r3, #48	; 0x30
 800320c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003210:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003214:	1b52      	subs	r2, r2, r5
 8003216:	6122      	str	r2, [r4, #16]
 8003218:	f8cd a000 	str.w	sl, [sp]
 800321c:	464b      	mov	r3, r9
 800321e:	aa03      	add	r2, sp, #12
 8003220:	4621      	mov	r1, r4
 8003222:	4640      	mov	r0, r8
 8003224:	f7ff fee2 	bl	8002fec <_printf_common>
 8003228:	3001      	adds	r0, #1
 800322a:	d14c      	bne.n	80032c6 <_printf_i+0x1fe>
 800322c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003230:	b004      	add	sp, #16
 8003232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003236:	4835      	ldr	r0, [pc, #212]	; (800330c <_printf_i+0x244>)
 8003238:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800323c:	6829      	ldr	r1, [r5, #0]
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	f851 6b04 	ldr.w	r6, [r1], #4
 8003244:	6029      	str	r1, [r5, #0]
 8003246:	061d      	lsls	r5, r3, #24
 8003248:	d514      	bpl.n	8003274 <_printf_i+0x1ac>
 800324a:	07df      	lsls	r7, r3, #31
 800324c:	bf44      	itt	mi
 800324e:	f043 0320 	orrmi.w	r3, r3, #32
 8003252:	6023      	strmi	r3, [r4, #0]
 8003254:	b91e      	cbnz	r6, 800325e <_printf_i+0x196>
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	f023 0320 	bic.w	r3, r3, #32
 800325c:	6023      	str	r3, [r4, #0]
 800325e:	2310      	movs	r3, #16
 8003260:	e7b0      	b.n	80031c4 <_printf_i+0xfc>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	f043 0320 	orr.w	r3, r3, #32
 8003268:	6023      	str	r3, [r4, #0]
 800326a:	2378      	movs	r3, #120	; 0x78
 800326c:	4828      	ldr	r0, [pc, #160]	; (8003310 <_printf_i+0x248>)
 800326e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003272:	e7e3      	b.n	800323c <_printf_i+0x174>
 8003274:	0659      	lsls	r1, r3, #25
 8003276:	bf48      	it	mi
 8003278:	b2b6      	uxthmi	r6, r6
 800327a:	e7e6      	b.n	800324a <_printf_i+0x182>
 800327c:	4615      	mov	r5, r2
 800327e:	e7bb      	b.n	80031f8 <_printf_i+0x130>
 8003280:	682b      	ldr	r3, [r5, #0]
 8003282:	6826      	ldr	r6, [r4, #0]
 8003284:	6961      	ldr	r1, [r4, #20]
 8003286:	1d18      	adds	r0, r3, #4
 8003288:	6028      	str	r0, [r5, #0]
 800328a:	0635      	lsls	r5, r6, #24
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	d501      	bpl.n	8003294 <_printf_i+0x1cc>
 8003290:	6019      	str	r1, [r3, #0]
 8003292:	e002      	b.n	800329a <_printf_i+0x1d2>
 8003294:	0670      	lsls	r0, r6, #25
 8003296:	d5fb      	bpl.n	8003290 <_printf_i+0x1c8>
 8003298:	8019      	strh	r1, [r3, #0]
 800329a:	2300      	movs	r3, #0
 800329c:	6123      	str	r3, [r4, #16]
 800329e:	4615      	mov	r5, r2
 80032a0:	e7ba      	b.n	8003218 <_printf_i+0x150>
 80032a2:	682b      	ldr	r3, [r5, #0]
 80032a4:	1d1a      	adds	r2, r3, #4
 80032a6:	602a      	str	r2, [r5, #0]
 80032a8:	681d      	ldr	r5, [r3, #0]
 80032aa:	6862      	ldr	r2, [r4, #4]
 80032ac:	2100      	movs	r1, #0
 80032ae:	4628      	mov	r0, r5
 80032b0:	f7fc ff96 	bl	80001e0 <memchr>
 80032b4:	b108      	cbz	r0, 80032ba <_printf_i+0x1f2>
 80032b6:	1b40      	subs	r0, r0, r5
 80032b8:	6060      	str	r0, [r4, #4]
 80032ba:	6863      	ldr	r3, [r4, #4]
 80032bc:	6123      	str	r3, [r4, #16]
 80032be:	2300      	movs	r3, #0
 80032c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032c4:	e7a8      	b.n	8003218 <_printf_i+0x150>
 80032c6:	6923      	ldr	r3, [r4, #16]
 80032c8:	462a      	mov	r2, r5
 80032ca:	4649      	mov	r1, r9
 80032cc:	4640      	mov	r0, r8
 80032ce:	47d0      	blx	sl
 80032d0:	3001      	adds	r0, #1
 80032d2:	d0ab      	beq.n	800322c <_printf_i+0x164>
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	079b      	lsls	r3, r3, #30
 80032d8:	d413      	bmi.n	8003302 <_printf_i+0x23a>
 80032da:	68e0      	ldr	r0, [r4, #12]
 80032dc:	9b03      	ldr	r3, [sp, #12]
 80032de:	4298      	cmp	r0, r3
 80032e0:	bfb8      	it	lt
 80032e2:	4618      	movlt	r0, r3
 80032e4:	e7a4      	b.n	8003230 <_printf_i+0x168>
 80032e6:	2301      	movs	r3, #1
 80032e8:	4632      	mov	r2, r6
 80032ea:	4649      	mov	r1, r9
 80032ec:	4640      	mov	r0, r8
 80032ee:	47d0      	blx	sl
 80032f0:	3001      	adds	r0, #1
 80032f2:	d09b      	beq.n	800322c <_printf_i+0x164>
 80032f4:	3501      	adds	r5, #1
 80032f6:	68e3      	ldr	r3, [r4, #12]
 80032f8:	9903      	ldr	r1, [sp, #12]
 80032fa:	1a5b      	subs	r3, r3, r1
 80032fc:	42ab      	cmp	r3, r5
 80032fe:	dcf2      	bgt.n	80032e6 <_printf_i+0x21e>
 8003300:	e7eb      	b.n	80032da <_printf_i+0x212>
 8003302:	2500      	movs	r5, #0
 8003304:	f104 0619 	add.w	r6, r4, #25
 8003308:	e7f5      	b.n	80032f6 <_printf_i+0x22e>
 800330a:	bf00      	nop
 800330c:	080039d5 	.word	0x080039d5
 8003310:	080039e6 	.word	0x080039e6

08003314 <_sbrk_r>:
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	4d06      	ldr	r5, [pc, #24]	; (8003330 <_sbrk_r+0x1c>)
 8003318:	2300      	movs	r3, #0
 800331a:	4604      	mov	r4, r0
 800331c:	4608      	mov	r0, r1
 800331e:	602b      	str	r3, [r5, #0]
 8003320:	f7fd fbb6 	bl	8000a90 <_sbrk>
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	d102      	bne.n	800332e <_sbrk_r+0x1a>
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	b103      	cbz	r3, 800332e <_sbrk_r+0x1a>
 800332c:	6023      	str	r3, [r4, #0]
 800332e:	bd38      	pop	{r3, r4, r5, pc}
 8003330:	200005b8 	.word	0x200005b8

08003334 <__sread>:
 8003334:	b510      	push	{r4, lr}
 8003336:	460c      	mov	r4, r1
 8003338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800333c:	f000 fab2 	bl	80038a4 <_read_r>
 8003340:	2800      	cmp	r0, #0
 8003342:	bfab      	itete	ge
 8003344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003346:	89a3      	ldrhlt	r3, [r4, #12]
 8003348:	181b      	addge	r3, r3, r0
 800334a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800334e:	bfac      	ite	ge
 8003350:	6563      	strge	r3, [r4, #84]	; 0x54
 8003352:	81a3      	strhlt	r3, [r4, #12]
 8003354:	bd10      	pop	{r4, pc}

08003356 <__swrite>:
 8003356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800335a:	461f      	mov	r7, r3
 800335c:	898b      	ldrh	r3, [r1, #12]
 800335e:	05db      	lsls	r3, r3, #23
 8003360:	4605      	mov	r5, r0
 8003362:	460c      	mov	r4, r1
 8003364:	4616      	mov	r6, r2
 8003366:	d505      	bpl.n	8003374 <__swrite+0x1e>
 8003368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800336c:	2302      	movs	r3, #2
 800336e:	2200      	movs	r2, #0
 8003370:	f000 f9c8 	bl	8003704 <_lseek_r>
 8003374:	89a3      	ldrh	r3, [r4, #12]
 8003376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800337a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800337e:	81a3      	strh	r3, [r4, #12]
 8003380:	4632      	mov	r2, r6
 8003382:	463b      	mov	r3, r7
 8003384:	4628      	mov	r0, r5
 8003386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800338a:	f000 b869 	b.w	8003460 <_write_r>

0800338e <__sseek>:
 800338e:	b510      	push	{r4, lr}
 8003390:	460c      	mov	r4, r1
 8003392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003396:	f000 f9b5 	bl	8003704 <_lseek_r>
 800339a:	1c43      	adds	r3, r0, #1
 800339c:	89a3      	ldrh	r3, [r4, #12]
 800339e:	bf15      	itete	ne
 80033a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80033a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80033a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80033aa:	81a3      	strheq	r3, [r4, #12]
 80033ac:	bf18      	it	ne
 80033ae:	81a3      	strhne	r3, [r4, #12]
 80033b0:	bd10      	pop	{r4, pc}

080033b2 <__sclose>:
 80033b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033b6:	f000 b8d3 	b.w	8003560 <_close_r>
	...

080033bc <__swbuf_r>:
 80033bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033be:	460e      	mov	r6, r1
 80033c0:	4614      	mov	r4, r2
 80033c2:	4605      	mov	r5, r0
 80033c4:	b118      	cbz	r0, 80033ce <__swbuf_r+0x12>
 80033c6:	6983      	ldr	r3, [r0, #24]
 80033c8:	b90b      	cbnz	r3, 80033ce <__swbuf_r+0x12>
 80033ca:	f7ff fb81 	bl	8002ad0 <__sinit>
 80033ce:	4b21      	ldr	r3, [pc, #132]	; (8003454 <__swbuf_r+0x98>)
 80033d0:	429c      	cmp	r4, r3
 80033d2:	d12b      	bne.n	800342c <__swbuf_r+0x70>
 80033d4:	686c      	ldr	r4, [r5, #4]
 80033d6:	69a3      	ldr	r3, [r4, #24]
 80033d8:	60a3      	str	r3, [r4, #8]
 80033da:	89a3      	ldrh	r3, [r4, #12]
 80033dc:	071a      	lsls	r2, r3, #28
 80033de:	d52f      	bpl.n	8003440 <__swbuf_r+0x84>
 80033e0:	6923      	ldr	r3, [r4, #16]
 80033e2:	b36b      	cbz	r3, 8003440 <__swbuf_r+0x84>
 80033e4:	6923      	ldr	r3, [r4, #16]
 80033e6:	6820      	ldr	r0, [r4, #0]
 80033e8:	1ac0      	subs	r0, r0, r3
 80033ea:	6963      	ldr	r3, [r4, #20]
 80033ec:	b2f6      	uxtb	r6, r6
 80033ee:	4283      	cmp	r3, r0
 80033f0:	4637      	mov	r7, r6
 80033f2:	dc04      	bgt.n	80033fe <__swbuf_r+0x42>
 80033f4:	4621      	mov	r1, r4
 80033f6:	4628      	mov	r0, r5
 80033f8:	f000 f948 	bl	800368c <_fflush_r>
 80033fc:	bb30      	cbnz	r0, 800344c <__swbuf_r+0x90>
 80033fe:	68a3      	ldr	r3, [r4, #8]
 8003400:	3b01      	subs	r3, #1
 8003402:	60a3      	str	r3, [r4, #8]
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	6022      	str	r2, [r4, #0]
 800340a:	701e      	strb	r6, [r3, #0]
 800340c:	6963      	ldr	r3, [r4, #20]
 800340e:	3001      	adds	r0, #1
 8003410:	4283      	cmp	r3, r0
 8003412:	d004      	beq.n	800341e <__swbuf_r+0x62>
 8003414:	89a3      	ldrh	r3, [r4, #12]
 8003416:	07db      	lsls	r3, r3, #31
 8003418:	d506      	bpl.n	8003428 <__swbuf_r+0x6c>
 800341a:	2e0a      	cmp	r6, #10
 800341c:	d104      	bne.n	8003428 <__swbuf_r+0x6c>
 800341e:	4621      	mov	r1, r4
 8003420:	4628      	mov	r0, r5
 8003422:	f000 f933 	bl	800368c <_fflush_r>
 8003426:	b988      	cbnz	r0, 800344c <__swbuf_r+0x90>
 8003428:	4638      	mov	r0, r7
 800342a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <__swbuf_r+0x9c>)
 800342e:	429c      	cmp	r4, r3
 8003430:	d101      	bne.n	8003436 <__swbuf_r+0x7a>
 8003432:	68ac      	ldr	r4, [r5, #8]
 8003434:	e7cf      	b.n	80033d6 <__swbuf_r+0x1a>
 8003436:	4b09      	ldr	r3, [pc, #36]	; (800345c <__swbuf_r+0xa0>)
 8003438:	429c      	cmp	r4, r3
 800343a:	bf08      	it	eq
 800343c:	68ec      	ldreq	r4, [r5, #12]
 800343e:	e7ca      	b.n	80033d6 <__swbuf_r+0x1a>
 8003440:	4621      	mov	r1, r4
 8003442:	4628      	mov	r0, r5
 8003444:	f000 f81e 	bl	8003484 <__swsetup_r>
 8003448:	2800      	cmp	r0, #0
 800344a:	d0cb      	beq.n	80033e4 <__swbuf_r+0x28>
 800344c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003450:	e7ea      	b.n	8003428 <__swbuf_r+0x6c>
 8003452:	bf00      	nop
 8003454:	08003984 	.word	0x08003984
 8003458:	080039a4 	.word	0x080039a4
 800345c:	08003964 	.word	0x08003964

08003460 <_write_r>:
 8003460:	b538      	push	{r3, r4, r5, lr}
 8003462:	4d07      	ldr	r5, [pc, #28]	; (8003480 <_write_r+0x20>)
 8003464:	4604      	mov	r4, r0
 8003466:	4608      	mov	r0, r1
 8003468:	4611      	mov	r1, r2
 800346a:	2200      	movs	r2, #0
 800346c:	602a      	str	r2, [r5, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	f7fd fabd 	bl	80009ee <_write>
 8003474:	1c43      	adds	r3, r0, #1
 8003476:	d102      	bne.n	800347e <_write_r+0x1e>
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	b103      	cbz	r3, 800347e <_write_r+0x1e>
 800347c:	6023      	str	r3, [r4, #0]
 800347e:	bd38      	pop	{r3, r4, r5, pc}
 8003480:	200005b8 	.word	0x200005b8

08003484 <__swsetup_r>:
 8003484:	4b32      	ldr	r3, [pc, #200]	; (8003550 <__swsetup_r+0xcc>)
 8003486:	b570      	push	{r4, r5, r6, lr}
 8003488:	681d      	ldr	r5, [r3, #0]
 800348a:	4606      	mov	r6, r0
 800348c:	460c      	mov	r4, r1
 800348e:	b125      	cbz	r5, 800349a <__swsetup_r+0x16>
 8003490:	69ab      	ldr	r3, [r5, #24]
 8003492:	b913      	cbnz	r3, 800349a <__swsetup_r+0x16>
 8003494:	4628      	mov	r0, r5
 8003496:	f7ff fb1b 	bl	8002ad0 <__sinit>
 800349a:	4b2e      	ldr	r3, [pc, #184]	; (8003554 <__swsetup_r+0xd0>)
 800349c:	429c      	cmp	r4, r3
 800349e:	d10f      	bne.n	80034c0 <__swsetup_r+0x3c>
 80034a0:	686c      	ldr	r4, [r5, #4]
 80034a2:	89a3      	ldrh	r3, [r4, #12]
 80034a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034a8:	0719      	lsls	r1, r3, #28
 80034aa:	d42c      	bmi.n	8003506 <__swsetup_r+0x82>
 80034ac:	06dd      	lsls	r5, r3, #27
 80034ae:	d411      	bmi.n	80034d4 <__swsetup_r+0x50>
 80034b0:	2309      	movs	r3, #9
 80034b2:	6033      	str	r3, [r6, #0]
 80034b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034b8:	81a3      	strh	r3, [r4, #12]
 80034ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034be:	e03e      	b.n	800353e <__swsetup_r+0xba>
 80034c0:	4b25      	ldr	r3, [pc, #148]	; (8003558 <__swsetup_r+0xd4>)
 80034c2:	429c      	cmp	r4, r3
 80034c4:	d101      	bne.n	80034ca <__swsetup_r+0x46>
 80034c6:	68ac      	ldr	r4, [r5, #8]
 80034c8:	e7eb      	b.n	80034a2 <__swsetup_r+0x1e>
 80034ca:	4b24      	ldr	r3, [pc, #144]	; (800355c <__swsetup_r+0xd8>)
 80034cc:	429c      	cmp	r4, r3
 80034ce:	bf08      	it	eq
 80034d0:	68ec      	ldreq	r4, [r5, #12]
 80034d2:	e7e6      	b.n	80034a2 <__swsetup_r+0x1e>
 80034d4:	0758      	lsls	r0, r3, #29
 80034d6:	d512      	bpl.n	80034fe <__swsetup_r+0x7a>
 80034d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034da:	b141      	cbz	r1, 80034ee <__swsetup_r+0x6a>
 80034dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034e0:	4299      	cmp	r1, r3
 80034e2:	d002      	beq.n	80034ea <__swsetup_r+0x66>
 80034e4:	4630      	mov	r0, r6
 80034e6:	f000 f991 	bl	800380c <_free_r>
 80034ea:	2300      	movs	r3, #0
 80034ec:	6363      	str	r3, [r4, #52]	; 0x34
 80034ee:	89a3      	ldrh	r3, [r4, #12]
 80034f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034f4:	81a3      	strh	r3, [r4, #12]
 80034f6:	2300      	movs	r3, #0
 80034f8:	6063      	str	r3, [r4, #4]
 80034fa:	6923      	ldr	r3, [r4, #16]
 80034fc:	6023      	str	r3, [r4, #0]
 80034fe:	89a3      	ldrh	r3, [r4, #12]
 8003500:	f043 0308 	orr.w	r3, r3, #8
 8003504:	81a3      	strh	r3, [r4, #12]
 8003506:	6923      	ldr	r3, [r4, #16]
 8003508:	b94b      	cbnz	r3, 800351e <__swsetup_r+0x9a>
 800350a:	89a3      	ldrh	r3, [r4, #12]
 800350c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003514:	d003      	beq.n	800351e <__swsetup_r+0x9a>
 8003516:	4621      	mov	r1, r4
 8003518:	4630      	mov	r0, r6
 800351a:	f000 f92b 	bl	8003774 <__smakebuf_r>
 800351e:	89a0      	ldrh	r0, [r4, #12]
 8003520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003524:	f010 0301 	ands.w	r3, r0, #1
 8003528:	d00a      	beq.n	8003540 <__swsetup_r+0xbc>
 800352a:	2300      	movs	r3, #0
 800352c:	60a3      	str	r3, [r4, #8]
 800352e:	6963      	ldr	r3, [r4, #20]
 8003530:	425b      	negs	r3, r3
 8003532:	61a3      	str	r3, [r4, #24]
 8003534:	6923      	ldr	r3, [r4, #16]
 8003536:	b943      	cbnz	r3, 800354a <__swsetup_r+0xc6>
 8003538:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800353c:	d1ba      	bne.n	80034b4 <__swsetup_r+0x30>
 800353e:	bd70      	pop	{r4, r5, r6, pc}
 8003540:	0781      	lsls	r1, r0, #30
 8003542:	bf58      	it	pl
 8003544:	6963      	ldrpl	r3, [r4, #20]
 8003546:	60a3      	str	r3, [r4, #8]
 8003548:	e7f4      	b.n	8003534 <__swsetup_r+0xb0>
 800354a:	2000      	movs	r0, #0
 800354c:	e7f7      	b.n	800353e <__swsetup_r+0xba>
 800354e:	bf00      	nop
 8003550:	2000000c 	.word	0x2000000c
 8003554:	08003984 	.word	0x08003984
 8003558:	080039a4 	.word	0x080039a4
 800355c:	08003964 	.word	0x08003964

08003560 <_close_r>:
 8003560:	b538      	push	{r3, r4, r5, lr}
 8003562:	4d06      	ldr	r5, [pc, #24]	; (800357c <_close_r+0x1c>)
 8003564:	2300      	movs	r3, #0
 8003566:	4604      	mov	r4, r0
 8003568:	4608      	mov	r0, r1
 800356a:	602b      	str	r3, [r5, #0]
 800356c:	f7fd fa5b 	bl	8000a26 <_close>
 8003570:	1c43      	adds	r3, r0, #1
 8003572:	d102      	bne.n	800357a <_close_r+0x1a>
 8003574:	682b      	ldr	r3, [r5, #0]
 8003576:	b103      	cbz	r3, 800357a <_close_r+0x1a>
 8003578:	6023      	str	r3, [r4, #0]
 800357a:	bd38      	pop	{r3, r4, r5, pc}
 800357c:	200005b8 	.word	0x200005b8

08003580 <__sflush_r>:
 8003580:	898a      	ldrh	r2, [r1, #12]
 8003582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003586:	4605      	mov	r5, r0
 8003588:	0710      	lsls	r0, r2, #28
 800358a:	460c      	mov	r4, r1
 800358c:	d458      	bmi.n	8003640 <__sflush_r+0xc0>
 800358e:	684b      	ldr	r3, [r1, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	dc05      	bgt.n	80035a0 <__sflush_r+0x20>
 8003594:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	dc02      	bgt.n	80035a0 <__sflush_r+0x20>
 800359a:	2000      	movs	r0, #0
 800359c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035a2:	2e00      	cmp	r6, #0
 80035a4:	d0f9      	beq.n	800359a <__sflush_r+0x1a>
 80035a6:	2300      	movs	r3, #0
 80035a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035ac:	682f      	ldr	r7, [r5, #0]
 80035ae:	602b      	str	r3, [r5, #0]
 80035b0:	d032      	beq.n	8003618 <__sflush_r+0x98>
 80035b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	075a      	lsls	r2, r3, #29
 80035b8:	d505      	bpl.n	80035c6 <__sflush_r+0x46>
 80035ba:	6863      	ldr	r3, [r4, #4]
 80035bc:	1ac0      	subs	r0, r0, r3
 80035be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035c0:	b10b      	cbz	r3, 80035c6 <__sflush_r+0x46>
 80035c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035c4:	1ac0      	subs	r0, r0, r3
 80035c6:	2300      	movs	r3, #0
 80035c8:	4602      	mov	r2, r0
 80035ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035cc:	6a21      	ldr	r1, [r4, #32]
 80035ce:	4628      	mov	r0, r5
 80035d0:	47b0      	blx	r6
 80035d2:	1c43      	adds	r3, r0, #1
 80035d4:	89a3      	ldrh	r3, [r4, #12]
 80035d6:	d106      	bne.n	80035e6 <__sflush_r+0x66>
 80035d8:	6829      	ldr	r1, [r5, #0]
 80035da:	291d      	cmp	r1, #29
 80035dc:	d82c      	bhi.n	8003638 <__sflush_r+0xb8>
 80035de:	4a2a      	ldr	r2, [pc, #168]	; (8003688 <__sflush_r+0x108>)
 80035e0:	40ca      	lsrs	r2, r1
 80035e2:	07d6      	lsls	r6, r2, #31
 80035e4:	d528      	bpl.n	8003638 <__sflush_r+0xb8>
 80035e6:	2200      	movs	r2, #0
 80035e8:	6062      	str	r2, [r4, #4]
 80035ea:	04d9      	lsls	r1, r3, #19
 80035ec:	6922      	ldr	r2, [r4, #16]
 80035ee:	6022      	str	r2, [r4, #0]
 80035f0:	d504      	bpl.n	80035fc <__sflush_r+0x7c>
 80035f2:	1c42      	adds	r2, r0, #1
 80035f4:	d101      	bne.n	80035fa <__sflush_r+0x7a>
 80035f6:	682b      	ldr	r3, [r5, #0]
 80035f8:	b903      	cbnz	r3, 80035fc <__sflush_r+0x7c>
 80035fa:	6560      	str	r0, [r4, #84]	; 0x54
 80035fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035fe:	602f      	str	r7, [r5, #0]
 8003600:	2900      	cmp	r1, #0
 8003602:	d0ca      	beq.n	800359a <__sflush_r+0x1a>
 8003604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003608:	4299      	cmp	r1, r3
 800360a:	d002      	beq.n	8003612 <__sflush_r+0x92>
 800360c:	4628      	mov	r0, r5
 800360e:	f000 f8fd 	bl	800380c <_free_r>
 8003612:	2000      	movs	r0, #0
 8003614:	6360      	str	r0, [r4, #52]	; 0x34
 8003616:	e7c1      	b.n	800359c <__sflush_r+0x1c>
 8003618:	6a21      	ldr	r1, [r4, #32]
 800361a:	2301      	movs	r3, #1
 800361c:	4628      	mov	r0, r5
 800361e:	47b0      	blx	r6
 8003620:	1c41      	adds	r1, r0, #1
 8003622:	d1c7      	bne.n	80035b4 <__sflush_r+0x34>
 8003624:	682b      	ldr	r3, [r5, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0c4      	beq.n	80035b4 <__sflush_r+0x34>
 800362a:	2b1d      	cmp	r3, #29
 800362c:	d001      	beq.n	8003632 <__sflush_r+0xb2>
 800362e:	2b16      	cmp	r3, #22
 8003630:	d101      	bne.n	8003636 <__sflush_r+0xb6>
 8003632:	602f      	str	r7, [r5, #0]
 8003634:	e7b1      	b.n	800359a <__sflush_r+0x1a>
 8003636:	89a3      	ldrh	r3, [r4, #12]
 8003638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800363c:	81a3      	strh	r3, [r4, #12]
 800363e:	e7ad      	b.n	800359c <__sflush_r+0x1c>
 8003640:	690f      	ldr	r7, [r1, #16]
 8003642:	2f00      	cmp	r7, #0
 8003644:	d0a9      	beq.n	800359a <__sflush_r+0x1a>
 8003646:	0793      	lsls	r3, r2, #30
 8003648:	680e      	ldr	r6, [r1, #0]
 800364a:	bf08      	it	eq
 800364c:	694b      	ldreq	r3, [r1, #20]
 800364e:	600f      	str	r7, [r1, #0]
 8003650:	bf18      	it	ne
 8003652:	2300      	movne	r3, #0
 8003654:	eba6 0807 	sub.w	r8, r6, r7
 8003658:	608b      	str	r3, [r1, #8]
 800365a:	f1b8 0f00 	cmp.w	r8, #0
 800365e:	dd9c      	ble.n	800359a <__sflush_r+0x1a>
 8003660:	6a21      	ldr	r1, [r4, #32]
 8003662:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003664:	4643      	mov	r3, r8
 8003666:	463a      	mov	r2, r7
 8003668:	4628      	mov	r0, r5
 800366a:	47b0      	blx	r6
 800366c:	2800      	cmp	r0, #0
 800366e:	dc06      	bgt.n	800367e <__sflush_r+0xfe>
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003676:	81a3      	strh	r3, [r4, #12]
 8003678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800367c:	e78e      	b.n	800359c <__sflush_r+0x1c>
 800367e:	4407      	add	r7, r0
 8003680:	eba8 0800 	sub.w	r8, r8, r0
 8003684:	e7e9      	b.n	800365a <__sflush_r+0xda>
 8003686:	bf00      	nop
 8003688:	20400001 	.word	0x20400001

0800368c <_fflush_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	690b      	ldr	r3, [r1, #16]
 8003690:	4605      	mov	r5, r0
 8003692:	460c      	mov	r4, r1
 8003694:	b913      	cbnz	r3, 800369c <_fflush_r+0x10>
 8003696:	2500      	movs	r5, #0
 8003698:	4628      	mov	r0, r5
 800369a:	bd38      	pop	{r3, r4, r5, pc}
 800369c:	b118      	cbz	r0, 80036a6 <_fflush_r+0x1a>
 800369e:	6983      	ldr	r3, [r0, #24]
 80036a0:	b90b      	cbnz	r3, 80036a6 <_fflush_r+0x1a>
 80036a2:	f7ff fa15 	bl	8002ad0 <__sinit>
 80036a6:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <_fflush_r+0x6c>)
 80036a8:	429c      	cmp	r4, r3
 80036aa:	d11b      	bne.n	80036e4 <_fflush_r+0x58>
 80036ac:	686c      	ldr	r4, [r5, #4]
 80036ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0ef      	beq.n	8003696 <_fflush_r+0xa>
 80036b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036b8:	07d0      	lsls	r0, r2, #31
 80036ba:	d404      	bmi.n	80036c6 <_fflush_r+0x3a>
 80036bc:	0599      	lsls	r1, r3, #22
 80036be:	d402      	bmi.n	80036c6 <_fflush_r+0x3a>
 80036c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036c2:	f7ff faa3 	bl	8002c0c <__retarget_lock_acquire_recursive>
 80036c6:	4628      	mov	r0, r5
 80036c8:	4621      	mov	r1, r4
 80036ca:	f7ff ff59 	bl	8003580 <__sflush_r>
 80036ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036d0:	07da      	lsls	r2, r3, #31
 80036d2:	4605      	mov	r5, r0
 80036d4:	d4e0      	bmi.n	8003698 <_fflush_r+0xc>
 80036d6:	89a3      	ldrh	r3, [r4, #12]
 80036d8:	059b      	lsls	r3, r3, #22
 80036da:	d4dd      	bmi.n	8003698 <_fflush_r+0xc>
 80036dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036de:	f7ff fa96 	bl	8002c0e <__retarget_lock_release_recursive>
 80036e2:	e7d9      	b.n	8003698 <_fflush_r+0xc>
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <_fflush_r+0x70>)
 80036e6:	429c      	cmp	r4, r3
 80036e8:	d101      	bne.n	80036ee <_fflush_r+0x62>
 80036ea:	68ac      	ldr	r4, [r5, #8]
 80036ec:	e7df      	b.n	80036ae <_fflush_r+0x22>
 80036ee:	4b04      	ldr	r3, [pc, #16]	; (8003700 <_fflush_r+0x74>)
 80036f0:	429c      	cmp	r4, r3
 80036f2:	bf08      	it	eq
 80036f4:	68ec      	ldreq	r4, [r5, #12]
 80036f6:	e7da      	b.n	80036ae <_fflush_r+0x22>
 80036f8:	08003984 	.word	0x08003984
 80036fc:	080039a4 	.word	0x080039a4
 8003700:	08003964 	.word	0x08003964

08003704 <_lseek_r>:
 8003704:	b538      	push	{r3, r4, r5, lr}
 8003706:	4d07      	ldr	r5, [pc, #28]	; (8003724 <_lseek_r+0x20>)
 8003708:	4604      	mov	r4, r0
 800370a:	4608      	mov	r0, r1
 800370c:	4611      	mov	r1, r2
 800370e:	2200      	movs	r2, #0
 8003710:	602a      	str	r2, [r5, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	f7fd f9ae 	bl	8000a74 <_lseek>
 8003718:	1c43      	adds	r3, r0, #1
 800371a:	d102      	bne.n	8003722 <_lseek_r+0x1e>
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	b103      	cbz	r3, 8003722 <_lseek_r+0x1e>
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	bd38      	pop	{r3, r4, r5, pc}
 8003724:	200005b8 	.word	0x200005b8

08003728 <__swhatbuf_r>:
 8003728:	b570      	push	{r4, r5, r6, lr}
 800372a:	460e      	mov	r6, r1
 800372c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003730:	2900      	cmp	r1, #0
 8003732:	b096      	sub	sp, #88	; 0x58
 8003734:	4614      	mov	r4, r2
 8003736:	461d      	mov	r5, r3
 8003738:	da08      	bge.n	800374c <__swhatbuf_r+0x24>
 800373a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	602a      	str	r2, [r5, #0]
 8003742:	061a      	lsls	r2, r3, #24
 8003744:	d410      	bmi.n	8003768 <__swhatbuf_r+0x40>
 8003746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800374a:	e00e      	b.n	800376a <__swhatbuf_r+0x42>
 800374c:	466a      	mov	r2, sp
 800374e:	f000 f8bb 	bl	80038c8 <_fstat_r>
 8003752:	2800      	cmp	r0, #0
 8003754:	dbf1      	blt.n	800373a <__swhatbuf_r+0x12>
 8003756:	9a01      	ldr	r2, [sp, #4]
 8003758:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800375c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003760:	425a      	negs	r2, r3
 8003762:	415a      	adcs	r2, r3
 8003764:	602a      	str	r2, [r5, #0]
 8003766:	e7ee      	b.n	8003746 <__swhatbuf_r+0x1e>
 8003768:	2340      	movs	r3, #64	; 0x40
 800376a:	2000      	movs	r0, #0
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	b016      	add	sp, #88	; 0x58
 8003770:	bd70      	pop	{r4, r5, r6, pc}
	...

08003774 <__smakebuf_r>:
 8003774:	898b      	ldrh	r3, [r1, #12]
 8003776:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003778:	079d      	lsls	r5, r3, #30
 800377a:	4606      	mov	r6, r0
 800377c:	460c      	mov	r4, r1
 800377e:	d507      	bpl.n	8003790 <__smakebuf_r+0x1c>
 8003780:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003784:	6023      	str	r3, [r4, #0]
 8003786:	6123      	str	r3, [r4, #16]
 8003788:	2301      	movs	r3, #1
 800378a:	6163      	str	r3, [r4, #20]
 800378c:	b002      	add	sp, #8
 800378e:	bd70      	pop	{r4, r5, r6, pc}
 8003790:	ab01      	add	r3, sp, #4
 8003792:	466a      	mov	r2, sp
 8003794:	f7ff ffc8 	bl	8003728 <__swhatbuf_r>
 8003798:	9900      	ldr	r1, [sp, #0]
 800379a:	4605      	mov	r5, r0
 800379c:	4630      	mov	r0, r6
 800379e:	f7ff fa57 	bl	8002c50 <_malloc_r>
 80037a2:	b948      	cbnz	r0, 80037b8 <__smakebuf_r+0x44>
 80037a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037a8:	059a      	lsls	r2, r3, #22
 80037aa:	d4ef      	bmi.n	800378c <__smakebuf_r+0x18>
 80037ac:	f023 0303 	bic.w	r3, r3, #3
 80037b0:	f043 0302 	orr.w	r3, r3, #2
 80037b4:	81a3      	strh	r3, [r4, #12]
 80037b6:	e7e3      	b.n	8003780 <__smakebuf_r+0xc>
 80037b8:	4b0d      	ldr	r3, [pc, #52]	; (80037f0 <__smakebuf_r+0x7c>)
 80037ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80037bc:	89a3      	ldrh	r3, [r4, #12]
 80037be:	6020      	str	r0, [r4, #0]
 80037c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c4:	81a3      	strh	r3, [r4, #12]
 80037c6:	9b00      	ldr	r3, [sp, #0]
 80037c8:	6163      	str	r3, [r4, #20]
 80037ca:	9b01      	ldr	r3, [sp, #4]
 80037cc:	6120      	str	r0, [r4, #16]
 80037ce:	b15b      	cbz	r3, 80037e8 <__smakebuf_r+0x74>
 80037d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037d4:	4630      	mov	r0, r6
 80037d6:	f000 f889 	bl	80038ec <_isatty_r>
 80037da:	b128      	cbz	r0, 80037e8 <__smakebuf_r+0x74>
 80037dc:	89a3      	ldrh	r3, [r4, #12]
 80037de:	f023 0303 	bic.w	r3, r3, #3
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	81a3      	strh	r3, [r4, #12]
 80037e8:	89a0      	ldrh	r0, [r4, #12]
 80037ea:	4305      	orrs	r5, r0
 80037ec:	81a5      	strh	r5, [r4, #12]
 80037ee:	e7cd      	b.n	800378c <__smakebuf_r+0x18>
 80037f0:	08002a69 	.word	0x08002a69

080037f4 <__malloc_lock>:
 80037f4:	4801      	ldr	r0, [pc, #4]	; (80037fc <__malloc_lock+0x8>)
 80037f6:	f7ff ba09 	b.w	8002c0c <__retarget_lock_acquire_recursive>
 80037fa:	bf00      	nop
 80037fc:	200005ac 	.word	0x200005ac

08003800 <__malloc_unlock>:
 8003800:	4801      	ldr	r0, [pc, #4]	; (8003808 <__malloc_unlock+0x8>)
 8003802:	f7ff ba04 	b.w	8002c0e <__retarget_lock_release_recursive>
 8003806:	bf00      	nop
 8003808:	200005ac 	.word	0x200005ac

0800380c <_free_r>:
 800380c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800380e:	2900      	cmp	r1, #0
 8003810:	d044      	beq.n	800389c <_free_r+0x90>
 8003812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003816:	9001      	str	r0, [sp, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	f1a1 0404 	sub.w	r4, r1, #4
 800381e:	bfb8      	it	lt
 8003820:	18e4      	addlt	r4, r4, r3
 8003822:	f7ff ffe7 	bl	80037f4 <__malloc_lock>
 8003826:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <_free_r+0x94>)
 8003828:	9801      	ldr	r0, [sp, #4]
 800382a:	6813      	ldr	r3, [r2, #0]
 800382c:	b933      	cbnz	r3, 800383c <_free_r+0x30>
 800382e:	6063      	str	r3, [r4, #4]
 8003830:	6014      	str	r4, [r2, #0]
 8003832:	b003      	add	sp, #12
 8003834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003838:	f7ff bfe2 	b.w	8003800 <__malloc_unlock>
 800383c:	42a3      	cmp	r3, r4
 800383e:	d908      	bls.n	8003852 <_free_r+0x46>
 8003840:	6825      	ldr	r5, [r4, #0]
 8003842:	1961      	adds	r1, r4, r5
 8003844:	428b      	cmp	r3, r1
 8003846:	bf01      	itttt	eq
 8003848:	6819      	ldreq	r1, [r3, #0]
 800384a:	685b      	ldreq	r3, [r3, #4]
 800384c:	1949      	addeq	r1, r1, r5
 800384e:	6021      	streq	r1, [r4, #0]
 8003850:	e7ed      	b.n	800382e <_free_r+0x22>
 8003852:	461a      	mov	r2, r3
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	b10b      	cbz	r3, 800385c <_free_r+0x50>
 8003858:	42a3      	cmp	r3, r4
 800385a:	d9fa      	bls.n	8003852 <_free_r+0x46>
 800385c:	6811      	ldr	r1, [r2, #0]
 800385e:	1855      	adds	r5, r2, r1
 8003860:	42a5      	cmp	r5, r4
 8003862:	d10b      	bne.n	800387c <_free_r+0x70>
 8003864:	6824      	ldr	r4, [r4, #0]
 8003866:	4421      	add	r1, r4
 8003868:	1854      	adds	r4, r2, r1
 800386a:	42a3      	cmp	r3, r4
 800386c:	6011      	str	r1, [r2, #0]
 800386e:	d1e0      	bne.n	8003832 <_free_r+0x26>
 8003870:	681c      	ldr	r4, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	6053      	str	r3, [r2, #4]
 8003876:	4421      	add	r1, r4
 8003878:	6011      	str	r1, [r2, #0]
 800387a:	e7da      	b.n	8003832 <_free_r+0x26>
 800387c:	d902      	bls.n	8003884 <_free_r+0x78>
 800387e:	230c      	movs	r3, #12
 8003880:	6003      	str	r3, [r0, #0]
 8003882:	e7d6      	b.n	8003832 <_free_r+0x26>
 8003884:	6825      	ldr	r5, [r4, #0]
 8003886:	1961      	adds	r1, r4, r5
 8003888:	428b      	cmp	r3, r1
 800388a:	bf04      	itt	eq
 800388c:	6819      	ldreq	r1, [r3, #0]
 800388e:	685b      	ldreq	r3, [r3, #4]
 8003890:	6063      	str	r3, [r4, #4]
 8003892:	bf04      	itt	eq
 8003894:	1949      	addeq	r1, r1, r5
 8003896:	6021      	streq	r1, [r4, #0]
 8003898:	6054      	str	r4, [r2, #4]
 800389a:	e7ca      	b.n	8003832 <_free_r+0x26>
 800389c:	b003      	add	sp, #12
 800389e:	bd30      	pop	{r4, r5, pc}
 80038a0:	200005b0 	.word	0x200005b0

080038a4 <_read_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4d07      	ldr	r5, [pc, #28]	; (80038c4 <_read_r+0x20>)
 80038a8:	4604      	mov	r4, r0
 80038aa:	4608      	mov	r0, r1
 80038ac:	4611      	mov	r1, r2
 80038ae:	2200      	movs	r2, #0
 80038b0:	602a      	str	r2, [r5, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f7fd f87e 	bl	80009b4 <_read>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	d102      	bne.n	80038c2 <_read_r+0x1e>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	b103      	cbz	r3, 80038c2 <_read_r+0x1e>
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	bd38      	pop	{r3, r4, r5, pc}
 80038c4:	200005b8 	.word	0x200005b8

080038c8 <_fstat_r>:
 80038c8:	b538      	push	{r3, r4, r5, lr}
 80038ca:	4d07      	ldr	r5, [pc, #28]	; (80038e8 <_fstat_r+0x20>)
 80038cc:	2300      	movs	r3, #0
 80038ce:	4604      	mov	r4, r0
 80038d0:	4608      	mov	r0, r1
 80038d2:	4611      	mov	r1, r2
 80038d4:	602b      	str	r3, [r5, #0]
 80038d6:	f7fd f8b2 	bl	8000a3e <_fstat>
 80038da:	1c43      	adds	r3, r0, #1
 80038dc:	d102      	bne.n	80038e4 <_fstat_r+0x1c>
 80038de:	682b      	ldr	r3, [r5, #0]
 80038e0:	b103      	cbz	r3, 80038e4 <_fstat_r+0x1c>
 80038e2:	6023      	str	r3, [r4, #0]
 80038e4:	bd38      	pop	{r3, r4, r5, pc}
 80038e6:	bf00      	nop
 80038e8:	200005b8 	.word	0x200005b8

080038ec <_isatty_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	4d06      	ldr	r5, [pc, #24]	; (8003908 <_isatty_r+0x1c>)
 80038f0:	2300      	movs	r3, #0
 80038f2:	4604      	mov	r4, r0
 80038f4:	4608      	mov	r0, r1
 80038f6:	602b      	str	r3, [r5, #0]
 80038f8:	f7fd f8b1 	bl	8000a5e <_isatty>
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	d102      	bne.n	8003906 <_isatty_r+0x1a>
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	b103      	cbz	r3, 8003906 <_isatty_r+0x1a>
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	bd38      	pop	{r3, r4, r5, pc}
 8003908:	200005b8 	.word	0x200005b8

0800390c <_init>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr

08003918 <_fini>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr
